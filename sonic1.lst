00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 50FF FE00 0000 0000 0000+  Vectors:	dc.l 'P'<<24|$FFFE00,		'O'<<24|EntryPoint,	'Y'<<24|BusError,	'S'<<24|AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l 'U'<<24|IllegalInstr,	'F'<<24|ZeroDivide,	'O'<<24|ChkInstr,	'K'<<24|TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|PrivilegeViol,	'F'<<24|Trace,		'U'<<24|Line1010Emu,	'I'<<24|Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|ErrorExcept,	' '<<24|ErrorExcept,	'R'<<24|ErrorExcept,	'N'<<24|ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|'H'<<24|ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l 'B'<<24|ErrorExcept,	'O'<<24|ErrorExcept,	'I'<<24|ErrorExcept,	'L'<<24|ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l 'H'<<24|ErrorExcept,	'I'<<24|ErrorTrap,	'M'<<24|ErrorTrap,	' '<<24|ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l ' '<<24|PalToCRAM,		PalToCRAM,		' '<<24|vBlankRoutine,	vBlankRoutine
00000080 5768 6174 2069 7320 6120+  		dc.b 'What is a hex editor? A miserable little detector of secrets!   But enough talk,fuck off you!'
000000DD 2020 2020 2020 2020 2020+  		dcb.b $100-*,' '
00000100 2053 4547 4141 4141 4141+  Console:	dc.b ' SEGAAAAAAAAAAAA' ; NOTE: " SEGA" is valid for the TMSS, but not for some other stuff, namely the game genie
00000110 4141 4141 4141 4141 4141+  Date:		dc.b 'AAAAAAAAAAAAAAAA'
00000120 4966 2079 6F75 2063 616E+  Title_Local:	dc.b 'If you can see this, your emulator is homoerotic' ; Domestic name
00000150                            		dcb.b $150-*,' '
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood'
0000017E 2020                       		dcb.b $180-*,' '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'	; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A4A 4A4A 4A4A 4A4A 4A4A+  		dcb.b $1A0-*,'J'	; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 6964 6B20 6920 7370 656E+  Notes:		dc.b 'idk i spent all my  mental budget on the other stuff'
000001F0                            		dcb.b $1F0-*,' '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            	even
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E                            GameInit:
0000033E 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000344 7E00                       		moveq	#0,d7
00000346 3C3C 3F7F                  		move.w	#$3F7F,d6
0000034A                            
0000034A                            GameClrRAM:
0000034A 2CC7                       		move.l	d7,(a6)+
0000034C 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000350                            
00000350 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000356 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000035E                            
0000035E 6100 0000                  		bsr.w	VDPSetupGame
00000362 6100 0000                  		bsr.w	SoundDriverLoad
00000366 6100 0000                  		bsr.w	JoypadInit
0000036A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000370                            
00000370 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000378 6700 0000                  		beq.w	@nosplashscreens	; if yes, branch
0000037C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w	; set flag so checksum won't be run again
00000384 1039 00A1 0001             		move.b	($A10001).l,d0
0000038A 0240 000F                  		and.w	#$F,d0
0000038E 6700                       		beq.s	@notmss
00000390 4EB9 0000 0000             		jsr	GM_AntiTMSS
00000396                            @notmss:
00000396                            @nosplashscreens:
00000396                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000396                            
00000396                            MainGameLoop:
00000396 707E                       		moveq	#$7E,d0
00000398 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
0000039C 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A0 60F4                       		bra.s	MainGameLoop
000003A2                            ; ===========================================================================
000003A2                            ; ---------------------------------------------------------------------------
000003A2                            ; Main game mode array
000003A2                            ; ---------------------------------------------------------------------------
000003A2                            
000003A2                            GameModeArray:
000003A2 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	Level	; Normal Level ($0C)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003B6                            ; ===========================================================================
000003B6 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003BA                            ; ===========================================================================
000003BA 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003BE                            ; ===========================================================================
000003BE 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C2                            ; ===========================================================================
000003C2 6000 0000                  		bra.w	jmpto_Minecraft	; Minecraft ($20)
000003C6                            ; ===========================================================================
000003C6 6000 0000                  		bra.w	jmpto_BeeBush   ; BeeBush ($24)	
000003CA                            ; ===========================================================================
000003CA                            ; uuuuuuuuuuuuuuuuuuuuuuuuuuuuu
000003CA                            
000003CA                            jmpto_Minecraft:
000003CA 4EF9 0000 0000             		jmp     Minecraft
000003D0                            
000003D0                            jmpto_BeeBush:
000003D0 4EF9 0000 0000             		jmp     GM_BEEBUSH
000003D6                            
000003D6                            
000003D6                            CheckSumError:
000003D6 6100 0000                  		bsr.w	VDPSetupGame
000003DA 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003E4 7E3F                       		moveq	#$3F,d7
000003E6                            
000003E6                            CheckSum_Red:
000003E6 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003EE 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003F2                            
000003F2                            CheckSum_Loop:
000003F2 60FE                       		bra.s	CheckSum_Loop
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            BusError:
000003F4 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            AddressError:
000003FC 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000402 6000                       		bra.s	loc_43A
00000404                            ; ===========================================================================
00000404                            
00000404                            IllegalInstr:
00000404 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000040A 54AF 0002                  		addq.l	#2,2(sp)
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ZeroDivide:
00000410 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            ChkInstr:
00000418 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            TrapvInstr:
00000420 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            PrivilegeViol:
00000428 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Trace:
00000430 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            Line1010Emu:
00000438 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
0000043E 54AF 0002                  		addq.l	#2,2(sp)
00000442 6000                       		bra.s	loc_462
00000444                            ; ===========================================================================
00000444                            
00000444                            Line1111Emu:
00000444 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000044A 54AF 0002                  		addq.l	#2,2(sp)
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            ErrorExcept:
00000450 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000456 6000                       		bra.s	loc_462
00000458                            ; ===========================================================================
00000458                            
00000458                            loc_43A:
00000458 46FC 2700                  		move	#$2700,sr
0000045C 544F                       		addq.w	#2,sp
0000045E 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000462 544F                       		addq.w	#2,sp
00000464 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046A 6100 0000                  		bsr.w	ShowErrorMsg
0000046E 202F 0002                  		move.l	2(sp),d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000047A 6100 0000                  		bsr.w	sub_5BA
0000047E 6000                       		bra.s	loc_478
00000480                            ; ===========================================================================
00000480                            
00000480                            loc_462:
00000480 46FC 2700                  		move	#$2700,sr
00000484 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000048A 6100 0000                  		bsr.w	ShowErrorMsg
0000048E 202F 0002                  		move.l	2(sp),d0
00000492 6100 0000                  		bsr.w	sub_5BA
00000496                            
00000496                            loc_478:
00000496 6100 0000                  		bsr.w	ErrorWaitForC
0000049A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000004A0 46FC 2300                  		move	#$2300,sr
000004A4 4E73                       		rte	
000004A6                            
000004A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004A6                            
000004A6                            
000004A6                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004A6 4DF9 00C0 0000             		lea	($C00000).l,a6
000004AC 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004B6 41F9 0000 0000             		lea	(Art_ErrText).l,a0
000004BC 323C 027F                  		move.w	#$27F,d1
000004C0                            
000004C0                            Error_LoadGfx:
000004C0 3C98                       		move.w	(a0)+,(a6)
000004C2 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004C6 7000                       		moveq	#0,d0		; clear	d0
000004C8 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004CC 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004D0 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004D4 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004DE 7212                       		moveq	#$12,d1		; number of characters
000004E0                            
000004E0                            Error_LoopChars:
000004E0 7000                       		moveq	#0,d0
000004E2 1018                       		move.b	(a0)+,d0
000004E4 0640 0790                  		addi.w	#$790,d0
000004E8 3C80                       		move.w	d0,(a6)
000004EA 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004EE 4E75                       		rts	
000004F0                            ; End of function ShowErrorMsg
000004F0                            
000004F0                            ; ===========================================================================
000004F0 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004F4 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F8 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004FC 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000500 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000504 0000                       		dc.w asc_5A6-ErrorText
00000506 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000519 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000052C 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
0000053F 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000552 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000565 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000578 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000058B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000059E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005B1 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005C4 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D8 00                         		even
000005D8                            
000005D8                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D8                            
000005D8                            
000005D8                            sub_5BA:				; XREF: loc_43A; loc_462
000005D8 3CBC 07CA                  		move.w	#$7CA,(a6)
000005DC 7407                       		moveq	#7,d2
000005DE                            
000005DE                            loc_5C0:
000005DE E998                       		rol.l	#4,d0
000005E0 6100                       		bsr.s	sub_5CA
000005E2 51CA FFFA                  		dbf	d2,loc_5C0
000005E6 4E75                       		rts	
000005E8                            ; End of function sub_5BA
000005E8                            
000005E8                            
000005E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E8                            
000005E8                            
000005E8                            sub_5CA:				; XREF: sub_5BA
000005E8 3200                       		move.w	d0,d1
000005EA 0241 000F                  		andi.w	#$F,d1
000005EE 0C41 000A                  		cmpi.w	#$A,d1
000005F2 6500                       		bcs.s	loc_5D8
000005F4 5E41                       		addq.w	#7,d1
000005F6                            
000005F6                            loc_5D8:
000005F6 0641 07C0                  		addi.w	#$7C0,d1
000005FA 3C81                       		move.w	d1,(a6)
000005FC 4E75                       		rts	
000005FE                            ; End of function sub_5CA
000005FE                            
000005FE                            
000005FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005FE                            
000005FE                            
000005FE                            ErrorWaitForC:				; XREF: loc_478
000005FE 6100 0000                  		bsr.w	ReadJoypads
00000602 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000608 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000060C 4E75                       		rts	
0000060E                            ; End of function ErrorWaitForC
0000060E                            
0000060E                            ; ===========================================================================
0000060E                            Art_ErrText:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D4E                            Art_ErrText_end:		even
00000D4E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
0000148E                            Art_Text_end:		even
0000148E                            
0000148E                            ; ===========================================================================
0000148E                            ;VBlank
0000148E                            loc_B10:				; XREF: Vectors
0000148E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001492 4A38 F62A                  		tst.b	($FFFFF62A).w
00001496 6700                       		beq.s	loc_B88
00001498 3039 00C0 0004             		move.w	($C00004).l,d0
0000149E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000014A8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000014B0                            ;		btst	#6,($FFFFFFF8).w
000014B0                            ;		beq.s	loc_B42
000014B0                            ;		move.w	#$700,d0
000014B0                            ;
000014B0                            ;loc_B3E:
000014B0                            ;		dbf	d0,loc_B3E
000014B0                            
000014B0                            ;loc_B42:
000014B0 1038 F62A                  		move.b	($FFFFF62A).w,d0
000014B4 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
000014BA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000014C0 0240 003E                  		andi.w	#$3E,d0
000014C4 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
000014C8 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
000014CC                            
000014CC                            loc_B5E:				; XREF: loc_B88
000014CC 4EB9 0000 0000             		jsr	sub_71B4C
000014D2                            
000014D2                            loc_B64:				; XREF: loc_D50
000014D2 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
000014D6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000014DA 4E73                       		rte	
000014DC                            ; ===========================================================================
000014DC                            ; THIS SUCKS
000014DC =0000001A                  VBLNO_BEEBUSH        EQU         13*2
000014DC =0000001C                  VBLNO_BEEBUSHSCR     EQU         14*2
000014DC                            
000014DC 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
000014E0 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
000014E4 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
000014E8 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
000014EC 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
000014F0 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
000014F4 0000                       		dc.w loc_E72-off_B6E
000014F6 0000                       		dc.w jmpto_VBLANK_BEEBUSH-off_B6E
000014F8 0000                       		dc.w jmpto_VBLANK_BEEBUSHSCR-off_B6E
000014FA                            
000014FA                            ; ===========================================================================
000014FA                            
000014FA                            loc_B88:				; XREF: loc_B10; off_B6E
000014FA 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00001500 6700                       		beq.s	loc_B9A
00001502 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00001508 6600 FFC2                  		bne.w	loc_B5E
0000150C                            
0000150C                            loc_B9A:
0000150C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00001512 6600 FFB8                  		bne.w	loc_B5E		; if not, branch
00001516 3039 00C0 0004             		move.w	($C00004).l,d0
0000151C                            ;		btst	#6,($FFFFFFF8).w
0000151C                            ;		beq.s	loc_BBA
0000151C                            ;		move.w	#$700,d0
0000151C                            ;
0000151C                            ;loc_BB6:
0000151C                            ;		dbf	d0,loc_BB6
0000151C                            ;
0000151C                            ;loc_BBA:
0000151C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00001522 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000152A                            
0000152A                            loc_BC8:
0000152A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00001532 66F6                       		bne.s	loc_BC8
00001534 4A38 F64E                  		tst.b	($FFFFF64E).w
00001538 6600                       		bne.s	loc_BFE
0000153A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001540 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001546 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000154C 3ABC 977F                  		move.w	#$977F,(a5)
00001550 3ABC C000                  		move.w	#$C000,(a5)
00001554 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000155A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000155E 6000                       		bra.s	loc_C22
00001560                            ; ===========================================================================
00001560                            
00001560                            loc_BFE:				; XREF: loc_BC8
00001560 4BF9 00C0 0004             		lea	($C00004).l,a5
00001566 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000156C 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001572 3ABC 977F                  		move.w	#$977F,(a5)
00001576 3ABC C000                  		move.w	#$C000,(a5)
0000157A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001580 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001584                            
00001584                            loc_C22:				; XREF: loc_BC8
00001584 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001588 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001590 6000 FF3A                  		bra.w	loc_B5E
00001594                            ; ===========================================================================
00001594                            
00001594                            loc_C32:				; XREF: off_B6E
00001594 6100 0000                  		bsr.w	sub_106E
00001598                            
00001598                            loc_C36:				; XREF: off_B6E
00001598 4A78 F614                  		tst.w	($FFFFF614).w
0000159C 6700 0000                  		beq.w	locret_C42
000015A0 5378 F614                  		subq.w	#1,($FFFFF614).w
000015A4                            
000015A4                            locret_C42:
000015A4 4E75                       		rts	
000015A6                            ; ===========================================================================
000015A6                            
000015A6                            loc_C44:				; XREF: off_B6E
000015A6 6100 0000                  		bsr.w	sub_106E
000015AA 6100 0000                  		bsr.w	sub_6886
000015AE 6100 0000                  		bsr.w	sub_1642
000015B2 4A78 F614                  		tst.w	($FFFFF614).w
000015B6 6700 0000                  		beq.w	locret_C5C
000015BA 5378 F614                  		subq.w	#1,($FFFFF614).w
000015BE                            
000015BE                            locret_C5C:
000015BE 4E75                       		rts	
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; SOOOO GROSS!!!
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            jmpto_VBLANK_BEEBUSH:
000015C0 4EF9 0000 0000             	jmp VBLANK_BEEBUSH
000015C6                            
000015C6                            jmpto_VBLANK_BEEBUSHSCR:
000015C6 4EF9 0000 0000             	jmp VBLANK_BEEBUSHSCR
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ===========================================================================
000015CC                            
000015CC                            loc_C5E:				; XREF: off_B6E
000015CC 6100 0000                  		bsr.w	sub_106E
000015D0 4E75                       		rts	
000015D2                            ; ===========================================================================
000015D2                            
000015D2                            loc_C64:				; XREF: off_B6E
000015D2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
000015D8 6700 0000                  		beq.w	loc_DA6		; if yes, branch
000015DC                            
000015DC                            loc_C6E:				; XREF: off_B6E
000015DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000015E4                            
000015E4                            loc_C76:
000015E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000015EC 66F6                       		bne.s	loc_C76		; if not, branch
000015EE 6100 0000                  		bsr.w	ReadJoypads
000015F2 4A38 F64E                  		tst.b	($FFFFF64E).w
000015F6 6600                       		bne.s	loc_CB0
000015F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000015FE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001604 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000160A 3ABC 977F                  		move.w	#$977F,(a5)
0000160E 3ABC C000                  		move.w	#$C000,(a5)
00001612 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001618 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000161C 6000                       		bra.s	loc_CD4
0000161E                            ; ===========================================================================
0000161E                            
0000161E                            loc_CB0:				; XREF: loc_C76
0000161E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001624 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000162A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001630 3ABC 977F                  		move.w	#$977F,(a5)
00001634 3ABC C000                  		move.w	#$C000,(a5)
00001638 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000163E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001642                            
00001642                            loc_CD4:				; XREF: loc_C76
00001642 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001646 4BF9 00C0 0004             		lea	($C00004).l,a5
0000164C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001652 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001658 3ABC 977F                  		move.w	#$977F,(a5)
0000165C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001660 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001666 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000166A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001670 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001676 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000167C 3ABC 977F                  		move.w	#$977F,(a5)
00001680 3ABC 7800                  		move.w	#$7800,(a5)
00001684 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000168A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000168E 4A38 F767                  		tst.b	($FFFFF767).w
00001692 6700                       		beq.s	loc_D50
00001694 4BF9 00C0 0004             		lea	($C00004).l,a5
0000169A 2ABC 9401 9370             		move.l	#$94019370,(a5)
000016A0 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000016A6 3ABC 977F                  		move.w	#$977F,(a5)
000016AA 3ABC 7000                  		move.w	#$7000,(a5)
000016AE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000016B4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000016B8 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000016BE                            
000016BE                            loc_D50:
000016BE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000016C6 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000016CC 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000016D2 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000016D8 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000016DE 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
000016E4 6400                       		bcc.s	Demo_Time
000016E6 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
000016EC 588F                       		addq.l	#4,sp
000016EE 6000 FDE2                  		bra.w	loc_B64
000016F2                            
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            ; Subroutine to	run a demo for an amount of time
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            
000016F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F2                            
000016F2                            
000016F2                            Demo_Time:				; XREF: loc_D50; PalToCRAM
000016F2 6100 0000                  		bsr.w	LoadTilesAsYouMove
000016F6 4EB9 0000 0000             		jsr	AniArt_Load
000016FC 4EB9 0000 0000             		jsr	HudUpdate
00001702 6100 0000                  		bsr.w	sub_165E
00001706 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000170A 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
0000170E 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00001712                            
00001712                            Demo_TimeEnd:
00001712 4E75                       		rts	
00001714                            ; End of function Demo_Time
00001714                            
00001714                            ; ===========================================================================
00001714                            
00001714                            loc_DA6:				; XREF: off_B6E
00001714 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000171C                            
0000171C                            loc_DAE:
0000171C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001724 66F6                       		bne.s	loc_DAE		; if not, branch
00001726 6100 0000                  		bsr.w	ReadJoypads
0000172A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001730 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001736 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000173C 3ABC 977F                  		move.w	#$977F,(a5)
00001740 3ABC C000                  		move.w	#$C000,(a5)
00001744 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000174A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000174E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001754 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000175A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001760 3ABC 977F                  		move.w	#$977F,(a5)
00001764 3ABC 7800                  		move.w	#$7800,(a5)
00001768 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000176E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001772 4BF9 00C0 0004             		lea	($C00004).l,a5
00001778 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000177E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001784 3ABC 977F                  		move.w	#$977F,(a5)
00001788 3ABC 7C00                  		move.w	#$7C00,(a5)
0000178C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001792 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001796 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000179E 6100 0000                  		bsr.w	PalCycle_SS
000017A2 4A38 F767                  		tst.b	($FFFFF767).w
000017A6 6700                       		beq.s	loc_E64
000017A8 4BF9 00C0 0004             		lea	($C00004).l,a5
000017AE 2ABC 9401 9370             		move.l	#$94019370,(a5)
000017B4 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000017BA 3ABC 977F                  		move.w	#$977F,(a5)
000017BE 3ABC 7000                  		move.w	#$7000,(a5)
000017C2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000017C8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000017CC 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000017D2                            
000017D2                            loc_E64:
000017D2 4A78 F614                  		tst.w	($FFFFF614).w
000017D6 6700 0000                  		beq.w	locret_E70
000017DA 5378 F614                  		subq.w	#1,($FFFFF614).w
000017DE                            
000017DE                            locret_E70:
000017DE 4E75                       		rts	
000017E0                            ; ===========================================================================
000017E0                            
000017E0                            loc_E72:				; XREF: off_B6E
000017E0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000017E8                            
000017E8                            loc_E7A:
000017E8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000017F0 66F6                       		bne.s	loc_E7A		; if not, branch
000017F2 6100 0000                  		bsr.w	ReadJoypads
000017F6 4A38 F64E                  		tst.b	($FFFFF64E).w
000017FA 6600                       		bne.s	loc_EB4
000017FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001802 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001808 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000180E 3ABC 977F                  		move.w	#$977F,(a5)
00001812 3ABC C000                  		move.w	#$C000,(a5)
00001816 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000181C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001820 6000                       		bra.s	loc_ED8
00001822                            ; ===========================================================================
00001822                            
00001822                            loc_EB4:				; XREF: loc_E7A
00001822 4BF9 00C0 0004             		lea	($C00004).l,a5
00001828 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000182E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001834 3ABC 977F                  		move.w	#$977F,(a5)
00001838 3ABC C000                  		move.w	#$C000,(a5)
0000183C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001842 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001846                            
00001846                            loc_ED8:				; XREF: loc_E7A
00001846 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000184A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001850 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001856 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000185C                            
0000185C                            loc_EEE:
0000185C 3ABC 977F                  		move.w	#$977F,(a5)
00001860 3ABC 7C00                  		move.w	#$7C00,(a5)
00001864 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000186A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000186E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001874 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000187A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001880 3ABC 977F                  		move.w	#$977F,(a5)
00001884 3ABC 7800                  		move.w	#$7800,(a5)
00001888 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000188E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001892 4A38 F767                  		tst.b	($FFFFF767).w
00001896 6700                       		beq.s	loc_F54
00001898 4BF9 00C0 0004             		lea	($C00004).l,a5
0000189E 2ABC 9401 9370             		move.l	#$94019370,(a5)
000018A4 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000018AA 3ABC 977F                  		move.w	#$977F,(a5)
000018AE 3ABC 7000                  		move.w	#$7000,(a5)
000018B2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000018B8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000018BC 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000018C2                            
000018C2                            loc_F54:
000018C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000018CA 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000018D0 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000018D6 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000018DC 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000018E2 6100 0000                  		bsr.w	LoadTilesAsYouMove
000018E6 4EB9 0000 0000             		jsr	AniArt_Load
000018EC 4EB9 0000 0000             		jsr	HudUpdate
000018F2 6100 0000                  		bsr.w	sub_1642
000018F6 4E75                       		rts	
000018F8                            ; ===========================================================================
000018F8                            
000018F8                            loc_F8A:				; XREF: off_B6E
000018F8 6100 0000                  		bsr.w	sub_106E
000018FC 5238 F628                  		addq.b	#1,($FFFFF628).w
00001900 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00001906 4E75                       		rts	
00001908                            ; ===========================================================================
00001908                            
00001908                            loc_F9A:				; XREF: off_B6E
00001908 6100 0000                  		bsr.w	sub_106E
0000190C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001910 6000 0000                  		bra.w	sub_1642
00001914                            ; ===========================================================================
00001914                            
00001914                            loc_FA6:				; XREF: off_B6E
00001914 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000191C                            
0000191C                            loc_FAE:
0000191C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001924 66F6                       		bne.s	loc_FAE		; if not, branch
00001926 6100 0000                  		bsr.w	ReadJoypads
0000192A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001930 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001936 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000193C 3ABC 977F                  		move.w	#$977F,(a5)
00001940 3ABC C000                  		move.w	#$C000,(a5)
00001944 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000194A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000194E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001954 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000195A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001960 3ABC 977F                  		move.w	#$977F,(a5)
00001964 3ABC 7800                  		move.w	#$7800,(a5)
00001968 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000196E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001972 4BF9 00C0 0004             		lea	($C00004).l,a5
00001978 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000197E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001984 3ABC 977F                  		move.w	#$977F,(a5)
00001988 3ABC 7C00                  		move.w	#$7C00,(a5)
0000198C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001992 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001996 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000199E 4A38 F767                  		tst.b	($FFFFF767).w
000019A2 6700                       		beq.s	loc_1060
000019A4 4BF9 00C0 0004             		lea	($C00004).l,a5
000019AA 2ABC 9401 9370             		move.l	#$94019370,(a5)
000019B0 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000019B6 3ABC 977F                  		move.w	#$977F,(a5)
000019BA 3ABC 7000                  		move.w	#$7000,(a5)
000019BE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000019C4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019C8 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000019CE                            
000019CE                            loc_1060:
000019CE 4A78 F614                  		tst.w	($FFFFF614).w
000019D2 6700 0000                  		beq.w	locret_106C
000019D6 5378 F614                  		subq.w	#1,($FFFFF614).w
000019DA                            
000019DA                            locret_106C:
000019DA 4E75                       		rts	
000019DC                            
000019DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019DC                            
000019DC                            
000019DC                            sub_106E:				; XREF: loc_C32; et al
000019DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000019E4                            
000019E4                            loc_1076:
000019E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000019EC 66F6                       		bne.s	loc_1076	; if not, branch
000019EE 6100 0000                  		bsr.w	ReadJoypads
000019F2 4A38 F64E                  		tst.b	($FFFFF64E).w
000019F6 6600                       		bne.s	loc_10B0
000019F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000019FE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001A04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001A0A 3ABC 977F                  		move.w	#$977F,(a5)
00001A0E 3ABC C000                  		move.w	#$C000,(a5)
00001A12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001A18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A1C 6000                       		bra.s	loc_10D4
00001A1E                            ; ===========================================================================
00001A1E                            
00001A1E                            loc_10B0:				; XREF: sub_106E
00001A1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001A24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001A2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001A30 3ABC 977F                  		move.w	#$977F,(a5)
00001A34 3ABC C000                  		move.w	#$C000,(a5)
00001A38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001A3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A42                            
00001A42                            loc_10D4:				; XREF: sub_106E
00001A42 4BF9 00C0 0004             		lea	($C00004).l,a5
00001A48 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001A4E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001A54 3ABC 977F                  		move.w	#$977F,(a5)
00001A58 3ABC 7800                  		move.w	#$7800,(a5)
00001A5C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001A62 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A66 4BF9 00C0 0004             		lea	($C00004).l,a5
00001A6C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001A72 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001A78 3ABC 977F                  		move.w	#$977F,(a5)
00001A7C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001A80 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001A86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A8A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001A92 4E75                       		rts	
00001A94                            ; End of function sub_106E
00001A94                            
00001A94                            ; ---------------------------------------------------------------------------
00001A94                            ; Subroutine to	move pallets from the RAM to CRAM
00001A94                            ; ---------------------------------------------------------------------------
00001A94                            
00001A94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A94                            
00001A94                            
00001A94                            PalToCRAM:
00001A94 46FC 2700                  		move	#$2700,sr
00001A98 4A78 F644                  		tst.w	($FFFFF644).w
00001A9C 6700                       		beq.s	locret_119C
00001A9E 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001AA4 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001AA8 43F9 00C0 0000             		lea	($C00000).l,a1
00001AAE 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001AB2 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001ABA 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001ABC 2298                       		move.l	(a0)+,(a1)
00001ABE 2298                       		move.l	(a0)+,(a1)
00001AC0 2298                       		move.l	(a0)+,(a1)
00001AC2 2298                       		move.l	(a0)+,(a1)
00001AC4 2298                       		move.l	(a0)+,(a1)
00001AC6 2298                       		move.l	(a0)+,(a1)
00001AC8 2298                       		move.l	(a0)+,(a1)
00001ACA 2298                       		move.l	(a0)+,(a1)
00001ACC 2298                       		move.l	(a0)+,(a1)
00001ACE 2298                       		move.l	(a0)+,(a1)
00001AD0 2298                       		move.l	(a0)+,(a1)
00001AD2 2298                       		move.l	(a0)+,(a1)
00001AD4 2298                       		move.l	(a0)+,(a1)
00001AD6 2298                       		move.l	(a0)+,(a1)
00001AD8 2298                       		move.l	(a0)+,(a1)
00001ADA 2298                       		move.l	(a0)+,(a1)
00001ADC 2298                       		move.l	(a0)+,(a1)
00001ADE 2298                       		move.l	(a0)+,(a1)
00001AE0 2298                       		move.l	(a0)+,(a1)
00001AE2 2298                       		move.l	(a0)+,(a1)
00001AE4 2298                       		move.l	(a0)+,(a1)
00001AE6 2298                       		move.l	(a0)+,(a1)
00001AE8 2298                       		move.l	(a0)+,(a1)
00001AEA 2298                       		move.l	(a0)+,(a1)
00001AEC 2298                       		move.l	(a0)+,(a1)
00001AEE 2298                       		move.l	(a0)+,(a1)
00001AF0 2298                       		move.l	(a0)+,(a1)
00001AF2 2298                       		move.l	(a0)+,(a1)
00001AF4 2298                       		move.l	(a0)+,(a1)
00001AF6 2298                       		move.l	(a0)+,(a1)
00001AF8 2298                       		move.l	(a0)+,(a1)
00001AFA 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001B00 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001B04 4A38 F64F                  		tst.b	($FFFFF64F).w
00001B08 6600                       		bne.s	loc_119E
00001B0A                            
00001B0A                            locret_119C:
00001B0A 4E73                       		rte	
00001B0C                            ; ===========================================================================
00001B0C                            
00001B0C                            loc_119E:				; XREF: PalToCRAM
00001B0C 4238 F64F                  		clr.b	($FFFFF64F).w
00001B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001B14 6100 FBDC                  		bsr.w	Demo_Time
00001B18 4EB9 0000 0000             		jsr	sub_71B4C
00001B1E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001B22 4E73                       		rte	
00001B24                            ; End of function PalToCRAM
00001B24                            
00001B24                            ; ---------------------------------------------------------------------------
00001B24                            ; Subroutine to	initialise joypads
00001B24                            ; ---------------------------------------------------------------------------
00001B24                            
00001B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B24                            
00001B24                            
00001B24                            JoypadInit:				; XREF: GameClrRAM
00001B24 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001B2C                            
00001B2C                            Joypad_WaitZ80:
00001B2C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001B34 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001B36 7040                       		moveq	#$40,d0
00001B38 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001B3E 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001B44 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001B4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001B52 4E75                       		rts	
00001B54                            ; End of function JoypadInit
00001B54                            
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            ; Subroutine to	read joypad input, and send it to the RAM
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            
00001B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B54                            
00001B54                            
00001B54                            ReadJoypads:
00001B54 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001B58 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001B5E 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001B60 5449                       		addq.w	#2,a1		; do the second	joypad
00001B62                            
00001B62                            Joypad_Read:
00001B62 12BC 0000                  		move.b	#0,(a1)
00001B66 4E71                       		nop	
00001B68 4E71                       		nop	
00001B6A 1011                       		move.b	(a1),d0
00001B6C E508                       		lsl.b	#2,d0
00001B6E 0200 00C0                  		andi.b	#$C0,d0
00001B72 12BC 0040                  		move.b	#$40,(a1)
00001B76 4E71                       		nop	
00001B78 4E71                       		nop	
00001B7A 1211                       		move.b	(a1),d1
00001B7C 0201 003F                  		andi.b	#$3F,d1
00001B80 8001                       		or.b	d1,d0
00001B82 4600                       		not.b	d0
00001B84 1210                       		move.b	(a0),d1
00001B86 B101                       		eor.b	d0,d1
00001B88 10C0                       		move.b	d0,(a0)+
00001B8A C200                       		and.b	d0,d1
00001B8C 10C1                       		move.b	d1,(a0)+
00001B8E 4E75                       		rts	
00001B90                            ; End of function ReadJoypads
00001B90                            
00001B90                            
00001B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B90                            
00001B90                            
00001B90                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001B90 41F9 00C0 0004             		lea	($C00004).l,a0
00001B96 43F9 00C0 0000             		lea	($C00000).l,a1
00001B9C 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001BA2 7E12                       		moveq	#$12,d7
00001BA4                            
00001BA4                            VDP_Loop:
00001BA4 309A                       		move.w	(a2)+,(a0)
00001BA6 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001BAA                            
00001BAA 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001BB0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
00001BB6 6700                       		beq.s	.UseV28			; If not, skip
00001BB8 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001BBC                            .UseV28:
00001BBC 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001BC0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001BC6 7000                       		moveq	#0,d0
00001BC8 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001BD2 3E3C 003F                  		move.w	#$3F,d7
00001BD6                            
00001BD6                            VDP_ClrCRAM:
00001BD6 3280                       		move.w	d0,(a1)
00001BD8 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001BDC                            
00001BDC 42B8 F616                  		clr.l	($FFFFF616).w
00001BE0 42B8 F61A                  		clr.l	($FFFFF61A).w
00001BE4 2F01                       		move.l	d1,-(sp)
00001BE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BEC 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BF0 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001BF6 3ABC 9780                  		move.w	#$9780,(a5)
00001BFA 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001C00 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001C08                            
00001C08                            loc_128E:
00001C08 3215                       		move.w	(a5),d1
00001C0A 0801 0001                  		btst	#1,d1
00001C0E 66F8                       		bne.s	loc_128E
00001C10                            
00001C10 3ABC 8F02                  		move.w	#$8F02,(a5)
00001C14 221F                       		move.l	(sp)+,d1
00001C16 4E75                       		rts	
00001C18                            ; End of function VDPSetupGame
00001C18                            
00001C18                            ; ===========================================================================
00001C18 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001C20 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001C28 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001C30 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001C38 9001 9100 9200             		dc.w $9001, $9100, $9200
00001C3E                            
00001C3E                            ; ---------------------------------------------------------------------------
00001C3E                            ; Subroutine to	clear the screen
00001C3E                            ; ---------------------------------------------------------------------------
00001C3E                            
00001C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C3E                            
00001C3E                            InitScreen:
00001C3E                            ClearScreen:
00001C3E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001C44 3ABC 8F01                  		move.w	#$8F01,(a5)
00001C48 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001C4E 3ABC 9780                  		move.w	#$9780,(a5)
00001C52 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001C58 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001C60                            
00001C60                            loc_12E6:
00001C60 3215                       		move.w	(a5),d1
00001C62 0801 0001                  		btst	#1,d1
00001C66 66F8                       		bne.s	loc_12E6
00001C68                            
00001C68 3ABC 8F02                  		move.w	#$8F02,(a5)
00001C6C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001C72 3ABC 8F01                  		move.w	#$8F01,(a5)
00001C76 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001C7C 3ABC 9780                  		move.w	#$9780,(a5)
00001C80 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001C86 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001C8E                            
00001C8E                            loc_1314:
00001C8E 3215                       		move.w	(a5),d1
00001C90 0801 0001                  		btst	#1,d1
00001C94 66F8                       		bne.s	loc_1314
00001C96                            
00001C96 3ABC 8F02                  		move.w	#$8F02,(a5)
00001C9A 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001CA2 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001CAA 43F8 F800                  		lea	($FFFFF800).w,a1
00001CAE 7000                       		moveq	#0,d0
00001CB0 323C 009F                  		move.w	#$9F,d1
00001CB4                            
00001CB4                            loc_133A:
00001CB4 22C0                       		move.l	d0,(a1)+
00001CB6 51C9 FFFC                  		dbf	d1,loc_133A
00001CBA                            
00001CBA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001CBE 7000                       		moveq	#0,d0
00001CC0 323C 00FF                  		move.w	#$FF,d1
00001CC4                            
00001CC4                            loc_134A:
00001CC4 22C0                       		move.l	d0,(a1)+
00001CC6 51C9 FFFC                  		dbf	d1,loc_134A
00001CCA 4E75                       		rts	
00001CCC                            ; End of function ClearScreen
00001CCC                            
00001CCC                            ; ---------------------------------------------------------------------------
00001CCC                            ; Subroutine to	load the sound driver
00001CCC                            ; ---------------------------------------------------------------------------
00001CCC                            
00001CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCC                            
00001CCC                            
00001CCC                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001CCC 4E71                       		nop	
00001CCE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001CD6 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001CDE 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001CE4 43F9 00A0 0000             		lea	($A00000).l,a1
00001CEA 6100 0000                  		bsr.w	KosDec		; decompress
00001CEE 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001CF6 4E71                       		nop	
00001CF8 4E71                       		nop	
00001CFA 4E71                       		nop	
00001CFC 4E71                       		nop	
00001CFE 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001D06 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001D0E 4E75                       		rts	
00001D10                            ; End of function SoundDriverLoad
00001D10                            
00001D10                            ; ---------------------------------------------------------------------------
00001D10                            ; Subroutine to	play a sound or	music track
00001D10                            ; ---------------------------------------------------------------------------
00001D10                            
00001D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D10                            
00001D10                            
00001D10                            PlaySound:
00001D10 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001D14 4E75                       		rts	
00001D16                            ; End of function PlaySound
00001D16                            
00001D16                            ; ---------------------------------------------------------------------------
00001D16                            ; Subroutine to	play a special sound/music (E0-E4)
00001D16                            ;
00001D16                            ; E0 - Fade out
00001D16                            ; E1 - Sega
00001D16                            ; E2 - Speed up
00001D16                            ; E3 - Normal speed
00001D16                            ; E4 - Stop
00001D16                            ; ---------------------------------------------------------------------------
00001D16                            
00001D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D16                            
00001D16                            
00001D16                            PlaySound_Special:
00001D16 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001D1A 4E75                       		rts	
00001D1C                            ; End of function PlaySound_Special
00001D1C                            
00001D1C                            ; ===========================================================================
00001D1C                            ; ---------------------------------------------------------------------------
00001D1C                            ; Unused sound/music subroutine
00001D1C                            ; ---------------------------------------------------------------------------
00001D1C                            
00001D1C                            PlaySound_Unk:
00001D1C 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001D20 4E75                       		rts	
00001D22                            
00001D22                            ; ---------------------------------------------------------------------------
00001D22                            ; Subroutine to	pause the game
00001D22                            ; ---------------------------------------------------------------------------
00001D22                            
00001D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D22                            
00001D22                            
00001D22                            PauseGame:				; XREF: Level_MainLoop; et al
00001D22 4E71                       		nop	
00001D24 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001D28 6700                       		beq.s	Unpause		; if not, branch
00001D2A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001D2E 6600                       		bne.s	loc_13BE	; if yes, branch
00001D30 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001D36 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001D38                            
00001D38                            loc_13BE:
00001D38 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001D3E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001D44                            
00001D44                            loc_13CA:
00001D44 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001D4A 6100 0000                  		bsr.w	DelayProgram
00001D4E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001D52 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001D54 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001D5A 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001D5C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001D62 4E71                       		nop	
00001D64 6000                       		bra.s	loc_1404
00001D66                            ; ===========================================================================
00001D66                            
00001D66                            Pause_ChkBC:				; XREF: PauseGame
00001D66 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001D6C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001D6E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001D74 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001D76                            
00001D76                            Pause_ChkStart:				; XREF: PauseGame
00001D76 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001D7C 67C6                       		beq.s	loc_13CA	; if not, branch
00001D7E                            
00001D7E                            loc_1404:				; XREF: PauseGame
00001D7E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001D84                            
00001D84                            Unpause:				; XREF: PauseGame
00001D84 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001D8A                            
00001D8A                            Pause_DoNothing:			; XREF: PauseGame
00001D8A 4E75                       		rts	
00001D8C                            ; ===========================================================================
00001D8C                            
00001D8C                            Pause_SlowMo:				; XREF: PauseGame
00001D8C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001D92 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001D98 4E75                       		rts	
00001D9A                            ; End of function PauseGame
00001D9A                            
00001D9A                            ; ---------------------------------------------------------------------------
00001D9A                            ; Subroutine to	display	patterns via the VDP
00001D9A                            ; ---------------------------------------------------------------------------
00001D9A                            
00001D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D9A                            
00001D9A                            DrawTileMap:
00001D9A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001D9A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001DA0 283C 0080 0000             		move.l	#$800000,d4
00001DA6                            
00001DA6                            loc_142C:
00001DA6 2D40 0004                  		move.l	d0,4(a6)
00001DAA 3601                       		move.w	d1,d3
00001DAC                            
00001DAC                            loc_1432:
00001DAC 3C99                       		move.w	(a1)+,(a6)
00001DAE 51CB FFFC                  		dbf	d3,loc_1432
00001DB2 D084                       		add.l	d4,d0
00001DB4 51CA FFF0                  		dbf	d2,loc_142C
00001DB8 4E75                       		rts	
00001DBA                            ; End of function ShowVDPGraphics
00001DBA                            
00001DBA                            ; ---------------------------------------------------------------------------
00001DBA                            ; Nemesis decompression	algorithm
00001DBA                            ; ---------------------------------------------------------------------------
00001DBA                            
00001DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DBA                            
00001DBA                            
00001DBA                            NemDec:
00001DBA 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001DBE 47F9 0000 0000             		lea	(loc_1502).l,a3
00001DC4 49F9 00C0 0000             		lea	($C00000).l,a4
00001DCA 6000                       		bra.s	loc_145C
00001DCC                            ; ===========================================================================
00001DCC 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001DD0 47F9 0000 0000             		lea	(loc_1518).l,a3
00001DD6                            
00001DD6                            loc_145C:				; XREF: NemDec
00001DD6 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001DDA 3418                       		move.w	(a0)+,d2
00001DDC E34A                       		lsl.w	#1,d2
00001DDE 6400                       		bcc.s	loc_146A
00001DE0 D6FC 000A                  		adda.w	#$A,a3
00001DE4                            
00001DE4                            loc_146A:
00001DE4 E54A                       		lsl.w	#2,d2
00001DE6 3A42                       		movea.w	d2,a5
00001DE8 7608                       		moveq	#8,d3
00001DEA 7400                       		moveq	#0,d2
00001DEC 7800                       		moveq	#0,d4
00001DEE 6100 0000                  		bsr.w	NemDec4
00001DF2 1A18                       		move.b	(a0)+,d5
00001DF4 E145                       		asl.w	#8,d5
00001DF6 1A18                       		move.b	(a0)+,d5
00001DF8 3C3C 0010                  		move.w	#$10,d6
00001DFC 6100                       		bsr.s	NemDec2
00001DFE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001E02 4E75                       		rts	
00001E04                            ; End of function NemDec
00001E04                            
00001E04                            
00001E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E04                            
00001E04                            
00001E04                            NemDec2:				; XREF: NemDec
00001E04 3E06                       		move.w	d6,d7
00001E06 5147                       		subq.w	#8,d7
00001E08 3205                       		move.w	d5,d1
00001E0A EE69                       		lsr.w	d7,d1
00001E0C 0C01 00FC                  		cmpi.b	#-4,d1
00001E10 6400                       		bcc.s	loc_14D6
00001E12 0241 00FF                  		andi.w	#$FF,d1
00001E16 D241                       		add.w	d1,d1
00001E18 1031 1000                  		move.b	(a1,d1.w),d0
00001E1C 4880                       		ext.w	d0
00001E1E 9C40                       		sub.w	d0,d6
00001E20 0C46 0009                  		cmpi.w	#9,d6
00001E24 6400                       		bcc.s	loc_14B2
00001E26 5046                       		addq.w	#8,d6
00001E28 E145                       		asl.w	#8,d5
00001E2A 1A18                       		move.b	(a0)+,d5
00001E2C                            
00001E2C                            loc_14B2:
00001E2C 1231 1001                  		move.b	1(a1,d1.w),d1
00001E30 3001                       		move.w	d1,d0
00001E32 0241 000F                  		andi.w	#$F,d1
00001E36 0240 00F0                  		andi.w	#$F0,d0
00001E3A                            
00001E3A                            loc_14C0:				; XREF: NemDec3
00001E3A E848                       		lsr.w	#4,d0
00001E3C                            
00001E3C                            loc_14C2:				; XREF: NemDec3
00001E3C E98C                       		lsl.l	#4,d4
00001E3E 8801                       		or.b	d1,d4
00001E40 5343                       		subq.w	#1,d3
00001E42 6600                       		bne.s	loc_14D0
00001E44 4ED3                       		jmp	(a3)
00001E46                            ; End of function NemDec2
00001E46                            
00001E46                            
00001E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E46                            
00001E46                            
00001E46                            NemDec3:				; XREF: loc_1502
00001E46 7800                       		moveq	#0,d4
00001E48 7608                       		moveq	#8,d3
00001E4A                            
00001E4A                            loc_14D0:				; XREF: NemDec2
00001E4A 51C8 FFF0                  		dbf	d0,loc_14C2
00001E4E 60B4                       		bra.s	NemDec2
00001E50                            ; ===========================================================================
00001E50                            
00001E50                            loc_14D6:				; XREF: NemDec2
00001E50 5D46                       		subq.w	#6,d6
00001E52 0C46 0009                  		cmpi.w	#9,d6
00001E56 6400                       		bcc.s	loc_14E4
00001E58 5046                       		addq.w	#8,d6
00001E5A E145                       		asl.w	#8,d5
00001E5C 1A18                       		move.b	(a0)+,d5
00001E5E                            
00001E5E                            loc_14E4:				; XREF: NemDec3
00001E5E 5F46                       		subq.w	#7,d6
00001E60 3205                       		move.w	d5,d1
00001E62 EC69                       		lsr.w	d6,d1
00001E64 3001                       		move.w	d1,d0
00001E66 0241 000F                  		andi.w	#$F,d1
00001E6A 0240 0070                  		andi.w	#$70,d0
00001E6E 0C46 0009                  		cmpi.w	#9,d6
00001E72 64C6                       		bcc.s	loc_14C0
00001E74 5046                       		addq.w	#8,d6
00001E76 E145                       		asl.w	#8,d5
00001E78 1A18                       		move.b	(a0)+,d5
00001E7A 60BE                       		bra.s	loc_14C0
00001E7C                            ; End of function NemDec3
00001E7C                            
00001E7C                            ; ===========================================================================
00001E7C                            
00001E7C                            loc_1502:				; XREF: NemDec
00001E7C 2884                       		move.l	d4,(a4)
00001E7E 534D                       		subq.w	#1,a5
00001E80 380D                       		move.w	a5,d4
00001E82 66C2                       		bne.s	NemDec3
00001E84 4E75                       		rts	
00001E86                            ; ===========================================================================
00001E86 B982                       		eor.l	d4,d2
00001E88 2882                       		move.l	d2,(a4)
00001E8A 534D                       		subq.w	#1,a5
00001E8C 380D                       		move.w	a5,d4
00001E8E 66B6                       		bne.s	NemDec3
00001E90 4E75                       		rts	
00001E92                            ; ===========================================================================
00001E92                            
00001E92                            loc_1518:				; XREF: NemDec
00001E92 28C4                       		move.l	d4,(a4)+
00001E94 534D                       		subq.w	#1,a5
00001E96 380D                       		move.w	a5,d4
00001E98 66AC                       		bne.s	NemDec3
00001E9A 4E75                       		rts	
00001E9C                            ; ===========================================================================
00001E9C B982                       		eor.l	d4,d2
00001E9E 28C2                       		move.l	d2,(a4)+
00001EA0 534D                       		subq.w	#1,a5
00001EA2 380D                       		move.w	a5,d4
00001EA4 66A0                       		bne.s	NemDec3
00001EA6 4E75                       		rts	
00001EA8                            
00001EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA8                            
00001EA8                            
00001EA8                            NemDec4:				; XREF: NemDec
00001EA8 1018                       		move.b	(a0)+,d0
00001EAA                            
00001EAA                            loc_1530:
00001EAA 0C00 00FF                  		cmpi.b	#-1,d0
00001EAE 6600                       		bne.s	loc_1538
00001EB0 4E75                       		rts	
00001EB2                            ; ===========================================================================
00001EB2                            
00001EB2                            loc_1538:				; XREF: NemDec4
00001EB2 3E00                       		move.w	d0,d7
00001EB4                            
00001EB4                            loc_153A:
00001EB4 1018                       		move.b	(a0)+,d0
00001EB6 0C00 0080                  		cmpi.b	#$80,d0
00001EBA 64EE                       		bcc.s	loc_1530
00001EBC 1200                       		move.b	d0,d1
00001EBE 0247 000F                  		andi.w	#$F,d7
00001EC2 0241 0070                  		andi.w	#$70,d1
00001EC6 8E41                       		or.w	d1,d7
00001EC8 0240 000F                  		andi.w	#$F,d0
00001ECC 1200                       		move.b	d0,d1
00001ECE E149                       		lsl.w	#8,d1
00001ED0 8E41                       		or.w	d1,d7
00001ED2 7208                       		moveq	#8,d1
00001ED4 9240                       		sub.w	d0,d1
00001ED6 6600                       		bne.s	loc_1568
00001ED8 1018                       		move.b	(a0)+,d0
00001EDA D040                       		add.w	d0,d0
00001EDC 3387 0000                  		move.w	d7,(a1,d0.w)
00001EE0 60D2                       		bra.s	loc_153A
00001EE2                            ; ===========================================================================
00001EE2                            
00001EE2                            loc_1568:				; XREF: NemDec4
00001EE2 1018                       		move.b	(a0)+,d0
00001EE4 E368                       		lsl.w	d1,d0
00001EE6 D040                       		add.w	d0,d0
00001EE8 7A01                       		moveq	#1,d5
00001EEA E36D                       		lsl.w	d1,d5
00001EEC 5345                       		subq.w	#1,d5
00001EEE                            
00001EEE                            loc_1574:
00001EEE 3387 0000                  		move.w	d7,(a1,d0.w)
00001EF2 5440                       		addq.w	#2,d0
00001EF4 51CD FFF8                  		dbf	d5,loc_1574
00001EF8 60BA                       		bra.s	loc_153A
00001EFA                            ; End of function NemDec4
00001EFA                            
00001EFA                            ; ---------------------------------------------------------------------------
00001EFA                            ; Subroutine to	load pattern load cues
00001EFA                            ; ---------------------------------------------------------------------------
00001EFA                            
00001EFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EFA                            
00001EFA                            LoadArtList: 
00001EFA                            LoadPLC:
00001EFA 48E7 0060                  		movem.l	a1-a2,-(sp)
00001EFE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001F04 D040                       		add.w	d0,d0
00001F06 3031 0000                  		move.w	(a1,d0.w),d0
00001F0A 43F1 0000                  		lea	(a1,d0.w),a1
00001F0E 45F8 F680                  		lea	($FFFFF680).w,a2
00001F12                            
00001F12                            loc_1598:
00001F12 4A92                       		tst.l	(a2)
00001F14 6700                       		beq.s	loc_15A0
00001F16 5C4A                       		addq.w	#6,a2
00001F18 60F8                       		bra.s	loc_1598
00001F1A                            ; ===========================================================================
00001F1A                            
00001F1A                            loc_15A0:				; XREF: LoadPLC
00001F1A 3019                       		move.w	(a1)+,d0
00001F1C 6B00                       		bmi.s	loc_15AC
00001F1E                            
00001F1E                            loc_15A4:
00001F1E 24D9                       		move.l	(a1)+,(a2)+
00001F20 34D9                       		move.w	(a1)+,(a2)+
00001F22 51C8 FFFA                  		dbf	d0,loc_15A4
00001F26                            
00001F26                            loc_15AC:
00001F26 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001F2A 4E75                       		rts	
00001F2C                            ; End of function LoadPLC
00001F2C                            
00001F2C                            
00001F2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F2C                            
00001F2C                            InitArtList: 
00001F2C                            LoadPLC2:
00001F2C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001F30 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001F36 D040                       		add.w	d0,d0
00001F38 3031 0000                  		move.w	(a1,d0.w),d0
00001F3C 43F1 0000                  		lea	(a1,d0.w),a1
00001F40 6100                       		bsr.s	ClearPLC
00001F42 45F8 F680                  		lea	($FFFFF680).w,a2
00001F46 3019                       		move.w	(a1)+,d0
00001F48 6B00                       		bmi.s	loc_15D8
00001F4A                            
00001F4A                            loc_15D0:
00001F4A 24D9                       		move.l	(a1)+,(a2)+
00001F4C 34D9                       		move.w	(a1)+,(a2)+
00001F4E 51C8 FFFA                  		dbf	d0,loc_15D0
00001F52                            
00001F52                            loc_15D8:
00001F52 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001F56 4E75                       		rts	
00001F58                            ; End of function LoadPLC2
00001F58                            
00001F58                            ; ---------------------------------------------------------------------------
00001F58                            ; Subroutine to	clear the pattern load cues
00001F58                            ; ---------------------------------------------------------------------------
00001F58                            
00001F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F58                            
00001F58                            ClearArtListQueue:
00001F58                            ClearPLC:				; XREF: LoadPLC2
00001F58 45F8 F680                  		lea	($FFFFF680).w,a2
00001F5C 701F                       		moveq	#$1F,d0
00001F5E                            
00001F5E                            ClearPLC_Loop:
00001F5E 429A                       		clr.l	(a2)+
00001F60 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001F64 4E75                       		rts	
00001F66                            ; End of function ClearPLC
00001F66                            
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            ; Subroutine to	use graphics listed in a pattern load cue
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            
00001F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F66                            
00001F66                            ProcessArtLoading: 
00001F66                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001F66 4AB8 F680                  		tst.l	($FFFFF680).w
00001F6A 6700                       		beq.s	locret_1640
00001F6C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F70 6600                       		bne.s	locret_1640
00001F72 2078 F680                  		movea.l	($FFFFF680).w,a0
00001F76 47F9 0000 1E7C             		lea	(loc_1502).l,a3
00001F7C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001F80 3418                       		move.w	(a0)+,d2
00001F82 6A00                       		bpl.s	loc_160E
00001F84 D6FC 000A                  		adda.w	#$A,a3
00001F88                            
00001F88                            loc_160E:
00001F88 0242 7FFF                  		andi.w	#$7FFF,d2
00001F8C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001F90 6100 FF16                  		bsr.w	NemDec4
00001F94 1A18                       		move.b	(a0)+,d5
00001F96 E145                       		asl.w	#8,d5
00001F98 1A18                       		move.b	(a0)+,d5
00001F9A 7C10                       		moveq	#$10,d6
00001F9C 7000                       		moveq	#0,d0
00001F9E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001FA2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001FA6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001FAA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001FAE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001FB2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001FB6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001FBA                            
00001FBA                            locret_1640:
00001FBA 4E75                       		rts	
00001FBC                            ; End of function RunPLC_RAM
00001FBC                            
00001FBC                            
00001FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FBC                            
00001FBC                            
00001FBC                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001FBC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001FC0 6700 0000                  		beq.w	locret_16DA
00001FC4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001FCA 7000                       		moveq	#0,d0
00001FCC 3038 F684                  		move.w	($FFFFF684).w,d0
00001FD0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001FD6 6000                       		bra.s	loc_1676
00001FD8                            ; End of function sub_1642
00001FD8                            
00001FD8                            
00001FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FD8                            
00001FD8                            
00001FD8                            sub_165E:				; XREF: Demo_Time
00001FD8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001FDC 6700                       		beq.s	locret_16DA
00001FDE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001FE4 7000                       		moveq	#0,d0
00001FE6 3038 F684                  		move.w	($FFFFF684).w,d0
00001FEA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001FF0                            
00001FF0                            loc_1676:				; XREF: sub_1642
00001FF0 49F9 00C0 0004             		lea	($C00004).l,a4
00001FF6 E588                       		lsl.l	#2,d0
00001FF8 E448                       		lsr.w	#2,d0
00001FFA 0040 4000                  		ori.w	#$4000,d0
00001FFE 4840                       		swap	d0
00002000 2880                       		move.l	d0,(a4)
00002002 594C                       		subq.w	#4,a4
00002004 2078 F680                  		movea.l	($FFFFF680).w,a0
00002008 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
0000200C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00002010 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00002014 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00002018 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000201C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00002020 43F8 AA00                  		lea	($FFFFAA00).w,a1
00002024                            
00002024                            loc_16AA:				; XREF: sub_165E
00002024 3A7C 0008                  		movea.w	#8,a5
00002028 6100 FE1C                  		bsr.w	NemDec3
0000202C 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00002030 6700                       		beq.s	loc_16DC
00002032 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00002036 66EC                       		bne.s	loc_16AA
00002038 21C8 F680                  		move.l	a0,($FFFFF680).w
0000203C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00002040 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00002044 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00002048 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000204C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00002050 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00002054                            
00002054                            locret_16DA:				; XREF: sub_1642
00002054 4E75                       		rts	
00002056                            ; ===========================================================================
00002056                            
00002056                            loc_16DC:				; XREF: sub_165E
00002056 41F8 F680                  		lea	($FFFFF680).w,a0
0000205A 7015                       		moveq	#$15,d0
0000205C                            
0000205C                            loc_16E2:				; XREF: sub_165E
0000205C 20E8 0006                  		move.l	6(a0),(a0)+
00002060 51C8 FFFA                  		dbf	d0,loc_16E2
00002064 4E75                       		rts	
00002066                            ; End of function sub_165E
00002066                            
00002066                            ; ---------------------------------------------------------------------------
00002066                            ; Subroutine to	execute	the pattern load cue
00002066                            ; ---------------------------------------------------------------------------
00002066                            
00002066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002066                            
00002066                            
00002066                            RunPLC_ROM:
00002066 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000206C D040                       		add.w	d0,d0
0000206E 3031 0000                  		move.w	(a1,d0.w),d0
00002072 43F1 0000                  		lea	(a1,d0.w),a1
00002076 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00002078                            
00002078                            RunPLC_Loop:
00002078 2059                       		movea.l	(a1)+,a0	; get art pointer
0000207A 7000                       		moveq	#0,d0
0000207C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000207E E588                       		lsl.l	#2,d0		; divide address by $20
00002080 E448                       		lsr.w	#2,d0
00002082 0040 4000                  		ori.w	#$4000,d0
00002086 4840                       		swap	d0
00002088 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000208E 6100 FD2A                  		bsr.w	NemDec		; decompress
00002092 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00002096 4E75                       		rts	
00002098                            ; End of function RunPLC_ROM
00002098                            
00002098                            ; ---------------------------------------------------------------------------
00002098                            ; Enigma decompression algorithm
00002098                            ; ---------------------------------------------------------------------------
00002098                            
00002098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002098                            
00002098                            
00002098                            EniDec:
00002098 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000209C 3640                       		movea.w	d0,a3
0000209E 1018                       		move.b	(a0)+,d0
000020A0 4880                       		ext.w	d0
000020A2 3A40                       		movea.w	d0,a5
000020A4 1818                       		move.b	(a0)+,d4
000020A6 E70C                       		lsl.b	#3,d4
000020A8 3458                       		movea.w	(a0)+,a2
000020AA D4CB                       		adda.w	a3,a2
000020AC 3858                       		movea.w	(a0)+,a4
000020AE D8CB                       		adda.w	a3,a4
000020B0 1A18                       		move.b	(a0)+,d5
000020B2 E145                       		asl.w	#8,d5
000020B4 1A18                       		move.b	(a0)+,d5
000020B6 7C10                       		moveq	#$10,d6
000020B8                            
000020B8                            loc_173E:				; XREF: loc_1768
000020B8 7007                       		moveq	#7,d0
000020BA 3E06                       		move.w	d6,d7
000020BC 9E40                       		sub.w	d0,d7
000020BE 3205                       		move.w	d5,d1
000020C0 EE69                       		lsr.w	d7,d1
000020C2 0241 007F                  		andi.w	#$7F,d1
000020C6 3401                       		move.w	d1,d2
000020C8 0C41 0040                  		cmpi.w	#$40,d1
000020CC 6400                       		bcc.s	loc_1758
000020CE 7006                       		moveq	#6,d0
000020D0 E24A                       		lsr.w	#1,d2
000020D2                            
000020D2                            loc_1758:
000020D2 6100 0000                  		bsr.w	sub_188C
000020D6 0242 000F                  		andi.w	#$F,d2
000020DA E849                       		lsr.w	#4,d1
000020DC D241                       		add.w	d1,d1
000020DE 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000020E2                            ; End of function EniDec
000020E2                            
000020E2                            ; ===========================================================================
000020E2                            
000020E2                            loc_1768:				; XREF: loc_17B4
000020E2 32CA                       		move.w	a2,(a1)+
000020E4 524A                       		addq.w	#1,a2
000020E6 51CA FFFA                  		dbf	d2,loc_1768
000020EA 60CC                       		bra.s	loc_173E
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1772:				; XREF: loc_17B4
000020EC 32CC                       		move.w	a4,(a1)+
000020EE 51CA FFFC                  		dbf	d2,loc_1772
000020F2 60C4                       		bra.s	loc_173E
000020F4                            ; ===========================================================================
000020F4                            
000020F4                            loc_177A:				; XREF: loc_17B4
000020F4 6100 0000                  		bsr.w	loc_17DC
000020F8                            
000020F8                            loc_177E:
000020F8 32C1                       		move.w	d1,(a1)+
000020FA 51CA FFFC                  		dbf	d2,loc_177E
000020FE 60B8                       		bra.s	loc_173E
00002100                            ; ===========================================================================
00002100                            
00002100                            loc_1786:				; XREF: loc_17B4
00002100 6100 0000                  		bsr.w	loc_17DC
00002104                            
00002104                            loc_178A:
00002104 32C1                       		move.w	d1,(a1)+
00002106 5241                       		addq.w	#1,d1
00002108 51CA FFFA                  		dbf	d2,loc_178A
0000210C 60AA                       		bra.s	loc_173E
0000210E                            ; ===========================================================================
0000210E                            
0000210E                            loc_1794:				; XREF: loc_17B4
0000210E 6100 0000                  		bsr.w	loc_17DC
00002112                            
00002112                            loc_1798:
00002112 32C1                       		move.w	d1,(a1)+
00002114 5341                       		subq.w	#1,d1
00002116 51CA FFFA                  		dbf	d2,loc_1798
0000211A 609C                       		bra.s	loc_173E
0000211C                            ; ===========================================================================
0000211C                            
0000211C                            loc_17A2:				; XREF: loc_17B4
0000211C 0C42 000F                  		cmpi.w	#$F,d2
00002120 6700                       		beq.s	loc_17C4
00002122                            
00002122                            loc_17A8:
00002122 6100 0000                  		bsr.w	loc_17DC
00002126 32C1                       		move.w	d1,(a1)+
00002128 51CA FFF8                  		dbf	d2,loc_17A8
0000212C 608A                       		bra.s	loc_173E
0000212E                            ; ===========================================================================
0000212E                            
0000212E                            loc_17B4:				; XREF: EniDec
0000212E 60B2                       		bra.s	loc_1768
00002130                            ; ===========================================================================
00002130 60B0                       		bra.s	loc_1768
00002132                            ; ===========================================================================
00002132 60B8                       		bra.s	loc_1772
00002134                            ; ===========================================================================
00002134 60B6                       		bra.s	loc_1772
00002136                            ; ===========================================================================
00002136 60BC                       		bra.s	loc_177A
00002138                            ; ===========================================================================
00002138 60C6                       		bra.s	loc_1786
0000213A                            ; ===========================================================================
0000213A 60D2                       		bra.s	loc_1794
0000213C                            ; ===========================================================================
0000213C 60DE                       		bra.s	loc_17A2
0000213E                            ; ===========================================================================
0000213E                            
0000213E                            loc_17C4:				; XREF: loc_17A2
0000213E 5348                       		subq.w	#1,a0
00002140 0C46 0010                  		cmpi.w	#$10,d6
00002144 6600                       		bne.s	loc_17CE
00002146 5348                       		subq.w	#1,a0
00002148                            
00002148                            loc_17CE:
00002148 3008                       		move.w	a0,d0
0000214A E248                       		lsr.w	#1,d0
0000214C 6400                       		bcc.s	loc_17D6
0000214E 5248                       		addq.w	#1,a0
00002150                            
00002150                            loc_17D6:
00002150 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00002154 4E75                       		rts	
00002156                            ; ===========================================================================
00002156                            
00002156                            loc_17DC:				; XREF: loc_17A2
00002156 360B                       		move.w	a3,d3
00002158 1204                       		move.b	d4,d1
0000215A D201                       		add.b	d1,d1
0000215C 6400                       		bcc.s	loc_17EE
0000215E 5346                       		subq.w	#1,d6
00002160 0D05                       		btst	d6,d5
00002162 6700                       		beq.s	loc_17EE
00002164 0043 8000                  		ori.w	#-$8000,d3
00002168                            
00002168                            loc_17EE:
00002168 D201                       		add.b	d1,d1
0000216A 6400                       		bcc.s	loc_17FC
0000216C 5346                       		subq.w	#1,d6
0000216E 0D05                       		btst	d6,d5
00002170 6700                       		beq.s	loc_17FC
00002172 0643 4000                  		addi.w	#$4000,d3
00002176                            
00002176                            loc_17FC:
00002176 D201                       		add.b	d1,d1
00002178 6400                       		bcc.s	loc_180A
0000217A 5346                       		subq.w	#1,d6
0000217C 0D05                       		btst	d6,d5
0000217E 6700                       		beq.s	loc_180A
00002180 0643 2000                  		addi.w	#$2000,d3
00002184                            
00002184                            loc_180A:
00002184 D201                       		add.b	d1,d1
00002186 6400                       		bcc.s	loc_1818
00002188 5346                       		subq.w	#1,d6
0000218A 0D05                       		btst	d6,d5
0000218C 6700                       		beq.s	loc_1818
0000218E 0043 1000                  		ori.w	#$1000,d3
00002192                            
00002192                            loc_1818:
00002192 D201                       		add.b	d1,d1
00002194 6400                       		bcc.s	loc_1826
00002196 5346                       		subq.w	#1,d6
00002198 0D05                       		btst	d6,d5
0000219A 6700                       		beq.s	loc_1826
0000219C 0043 0800                  		ori.w	#$800,d3
000021A0                            
000021A0                            loc_1826:
000021A0 3205                       		move.w	d5,d1
000021A2 3E06                       		move.w	d6,d7
000021A4 9E4D                       		sub.w	a5,d7
000021A6 6400                       		bcc.s	loc_1856
000021A8 3C07                       		move.w	d7,d6
000021AA 0646 0010                  		addi.w	#$10,d6
000021AE 4447                       		neg.w	d7
000021B0 EF69                       		lsl.w	d7,d1
000021B2 1A10                       		move.b	(a0),d5
000021B4 EF3D                       		rol.b	d7,d5
000021B6 DE47                       		add.w	d7,d7
000021B8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000021BC D245                       		add.w	d5,d1
000021BE                            
000021BE                            loc_1844:				; XREF: loc_1868
000021BE 300D                       		move.w	a5,d0
000021C0 D040                       		add.w	d0,d0
000021C2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000021C6 D243                       		add.w	d3,d1
000021C8 1A18                       		move.b	(a0)+,d5
000021CA E14D                       		lsl.w	#8,d5
000021CC 1A18                       		move.b	(a0)+,d5
000021CE 4E75                       		rts	
000021D0                            ; ===========================================================================
000021D0                            
000021D0                            loc_1856:				; XREF: loc_1826
000021D0 6700                       		beq.s	loc_1868
000021D2 EE69                       		lsr.w	d7,d1
000021D4 300D                       		move.w	a5,d0
000021D6 D040                       		add.w	d0,d0
000021D8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000021DC D243                       		add.w	d3,d1
000021DE 300D                       		move.w	a5,d0
000021E0 6000                       		bra.s	sub_188C
000021E2                            ; ===========================================================================
000021E2                            
000021E2                            loc_1868:				; XREF: loc_1856
000021E2 7C10                       		moveq	#$10,d6
000021E4                            
000021E4                            loc_186A:
000021E4 60D8                       		bra.s	loc_1844
000021E6                            ; ===========================================================================
000021E6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000021FC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00002206                            
00002206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002206                            
00002206                            
00002206                            sub_188C:				; XREF: EniDec
00002206 9C40                       		sub.w	d0,d6
00002208 0C46 0009                  		cmpi.w	#9,d6
0000220C 6400                       		bcc.s	locret_189A
0000220E 5046                       		addq.w	#8,d6
00002210 E145                       		asl.w	#8,d5
00002212 1A18                       		move.b	(a0)+,d5
00002214                            
00002214                            locret_189A:
00002214 4E75                       		rts	
00002216                            ; End of function sub_188C
00002216                            
00002216                            ; ---------------------------------------------------------------------------
00002216                            ; Kosinski decompression algorithm
00002216                            ; ---------------------------------------------------------------------------
00002216                            
00002216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002216                            
00002216                            
00002216                            KosDec:
00002216                            
00002216 =FFFFFFFE                  var_2		= -2
00002216 =FFFFFFFF                  var_1		= -1
00002216                            
00002216 558F                       		subq.l	#2,sp
00002218 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000221C 1E98                       		move.b	(a0)+,(sp)
0000221E 3A17                       		move.w	(sp),d5
00002220 780F                       		moveq	#$F,d4
00002222                            
00002222                            loc_18A8:
00002222 E24D                       		lsr.w	#1,d5
00002224 40C6                       		move	sr,d6
00002226 51CC 0000                  		dbf	d4,loc_18BA
0000222A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000222E 1E98                       		move.b	(a0)+,(sp)
00002230 3A17                       		move.w	(sp),d5
00002232 780F                       		moveq	#$F,d4
00002234                            
00002234                            loc_18BA:
00002234 44C6                       		move	d6,ccr
00002236 6400                       		bcc.s	loc_18C2
00002238 12D8                       		move.b	(a0)+,(a1)+
0000223A 60E6                       		bra.s	loc_18A8
0000223C                            ; ===========================================================================
0000223C                            
0000223C                            loc_18C2:				; XREF: KosDec
0000223C 7600                       		moveq	#0,d3
0000223E E24D                       		lsr.w	#1,d5
00002240 40C6                       		move	sr,d6
00002242 51CC 0000                  		dbf	d4,loc_18D6
00002246 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000224A 1E98                       		move.b	(a0)+,(sp)
0000224C 3A17                       		move.w	(sp),d5
0000224E 780F                       		moveq	#$F,d4
00002250                            
00002250                            loc_18D6:
00002250 44C6                       		move	d6,ccr
00002252 6500                       		bcs.s	loc_1906
00002254 E24D                       		lsr.w	#1,d5
00002256 51CC 0000                  		dbf	d4,loc_18EA
0000225A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000225E 1E98                       		move.b	(a0)+,(sp)
00002260 3A17                       		move.w	(sp),d5
00002262 780F                       		moveq	#$F,d4
00002264                            
00002264                            loc_18EA:
00002264 E353                       		roxl.w	#1,d3
00002266 E24D                       		lsr.w	#1,d5
00002268 51CC 0000                  		dbf	d4,loc_18FC
0000226C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00002270 1E98                       		move.b	(a0)+,(sp)
00002272 3A17                       		move.w	(sp),d5
00002274 780F                       		moveq	#$F,d4
00002276                            
00002276                            loc_18FC:
00002276 E353                       		roxl.w	#1,d3
00002278 5243                       		addq.w	#1,d3
0000227A 74FF                       		moveq	#-1,d2
0000227C 1418                       		move.b	(a0)+,d2
0000227E 6000                       		bra.s	loc_191C
00002280                            ; ===========================================================================
00002280                            
00002280                            loc_1906:				; XREF: loc_18C2
00002280 1018                       		move.b	(a0)+,d0
00002282 1218                       		move.b	(a0)+,d1
00002284 74FF                       		moveq	#-1,d2
00002286 1401                       		move.b	d1,d2
00002288 EB4A                       		lsl.w	#5,d2
0000228A 1400                       		move.b	d0,d2
0000228C 0241 0007                  		andi.w	#7,d1
00002290 6700                       		beq.s	loc_1928
00002292 1601                       		move.b	d1,d3
00002294 5243                       		addq.w	#1,d3
00002296                            
00002296                            loc_191C:
00002296 1031 2000                  		move.b	(a1,d2.w),d0
0000229A 12C0                       		move.b	d0,(a1)+
0000229C 51CB FFF8                  		dbf	d3,loc_191C
000022A0 6080                       		bra.s	loc_18A8
000022A2                            ; ===========================================================================
000022A2                            
000022A2                            loc_1928:				; XREF: loc_1906
000022A2 1218                       		move.b	(a0)+,d1
000022A4 6700                       		beq.s	loc_1938
000022A6 0C01 0001                  		cmpi.b	#1,d1
000022AA 6700 FF76                  		beq.w	loc_18A8
000022AE 1601                       		move.b	d1,d3
000022B0 60E4                       		bra.s	loc_191C
000022B2                            ; ===========================================================================
000022B2                            
000022B2                            loc_1938:				; XREF: loc_1928
000022B2 548F                       		addq.l	#2,sp
000022B4 4E75                       		rts	
000022B6                            ; End of function KosDec
000022B6                            
000022B6                            ; ---------------------------------------------------------------------------
000022B6                            ; Pallet cycling routine loading subroutine
000022B6                            ; ---------------------------------------------------------------------------
000022B6                            
000022B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B6                            
000022B6                            
000022B6                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
000022B6 7400                       		moveq	#0,d2
000022B8 7000                       		moveq	#0,d0
000022BA 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag set?
000022BE 6600                       		bne.s	PalCycle_Stop	; GMZ: If yes, branch
000022C0 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
000022C4 D040                       		add.w	d0,d0		; multiply by 2
000022C6 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
000022CA 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
000022CE                            
000022CE                            PalCycle_Stop:
000022CE 4E75                       		rts
000022D0                            ; End of function PalCycle_Load
000022D0                            
000022D0                            ; ===========================================================================
000022D0                            ; ---------------------------------------------------------------------------
000022D0                            ; Pallet cycling routines
000022D0                            ; ---------------------------------------------------------------------------
000022D0 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
000022D2 0000                       		dc.w PalCycle_LZ-PalCycle
000022D4 0000                       		dc.w PalCycle_MZ-PalCycle
000022D6 0000                       		dc.w PalCycle_SLZ-PalCycle
000022D8 0000                       		dc.w PalCycle_SYZ-PalCycle
000022DA 0000                       		dc.w PalCycle_SBZ-PalCycle
000022DC 0000                       		dc.w PalCycle_GHZ-PalCycle
000022DE 0000                       		dc.w PalCycle_GHZ-PalCycle
000022E0                            
000022E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E0                            
000022E0                            
000022E0                            PalCycle_Title:				; XREF: TitleScreen
000022E0 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
000022E6 6000                       		bra.s	loc_196A
000022E8                            ; ===========================================================================
000022E8                            
000022E8                            PalCycle_GHZ:				; XREF: PalCycle
000022E8 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
000022EE                            
000022EE                            loc_196A:				; XREF: PalCycle_Title
000022EE 5378 F634                  		subq.w	#1,($FFFFF634).w
000022F2 6A00                       		bpl.s	locret_1990
000022F4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000022FA 3038 F632                  		move.w	($FFFFF632).w,d0
000022FE 5278 F632                  		addq.w	#1,($FFFFF632).w
00002302 0240 0003                  		andi.w	#3,d0
00002306 E748                       		lsl.w	#3,d0
00002308 43F8 FB50                  		lea	($FFFFFB50).w,a1
0000230C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002310 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002314                            
00002314                            locret_1990:
00002314 4E75                       		rts	
00002316                            ; End of function PalCycle_Title
00002316                            
00002316                            
00002316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002316                            
00002316                            
00002316                            PalCycle_LZ:				; XREF: PalCycle
00002316 5378 F634                  		subq.w	#1,($FFFFF634).w
0000231A 6A00                       		bpl.s	loc_19D8
0000231C 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00002322 3038 F632                  		move.w	($FFFFF632).w,d0
00002326 5278 F632                  		addq.w	#1,($FFFFF632).w
0000232A 0240 0003                  		andi.w	#3,d0
0000232E E748                       		lsl.w	#3,d0
00002330 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00002336 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
0000233C 6600                       		bne.s	loc_19C0
0000233E 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00002344                            
00002344                            loc_19C0:
00002344 43F8 FB56                  		lea	($FFFFFB56).w,a1
00002348 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000234C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002350 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00002354 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002358 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000235C                            
0000235C                            loc_19D8:
0000235C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00002360 0240 0007                  		andi.w	#7,d0
00002364 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00002368 6700                       		beq.s	locret_1A3A
0000236A 7201                       		moveq	#1,d1
0000236C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00002370 6700                       		beq.s	loc_19F0
00002372 4441                       		neg.w	d1
00002374                            
00002374                            loc_19F0:
00002374 3038 F650                  		move.w	($FFFFF650).w,d0
00002378 0240 0003                  		andi.w	#3,d0
0000237C D041                       		add.w	d1,d0
0000237E 0C40 0003                  		cmpi.w	#3,d0
00002382 6500                       		bcs.s	loc_1A0A
00002384 3200                       		move.w	d0,d1
00002386 7000                       		moveq	#0,d0
00002388 4A41                       		tst.w	d1
0000238A 6A00                       		bpl.s	loc_1A0A
0000238C 7002                       		moveq	#2,d0
0000238E                            
0000238E                            loc_1A0A:
0000238E 31C0 F650                  		move.w	d0,($FFFFF650).w
00002392 D040                       		add.w	d0,d0
00002394 3200                       		move.w	d0,d1
00002396 D040                       		add.w	d0,d0
00002398 D041                       		add.w	d1,d0
0000239A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000023A0 43F8 FB76                  		lea	($FFFFFB76).w,a1
000023A4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000023A8 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000023AC 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
000023B2 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
000023B6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000023BA 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000023BE                            
000023BE                            locret_1A3A:
000023BE 4E75                       		rts	
000023C0                            ; End of function PalCycle_LZ
000023C0                            
000023C0                            ; ===========================================================================
000023C0 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
000023C8                            ; ===========================================================================
000023C8                            
000023C8                            PalCycle_MZ:				; XREF: PalCycle
000023C8 4E75                       		rts	
000023CA                            
000023CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023CA                            
000023CA                            
000023CA                            PalCycle_SLZ:				; XREF: PalCycle
000023CA 4E75                       		rts	
000023CC                            ; End of function PalCycle_SLZ
000023CC                            
000023CC                            
000023CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023CC                            
000023CC                            
000023CC                            PalCycle_SYZ:				; XREF: PalCycle
000023CC 5378 F634                  		subq.w	#1,($FFFFF634).w
000023D0 6A00                       		bpl.s	locret_1AC6
000023D2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000023D8 3038 F632                  		move.w	($FFFFF632).w,d0
000023DC 5278 F632                  		addq.w	#1,($FFFFF632).w
000023E0 0240 0003                  		andi.w	#3,d0
000023E4 E548                       		lsl.w	#2,d0
000023E6 3200                       		move.w	d0,d1
000023E8 D040                       		add.w	d0,d0
000023EA 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
000023F0 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
000023F4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000023F8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000023FC 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00002402 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002406 32B0 1000                  		move.w	(a0,d1.w),(a1)
0000240A 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00002410                            
00002410                            locret_1AC6:
00002410 4E75                       		rts	
00002412                            ; End of function PalCycle_SYZ
00002412                            
00002412                            
00002412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002412                            
00002412                            
00002412                            PalCycle_SBZ:				; XREF: PalCycle
00002412 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00002418 4A38 FE11                  		tst.b	($FFFFFE11).w
0000241C 6700                       		beq.s	loc_1ADA
0000241E 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00002424                            
00002424                            loc_1ADA:
00002424 43F8 F650                  		lea	($FFFFF650).w,a1
00002428 321A                       		move.w	(a2)+,d1
0000242A                            
0000242A                            loc_1AE0:
0000242A 5311                       		subq.b	#1,(a1)
0000242C 6B00                       		bmi.s	loc_1AEA
0000242E 5489                       		addq.l	#2,a1
00002430 5C8A                       		addq.l	#6,a2
00002432 6000                       		bra.s	loc_1B06
00002434                            ; ===========================================================================
00002434                            
00002434                            loc_1AEA:				; XREF: PalCycle_SBZ
00002434 12DA                       		move.b	(a2)+,(a1)+
00002436 1011                       		move.b	(a1),d0
00002438 5200                       		addq.b	#1,d0
0000243A B01A                       		cmp.b	(a2)+,d0
0000243C 6500                       		bcs.s	loc_1AF6
0000243E 7000                       		moveq	#0,d0
00002440                            
00002440                            loc_1AF6:
00002440 12C0                       		move.b	d0,(a1)+
00002442 0240 000F                  		andi.w	#$F,d0
00002446 D040                       		add.w	d0,d0
00002448 305A                       		movea.w	(a2)+,a0
0000244A 365A                       		movea.w	(a2)+,a3
0000244C 36B0 0000                  		move.w	(a0,d0.w),(a3)
00002450                            
00002450                            loc_1B06:				; XREF: PalCycle_SBZ
00002450 51C9 FFD8                  		dbf	d1,loc_1AE0
00002454 5378 F634                  		subq.w	#1,($FFFFF634).w
00002458 6A00                       		bpl.s	locret_1B64
0000245A 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00002460 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00002466 4A38 FE11                  		tst.b	($FFFFFE11).w
0000246A 6700                       		beq.s	loc_1B2E
0000246C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00002472 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002478                            
00002478                            loc_1B2E:
00002478 72FF                       		moveq	#-1,d1
0000247A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0000247E 6700                       		beq.s	loc_1B38
00002480 4441                       		neg.w	d1
00002482                            
00002482                            loc_1B38:
00002482 3038 F632                  		move.w	($FFFFF632).w,d0
00002486 0240 0003                  		andi.w	#3,d0
0000248A D041                       		add.w	d1,d0
0000248C 0C40 0003                  		cmpi.w	#3,d0
00002490 6500                       		bcs.s	loc_1B52
00002492 3200                       		move.w	d0,d1
00002494 7000                       		moveq	#0,d0
00002496 4A41                       		tst.w	d1
00002498 6A00                       		bpl.s	loc_1B52
0000249A 7002                       		moveq	#2,d0
0000249C                            
0000249C                            loc_1B52:
0000249C 31C0 F632                  		move.w	d0,($FFFFF632).w
000024A0 D040                       		add.w	d0,d0
000024A2 43F8 FB58                  		lea	($FFFFFB58).w,a1
000024A6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000024AA 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000024AE                            
000024AE                            locret_1B64:
000024AE 4E75                       		rts	
000024B0                            ; End of function PalCycle_SBZ
000024B0                            
000024B0                            ; ===========================================================================
000024B0                            Pal_TitleCyc:	incbin	pallet\c_title.bin
000024D0                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
000024F0                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00002510                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00002522                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00002534                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
0000259C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
000025C0                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
000025E0                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
000025F0                            
000025F0                            Pal_SBZCycList:
000025F0                            	include "_inc\SBZ pallet script 1.asm"
000025F0                            ; ---------------------------------------------------------------------------
000025F0                            ; Scrap Brain Zone 1 pallet cycling script
000025F0                            ; ---------------------------------------------------------------------------
000025F0 0008                       	dc.w 8			; number of entries - 1
000025F2 0708                       	dc.b 7,	8		; duration in frames, number of	colours
000025F4 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
000025F6 FB50                       	dc.w $FB50		; RAM address
000025F8 0D08                       	dc.b $D, 8
000025FA 0000                       	dc.w Pal_SBZCyc2
000025FC FB52                       	dc.w $FB52
000025FE 0E08                       	dc.b $E, 8
00002600 0000                       	dc.w Pal_SBZCyc3
00002602 FB6E                       	dc.w $FB6E
00002604 0B08                       	dc.b $B, 8
00002606 0000                       	dc.w Pal_SBZCyc5
00002608 FB70                       	dc.w $FB70
0000260A 0708                       	dc.b 7,	8
0000260C 0000                       	dc.w Pal_SBZCyc6
0000260E FB72                       	dc.w $FB72
00002610 1C10                       	dc.b $1C, $10
00002612 0000                       	dc.w Pal_SBZCyc7
00002614 FB7E                       	dc.w $FB7E
00002616 0303                       	dc.b 3,	3
00002618 0000                       	dc.w Pal_SBZCyc8
0000261A FB78                       	dc.w $FB78
0000261C 0303                       	dc.b 3,	3
0000261E 0000                       	dc.w Pal_SBZCyc8+2
00002620 FB7A                       	dc.w $FB7A
00002622 0303                       	dc.b 3,	3
00002624 0000                       	dc.w Pal_SBZCyc8+4
00002626 FB7C                       	dc.w $FB7C
00002628                            	even
00002628                            	even
00002628                            
00002628                            Pal_SBZCycList2:
00002628                            	include "_inc\SBZ pallet script 2.asm"
00002628                            ; ---------------------------------------------------------------------------
00002628                            ; Scrap Brain Zone 2 pallet cycling script
00002628                            ; ---------------------------------------------------------------------------
00002628 0006                       	dc.w 6
0000262A 0708                       	dc.b 7,	8
0000262C 0000                       	dc.w Pal_SBZCyc1
0000262E FB50                       	dc.w $FB50
00002630 0D08                       	dc.b $D, 8
00002632 0000                       	dc.w Pal_SBZCyc2
00002634 FB52                       	dc.w $FB52
00002636 0908                       	dc.b 9,	8
00002638 0000                       	dc.w Pal_SBZCyc9
0000263A FB70                       	dc.w $FB70
0000263C 0708                       	dc.b 7,	8
0000263E 0000                       	dc.w Pal_SBZCyc6
00002640 FB72                       	dc.w $FB72
00002642 0303                       	dc.b 3,	3
00002644 0000                       	dc.w Pal_SBZCyc8
00002646 FB78                       	dc.w $FB78
00002648 0303                       	dc.b 3,	3
0000264A 0000                       	dc.w Pal_SBZCyc8+2
0000264C FB7A                       	dc.w $FB7A
0000264E 0303                       	dc.b 3,	3
00002650 0000                       	dc.w Pal_SBZCyc8+4
00002652 FB7C                       	dc.w $FB7C
00002654                            	even
00002654                            	even
00002654                            
00002654                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00002664                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00002674                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00002684                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00002690                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
000026A0                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
000026B0                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000026D0                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000026DA                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000026EA                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000026F6                            ; ---------------------------------------------------------------------------
000026F6                            ; Subroutine to	fade out and fade in
000026F6                            ; ---------------------------------------------------------------------------
000026F6                            
000026F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026F6                            
000026F6                            
000026F6                            Pal_FadeTo:
000026F6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000026FC                            
000026FC                            Pal_FadeTo2:
000026FC 7000                       		moveq	#0,d0
000026FE 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002702 1038 F626                  		move.b	($FFFFF626).w,d0
00002706 D0C0                       		adda.w	d0,a0
00002708 7200                       		moveq	#0,d1
0000270A 1038 F627                  		move.b	($FFFFF627).w,d0
0000270E                            
0000270E                            Pal_ToBlack:
0000270E 30C1                       		move.w	d1,(a0)+
00002710 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00002714                            
00002714 383C 0015                  		move.w	#$15,d4
00002718 1A3C 0009                  		move.b	#9,d5
0000271C                            
0000271C                            loc_1DCE:
0000271C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002722 6100 0000                  		bsr.w	DelayProgram
00002726 6100                       		bsr.s	Pal_FadeIn
00002728 6100 F83C                  		bsr.w	RunPLC_RAM
0000272C 51CC FFEE                  		dbf	d4,loc_1DCE
00002730 4E75                       		rts	
00002732                            ; End of function Pal_FadeTo
00002732                            
00002732                            ; ---------------------------------------------------------------------------
00002732                            ; Pallet fade-in subroutine
00002732                            ; ---------------------------------------------------------------------------
00002732                            
00002732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002732                            
00002732                            
00002732                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002732 7000                       		moveq	#0,d0
00002734 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002738 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000273C 1038 F626                  		move.b	($FFFFF626).w,d0
00002740 D0C0                       		adda.w	d0,a0
00002742 D2C0                       		adda.w	d0,a1
00002744 1038 F627                  		move.b	($FFFFF627).w,d0
00002748                            
00002748                            loc_1DFA:
00002748 6100                       		bsr.s	Pal_AddColor
0000274A 51C8 FFFC                  		dbf	d0,loc_1DFA
0000274E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002754 6600                       		bne.s	locret_1E24
00002756 7000                       		moveq	#0,d0
00002758 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000275C 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002760 1038 F626                  		move.b	($FFFFF626).w,d0
00002764 D0C0                       		adda.w	d0,a0
00002766 D2C0                       		adda.w	d0,a1
00002768 1038 F627                  		move.b	($FFFFF627).w,d0
0000276C                            
0000276C                            loc_1E1E:
0000276C 6100                       		bsr.s	Pal_AddColor
0000276E 51C8 FFFC                  		dbf	d0,loc_1E1E
00002772                            
00002772                            locret_1E24:
00002772 4E75                       		rts	
00002774                            ; End of function Pal_FadeIn
00002774                            
00002774                            
00002774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002774                            
00002774                            
00002774                            Pal_AddColor:				; XREF: Pal_FadeIn
00002774 3419                       		move.w	(a1)+,d2
00002776 3610                       		move.w	(a0),d3
00002778 B642                       		cmp.w	d2,d3
0000277A 6700                       		beq.s	loc_1E4E
0000277C 3203                       		move.w	d3,d1
0000277E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002782 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002784 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002786 30C1                       		move.w	d1,(a0)+	; update pallet
00002788 4E75                       		rts	
0000278A                            ; ===========================================================================
0000278A                            
0000278A                            Pal_AddGreen:				; XREF: Pal_AddColor
0000278A 3203                       		move.w	d3,d1
0000278C 0641 0020                  		addi.w	#$20,d1		; increase green value
00002790 B242                       		cmp.w	d2,d1
00002792 6200                       		bhi.s	Pal_AddRed
00002794 30C1                       		move.w	d1,(a0)+	; update pallet
00002796 4E75                       		rts	
00002798                            ; ===========================================================================
00002798                            
00002798                            Pal_AddRed:				; XREF: Pal_AddGreen
00002798 5458                       		addq.w	#2,(a0)+	; increase red value
0000279A 4E75                       		rts	
0000279C                            ; ===========================================================================
0000279C                            
0000279C                            loc_1E4E:				; XREF: Pal_AddColor
0000279C 5448                       		addq.w	#2,a0
0000279E 4E75                       		rts	
000027A0                            ; End of function Pal_AddColor
000027A0                            
000027A0                            
000027A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027A0                            
000027A0                            PalFadeOut:
000027A0                            Pal_FadeFrom:
000027A0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000027A6 383C 0015                  		move.w	#$15,d4
000027AA                            loc_1E5C:
000027AA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000027B0 6100 0000                  		bsr.w	DelayProgram
000027B4 6100                       		bsr.s	Pal_FadeOut
000027B6 6100 F7AE                  		bsr.w	RunPLC_RAM
000027BA 51CC FFEE                  		dbf	d4,loc_1E5C
000027BE 4E75                       		rts	
000027C0                            ; End of function Pal_FadeFrom
000027C0                            
000027C0                            ; ---------------------------------------------------------------------------
000027C0                            ; Pallet fade-out subroutine
000027C0                            ; ---------------------------------------------------------------------------
000027C0                            
000027C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027C0                            
000027C0                            
000027C0                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000027C0 7000                       		moveq	#0,d0
000027C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000027C6 1038 F626                  		move.b	($FFFFF626).w,d0
000027CA D0C0                       		adda.w	d0,a0
000027CC 1038 F627                  		move.b	($FFFFF627).w,d0
000027D0                            
000027D0                            loc_1E82:
000027D0 6100                       		bsr.s	Pal_DecColor
000027D2 51C8 FFFC                  		dbf	d0,loc_1E82
000027D6                            
000027D6 7000                       		moveq	#0,d0
000027D8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000027DC 1038 F626                  		move.b	($FFFFF626).w,d0
000027E0 D0C0                       		adda.w	d0,a0
000027E2 1038 F627                  		move.b	($FFFFF627).w,d0
000027E6                            
000027E6                            loc_1E98:
000027E6 6100                       		bsr.s	Pal_DecColor
000027E8 51C8 FFFC                  		dbf	d0,loc_1E98
000027EC 4E75                       		rts	
000027EE                            ; End of function Pal_FadeOut
000027EE                            
000027EE                            
000027EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027EE                            
000027EE                            
000027EE                            Pal_DecColor:				; XREF: Pal_FadeOut
000027EE 3410                       		move.w	(a0),d2
000027F0 6700                       		beq.s	loc_1ECC
000027F2 3202                       		move.w	d2,d1
000027F4 0241 000E                  		andi.w	#$E,d1
000027F8 6700                       		beq.s	Pal_DecGreen
000027FA 5558                       		subq.w	#2,(a0)+	; decrease red value
000027FC 4E75                       		rts	
000027FE                            ; ===========================================================================
000027FE                            
000027FE                            Pal_DecGreen:				; XREF: Pal_DecColor
000027FE 3202                       		move.w	d2,d1
00002800 0241 00E0                  		andi.w	#$E0,d1
00002804 6700                       		beq.s	Pal_DecBlue
00002806 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000280A 4E75                       		rts	
0000280C                            ; ===========================================================================
0000280C                            
0000280C                            Pal_DecBlue:				; XREF: Pal_DecGreen
0000280C 3202                       		move.w	d2,d1
0000280E 0241 0E00                  		andi.w	#$E00,d1
00002812 6700                       		beq.s	loc_1ECC
00002814 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002818 4E75                       		rts	
0000281A                            ; ===========================================================================
0000281A                            
0000281A                            loc_1ECC:				; XREF: Pal_DecColor
0000281A 5448                       		addq.w	#2,a0
0000281C 4E75                       		rts	
0000281E                            ; End of function Pal_DecColor
0000281E                            
0000281E                            ; ---------------------------------------------------------------------------
0000281E                            ; Subroutine to	fill the pallet	with white (special stage)
0000281E                            ; ---------------------------------------------------------------------------
0000281E                            
0000281E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000281E                            
0000281E                            
0000281E                            Pal_MakeWhite:				; XREF: SpecialStage
0000281E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002824 7000                       		moveq	#0,d0
00002826 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000282A 1038 F626                  		move.b	($FFFFF626).w,d0
0000282E D0C0                       		adda.w	d0,a0
00002830 323C 0EEE                  		move.w	#$EEE,d1
00002834 1038 F627                  		move.b	($FFFFF627).w,d0
00002838                            
00002838                            PalWhite_Loop:
00002838 30C1                       		move.w	d1,(a0)+
0000283A 51C8 FFFC                  		dbf	d0,PalWhite_Loop
0000283E 383C 0015                  		move.w	#$15,d4
00002842                            
00002842                            loc_1EF4:
00002842 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002848 6100 0000                  		bsr.w	DelayProgram
0000284C 6100                       		bsr.s	Pal_WhiteToBlack
0000284E 6100 F716                  		bsr.w	RunPLC_RAM
00002852 51CC FFEE                  		dbf	d4,loc_1EF4
00002856 4E75                       		rts	
00002858                            ; End of function Pal_MakeWhite
00002858                            
00002858                            
00002858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002858                            
00002858                            
00002858                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002858 7000                       		moveq	#0,d0
0000285A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000285E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002862 1038 F626                  		move.b	($FFFFF626).w,d0
00002866 D0C0                       		adda.w	d0,a0
00002868 D2C0                       		adda.w	d0,a1
0000286A 1038 F627                  		move.b	($FFFFF627).w,d0
0000286E                            
0000286E                            loc_1F20:
0000286E 6100                       		bsr.s	Pal_DecColor2
00002870 51C8 FFFC                  		dbf	d0,loc_1F20
00002874                            
00002874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000287A 6600                       		bne.s	locret_1F4A
0000287C 7000                       		moveq	#0,d0
0000287E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002882 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002886 1038 F626                  		move.b	($FFFFF626).w,d0
0000288A D0C0                       		adda.w	d0,a0
0000288C D2C0                       		adda.w	d0,a1
0000288E 1038 F627                  		move.b	($FFFFF627).w,d0
00002892                            
00002892                            loc_1F44:
00002892 6100                       		bsr.s	Pal_DecColor2
00002894 51C8 FFFC                  		dbf	d0,loc_1F44
00002898                            
00002898                            locret_1F4A:
00002898 4E75                       		rts	
0000289A                            ; End of function Pal_WhiteToBlack
0000289A                            
0000289A                            
0000289A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000289A                            
0000289A                            
0000289A                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000289A 3419                       		move.w	(a1)+,d2
0000289C 3610                       		move.w	(a0),d3
0000289E B642                       		cmp.w	d2,d3
000028A0 6700                       		beq.s	loc_1F78
000028A2 3203                       		move.w	d3,d1
000028A4 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000028A8 6500                       		bcs.s	loc_1F64
000028AA B242                       		cmp.w	d2,d1
000028AC 6500                       		bcs.s	loc_1F64
000028AE 30C1                       		move.w	d1,(a0)+
000028B0 4E75                       		rts	
000028B2                            ; ===========================================================================
000028B2                            
000028B2                            loc_1F64:				; XREF: Pal_DecColor2
000028B2 3203                       		move.w	d3,d1
000028B4 0441 0020                  		subi.w	#$20,d1		; decrease green value
000028B8 6500                       		bcs.s	loc_1F74
000028BA B242                       		cmp.w	d2,d1
000028BC 6500                       		bcs.s	loc_1F74
000028BE 30C1                       		move.w	d1,(a0)+
000028C0 4E75                       		rts	
000028C2                            ; ===========================================================================
000028C2                            
000028C2                            loc_1F74:				; XREF: loc_1F64
000028C2 5558                       		subq.w	#2,(a0)+	; decrease red value
000028C4 4E75                       		rts	
000028C6                            ; ===========================================================================
000028C6                            
000028C6                            loc_1F78:				; XREF: Pal_DecColor2
000028C6 5448                       		addq.w	#2,a0
000028C8 4E75                       		rts	
000028CA                            ; End of function Pal_DecColor2
000028CA                            
000028CA                            ; ---------------------------------------------------------------------------
000028CA                            ; Subroutine to	make a white flash when	you enter a special stage
000028CA                            ; ---------------------------------------------------------------------------
000028CA                            
000028CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028CA                            
000028CA                            
000028CA                            Pal_MakeFlash:				; XREF: SpecialStage
000028CA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000028D0 383C 0015                  		move.w	#$15,d4
000028D4                            
000028D4                            loc_1F86:
000028D4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000028DA 6100 0000                  		bsr.w	DelayProgram
000028DE 6100                       		bsr.s	Pal_ToWhite
000028E0 6100 F684                  		bsr.w	RunPLC_RAM
000028E4 51CC FFEE                  		dbf	d4,loc_1F86
000028E8 4E75                       		rts	
000028EA                            ; End of function Pal_MakeFlash
000028EA                            
000028EA                            
000028EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028EA                            
000028EA                            
000028EA                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000028EA 7000                       		moveq	#0,d0
000028EC 41F8 FB00                  		lea	($FFFFFB00).w,a0
000028F0 1038 F626                  		move.b	($FFFFF626).w,d0
000028F4 D0C0                       		adda.w	d0,a0
000028F6 1038 F627                  		move.b	($FFFFF627).w,d0
000028FA                            
000028FA                            loc_1FAC:
000028FA 6100                       		bsr.s	Pal_AddColor2
000028FC 51C8 FFFC                  		dbf	d0,loc_1FAC
00002900 7000                       		moveq	#0,d0
00002902 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002906 1038 F626                  		move.b	($FFFFF626).w,d0
0000290A D0C0                       		adda.w	d0,a0
0000290C 1038 F627                  		move.b	($FFFFF627).w,d0
00002910                            
00002910                            loc_1FC2:
00002910 6100                       		bsr.s	Pal_AddColor2
00002912 51C8 FFFC                  		dbf	d0,loc_1FC2
00002916 4E75                       		rts	
00002918                            ; End of function Pal_ToWhite
00002918                            
00002918                            
00002918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002918                            
00002918                            
00002918                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002918 3410                       		move.w	(a0),d2
0000291A 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000291E 6700                       		beq.s	loc_2006
00002920 3202                       		move.w	d2,d1
00002922 0241 000E                  		andi.w	#$E,d1
00002926 0C41 000E                  		cmpi.w	#$E,d1
0000292A 6700                       		beq.s	loc_1FE2
0000292C 5458                       		addq.w	#2,(a0)+	; increase red value
0000292E 4E75                       		rts	
00002930                            ; ===========================================================================
00002930                            
00002930                            loc_1FE2:				; XREF: Pal_AddColor2
00002930 3202                       		move.w	d2,d1
00002932 0241 00E0                  		andi.w	#$E0,d1
00002936 0C41 00E0                  		cmpi.w	#$E0,d1
0000293A 6700                       		beq.s	loc_1FF4
0000293C 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002940 4E75                       		rts	
00002942                            ; ===========================================================================
00002942                            
00002942                            loc_1FF4:				; XREF: loc_1FE2
00002942 3202                       		move.w	d2,d1
00002944 0241 0E00                  		andi.w	#$E00,d1
00002948 0C41 0E00                  		cmpi.w	#$E00,d1
0000294C 6700                       		beq.s	loc_2006
0000294E 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002952 4E75                       		rts	
00002954                            ; ===========================================================================
00002954                            
00002954                            loc_2006:				; XREF: Pal_AddColor2
00002954 5448                       		addq.w	#2,a0
00002956 4E75                       		rts	
00002958                            ; End of function Pal_AddColor2
00002958                            
00002958                            ; ---------------------------------------------------------------------------
00002958                            ; Pallet cycling routine - Sega	logo
00002958                            ; ---------------------------------------------------------------------------
00002958                            
00002958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002958                            
00002958                            
00002958                            PalCycle_Sega:				; XREF: SegaScreen
00002958 4A38 F635                  		tst.b	($FFFFF635).w
0000295C 6600                       		bne.s	loc_206A
0000295E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002962 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002968 7205                       		moveq	#5,d1
0000296A 3038 F632                  		move.w	($FFFFF632).w,d0
0000296E                            
0000296E                            loc_2020:
0000296E 6A00                       		bpl.s	loc_202A
00002970 5448                       		addq.w	#2,a0
00002972 5341                       		subq.w	#1,d1
00002974 5440                       		addq.w	#2,d0
00002976 60F6                       		bra.s	loc_2020
00002978                            ; ===========================================================================
00002978                            
00002978                            loc_202A:				; XREF: PalCycle_Sega
00002978 3400                       		move.w	d0,d2
0000297A 0242 001E                  		andi.w	#$1E,d2
0000297E 6600                       		bne.s	loc_2034
00002980 5440                       		addq.w	#2,d0
00002982                            
00002982                            loc_2034:
00002982 0C40 0060                  		cmpi.w	#$60,d0
00002986 6400                       		bcc.s	loc_203E
00002988 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000298C                            
0000298C                            loc_203E:
0000298C 5440                       		addq.w	#2,d0
0000298E 51C9 FFE8                  		dbf	d1,loc_202A
00002992 3038 F632                  		move.w	($FFFFF632).w,d0
00002996 5440                       		addq.w	#2,d0
00002998 3400                       		move.w	d0,d2
0000299A 0242 001E                  		andi.w	#$1E,d2
0000299E 6600                       		bne.s	loc_2054
000029A0 5440                       		addq.w	#2,d0
000029A2                            
000029A2                            loc_2054:
000029A2 0C40 0064                  		cmpi.w	#$64,d0
000029A6 6D00                       		blt.s	loc_2062
000029A8 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000029AE 70F4                       		moveq	#-$C,d0
000029B0                            
000029B0                            loc_2062:
000029B0 31C0 F632                  		move.w	d0,($FFFFF632).w
000029B4 7001                       		moveq	#1,d0
000029B6 4E75                       		rts	
000029B8                            ; ===========================================================================
000029B8                            
000029B8                            loc_206A:				; XREF: loc_202A
000029B8 5338 F634                  		subq.b	#1,($FFFFF634).w
000029BC 6A00                       		bpl.s	loc_20BC
000029BE 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000029C4 3038 F632                  		move.w	($FFFFF632).w,d0
000029C8 0640 000C                  		addi.w	#$C,d0
000029CC 0C40 0030                  		cmpi.w	#$30,d0
000029D0 6500                       		bcs.s	loc_2088
000029D2 7000                       		moveq	#0,d0
000029D4 4E75                       		rts	
000029D6                            ; ===========================================================================
000029D6                            
000029D6                            loc_2088:				; XREF: loc_206A
000029D6 31C0 F632                  		move.w	d0,($FFFFF632).w
000029DA 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000029E0 41F0 0000                  		lea	(a0,d0.w),a0
000029E4 43F8 FB04                  		lea	($FFFFFB04).w,a1
000029E8 22D8                       		move.l	(a0)+,(a1)+
000029EA 22D8                       		move.l	(a0)+,(a1)+
000029EC 3298                       		move.w	(a0)+,(a1)
000029EE 43F8 FB20                  		lea	($FFFFFB20).w,a1
000029F2 7000                       		moveq	#0,d0
000029F4 722C                       		moveq	#$2C,d1
000029F6                            
000029F6                            loc_20A8:
000029F6 3400                       		move.w	d0,d2
000029F8 0242 001E                  		andi.w	#$1E,d2
000029FC 6600                       		bne.s	loc_20B2
000029FE 5440                       		addq.w	#2,d0
00002A00                            
00002A00                            loc_20B2:
00002A00 3390 0000                  		move.w	(a0),(a1,d0.w)
00002A04 5440                       		addq.w	#2,d0
00002A06 51C9 FFEE                  		dbf	d1,loc_20A8
00002A0A                            
00002A0A                            loc_20BC:
00002A0A 7001                       		moveq	#1,d0
00002A0C 4E75                       		rts	
00002A0E                            ; End of function PalCycle_Sega
00002A0E                            
00002A0E                            ; ===========================================================================
00002A0E                            
00002A0E                            Pal_Sega1:	incbin	pallet\sega1.bin
00002A1A                            Pal_Sega2:	incbin	pallet\sega2.bin
00002A4A                            
00002A4A                            ; ---------------------------------------------------------------------------
00002A4A                            ; Subroutines to load pallets
00002A4A                            ; ---------------------------------------------------------------------------
00002A4A                            
00002A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A4A                            
00002A4A                            
00002A4A                            PalLoad1:
00002A4A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A50 E748                       		lsl.w	#3,d0
00002A52 D2C0                       		adda.w	d0,a1
00002A54 2459                       		movea.l	(a1)+,a2
00002A56 3659                       		movea.w	(a1)+,a3
00002A58 D6FC 0080                  		adda.w	#$80,a3
00002A5C 3E19                       		move.w	(a1)+,d7
00002A5E                            
00002A5E                            loc_2110:
00002A5E 26DA                       		move.l	(a2)+,(a3)+
00002A60 51CF FFFC                  		dbf	d7,loc_2110
00002A64 4E75                       		rts	
00002A66                            ; End of function PalLoad1
00002A66                            
00002A66                            
00002A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A66                            
00002A66                            
00002A66                            PalLoad2:
00002A66 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A6C E748                       		lsl.w	#3,d0
00002A6E D2C0                       		adda.w	d0,a1
00002A70 2459                       		movea.l	(a1)+,a2
00002A72 3659                       		movea.w	(a1)+,a3
00002A74 3E19                       		move.w	(a1)+,d7
00002A76                            
00002A76                            loc_2128:
00002A76 26DA                       		move.l	(a2)+,(a3)+
00002A78 51CF FFFC                  		dbf	d7,loc_2128
00002A7C 4E75                       		rts	
00002A7E                            ; End of function PalLoad2
00002A7E                            
00002A7E                            ; ---------------------------------------------------------------------------
00002A7E                            ; Underwater pallet loading subroutine
00002A7E                            ; ---------------------------------------------------------------------------
00002A7E                            
00002A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A7E                            
00002A7E                            
00002A7E                            PalLoad3_Water:
00002A7E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A84 E748                       		lsl.w	#3,d0
00002A86 D2C0                       		adda.w	d0,a1
00002A88 2459                       		movea.l	(a1)+,a2
00002A8A 3659                       		movea.w	(a1)+,a3
00002A8C 96FC 0080                  		suba.w	#$80,a3
00002A90 3E19                       		move.w	(a1)+,d7
00002A92                            
00002A92                            loc_2144:
00002A92 26DA                       		move.l	(a2)+,(a3)+
00002A94 51CF FFFC                  		dbf	d7,loc_2144
00002A98 4E75                       		rts	
00002A9A                            ; End of function PalLoad3_Water
00002A9A                            
00002A9A                            
00002A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A9A                            
00002A9A                            
00002A9A                            PalLoad4_Water:
00002A9A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002AA0 E748                       		lsl.w	#3,d0
00002AA2 D2C0                       		adda.w	d0,a1
00002AA4 2459                       		movea.l	(a1)+,a2
00002AA6 3659                       		movea.w	(a1)+,a3
00002AA8 96FC 0100                  		suba.w	#$100,a3
00002AAC 3E19                       		move.w	(a1)+,d7
00002AAE                            
00002AAE                            loc_2160:
00002AAE 26DA                       		move.l	(a2)+,(a3)+
00002AB0 51CF FFFC                  		dbf	d7,loc_2160
00002AB4 4E75                       		rts	
00002AB6                            ; End of function PalLoad4_Water
00002AB6                            
00002AB6                            ; ===========================================================================
00002AB6                            ; ---------------------------------------------------------------------------
00002AB6                            ; Pallet pointers
00002AB6                            ; ---------------------------------------------------------------------------
00002AB6                            PalPointers:
00002AB6                            	include "_inc\Pallet pointers.asm"
00002AB6                            ; ---------------------------------------------------------------------------
00002AB6                            ; Pallet pointers
00002AB6                            ; ---------------------------------------------------------------------------
00002AB6 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002ABA FB00                       	dc.w $FB00		; RAM address
00002ABC 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002ABE 0000 0000                  	dc.l Pal_Title
00002AC2 FB00                       	dc.w $FB00
00002AC4 001F                       	dc.w $1F
00002AC6 0000 0000                  	dc.l Pal_LevelSel
00002ACA FB00                       	dc.w $FB00
00002ACC 001F                       	dc.w $1F
00002ACE 0000 0000                  	dc.l Pal_Sonic
00002AD2 FB00                       	dc.w $FB00
00002AD4 0007                       	dc.w 7
00002AD6 0000 0000                  	dc.l Pal_GHZ
00002ADA FB20                       	dc.w $FB20
00002ADC 0017                       	dc.w $17
00002ADE 0000 0000                  	dc.l Pal_LZ
00002AE2 FB20                       	dc.w $FB20
00002AE4 0017                       	dc.w $17
00002AE6 0000 0000                  	dc.l Pal_MZ
00002AEA FB20                       	dc.w $FB20
00002AEC 0017                       	dc.w $17
00002AEE 0000 0000                  	dc.l Pal_SLZ
00002AF2 FB20                       	dc.w $FB20
00002AF4 0017                       	dc.w $17
00002AF6 0000 0000                  	dc.l Pal_SYZ
00002AFA FB20                       	dc.w $FB20
00002AFC 0017                       	dc.w $17
00002AFE 0000 0000                  	dc.l Pal_SBZ1
00002B02 FB20                       	dc.w $FB20
00002B04 0017                       	dc.w $17
00002B06 0000 0000                  	dc.l Pal_Special
00002B0A FB00                       	dc.w $FB00
00002B0C 001F                       	dc.w $1F
00002B0E 0000 0000                  	dc.l Pal_LZWater
00002B12 FB00                       	dc.w $FB00
00002B14 001F                       	dc.w $1F
00002B16 0000 0000                  	dc.l Pal_SBZ3
00002B1A FB20                       	dc.w $FB20
00002B1C 0017                       	dc.w $17
00002B1E 0000 0000                  	dc.l Pal_SBZ3Water
00002B22 FB00                       	dc.w $FB00
00002B24 001F                       	dc.w $1F
00002B26 0000 0000                  	dc.l Pal_SBZ2
00002B2A FB20                       	dc.w $FB20
00002B2C 0017                       	dc.w $17
00002B2E 0000 0000                  	dc.l Pal_LZSonWater
00002B32 FB00                       	dc.w $FB00
00002B34 0007                       	dc.w 7
00002B36 0000 0000                  	dc.l Pal_SBZ3SonWat
00002B3A FB00                       	dc.w $FB00
00002B3C 0007                       	dc.w 7
00002B3E 0000 0000                  	dc.l Pal_SpeResult
00002B42 FB00                       	dc.w $FB00
00002B44 001F                       	dc.w $1F
00002B46 0000 0000                  	dc.l Pal_SpeContinue
00002B4A FB00                       	dc.w $FB00
00002B4C 000F                       	dc.w $F
00002B4E 0000 0000                  	dc.l Pal_Ending
00002B52 FB00                       	dc.w $FB00
00002B54 001F                       	dc.w $1F
00002B56 0000 0000                  	dc.l Pal_Idiot
00002B5A FB20                       	dc.w $FB20
00002B5C 0007                       	dc.w 7
00002B5E 0000 0000                  	dc.l Pal_BHZ
00002B62 FB20                       	dc.w $FB20
00002B64 0017                       	dc.w $17
00002B66 0000 0000                  	dc.l Pal_Gronic
00002B6A FB00                       	dc.w $FB00
00002B6C 0007                       	dc.w 7
00002B6E 0000 0000                  	dc.l Pal_LZGroWater
00002B72 FB00                       	dc.w $FB00
00002B74 0007                       	dc.w 7
00002B76 0000 0000                  	dc.l Pal_SBZ3GroWat
00002B7A FB00                       	dc.w $FB00
00002B7C 0007                       	dc.w 7
00002B7E 0000 0000                  	dc.l Pal_Anakama
00002B82 FB00                       	dc.w $FB00
00002B84 0007                       	dc.w 7
00002B84 0007                       	dc.w 7
00002B86                            
00002B86                            ; ---------------------------------------------------------------------------
00002B86                            ; Pallet data
00002B86                            ; ---------------------------------------------------------------------------
00002B86                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002C06                            Pal_Title:	incbin	pallet\title.bin
00002C86                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002D06                            Pal_Sonic:	incbin	pallet\sonic.bin
00002D26                            Pal_GHZ:	incbin	pallet\ghz.bin
00002D86                            Pal_LZ:		incbin	pallet\lz.bin
00002DE6                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002E66                            Pal_MZ:		incbin	pallet\mz.bin
00002EC6                            Pal_SLZ:	incbin	pallet\slz.bin
00002F26                            Pal_SYZ:	incbin	pallet\syz.bin
00002F86                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002FE6                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003046                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000030C6                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003126                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031A6                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
000031C6                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
000031E6                            Pal_BHZ:	incbin	pallet\bhz.bin
00003246                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032C6                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003306                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00003386                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
000033A6                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
000033C6                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
000033E6                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00003406                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00003486                            
00003486                            ; ---------------------------------------------------------------------------
00003486                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00003486                            ; ---------------------------------------------------------------------------
00003486                            
00003486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003486                            
00003486                            VSync:
00003486                            DelayProgram:				; XREF: PauseGame
00003486 46FC 2300                  		move	#$2300,sr
0000348A                            
0000348A                            loc_29AC:
0000348A 4A38 F62A                  		tst.b	($FFFFF62A).w
0000348E 66FA                       		bne.s	loc_29AC
00003490 4E75                       		rts	
00003492                            ; End of function DelayProgram
00003492                            
00003492                            ; ---------------------------------------------------------------------------
00003492                            ; Subroutine to	generate a pseudo-random number	in d0
00003492                            ; ---------------------------------------------------------------------------
00003492                            
00003492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003492                            
00003492                            CalcRandom: 
00003492                            RandomNumber:
00003492 2238 F636                  		move.l	($FFFFF636).w,d1
00003496 6600                       		bne.s	loc_29C0
00003498 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000349E                            
0000349E                            loc_29C0:
0000349E 2001                       		move.l	d1,d0
000034A0 E581                       		asl.l	#2,d1
000034A2 D280                       		add.l	d0,d1
000034A4 E781                       		asl.l	#3,d1
000034A6 D280                       		add.l	d0,d1
000034A8 3001                       		move.w	d1,d0
000034AA 4841                       		swap	d1
000034AC D041                       		add.w	d1,d0
000034AE 3200                       		move.w	d0,d1
000034B0 4841                       		swap	d1
000034B2 21C1 F636                  		move.l	d1,($FFFFF636).w
000034B6 4E75                       		rts	
000034B8                            ; End of function RandomNumber
000034B8                            
000034B8                            
000034B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034B8                            
000034B8                            CalcSinCos:
000034B8                            CalcSine:				; XREF: SS_BGAnimate; et al
000034B8 0240 00FF                  		andi.w	#$FF,d0
000034BC D040                       		add.w	d0,d0
000034BE 0640 0080                  		addi.w	#$80,d0
000034C2 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000034C6 0440 0080                  		subi.w	#$80,d0
000034CA 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000034CE 4E75                       		rts	
000034D0                            ; End of function CalcSine
000034D0                            
000034D0                            ; ===========================================================================
000034D0                            
000034D0                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00003750                            
00003750                            ; ===========================================================================
00003750 48E7 6000                  		movem.l	d1-d2,-(sp)
00003754 3200                       		move.w	d0,d1
00003756 4841                       		swap	d1
00003758 7000                       		moveq	#0,d0
0000375A 3200                       		move.w	d0,d1
0000375C 7407                       		moveq	#7,d2
0000375E                            
0000375E                            loc_2C80:
0000375E E599                       		rol.l	#2,d1
00003760 D040                       		add.w	d0,d0
00003762 5240                       		addq.w	#1,d0
00003764 9240                       		sub.w	d0,d1
00003766 6400                       		bcc.s	loc_2C9A
00003768 D240                       		add.w	d0,d1
0000376A 5340                       		subq.w	#1,d0
0000376C 51CA FFF0                  		dbf	d2,loc_2C80
00003770 E248                       		lsr.w	#1,d0
00003772 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003776 4E75                       		rts	
00003778                            ; ===========================================================================
00003778                            
00003778                            loc_2C9A:
00003778 5240                       		addq.w	#1,d0
0000377A 51CA FFE2                  		dbf	d2,loc_2C80
0000377E E248                       		lsr.w	#1,d0
00003780 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003784 4E75                       		rts	
00003786                            
00003786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003786                            
00003786                            
00003786                            CalcAngle:
00003786 48E7 1800                  		movem.l	d3-d4,-(sp)
0000378A 7600                       		moveq	#0,d3
0000378C 7800                       		moveq	#0,d4
0000378E 3601                       		move.w	d1,d3
00003790 3802                       		move.w	d2,d4
00003792 8843                       		or.w	d3,d4
00003794 6700                       		beq.s	loc_2D04
00003796 3802                       		move.w	d2,d4
00003798 4A43                       		tst.w	d3
0000379A 6A00 0000                  		bpl.w	loc_2CC2
0000379E 4443                       		neg.w	d3
000037A0                            
000037A0                            loc_2CC2:
000037A0 4A44                       		tst.w	d4
000037A2 6A00 0000                  		bpl.w	loc_2CCA
000037A6 4444                       		neg.w	d4
000037A8                            
000037A8                            loc_2CCA:
000037A8 B843                       		cmp.w	d3,d4
000037AA 6400 0000                  		bcc.w	loc_2CDC
000037AE E18C                       		lsl.l	#8,d4
000037B0 88C3                       		divu.w	d3,d4
000037B2 7000                       		moveq	#0,d0
000037B4 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000037B8 6000                       		bra.s	loc_2CE6
000037BA                            ; ===========================================================================
000037BA                            
000037BA                            loc_2CDC:				; XREF: CalcAngle
000037BA E18B                       		lsl.l	#8,d3
000037BC 86C4                       		divu.w	d4,d3
000037BE 7040                       		moveq	#$40,d0
000037C0 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000037C4                            
000037C4                            loc_2CE6:
000037C4 4A41                       		tst.w	d1
000037C6 6A00 0000                  		bpl.w	loc_2CF2
000037CA 4440                       		neg.w	d0
000037CC 0640 0080                  		addi.w	#$80,d0
000037D0                            
000037D0                            loc_2CF2:
000037D0 4A42                       		tst.w	d2
000037D2 6A00 0000                  		bpl.w	loc_2CFE
000037D6 4440                       		neg.w	d0
000037D8 0640 0100                  		addi.w	#$100,d0
000037DC                            
000037DC                            loc_2CFE:
000037DC 4CDF 0018                  		movem.l	(sp)+,d3-d4
000037E0 4E75                       		rts	
000037E2                            ; ===========================================================================
000037E2                            
000037E2                            loc_2D04:				; XREF: CalcAngle
000037E2 303C 0040                  		move.w	#$40,d0
000037E6 4CDF 0018                  		movem.l	(sp)+,d3-d4
000037EA 4E75                       		rts	
000037EC                            ; End of function CalcAngle
000037EC                            
000037EC                            ; ===========================================================================
000037EC                            
000037EC                            Angle_Data:	incbin	misc\angles.bin
000038EE                            
000038EE                            ; ===========================================================================
000038EE                            
000038EE                            ; ---------------------------------------------------------------------------
000038EE                            ; Sega screen
000038EE                            ; ---------------------------------------------------------------------------
000038EE                            
000038EE                            SegaScreen:				; XREF: GameModeArray
000038EE 103C 00E4                  		move.b	#$E4,d0
000038F2 6100 E422                  		bsr.w	PlaySound_Special ; stop music
000038F6 6100 E660                  		bsr.w	ClearPLC
000038FA 6100 EEA4                  		bsr.w	Pal_FadeFrom
000038FE 4DF9 00C0 0004             		lea	($C00004).l,a6
00003904 3CBC 8004                  		move.w	#$8004,(a6)
00003908 3CBC 8230                  		move.w	#$8230,(a6)
0000390C 3CBC 8407                  		move.w	#$8407,(a6)
00003910 3CBC 8700                  		move.w	#$8700,(a6)
00003914 3CBC 8B00                  		move.w	#$8B00,(a6)
00003918 3CBC 8C81                  		move.w	#$8C81,(a6)
0000391C 4238 F64E                  		clr.b	($FFFFF64E).w
00003920 46FC 2700                  		move	#$2700,sr
00003924 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003928 0200 00BF                  		andi.b	#$BF,d0
0000392C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003932 6100 E30A                  		bsr.w	ClearScreen
00003936 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003940 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003946 6100 E472                  		bsr.w	NemDec
0000394A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003950 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003956 303C 0000                  		move.w	#0,d0
0000395A 6100 E73C                  		bsr.w	EniDec
0000395E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003964 203C 6510 0003             		move.l	#$65100003,d0
0000396A 7217                       		moveq	#$17,d1
0000396C 7407                       		moveq	#7,d2
0000396E 6100 E42A                  		bsr.w	ShowVDPGraphics
00003972 43F9 00FF 0180             		lea	($FF0180).l,a1
00003978 203C 4000 0003             		move.l	#$40000003,d0
0000397E 7227                       		moveq	#$27,d1
00003980 741B                       		moveq	#$1B,d2
00003982 6100 E416                  		bsr.w	ShowVDPGraphics
00003986 7000                       		moveq	#0,d0
00003988 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
0000398C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003992 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003998 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000399E 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000039A4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000039A8 0000 0040                  		ori.b	#$40,d0
000039AC 33C0 00C0 0004             		move.w	d0,($C00004).l
000039B2                            
000039B2                            Sega_WaitPallet:
000039B2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000039B8 6100 FACC                  		bsr.w	DelayProgram
000039BC 6100 EF9A                  		bsr.w	PalCycle_Sega
000039C0 66F0                       		bne.s	Sega_WaitPallet
000039C2                            
000039C2 103C 00E1                  		move.b	#$E1,d0
000039C6 6100 E34E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000039CA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000039D0 6100 FAB4                  		bsr.w	DelayProgram
000039D4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000039DA                            
000039DA                            Sega_WaitEnd:
000039DA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000039E0 6100 FAA4                  		bsr.w	DelayProgram
000039E4 4A78 F614                  		tst.w	($FFFFF614).w
000039E8 6700                       		beq.s	Sega_GotoTitle
000039EA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000039F0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000039F2                            
000039F2                            Sega_GotoTitle:
000039F2 11FC 0004 F600             		move.b	#$4,($FFFFF600).w ; go to title screen
000039F8 4E75                       		rts	
000039FA                            ; ===========================================================================
000039FA                            
000039FA                            ; ---------------------------------------------------------------------------
000039FA                            ; Title	screen
000039FA                            ; ---------------------------------------------------------------------------
000039FA                            
000039FA                            TitleScreen:				; XREF: GameModeArray
000039FA 103C 00E4                  		move.b	#$E4,d0
000039FE 6100 E316                  		bsr.w	PlaySound_Special ; stop music
00003A02 6100 ED9C                  		bsr.w	Pal_FadeFrom
00003A06 6100 E550                  		bsr.w	ClearPLC
00003A0A 46FC 2700                  		move	#$2700,sr
00003A0E 6100 E2BC                  		bsr.w	SoundDriverLoad
00003A12 4DF9 00C0 0004             		lea	($C00004).l,a6
00003A18 3CBC 8004                  		move.w	#$8004,(a6)
00003A1C 3CBC 8230                  		move.w	#$8230,(a6)
00003A20 3CBC 8407                  		move.w	#$8407,(a6)
00003A24 3CBC 9001                  		move.w	#$9001,(a6)
00003A28 3CBC 9200                  		move.w	#$9200,(a6)
00003A2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003A30 3CBC 8720                  		move.w	#$8720,(a6)
00003A34 4238 F64E                  		clr.b	($FFFFF64E).w
00003A38 6100 E204                  		bsr.w	ClearScreen
00003A3C 43F8 D000                  		lea	($FFFFD000).w,a1
00003A40 7000                       		moveq	#0,d0
00003A42 323C 07FF                  		move.w	#$7FF,d1
00003A46                            
00003A46                            Title_ClrObjRam:
00003A46 22C0                       		move.l	d0,(a1)+
00003A48 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003A4C                            
00003A4C                            ; gomer
00003A4C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003A56 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003A5C 6100 E35C                  		bsr.w	NemDec
00003A60 7003                       		moveq	#3,d0		; load Sonic's pallet
00003A62 6100 EFE6                  		bsr.w	PalLoad1
00003A66                            
00003A66 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A6C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003A72 303C 0000                  		move.w	#0,d0
00003A76 6100 E620                  		bsr.w	EniDec
00003A7A                            ; help how the fuck can i do this IT SHOWS NOTHING
00003A7A 6100 EC7A                  		bsr.w	Pal_FadeTo
00003A7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A84 203C 4000 0003             		move.l	#$40000003,d0
00003A8A 7227                       		moveq	#$27,d1
00003A8C 741B                       		moveq	#$1B,d2
00003A8E 6100 E30A                  		bsr.w	ShowVDPGraphics
00003A92                            
00003A92                            
00003A92 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A98 203C 6000 0003             		move.l	#$60000003,d0
00003A9E 7227                       		moveq	#$27,d1
00003AA0 741B                       		moveq	#$1B,d2
00003AA2                            
00003AA2 6100 ECFC                  		bsr.w	Pal_FadeFrom
00003AA6                            
00003AA6                            
00003AA6 6100 E196                  		bsr.w	ClearScreen
00003AAA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003AB4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003ABA 6100 E2FE                  		bsr.w	NemDec
00003ABE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003AC8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003ACE 6100 E2EA                  		bsr.w	NemDec
00003AD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AD8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003ADE 303C 0000                  		move.w	#0,d0
00003AE2 6100 E5B4                  		bsr.w	EniDec
00003AE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AEC 203C 4000 0003             		move.l	#$40000003,d0
00003AF2 7227                       		moveq	#$27,d1
00003AF4 741B                       		moveq	#$1B,d2
00003AF6 6100 E2A2                  		bsr.w	ShowVDPGraphics
00003AFA 6100 ECA4                  		bsr.w	Pal_FadeFrom
00003AFE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003B02 7000                       		moveq	#0,d0
00003B04 323C 001F                  		move.w	#$1F,d1
00003B08                            
00003B08                            
00003B08                            Title_ClrPallet:
00003B08 22C0                       		move.l	d0,(a1)+
00003B0A 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003B0E                            
00003B0E 7003                       		moveq	#3,d0		; load Sonic's pallet
00003B10 6100 EF38                  		bsr.w	PalLoad1
00003B14 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003B1A 4EB9 0000 0000             		jsr	ObjectsLoad
00003B20 4EB9 0000 0000             		jsr	BuildSprites
00003B26 6100 EBCE                  		bsr.w	Pal_FadeTo
00003B2A 46FC 2700                  		move	#$2700,sr
00003B2E 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003B38 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003B3E 6100 E27A                  		bsr.w	NemDec
00003B42 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003B4C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003B52 6100 E266                  		bsr.w	NemDec
00003B56 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003B60 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003B66 6100 E252                  		bsr.w	NemDec
00003B6A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003B70 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003B78 4BF9 0000 0D4E             		lea	(Art_Text).l,a5
00003B7E 323C 113A                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003B82                            
00003B82                            Title_LoadText:
00003B82 2C9D                       		move.l	(a5)+,(a6)
00003B84 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003B88                            
00003B88 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003B8E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003B94 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003B9A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003BA0 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003BA6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003BAC 6100 0000                  		bsr.w	LevelSizeLoad
00003BB0 6100 0000                  		bsr.w	DeformBgLayer
00003BB4                            
00003BB4 43F8 B000                  		lea	($FFFFB000).w,a1
00003BB8 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003BBE 303C 0000                  		move.w	#0,d0
00003BC2 6100 E4D4                  		bsr.w	EniDec
00003BC6 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003BCC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003BD2 6100 E642                  		bsr.w	KosDec
00003BD6 6100 0000                  		bsr.w	LevelLayoutLoad
00003BDA                            
00003BDA 46FC 2700                  		move	#$2700,sr
00003BDE 6100 E05E                  		bsr.w	ClearScreen
00003BE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00003BE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00003BEE 47F8 F708                  		lea	($FFFFF708).w,a3
00003BF2 49F8 A440                  		lea	($FFFFA440).w,a4
00003BF6 343C 6000                  		move.w	#$6000,d2
00003BFA 6100 0000                  		bsr.w	LoadTilesFromStart2
00003BFE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C04 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003C0A 303C 0000                  		move.w	#0,d0
00003C0E 6100 E488                  		bsr.w	EniDec
00003C12 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C18 203C 4206 0003             		move.l	#$42060003,d0
00003C1E 7221                       		moveq	#$21,d1
00003C20 7415                       		moveq	#$15,d2
00003C22 6100 E176                  		bsr.w	ShowVDPGraphics
00003C26 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003C30 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003C36 6100 E182                  		bsr.w	NemDec
00003C3A 7001                       		moveq	#1,d0		; load title screen pallet
00003C3C 6100 EE0C                  		bsr.w	PalLoad1
00003C40 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003C44 6100 E0D0                  		bsr.w	PlaySound_Special
00003C48 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003C4E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003C54 43F8 D080                  		lea	($FFFFD080).w,a1
00003C58 7000                       		moveq	#0,d0
00003C5A 323C 000F                  		move.w	#$F,d1
00003C5E                            
00003C5E                            Title_ClrObjRam2:
00003C5E 22C0                       		move.l	d0,(a1)+
00003C60 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003C64                            
00003C64 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003C6A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003C70 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003C76 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003C7C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003C82 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003C88 4EB9 0000 0000             		jsr	ObjectsLoad
00003C8E 6100 0000                  		bsr.w	DeformBgLayer
00003C92 4EB9 0000 0000             		jsr	BuildSprites
00003C98 7000                       		moveq	#0,d0
00003C9A 6100 E290                  		bsr.w	LoadPLC2
00003C9E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003CA4 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003CAA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003CAE 0000 0040                  		ori.b	#$40,d0
00003CB2 33C0 00C0 0004             		move.w	d0,($C00004).l
00003CB8 6100 EA3C                  		bsr.w	Pal_FadeTo
00003CBC                            
00003CBC                            loc_317C:
00003CBC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003CC2 6100 F7C2                  		bsr.w	DelayProgram
00003CC6 4EB9 0000 0000             		jsr	ObjectsLoad
00003CCC 6100 0000                  		bsr.w	DeformBgLayer
00003CD0 4EB9 0000 0000             		jsr	BuildSprites
00003CD6 6100 E608                  		bsr.w	PalCycle_Title
00003CDA 6100 E28A                  		bsr.w	RunPLC_RAM
00003CDE 3038 D008                  		move.w	($FFFFD008).w,d0
00003CE2 5440                       		addq.w	#2,d0
00003CE4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003CE8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003CEC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003CEE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            Title_ChkRegion:
00003CF6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003CFA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003CFC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003D02 6000                       		bra.s	Title_EnterCheat
00003D04                            ; ===========================================================================
00003D04                            
00003D04                            Title_RegionJ:				; XREF: Title_ChkRegion
00003D04 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003D0A                            
00003D0A                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003D0A 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003D0E D0C0                       		adda.w	d0,a0
00003D10 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003D14 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003D18 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003D1A 6600                       		bne.s	loc_3210	; if not, branch
00003D1C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003D20 4A00                       		tst.b	d0
00003D22 6600                       		bne.s	Title_CountC
00003D24 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003D28 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003D2C E249                       		lsr.w	#1,d1
00003D2E 0241 0003                  		andi.w	#3,d1
00003D32 6700                       		beq.s	Title_PlayRing
00003D34 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003D38 6A00                       		bpl.s	Title_PlayRing
00003D3A 7201                       		moveq	#1,d1
00003D3C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003D40                            
00003D40                            Title_PlayRing:
00003D40 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003D46 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003D4A 6100 DFCA                  		bsr.w	PlaySound_Special
00003D4E 6000                       		bra.s	Title_CountC
00003D50                            ; ===========================================================================
00003D50                            
00003D50                            loc_3210:				; XREF: Title_EnterCheat
00003D50 4A00                       		tst.b	d0
00003D52 6700                       		beq.s	Title_CountC
00003D54 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003D5A 6700                       		beq.s	Title_CountC
00003D5C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003D62                            
00003D62                            Title_CountC:
00003D62 1038 F605                  		move.b	($FFFFF605).w,d0
00003D66 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003D6A 6700                       		beq.s	loc_3230	; if not, branch
00003D6C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003D70                            
00003D70                            loc_3230:
00003D70 4A78 F614                  		tst.w	($FFFFF614).w
00003D74 6700 0000                  		beq.w	Demo
00003D78                            		; (temporary until we have an actual options screen)
00003D78 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003D7E 6700                       		beq.s	@notc
00003D80                            
00003D80 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003D84 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003D8A 6D00                       		blt.s	@notoverflow
00003D8C 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003D92                            	@notoverflow:
00003D92 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003D96 6100 DF7E                  		bsr.w	PlaySound_Special
00003D9A                            	@notc:
00003D9A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003DA0 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003DA4                            
00003DA4                            Title_ChkLevSel:
00003DA4 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003DAA 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003DAE                            		
00003DAE                            		
00003DAE 7002                       		moveq	#2,d0
00003DB0 6100 ECB4                  		bsr.w	PalLoad2	; load level select pallet
00003DB4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003DB8 7000                       		moveq	#0,d0
00003DBA 323C 00DF                  		move.w	#$DF,d1
00003DBE                            
00003DBE                            Title_ClrScroll:
00003DBE 22C0                       		move.l	d0,(a1)+
00003DC0 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003DC4                            
00003DC4 21C0 F616                  		move.l	d0,($FFFFF616).w
00003DC8 46FC 2700                  		move	#$2700,sr
00003DCC 4DF9 00C0 0000             		lea	($C00000).l,a6
00003DD2 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003DDC 323C 03FF                  		move.w	#$3FF,d1
00003DE0                            
00003DE0                            Title_ClrVram:
00003DE0 2C80                       		move.l	d0,(a6)
00003DE2 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003DE6                            
00003DE6 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003DEA 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003DEE                            
00003DEE 6100 0000                  		bsr.w	LevSelTextLoad
00003DF2                            		
00003DF2                            		; sound test fix
00003DF2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003DF6 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003DFC                            		
00003DFC 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003E00 0C46 0014                  		cmpi.w	#$14,d6
00003E04 6700                       		beq.s	@issndtst
00003E06 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003E0A                            	@issndtst:
00003E0A 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003E0E 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003E12                            		
00003E12 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003E16 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003E1E                            		
00003E1E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003E24 6700                       		beq.s	@issndtst2
00003E26                            		
00003E26 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003E2C 6100 0000                  		bsr.w	CStringSlop
00003E30 6000                       		bra.s	LevelSelect
00003E32                            	@issndtst2:
00003E32 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003E38 6100 0000                  		bsr.w	CStringSlop
00003E3C                            		
00003E3C                            ; ---------------------------------------------------------------------------
00003E3C                            ; Level	Select
00003E3C                            ; ---------------------------------------------------------------------------
00003E3C                            LevelSelect:
00003E3C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003E42 6100 F642                  		bsr.w	DelayProgram
00003E46 6100 0000                  		bsr.w	LevSelControls
00003E4A 6100 E11A                  		bsr.w	RunPLC_RAM
00003E4E 4AB8 F680                  		tst.l	($FFFFF680).w
00003E52 66E8                       		bne.s	LevelSelect
00003E54 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003E5A 67E0                       		beq.s	LevelSelect	; if not, branch
00003E5C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003E60 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003E64 6600                       		bne.s	@dont	; if not, dont blow this place up
00003E66                            			
00003E66 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003E6C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003E72 6100 F612                  		bsr.w	DelayProgram
00003E76                            	@dont:
00003E76 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003E7A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003E7C                            		
00003E7C 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003E82 67B8                       		beq.s	LevelSelect	; if not, branch
00003E84                            		
00003E84 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003E8A 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003E8C                            		
00003E8C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003E90 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003E94                            		
00003E94 4EB9 0000 0000             		jsr		ShowNow_Playing
00003E9A 60A0                       		bra.s	LevelSelect
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            LevSel_SEGA:				; XREF: LevelSelect
00003E9C 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003EA2 4E75                       		rts	
00003EA4                            ; ===========================================================================
00003EA4                            
00003EA4                            LevSel_Ending:				; XREF: LevelSelect
00003EA4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003EAA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003EB0 4E75                       		rts	
00003EB2                            ; ===========================================================================
00003EB2                            
00003EB2                            LevSel_Credits:				; XREF: LevelSelect
00003EB2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003EB8 103C 0091                  		move.b	#$91,d0
00003EBC 6100 DE58                  		bsr.w	PlaySound_Special ; play credits music
00003EC0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003EC6 4E75                       		rts	
00003EC8                            ; ===========================================================================
00003EC8                            
00003EC8                            LevSel_Level_SS:			; XREF: LevelSelect
00003EC8 D040                       		add.w	d0,d0
00003ECA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003ECE 6B00 FF6C                  		bmi.w	LevelSelect
00003ED2 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003ED6 6600                       		bne.s	LevSel_Level	; if not, branch
00003ED8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003EDE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003EE2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003EE8 7000                       		moveq	#0,d0
00003EEA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003EEE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003EF2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003EF6 4E75                       		rts	
00003EF8                            ; ===========================================================================
00003EF8                            
00003EF8                            LevSel_Level:				; XREF: LevSel_Level_SS
00003EF8 0240 3FFF                  		andi.w	#$3FFF,d0
00003EFC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003F00                            
00003F00                            PlayLevel:				; XREF: ROM:00003246j ...
00003F00 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003F06 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003F0C 7000                       		moveq	#0,d0
00003F0E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F12 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F16 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003F1A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003F1E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003F22 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003F26 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003F2A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003F2E 103C 00E0                  		move.b	#$E0,d0
00003F32 6100 DDE2                  		bsr.w	PlaySound_Special ; fade out music
00003F36 4E75                       		rts	
00003F38                            ; ===========================================================================
00003F38                            ; ---------------------------------------------------------------------------
00003F38                            ; Level	select - level pointers
00003F38                            ; ---------------------------------------------------------------------------
00003F38                            LSelectPointers:
00003F38 0000                       		dc.w $0000 ; crz
00003F3A 0001                       		dc.w $0001
00003F3C 0002                       		dc.w $0002
00003F3E 0100                       		dc.w $0100 ; ilfez
00003F40 0101                       		dc.w $0101
00003F42 0102                       		dc.w $0102
00003F44 0200                       		dc.w $0200 ; mz
00003F46 0201                       		dc.w $0201
00003F48 0202                       		dc.w $0202
00003F4A 0300                       		dc.w $0300 ; dgrotz
00003F4C 0301                       		dc.w $0301 
00003F4E 0302                       		dc.w $0302 
00003F50 0700                       		dc.w $0700 ; the other mz...
00003F52 0701                       		dc.w $0701 
00003F54 0702                       		dc.w $0702 
00003F56 0400                       		dc.w $0400 ; tpfbz
00003F58 0401                       		dc.w $0401
00003F5A 0402                       		dc.w $0402
00003F5C 0500                       		dc.w $0500 ; zzzzz
00003F5E 0501                       		dc.w $0501 
00003F60 0103                       		dc.w $0103 
00003F62 0502                       		dc.w $0502 ; fz
00003F64 FFFF                       		dc.w $FFFF ; special
00003F66 8000                       		dc.w $8000 ; sound test
00003F68                            		even
00003F68                            ; --------------------------------------
00003F68                            ; ---------------------------------------------------------------------------
00003F68                            ; Level	select codes
00003F68                            ; ---------------------------------------------------------------------------
00003F68                            LevelSelectCode_J:
00003F68                            		incbin	misc\ls_jcode.bin
00003F6E                            		even
00003F6E                            
00003F6E                            LevelSelectCode_US:
00003F6E                            		incbin	misc\ls_ucode.bin
00003F74                            		even
00003F74                            ; ===========================================================================
00003F74                            
00003F74                            ; ---------------------------------------------------------------------------
00003F74                            ; Demo mode
00003F74                            ; ---------------------------------------------------------------------------
00003F74                            
00003F74                            Demo:					; XREF: TitleScreen
00003F74 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003F7A                            
00003F7A                            loc_33B6:				; XREF: loc_33E4
00003F7A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003F80 6100 F504                  		bsr.w	DelayProgram
00003F84 6100 0000                  		bsr.w	DeformBgLayer
00003F88 6100 E32C                  		bsr.w	PalCycle_Load
00003F8C 6100 DFD8                  		bsr.w	RunPLC_RAM
00003F90 3038 D008                  		move.w	($FFFFD008).w,d0
00003F94 5440                       		addq.w	#2,d0
00003F96 31C0 D008                  		move.w	d0,($FFFFD008).w
00003F9A 0C40 1C00                  		cmpi.w	#$1C00,d0
00003F9E 6500                       		bcs.s	loc_33E4
00003FA0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8                            
00003FA8                            loc_33E4:				; XREF: Demo
00003FA8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003FAE 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003FB2 4A78 F614                  		tst.w	($FFFFF614).w
00003FB6 6600 FFC2                  		bne.w	loc_33B6
00003FBA 103C 00E0                  		move.b	#$E0,d0
00003FBE 6100 DD56                  		bsr.w	PlaySound_Special ; fade out music
00003FC2 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003FC6 0240 0007                  		andi.w	#7,d0
00003FCA D040                       		add.w	d0,d0
00003FCC 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003FD0 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003FD4 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003FD8 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003FDE 6500                       		bcs.s	loc_3422	; if yes, branch
00003FE0 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003FE6                            
00003FE6                            loc_3422:
00003FE6 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003FEC 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003FF2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003FF6 6600                       		bne.s	Demo_Level	; if not, branch
00003FF8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003FFE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004002 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004006                            
00004006                            Demo_Level:
00004006 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000400C 7000                       		moveq	#0,d0
0000400E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004012 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004016 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000401A 4E75                       		rts	
0000401C                            ; ===========================================================================
0000401C                            ; ---------------------------------------------------------------------------
0000401C                            ; Levels used in demos
0000401C                            ; ---------------------------------------------------------------------------
0000401C                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004024                            		even
00004024                            
00004024                            ; ---------------------------------------------------------------------------
00004024                            ; Subroutine to	change what you're selecting in the level select
00004024                            ; ---------------------------------------------------------------------------
00004024                            
00004024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004024                            
00004024                            
00004024                            LevSelControls:				; XREF: LevelSelect
00004024 1238 F605                  		move.b	($FFFFF605).w,d1
00004028 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000402C 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000402E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004032 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00004036                            
00004036                            LevSel_UpDown:
00004036 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000403C 1238 F604                  		move.b	($FFFFF604).w,d1
00004040 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00004044 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00004048 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000404C 0801 0000                  		btst	#0,d1		; is up	pressed?
00004050 6700                       		beq.s	LevSel_Down	; if not, branch
00004052 5346                       		subq.w	#1,d6		; move up 1 selection
00004054 6400                       		bcc.s	LevSel_Down
00004056 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00004058                            
00004058                            LevSel_Down:
00004058 0801 0001                  		btst	#1,d1		; is down pressed?
0000405C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000405E 5246                       		addq.w	#1,d6		; move down 1 selection
00004060 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00004064 6500                       		bcs.s	LevSel_Refresh
00004066 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00004068 6000                       		bra.s	LevSel_Refresh
0000406A                            		
0000406A                            LevSel_LR:
0000406A 0801 0002                  		btst	#2,d1		; is left pressed?
0000406E 6700                       		beq.s	LevSel_Right	; if not, branch
00004070 0446 0000                  		sub.w	#lsrow2size,d6
00004074 64E2                       		bcc.s	LevSel_Down
00004076 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000407A                            LevSel_Right:
0000407A 0801 0003                  		btst	#3,d1		; is right pressed?
0000407E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004080 0646 0000                  		add.w	#lsrow1size,d6
00004084 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00004088 6500                       		bcs.s	LevSel_Refresh
0000408A 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
0000408E                            ; ===========================================================================
0000408E                            LevSel_Refresh:
0000408E                            		
0000408E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00004092 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00004096                            		
00004096 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000409C 6600                       		bne.s	@exitsndtest
0000409E                            		
0000409E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000040A2 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000040A8 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000040B0 6100 0000                  		bsr.w	CStringSlop
000040B4                            	@exitsndtest:
000040B4                            	
000040B4 363C C65F                  		move.w	#$C680-$21,d3
000040B8 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000040BC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000040C0                            		
000040C0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000040C6 6600                       		bne.s	@entersndtest
000040C8                            		
000040C8 363C C65F                  		move.w	#$C680-$21,d3
000040CC 43F9 0000 0000             		lea	(Controls_SND).l,a1
000040D2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000040DA 6100 0000                  		bsr.w	CStringSlop
000040DE                            	@entersndtest:
000040DE 4E75                       		rts	
000040E0                            		
000040E0                            LevSel_SndTest:				; XREF: LevSelControls
000040E0 1238 F605                  		move.b	($FFFFF605).w,d1
000040E4 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
000040E8 6700                       		beq.s	LevSel_NoMove	; if not, branch
000040EA 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000040F0 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000040F4                            		
000040F4 1038 FF84                  		move.b	($FFFFFF84).w,d0
000040F8 0801 0002                  		btst	#2,d1		; is left pressed?
000040FC 6700                       		beq.s	SndTest_Right	; if not, branch
000040FE 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00004100                            		; no need the fact it's a byte does the trick
00004100                            
00004100                            SndTest_Right:
00004100 0801 0003                  		btst	#3,d1		; is right pressed?
00004104 6700                       		beq.s	SndTest_A	; if not, branch
00004106 5200                       		addq.b	#1,d0		; add 1	to sound test
00004108                            		; same here
00004108                            		
00004108                            SndTest_A:
00004108 0801 0006                  		btst	#6,d1		; is A pressed?
0000410C 6700                       		beq.s	SndTest_B	; if not, branch
0000410E 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00004110 5100                       		subq.b	#8,d0
00004112                            		
00004112                            SndTest_B:
00004112 0801 0004                  		btst	#4,d1		; is B pressed?
00004116 6700                       		beq.s	SndTest_Refresh	; if not, branch
00004118 5000                       		addq.b	#8,d0		; add $10 to sound test
0000411A 5000                       		addq.b	#8,d0
0000411C                            
0000411C                            SndTest_Refresh:
0000411C 363C C65F                  		move.w	#$C680-$21,d3
00004120 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00004124 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00004128                            
00004128                            LevSel_NoMove:
00004128 4E75                       		rts	
0000412A                            ; End of function LevSelControls
0000412A                            
0000412A                            ; ---------------------------------------------------------------------------
0000412A                            ; Subroutine to load level select text
0000412A                            ; ---------------------------------------------------------------------------
0000412A                            
0000412A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000412A                            
0000412A                            LevSelTextLoad_loop:
0000412A 2D44 0004                  		move.l	d4,4(a6)
0000412E 6100 0000                  		bsr.w	LevSel_ChgLine
00004132 0684 0080 0000             		addi.l	#$800000,d4
00004138 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
0000413C 4E75                       		rts
0000413E                            LevSelTextLoad:				; XREF: TitleScreen
0000413E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004144 4DF9 00C0 0000             		lea	($C00000).l,a6
0000414A 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000414E 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00004154                            		
00004154 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00004158 61D0                       		bsr.s	LevSelTextLoad_loop
0000415A                            		
0000415A                            		
0000415A 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00004160 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00004164 61C4                       		bsr.s	LevSelTextLoad_loop
00004166 363C C65F                  		move.w	#$C680-$21,d3
0000416A                            		
0000416A                            LevSelHighlightCode:
0000416A 4DF9 00C0 0000             		lea	($C00000).l,a6
00004170 7000                       		moveq	#0,d0
00004172 3038 FF82                  		move.w	($FFFFFF82).w,d0
00004176 3200                       		move.w	d0,d1
00004178 283C 6086 0003             		move.l	#lsscrpos,d4
0000417E                            		
0000417E 0C40 0000                  		cmpi.w	#lsrow1size,d0
00004182 6D00                       		blt.s	@notsecond
00004184                            		
00004184 0440 0000                  		sub.w	#lsrow1size,d0
00004188 0684 0024 0000             		addi.l	#lsoff,d4
0000418E                            	@notsecond:
0000418E EF48                       		lsl.w	#7,d0
00004190 4840                       		swap	d0
00004192 D880                       		add.l	d0,d4
00004194 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000419A E749                       		lsl.w	#3,d1
0000419C D241                       		add.w	d1,d1
0000419E D2C1                       		adda.w	d1,a1
000041A0 2D44 0004                  		move.l	d4,4(a6)
000041A4 6100 0000                  		bsr.w	LevSel_ChgLine
000041A8 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000041AE 6700                       		beq.s	LevSelSndTest
000041B0 4E75                       		rts
000041B2                            
000041B2                            LevSelSndTest:
000041B2 0643 0030                  		add.w	#$30,d3
000041B6 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000041C0 1038 FF84                  		move.b	($FFFFFF84).w,d0
000041C4 1400                       		move.b	d0,d2
000041C6 E808                       		lsr.b	#4,d0
000041C8 6100 0000                  		bsr.w	LevSel_ChgSnd
000041CC 1002                       		move.b	d2,d0
000041CE 6100 0000                  		bsr.w	LevSel_ChgSnd
000041D2 4E75                       		rts	
000041D4                            ; End of function LevSelTextLoad
000041D4                            
000041D4                            
000041D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041D4                            
000041D4                            
000041D4                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000041D4 0240 000F                  		andi.w	#$F,d0
000041D8 0C00 000A                  		cmpi.b	#$A,d0
000041DC 6500                       		bcs.s	loc_3580
000041DE 5E00                       		addi.b	#7,d0
000041E0                            
000041E0                            loc_3580:
000041E0 D043                       		add.w	d3,d0
000041E2 3C80                       		move.w	d0,(a6)
000041E4 4E75                       		rts	
000041E6                            ; End of function LevSel_ChgSnd
000041E6                            
000041E6                            
000041E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041E6                            
000041E6                            
000041E6                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000041E6 740F                       		moveq	#$10-1,d2		; number of characters per line
000041E8                            
000041E8                            @loop:
000041E8 7000                       		moveq	#0,d0
000041EA 1019                       		move.b	(a1)+,d0
000041EC 0C00 0020                  		cmpi.b	#$20,d0
000041F0 6E00                       		bgt.s	@draw
000041F2 3CBC 0000                  		move.w	#0,(a6)
000041F6 51CA FFF0                  		dbf	d2,@loop
000041FA 4E75                       		rts	
000041FC                            ; ===========================================================================
000041FC                            
000041FC                            @draw:				; XREF: LevSel_ChgLine
000041FC D043                       		add.w	d3,d0
000041FE 3C80                       		move.w	d0,(a6)
00004200 51CA FFE6                  		dbf	d2,@loop
00004204 4E75                       		rts	
00004206                            ; End of function LevSel_ChgLine
00004206                            		
00004206                            CStringSlop_draw:
00004206 D043                       		add.w	d3,d0
00004208 3C80                       		move.w	d0,(a6)
0000420A                            CStringSlop:				; XREF: LevSelTextLoad
0000420A 7000                       		moveq	#0,d0
0000420C 1019                       		move.b	(a1)+,d0
0000420E 0C00 0020                  		cmpi.b	#$20,d0
00004212 6EF2                       		bgt.s	CStringSlop_draw
00004214                            		
00004214 0C00 0001                  		cmpi.b	#1,d0
00004218 6700                       		beq.s	@InsertSpaces
0000421A 6500                       		blo.s	@end
0000421C                            		
0000421C 3CBC 0000                  		move.w	#0,(a6)
00004220 60E8                       		bra.s	CStringSlop
00004222                            	@end:
00004222 4E75                       		rts
00004224                            	@InsertSpaces:
00004224 7000                       		moveq	#0,d0
00004226 1019                       		move.b	(a1)+,d0
00004228                            		
00004228                            	@insert:
00004228 3CBC 0000                  		move.w	#0,(a6)
0000422C 51C8 FFFA                  		dbf.w	d0,@insert
00004230 60D8                       		bra.s	CStringSlop
00004232                            ; End of function LevSel_ChgLine
00004232                            
00004232                            ; ===========================================================================
00004232                            ; ---------------------------------------------------------------------------
00004232                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00004232                            ; ---------------------------------------------------------------------------
00004232                            LevelMenuText:	
00004232 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00004242 2020 2020 2020 2020 2020+          dc.b    "               2"
00004252 2020 2020 2020 2020 2020+          dc.b    "               3"
00004262 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00004272 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00004282 2020 2020 2020 2020 2020+          dc.b    "               3"
00004292 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
000042A2 2020 2020 2020 2020 2020+          dc.b    "               2"
000042B2 2020 2020 2020 2020 2020+          dc.b    "               3"
000042C2 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
000042D2 2020 2020 2020 2020 2020+          dc.b    "               2"
000042E2 2020 2020 2020 2020 2020+          dc.b    "               3"
000042F2 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00004302 2020 2020 2020 2020 2020+          dc.b    "               2"
00004312 2020 2020 2020 2020 2020+          dc.b    "               3"
00004322                            LMTSecondRow:
00004322 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00004332 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00004342 2020 2020 2020 2020 2020+          dc.b    "               3"
00004352 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00004362 2020 2020 2020 2020 2020+          dc.b    "               2"
00004372 2020 2020 2020 2020 2020+          dc.b    "               3"
00004382 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00004392 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
000043A2 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
000043B2 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
000043C2 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
000043D2                            LMTSelectableEnd:
000043D2 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
000043E2                            LMTEnd:
000043E2                            
000043E2                            Now_Playing:
000043E2 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
000043F2                            		even
000043F2                            NP_Track:
000043F2 5452 4143 4B20 2400        		dc.b	"TRACK $",0
000043FA                            		even
000043FA                            NP_SFX:
000043FA 534F 554E 4420 2400        		dc.b	"SOUND $",0
00004402                            		even
00004402                            
00004402                            ShowNow_Playing:
00004402 1C00                       		move.b	d0,d6
00004404 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00004408 43FA FFD8                  		lea	Now_Playing(pc),a1
0000440C 4DF9 00C0 0000             		lea		($C00000).l,a6
00004412 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
0000441A 6100 FDEE                  		bsr.w	CStringSlop
0000441E                            		
0000441E 43FA FFD2                  		lea	NP_Track(pc),a1
00004422 0C06 00A0                  		cmpi.b	#$A0,d6
00004426 6D00                       		blt.s	@track
00004428                            		
00004428 43FA FFD0                  		lea	NP_SFX(pc),a1
0000442C                            	@track:
0000442C 6100 FDDC                  		bsr.w	CStringSlop
00004430                            		
00004430 0643 0030                  		add.w	#$30,d3
00004434 1006                       		move.b	d6,d0
00004436 1400                       		move.b	d0,d2
00004438 E808                       		lsr.b	#4,d0
0000443A 6100 FD98                  		bsr.w	LevSel_ChgSnd
0000443E 1002                       		move.b	d2,d0
00004440 6100 FD92                  		bsr.w	LevSel_ChgSnd
00004444 4E75                       		rts	
00004446                            
00004446                            ; 1 is insert spaces btw
00004446                            Controls_Normal:
00004446 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00004452                            		even		
00004452                            Controls_SND:
00004452 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00004478 00                         		even
00004478                            		
00004478                            OptionMenuText:	
00004478 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00004488 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00004498                            OMTEnd:
00004498                            		
00004498                            ; ---------------------------------------------------------------------------
00004498                            ; Level	Select
00004498                            ; ---------------------------------------------------------------------------
00004498                            GotoOptions:
00004498 43F9 0000 4478             		lea	(OptionMenuText).l,a1
0000449E 4DF9 00C0 0000             		lea	($C00000).l,a6
000044A4 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000044A8 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000044AE                            		
000044AE 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
000044B2 6100 FC76                  		bsr.w	LevSelTextLoad_loop
000044B6                            
000044B6                            OptionsMenu:
000044B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000044BC 6100 EFC8                  		bsr.w	DelayProgram
000044C0 6100 0000                  		bsr.w	OptControls
000044C4 6100 DAA0                  		bsr.w	RunPLC_RAM
000044C8 4AB8 F680                  		tst.l	($FFFFF680).w
000044CC 66E8                       		bne.s	OptionsMenu
000044CE 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000044D4 67E0                       		beq.s	OptionsMenu	; if not, branch
000044D6 4E71                       		nop
000044D8 60DC                       		bra.s	OptionsMenu
000044DA                            		
000044DA                            OptReturn:
000044DA 4E75                       		rts
000044DC                            OptControls:				; XREF: LevelSelect
000044DC 1238 F605                  		move.b	($FFFFF605).w,d1
000044E0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000044E4 6600                       		bne.s	Opt_UpDown	; if yes, branch
000044E6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000044EA 6AEE                       		bpl.s	OptReturn	; if time remains, branch
000044EC                            Opt_UpDown:
000044EC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000044F2 1238 F604                  		move.b	($FFFFF604).w,d1
000044F6 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000044FA 0801 0000                  		btst	#0,d1		; is up	pressed?
000044FE 6700                       		beq.s	Opt_Down	; if not, branch
00004500 5346                       		subq.w	#1,d6		; move up 1 selection
00004502 6400                       		bcc.s	Opt_Down
00004504 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00004506                            
00004506                            Opt_Down:
00004506 0801 0001                  		btst	#1,d1		; is down pressed?
0000450A 6700                       		beq.s	Opt_Refresh	; if not, branch
0000450C 5246                       		addq.w	#1,d6		; move down 1 selection
0000450E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00004512 6500                       		bcs.s	Opt_Refresh
00004514 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00004516                            Opt_Refresh:
00004516                            		
00004516                            ; ---------------------------------------------------------------------------
00004516                            ; Music	playlist
00004516                            ; ---------------------------------------------------------------------------
00004516                            MusicList1:	incbin	misc\muslist1.bin
0000451E                            		even
0000451E                            MusicList2:	incbin	misc\muslist2.bin
00004526                            		even
00004526                            MusicList3:	incbin	misc\muslist3.bin
0000452E                            		even
0000452E                            MusicList4:	incbin	misc\muslist4.bin
00004536                            		even
00004536                            ; ===========================================================================
00004536                            
00004536                            ; ---------------------------------------------------------------------------
00004536                            ; Level
00004536                            ; ---------------------------------------------------------------------------
00004536                            
00004536                            Level:					; XREF: GameModeArray
00004536 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000453C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004540 6B00                       		bmi.s	loc_37B6
00004542 103C 00E0                  		move.b	#$E0,d0
00004546 6100 D7CE                  		bsr.w	PlaySound_Special ; fade out music
0000454A                            
0000454A                            loc_37B6:
0000454A 6100 DA0C                  		bsr.w	ClearPLC
0000454E 6100 E250                  		bsr.w	Pal_FadeFrom
00004552 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004556 6B00                       		bmi.s	Level_ClrRam
00004558 46FC 2700                  		move	#$2700,sr
0000455C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004566 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000456C 6100 D84C                  		bsr.w	NemDec
00004570 46FC 2300                  		move	#$2300,sr
00004574 7000                       		moveq	#0,d0
00004576 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000457A E948                       		lsl.w	#4,d0
0000457C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00004582 45F2 0000                  		lea	(a2,d0.w),a2
00004586 7000                       		moveq	#0,d0
00004588 1012                       		move.b	(a2),d0
0000458A 6700                       		beq.s	loc_37FC
0000458C 6100 D96C                  		bsr.w	LoadPLC		; load level patterns
00004590                            
00004590                            loc_37FC:
00004590 7001                       		moveq	#1,d0
00004592 6100 D966                  		bsr.w	LoadPLC		; load standard	patterns
00004596                            
00004596                            Level_ClrRam:
00004596 43F8 D000                  		lea	($FFFFD000).w,a1
0000459A 7000                       		moveq	#0,d0
0000459C 323C 07FF                  		move.w	#$7FF,d1
000045A0                            
000045A0                            Level_ClrObjRam:
000045A0 22C0                       		move.l	d0,(a1)+
000045A2 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000045A6                            
000045A6 43F8 F628                  		lea	($FFFFF628).w,a1
000045AA 7000                       		moveq	#0,d0
000045AC 323C 0015                  		move.w	#$15,d1
000045B0                            
000045B0                            Level_ClrVars:
000045B0 22C0                       		move.l	d0,(a1)+
000045B2 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
000045B6                            
000045B6 43F8 F700                  		lea	($FFFFF700).w,a1
000045BA 7000                       		moveq	#0,d0
000045BC 323C 003F                  		move.w	#$3F,d1
000045C0                            
000045C0                            Level_ClrVars2:
000045C0 22C0                       		move.l	d0,(a1)+
000045C2 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000045C6                            
000045C6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000045CA 7000                       		moveq	#0,d0
000045CC 323C 0047                  		move.w	#$47,d1
000045D0                            
000045D0                            Level_ClrVars3:
000045D0 22C0                       		move.l	d0,(a1)+
000045D2 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000045D6                            
000045D6 46FC 2700                  		move	#$2700,sr
000045DA 6100 D662                  		bsr.w	ClearScreen
000045DE 4DF9 00C0 0004             		lea	($C00004).l,a6
000045E4 3CBC 8B03                  		move.w	#$8B03,(a6)
000045E8 3CBC 8230                  		move.w	#$8230,(a6)
000045EC 3CBC 8407                  		move.w	#$8407,(a6)
000045F0 3CBC 857C                  		move.w	#$857C,(a6)
000045F4 3CBC 9001                  		move.w	#$9001,(a6)
000045F8 3CBC 8004                  		move.w	#$8004,(a6)
000045FC 3CBC 8720                  		move.w	#$8720,(a6)
00004600 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004606 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000460A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004610 6600                       		bne.s	Level_LoadPal	; if not, branch
00004612 3CBC 8014                  		move.w	#$8014,(a6)
00004616 7000                       		moveq	#0,d0
00004618 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000461C D040                       		add.w	d0,d0
0000461E 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004624 3031 0000                  		move.w	(a1,d0.w),d0
00004628 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000462C 31C0 F648                  		move.w	d0,($FFFFF648).w
00004630 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00004634 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00004638 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000463C 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00004642 6000 0000                  		bra.w	Level_LoadPal
00004646                            Player_Palette:
00004646                            		; normal, lz, sbz, blank
00004646 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
0000464E                            		
0000464E 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00004656 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
0000465E 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00004666                            
00004666                            		; add more player palettes
00004666                            Level_LoadPal:
00004666 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000466C 46FC 2300                  		move	#$2300,sr
00004670                            
00004670 7200                       		moveq	#0,d1
00004672 1238 FFE8                  		move.b	(v_character),d1
00004676 D241                       		add.w	d1,d1
00004678 D241                       		add.w	d1,d1
0000467A D241                       		add.w	d1,d1
0000467C 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00004680                            		
00004680 6100 E3E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004684 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000468A 6600                       		bne.s	Level_GetBgm	; if not, branch
0000468C 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00004690 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004696 6600                       		bne.s	Level_WaterPal	; if not, branch
00004698 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
0000469C                            
0000469C                            Level_WaterPal:
0000469C 6100 E3E0                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000046A0 4A38 FE30                  		tst.b	($FFFFFE30).w
000046A4 6700                       		beq.s	Level_GetBgm
000046A6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000046AC                            
000046AC                            ; NineKode begins here - How to play different songs on different acts
000046AC                             
000046AC                            Level_GetBgm:
000046AC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046B0 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
000046B4 7000                       		moveq	#0,d0
000046B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000046BA                             
000046BA 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000046C0 6600                       		bne.s	Level_GetBgm2	; if not, branch
000046C2 43F9 0000 4516             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000046C8 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
000046CA                             
000046CA                            Level_GetBgm2:
000046CA 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000046D0 6600                       		bne.s	Level_GetBgm3	; if not, branch
000046D2 43F9 0000 451E             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000046D8 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
000046DA                             
000046DA                            Level_GetBgm3:
000046DA 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000046E0 6600                       		bne.s	Level_GetBgm4	; if not, branch
000046E2 43F9 0000 4526             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000046E8 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
000046EA                             
000046EA                            Level_GetBgm4:
000046EA 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000046F0 6600                       		bne.s	Level_PlayBgm	; if not, branch
000046F2 43F9 0000 452E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000046F8                             
000046F8                            Level_PlayBgm:
000046F8 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
000046FC 6100 D612                  		bsr.w	PlaySound	; play music
00004700 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004706                             
00004706                            ; NineKode ends here
00004706                            
00004706                            Level_TtlCard:
00004706 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000470C 6100 ED78                  		bsr.w	DelayProgram
00004710 4EB9 0000 0000             		jsr	ObjectsLoad
00004716 4EB9 0000 0000             		jsr	BuildSprites
0000471C 6100 D848                  		bsr.w	RunPLC_RAM
00004720 3038 D108                  		move.w	($FFFFD108).w,d0
00004724 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00004728 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000472A 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000472E 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00004730 4EB9 0000 0000             		jsr	Hud_Base
00004736                            
00004736                            loc_3946:
00004736 7003                       		moveq	#3,d0
00004738 6100 E310                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000473C 6100 0000                  		bsr.w	LevelSizeLoad
00004740 6100 0000                  		bsr.w	DeformBgLayer
00004744 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000474A 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000474E 6100 0000                  		bsr.w	LoadTilesFromStart
00004752 4EB9 0000 0000             		jsr	FloorLog_Unk
00004758 6100 0000                  		bsr.w	ColIndexLoad
0000475C 6100 0000                  		bsr.w	LZWaterEffects
00004760 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00004766 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000476A 6B00                       		bmi.s	Level_ChkDebug
0000476C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00004772                            
00004772                            Level_ChkDebug:
00004772 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004776 6700                       		beq.s	Level_ChkWater	; if not, branch
00004778 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000477E 6700                       		beq.s	Level_ChkWater	; if not, branch
00004780 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004786                            
00004786                            Level_ChkWater:
00004786 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000478C 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004792 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004798 6600                       		bne.s	Level_LoadObj	; if not, branch
0000479A 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000047A0 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000047A6 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000047AC 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000047B2                            
000047B2                            Level_LoadObj:
000047B2 4EB9 0000 0000             		jsr	ObjPosLoad
000047B8 4EB9 0000 0000             		jsr	ObjectsLoad
000047BE 4EB9 0000 0000             		jsr	BuildSprites
000047C4 7000                       		moveq	#0,d0
000047C6 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000047CA 6600                       		bne.s	loc_39E8	; if yes, branch
000047CC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000047D0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000047D4 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000047D8                            
000047D8                            loc_39E8:
000047D8 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000047DC 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000047E0 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000047E4 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000047E8                            		; move.b	d0,($FFFFFE2F).w
000047E8 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000047EE 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000047F2 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000047F6 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000047FA 11C0 FFF9                  		move.b	d0,($FFFFFFF9).w	; GMZ: Clear truth nuke flag
000047FE 6100 0000                  		bsr.w	OscillateNumInit
00004802 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004808 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000480E 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004814 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000481A 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004820 7000                       		moveq	#0,d0
00004822 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004826 E548                       		lsl.w	#2,d0
00004828 2271 0000                  		movea.l	(a1,d0.w),a1
0000482C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004830 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004832 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00004838 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000483C 5340                       		subq.w	#1,d0
0000483E E548                       		lsl.w	#2,d0
00004840 2271 0000                  		movea.l	(a1,d0.w),a1
00004844                            
00004844                            Level_Demo:
00004844 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000484A 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000484E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004854 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004858 6A00                       		bpl.s	Level_ChkWaterPal
0000485A 31FC 021C F614             		move.w	#540,($FFFFF614).w
00004860 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00004866 6600                       		bne.s	Level_ChkWaterPal
00004868 31FC 01FE F614             		move.w	#510,($FFFFF614).w
0000486E                            
0000486E                            Level_ChkWaterPal:
0000486E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00004874 6600                       		bne.s	Level_Delay	; if not, branch
00004876 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00004878 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000487E 6600                       		bne.s	Level_WaterPal2	; if not, branch
00004880 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00004882                            
00004882                            Level_WaterPal2:
00004882 6100 E216                  		bsr.w	PalLoad4_Water
00004886                            
00004886                            Level_Delay:
00004886 323C 0003                  		move.w	#3,d1
0000488A                            
0000488A                            Level_DelayLoop:
0000488A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004890 6100 EBF4                  		bsr.w	DelayProgram
00004894 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004898                            
00004898 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000489E 6100 DE5C                  		bsr.w	Pal_FadeTo2
000048A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000048A6 6B00                       		bmi.s	Level_ClrCardArt
000048A8 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
000048AC 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
000048B0 5838 D124                  		addq.b	#4,($FFFFD124).w
000048B4 5838 D164                  		addq.b	#4,($FFFFD164).w
000048B8 6000                       		bra.s	Level_StartGame
000048BA                            ; ===========================================================================
000048BA                            
000048BA                            Level_ClrCardArt:
000048BA 7002                       		moveq	#2,d0
000048BC 4EB9 0000 1EFA             		jsr	(LoadPLC).l	; load explosion patterns
000048C2 7000                       		moveq	#0,d0
000048C4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000048C8 0640 0015                  		addi.w	#$15,d0
000048CC 4EB9 0000 1EFA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
000048D2                            
000048D2                            Level_StartGame:
000048D2 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
000048D8                            
000048D8                            ; ---------------------------------------------------------------------------
000048D8                            ; Main level loop (when	all title card and loading sequences are finished)
000048D8                            ; ---------------------------------------------------------------------------
000048D8                            
000048D8                            Level_MainLoop:
000048D8 6100 D448                  		bsr.w	PauseGame
000048DC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000048E2 6100 EBA2                  		bsr.w	DelayProgram
000048E6 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
000048EA 6100 0000                  		bsr.w	MoveSonicInDemo
000048EE 6100 0000                  		bsr.w	LZWaterEffects
000048F2 4EB9 0000 0000             		jsr	ObjectsLoad
000048F8 4A78 FE08                  		tst.w	($FFFFFE08).w
000048FC 6600                       		bne.s	loc_3B10
000048FE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004904 6400                       		bcc.s	loc_3B14
00004906                            
00004906                            loc_3B10:
00004906 6100 0000                  		bsr.w	DeformBgLayer
0000490A                            
0000490A                            loc_3B14:
0000490A 4EB9 0000 0000             		jsr	BuildSprites
00004910 4EB9 0000 0000             		jsr	ObjPosLoad
00004916 6100 D99E                  		bsr.w	PalCycle_Load
0000491A 6100 D64A                  		bsr.w	RunPLC_RAM
0000491E 6100 0000                  		bsr.w	OscillateNumDo
00004922 6100 0000                  		bsr.w	ChangeRingFrame
00004926 6100 0000                  		bsr.w	SignpostArtLoad
0000492A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004930 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00004932 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004936 6600 FBFE                  		bne.w	Level		; if yes, branch
0000493A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00004940 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004944 4E75                       		rts	
00004946                            ; ===========================================================================
00004946                            
00004946                            Level_ChkDemo:				; XREF: Level_MainLoop
00004946 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000494A 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000494C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004950 6700                       		beq.s	Level_EndDemo	; if not, branch
00004952 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004958 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000495C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004962 4E75                       		rts	
00004964                            ; ===========================================================================
00004964                            
00004964                            Level_EndDemo:				; XREF: Level_ChkDemo
00004964 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000496A 6600                       		bne.s	loc_3B88	; if not, branch
0000496C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004972 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004976 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004978 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000497E                            
0000497E                            loc_3B88:
0000497E 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004984 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000498A 4278 F794                  		clr.w	($FFFFF794).w
0000498E                            
0000498E                            loc_3B98:
0000498E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004994 6100 EAF0                  		bsr.w	DelayProgram
00004998 6100 0000                  		bsr.w	MoveSonicInDemo
0000499C 4EB9 0000 0000             		jsr	ObjectsLoad
000049A2 4EB9 0000 0000             		jsr	BuildSprites
000049A8 4EB9 0000 0000             		jsr	ObjPosLoad
000049AE 5378 F794                  		subq.w	#1,($FFFFF794).w
000049B2 6A00                       		bpl.s	loc_3BC8
000049B4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000049BA 6100 DE04                  		bsr.w	Pal_FadeOut
000049BE                            
000049BE                            loc_3BC8:
000049BE 4A78 F614                  		tst.w	($FFFFF614).w
000049C2 66CA                       		bne.s	loc_3B98
000049C4 4E75                       		rts	
000049C6                            ; ===========================================================================
000049C6                            ; ---------------------------------------------------------------------------
000049C6                            ; Subroutine to	do special water effects in Labyrinth Zone
000049C6                            ; ---------------------------------------------------------------------------
000049C6                            
000049C6                            LZWaterEffects:				; XREF: Level
000049C6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000049CC 6600                       		bne.s	locret_3C28	; if not, branch
000049CE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000049D4 6400                       		bcc.s	LZMoveWater
000049D6 6100 0000                  		bsr.w	LZWindTunnels
000049DA 6100 0000                  		bsr.w	LZWaterSlides
000049DE 6100 0000                  		bsr.w	LZDynamicWater
000049E2                            
000049E2                            LZMoveWater:
000049E2 4238 F64E                  		clr.b	($FFFFF64E).w
000049E6 7000                       		moveq	#0,d0
000049E8 1038 FE60                  		move.b	($FFFFFE60).w,d0
000049EC E248                       		lsr.w	#1,d0
000049EE D078 F648                  		add.w	($FFFFF648).w,d0
000049F2 31C0 F646                  		move.w	d0,($FFFFF646).w
000049F6 3038 F646                  		move.w	($FFFFF646).w,d0
000049FA 9078 F704                  		sub.w	($FFFFF704).w,d0
000049FE 6400                       		bcc.s	loc_3C1A
00004A00 4A40                       		tst.w	d0
00004A02 6A00                       		bpl.s	loc_3C1A
00004A04 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004A0A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004A10                            
00004A10                            loc_3C1A:
00004A10 0C40 00DF                  		cmpi.w	#$DF,d0
00004A14 6500                       		bcs.s	loc_3C24
00004A16 303C 00DF                  		move.w	#$DF,d0
00004A1A                            
00004A1A                            loc_3C24:
00004A1A 11C0 F625                  		move.b	d0,($FFFFF625).w
00004A1E                            
00004A1E                            locret_3C28:
00004A1E 4E75                       		rts	
00004A20                            ; ===========================================================================
00004A20                            ; ---------------------------------------------------------------------------
00004A20                            ; Labyrinth default water heights
00004A20                            ; ---------------------------------------------------------------------------
00004A20                            WaterHeight:	incbin	misc\lz_heigh.bin
00004A28                            		even
00004A28                            ; ===========================================================================
00004A28                            
00004A28                            ; ---------------------------------------------------------------------------
00004A28                            ; Labyrinth dynamic water routines
00004A28                            ; ---------------------------------------------------------------------------
00004A28                            
00004A28                            LZDynamicWater:				; XREF: LZWaterEffects
00004A28 7000                       		moveq	#0,d0
00004A2A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004A2E D040                       		add.w	d0,d0
00004A30 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004A34 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004A38 7200                       		moveq	#0,d1
00004A3A 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004A3E 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004A42 9078 F648                  		sub.w	($FFFFF648).w,d0
00004A46 6700                       		beq.s	locret_3C5A
00004A48 6400                       		bcc.s	loc_3C56
00004A4A 4441                       		neg.w	d1
00004A4C                            
00004A4C                            loc_3C56:
00004A4C D378 F648                  		add.w	d1,($FFFFF648).w
00004A50                            
00004A50                            locret_3C5A:
00004A50 4E75                       		rts	
00004A52                            ; ===========================================================================
00004A52 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004A54 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004A56 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004A58 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004A5A                            ; ===========================================================================
00004A5A                            
00004A5A                            DynWater_LZ1:				; XREF: DynWater_Index
00004A5A 3038 F700                  		move.w	($FFFFF700).w,d0
00004A5E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004A62 6600                       		bne.s	loc_3CD0
00004A64 323C 00B8                  		move.w	#$B8,d1
00004A68 0C40 0600                  		cmpi.w	#$600,d0
00004A6C 6500                       		bcs.s	loc_3CB4
00004A6E 323C 0108                  		move.w	#$108,d1
00004A72 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004A78 6500                       		bcs.s	loc_3CBA
00004A7A 0C40 0C00                  		cmpi.w	#$C00,d0
00004A7E 6500                       		bcs.s	loc_3CB4
00004A80 323C 0318                  		move.w	#$318,d1
00004A84 0C40 1080                  		cmpi.w	#$1080,d0
00004A88 6500                       		bcs.s	loc_3CB4
00004A8A 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004A90 323C 05C8                  		move.w	#$5C8,d1
00004A94 0C40 1380                  		cmpi.w	#$1380,d0
00004A98 6500                       		bcs.s	loc_3CB4
00004A9A 323C 03A8                  		move.w	#$3A8,d1
00004A9E B278 F648                  		cmp.w	($FFFFF648).w,d1
00004AA2 6600                       		bne.s	loc_3CB4
00004AA4 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004AAA                            
00004AAA                            loc_3CB4:
00004AAA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004AAE 4E75                       		rts	
00004AB0                            ; ===========================================================================
00004AB0                            
00004AB0                            loc_3CBA:				; XREF: DynWater_LZ1
00004AB0 0C40 0C80                  		cmpi.w	#$C80,d0
00004AB4 65F4                       		bcs.s	loc_3CB4
00004AB6 323C 00E8                  		move.w	#$E8,d1
00004ABA 0C40 1500                  		cmpi.w	#$1500,d0
00004ABE 65EA                       		bcs.s	loc_3CB4
00004AC0 323C 0108                  		move.w	#$108,d1
00004AC4 60E4                       		bra.s	loc_3CB4
00004AC6                            ; ===========================================================================
00004AC6                            
00004AC6                            loc_3CD0:				; XREF: DynWater_LZ1
00004AC6 5302                       		subq.b	#1,d2
00004AC8 6600                       		bne.s	locret_3CF4
00004ACA 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004AD0 6400                       		bcc.s	locret_3CF4
00004AD2 323C 03A8                  		move.w	#$3A8,d1
00004AD6 0C40 1300                  		cmpi.w	#$1300,d0
00004ADA 6500                       		bcs.s	loc_3CF0
00004ADC 323C 0108                  		move.w	#$108,d1
00004AE0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004AE6                            
00004AE6                            loc_3CF0:
00004AE6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004AEA                            
00004AEA                            locret_3CF4:
00004AEA 4E75                       		rts	
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            DynWater_LZ2:				; XREF: DynWater_Index
00004AEC 3038 F700                  		move.w	($FFFFF700).w,d0
00004AF0 323C 0328                  		move.w	#$328,d1
00004AF4 0C40 0500                  		cmpi.w	#$500,d0
00004AF8 6500                       		bcs.s	loc_3D12
00004AFA 323C 03C8                  		move.w	#$3C8,d1
00004AFE 0C40 0B00                  		cmpi.w	#$B00,d0
00004B02 6500                       		bcs.s	loc_3D12
00004B04 323C 0428                  		move.w	#$428,d1
00004B08                            
00004B08                            loc_3D12:
00004B08 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B0C 4E75                       		rts	
00004B0E                            ; ===========================================================================
00004B0E                            
00004B0E                            DynWater_LZ3:				; XREF: DynWater_Index
00004B0E 3038 F700                  		move.w	($FFFFF700).w,d0
00004B12 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004B16 6600                       		bne.s	loc_3D5E
00004B18 323C 0500                  		move.w	#$500,d1
00004B1C 0C40 0600                  		cmpi.w	#$600,d0
00004B20 6500                       		bcs.s	loc_3D54
00004B22 0C40 1B00                  		cmpi.w	#$1B00,d0
00004B26 6500                       		bcs.s	loc_3D54
00004B28 323C 0850                  		move.w	#$850,d1
00004B2C                            
00004B2C                            loc_3D54:
00004B2C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B30 31C1 F648                  		move.w	d1,($FFFFF648).w
00004B34 4E75                       		rts	
00004B36                            ; ===========================================================================
00004B36                            
00004B36                            loc_3D5E:				; XREF: DynWater_LZ3
00004B36 5302                       		subq.b	#1,d2
00004B38 6600                       		bne.s	loc_3DA8
00004B3A 323C 04C8                  		move.w	#$4C8,d1
00004B3E 0C40 0770                  		cmpi.w	#$770,d0
00004B42 6500                       		bcs.s	loc_3DA2
00004B44 323C 0308                  		move.w	#$308,d1
00004B48 0C40 1400                  		cmpi.w	#$1400,d0
00004B4C 6500                       		bcs.s	loc_3DA2
00004B4E 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004B54 6700                       		beq.s	loc_3D8E
00004B56 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004B5C 6400                       		bcc.s	loc_3D8E
00004B5E 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004B64 6400                       		bcc.s	loc_3DA2
00004B66                            
00004B66                            loc_3D8E:
00004B66 323C 0508                  		move.w	#$508,d1
00004B6A 31C1 F648                  		move.w	d1,($FFFFF648).w
00004B6E 0C40 1770                  		cmpi.w	#$1770,d0
00004B72 6500                       		bcs.s	loc_3DA2
00004B74 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004B7A                            
00004B7A                            loc_3DA2:
00004B7A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B7E 4E75                       		rts	
00004B80                            ; ===========================================================================
00004B80                            
00004B80                            loc_3DA8:
00004B80 5302                       		subq.b	#1,d2
00004B82 6600                       		bne.s	loc_3DD2
00004B84 323C 0508                  		move.w	#$508,d1
00004B88 0C40 1860                  		cmpi.w	#$1860,d0
00004B8C 6500                       		bcs.s	loc_3DCC
00004B8E 323C 0188                  		move.w	#$188,d1
00004B92 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B96 6400                       		bcc.s	loc_3DC6
00004B98 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004B9C 6600                       		bne.s	loc_3DCC
00004B9E                            
00004B9E                            loc_3DC6:
00004B9E 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004BA4                            
00004BA4                            loc_3DCC:
00004BA4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004BA8 4E75                       		rts	
00004BAA                            ; ===========================================================================
00004BAA                            
00004BAA                            loc_3DD2:
00004BAA 5302                       		subq.b	#1,d2
00004BAC 6600                       		bne.s	loc_3E0E
00004BAE 323C 0188                  		move.w	#$188,d1
00004BB2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004BB6 6500                       		bcs.s	loc_3E04
00004BB8 323C 0900                  		move.w	#$900,d1
00004BBC 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004BC0 6500                       		bcs.s	loc_3E04
00004BC2 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004BC8 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004BCE 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004BD4 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004BDA 4E75                       		rts	
00004BDC                            ; ===========================================================================
00004BDC                            
00004BDC                            loc_3E04:
00004BDC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004BE0 31C1 F648                  		move.w	d1,($FFFFF648).w
00004BE4 4E75                       		rts	
00004BE6                            ; ===========================================================================
00004BE6                            
00004BE6                            loc_3E0E:
00004BE6 0C40 1E00                  		cmpi.w	#$1E00,d0
00004BEA 6500                       		bcs.s	locret_3E1A
00004BEC 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004BF2                            
00004BF2                            locret_3E1A:
00004BF2 4E75                       		rts	
00004BF4                            ; ===========================================================================
00004BF4                            
00004BF4                            DynWater_SBZ3:				; XREF: DynWater_Index
00004BF4 323C 0228                  		move.w	#$228,d1
00004BF8 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004BFE 6500                       		bcs.s	loc_3E2C
00004C00 323C 04C8                  		move.w	#$4C8,d1
00004C04                            
00004C04                            loc_3E2C:
00004C04 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004C08 4E75                       		rts
00004C0A                            
00004C0A                            ; ---------------------------------------------------------------------------
00004C0A                            ; Labyrinth Zone "wind tunnels"	subroutine
00004C0A                            ; ---------------------------------------------------------------------------
00004C0A                            
00004C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C0A                            
00004C0A                            
00004C0A                            LZWindTunnels:				; XREF: LZWaterEffects
00004C0A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004C0E 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004C12 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004C18 7000                       		moveq	#0,d0
00004C1A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004C1E E748                       		lsl.w	#3,d0
00004C20 D4C0                       		adda.w	d0,a2
00004C22 7200                       		moveq	#0,d1
00004C24 4A38 FE11                  		tst.b	($FFFFFE11).w
00004C28 6600                       		bne.s	loc_3E56
00004C2A 7201                       		moveq	#1,d1
00004C2C 514A                       		subq.w	#8,a2
00004C2E                            
00004C2E                            loc_3E56:
00004C2E 43F8 D000                  		lea	($FFFFD000).w,a1
00004C32                            
00004C32                            LZWind_Loop:
00004C32 3029 0008                  		move.w	8(a1),d0
00004C36 B052                       		cmp.w	(a2),d0
00004C38 6500 0000                  		bcs.w	loc_3EF4
00004C3C B06A 0004                  		cmp.w	4(a2),d0
00004C40 6400 0000                  		bcc.w	loc_3EF4
00004C44 3429 000C                  		move.w	$C(a1),d2
00004C48 B46A 0002                  		cmp.w	2(a2),d2
00004C4C 6500                       		bcs.s	loc_3EF4
00004C4E B46A 0006                  		cmp.w	6(a2),d2
00004C52 6400                       		bcc.s	loc_3EF4
00004C54 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004C58 0200 003F                  		andi.b	#$3F,d0
00004C5C 6600                       		bne.s	loc_3E90
00004C5E 303C 00D0                  		move.w	#$D0,d0
00004C62 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004C68                            
00004C68                            loc_3E90:
00004C68 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004C6C 6600 0000                  		bne.w	locret_3F0A
00004C70 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004C76 6400                       		bcc.s	loc_3F06
00004C78 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004C7E 0440 0080                  		subi.w	#$80,d0
00004C82 B052                       		cmp.w	(a2),d0
00004C84 6400                       		bcc.s	LZWind_Move
00004C86 7002                       		moveq	#2,d0
00004C88 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004C8E 6600                       		bne.s	loc_3EBA
00004C90 4440                       		neg.w	d0
00004C92                            
00004C92                            loc_3EBA:
00004C92 D169 000C                  		add.w	d0,$C(a1)
00004C96                            
00004C96                            LZWind_Move:
00004C96 5869 0008                  		addq.w	#4,8(a1)
00004C9A 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004CA0 337C 0000 0012             		move.w	#0,$12(a1)
00004CA6 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004CAC 08E9 0001 0022             		bset	#1,$22(a1)
00004CB2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004CB8 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004CBA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004CBE                            
00004CBE                            LZWind_MoveDown:
00004CBE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004CC4 6700                       		beq.s	locret_3EF2	; if not, branch
00004CC6 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004CCA                            
00004CCA                            locret_3EF2:
00004CCA 4E75                       		rts	
00004CCC                            ; ===========================================================================
00004CCC                            
00004CCC                            loc_3EF4:				; XREF: LZWindTunnels
00004CCC 504A                       		addq.w	#8,a2
00004CCE 51C9 FF62                  		dbf	d1,LZWind_Loop
00004CD2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004CD6 6700                       		beq.s	locret_3F0A
00004CD8 137C 0000 001C             		move.b	#0,$1C(a1)
00004CDE                            
00004CDE                            loc_3F06:
00004CDE 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004CE2                            
00004CE2                            locret_3F0A:
00004CE2 4E75                       		rts	
00004CE4                            ; End of function LZWindTunnels
00004CE4                            
00004CE4                            ; ===========================================================================
00004CE4 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004CEC 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004CFE 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004D0C                            					; XREF: LZWindTunnels
00004D0C                            		even
00004D0C                            
00004D0C                            ; ---------------------------------------------------------------------------
00004D0C                            ; Labyrinth Zone water slide subroutine
00004D0C                            ; ---------------------------------------------------------------------------
00004D0C                            
00004D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D0C                            
00004D0C                            
00004D0C                            LZWaterSlides:				; XREF: LZWaterEffects
00004D0C 43F8 D000                  		lea	($FFFFD000).w,a1
00004D10 0829 0001 0022             		btst	#1,$22(a1)
00004D16 6600                       		bne.s	loc_3F6A
00004D18 3029 000C                  		move.w	$C(a1),d0
00004D1C E248                       		lsr.w	#1,d0
00004D1E 0240 0380                  		andi.w	#$380,d0
00004D22 1229 0008                  		move.b	8(a1),d1
00004D26 0241 007F                  		andi.w	#$7F,d1
00004D2A D041                       		add.w	d1,d0
00004D2C 45F8 A400                  		lea	($FFFFA400).w,a2
00004D30 1032 0000                  		move.b	(a2,d0.w),d0
00004D34 45FA 0000                  		lea	byte_3FCF(pc),a2
00004D38 7206                       		moveq	#6,d1
00004D3A                            
00004D3A                            loc_3F62:
00004D3A B022                       		cmp.b	-(a2),d0
00004D3C 57C9 FFFC                  		dbeq	d1,loc_3F62
00004D40 6700                       		beq.s	LZSlide_Move
00004D42                            
00004D42                            loc_3F6A:
00004D42 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004D46 6700                       		beq.s	locret_3F7A
00004D48 337C 0005 003E             		move.w	#5,$3E(a1)
00004D4E 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004D52                            
00004D52                            locret_3F7A:
00004D52 4E75                       		rts	
00004D54                            ; ===========================================================================
00004D54                            
00004D54                            LZSlide_Move:				; XREF: LZWaterSlides
00004D54 0C41 0003                  		cmpi.w	#3,d1
00004D58 6400                       		bcc.s	loc_3F84
00004D5A 4E71                       		nop	
00004D5C                            
00004D5C                            loc_3F84:
00004D5C 08A9 0000 0022             		bclr	#0,$22(a1)
00004D62 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004D66 1340 0014                  		move.b	d0,$14(a1)
00004D6A 6A00                       		bpl.s	loc_3F9A
00004D6C 08E9 0000 0022             		bset	#0,$22(a1)
00004D72                            
00004D72                            loc_3F9A:
00004D72 4229 0015                  		clr.b	$15(a1)
00004D76 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004D7C 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004D82 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004D86 0200 001F                  		andi.b	#$1F,d0
00004D8A 6600                       		bne.s	locret_3FBE
00004D8C 303C 00D0                  		move.w	#$D0,d0
00004D90 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play water sound
00004D96                            
00004D96                            locret_3FBE:
00004D96 4E75                       		rts	
00004D98                            ; End of function LZWaterSlides
00004D98                            
00004D98                            ; ===========================================================================
00004D98 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004DA7 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004DA8                            		even
00004DA8                            
00004DA8                            ; ---------------------------------------------------------------------------
00004DA8                            ; Subroutine to	move Sonic in demo mode
00004DA8                            ; ---------------------------------------------------------------------------
00004DA8                            
00004DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DA8                            
00004DA8                            
00004DA8                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004DA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DAC 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004DAE 4E75                       		rts	
00004DB0                            ; ===========================================================================
00004DB0                            
00004DB0                            ; This is an unused subroutine for recording a demo
00004DB0                            
00004DB0                            MoveDemo_Record:
00004DB0 43F9 0008 0000             		lea	($80000).l,a1
00004DB6 3038 F790                  		move.w	($FFFFF790).w,d0
00004DBA D2C0                       		adda.w	d0,a1
00004DBC 1038 F604                  		move.b	($FFFFF604).w,d0
00004DC0 B011                       		cmp.b	(a1),d0
00004DC2 6600                       		bne.s	loc_3FFA
00004DC4 5229 0001                  		addq.b	#1,1(a1)
00004DC8 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004DCE 6700                       		beq.s	loc_3FFA
00004DD0 4E75                       		rts	
00004DD2                            ; ===========================================================================
00004DD2                            
00004DD2                            loc_3FFA:				; XREF: MoveDemo_Record
00004DD2 1340 0002                  		move.b	d0,2(a1)
00004DD6 137C 0000 0003             		move.b	#0,3(a1)
00004DDC 5478 F790                  		addq.w	#2,($FFFFF790).w
00004DE0 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004DE6 4E75                       		rts	
00004DE8                            ; ===========================================================================
00004DE8                            
00004DE8                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004DE8 4A38 F604                  		tst.b	($FFFFF604).w
00004DEC 6A00                       		bpl.s	loc_4022
00004DEE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004DF2 6B00                       		bmi.s	loc_4022
00004DF4 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004DFA                            
00004DFA                            loc_4022:
00004DFA 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004E00 7000                       		moveq	#0,d0
00004E02 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004E06 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004E0C 6600                       		bne.s	loc_4038
00004E0E 7006                       		moveq	#6,d0
00004E10                            
00004E10                            loc_4038:
00004E10 E548                       		lsl.w	#2,d0
00004E12 2271 0000                  		movea.l	(a1,d0.w),a1
00004E16 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004E1A 6A00                       		bpl.s	loc_4056
00004E1C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004E22 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004E26 5340                       		subq.w	#1,d0
00004E28 E548                       		lsl.w	#2,d0
00004E2A 2271 0000                  		movea.l	(a1,d0.w),a1
00004E2E                            
00004E2E                            loc_4056:
00004E2E 3038 F790                  		move.w	($FFFFF790).w,d0
00004E32 D2C0                       		adda.w	d0,a1
00004E34 1011                       		move.b	(a1),d0
00004E36 41F8 F604                  		lea	($FFFFF604).w,a0
00004E3A 1200                       		move.b	d0,d1
00004E3C 1410                       		move.b	(a0),d2
00004E3E B500                       		eor.b	d2,d0
00004E40 10C1                       		move.b	d1,(a0)+
00004E42 C001                       		and.b	d1,d0
00004E44 10C0                       		move.b	d0,(a0)+
00004E46 5338 F792                  		subq.b	#1,($FFFFF792).w
00004E4A 6400                       		bcc.s	locret_407E
00004E4C 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004E52 5478 F790                  		addq.w	#2,($FFFFF790).w
00004E56                            
00004E56                            locret_407E:
00004E56 4E75                       		rts	
00004E58                            ; End of function MoveSonicInDemo
00004E58                            
00004E58                            ; ===========================================================================
00004E58                            ; ---------------------------------------------------------------------------
00004E58                            ; Demo sequence	pointers
00004E58                            ; ---------------------------------------------------------------------------
00004E58                            Demo_Index:
00004E58                            	include "_inc\Demo pointers for intro.asm"
00004E58                            ; ---------------------------------------------------------------------------
00004E58                            ; Demo sequence	pointers
00004E58                            ; ---------------------------------------------------------------------------
00004E58 0000 0000                  	dc.l Demo_GHZ
00004E5C 0000 0000                  	dc.l Demo_GHZ
00004E60 0000 0000                  	dc.l Demo_MZ
00004E64 0000 0000                  	dc.l Demo_MZ
00004E68 0000 0000                  	dc.l Demo_SYZ
00004E6C 0000 0000                  	dc.l Demo_SYZ
00004E70 0000 0000                  	dc.l Demo_SS
00004E74 0000 0000                  	dc.l Demo_SS
00004E74 0000 0000                  	dc.l Demo_SS
00004E78                            
00004E78                            Demo_EndIndex:
00004E78                            	include "_inc\Demo pointers for ending.asm"
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            ; Demo (ending) sequence pointers
00004E78                            ; ---------------------------------------------------------------------------
00004E78 0000 0000                  	dc.l Demo_EndGHZ1
00004E7C 0000 0000                  	dc.l Demo_EndMZ
00004E80 0000 0000                  	dc.l Demo_EndSYZ
00004E84 0000 0000                  	dc.l Demo_EndLZ
00004E88 0000 0000                  	dc.l Demo_EndSLZ
00004E8C 0000 0000                  	dc.l Demo_EndSBZ1
00004E90 0000 0000                  	dc.l Demo_EndSBZ2
00004E94 0000 0000                  	dc.l Demo_EndGHZ2
00004E94 0000 0000                  	dc.l Demo_EndGHZ2
00004E98                            
00004E98 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004EA8 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004EB8 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004EC8                            		even
00004EC8                            
00004EC8                            ; ---------------------------------------------------------------------------
00004EC8                            ; Collision index loading subroutine
00004EC8                            ; ---------------------------------------------------------------------------
00004EC8                            
00004EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EC8                            
00004EC8                            
00004EC8                            ColIndexLoad:				; XREF: Level
00004EC8 7000                       		moveq	#0,d0
00004ECA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004ECE E548                       		lsl.w	#2,d0
00004ED0 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004ED6 4E75                       		rts	
00004ED8                            ; End of function ColIndexLoad
00004ED8                            
00004ED8                            ; ===========================================================================
00004ED8                            ; ---------------------------------------------------------------------------
00004ED8                            ; Collision index pointers
00004ED8                            ; ---------------------------------------------------------------------------
00004ED8                            ColPointers:
00004ED8                            	include "_inc\Collision index pointers.asm"
00004ED8                            ; ---------------------------------------------------------------------------
00004ED8                            ; Collision index pointers
00004ED8                            ; ---------------------------------------------------------------------------
00004ED8 0000 0000                  	dc.l Col_GHZ
00004EDC 0000 0000                  	dc.l Col_LZ
00004EE0 0000 0000                  	dc.l Col_MZ
00004EE4 0000 0000                  	dc.l Col_SLZ
00004EE8 0000 0000                  	dc.l Col_SYZ
00004EEC 0000 0000                  	dc.l Col_SBZ
00004EF0 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004EF4 0000 0000                  	dc.l Col_BHZ
00004EF4 0000 0000                  	dc.l Col_BHZ
00004EF8                            
00004EF8                            ; ---------------------------------------------------------------------------
00004EF8                            ; Oscillating number subroutine
00004EF8                            ; ---------------------------------------------------------------------------
00004EF8                            
00004EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EF8                            
00004EF8                            
00004EF8                            OscillateNumInit:			; XREF: Level
00004EF8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004EFC 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004F02 7220                       		moveq	#$20,d1
00004F04                            
00004F04                            Osc_Loop:
00004F04 32DA                       		move.w	(a2)+,(a1)+
00004F06 51C9 FFFC                  		dbf	d1,Osc_Loop
00004F0A 4E75                       		rts	
00004F0C                            ; End of function OscillateNumInit
00004F0C                            
00004F0C                            ; ===========================================================================
00004F0C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004F10 0000 0080                  		dc.w 0,	$80
00004F14 0000 0080                  		dc.w 0,	$80
00004F18 0000 0080                  		dc.w 0,	$80
00004F1C 0000 0080                  		dc.w 0,	$80
00004F20 0000 0080                  		dc.w 0,	$80
00004F24 0000 0080                  		dc.w 0,	$80
00004F28 0000 0080                  		dc.w 0,	$80
00004F2C 0000 0080                  		dc.w 0,	$80
00004F30 0000 50F0                  		dc.w 0,	$50F0
00004F34 011E 2080                  		dc.w $11E, $2080
00004F38 00B4 3080                  		dc.w $B4, $3080
00004F3C 010E 5080                  		dc.w $10E, $5080
00004F40 01C2 7080                  		dc.w $1C2, $7080
00004F44 0276 0080                  		dc.w $276, $80
00004F48 0000 0080                  		dc.w 0,	$80
00004F4C 0000                       		dc.w 0
00004F4E                            		even
00004F4E                            
00004F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F4E                            
00004F4E                            
00004F4E                            OscillateNumDo:				; XREF: Level
00004F4E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F54 6400                       		bcc.s	locret_41C4
00004F56 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004F5A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004F60 3619                       		move.w	(a1)+,d3
00004F62 720F                       		moveq	#$F,d1
00004F64                            
00004F64                            loc_4184:
00004F64 341A                       		move.w	(a2)+,d2
00004F66 381A                       		move.w	(a2)+,d4
00004F68 0303                       		btst	d1,d3
00004F6A 6600                       		bne.s	loc_41A4
00004F6C 3029 0002                  		move.w	2(a1),d0
00004F70 D042                       		add.w	d2,d0
00004F72 3340 0002                  		move.w	d0,2(a1)
00004F76 D151                       		add.w	d0,0(a1)
00004F78 B811                       		cmp.b	0(a1),d4
00004F7A 6200                       		bhi.s	loc_41BA
00004F7C 03C3                       		bset	d1,d3
00004F7E 6000                       		bra.s	loc_41BA
00004F80                            ; ===========================================================================
00004F80                            
00004F80                            loc_41A4:				; XREF: OscillateNumDo
00004F80 3029 0002                  		move.w	2(a1),d0
00004F84 9042                       		sub.w	d2,d0
00004F86 3340 0002                  		move.w	d0,2(a1)
00004F8A D151                       		add.w	d0,0(a1)
00004F8C B811                       		cmp.b	0(a1),d4
00004F8E 6300                       		bls.s	loc_41BA
00004F90 0383                       		bclr	d1,d3
00004F92                            
00004F92                            loc_41BA:
00004F92 5849                       		addq.w	#4,a1
00004F94 51C9 FFCE                  		dbf	d1,loc_4184
00004F98 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004F9C                            
00004F9C                            locret_41C4:
00004F9C 4E75                       		rts	
00004F9E                            ; End of function OscillateNumDo
00004F9E                            
00004F9E                            ; ===========================================================================
00004F9E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004FA2 0002 0018                  		dc.w 2,	$18
00004FA6 0002 0020                  		dc.w 2,	$20
00004FAA 0002 0030                  		dc.w 2,	$30
00004FAE 0004 0020                  		dc.w 4,	$20
00004FB2 0008 0008                  		dc.w 8,	8
00004FB6 0008 0040                  		dc.w 8,	$40
00004FBA 0004 0040                  		dc.w 4,	$40
00004FBE 0002 0050                  		dc.w 2,	$50
00004FC2 0002 0050                  		dc.w 2,	$50
00004FC6 0002 0020                  		dc.w 2,	$20
00004FCA 0003 0030                  		dc.w 3,	$30
00004FCE 0005 0050                  		dc.w 5,	$50
00004FD2 0007 0070                  		dc.w 7,	$70
00004FD6 0002 0010                  		dc.w 2,	$10
00004FDA 0002 0010                  		dc.w 2,	$10
00004FDE                            		even
00004FDE                            
00004FDE                            ; ---------------------------------------------------------------------------
00004FDE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004FDE                            ; ---------------------------------------------------------------------------
00004FDE                            
00004FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FDE                            
00004FDE                            
00004FDE                            ChangeRingFrame:			; XREF: Level
00004FDE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004FE2 6A00                       		bpl.s	loc_421C
00004FE4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004FEA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004FEE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004FF4                            
00004FF4                            loc_421C:
00004FF4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004FF8 6A00                       		bpl.s	loc_4232
00004FFA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00005000 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00005004 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000500A                            
0000500A                            loc_4232:
0000500A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000500E 6A00                       		bpl.s	loc_4250
00005010 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00005016 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000501A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00005020 6500                       		bcs.s	loc_4250
00005022 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00005028                            
00005028                            loc_4250:
00005028 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000502C 6700                       		beq.s	locret_4272
0000502E 7000                       		moveq	#0,d0
00005030 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00005034 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00005038 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000503C EF58                       		rol.w	#7,d0
0000503E 0240 0003                  		andi.w	#3,d0
00005042 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00005046 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000504A                            
0000504A                            locret_4272:
0000504A 4E75                       		rts	
0000504C                            ; End of function ChangeRingFrame
0000504C                            
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; End-of-act signpost pattern loading subroutine
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            
0000504C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000504C                            
0000504C                            
0000504C                            SignpostArtLoad:			; XREF: Level
0000504C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00005050 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00005054 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000505A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000505C 3038 F700                  		move.w	($FFFFF700).w,d0
00005060 3238 F72A                  		move.w	($FFFFF72A).w,d1
00005064 0441 0100                  		subi.w	#$100,d1
00005068 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000506A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000506C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00005070 6700                       		beq.s	Signpost_Exit
00005072 B278 F728                  		cmp.w	($FFFFF728).w,d1
00005076 6700                       		beq.s	Signpost_Exit
00005078 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000507C 7012                       		moveq	#$12,d0
0000507E 6000 CEAC                  		bra.w	LoadPLC2	; load signpost	patterns
00005082                            ; ===========================================================================
00005082                            
00005082                            Signpost_Exit:
00005082 4E75                       		rts	
00005084                            ; End of function SignpostArtLoad
00005084                            
00005084                            ; ===========================================================================
00005084                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005104                            Demo_MZ:	incbin	demodata\i_mz.bin
00005234                            Demo_SYZ:	incbin	demodata\i_syz.bin
000052B4                            Demo_SS:	incbin	demodata\i_ss.bin
000053B4                            ; ===========================================================================
000053B4                            
000053B4                            ; ---------------------------------------------------------------------------
000053B4                            ; Special Stage
000053B4                            ; ---------------------------------------------------------------------------
000053B4                            
000053B4                            SpecialStage:				; XREF: GameModeArray
000053B4 303C 00CA                  		move.w	#$CA,d0
000053B8 6100 C95C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000053BC 6100 D50C                  		bsr.w	Pal_MakeFlash
000053C0 46FC 2700                  		move	#$2700,sr
000053C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000053CA 3CBC 8B03                  		move.w	#$8B03,(a6)
000053CE 3CBC 8004                  		move.w	#$8004,(a6)
000053D2 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000053D8 3CBC 9011                  		move.w	#$9011,(a6)
000053DC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053E0 0200 00BF                  		andi.b	#$BF,d0
000053E4 33C0 00C0 0004             		move.w	d0,($C00004).l
000053EA 6100 C852                  		bsr.w	ClearScreen
000053EE 46FC 2300                  		move	#$2300,sr
000053F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000053F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000053FC 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005402 3ABC 9780                  		move.w	#$9780,(a5)
00005406 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000540C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005414                            
00005414                            loc_463C:
00005414 3215                       		move.w	(a5),d1
00005416 0801 0001                  		btst	#1,d1
0000541A 66F8                       		bne.s	loc_463C
0000541C 3ABC 8F02                  		move.w	#$8F02,(a5)
00005420 6100 0000                  		bsr.w	SS_BGLoad
00005424 7014                       		moveq	#$14,d0
00005426 6100 CC3E                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000542A 43F8 D000                  		lea	($FFFFD000).w,a1
0000542E 7000                       		moveq	#0,d0
00005430 323C 07FF                  		move.w	#$7FF,d1
00005434                            
00005434                            SS_ClrObjRam:
00005434 22C0                       		move.l	d0,(a1)+
00005436 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000543A                            
0000543A 43F8 F700                  		lea	($FFFFF700).w,a1
0000543E 7000                       		moveq	#0,d0
00005440 323C 003F                  		move.w	#$3F,d1
00005444                            
00005444                            SS_ClrRam:
00005444 22C0                       		move.l	d0,(a1)+
00005446 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000544A                            
0000544A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000544E 7000                       		moveq	#0,d0
00005450 323C 0027                  		move.w	#$27,d1
00005454                            
00005454                            SS_ClrRam2:
00005454 22C0                       		move.l	d0,(a1)+
00005456 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000545A                            
0000545A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000545E 7000                       		moveq	#0,d0
00005460 323C 007F                  		move.w	#$7F,d1
00005464                            
00005464                            SS_ClrNemRam:
00005464 22C0                       		move.l	d0,(a1)+
00005466 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000546A                            
0000546A 4238 F64E                  		clr.b	($FFFFF64E).w
0000546E 4278 FE02                  		clr.w	($FFFFFE02).w
00005472 700A                       		moveq	#$A,d0
00005474 6100 D5D4                  		bsr.w	PalLoad1	; load special stage pallet
00005478 4EB9 0000 0000             		jsr	SS_Load
0000547E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00005486 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000548E 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00005494 6100 0000                  		bsr.w	PalCycle_SS
00005498 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
0000549C 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
000054A0 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
000054A6 303C 0089                  		move.w	#$89,d0
000054AA 6100 C864                  		bsr.w	PlaySound	; play special stage BG	music
000054AE 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000054B4 43F9 0000 4E58             		lea	(Demo_Index).l,a1
000054BA 7006                       		moveq	#6,d0
000054BC E548                       		lsl.w	#2,d0
000054BE 2271 0000                  		movea.l	(a1,d0.w),a1
000054C2 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000054C8 5338 F792                  		subq.b	#1,($FFFFF792).w
000054CC 4278 FE20                  		clr.w	($FFFFFE20).w
000054D0 4238 FE1B                  		clr.b	($FFFFFE1B).w
000054D4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000054DA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000054E0                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000054E0                            ;		beq.s	SS_NoDebug	; if not, branch
000054E0                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
000054E0                            ;		beq.s	SS_NoDebug	; if not, branch
000054E0                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000054E0                            
000054E0                            SS_NoDebug:
000054E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000054E4 0000 0040                  		ori.b	#$40,d0
000054E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000054EE 6100 D32E                  		bsr.w	Pal_MakeWhite
000054F2                            
000054F2                            ; ---------------------------------------------------------------------------
000054F2                            ; Main Special Stage loop
000054F2                            ; ---------------------------------------------------------------------------
000054F2                            
000054F2                            SS_MainLoop:
000054F2 6100 C82E                  		bsr.w	PauseGame
000054F6 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000054FC 6100 DF88                  		bsr.w	DelayProgram
00005500 4A78 F784                          tst.w   ($FFFFF784).w
00005504 6700                               beq.s   SS_NotReversed
00005506 5378 F784                          subi.w  #1,($FFFFF784).w
0000550A                            
0000550A                            SS_NotReversed:
0000550A 6100 F89C                  		bsr.w	MoveSonicInDemo
0000550E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005514 4EB9 0000 0000             		jsr	ObjectsLoad
0000551A 4EB9 0000 0000             		jsr	BuildSprites
00005520 4EB9 0000 0000             		jsr	SS_ShowLayout
00005526 6100 0000                  		bsr.w	SS_BGAnimate
0000552A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000552E 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005530 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00005534 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00005538                            
00005538                            SS_ChkEnd:
00005538 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000553E 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00005542                            
00005542 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005546 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000554A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005550 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00005556 6500                       		bcs.s	SS_End		; if not, branch
00005558 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000555C                            
0000555C                            SS_End:
0000555C 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00005562 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005568 4278 F794                  		clr.w	($FFFFF794).w
0000556C                            
0000556C                            SS_EndLoop:
0000556C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005572 6100 DF12                  		bsr.w	DelayProgram
00005576 6100 F830                  		bsr.w	MoveSonicInDemo
0000557A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005580 4EB9 0000 0000             		jsr	ObjectsLoad
00005586 4EB9 0000 0000             		jsr	BuildSprites
0000558C 4EB9 0000 0000             		jsr	SS_ShowLayout
00005592 6100 0000                  		bsr.w	SS_BGAnimate
00005596 5378 F794                  		subq.w	#1,($FFFFF794).w
0000559A 6A00                       		bpl.s	loc_47D4
0000559C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000055A2 6100 D346                  		bsr.w	Pal_ToWhite
000055A6                            
000055A6                            loc_47D4:
000055A6 4A78 F614                  		tst.w	($FFFFF614).w
000055AA 66C0                       		bne.s	SS_EndLoop
000055AC                            
000055AC 46FC 2700                  		move	#$2700,sr
000055B0 4DF9 00C0 0004             		lea	($C00004).l,a6
000055B6 3CBC 8230                  		move.w	#$8230,(a6)
000055BA 3CBC 8407                  		move.w	#$8407,(a6)
000055BE 3CBC 9001                  		move.w	#$9001,(a6)
000055C2 6100 C67A                  		bsr.w	ClearScreen
000055C6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000055D0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000055D6 6100 C7E2                  		bsr.w	NemDec
000055DA 4EB9 0000 0000             		jsr	Hud_Base
000055E0 46FC 2300                  		move	#$2300,sr
000055E4 7011                       		moveq	#$11,d0
000055E6 6100 D47E                  		bsr.w	PalLoad2	; load results screen pallet
000055EA 7000                       		moveq	#0,d0
000055EC 6100 C93E                  		bsr.w	LoadPLC2
000055F0 701B                       		moveq	#$1B,d0
000055F2 6100 C906                  		bsr.w	LoadPLC		; load results screen patterns
000055F6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000055FC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00005602 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005606 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000560A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000560E 303C 008E                  		move.w	#$8E,d0
00005612 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005618 43F8 D000                  		lea	($FFFFD000).w,a1
0000561C 7000                       		moveq	#0,d0
0000561E 323C 07FF                  		move.w	#$7FF,d1
00005622                            
00005622                            SS_EndClrObjRam:
00005622 22C0                       		move.l	d0,(a1)+
00005624 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005628                            
00005628 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000562E                            
0000562E                            SS_NormalExit:
0000562E 6100 C6F2                  		bsr.w	PauseGame
00005632 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005638 6100 DE4C                  		bsr.w	DelayProgram
0000563C 4EB9 0000 0000             		jsr	ObjectsLoad
00005642 4EB9 0000 0000             		jsr	BuildSprites
00005648 6100 C91C                  		bsr.w	RunPLC_RAM
0000564C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005650 67DC                       		beq.s	SS_NormalExit
00005652 4AB8 F680                  		tst.l	($FFFFF680).w
00005656 66D6                       		bne.s	SS_NormalExit
00005658 303C 00CA                  		move.w	#$CA,d0
0000565C 6100 C6B8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00005660 6100 D268                  		bsr.w	Pal_MakeFlash
00005664 4E75                       		rts	
00005666                            ; ===========================================================================
00005666                            
00005666                            SS_ToSegaScreen:
00005666 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000566C 4E75                       		rts
0000566E                            
0000566E                            ; ---------------------------------------------------------------------------
0000566E                            ; Special stage	background loading subroutine
0000566E                            ; ---------------------------------------------------------------------------
0000566E                            
0000566E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000566E                            
0000566E                            
0000566E                            SS_BGLoad:				; XREF: SpecialStage
0000566E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005674 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000567A 303C 4051                  		move.w	#$4051,d0
0000567E 6100 CA18                  		bsr.w	EniDec
00005682 263C 5000 0001             		move.l	#$50000001,d3
00005688 45F9 00FF 0080             		lea	($FF0080).l,a2
0000568E 7E06                       		moveq	#6,d7
00005690                            
00005690                            loc_48BE:
00005690 2003                       		move.l	d3,d0
00005692 7C03                       		moveq	#3,d6
00005694 7800                       		moveq	#0,d4
00005696 0C47 0003                  		cmpi.w	#3,d7
0000569A 6400                       		bcc.s	loc_48CC
0000569C 7801                       		moveq	#1,d4
0000569E                            
0000569E                            loc_48CC:
0000569E 7A07                       		moveq	#7,d5
000056A0                            
000056A0                            loc_48CE:
000056A0 224A                       		movea.l	a2,a1
000056A2 0A04 0001                  		eori.b	#1,d4
000056A6 6600                       		bne.s	loc_48E2
000056A8 0C47 0006                  		cmpi.w	#6,d7
000056AC 6600                       		bne.s	loc_48F2
000056AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000056B4                            
000056B4                            loc_48E2:
000056B4 48E7 F800                  		movem.l	d0-d4,-(sp)
000056B8 7207                       		moveq	#7,d1
000056BA 7407                       		moveq	#7,d2
000056BC 6100 C6DC                  		bsr.w	ShowVDPGraphics
000056C0 4CDF 001F                  		movem.l	(sp)+,d0-d4
000056C4                            
000056C4                            loc_48F2:
000056C4 0680 0010 0000             		addi.l	#$100000,d0
000056CA 51CD FFD4                  		dbf	d5,loc_48CE
000056CE 0680 0380 0000             		addi.l	#$3800000,d0
000056D4 0A04 0001                  		eori.b	#1,d4
000056D8 51CE FFC4                  		dbf	d6,loc_48CC
000056DC 0683 1000 0000             		addi.l	#$10000000,d3
000056E2 6A00                       		bpl.s	loc_491C
000056E4 4843                       		swap	d3
000056E6 0683 0000 C000             		addi.l	#$C000,d3
000056EC 4843                       		swap	d3
000056EE                            
000056EE                            loc_491C:
000056EE D4FC 0080                  		adda.w	#$80,a2
000056F2 51CF FF9C                  		dbf	d7,loc_48BE
000056F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000056FC 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005702 303C 4000                  		move.w	#$4000,d0
00005706 6100 C990                  		bsr.w	EniDec
0000570A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005710 203C 4000 0003             		move.l	#$40000003,d0
00005716 723F                       		moveq	#$3F,d1
00005718 741F                       		moveq	#$1F,d2
0000571A 6100 C67E                  		bsr.w	ShowVDPGraphics
0000571E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005724 203C 5000 0003             		move.l	#$50000003,d0
0000572A 723F                       		moveq	#$3F,d1
0000572C 743F                       		moveq	#$3F,d2
0000572E 6100 C66A                  		bsr.w	ShowVDPGraphics
00005732 4E75                       		rts	
00005734                            ; End of function SS_BGLoad
00005734                            
00005734                            ; ---------------------------------------------------------------------------
00005734                            ; Pallet cycling routine - special stage
00005734                            ; ---------------------------------------------------------------------------
00005734                            
00005734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005734                            
00005734                            
00005734                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00005734 4A78 F63A                  		tst.w	($FFFFF63A).w
00005738 6600                       		bne.s	locret_49E6
0000573A 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000573E 6A00                       		bpl.s	locret_49E6
00005740 4DF9 00C0 0004             		lea	($C00004).l,a6
00005746 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000574A 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000574E 0240 001F                  		andi.w	#$1F,d0
00005752 E548                       		lsl.w	#2,d0
00005754 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000575A D0C0                       		adda.w	d0,a0
0000575C 1018                       		move.b	(a0)+,d0
0000575E 6A00                       		bpl.s	loc_4992
00005760 303C 01FF                  		move.w	#$1FF,d0
00005764                            
00005764                            loc_4992:
00005764 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00005768 7000                       		moveq	#0,d0
0000576A 1018                       		move.b	(a0)+,d0
0000576C 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005770 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005776 43F1 0000                  		lea	(a1,d0.w),a1
0000577A 303C 8200                  		move.w	#-$7E00,d0
0000577E 1019                       		move.b	(a1)+,d0
00005780 3C80                       		move.w	d0,(a6)
00005782 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005786 303C 8400                  		move.w	#-$7C00,d0
0000578A 1018                       		move.b	(a0)+,d0
0000578C 3C80                       		move.w	d0,(a6)
0000578E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005798 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000057A0 7000                       		moveq	#0,d0
000057A2 1018                       		move.b	(a0)+,d0
000057A4 6B00                       		bmi.s	loc_49E8
000057A6 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000057AC D2C0                       		adda.w	d0,a1
000057AE 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000057B2 24D9                       		move.l	(a1)+,(a2)+
000057B4 24D9                       		move.l	(a1)+,(a2)+
000057B6 24D9                       		move.l	(a1)+,(a2)+
000057B8                            
000057B8                            locret_49E6:
000057B8 4E75                       		rts	
000057BA                            ; ===========================================================================
000057BA                            
000057BA                            loc_49E8:				; XREF: PalCycle_SS
000057BA 3238 F79E                  		move.w	($FFFFF79E).w,d1
000057BE 0C40 008A                  		cmpi.w	#$8A,d0
000057C2 6500                       		bcs.s	loc_49F4
000057C4 5241                       		addq.w	#1,d1
000057C6                            
000057C6                            loc_49F4:
000057C6 C2FC 002A                  		mulu.w	#$2A,d1
000057CA 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000057D0 D2C1                       		adda.w	d1,a1
000057D2 0240 007F                  		andi.w	#$7F,d0
000057D6 0880 0000                  		bclr	#0,d0
000057DA 6700                       		beq.s	loc_4A18
000057DC 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000057E0 24D1                       		move.l	(a1),(a2)+
000057E2 24E9 0004                  		move.l	4(a1),(a2)+
000057E6 24E9 0008                  		move.l	8(a1),(a2)+
000057EA                            
000057EA                            loc_4A18:
000057EA D2FC 000C                  		adda.w	#$C,a1
000057EE 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000057F2 0C40 000A                  		cmpi.w	#$A,d0
000057F6 6500                       		bcs.s	loc_4A2E
000057F8 0440 000A                  		subi.w	#$A,d0
000057FC 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005800                            
00005800                            loc_4A2E:
00005800 3200                       		move.w	d0,d1
00005802 D040                       		add.w	d0,d0
00005804 D041                       		add.w	d1,d0
00005806 D2C0                       		adda.w	d0,a1
00005808 24D9                       		move.l	(a1)+,(a2)+
0000580A 34D9                       		move.w	(a1)+,(a2)+
0000580C 4E75                       		rts	
0000580E                            ; End of function PalCycle_SS
0000580E                            
0000580E                            ; ===========================================================================
0000580E 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000581E                            					; XREF: PalCycle_SS
0000581E 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000582E 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000583E FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000584E 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000585E 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000586E 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000587E FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000588E                            		even
0000588E 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000589C                            					; XREF: PalCycle_SS
0000589C                            		even
0000589C                            
0000589C                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
000058E4                            		even
000058E4                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000059B6                            		even
000059B6                            
000059B6                            ; ---------------------------------------------------------------------------
000059B6                            ; Subroutine to	make the special stage background animated
000059B6                            ; ---------------------------------------------------------------------------
000059B6                            
000059B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B6                            
000059B6                            
000059B6                            SS_BGAnimate:				; XREF: SpecialStage
000059B6 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000059BA 6600                       		bne.s	loc_4BF6
000059BC 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000059C2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000059C8                            
000059C8                            loc_4BF6:
000059C8 0C40 0008                  		cmpi.w	#8,d0
000059CC 6400                       		bcc.s	loc_4C4E
000059CE 0C40 0006                  		cmpi.w	#6,d0
000059D2 6600                       		bne.s	loc_4C10
000059D4 5278 F718                  		addq.w	#1,($FFFFF718).w
000059D8 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000059DC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000059E2                            
000059E2                            loc_4C10:
000059E2 7000                       		moveq	#0,d0
000059E4 3038 F708                  		move.w	($FFFFF708).w,d0
000059E8 4440                       		neg.w	d0
000059EA 4840                       		swap	d0
000059EC 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000059F2 47F8 AA00                  		lea	($FFFFAA00).w,a3
000059F6 7609                       		moveq	#9,d3
000059F8                            
000059F8                            loc_4C26:
000059F8 302B 0002                  		move.w	2(a3),d0
000059FC 6100 DABA                  		bsr.w	CalcSine
00005A00 7400                       		moveq	#0,d2
00005A02 1419                       		move.b	(a1)+,d2
00005A04 C1C2                       		muls.w	d2,d0
00005A06 E080                       		asr.l	#8,d0
00005A08 36C0                       		move.w	d0,(a3)+
00005A0A 1419                       		move.b	(a1)+,d2
00005A0C 4882                       		ext.w	d2
00005A0E D55B                       		add.w	d2,(a3)+
00005A10 51CB FFE6                  		dbf	d3,loc_4C26
00005A14 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005A18 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005A1E 6000                       		bra.s	loc_4C7E
00005A20                            ; ===========================================================================
00005A20                            
00005A20                            loc_4C4E:				; XREF: SS_BGAnimate
00005A20 0C40 000C                  		cmpi.w	#$C,d0
00005A24 6600                       		bne.s	loc_4C74
00005A26 5378 F718                  		subq.w	#1,($FFFFF718).w
00005A2A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005A2E 243C 0001 8000             		move.l	#$18000,d2
00005A34 7206                       		moveq	#6,d1
00005A36                            
00005A36                            loc_4C64:
00005A36 2013                       		move.l	(a3),d0
00005A38 9082                       		sub.l	d2,d0
00005A3A 26C0                       		move.l	d0,(a3)+
00005A3C 0482 0000 2000             		subi.l	#$2000,d2
00005A42 51C9 FFF2                  		dbf	d1,loc_4C64
00005A46                            
00005A46                            loc_4C74:
00005A46 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005A4A 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005A50                            
00005A50                            loc_4C7E:
00005A50 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005A54 3038 F718                  		move.w	($FFFFF718).w,d0
00005A58 4440                       		neg.w	d0
00005A5A 4840                       		swap	d0
00005A5C 7600                       		moveq	#0,d3
00005A5E 161A                       		move.b	(a2)+,d3
00005A60 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005A64 4442                       		neg.w	d2
00005A66 0242 00FF                  		andi.w	#$FF,d2
00005A6A E54A                       		lsl.w	#2,d2
00005A6C                            
00005A6C                            loc_4C9A:
00005A6C 301B                       		move.w	(a3)+,d0
00005A6E 544B                       		addq.w	#2,a3
00005A70 7200                       		moveq	#0,d1
00005A72 121A                       		move.b	(a2)+,d1
00005A74 5341                       		subq.w	#1,d1
00005A76                            
00005A76                            loc_4CA4:
00005A76 2380 2000                  		move.l	d0,(a1,d2.w)
00005A7A 5842                       		addq.w	#4,d2
00005A7C 0242 03FC                  		andi.w	#$3FC,d2
00005A80 51C9 FFF4                  		dbf	d1,loc_4CA4
00005A84 51CB FFE6                  		dbf	d3,loc_4C9A
00005A88 4E75                       		rts	
00005A8A                            ; End of function SS_BGAnimate
00005A8A                            
00005A8A                            ; ===========================================================================
00005A8A 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005A96                            		even
00005A96 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005A9E                            		even
00005A9E 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005AB2                            		even
00005AB2                            					; XREF: SS_BGAnimate
00005AB2                            ; ===========================================================================
00005AB2                            
00005AB2                            ; ---------------------------------------------------------------------------
00005AB2                            ; Continue screen
00005AB2                            ; ---------------------------------------------------------------------------
00005AB2                            
00005AB2                            ContinueScreen:				; XREF: GameModeArray
00005AB2 6100 CCEC                  		bsr.w	Pal_FadeFrom
00005AB6 46FC 2700                  		move	#$2700,sr
00005ABA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005ABE 0200 00BF                  		andi.b	#$BF,d0
00005AC2 33C0 00C0 0004             		move.w	d0,($C00004).l
00005AC8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005ACE 3CBC 8004                  		move.w	#$8004,(a6)
00005AD2 3CBC 8700                  		move.w	#$8700,(a6)
00005AD6 6100 C166                  		bsr.w	ClearScreen
00005ADA 43F8 D000                  		lea	($FFFFD000).w,a1
00005ADE 7000                       		moveq	#0,d0
00005AE0 323C 07FF                  		move.w	#$7FF,d1
00005AE4                            
00005AE4                            Cont_ClrObjRam:
00005AE4 22C0                       		move.l	d0,(a1)+
00005AE6 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005AEA                            
00005AEA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005AF4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005AFA 6100 C2BE                  		bsr.w	NemDec
00005AFE 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005B08 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005B0E 6100 C2AA                  		bsr.w	NemDec
00005B12 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005B1C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005B22 6100 C296                  		bsr.w	NemDec
00005B26 720A                       		moveq	#10,d1
00005B28 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005B2E 7012                       		moveq	#$12,d0
00005B30 6100 CF18                  		bsr.w	PalLoad1	; load continue	screen pallet
00005B34 103C 0090                  		move.b	#$90,d0
00005B38 6100 C1D6                  		bsr.w	PlaySound	; play continue	music
00005B3C 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005B42 42B8 F700                  		clr.l	($FFFFF700).w
00005B46 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005B4E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005B54 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005B5A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005B60 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005B66 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005B6C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005B72 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005B78 4EB9 0000 0000             		jsr	ObjectsLoad
00005B7E 4EB9 0000 0000             		jsr	BuildSprites
00005B84 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005B88 0000 0040                  		ori.b	#$40,d0
00005B8C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005B92 6100 CB62                  		bsr.w	Pal_FadeTo
00005B96                            
00005B96                            ; ---------------------------------------------------------------------------
00005B96                            ; Continue screen main loop
00005B96                            ; ---------------------------------------------------------------------------
00005B96                            
00005B96                            Cont_MainLoop:
00005B96 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005B9C 6100 D8E8                  		bsr.w	DelayProgram
00005BA0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005BA6 6400                       		bcc.s	loc_4DF2
00005BA8 46FC 2700                  		move	#$2700,sr
00005BAC 3238 F614                  		move.w	($FFFFF614).w,d1
00005BB0 82FC 003C                  		divu.w	#$3C,d1
00005BB4 0281 0000 000F             		andi.l	#$F,d1
00005BBA 4EB9 0000 0000             		jsr	ContScrCounter
00005BC0 46FC 2300                  		move	#$2300,sr
00005BC4                            
00005BC4                            loc_4DF2:
00005BC4 4EB9 0000 0000             		jsr	ObjectsLoad
00005BCA 4EB9 0000 0000             		jsr	BuildSprites
00005BD0 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005BD6 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005BD8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005BDE 64B6                       		bcc.s	Cont_MainLoop
00005BE0 4A78 F614                  		tst.w	($FFFFF614).w
00005BE4 6600 FFB0                  		bne.w	Cont_MainLoop
00005BE8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005BEE 4E75                       		rts	
00005BF0                            ; ===========================================================================
00005BF0                            
00005BF0                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005BF0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005BF6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005BFC 7000                       		moveq	#0,d0
00005BFE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C02 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C06 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C0A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005C0E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005C12 4E75                       		rts	
00005C14                            ; ===========================================================================
00005C14                            
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            ; Object 80 - Continue screen elements
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            
00005C14                            Obj80:					; XREF: Obj_Index
00005C14 7000                       		moveq	#0,d0
00005C16 1028 0024                  		move.b	$24(a0),d0
00005C1A 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005C1E 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005C22                            ; ===========================================================================
00005C22 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005C24 0000                       		dc.w Obj80_Display-Obj80_Index
00005C26 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005C28 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005C2A                            ; ===========================================================================
00005C2A                            
00005C2A                            Obj80_Main:				; XREF: Obj80_Index
00005C2A 5428 0024                  		addq.b	#2,$24(a0)
00005C2E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005C36 317C 8500 0002             		move.w	#$8500,2(a0)
00005C3C 117C 0000 0001             		move.b	#0,1(a0)
00005C42 117C 003C 0019             		move.b	#$3C,$19(a0)
00005C48 317C 0120 0008             		move.w	#$120,8(a0)
00005C4E 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005C54 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005C5A                            
00005C5A                            Obj80_Display:				; XREF: Obj80_Index
00005C5A 4EF9 0000 0000             		jmp	DisplaySprite
00005C60                            ; ===========================================================================
00005C60                            Obj80_MiniSonicPos:
00005C60 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005C72 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005C7E                            ; ===========================================================================
00005C7E                            
00005C7E                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005C7E 2248                       		movea.l	a0,a1
00005C80 45F9 0000 5C60             		lea	(Obj80_MiniSonicPos).l,a2
00005C86 7200                       		moveq	#0,d1
00005C88 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005C8C 5501                       		subq.b	#2,d1
00005C8E 6400                       		bcc.s	loc_4EC4
00005C90 4EF9 0000 0000             		jmp	DeleteObject
00005C96                            ; ===========================================================================
00005C96                            
00005C96                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005C96 7601                       		moveq	#1,d3
00005C98 0C01 000E                  		cmpi.b	#$E,d1
00005C9C 6500                       		bcs.s	loc_4ED0
00005C9E 7600                       		moveq	#0,d3
00005CA0 720E                       		moveq	#$E,d1
00005CA2                            
00005CA2                            loc_4ED0:
00005CA2 1401                       		move.b	d1,d2
00005CA4 0202 0001                  		andi.b	#1,d2
00005CA8                            
00005CA8                            Obj80_MiniSonLoop:
00005CA8 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005CAC 335A 0008                  		move.w	(a2)+,8(a1)
00005CB0 4A02                       		tst.b	d2
00005CB2 6700                       		beq.s	loc_4EEA
00005CB4 0469 000A 0008             		subi.w	#$A,8(a1)
00005CBA                            
00005CBA                            loc_4EEA:
00005CBA 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005CC0 137C 0006 001A             		move.b	#6,$1A(a1)
00005CC6 137C 0006 0024             		move.b	#6,$24(a1)
00005CCC 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005CD4 337C 8551 0002             		move.w	#$8551,2(a1)
00005CDA 137C 0000 0001             		move.b	#0,1(a1)
00005CE0 43E9 0040                  		lea	$40(a1),a1
00005CE4 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005CE8 43E9 FFC0                  		lea	-$40(a1),a1
00005CEC 1343 0028                  		move.b	d3,$28(a1)
00005CF0                            
00005CF0                            Obj80_ChkType:				; XREF: Obj80_Index
00005CF0 4A28 0028                  		tst.b	$28(a0)
00005CF4 6700                       		beq.s	loc_4F40
00005CF6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005CFC 6500                       		bcs.s	loc_4F40
00005CFE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005D02 0200 0001                  		andi.b	#1,d0
00005D06 6600                       		bne.s	loc_4F40
00005D08 4A78 D010                  		tst.w	($FFFFD010).w
00005D0C 6600                       		bne.s	Obj80_Delete
00005D0E 4E75                       		rts	
00005D10                            ; ===========================================================================
00005D10                            
00005D10                            loc_4F40:				; XREF: Obj80_ChkType
00005D10 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005D14 0200 000F                  		andi.b	#$F,d0
00005D18 6600                       		bne.s	Obj80_Display2
00005D1A 0868 0000 001A             		bchg	#0,$1A(a0)
00005D20                            
00005D20                            Obj80_Display2:
00005D20 4EF9 0000 0000             		jmp	DisplaySprite
00005D26                            ; ===========================================================================
00005D26                            
00005D26                            Obj80_Delete:				; XREF: Obj80_ChkType
00005D26 4EF9 0000 0000             		jmp	DeleteObject
00005D2C                            ; ===========================================================================
00005D2C                            
00005D2C                            ; ---------------------------------------------------------------------------
00005D2C                            ; Object 81 - Sonic on the continue screen
00005D2C                            ; ---------------------------------------------------------------------------
00005D2C                            
00005D2C                            Obj81:					; XREF: Obj_Index
00005D2C 7000                       		moveq	#0,d0
00005D2E 1028 0024                  		move.b	$24(a0),d0
00005D32 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005D36 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005D3A 4EF9 0000 0000             		jmp	DisplaySprite
00005D40                            ; ===========================================================================
00005D40 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005D42 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005D44 0000                       		dc.w Obj81_Animate-Obj81_Index
00005D46 0000                       		dc.w Obj81_Run-Obj81_Index
00005D48                            ; ===========================================================================
00005D48                            
00005D48                            Obj81_Main:				; XREF: Obj81_Index
00005D48 5428 0024                  		addq.b	#2,$24(a0)
00005D4C 317C 00A0 0008             		move.w	#$A0,8(a0)
00005D52 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005D58 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005D60 317C 0780 0002             		move.w	#$780,2(a0)
00005D66 117C 0004 0001             		move.b	#4,1(a0)
00005D6C 117C 0002 0018             		move.b	#2,$18(a0)
00005D72 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005D78 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005D7E                            
00005D7E                            Obj81_ChkLand:				; XREF: Obj81_Index
00005D7E 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005D84 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005D86 5428 0024                  		addq.b	#2,$24(a0)
00005D8A 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005D8E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005D96 317C 8500 0002             		move.w	#$8500,2(a0)
00005D9C 117C 0000 001C             		move.b	#0,$1C(a0)
00005DA2 6000                       		bra.s	Obj81_Animate
00005DA4                            ; ===========================================================================
00005DA4                            
00005DA4                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005DA4 4EB9 0000 0000             		jsr	SpeedToPos
00005DAA 4EB9 0000 0000             		jsr	Sonic_Animate
00005DB0 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005DB6                            ; ===========================================================================
00005DB6                            
00005DB6                            Obj81_Animate:				; XREF: Obj81_Index
00005DB6 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005DBA 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005DBC 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005DC2 4EF9 0000 0000             		jmp	AnimateSprite
00005DC8                            ; ===========================================================================
00005DC8                            
00005DC8                            Obj81_GetUp:				; XREF: Obj81_Animate
00005DC8 5428 0024                  		addq.b	#2,$24(a0)
00005DCC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005DD4 317C 0780 0002             		move.w	#$780,2(a0)
00005DDA 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005DE0 4268 0014                  		clr.w	$14(a0)
00005DE4 5168 000C                  		subq.w	#8,$C(a0)
00005DE8 103C 00E0                  		move.b	#$E0,d0
00005DEC 6100 BF28                  		bsr.w	PlaySound_Special ; fade out music
00005DF0                            
00005DF0                            Obj81_Run:				; XREF: Obj81_Index
00005DF0 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005DF6 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005DF8 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005DFE 6000                       		bra.s	Obj81_ShowRun
00005E00                            ; ===========================================================================
00005E00                            
00005E00                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005E00 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005E06                            
00005E06                            Obj81_ShowRun:				; XREF: Obj81_Run
00005E06 4EB9 0000 0000             		jsr	SpeedToPos
00005E0C 4EB9 0000 0000             		jsr	Sonic_Animate
00005E12 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005E18                            ; ===========================================================================
00005E18                            Ani_obj81:
00005E18                            	include "_anim\obj81.asm"
00005E18                            ; ---------------------------------------------------------------------------
00005E18                            ; Animation script - Sonic on the continue screen
00005E18                            ; ---------------------------------------------------------------------------
00005E18 0000                       		dc.w byte_504A-Ani_obj81
00005E1A 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005E26 00                         		even
00005E26 00                         		even
00005E26                            
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            ; Sprite mappings - Continue screen
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            Map_obj80:
00005E26                            	include "_maps\obj80.asm"
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            ; Sprite mappings - Continue screen
00005E26                            ; ---------------------------------------------------------------------------
00005E26 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005E2A 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005E2E 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005E32 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005E36 0B                         byte_5066:	dc.b $B
00005E37 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005E3C F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005E41 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005E46 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005E4B F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005E50 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005E55 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005E5A F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005E5F 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005E64 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005E69 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005E6E 03                         byte_509E:	dc.b 3
00005E6F 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005E74 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E79 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E7E 03                         byte_50AE:	dc.b 3
00005E7F 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005E84 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E89 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E8E 03                         byte_50BE:	dc.b 3
00005E8F 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005E94 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E99 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E9E 02                         byte_50CE:	dc.b 2
00005E9F 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005EA4 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005EA9 01                         byte_50D9:	dc.b 1
00005EAA 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005EAF 01                         byte_50DF:	dc.b 1
00005EB0 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005EB6 00                         		even
00005EB6 00                         		even
00005EB6                            
00005EB6                            ; ===========================================================================
00005EB6                            ; ---------------------------------------------------------------------------
00005EB6                            ; Ending sequence in Green Hill	Zone
00005EB6                            ; ---------------------------------------------------------------------------
00005EB6                            
00005EB6                            EndingSequence:				; XREF: GameModeArray
00005EB6 103C 00E4                  		move.b	#$E4,d0
00005EBA 6100 BE5A                  		bsr.w	PlaySound_Special ; stop music
00005EBE 6100 C8E0                  		bsr.w	Pal_FadeFrom
00005EC2 43F8 D000                  		lea	($FFFFD000).w,a1
00005EC6 7000                       		moveq	#0,d0
00005EC8 323C 07FF                  		move.w	#$7FF,d1
00005ECC                            
00005ECC                            End_ClrObjRam:
00005ECC 22C0                       		move.l	d0,(a1)+
00005ECE 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005ED2                            
00005ED2 43F8 F628                  		lea	($FFFFF628).w,a1
00005ED6 7000                       		moveq	#0,d0
00005ED8 323C 0015                  		move.w	#$15,d1
00005EDC                            
00005EDC                            End_ClrRam:
00005EDC 22C0                       		move.l	d0,(a1)+
00005EDE 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005EE2                            
00005EE2 43F8 F700                  		lea	($FFFFF700).w,a1
00005EE6 7000                       		moveq	#0,d0
00005EE8 323C 003F                  		move.w	#$3F,d1
00005EEC                            
00005EEC                            End_ClrRam2:
00005EEC 22C0                       		move.l	d0,(a1)+
00005EEE 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005EF2                            
00005EF2 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005EF6 7000                       		moveq	#0,d0
00005EF8 323C 0047                  		move.w	#$47,d1
00005EFC                            
00005EFC                            End_ClrRam3:
00005EFC 22C0                       		move.l	d0,(a1)+
00005EFE 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005F02                            
00005F02 46FC 2700                  		move	#$2700,sr
00005F06 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005F0A 0200 00BF                  		andi.b	#$BF,d0
00005F0E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005F14 6100 BD28                  		bsr.w	ClearScreen
00005F18 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F1E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F22 3CBC 8230                  		move.w	#$8230,(a6)
00005F26 3CBC 8407                  		move.w	#$8407,(a6)
00005F2A 3CBC 857C                  		move.w	#$857C,(a6)
00005F2E 3CBC 9001                  		move.w	#$9001,(a6)
00005F32 3CBC 8004                  		move.w	#$8004,(a6)
00005F36 3CBC 8720                  		move.w	#$8720,(a6)
00005F3A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005F40 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005F44 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005F4A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005F50 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F56 6700                       		beq.s	End_LoadData	; if yes, branch
00005F58 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005F5E                            
00005F5E                            End_LoadData:
00005F5E 701C                       		moveq	#$1C,d0
00005F60 6100 C104                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005F64 4EB9 0000 0000             		jsr	Hud_Base
00005F6A 6100 0000                  		bsr.w	LevelSizeLoad
00005F6E 6100 0000                  		bsr.w	DeformBgLayer
00005F72 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005F78 6100 0000                  		bsr.w	MainLoadBlockLoad
00005F7C 6100 0000                  		bsr.w	LoadTilesFromStart
00005F80 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005F88 46FC 2300                  		move	#$2300,sr
00005F8C 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005F92 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005F96 6100 C27E                  		bsr.w	KosDec
00005F9A 7003                       		moveq	#3,d0
00005F9C 6100 CAAC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005FA0 303C 008B                  		move.w	#$8B,d0
00005FA4 6100 BD6A                  		bsr.w	PlaySound	; play ending sequence music
00005FA8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005FAE 6700                       		beq.s	End_LoadSonic	; if not, branch
00005FB0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005FB6                            
00005FB6                            End_LoadSonic:
00005FB6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005FBC 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005FC2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005FC8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005FCE 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005FD4 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005FDA 4EB9 0000 0000             		jsr	ObjPosLoad
00005FE0 4EB9 0000 0000             		jsr	ObjectsLoad
00005FE6 4EB9 0000 0000             		jsr	BuildSprites
00005FEC 7000                       		moveq	#0,d0
00005FEE 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005FF2 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005FF6 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005FFA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005FFE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00006002 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006006 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000600A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000600E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00006012 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00006016 6100 EEE0                  		bsr.w	OscillateNumInit
0000601A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00006020 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00006026 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000602C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006032 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006038 6100 D44C                  		bsr.w	DelayProgram
0000603C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006040 0000 0040                  		ori.b	#$40,d0
00006044 33C0 00C0 0004             		move.w	d0,($C00004).l
0000604A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006050 6100 C6A4                  		bsr.w	Pal_FadeTo
00006054                            
00006054                            ; ---------------------------------------------------------------------------
00006054                            ; Main ending sequence loop
00006054                            ; ---------------------------------------------------------------------------
00006054                            
00006054                            End_MainLoop:
00006054 6100 BCCC                  		bsr.w	PauseGame
00006058 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000605E 6100 D426                  		bsr.w	DelayProgram
00006062 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006066 6100 0000                  		bsr.w	End_MoveSonic
0000606A 4EB9 0000 0000             		jsr	ObjectsLoad
00006070 6100 0000                  		bsr.w	DeformBgLayer
00006074 4EB9 0000 0000             		jsr	BuildSprites
0000607A 4EB9 0000 0000             		jsr	ObjPosLoad
00006080 6100 C234                  		bsr.w	PalCycle_Load
00006084 6100 EEC8                  		bsr.w	OscillateNumDo
00006088 6100 EF54                  		bsr.w	ChangeRingFrame
0000608C 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00006092 6700                       		beq.s	loc_52DA	; if yes, branch
00006094 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000609A 103C 0091                  		move.b	#$91,d0
0000609E 6100 BC76                  		bsr.w	PlaySound_Special ; play credits music
000060A2 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000060A8 4E75                       		rts	
000060AA                            ; ===========================================================================
000060AA                            
000060AA                            loc_52DA:
000060AA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000060AE 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000060B2                            
000060B2 4278 FE02                  		clr.w	($FFFFFE02).w
000060B6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000060BC 4278 F794                  		clr.w	($FFFFF794).w
000060C0                            
000060C0                            End_AllEmlds:				; XREF: loc_5334
000060C0 6100 BC60                  		bsr.w	PauseGame
000060C4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000060CA 6100 D3BA                  		bsr.w	DelayProgram
000060CE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000060D2 6100 0000                  		bsr.w	End_MoveSonic
000060D6 4EB9 0000 0000             		jsr	ObjectsLoad
000060DC 6100 0000                  		bsr.w	DeformBgLayer
000060E0 4EB9 0000 0000             		jsr	BuildSprites
000060E6 4EB9 0000 0000             		jsr	ObjPosLoad
000060EC 6100 EE60                  		bsr.w	OscillateNumDo
000060F0 6100 EEEC                  		bsr.w	ChangeRingFrame
000060F4 5378 F794                  		subq.w	#1,($FFFFF794).w
000060F8 6A00                       		bpl.s	loc_5334
000060FA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006100 6100 C7E8                  		bsr.w	Pal_ToWhite
00006104                            
00006104                            loc_5334:
00006104 4A78 FE02                  		tst.w	($FFFFFE02).w
00006108 6700 FFB6                  		beq.w	End_AllEmlds
0000610C 4278 FE02                  		clr.w	($FFFFFE02).w
00006110 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006116 4BF9 00C0 0004             		lea	($C00004).l,a5
0000611C 4DF9 00C0 0000             		lea	($C00000).l,a6
00006122 47F8 F700                  		lea	($FFFFF700).w,a3
00006126 49F8 A400                  		lea	($FFFFA400).w,a4
0000612A 343C 4000                  		move.w	#$4000,d2
0000612E 6100 0000                  		bsr.w	LoadTilesFromStart2
00006132 7013                       		moveq	#$13,d0
00006134 6100 C914                  		bsr.w	PalLoad1	; load ending pallet
00006138 6100 C6E4                  		bsr.w	Pal_MakeWhite
0000613C 6000 FF16                  		bra.w	End_MainLoop
00006140                            
00006140                            ; ---------------------------------------------------------------------------
00006140                            ; Subroutine controlling Sonic on the ending sequence
00006140                            ; ---------------------------------------------------------------------------
00006140                            
00006140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006140                            
00006140                            
00006140                            End_MoveSonic:				; XREF: End_MainLoop
00006140 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00006144 6600                       		bne.s	End_MoveSonic2
00006146 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000614C 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000614E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006152 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00006158 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000615E 4E75                       		rts	
00006160                            ; ===========================================================================
00006160                            
00006160                            End_MoveSonic2:				; XREF: End_MoveSonic
00006160 5500                       		subq.b	#2,d0
00006162 6600                       		bne.s	End_MoveSonic3
00006164 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000616A 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000616C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00006170 7000                       		moveq	#0,d0
00006172 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006176 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000617A 31C0 D014                  		move.w	d0,($FFFFD014).w
0000617E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006184 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000618A 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00006190 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006196 4E75                       		rts	
00006198                            ; ===========================================================================
00006198                            
00006198                            End_MoveSonic3:				; XREF: End_MoveSonic
00006198 5500                       		subq.b	#2,d0
0000619A 6600                       		bne.s	End_MoveSonExit
0000619C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000061A0 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000061A6 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000061AC 4278 D024                  		clr.w	($FFFFD024).w
000061B0                            
000061B0                            End_MoveSonExit:
000061B0 4E75                       		rts	
000061B2                            ; End of function End_MoveSonic
000061B2                            
000061B2                            ; ===========================================================================
000061B2                            ; ---------------------------------------------------------------------------
000061B2                            ; Object 87 - Sonic on ending sequence
000061B2                            ; ---------------------------------------------------------------------------
000061B2                            
000061B2                            Obj87:					; XREF: Obj_Index
000061B2 7000                       		moveq	#0,d0
000061B4 1028 0025                  		move.b	$25(a0),d0
000061B8 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000061BC 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000061C0 4EF9 0000 0000             		jmp	DisplaySprite
000061C6                            ; ===========================================================================
000061C6 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000061CA 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000061CE 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000061D2 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000061D6 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000061DA                            ; ===========================================================================
000061DA                            
000061DA                            Obj87_Main:				; XREF: Obj87_Index
000061DA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000061E0 6700                       		beq.s	Obj87_Main2	; if yes, branch
000061E2 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000061E8 317C 00D8 0030             		move.w	#$D8,$30(a0)
000061EE 4E75                       		rts	
000061F0                            ; ===========================================================================
000061F0                            
000061F0                            Obj87_Main2:				; XREF: Obj87_Main
000061F0 5428 0025                  		addq.b	#2,$25(a0)
000061F4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000061FC 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006202 117C 0004 0001             		move.b	#4,1(a0)
00006208 4228 0022                  		clr.b	$22(a0)
0000620C 117C 0002 0018             		move.b	#2,$18(a0)
00006212 117C 0000 001A             		move.b	#0,$1A(a0)
00006218 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000621E                            
0000621E                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000621E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006222 6600                       		bne.s	Obj87_Wait
00006224 5428 0025                  		addq.b	#2,$25(a0)
00006228 317C 0001 001C             		move.w	#1,$1C(a0)
0000622E 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006234                            
00006234                            Obj87_Wait:
00006234 4E75                       		rts	
00006236                            ; ===========================================================================
00006236                            
00006236                            Obj87_LookUp:				; XREF: Obj87_Index
00006236 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000623E 6600                       		bne.s	locret_5480
00006240 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00006246 317C 005A 0030             		move.w	#$5A,$30(a0)
0000624C 5428 0025                  		addq.b	#2,$25(a0)
00006250                            
00006250                            locret_5480:
00006250 4E75                       		rts	
00006252                            ; ===========================================================================
00006252                            
00006252                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00006252 5368 0030                  		subq.w	#1,$30(a0)
00006256 6600                       		bne.s	Obj87_Wait2
00006258 43F8 D400                  		lea	($FFFFD400).w,a1
0000625C 323C 00FF                  		move.w	#$FF,d1
00006260                            
00006260                            Obj87_ClrLoop:
00006260 4299                       		clr.l	(a1)+
00006262 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006266 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000626C 5428 0025                  		addq.b	#2,$25(a0)
00006270 117C 0001 001C             		move.b	#1,$1C(a0)
00006276 317C 003C 0030             		move.w	#$3C,$30(a0)
0000627C                            
0000627C                            Obj87_Wait2:
0000627C 4E75                       		rts	
0000627E                            ; ===========================================================================
0000627E                            
0000627E                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000627E 5368 0030                  		subq.w	#1,$30(a0)
00006282 6600                       		bne.s	Obj87_Wait3
00006284 5428 0025                  		addq.b	#2,$25(a0)
00006288 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000628E 117C 0002 001C             		move.b	#2,$1C(a0)
00006294 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000629A                            
0000629A                            Obj87_Wait3:
0000629A 4E75                       		rts	
0000629C                            ; ===========================================================================
0000629C                            
0000629C                            Obj87_Animate:				; XREF: Obj87_Index
0000629C 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000062A2 4EF9 0000 0000             		jmp	AnimateSprite
000062A8                            ; ===========================================================================
000062A8                            
000062A8                            Obj87_Leap:				; XREF: Obj87_Index
000062A8 5368 0030                  		subq.w	#1,$30(a0)
000062AC 6600                       		bne.s	Obj87_Wait4
000062AE 5428 0025                  		addq.b	#2,$25(a0)
000062B2 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000062BA 317C 03E1 0002             		move.w	#$3E1,2(a0)
000062C0 117C 0004 0001             		move.b	#4,1(a0)
000062C6 4228 0022                  		clr.b	$22(a0)
000062CA 117C 0002 0018             		move.b	#2,$18(a0)
000062D0 117C 0005 001A             		move.b	#5,$1A(a0)
000062D6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000062DC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000062E2 60B8                       		bra.s	Obj87_Animate
000062E4                            ; ===========================================================================
000062E4                            
000062E4                            Obj87_Wait4:				; XREF: Obj87_Leap
000062E4 4E75                       		rts	
000062E6                            ; ===========================================================================
000062E6                            Ani_obj87:
000062E6                            	include "_anim\obj87.asm"
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            ; Animation script - Sonic on the ending sequence
000062E6                            ; ---------------------------------------------------------------------------
000062E6 0000                       		dc.w byte_551C-Ani_obj87
000062E8 0000                       		dc.w byte_552A-Ani_obj87
000062EA 0000                       		dc.w byte_5534-Ani_obj87
000062EC 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000062FA 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006304 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000630C                            		even
0000630C                            		even
0000630C                            
0000630C                            ; ===========================================================================
0000630C                            ; ---------------------------------------------------------------------------
0000630C                            ; Object 88 - chaos emeralds on	the ending sequence
0000630C                            ; ---------------------------------------------------------------------------
0000630C                            
0000630C                            Obj88:					; XREF: Obj_Index
0000630C 7000                       		moveq	#0,d0
0000630E 1028 0024                  		move.b	$24(a0),d0
00006312 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006316 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000631A 4EF9 0000 0000             		jmp	DisplaySprite
00006320                            ; ===========================================================================
00006320 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006322 0000                       		dc.w Obj88_Move-Obj88_Index
00006324                            ; ===========================================================================
00006324                            
00006324                            Obj88_Main:				; XREF: Obj88_Index
00006324 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000632A 6700                       		beq.s	Obj88_Main2
0000632C 588F                       		addq.l	#4,sp
0000632E 4E75                       		rts	
00006330                            ; ===========================================================================
00006330                            
00006330                            Obj88_Main2:				; XREF: Obj88_Main
00006330 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006336 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000633C 2248                       		movea.l	a0,a1
0000633E 7600                       		moveq	#0,d3
00006340 7401                       		moveq	#1,d2
00006342 7205                       		moveq	#5,d1
00006344                            
00006344                            Obj88_MainLoop:
00006344 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00006348 5429 0024                  		addq.b	#2,$24(a1)
0000634C 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00006354 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000635A 137C 0004 0001             		move.b	#4,1(a1)
00006360 137C 0001 0018             		move.b	#1,$18(a1)
00006366 3368 0008 0038             		move.w	8(a0),$38(a1)
0000636C 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006372 1342 001C                  		move.b	d2,$1C(a1)
00006376 1342 001A                  		move.b	d2,$1A(a1)
0000637A 5202                       		addq.b	#1,d2
0000637C 1343 0026                  		move.b	d3,$26(a1)
00006380 0603 002A                  		addi.b	#$2A,d3
00006384 43E9 0040                  		lea	$40(a1),a1
00006388 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000638C                            
0000638C                            Obj88_Move:				; XREF: Obj88_Index
0000638C 3028 003E                  		move.w	$3E(a0),d0
00006390 D168 0026                  		add.w	d0,$26(a0)
00006394 1028 0026                  		move.b	$26(a0),d0
00006398 4EB9 0000 34B8             		jsr	(CalcSine).l
0000639E 7800                       		moveq	#0,d4
000063A0 1828 003C                  		move.b	$3C(a0),d4
000063A4 C3C4                       		muls.w	d4,d1
000063A6 E081                       		asr.l	#8,d1
000063A8 C1C4                       		muls.w	d4,d0
000063AA E080                       		asr.l	#8,d0
000063AC D268 0038                  		add.w	$38(a0),d1
000063B0 D068 003A                  		add.w	$3A(a0),d0
000063B4 3141 0008                  		move.w	d1,8(a0)
000063B8 3140 000C                  		move.w	d0,$C(a0)
000063BC 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000063C2 6700                       		beq.s	loc_55FA
000063C4 0668 0020 003C             		addi.w	#$20,$3C(a0)
000063CA                            
000063CA                            loc_55FA:
000063CA 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000063D0 6700                       		beq.s	loc_5608
000063D2 0668 0020 003E             		addi.w	#$20,$3E(a0)
000063D8                            
000063D8                            loc_5608:
000063D8 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000063DE 6700                       		beq.s	locret_5614
000063E0 5368 003A                  		subq.w	#1,$3A(a0)
000063E4                            
000063E4                            locret_5614:
000063E4 4E75                       		rts	
000063E6                            ; ===========================================================================
000063E6                            ; ---------------------------------------------------------------------------
000063E6                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000063E6                            ; ---------------------------------------------------------------------------
000063E6                            
000063E6                            Obj89:					; XREF: Obj_Index
000063E6 7000                       		moveq	#0,d0
000063E8 1028 0024                  		move.b	$24(a0),d0
000063EC 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000063F0 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000063F4                            ; ===========================================================================
000063F4 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000063F6 0000                       		dc.w Obj89_Move-Obj89_Index
000063F8 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000063FA                            ; ===========================================================================
000063FA                            
000063FA                            Obj89_Main:				; XREF: Obj89_Index
000063FA 5428 0024                  		addq.b	#2,$24(a0)
000063FE 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006404 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000640A 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00006412 317C 05C5 0002             		move.w	#$5C5,2(a0)
00006418 117C 0000 0001             		move.b	#0,1(a0)
0000641E 117C 0000 0018             		move.b	#0,$18(a0)
00006424                            
00006424                            Obj89_Move:				; XREF: Obj89_Index
00006424 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000642A 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000642C 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00006432 4EB9 0000 0000             		jsr	DisplaySprite
00006438                            ; ===========================================================================
00006438                            
00006438                            Obj89_Delay:				; XREF: Obj89_Move
00006438 5428 0024                  		addq.b	#2,$24(a0)
0000643C 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00006442                            
00006442                            Obj89_GotoCredits:			; XREF: Obj89_Index
00006442 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006446 6A00                       		bpl.s	Obj89_Display
00006448 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000644E                            
0000644E                            Obj89_Display:
0000644E 4EB9 0000 0000             		jsr	DisplaySprite
00006454                            ; ===========================================================================
00006454                            ; ---------------------------------------------------------------------------
00006454                            ; Sprite mappings - Sonic on the ending	sequence
00006454                            ; ---------------------------------------------------------------------------
00006454                            Map_obj87:
00006454                            	include "_maps\obj87.asm"
00006454                            ; ---------------------------------------------------------------------------
00006454                            ; Sprite mappings - Sonic on the ending	sequence
00006454                            ; ---------------------------------------------------------------------------
00006454 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00006458 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000645C 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00006460 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00006464 02                         byte_5690:	dc.b 2
00006465 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000646A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000646F 03                         byte_569B:	dc.b 3
00006470 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006475 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000647A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000647F 02                         byte_56AB:	dc.b 2
00006480 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006485 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000648A 02                         byte_56B6:	dc.b 2
0000648B EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006490 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006495 02                         byte_56C1:	dc.b 2
00006496 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000649B FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000064A0 03                         byte_56CC:	dc.b 3
000064A1 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000064A6 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000064AB 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000064B0 07                         byte_56DC:	dc.b 7
000064B1 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000064B6 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000064BB BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000064C0 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000064C5 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000064CA E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000064CF EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000064D4 18                         byte_5700:	dc.b $18
000064D5 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000064DA 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000064DF 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000064E4 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000064E9 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000064EE 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000064F3 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000064F8 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000064FD B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006502 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006507 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000650C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006511 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006516 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000651B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006520 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006525 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000652A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000652F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00006534 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006539 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000653E E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006543 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006548 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000654E 00                         		even
0000654E 00                         		even
0000654E                            
0000654E                            ; ---------------------------------------------------------------------------
0000654E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000654E                            ; ---------------------------------------------------------------------------
0000654E                            Map_obj88:
0000654E                            	include "_maps\obj88.asm"
0000654E                            ; ---------------------------------------------------------------------------
0000654E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000654E                            ; ---------------------------------------------------------------------------
0000654E 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00006552 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00006556 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000655A 0000                       		dc.w byte_57AC-Map_obj88
0000655C 01                         byte_5788:	dc.b 1
0000655D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00006562 01                         byte_578E:	dc.b 1
00006563 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00006568 01                         byte_5794:	dc.b 1
00006569 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000656E 01                         byte_579A:	dc.b 1
0000656F F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00006574 01                         byte_57A0:	dc.b 1
00006575 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000657A 01                         byte_57A6:	dc.b 1
0000657B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00006580 01                         byte_57AC:	dc.b 1
00006581 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006586                            		even
00006586                            		even
00006586                            
00006586                            ; ---------------------------------------------------------------------------
00006586                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006586                            ; ---------------------------------------------------------------------------
00006586                            Map_obj89:
00006586                            	include "_maps\obj89.asm"
00006586                            ; ---------------------------------------------------------------------------
00006586                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006586                            ; ---------------------------------------------------------------------------
00006586 0000                       		dc.w byte_57B4-Map_obj89
00006588 03                         byte_57B4:	dc.b 3
00006589 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000658E F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006593 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006598                            		even
00006598                            		even
00006598                            
00006598                            ; ===========================================================================
00006598                            ; ---------------------------------------------------------------------------
00006598                            ; Credits ending sequence
00006598                            ; ---------------------------------------------------------------------------
00006598                            
00006598                            Credits:				; XREF: GameModeArray
00006598 6100 B9BE                  		bsr.w	ClearPLC
0000659C 6100 C202                  		bsr.w	Pal_FadeFrom
000065A0 4DF9 00C0 0004             		lea	($C00004).l,a6
000065A6 3CBC 8004                  		move.w	#$8004,(a6)
000065AA 3CBC 8230                  		move.w	#$8230,(a6)
000065AE 3CBC 8407                  		move.w	#$8407,(a6)
000065B2 3CBC 9001                  		move.w	#$9001,(a6)
000065B6 3CBC 9200                  		move.w	#$9200,(a6)
000065BA 3CBC 8B03                  		move.w	#$8B03,(a6)
000065BE 3CBC 8720                  		move.w	#$8720,(a6)
000065C2 4238 F64E                  		clr.b	($FFFFF64E).w
000065C6 6100 B676                  		bsr.w	ClearScreen
000065CA 43F8 D000                  		lea	($FFFFD000).w,a1
000065CE 7000                       		moveq	#0,d0
000065D0 323C 07FF                  		move.w	#$7FF,d1
000065D4                            
000065D4                            Cred_ClrObjRam:
000065D4 22C0                       		move.l	d0,(a1)+
000065D6 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000065DA                            
000065DA 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000065E4 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
000065EA 6100 B7CE                  		bsr.w	NemDec
000065EE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000065F2 7000                       		moveq	#0,d0
000065F4 323C 001F                  		move.w	#$1F,d1
000065F8                            
000065F8                            Cred_ClrPallet:
000065F8 22C0                       		move.l	d0,(a1)+
000065FA 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
000065FE                            
000065FE 7003                       		moveq	#3,d0
00006600 6100 C448                  		bsr.w	PalLoad1	; load Sonic's pallet
00006604 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000660A 4EB9 0000 0000             		jsr	ObjectsLoad
00006610 4EB9 0000 0000             		jsr	BuildSprites
00006616 6100 0000                  		bsr.w	EndingDemoLoad
0000661A 7000                       		moveq	#0,d0
0000661C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006620 E948                       		lsl.w	#4,d0
00006622 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00006628 45F2 0000                  		lea	(a2,d0.w),a2
0000662C 7000                       		moveq	#0,d0
0000662E 1012                       		move.b	(a2),d0
00006630 6700                       		beq.s	loc_5862
00006632 6100 B8C6                  		bsr.w	LoadPLC		; load level patterns
00006636                            
00006636                            loc_5862:
00006636 7001                       		moveq	#1,d0
00006638 6100 B8C0                  		bsr.w	LoadPLC		; load standard	level patterns
0000663C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00006642 6100 C0B2                  		bsr.w	Pal_FadeTo
00006646                            
00006646                            Cred_WaitLoop:
00006646 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000664C 6100 CE38                  		bsr.w	DelayProgram
00006650 6100 B914                  		bsr.w	RunPLC_RAM
00006654 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00006658 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000665A 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000665E 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00006660 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00006666 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000666A 4E75                       		rts	
0000666C                            
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; Ending sequence demo loading subroutine
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            
0000666C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000666C                            
0000666C                            
0000666C                            EndingDemoLoad:				; XREF: Credits
0000666C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006670 0240 000F                  		andi.w	#$F,d0
00006674 D040                       		add.w	d0,d0
00006676 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000667A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000667E 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00006682 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006688 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
0000668A 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00006690 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006696 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000669C 7000                       		moveq	#0,d0
0000669E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000066A2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000066A6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000066AA 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000066AE 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000066B4 6600                       		bne.s	EndDemo_Exit	; if not, branch
000066B6 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000066BC 45F8 FE30                  		lea	($FFFFFE30).w,a2
000066C0 303C 0008                  		move.w	#8,d0
000066C4                            
000066C4                            EndDemo_LampLoad:
000066C4 24D9                       		move.l	(a1)+,(a2)+
000066C6 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000066CA                            
000066CA                            EndDemo_Exit:
000066CA 4E75                       		rts	
000066CC                            ; End of function EndingDemoLoad
000066CC                            
000066CC                            ; ===========================================================================
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            ; Levels used in the end sequence demos
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Lamppost variables in the end sequence demo (Star Light Zone)
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            EndDemo_LampVar:
000066DC 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
000066DE 0A00 062C 000D             		dc.w $A00, $62C, $D
000066E4 0000 0000                  		dc.l 0
000066E8 0000                       		dc.b 0,	0
000066EA 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
000066FE 0101                       		dc.b 1,	1
00006700                            ; ===========================================================================
00006700                            ; ---------------------------------------------------------------------------
00006700                            ; "TRY AGAIN" and "END"	screens
00006700                            ; ---------------------------------------------------------------------------
00006700                            
00006700                            TryAgainEnd:				; XREF: Credits
00006700 6100 B856                  		bsr.w	ClearPLC
00006704 6100 C09A                  		bsr.w	Pal_FadeFrom
00006708 4DF9 00C0 0004             		lea	($C00004).l,a6
0000670E 3CBC 8004                  		move.w	#$8004,(a6)
00006712 3CBC 8230                  		move.w	#$8230,(a6)
00006716 3CBC 8407                  		move.w	#$8407,(a6)
0000671A 3CBC 9001                  		move.w	#$9001,(a6)
0000671E 3CBC 9200                  		move.w	#$9200,(a6)
00006722 3CBC 8B03                  		move.w	#$8B03,(a6)
00006726 3CBC 8720                  		move.w	#$8720,(a6)
0000672A 4238 F64E                  		clr.b	($FFFFF64E).w
0000672E 6100 B50E                  		bsr.w	ClearScreen
00006732 43F8 D000                  		lea	($FFFFD000).w,a1
00006736 7000                       		moveq	#0,d0
00006738 323C 07FF                  		move.w	#$7FF,d1
0000673C                            
0000673C                            TryAg_ClrObjRam:
0000673C 22C0                       		move.l	d0,(a1)+
0000673E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006742                            
00006742 701D                       		moveq	#$1D,d0
00006744 6100 B920                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00006748 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000674C 7000                       		moveq	#0,d0
0000674E 323C 001F                  		move.w	#$1F,d1
00006752                            
00006752                            TryAg_ClrPallet:
00006752 22C0                       		move.l	d0,(a1)+
00006754 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00006758                            
00006758 7013                       		moveq	#$13,d0
0000675A 6100 C2EE                  		bsr.w	PalLoad1	; load ending pallet
0000675E 4278 FBC0                  		clr.w	($FFFFFBC0).w
00006762 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006768 4EB9 0000 0000             		jsr	ObjectsLoad
0000676E 4EB9 0000 0000             		jsr	BuildSprites
00006774 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
0000677A 6100 BF7A                  		bsr.w	Pal_FadeTo
0000677E                            
0000677E                            ; ---------------------------------------------------------------------------
0000677E                            ; "TRY AGAIN" and "END"	screen main loop
0000677E                            ; ---------------------------------------------------------------------------
0000677E                            TryAg_MainLoop:
0000677E 6100 B5A2                  		bsr.w	PauseGame
00006782 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006788 6100 CCFC                  		bsr.w	DelayProgram
0000678C 4EB9 0000 0000             		jsr	ObjectsLoad
00006792 4EB9 0000 0000             		jsr	BuildSprites
00006798 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000679E 6600                       		bne.s	TryAg_Exit	; if yes, branch
000067A0 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000067A4 6700                       		beq.s	TryAg_Exit	; if yes, branch
000067A6 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000067AC 67D0                       		beq.s	TryAg_MainLoop
000067AE                            
000067AE                            TryAg_Exit:
000067AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000067B4 4E75                       		rts	
000067B6                            
000067B6                            ; ===========================================================================
000067B6                            ; ---------------------------------------------------------------------------
000067B6                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000067B6                            ; ---------------------------------------------------------------------------
000067B6                            
000067B6                            Obj8B:					; XREF: Obj_Index
000067B6 7000                       		moveq	#0,d0
000067B8 1028 0024                  		move.b	$24(a0),d0
000067BC 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000067C0 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000067C4 4EF9 0000 0000             		jmp	DisplaySprite
000067CA                            ; ===========================================================================
000067CA 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000067CC 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000067CE 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000067D0 0000                       		dc.w loc_5A8E-Obj8B_Index
000067D2                            ; ===========================================================================
000067D2                            
000067D2                            Obj8B_Main:				; XREF: Obj8B_Index
000067D2 5428 0024                  		addq.b	#2,$24(a0)
000067D6 317C 0120 0008             		move.w	#$120,8(a0)
000067DC 317C 00F4 000A             		move.w	#$F4,$A(a0)
000067E2 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
000067EA 317C 03E1 0002             		move.w	#$3E1,2(a0)
000067F0 117C 0000 0001             		move.b	#0,1(a0)
000067F6 117C 0002 0018             		move.b	#2,$18(a0)
000067FC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006802 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006808 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000680A 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006810 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006816 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000681C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006822                            
00006822                            Obj8B_Animate:				; XREF: Obj8B_Index
00006822 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006828 4EF9 0000 0000             		jmp	AnimateSprite
0000682E                            ; ===========================================================================
0000682E                            
0000682E                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000682E 5428 0024                  		addq.b	#2,$24(a0)
00006832 7002                       		moveq	#2,d0
00006834 0828 0000 001C             		btst	#0,$1C(a0)
0000683A 6700                       		beq.s	loc_5A6A
0000683C 4440                       		neg.w	d0
0000683E                            
0000683E                            loc_5A6A:
0000683E 43F8 D800                  		lea	($FFFFD800).w,a1
00006842 7205                       		moveq	#5,d1
00006844                            
00006844                            loc_5A70:
00006844 1340 003E                  		move.b	d0,$3E(a1)
00006848 3400                       		move.w	d0,d2
0000684A E742                       		asl.w	#3,d2
0000684C D529 0026                  		add.b	d2,$26(a1)
00006850 43E9 0040                  		lea	$40(a1),a1
00006854 51C9 FFEE                  		dbf	d1,loc_5A70
00006858 5228 001A                  		addq.b	#1,$1A(a0)
0000685C 317C 0070 0030             		move.w	#112,$30(a0)
00006862                            
00006862                            loc_5A8E:				; XREF: Obj8B_Index
00006862 5368 0030                  		subq.w	#1,$30(a0)
00006866 6A00                       		bpl.s	locret_5AA0
00006868 0868 0000 001C             		bchg	#0,$1C(a0)
0000686E 117C 0002 0024             		move.b	#2,$24(a0)
00006874                            
00006874                            locret_5AA0:
00006874 4E75                       		rts	
00006876                            ; ===========================================================================
00006876                            Ani_obj8B:
00006876                            	include "_anim\obj8B.asm"
00006876                            ; ---------------------------------------------------------------------------
00006876                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006876                            ; ---------------------------------------------------------------------------
00006876 0000                       		dc.w byte_5AA8-Ani_obj8B
00006878 0000                       		dc.w byte_5AAC-Ani_obj8B
0000687A 0000                       		dc.w byte_5AB0-Ani_obj8B
0000687C 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006880 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006884 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006896                            		even
00006896                            		even
00006896                            
00006896                            ; ===========================================================================
00006896                            ; ---------------------------------------------------------------------------
00006896                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006896                            ; ---------------------------------------------------------------------------
00006896                            
00006896                            Obj8C:					; XREF: Obj_Index
00006896 7000                       		moveq	#0,d0
00006898 1028 0024                  		move.b	$24(a0),d0
0000689C 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000068A0 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000068A4 4EF9 0000 0000             		jmp	DisplaySprite
000068AA                            ; ===========================================================================
000068AA 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000068AC 0000                       		dc.w Obj8C_Move-Obj8C_Index
000068AE                            ; ===========================================================================
000068AE                            
000068AE                            Obj8C_Main:				; XREF: Obj8C_Index
000068AE 2248                       		movea.l	a0,a1
000068B0 7400                       		moveq	#0,d2
000068B2 7600                       		moveq	#0,d3
000068B4 7205                       		moveq	#5,d1
000068B6 9238 FE57                  		sub.b	($FFFFFE57).w,d1
000068BA                            
000068BA                            Obj8C_MakeEms:				; XREF: loc_5B42
000068BA 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
000068BE 5429 0024                  		addq.b	#2,$24(a1)
000068C2 237C 0000 654E 0004        		move.l	#Map_obj88,4(a1)
000068CA 337C 03C5 0002             		move.w	#$3C5,2(a1)
000068D0 137C 0000 0001             		move.b	#0,1(a1)
000068D6 137C 0001 0018             		move.b	#1,$18(a1)
000068DC 337C 0104 0008             		move.w	#$104,8(a1)
000068E2 337C 0120 0038             		move.w	#$120,$38(a1)
000068E8 337C 00EC 000A             		move.w	#$EC,$A(a1)
000068EE 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000068F4 137C 001C 003C             		move.b	#$1C,$3C(a1)
000068FA 47F8 FE58                  		lea	($FFFFFE58).w,a3
000068FE                            
000068FE                            Obj8C_ChkEms:
000068FE 7000                       		moveq	#0,d0
00006900 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006904 5340                       		subq.w	#1,d0
00006906 6500                       		bcs.s	loc_5B42
00006908                            
00006908                            Obj8C_ChkEmLoop:
00006908 B433 0000                  		cmp.b	(a3,d0.w),d2
0000690C 6600                       		bne.s	loc_5B3E
0000690E 5202                       		addq.b	#1,d2
00006910 60EC                       		bra.s	Obj8C_ChkEms
00006912                            ; ===========================================================================
00006912                            
00006912                            loc_5B3E:
00006912 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006916                            
00006916                            loc_5B42:
00006916 1342 001A                  		move.b	d2,$1A(a1)
0000691A 5229 001A                  		addq.b	#1,$1A(a1)
0000691E 5202                       		addq.b	#1,d2
00006920 137C 0080 0026             		move.b	#$80,$26(a1)
00006926 1343 001E                  		move.b	d3,$1E(a1)
0000692A 1343 001F                  		move.b	d3,$1F(a1)
0000692E 0643 000A                  		addi.w	#$A,d3
00006932 43E9 0040                  		lea	$40(a1),a1
00006936 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000693A                            
0000693A                            Obj8C_Move:				; XREF: Obj8C_Index
0000693A 4A68 003E                  		tst.w	$3E(a0)
0000693E 6700                       		beq.s	locret_5BBA
00006940 4A28 001E                  		tst.b	$1E(a0)
00006944 6700                       		beq.s	loc_5B78
00006946 5328 001E                  		subq.b	#1,$1E(a0)
0000694A 6600                       		bne.s	loc_5B80
0000694C                            
0000694C                            loc_5B78:
0000694C 3028 003E                  		move.w	$3E(a0),d0
00006950 D168 0026                  		add.w	d0,$26(a0)
00006954                            
00006954                            loc_5B80:
00006954 1028 0026                  		move.b	$26(a0),d0
00006958 6700                       		beq.s	loc_5B8C
0000695A 0C00 0080                  		cmpi.b	#$80,d0
0000695E 6600                       		bne.s	loc_5B96
00006960                            
00006960                            loc_5B8C:
00006960 4268 003E                  		clr.w	$3E(a0)
00006964 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000696A                            
0000696A                            loc_5B96:
0000696A 4EB9 0000 34B8             		jsr	(CalcSine).l
00006970 7800                       		moveq	#0,d4
00006972 1828 003C                  		move.b	$3C(a0),d4
00006976 C3C4                       		muls.w	d4,d1
00006978 E081                       		asr.l	#8,d1
0000697A C1C4                       		muls.w	d4,d0
0000697C E080                       		asr.l	#8,d0
0000697E D268 0038                  		add.w	$38(a0),d1
00006982 D068 003A                  		add.w	$3A(a0),d0
00006986 3141 0008                  		move.w	d1,8(a0)
0000698A 3140 000A                  		move.w	d0,$A(a0)
0000698E                            
0000698E                            locret_5BBA:
0000698E 4E75                       		rts	
00006990                            ; ===========================================================================
00006990                            ; ---------------------------------------------------------------------------
00006990                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006990                            ; ---------------------------------------------------------------------------
00006990                            Map_obj8B:
00006990                            	include "_maps\obj8B.asm"
00006990                            ; ---------------------------------------------------------------------------
00006990                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006990                            ; ---------------------------------------------------------------------------
00006990 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006994 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006998 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000699C 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000069A0 08                         byte_5BCC:	dc.b 8
000069A1 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000069A6 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000069AB E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000069B0 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000069B5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000069BA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000069BF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000069C4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000069C9 08                         byte_5BF5:	dc.b 8
000069CA E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000069CF F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000069D4 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000069D9 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000069DE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000069E3 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000069E8 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000069ED 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000069F2 08                         byte_5C1E:	dc.b 8
000069F3 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000069F8 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000069FD E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006A02 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006A07 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A0C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A11 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A16 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A1B 08                         byte_5C47:	dc.b 8
00006A1C E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006A21 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006A26 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006A2B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006A30 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006A35 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006A3A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A3F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A44 0C                         byte_5C70:	dc.b $C
00006A45 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006A4A F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006A4F 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006A54 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006A59 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006A5E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006A63 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006A68 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006A6D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006A72 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006A77 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006A7C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006A81 0A                         byte_5CAD:	dc.b $A
00006A82 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006A87 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006A8C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006A91 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006A96 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006A9B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006AA0 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006AA5 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006AAA 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006AAF 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006AB4 0A                         byte_5CE0:	dc.b $A
00006AB5 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006ABA E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006ABF EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006AC4 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006AC9 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006ACE EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006AD3 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006AD8 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006ADD 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006AE2 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006AE7 0C                         byte_5D13:	dc.b $C
00006AE8 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006AED FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006AF2 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006AF7 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006AFC F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006B01 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006B06 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006B0B 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006B10 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006B15 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006B1A 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B1F 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B24                            		even
00006B24                            		even
00006B24                            
00006B24                            ; ---------------------------------------------------------------------------
00006B24                            ; Ending sequence demos
00006B24                            ; ---------------------------------------------------------------------------
00006B24                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006B52                            		even
00006B52                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006B92                            		even
00006B92                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006BC2                            		even
00006BC2                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006BF2                            		even
00006BF2                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006C12                            		even
00006C12                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006C32                            		even
00006C32                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006C62                            		even
00006C62                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006C92                            		even
00006C92                            
00006C92                            ; ---------------------------------------------------------------------------
00006C92                            ; Subroutine to	load level boundaries and start	locations
00006C92                            ; ---------------------------------------------------------------------------
00006C92                            
00006C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C92                            
00006C92                            
00006C92                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006C92 7000                       		moveq	#0,d0
00006C94 11C0 F740                  		move.b	d0,($FFFFF740).w
00006C98 11C0 F741                  		move.b	d0,($FFFFF741).w
00006C9C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006CA0 11C0 F748                  		move.b	d0,($FFFFF748).w
00006CA4 11C0 F742                  		move.b	d0,($FFFFF742).w
00006CA8 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006CAC ED08                       		lsl.b	#6,d0
00006CAE E848                       		lsr.w	#4,d0
00006CB0 3200                       		move.w	d0,d1
00006CB2 D040                       		add.w	d0,d0
00006CB4 D041                       		add.w	d1,d0
00006CB6 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006CBA 3018                       		move.w	(a0)+,d0
00006CBC 31C0 F730                  		move.w	d0,($FFFFF730).w
00006CC0 2018                       		move.l	(a0)+,d0
00006CC2 21C0 F728                  		move.l	d0,($FFFFF728).w
00006CC6 21C0 F720                  		move.l	d0,($FFFFF720).w
00006CCA 2018                       		move.l	(a0)+,d0
00006CCC 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006CD0 21C0 F724                  		move.l	d0,($FFFFF724).w
00006CD4 3038 F728                  		move.w	($FFFFF728).w,d0
00006CD8 0640 0240                  		addi.w	#$240,d0
00006CDC 31C0 F732                  		move.w	d0,($FFFFF732).w
00006CE0 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006CE6 3018                       		move.w	(a0)+,d0
00006CE8 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006CEC 6000 0000                  		bra.w	LevSz_ChkLamp
00006CF0                            ; ===========================================================================
00006CF0                            ; ---------------------------------------------------------------------------
00006CF0                            ; Level size array and ending start location array
00006CF0                            ; ---------------------------------------------------------------------------
00006CF0                            LevelSizeArray:        ; GHZ
00006CF0 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006CFC 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006D08 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006D14 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006D20                                    ; LZ
00006D20 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006D2C 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006D38 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006D44 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006D50                                    ; MZ
00006D50 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006D5C 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006D68 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006D74 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006D80                                    ; SLZ
00006D80 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006D8C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006D98 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006DA4 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006DB0                                    ; SYZ
00006DB0 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006DBC 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006DC8 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006DD4 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006DE0                                    ; SBZ
00006DE0 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006DEC 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006DF8 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006E04 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006E10                                    ; Ending
00006E10 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006E1C 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006E28 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006E34 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006E40                                    ; BHZ
00006E40 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006E4C 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006E58 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006E64 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006E70                                    even
00006E70                            
00006E70                            ; ===========================================================================
00006E70                            
00006E70                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006E70 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006E74 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006E76 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006E7C 3238 D008                  		move.w	($FFFFD008).w,d1
00006E80 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006E84 6000 0000                  		bra.w	loc_60D0
00006E88                            ; ===========================================================================
00006E88                            
00006E88                            
00006E88                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006E88 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E8C ED08                       		lsl.b	#6,d0
00006E8E E848                       		lsr.w	#4,d0
00006E90 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006E94 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006E98 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006E9C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006EA0 5340                       		subq.w	#1,d0
00006EA2 E548                       		lsl.w	#2,d0
00006EA4 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006EA8 6000 0000                  		bra.w	LevSz_SonicPos
00006EAC                            
00006EAC                            EndingStLocArray:
00006EAC                            		incbin	misc\sloc_end.bin
00006ECC                            		even
00006ECC                            		
00006ECC                            ; ===========================================================================
00006ECC                            ; ---------------------------------------------------------------------------
00006ECC                            ; Sonic	start location array
00006ECC                            ; ---------------------------------------------------------------------------
00006ECC                            StartLocArray:	incbin	misc\sloc_lev.bin
00006F4C                            		even
00006F4C                            
00006F4C                            LevSz_SonicPos:
00006F4C 7200                       		moveq	#0,d1
00006F4E 3219                       		move.w	(a1)+,d1
00006F50 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006F54 7000                       		moveq	#0,d0
00006F56 3011                       		move.w	(a1),d0
00006F58 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006F5C                            
00006F5C                            loc_60D0:				; XREF: LevSz_ChkLamp
00006F5C 0441 00A0                  		subi.w	#$A0,d1
00006F60 6400                       		bcc.s	loc_60D8
00006F62 7200                       		moveq	#0,d1
00006F64                            
00006F64                            loc_60D8:
00006F64 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006F68 B242                       		cmp.w	d2,d1
00006F6A 6500                       		bcs.s	loc_60E2
00006F6C 3202                       		move.w	d2,d1
00006F6E                            
00006F6E                            loc_60E2:
00006F6E 31C1 F700                  		move.w	d1,($FFFFF700).w
00006F72 0440 0060                  		subi.w	#$60,d0
00006F76 6400                       		bcc.s	loc_60EE
00006F78 7000                       		moveq	#0,d0
00006F7A                            
00006F7A                            loc_60EE:
00006F7A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006F7E 6D00                       		blt.s	loc_60F8
00006F80 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006F84                            
00006F84                            loc_60F8:
00006F84 31C0 F704                  		move.w	d0,($FFFFF704).w
00006F88 6100 0000                  		bsr.w	BgScrollSpeed
00006F8C 7000                       		moveq	#0,d0
00006F8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006F92 E508                       		lsl.b	#2,d0
00006F94 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006F9A 6000 0000                  		bra.w	LevSz_Unk
00006F9E                            
00006F9E                            ; ---------------------------------------------------------------------------
00006F9E                            ; Which	256x256	tiles contain loops or roll-tunnels
00006F9E                            ; ---------------------------------------------------------------------------
00006F9E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006F9E                            ; loop,	loop, tunnel, tunnel
00006F9E                            ; ---------------------------------------------------------------------------
00006F9E                            LoopTileNums:	incbin	misc\loopnums.bin
00006FBE                            		even
00006FBE                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006FBE                            ; ITS GONJE HELP
00006FBE                            ; ===========================================================================
00006FBE                            
00006FBE                            LevSz_Unk:				; XREF: LevelSizeLoad
00006FBE 7000                       		moveq	#0,d0
00006FC0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006FC4 E748                       		lsl.w	#3,d0
00006FC6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006FCA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006FCE 24D9                       		move.l	(a1)+,(a2)+
00006FD0 24D9                       		move.l	(a1)+,(a2)+
00006FD2 4E75                       		rts	
00006FD4                            ; End of function LevelSizeLoad
00006FD4                            
00006FD4                            ; ===========================================================================
00006FD4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006FDC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006FE4 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006FEC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006FF4 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006FFC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007004 0070 0100 0100 0100        		dc.l $700100, $1000100
0000700C                            
0000700C                            ; ---------------------------------------------------------------------------
0000700C                            ; Subroutine to	set scroll speed of some backgrounds
0000700C                            ; ---------------------------------------------------------------------------
0000700C                            
0000700C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000700C                            
0000700C                            
0000700C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000700C 4A38 FE30                  		tst.b	($FFFFFE30).w
00007010 6600                       		bne.s	loc_6206
00007012 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007016 31C0 F714                  		move.w	d0,($FFFFF714).w
0000701A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000701E 31C1 F710                  		move.w	d1,($FFFFF710).w
00007022 31C1 F718                  		move.w	d1,($FFFFF718).w
00007026                            
00007026                            loc_6206:
00007026 7400                       		moveq	#0,d2
00007028 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000702C D442                       		add.w	d2,d2
0000702E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007032 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007036                            ; End of function BgScrollSpeed
00007036                            
00007036                            ; ===========================================================================
00007036 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000703A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000703E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007042 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
00007046                            ; ===========================================================================
00007046                            
00007046                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007046 6000 0000                  		bra.w	Deform_GHZ
0000704A                            ; ===========================================================================
0000704A                            
0000704A                            BgScroll_LZ:				; XREF: BgScroll_Index
0000704A E280                       		asr.l	#1,d0
0000704C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007050 4E75                       		rts	
00007052                            ; ===========================================================================
00007052                            
00007052                            BgScroll_MZ:				; XREF: BgScroll_Index
00007052 4E75                       		rts	
00007054                            ; ===========================================================================
00007054                            
00007054                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007054 E280                       		asr.l	#1,d0
00007056 0640 00C0                  		addi.w	#$C0,d0
0000705A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000705E 4E75                       		rts	
00007060                            ; ===========================================================================
00007060                            
00007060                            BgScroll_SYZ:				; XREF: BgScroll_Index
00007060 E980                       		asl.l	#4,d0
00007062 2400                       		move.l	d0,d2
00007064 E380                       		asl.l	#1,d0
00007066 D082                       		add.l	d2,d0
00007068 E080                       		asr.l	#8,d0
0000706A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000706E 31C0 F714                  		move.w	d0,($FFFFF714).w
00007072 4E75                       		rts	
00007074                            ; ===========================================================================
00007074                            
00007074                            BgScroll_SBZ:				; XREF: BgScroll_Index
00007074 E980                       		asl.l	#4,d0
00007076 E380                       		asl.l	#1,d0
00007078 E080                       		asr.l	#8,d0
0000707A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000707E 4E75                       		rts	
00007080                            ; ===========================================================================
00007080                            
00007080                            BgScroll_End:				; XREF: BgScroll_Index
00007080 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007086 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000708C 4E75                       		rts	
0000708E                            ; ===========================================================================
0000708E 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007094 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000709A 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000070A0 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000070A6 4E75                       		rts
000070A8                            
000070A8                            ; ---------------------------------------------------------------------------
000070A8                            ; Background layer deformation subroutines
000070A8                            ; ---------------------------------------------------------------------------
000070A8                            
000070A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A8                            
000070A8                            
000070A8                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000070A8 4A38 F744                  		tst.b	($FFFFF744).w
000070AC 6700                       		beq.s	loc_628E
000070AE 4E75                       		rts	
000070B0                            ; ===========================================================================
000070B0                            
000070B0                            loc_628E:
000070B0 4278 F754                  		clr.w	($FFFFF754).w
000070B4 4278 F756                  		clr.w	($FFFFF756).w
000070B8 4278 F758                  		clr.w	($FFFFF758).w
000070BC 4278 F75A                  		clr.w	($FFFFF75A).w
000070C0 6100 0000                  		bsr.w	ScrollHoriz
000070C4 6100 0000                  		bsr.w	ScrollVertical
000070C8 6100 0000                  		bsr.w	DynScrResizeLoad
000070CC 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000070D2 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000070D8 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000070DE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070E4 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000070EA 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000070F0 7000                       		moveq	#0,d0
000070F2 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ
000070F6 6700                       		beq.s	GetDeformRoutine	; GMZ
000070F8 4EF9 0000 0000             		jmp	Deform_LZ	; GMZ
000070FE                            
000070FE                            GetDeformRoutine:	; GMZ
000070FE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007102 D040                       		add.w	d0,d0
00007104 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007108 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000710C                            ; End of function DeformBgLayer
0000710C                            
0000710C                            ; ===========================================================================
0000710C                            ; ---------------------------------------------------------------------------
0000710C                            ; Offset index for background layer deformation	code
0000710C                            ; ---------------------------------------------------------------------------
0000710C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007110 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007114 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007118 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
0000711C                            ; ---------------------------------------------------------------------------
0000711C                            ; Green	Hill Zone background layer deformation code
0000711C                            ; ---------------------------------------------------------------------------
0000711C                            
0000711C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000711C                            
0000711C                            
0000711C                            Deform_GHZ:				; XREF: Deform_Index
0000711C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007120 48C4                       		ext.l	d4
00007122 EB84                       		asl.l	#5,d4
00007124 2204                       		move.l	d4,d1
00007126 E384                       		asl.l	#1,d4
00007128 D881                       		add.l	d1,d4
0000712A 7A00                       		moveq	#0,d5
0000712C 6100 0000                  		bsr.w	ScrollBlock1
00007130 6100 0000                  		bsr.w	ScrollBlock4
00007134 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007138 3038 F704                  		move.w	($FFFFF704).w,d0
0000713C 0240 07FF                  		andi.w	#$7FF,d0
00007140 EA48                       		lsr.w	#5,d0
00007142 4440                       		neg.w	d0
00007144 0640 0026                  		addi.w	#$26,d0
00007148 31C0 F714                  		move.w	d0,($FFFFF714).w
0000714C 3800                       		move.w	d0,d4
0000714E 6100 0000                  		bsr.w	ScrollBlock3
00007152 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007158 323C 006F                  		move.w	#$6F,d1
0000715C 9244                       		sub.w	d4,d1
0000715E 3038 F700                  		move.w	($FFFFF700).w,d0
00007162 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00007168 6600                       		bne.s	loc_633C
0000716A 7000                       		moveq	#0,d0
0000716C                            
0000716C                            loc_633C:
0000716C 4440                       		neg.w	d0
0000716E 4840                       		swap	d0
00007170 3038 F708                  		move.w	($FFFFF708).w,d0
00007174 4440                       		neg.w	d0
00007176                            
00007176                            loc_6346:
00007176 22C0                       		move.l	d0,(a1)+
00007178 51C9 FFFC                  		dbf	d1,loc_6346
0000717C 323C 0027                  		move.w	#$27,d1
00007180 3038 F710                  		move.w	($FFFFF710).w,d0
00007184 4440                       		neg.w	d0
00007186                            
00007186                            loc_6356:
00007186 22C0                       		move.l	d0,(a1)+
00007188 51C9 FFFC                  		dbf	d1,loc_6356
0000718C 3038 F710                  		move.w	($FFFFF710).w,d0
00007190 0640 0000                  		addi.w	#0,d0
00007194 3438 F700                  		move.w	($FFFFF700).w,d2
00007198 0642 FE00                  		addi.w	#-$200,d2
0000719C 9440                       		sub.w	d0,d2
0000719E 48C2                       		ext.l	d2
000071A0 E182                       		asl.l	#8,d2
000071A2 85FC 0068                  		divs.w	#$68,d2
000071A6 48C2                       		ext.l	d2
000071A8 E182                       		asl.l	#8,d2
000071AA 7600                       		moveq	#0,d3
000071AC 3600                       		move.w	d0,d3
000071AE 323C 0047                  		move.w	#$47,d1
000071B2 D244                       		add.w	d4,d1
000071B4                            
000071B4                            loc_6384:
000071B4 3003                       		move.w	d3,d0
000071B6 4440                       		neg.w	d0
000071B8 22C0                       		move.l	d0,(a1)+
000071BA 4843                       		swap	d3
000071BC D682                       		add.l	d2,d3
000071BE 4843                       		swap	d3
000071C0 51C9 FFF2                  		dbf	d1,loc_6384
000071C4 4E75                       		rts	
000071C6                            ; End of function Deform_GHZ
000071C6                            
000071C6                            ; ---------------------------------------------------------------------------
000071C6                            ; Labyrinth Zone background layer deformation code
000071C6                            ; ---------------------------------------------------------------------------
000071C6                            
000071C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C6                            
000071C6                            
000071C6                            Deform_LZ:				; XREF: Deform_Index
000071C6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071CA 48C4                       		ext.l	d4
000071CC EF84                       		asl.l	#7,d4
000071CE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000071D2 48C5                       		ext.l	d5
000071D4 EF85                       		asl.l	#7,d5
000071D6 6100 0000                  		bsr.w	ScrollBlock1
000071DA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000071E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071E4 323C 00DF                  		move.w	#$DF,d1
000071E8 3038 F700                  		move.w	($FFFFF700).w,d0
000071EC 4440                       		neg.w	d0
000071EE 4840                       		swap	d0
000071F0 3038 F708                  		move.w	($FFFFF708).w,d0
000071F4 4440                       		neg.w	d0
000071F6                            
000071F6                            loc_63C6:
000071F6 22C0                       		move.l	d0,(a1)+
000071F8 51C9 FFFC                  		dbf	d1,loc_63C6
000071FC 3038 F646                  		move.w	($FFFFF646).w,d0
00007200 9078 F704                  		sub.w	($FFFFF704).w,d0
00007204 4E75                       		rts	
00007206                            ; End of function Deform_LZ
00007206                            
00007206                            ; ---------------------------------------------------------------------------
00007206                            ; Marble Zone background layer deformation code
00007206                            ; ---------------------------------------------------------------------------
00007206                            
00007206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007206                            
00007206                            
00007206                            Deform_MZ:				; XREF: Deform_Index
00007206 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000720A 48C4                       		ext.l	d4
0000720C ED84                       		asl.l	#6,d4
0000720E 2204                       		move.l	d4,d1
00007210 E384                       		asl.l	#1,d4
00007212 D881                       		add.l	d1,d4
00007214 7A00                       		moveq	#0,d5
00007216 6100 0000                  		bsr.w	ScrollBlock1
0000721A 303C 0200                  		move.w	#$200,d0
0000721E 3238 F704                  		move.w	($FFFFF704).w,d1
00007222 0441 01C8                  		subi.w	#$1C8,d1
00007226 6500                       		bcs.s	loc_6402
00007228 3401                       		move.w	d1,d2
0000722A D241                       		add.w	d1,d1
0000722C D242                       		add.w	d2,d1
0000722E E441                       		asr.w	#2,d1
00007230 D041                       		add.w	d1,d0
00007232                            
00007232                            loc_6402:
00007232 31C0 F714                  		move.w	d0,($FFFFF714).w
00007236 6100 0000                  		bsr.w	ScrollBlock3
0000723A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007240 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007244 323C 00DF                  		move.w	#$DF,d1
00007248 3038 F700                  		move.w	($FFFFF700).w,d0
0000724C 4440                       		neg.w	d0
0000724E 4840                       		swap	d0
00007250 3038 F708                  		move.w	($FFFFF708).w,d0
00007254 4440                       		neg.w	d0
00007256                            
00007256                            loc_6426:
00007256 22C0                       		move.l	d0,(a1)+
00007258 51C9 FFFC                  		dbf	d1,loc_6426
0000725C 4E75                       		rts	
0000725E                            ; End of function Deform_MZ
0000725E                            
0000725E                            ; ---------------------------------------------------------------------------
0000725E                            ; Star Light Zone background layer deformation code
0000725E                            ; ---------------------------------------------------------------------------
0000725E                            
0000725E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000725E                            
0000725E                            
0000725E                            Deform_SLZ:				; XREF: Deform_Index
0000725E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007262 48C4                       		ext.l	d4
00007264 EB84                       		asl.l	#5,d4
00007266 2204                       		move.l	d4,d1
00007268 E384                       		asl.l	#1,d4
0000726A D881                       		add.l	d1,d4
0000726C 7A00                       		moveq	#0,d5
0000726E 6100 0000                  		bsr.w	ScrollBlock1
00007272 6100 0000                  		bsr.w	ScrollBlock3
00007276 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000727A                            	;	move.w	($FFFFF704).w,d0
0000727A                            	;	andi.w	#$7FF,d0
0000727A EA48                       		lsr.w	#5,d0
0000727C 4440                       		neg.w	d0
0000727E 0640 0026                  		addi.w	#$26,d0
00007282 31C0 F714                  		move.w	d0,($FFFFF714).w
00007286 3800                       		move.w	d0,d4
00007288                            	;	bsr.w	ScrollBlock3
00007288 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000728E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00007292                            
00007292 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007296 4440                       		neg.w	d0			; negate (positive to negative)
00007298 4840                       		swap	d0			; send to the left side of d0
0000729A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000729E 45F8 A800                  		lea	($FFFFA800).w,a2
000072A2 069A 0000 5000             		addi.l	#$5000,(a2)+
000072A8 069A 0000 C000             		addi.l	#$C000,(a2)+
000072AE 3038 A800                  		move.w	($FFFFA800).w,d0
000072B2 4440                       		neg.w	d0			; negate (positive to negative)
000072B4 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000072B6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072BA                            slz_DeformLoop_1:
000072BA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072BC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000072C0                            
000072C0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072C4 4440                       		neg.w	d0			; negate (positive to negative)
000072C6 4840                       		swap	d0			; send to the left side of d0
000072C8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072CC 45F8 A800                  		lea	($FFFFA800).w,a2
000072D0 069A 0000 5000             		addi.l	#$5000,(a2)+
000072D6 069A 0000 C000             		addi.l	#$C000,(a2)+
000072DC 3038 A800                  		move.w	($FFFFA800).w,d0
000072E0 4440                       		neg.w	d0			; negate (positive to negative)
000072E2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000072E4 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072E8                            slz_DeformLoop_2:
000072E8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072EA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000072EE                            
000072EE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072F2 4440                       		neg.w	d0			; negate (positive to negative)
000072F4 4840                       		swap	d0			; send to the left side of d0
000072F6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072FA 45F8 A800                  		lea	($FFFFA800).w,a2
000072FE 069A 0000 5000             		addi.l	#$5000,(a2)+
00007304 069A 0000 C000             		addi.l	#$C000,(a2)+
0000730A 3038 A800                  		move.w	($FFFFA800).w,d0
0000730E 4440                       		neg.w	d0			; negate (positive to negative)
00007310 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00007312 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007316                            slz_DeformLoop_3:
00007316 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007318 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000731C                            
0000731C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007320 4440                       		neg.w	d0			; negate (positive to negative)
00007322 4840                       		swap	d0			; send to the left side of d0
00007324 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007328 45F8 A800                  		lea	($FFFFA800).w,a2
0000732C 069A 0000 5000             		addi.l	#$5000,(a2)+
00007332 069A 0000 C000             		addi.l	#$C000,(a2)+
00007338 3038 A800                  		move.w	($FFFFA800).w,d0
0000733C 4440                       		neg.w	d0			; negate (positive to negative)
0000733E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00007340 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007344                            slz_DeformLoop_4:
00007344 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007346 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
0000734A                            
0000734A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000734E 4440                       		neg.w	d0			; negate (positive to negative)
00007350 4840                       		swap	d0			; send to the left side of d0
00007352 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007356 45F8 A800                  		lea	($FFFFA800).w,a2
0000735A 069A 0000 5000             		addi.l	#$5000,(a2)+
00007360 069A 0000 C000             		addi.l	#$C000,(a2)+
00007366 3038 A800                  		move.w	($FFFFA800).w,d0
0000736A 4440                       		neg.w	d0			; negate (positive to negative)
0000736C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000736E 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007372                            slz_DeformLoop_5:
00007372 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007374 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00007378                            
00007378 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000737C 4440                       		neg.w	d0			; negate (positive to negative)
0000737E 4840                       		swap	d0			; send to the left side of d0
00007380 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007384 4440                       		neg.w	d0			; negate (positive to negative)
00007386 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00007388 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000738C                            slz_DeformLoop_6:
0000738C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000738E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00007392                            
00007392 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007396 4440                       		neg.w	d0			; negate (positive to negative)
00007398 4840                       		swap	d0			; send to the left side of d0
0000739A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000739E 4440                       		neg.w	d0			; negate (positive to negative)
000073A0 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000073A2 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073A6                            slz_DeformLoop_7:
000073A6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073A8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000073AC                            
000073AC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000073B0 4440                       		neg.w	d0			; negate (positive to negative)
000073B2 4840                       		swap	d0			; send to the left side of d0
000073B4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000073B8 4440                       		neg.w	d0			; negate (positive to negative)
000073BA EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000073BC 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073C0                            slz_DeformLoop_8:
000073C0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073C2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000073C6                            
000073C6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000073CA 4440                       		neg.w	d0			; negate (positive to negative)
000073CC 4840                       		swap	d0			; send to the left side of d0
000073CE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000073D2 4440                       		neg.w	d0			; negate (positive to negative)
000073D4 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000073D6 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073DA                            slz_DeformLoop_9:
000073DA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073DC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000073E0                            
000073E0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000073E4 4440                       		neg.w	d0			; negate (positive to negative)
000073E6 4840                       		swap	d0			; send to the left side of d0
000073E8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000073EC 4440                       		neg.w	d0			; negate (positive to negative)
000073EE E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000073F0 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073F4                            slz_DeformLoop_10:
000073F4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073F6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000073FA                            
000073FA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000073FE 4440                       		neg.w	d0			; negate (positive to negative)
00007400 4840                       		swap	d0			; send to the left side of d0
00007402 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007406 4440                       		neg.w	d0			; negate (positive to negative)
00007408 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000740A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000740E                            slz_DeformLoop_11:
0000740E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007410 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00007414                            
00007414 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007418 4440                       		neg.w	d0			; negate (positive to negative)
0000741A 4840                       		swap	d0			; send to the left side of d0
0000741C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007420 4440                       		neg.w	d0			; negate (positive to negative)
00007422 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007424 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007428                            slz_DeformLoop_12:
00007428 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000742A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
0000742E                            
0000742E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007432 4440                       		neg.w	d0			; negate (positive to negative)
00007434 4840                       		swap	d0			; send to the left side of d0
00007436 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000743A 4440                       		neg.w	d0			; negate (positive to negative)
0000743C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000743E 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007442                            slz_DeformLoop_13:
00007442 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007444 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00007448 4E75                       		rts	
0000744A                            ; End of function Deform_SLZ
0000744A 4E75                       		rts	
0000744C                            ; End of function Deform_SLZ_2
0000744C                            
0000744C                            ; ---------------------------------------------------------------------------
0000744C                            ; Spring Yard Zone background layer deformation	code
0000744C                            ; ---------------------------------------------------------------------------
0000744C                            
0000744C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000744C                            
0000744C                            
0000744C                            Deform_SYZ:				; XREF: Deform_Index
0000744C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007450 48C4                       		ext.l	d4
00007452 ED84                       		asl.l	#6,d4
00007454 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007458 48C5                       		ext.l	d5
0000745A E985                       		asl.l	#4,d5
0000745C 2205                       		move.l	d5,d1
0000745E E385                       		asl.l	#1,d5
00007460 DA81                       		add.l	d1,d5
00007462 6100 0000                  		bsr.w	ScrollBlock1
00007466 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000746C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007470 323C 00DF                  		move.w	#$DF,d1
00007474 3038 F700                  		move.w	($FFFFF700).w,d0
00007478 4440                       		neg.w	d0
0000747A 4840                       		swap	d0
0000747C 3038 F708                  		move.w	($FFFFF708).w,d0
00007480 4440                       		neg.w	d0
00007482                            
00007482                            loc_653C:
00007482 22C0                       		move.l	d0,(a1)+
00007484 51C9 FFFC                  		dbf	d1,loc_653C
00007488 4E75                       		rts	
0000748A                            ; End of function Deform_SYZ
0000748A                            
0000748A                            ; ---------------------------------------------------------------------------
0000748A                            ; Scrap	Brain Zone background layer deformation	code
0000748A                            ; ---------------------------------------------------------------------------
0000748A                            
0000748A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000748A                            
0000748A                            
0000748A                            Deform_SBZ:				; XREF: Deform_Index
0000748A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000748E 48C4                       		ext.l	d4
00007490 ED84                       		asl.l	#6,d4
00007492 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007496 48C5                       		ext.l	d5
00007498 E985                       		asl.l	#4,d5
0000749A E385                       		asl.l	#1,d5
0000749C 6100 0000                  		bsr.w	ScrollBlock1
000074A0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000074A6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000074AA 323C 00DF                  		move.w	#$DF,d1
000074AE 3038 F700                  		move.w	($FFFFF700).w,d0
000074B2 4440                       		neg.w	d0
000074B4 4840                       		swap	d0
000074B6 3038 F708                  		move.w	($FFFFF708).w,d0
000074BA 4440                       		neg.w	d0
000074BC                            
000074BC                            loc_6576:
000074BC 22C0                       		move.l	d0,(a1)+
000074BE 51C9 FFFC                  		dbf	d1,loc_6576
000074C2 4E75                       		rts	
000074C4                            ; End of function Deform_SBZ
000074C4                            ; ---------------------------------------------------------------------------
000074C4                            ; Makoto Zone background layer deformation code
000074C4                            ; ---------------------------------------------------------------------------
000074C4                            
000074C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074C4                            
000074C4                            
000074C4                            Deform_BHZ:				; XREF: Deform_Index
000074C4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000074C8 48C4                       		ext.l	d4
000074CA E984                       		asl.l	#4,d4
000074CC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000074D0 48C5                       		ext.l	d5
000074D2 E985                       		asl.l	#4,d5
000074D4 7A00                       		moveq	#0,d5	; reset bg position in title screen
000074D6 6100 0000                  		bsr.w	ScrollBlock1
000074DA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000074E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000074E4 323C 00DF                  		move.w	#$DF,d1
000074E8 3038 F700                  		move.w	($FFFFF700).w,d0
000074EC 4440                       		neg.w	d0
000074EE 4840                       		swap	d0
000074F0 3038 F708                  		move.w	($FFFFF708).w,d0
000074F4 4440                       		neg.w	d0
000074F6                            
000074F6                            loc_63COCK6:
000074F6 22C0                       		move.l	d0,(a1)+
000074F8 51C9 FFFC                  		dbf	d1,loc_63COCK6
000074FC 3038 F646                  		move.w	($FFFFF646).w,d0
00007500 9078 F704                  		sub.w	($FFFFF704).w,d0
00007504 4E75                       		rts	
00007506                            ; End of function Deform_BHZ
00007506                            ; ---------------------------------------------------------------------------
00007506                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007506                            ; ---------------------------------------------------------------------------
00007506                            
00007506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007506                            
00007506                            
00007506                            ScrollHoriz:				; XREF: DeformBgLayer
00007506 3838 F700                  		move.w	($FFFFF700).w,d4
0000750A 6100                       		bsr.s	ScrollHoriz2
0000750C 3038 F700                  		move.w	($FFFFF700).w,d0
00007510 0240 0010                  		andi.w	#$10,d0
00007514 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007518 B300                       		eor.b	d1,d0
0000751A 6600                       		bne.s	locret_65B0
0000751C 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007522 3038 F700                  		move.w	($FFFFF700).w,d0
00007526 9044                       		sub.w	d4,d0
00007528 6A00                       		bpl.s	loc_65AA
0000752A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007530 4E75                       		rts	
00007532                            ; ===========================================================================
00007532                            
00007532                            loc_65AA:
00007532 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007538                            
00007538                            locret_65B0:
00007538 4E75                       		rts	
0000753A                            ; End of function ScrollHoriz
0000753A                            
0000753A                            
0000753A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000753A                            
0000753A                            
0000753A                            ScrollHoriz2:				; XREF: ScrollHoriz
0000753A 3038 D008                  		move.w	($FFFFD008).w,d0
0000753E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007542 0440 0090                  		subi.w	#$90,d0
00007546 6500                       		bcs.s	loc_65F6
00007548 0440 0010                  		subi.w	#$10,d0
0000754C 6400                       		bcc.s	loc_65CC
0000754E 4278 F73A                  		clr.w	($FFFFF73A).w
00007552 4E75                       		rts	
00007554                            ; ===========================================================================
00007554                            
00007554                            loc_65CC:
00007554 0C40 0010                  		cmpi.w	#$10,d0
00007558 6500                       		bcs.s	loc_65D6
0000755A 303C 0010                  		move.w	#$10,d0
0000755E                            
0000755E                            loc_65D6:
0000755E D078 F700                  		add.w	($FFFFF700).w,d0
00007562 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007566 6D00                       		blt.s	loc_65E4
00007568 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000756C                            
0000756C                            loc_65E4:
0000756C 3200                       		move.w	d0,d1
0000756E 9278 F700                  		sub.w	($FFFFF700).w,d1
00007572 E141                       		asl.w	#8,d1
00007574 31C0 F700                  		move.w	d0,($FFFFF700).w
00007578 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000757C 4E75                       		rts	
0000757E                            ; ===========================================================================
0000757E                            
0000757E                            loc_65F6:				; XREF: ScrollHoriz2
0000757E D078 F700                  		add.w	($FFFFF700).w,d0
00007582 B078 F728                  		cmp.w	($FFFFF728).w,d0
00007586 6EE4                       		bgt.s	loc_65E4
00007588 3038 F728                  		move.w	($FFFFF728).w,d0
0000758C 60DE                       		bra.s	loc_65E4
0000758E                            ; End of function ScrollHoriz2
0000758E                            
0000758E                            ; ===========================================================================
0000758E 4A40                       		tst.w	d0
00007590 6A00                       		bpl.s	loc_6610
00007592 303C FFFE                  		move.w	#-2,d0
00007596 60E6                       		bra.s	loc_65F6
00007598                            ; ===========================================================================
00007598                            
00007598                            loc_6610:
00007598 303C 0002                  		move.w	#2,d0
0000759C 60B6                       		bra.s	loc_65CC
0000759E                            
0000759E                            ; ---------------------------------------------------------------------------
0000759E                            ; Subroutine to	scroll the level vertically as Sonic moves
0000759E                            ; ---------------------------------------------------------------------------
0000759E                            
0000759E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000759E                            
0000759E                            
0000759E                            ScrollVertical:				; XREF: DeformBgLayer
0000759E 7200                       		moveq	#0,d1
000075A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000075A4 9078 F704                  		sub.w	($FFFFF704).w,d0
000075A8 0838 0002 D022             		btst	#2,($FFFFD022).w
000075AE 6700                       		beq.s	loc_662A
000075B0 5B40                       		subq.w	#5,d0
000075B2                            
000075B2                            loc_662A:
000075B2 0838 0001 D022             		btst	#1,($FFFFD022).w
000075B8 6700                       		beq.s	loc_664A
000075BA 0640 0020                  		addi.w	#$20,d0
000075BE 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000075C2 6500                       		bcs.s	loc_6696
000075C4 0440 0040                  		subi.w	#$40,d0
000075C8 6400                       		bcc.s	loc_6696
000075CA 4A38 F75C                  		tst.b	($FFFFF75C).w
000075CE 6600                       		bne.s	loc_66A8
000075D0 6000                       		bra.s	loc_6656
000075D2                            ; ===========================================================================
000075D2                            
000075D2                            loc_664A:
000075D2 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000075D6 6600                       		bne.s	loc_665C
000075D8 4A38 F75C                  		tst.b	($FFFFF75C).w
000075DC 6600                       		bne.s	loc_66A8
000075DE                            
000075DE                            loc_6656:
000075DE 4278 F73C                  		clr.w	($FFFFF73C).w
000075E2 4E75                       		rts	
000075E4                            ; ===========================================================================
000075E4                            
000075E4                            loc_665C:
000075E4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000075EA 6600                       		bne.s	loc_6684
000075EC 3238 D014                  		move.w	($FFFFD014).w,d1
000075F0 6A00                       		bpl.s	loc_666C
000075F2 4441                       		neg.w	d1
000075F4                            
000075F4                            loc_666C:
000075F4 0C41 0800                  		cmpi.w	#$800,d1
000075F8 6400                       		bcc.s	loc_6696
000075FA 323C 0600                  		move.w	#$600,d1
000075FE 0C40 0006                  		cmpi.w	#6,d0
00007602 6E00                       		bgt.s	loc_66F6
00007604 0C40 FFFA                  		cmpi.w	#-6,d0
00007608 6D00                       		blt.s	loc_66C0
0000760A 6000                       		bra.s	loc_66AE
0000760C                            ; ===========================================================================
0000760C                            
0000760C                            loc_6684:
0000760C 323C 0200                  		move.w	#$200,d1
00007610 0C40 0002                  		cmpi.w	#2,d0
00007614 6E00                       		bgt.s	loc_66F6
00007616 0C40 FFFE                  		cmpi.w	#-2,d0
0000761A 6D00                       		blt.s	loc_66C0
0000761C 6000                       		bra.s	loc_66AE
0000761E                            ; ===========================================================================
0000761E                            
0000761E                            loc_6696:
0000761E 323C 1000                  		move.w	#$1000,d1
00007622 0C40 0010                  		cmpi.w	#$10,d0
00007626 6E00                       		bgt.s	loc_66F6
00007628 0C40 FFF0                  		cmpi.w	#-$10,d0
0000762C 6D00                       		blt.s	loc_66C0
0000762E 6000                       		bra.s	loc_66AE
00007630                            ; ===========================================================================
00007630                            
00007630                            loc_66A8:
00007630 7000                       		moveq	#0,d0
00007632 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007636                            
00007636                            loc_66AE:
00007636 7200                       		moveq	#0,d1
00007638 3200                       		move.w	d0,d1
0000763A D278 F704                  		add.w	($FFFFF704).w,d1
0000763E 4A40                       		tst.w	d0
00007640 6A00 0000                  		bpl.w	loc_6700
00007644 6000 0000                  		bra.w	loc_66CC
00007648                            ; ===========================================================================
00007648                            
00007648                            loc_66C0:
00007648 4441                       		neg.w	d1
0000764A 48C1                       		ext.l	d1
0000764C E181                       		asl.l	#8,d1
0000764E D2B8 F704                  		add.l	($FFFFF704).w,d1
00007652 4841                       		swap	d1
00007654                            
00007654                            loc_66CC:
00007654 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007658 6E00                       		bgt.s	loc_6724
0000765A 0C41 FF00                  		cmpi.w	#-$100,d1
0000765E 6E00                       		bgt.s	loc_66F0
00007660 0241 07FF                  		andi.w	#$7FF,d1
00007664 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000766A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007670 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007676 6000                       		bra.s	loc_6724
00007678                            ; ===========================================================================
00007678                            
00007678                            loc_66F0:
00007678 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000767C 6000                       		bra.s	loc_6724
0000767E                            ; ===========================================================================
0000767E                            
0000767E                            loc_66F6:
0000767E 48C1                       		ext.l	d1
00007680 E181                       		asl.l	#8,d1
00007682 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007686 4841                       		swap	d1
00007688                            
00007688                            loc_6700:
00007688 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000768C 6D00                       		blt.s	loc_6724
0000768E 0441 0800                  		subi.w	#$800,d1
00007692 6500                       		bcs.s	loc_6720
00007694 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000769A 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000076A0 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000076A6 6000                       		bra.s	loc_6724
000076A8                            ; ===========================================================================
000076A8                            
000076A8                            loc_6720:
000076A8 3238 F72E                  		move.w	($FFFFF72E).w,d1
000076AC                            
000076AC                            loc_6724:
000076AC 3838 F704                  		move.w	($FFFFF704).w,d4
000076B0 4841                       		swap	d1
000076B2 2601                       		move.l	d1,d3
000076B4 96B8 F704                  		sub.l	($FFFFF704).w,d3
000076B8 E09B                       		ror.l	#8,d3
000076BA 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000076BE 21C1 F704                  		move.l	d1,($FFFFF704).w
000076C2 3038 F704                  		move.w	($FFFFF704).w,d0
000076C6 0240 0010                  		andi.w	#$10,d0
000076CA 1238 F74B                  		move.b	($FFFFF74B).w,d1
000076CE B300                       		eor.b	d1,d0
000076D0 6600                       		bne.s	locret_6766
000076D2 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000076D8 3038 F704                  		move.w	($FFFFF704).w,d0
000076DC 9044                       		sub.w	d4,d0
000076DE 6A00                       		bpl.s	loc_6760
000076E0 08F8 0000 F754             		bset	#0,($FFFFF754).w
000076E6 4E75                       		rts	
000076E8                            ; ===========================================================================
000076E8                            
000076E8                            loc_6760:
000076E8 08F8 0001 F754             		bset	#1,($FFFFF754).w
000076EE                            
000076EE                            locret_6766:
000076EE 4E75                       		rts	
000076F0                            ; End of function ScrollVertical
000076F0                            
000076F0                            
000076F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076F0                            
000076F0                            
000076F0                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000076F0 2438 F708                  		move.l	($FFFFF708).w,d2
000076F4 2002                       		move.l	d2,d0
000076F6 D084                       		add.l	d4,d0
000076F8 21C0 F708                  		move.l	d0,($FFFFF708).w
000076FC 2200                       		move.l	d0,d1
000076FE 4841                       		swap	d1
00007700 0241 0010                  		andi.w	#$10,d1
00007704 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007708 B701                       		eor.b	d3,d1
0000770A 6600                       		bne.s	loc_679C
0000770C 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007712 9082                       		sub.l	d2,d0
00007714 6A00                       		bpl.s	loc_6796
00007716 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000771C 6000                       		bra.s	loc_679C
0000771E                            ; ===========================================================================
0000771E                            
0000771E                            loc_6796:
0000771E 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007724                            
00007724                            loc_679C:
00007724 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007728 2003                       		move.l	d3,d0
0000772A D085                       		add.l	d5,d0
0000772C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007730 2200                       		move.l	d0,d1
00007732 4841                       		swap	d1
00007734 0241 0010                  		andi.w	#$10,d1
00007738 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000773C B501                       		eor.b	d2,d1
0000773E 6600                       		bne.s	locret_67D0
00007740 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007746 9083                       		sub.l	d3,d0
00007748 6A00                       		bpl.s	loc_67CA
0000774A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007750 4E75                       		rts	
00007752                            ; ===========================================================================
00007752                            
00007752                            loc_67CA:
00007752 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007758                            
00007758                            locret_67D0:
00007758 4E75                       		rts	
0000775A                            ; End of function ScrollBlock1
0000775A                            
0000775A                            
0000775A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000775A                            
0000775A                            
0000775A                            ScrollBlock2:				; XREF: Deform_SLZ
0000775A 2438 F708                  		move.l	($FFFFF708).w,d2
0000775E 2002                       		move.l	d2,d0
00007760 D084                       		add.l	d4,d0
00007762 21C0 F708                  		move.l	d0,($FFFFF708).w
00007766 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000776A 2003                       		move.l	d3,d0
0000776C D085                       		add.l	d5,d0
0000776E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007772 2200                       		move.l	d0,d1
00007774 4841                       		swap	d1
00007776 0241 0010                  		andi.w	#$10,d1
0000777A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000777E B501                       		eor.b	d2,d1
00007780 6600                       		bne.s	locret_6812
00007782 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007788 9083                       		sub.l	d3,d0
0000778A 6A00                       		bpl.s	loc_680C
0000778C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007792 4E75                       		rts	
00007794                            ; ===========================================================================
00007794                            
00007794                            loc_680C:
00007794 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000779A                            
0000779A                            locret_6812:
0000779A 4E75                       		rts	
0000779C                            ; End of function ScrollBlock2
0000779C                            
0000779C                            
0000779C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000779C                            
0000779C                            
0000779C                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000779C 3638 F70C                  		move.w	($FFFFF70C).w,d3
000077A0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000077A4 3200                       		move.w	d0,d1
000077A6 0241 0010                  		andi.w	#$10,d1
000077AA 1438 F74D                  		move.b	($FFFFF74D).w,d2
000077AE B501                       		eor.b	d2,d1
000077B0 6600                       		bne.s	locret_6842
000077B2 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000077B8 9043                       		sub.w	d3,d0
000077BA 6A00                       		bpl.s	loc_683C
000077BC 08F8 0000 F756             		bset	#0,($FFFFF756).w
000077C2 4E75                       		rts	
000077C4                            ; ===========================================================================
000077C4                            
000077C4                            loc_683C:
000077C4 08F8 0001 F756             		bset	#1,($FFFFF756).w
000077CA                            
000077CA                            locret_6842:
000077CA 4E75                       		rts	
000077CC                            ; End of function ScrollBlock3
000077CC                            
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            ScrollBlock4:				; XREF: Deform_GHZ
000077CC 3438 F710                  		move.w	($FFFFF710).w,d2
000077D0 3638 F714                  		move.w	($FFFFF714).w,d3
000077D4 3038 F73A                  		move.w	($FFFFF73A).w,d0
000077D8 48C0                       		ext.l	d0
000077DA EF80                       		asl.l	#7,d0
000077DC D1B8 F710                  		add.l	d0,($FFFFF710).w
000077E0 3038 F710                  		move.w	($FFFFF710).w,d0
000077E4 0240 0010                  		andi.w	#$10,d0
000077E8 1238 F74E                  		move.b	($FFFFF74E).w,d1
000077EC B300                       		eor.b	d1,d0
000077EE 6600                       		bne.s	locret_6884
000077F0 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000077F6 3038 F710                  		move.w	($FFFFF710).w,d0
000077FA 9042                       		sub.w	d2,d0
000077FC 6A00                       		bpl.s	loc_687E
000077FE 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007804 6000                       		bra.s	locret_6884
00007806                            ; ===========================================================================
00007806                            
00007806                            loc_687E:
00007806 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000780C                            
0000780C                            locret_6884:
0000780C 4E75                       		rts	
0000780E                            ; End of function ScrollBlock4
0000780E                            
0000780E                            
0000780E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000780E                            
0000780E                            
0000780E                            sub_6886:				; XREF: loc_C44
0000780E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007814 4DF9 00C0 0000             		lea	($C00000).l,a6
0000781A 45F8 F756                  		lea	($FFFFF756).w,a2
0000781E 47F8 F708                  		lea	($FFFFF708).w,a3
00007822 49F8 A440                  		lea	($FFFFA440).w,a4
00007826 343C 6000                  		move.w	#$6000,d2
0000782A 6100 0000                  		bsr.w	sub_6954
0000782E 45F8 F758                  		lea	($FFFFF758).w,a2
00007832 47F8 F710                  		lea	($FFFFF710).w,a3
00007836 6000 0000                  		bra.w	sub_69F4
0000783A                            ; End of function sub_6886
0000783A                            
0000783A                            ; ---------------------------------------------------------------------------
0000783A                            ; Subroutine to	display	correct	tiles as you move
0000783A                            ; ---------------------------------------------------------------------------
0000783A                            
0000783A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000783A                            
0000783A                            
0000783A                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000783A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007840 4DF9 00C0 0000             		lea	($C00000).l,a6
00007846 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000784A 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000784E 49F8 A440                  		lea	($FFFFA440).w,a4
00007852 343C 6000                  		move.w	#$6000,d2
00007856 6100 0000                  		bsr.w	sub_6954
0000785A 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000785E 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007862 6100 0000                  		bsr.w	sub_69F4
00007866 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000786A 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000786E 49F8 A400                  		lea	($FFFFA400).w,a4
00007872 343C 4000                  		move.w	#$4000,d2
00007876 4A12                       		tst.b	(a2)
00007878 6700                       		beq.s	locret_6952
0000787A 0892 0000                  		bclr	#0,(a2)
0000787E 6700                       		beq.s	loc_6908
00007880 78F0                       		moveq	#-$10,d4
00007882 7AF0                       		moveq	#-$10,d5
00007884 6100 0000                  		bsr.w	sub_6C20
00007888 78F0                       		moveq	#-$10,d4
0000788A 7AF0                       		moveq	#-$10,d5
0000788C 6100 0000                  		bsr.w	sub_6AD8
00007890                            
00007890                            loc_6908:
00007890 0892 0001                  		bclr	#1,(a2)
00007894 6700                       		beq.s	loc_6922
00007896 383C 00E0                  		move.w	#$E0,d4
0000789A 7AF0                       		moveq	#-$10,d5
0000789C 6100 0000                  		bsr.w	sub_6C20
000078A0 383C 00E0                  		move.w	#$E0,d4
000078A4 7AF0                       		moveq	#-$10,d5
000078A6 6100 0000                  		bsr.w	sub_6AD8
000078AA                            
000078AA                            loc_6922:
000078AA 0892 0002                  		bclr	#2,(a2)
000078AE 6700                       		beq.s	loc_6938
000078B0 78F0                       		moveq	#-$10,d4
000078B2 7AF0                       		moveq	#-$10,d5
000078B4 6100 0000                  		bsr.w	sub_6C20
000078B8 78F0                       		moveq	#-$10,d4
000078BA 7AF0                       		moveq	#-$10,d5
000078BC 6100 0000                  		bsr.w	sub_6B04
000078C0                            
000078C0                            loc_6938:
000078C0 0892 0003                  		bclr	#3,(a2)
000078C4 6700                       		beq.s	locret_6952
000078C6 78F0                       		moveq	#-$10,d4
000078C8 3A3C 0140                  		move.w	#$140,d5
000078CC 6100 0000                  		bsr.w	sub_6C20
000078D0 78F0                       		moveq	#-$10,d4
000078D2 3A3C 0140                  		move.w	#$140,d5
000078D6 6100 0000                  		bsr.w	sub_6B04
000078DA                            
000078DA                            locret_6952:
000078DA 4E75                       		rts	
000078DC                            ; End of function LoadTilesAsYouMove
000078DC                            
000078DC                            
000078DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078DC                            
000078DC                            
000078DC                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000078DC 4A12                       		tst.b	(a2)
000078DE 6700 0000                  		beq.w	locret_69F2
000078E2 0892 0000                  		bclr	#0,(a2)
000078E6 6700                       		beq.s	loc_6972
000078E8 78F0                       		moveq	#-$10,d4
000078EA 7AF0                       		moveq	#-$10,d5
000078EC 6100 0000                  		bsr.w	sub_6C20
000078F0 78F0                       		moveq	#-$10,d4
000078F2 7AF0                       		moveq	#-$10,d5
000078F4 7C1F                       		moveq	#$1F,d6
000078F6 6100 0000                  		bsr.w	sub_6ADA
000078FA                            
000078FA                            loc_6972:
000078FA 0892 0001                  		bclr	#1,(a2)
000078FE 6700                       		beq.s	loc_698E
00007900 383C 00E0                  		move.w	#$E0,d4
00007904 7AF0                       		moveq	#-$10,d5
00007906 6100 0000                  		bsr.w	sub_6C20
0000790A 383C 00E0                  		move.w	#$E0,d4
0000790E 7AF0                       		moveq	#-$10,d5
00007910 7C1F                       		moveq	#$1F,d6
00007912 6100 0000                  		bsr.w	sub_6ADA
00007916                            
00007916                            loc_698E:
00007916 0892 0002                  		bclr	#2,(a2)
0000791A 6700                       		beq.s	loc_69BE
0000791C 78F0                       		moveq	#-$10,d4
0000791E 7AF0                       		moveq	#-$10,d5
00007920 6100 0000                  		bsr.w	sub_6C20
00007924 78F0                       		moveq	#-$10,d4
00007926 7AF0                       		moveq	#-$10,d5
00007928 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000792C 322B 0004                  		move.w	4(a3),d1
00007930 0241 FFF0                  		andi.w	#-$10,d1
00007934 9C41                       		sub.w	d1,d6
00007936 6D00                       		blt.s	loc_69BE
00007938 E84E                       		lsr.w	#4,d6
0000793A 0C46 000F                  		cmpi.w	#$F,d6
0000793E 6500                       		bcs.s	loc_69BA
00007940 7C0F                       		moveq	#$F,d6
00007942                            
00007942                            loc_69BA:
00007942 6100 0000                  		bsr.w	sub_6B06
00007946                            
00007946                            loc_69BE:
00007946 0892 0003                  		bclr	#3,(a2)
0000794A 6700                       		beq.s	locret_69F2
0000794C 78F0                       		moveq	#-$10,d4
0000794E 3A3C 0140                  		move.w	#$140,d5
00007952 6100 0000                  		bsr.w	sub_6C20
00007956 78F0                       		moveq	#-$10,d4
00007958 3A3C 0140                  		move.w	#$140,d5
0000795C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007960 322B 0004                  		move.w	4(a3),d1
00007964 0241 FFF0                  		andi.w	#-$10,d1
00007968 9C41                       		sub.w	d1,d6
0000796A 6D00                       		blt.s	locret_69F2
0000796C E84E                       		lsr.w	#4,d6
0000796E 0C46 000F                  		cmpi.w	#$F,d6
00007972 6500                       		bcs.s	loc_69EE
00007974 7C0F                       		moveq	#$F,d6
00007976                            
00007976                            loc_69EE:
00007976 6100 0000                  		bsr.w	sub_6B06
0000797A                            
0000797A                            locret_69F2:
0000797A 4E75                       		rts	
0000797C                            ; End of function sub_6954
0000797C                            
0000797C                            
0000797C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000797C                            
0000797C                            
0000797C                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000797C 4A12                       		tst.b	(a2)
0000797E 6700 0000                  		beq.w	locret_6A80
00007982 0892 0002                  		bclr	#2,(a2)
00007986 6700                       		beq.s	loc_6A3E
00007988 0C53 0010                  		cmpi.w	#$10,(a3)
0000798C 6500                       		bcs.s	loc_6A3E
0000798E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007992 322B 0004                  		move.w	4(a3),d1
00007996 0241 FFF0                  		andi.w	#-$10,d1
0000799A 9841                       		sub.w	d1,d4
0000799C 3F04                       		move.w	d4,-(sp)
0000799E 7AF0                       		moveq	#-$10,d5
000079A0 6100 0000                  		bsr.w	sub_6C20
000079A4 381F                       		move.w	(sp)+,d4
000079A6 7AF0                       		moveq	#-$10,d5
000079A8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000079AC 322B 0004                  		move.w	4(a3),d1
000079B0 0241 FFF0                  		andi.w	#-$10,d1
000079B4 9C41                       		sub.w	d1,d6
000079B6 6D00                       		blt.s	loc_6A3E
000079B8 E84E                       		lsr.w	#4,d6
000079BA 0446 000E                  		subi.w	#$E,d6
000079BE 6400                       		bcc.s	loc_6A3E
000079C0 4446                       		neg.w	d6
000079C2 6100 0000                  		bsr.w	sub_6B06
000079C6                            
000079C6                            loc_6A3E:
000079C6 0892 0003                  		bclr	#3,(a2)
000079CA 6700                       		beq.s	locret_6A80
000079CC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000079D0 322B 0004                  		move.w	4(a3),d1
000079D4 0241 FFF0                  		andi.w	#-$10,d1
000079D8 9841                       		sub.w	d1,d4
000079DA 3F04                       		move.w	d4,-(sp)
000079DC 3A3C 0140                  		move.w	#$140,d5
000079E0 6100 0000                  		bsr.w	sub_6C20
000079E4 381F                       		move.w	(sp)+,d4
000079E6 3A3C 0140                  		move.w	#$140,d5
000079EA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000079EE 322B 0004                  		move.w	4(a3),d1
000079F2 0241 FFF0                  		andi.w	#-$10,d1
000079F6 9C41                       		sub.w	d1,d6
000079F8 6D00                       		blt.s	locret_6A80
000079FA E84E                       		lsr.w	#4,d6
000079FC 0446 000E                  		subi.w	#$E,d6
00007A00 6400                       		bcc.s	locret_6A80
00007A02 4446                       		neg.w	d6
00007A04 6100 0000                  		bsr.w	sub_6B06
00007A08                            
00007A08                            locret_6A80:
00007A08 4E75                       		rts	
00007A0A                            ; End of function sub_69F4
00007A0A                            
00007A0A                            ; ===========================================================================
00007A0A 4A12                       		tst.b	(a2)
00007A0C 6700                       		beq.s	locret_6AD6
00007A0E 0892 0002                  		bclr	#2,(a2)
00007A12 6700                       		beq.s	loc_6AAC
00007A14 383C 00D0                  		move.w	#$D0,d4
00007A18 322B 0004                  		move.w	4(a3),d1
00007A1C 0241 FFF0                  		andi.w	#-$10,d1
00007A20 9841                       		sub.w	d1,d4
00007A22 3F04                       		move.w	d4,-(sp)
00007A24 7AF0                       		moveq	#-$10,d5
00007A26 6100 0000                  		bsr.w	sub_6C3C
00007A2A 381F                       		move.w	(sp)+,d4
00007A2C 7AF0                       		moveq	#-$10,d5
00007A2E 7C02                       		moveq	#2,d6
00007A30 6100 0000                  		bsr.w	sub_6B06
00007A34                            
00007A34                            loc_6AAC:
00007A34 0892 0003                  		bclr	#3,(a2)
00007A38 6700                       		beq.s	locret_6AD6
00007A3A 383C 00D0                  		move.w	#$D0,d4
00007A3E 322B 0004                  		move.w	4(a3),d1
00007A42 0241 FFF0                  		andi.w	#-$10,d1
00007A46 9841                       		sub.w	d1,d4
00007A48 3F04                       		move.w	d4,-(sp)
00007A4A 3A3C 0140                  		move.w	#$140,d5
00007A4E 6100 0000                  		bsr.w	sub_6C3C
00007A52 381F                       		move.w	(sp)+,d4
00007A54 3A3C 0140                  		move.w	#$140,d5
00007A58 7C02                       		moveq	#2,d6
00007A5A 6100 0000                  		bsr.w	sub_6B06
00007A5E                            
00007A5E                            locret_6AD6:
00007A5E 4E75                       		rts	
00007A60                            
00007A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A60                            
00007A60                            
00007A60                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007A60 7C15                       		moveq	#$15,d6
00007A62                            ; End of function sub_6AD8
00007A62                            
00007A62                            
00007A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A62                            
00007A62                            
00007A62                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007A62 2E3C 0080 0000             		move.l	#$800000,d7
00007A68 2200                       		move.l	d0,d1
00007A6A                            
00007A6A                            loc_6AE2:
00007A6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A6E 6100 0000                  		bsr.w	sub_6BD6
00007A72 2001                       		move.l	d1,d0
00007A74 6100 0000                  		bsr.w	sub_6B32
00007A78 5801                       		addq.b	#4,d1
00007A7A 0201 007F                  		andi.b	#$7F,d1
00007A7E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A82 0645 0010                  		addi.w	#$10,d5
00007A86 51CE FFE2                  		dbf	d6,loc_6AE2
00007A8A 4E75                       		rts	
00007A8C                            ; End of function sub_6ADA
00007A8C                            
00007A8C                            
00007A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A8C                            
00007A8C                            
00007A8C                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007A8C 7C0F                       		moveq	#$F,d6
00007A8E                            ; End of function sub_6B04
00007A8E                            
00007A8E                            
00007A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A8E                            
00007A8E                            
00007A8E                            sub_6B06:				; XREF: sub_6954
00007A8E 2E3C 0080 0000             		move.l	#$800000,d7
00007A94 2200                       		move.l	d0,d1
00007A96                            
00007A96                            loc_6B0E:
00007A96 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A9A 6100 0000                  		bsr.w	sub_6BD6
00007A9E 2001                       		move.l	d1,d0
00007AA0 6100 0000                  		bsr.w	sub_6B32
00007AA4 0641 0100                  		addi.w	#$100,d1
00007AA8 0241 0FFF                  		andi.w	#$FFF,d1
00007AAC 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007AB0 0644 0010                  		addi.w	#$10,d4
00007AB4 51CE FFE0                  		dbf	d6,loc_6B0E
00007AB8 4E75                       		rts	
00007ABA                            ; End of function sub_6B06
00007ABA                            
00007ABA                            
00007ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ABA                            
00007ABA                            
00007ABA                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007ABA 8042                       		or.w	d2,d0
00007ABC 4840                       		swap	d0
00007ABE 0810 0004                  		btst	#4,(a0)
00007AC2 6600                       		bne.s	loc_6B6E
00007AC4 0810 0003                  		btst	#3,(a0)
00007AC8 6600                       		bne.s	loc_6B4E
00007ACA 2A80                       		move.l	d0,(a5)
00007ACC 2C99                       		move.l	(a1)+,(a6)
00007ACE D087                       		add.l	d7,d0
00007AD0 2A80                       		move.l	d0,(a5)
00007AD2 2C99                       		move.l	(a1)+,(a6)
00007AD4 4E75                       		rts	
00007AD6                            ; ===========================================================================
00007AD6                            
00007AD6                            loc_6B4E:
00007AD6 2A80                       		move.l	d0,(a5)
00007AD8 2819                       		move.l	(a1)+,d4
00007ADA 0A84 0800 0800             		eori.l	#$8000800,d4
00007AE0 4844                       		swap	d4
00007AE2 2C84                       		move.l	d4,(a6)
00007AE4 D087                       		add.l	d7,d0
00007AE6 2A80                       		move.l	d0,(a5)
00007AE8 2819                       		move.l	(a1)+,d4
00007AEA 0A84 0800 0800             		eori.l	#$8000800,d4
00007AF0 4844                       		swap	d4
00007AF2 2C84                       		move.l	d4,(a6)
00007AF4 4E75                       		rts	
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            loc_6B6E:
00007AF6 0810 0003                  		btst	#3,(a0)
00007AFA 6600                       		bne.s	loc_6B90
00007AFC 2A80                       		move.l	d0,(a5)
00007AFE 2A19                       		move.l	(a1)+,d5
00007B00 2819                       		move.l	(a1)+,d4
00007B02 0A84 1000 1000             		eori.l	#$10001000,d4
00007B08 2C84                       		move.l	d4,(a6)
00007B0A D087                       		add.l	d7,d0
00007B0C 2A80                       		move.l	d0,(a5)
00007B0E 0A85 1000 1000             		eori.l	#$10001000,d5
00007B14 2C85                       		move.l	d5,(a6)
00007B16 4E75                       		rts	
00007B18                            ; ===========================================================================
00007B18                            
00007B18                            loc_6B90:
00007B18 2A80                       		move.l	d0,(a5)
00007B1A 2A19                       		move.l	(a1)+,d5
00007B1C 2819                       		move.l	(a1)+,d4
00007B1E 0A84 1800 1800             		eori.l	#$18001800,d4
00007B24 4844                       		swap	d4
00007B26 2C84                       		move.l	d4,(a6)
00007B28 D087                       		add.l	d7,d0
00007B2A 2A80                       		move.l	d0,(a5)
00007B2C 0A85 1800 1800             		eori.l	#$18001800,d5
00007B32 4845                       		swap	d5
00007B34 2C85                       		move.l	d5,(a6)
00007B36 4E75                       		rts	
00007B38                            ; End of function sub_6B32
00007B38                            
00007B38                            ; ===========================================================================
00007B38 4E75                       		rts	
00007B3A                            ; ===========================================================================
00007B3A 2A80                       		move.l	d0,(a5)
00007B3C 3A3C 2000                  		move.w	#$2000,d5
00007B40 3819                       		move.w	(a1)+,d4
00007B42 D845                       		add.w	d5,d4
00007B44 3C84                       		move.w	d4,(a6)
00007B46 3819                       		move.w	(a1)+,d4
00007B48 D845                       		add.w	d5,d4
00007B4A 3C84                       		move.w	d4,(a6)
00007B4C D087                       		add.l	d7,d0
00007B4E 2A80                       		move.l	d0,(a5)
00007B50 3819                       		move.w	(a1)+,d4
00007B52 D845                       		add.w	d5,d4
00007B54 3C84                       		move.w	d4,(a6)
00007B56 3819                       		move.w	(a1)+,d4
00007B58 D845                       		add.w	d5,d4
00007B5A 3C84                       		move.w	d4,(a6)
00007B5C 4E75                       		rts	
00007B5E                            
00007B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B5E                            
00007B5E                            
00007B5E                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007B5E 43F8 B000                  		lea	($FFFFB000).w,a1
00007B62 D86B 0004                  		add.w	4(a3),d4
00007B66 DA53                       		add.w	(a3),d5
00007B68 3604                       		move.w	d4,d3
00007B6A E24B                       		lsr.w	#1,d3
00007B6C 0243 0380                  		andi.w	#$380,d3
00007B70 E64D                       		lsr.w	#3,d5
00007B72 3005                       		move.w	d5,d0
00007B74 EA48                       		lsr.w	#5,d0
00007B76 0240 007F                  		andi.w	#$7F,d0
00007B7A D043                       		add.w	d3,d0
00007B7C 76FF                       		moveq	#-1,d3
00007B7E 1634 0000                  		move.b	(a4,d0.w),d3
00007B82 6700                       		beq.s	locret_6C1E
00007B84 5303                       		subq.b	#1,d3
00007B86 0243 007F                  		andi.w	#$7F,d3
00007B8A EE5B                       		ror.w	#7,d3
00007B8C D844                       		add.w	d4,d4
00007B8E 0244 01E0                  		andi.w	#$1E0,d4
00007B92 0245 001E                  		andi.w	#$1E,d5
00007B96 D644                       		add.w	d4,d3
00007B98 D645                       		add.w	d5,d3
00007B9A 2043                       		movea.l	d3,a0
00007B9C 3610                       		move.w	(a0),d3
00007B9E 0243 03FF                  		andi.w	#$3FF,d3
00007BA2 E74B                       		lsl.w	#3,d3
00007BA4 D2C3                       		adda.w	d3,a1
00007BA6                            
00007BA6                            locret_6C1E:
00007BA6 4E75                       		rts	
00007BA8                            ; End of function sub_6BD6
00007BA8                            
00007BA8                            
00007BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BA8                            
00007BA8                            
00007BA8                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007BA8 D86B 0004                  		add.w	4(a3),d4
00007BAC DA53                       		add.w	(a3),d5
00007BAE 0244 00F0                  		andi.w	#$F0,d4
00007BB2 0245 01F0                  		andi.w	#$1F0,d5
00007BB6 E94C                       		lsl.w	#4,d4
00007BB8 E44D                       		lsr.w	#2,d5
00007BBA D845                       		add.w	d5,d4
00007BBC 7003                       		moveq	#3,d0
00007BBE 4840                       		swap	d0
00007BC0 3004                       		move.w	d4,d0
00007BC2 4E75                       		rts	
00007BC4                            ; End of function sub_6C20
00007BC4                            
00007BC4                            
00007BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC4                            ; not used
00007BC4                            
00007BC4                            
00007BC4                            sub_6C3C:
00007BC4 D86B 0004                  		add.w	4(a3),d4
00007BC8 DA53                       		add.w	(a3),d5
00007BCA 0244 00F0                  		andi.w	#$F0,d4
00007BCE 0245 01F0                  		andi.w	#$1F0,d5
00007BD2 E94C                       		lsl.w	#4,d4
00007BD4 E44D                       		lsr.w	#2,d5
00007BD6 D845                       		add.w	d5,d4
00007BD8 7002                       		moveq	#2,d0
00007BDA 4840                       		swap	d0
00007BDC 3004                       		move.w	d4,d0
00007BDE 4E75                       		rts	
00007BE0                            ; End of function sub_6C3C
00007BE0                            
00007BE0                            ; ---------------------------------------------------------------------------
00007BE0                            ; Subroutine to	load tiles as soon as the level	appears
00007BE0                            ; ---------------------------------------------------------------------------
00007BE0                            
00007BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BE0                            
00007BE0                            
00007BE0                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007BE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BE6 4DF9 00C0 0000             		lea	($C00000).l,a6
00007BEC 47F8 F700                  		lea	($FFFFF700).w,a3
00007BF0 49F8 A400                  		lea	($FFFFA400).w,a4
00007BF4 343C 4000                  		move.w	#$4000,d2
00007BF8 6100                       		bsr.s	LoadTilesFromStart2
00007BFA 47F8 F708                  		lea	($FFFFF708).w,a3
00007BFE 49F8 A440                  		lea	($FFFFA440).w,a4
00007C02 343C 6000                  		move.w	#$6000,d2
00007C06                            ; End of function LoadTilesFromStart
00007C06                            
00007C06                            
00007C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C06                            
00007C06                            
00007C06                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007C06 78F0                       		moveq	#-$10,d4
00007C08 7C0F                       		moveq	#$F,d6
00007C0A                            
00007C0A                            loc_6C82:
00007C0A 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C0E 7A00                       		moveq	#0,d5
00007C10 3204                       		move.w	d4,d1
00007C12 6100 FF94                  		bsr.w	sub_6C20
00007C16 3801                       		move.w	d1,d4
00007C18 7A00                       		moveq	#0,d5
00007C1A 7C1F                       		moveq	#$1F,d6
00007C1C 6100 FE44                  		bsr.w	sub_6ADA
00007C20 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C24 0644 0010                  		addi.w	#$10,d4
00007C28 51CE FFE0                  		dbf	d6,loc_6C82
00007C2C 4E75                       		rts	
00007C2E                            ; End of function LoadTilesFromStart2
00007C2E                            
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            ; Main Load Block loading subroutine
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            
00007C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C2E                            
00007C2E                            
00007C2E                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007C2E 7000                       		moveq	#0,d0
00007C30 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007C34 E948                       		lsl.w	#4,d0
00007C36 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007C3C 45F2 0000                  		lea	(a2,d0.w),a2
00007C40 2F0A                       		move.l	a2,-(sp)
00007C42 588A                       		addq.l	#4,a2
00007C44 205A                       		movea.l	(a2)+,a0
00007C46 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007C4A 303C 0000                  		move.w	#0,d0
00007C4E 6100 A448                  		bsr.w	EniDec
00007C52 205A                       		movea.l	(a2)+,a0
00007C54 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007C5A 6100 A5BA                  		bsr.w	KosDec
00007C5E 6100 0000                  		bsr.w	LevelLayoutLoad
00007C62 301A                       		move.w	(a2)+,d0
00007C64 3012                       		move.w	(a2),d0
00007C66 0240 00FF                  		andi.w	#$FF,d0
00007C6A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007C70 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007C72 700C                       		moveq	#$C,d0		; use SB3 pallet
00007C74                            
00007C74                            MLB_ChkSBZPal:
00007C74 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007C7A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007C7C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007C82 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007C84                            
00007C84                            MLB_UsePal0E:
00007C84 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007C86                            
00007C86                            MLB_NormalPal:
00007C86 6100 ADC2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007C8A 245F                       		movea.l	(sp)+,a2
00007C8C 584A                       		addq.w	#4,a2
00007C8E 7000                       		moveq	#0,d0
00007C90 1012                       		move.b	(a2),d0
00007C92 6700                       		beq.s	locret_6D10
00007C94 6100 A264                  		bsr.w	LoadPLC		; load pattern load cues
00007C98                            
00007C98                            locret_6D10:
00007C98 4E75                       		rts	
00007C9A                            ; End of function MainLoadBlockLoad
00007C9A                            
00007C9A                            ; ---------------------------------------------------------------------------
00007C9A                            ; Level	layout loading subroutine
00007C9A                            ; ---------------------------------------------------------------------------
00007C9A                            
00007C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C9A                            
00007C9A                            
00007C9A                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007C9A 47F8 A400                  		lea	($FFFFA400).w,a3
00007C9E 323C 01FF                  		move.w	#$1FF,d1
00007CA2 7000                       		moveq	#0,d0
00007CA4                            
00007CA4                            LevLoad_ClrRam:
00007CA4 26C0                       		move.l	d0,(a3)+
00007CA6 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007CAA                            
00007CAA 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007CAE 7200                       		moveq	#0,d1
00007CB0 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007CB4 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007CB8 7202                       		moveq	#2,d1
00007CBA                            ; End of function LevelLayoutLoad
00007CBA                            
00007CBA                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007CBA                            
00007CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBA                            
00007CBA                            
00007CBA                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007CBA 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007CBE ED08                       		lsl.b	#6,d0
00007CC0 EA48                       		lsr.w	#5,d0
00007CC2 3400                       		move.w	d0,d2
00007CC4 D040                       		add.w	d0,d0
00007CC6 D042                       		add.w	d2,d0
00007CC8 D041                       		add.w	d1,d0
00007CCA 43F9 0000 0000             		lea	(Level_Index).l,a1
00007CD0 3031 0000                  		move.w	(a1,d0.w),d0
00007CD4 43F1 0000                  		lea	(a1,d0.w),a1
00007CD8 7200                       		moveq	#0,d1
00007CDA 3401                       		move.w	d1,d2
00007CDC 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007CDE 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007CE0                            
00007CE0                            LevLoad_NumRows:
00007CE0 3001                       		move.w	d1,d0
00007CE2 204B                       		movea.l	a3,a0
00007CE4                            
00007CE4                            LevLoad_Row:
00007CE4 10D9                       		move.b	(a1)+,(a0)+
00007CE6 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007CEA 47EB 0080                  		lea	$80(a3),a3	; do next row
00007CEE 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007CF2 4E75                       		rts	
00007CF4                            ; End of function LevelLayoutLoad2
00007CF4                            
00007CF4                            ; ---------------------------------------------------------------------------
00007CF4                            ; Dynamic screen resize	loading	subroutine
00007CF4                            ; ---------------------------------------------------------------------------
00007CF4                            
00007CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CF4                            
00007CF4                            
00007CF4                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007CF4 7000                       		moveq	#0,d0
00007CF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007CFA D040                       		add.w	d0,d0
00007CFC 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007D00 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007D04 7202                       		moveq	#2,d1
00007D06 3038 F726                  		move.w	($FFFFF726).w,d0
00007D0A 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007D0E 6700                       		beq.s	locret_6DAA
00007D10 6400                       		bcc.s	loc_6DAC
00007D12 4441                       		neg.w	d1
00007D14 3038 F704                  		move.w	($FFFFF704).w,d0
00007D18 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007D1C 6300                       		bls.s	loc_6DA0
00007D1E 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007D22 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007D28                            
00007D28                            loc_6DA0:
00007D28 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007D2C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007D32                            
00007D32                            locret_6DAA:
00007D32 4E75                       		rts	
00007D34                            ; ===========================================================================
00007D34                            
00007D34                            loc_6DAC:				; XREF: DynScrResizeLoad
00007D34 3038 F704                  		move.w	($FFFFF704).w,d0
00007D38 5040                       		addq.w	#8,d0
00007D3A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007D3E 6500                       		bcs.s	loc_6DC4
00007D40 0838 0001 D022             		btst	#1,($FFFFD022).w
00007D46 6700                       		beq.s	loc_6DC4
00007D48 D241                       		add.w	d1,d1
00007D4A D241                       		add.w	d1,d1
00007D4C                            
00007D4C                            loc_6DC4:
00007D4C D378 F72E                  		add.w	d1,($FFFFF72E).w
00007D50 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007D56 4E75                       		rts	
00007D58                            ; End of function DynScrResizeLoad
00007D58                            
00007D58                            ; ===========================================================================
00007D58                            ; ---------------------------------------------------------------------------
00007D58                            ; Offset index for dynamic screen resizing
00007D58                            ; ---------------------------------------------------------------------------
00007D58 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007D5C 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007D60 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007D64 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007D68                            ; ===========================================================================
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Green	Hill Zone dynamic screen resizing
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            
00007D68                            Resize_GHZ:				; XREF: Resize_Index
00007D68 7000                       		moveq	#0,d0
00007D6A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007D6E D040                       		add.w	d0,d0
00007D70 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007D74 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007D78                            ; ===========================================================================
00007D78 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007D7A 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007D7C 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007D7E                            ; ===========================================================================
00007D7E                            
00007D7E                            Resize_GHZ1:
00007D7E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007D84 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007D8A 6500                       		bcs.s	locret_6E08	; if not, branch
00007D8C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007D92                            
00007D92                            locret_6E08:
00007D92 4E75                       		rts	
00007D94                            ; ===========================================================================
00007D94                            
00007D94                            Resize_GHZ2:
00007D94 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D9A 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007DA0 6500                       		bcs.s	locret_6E3A
00007DA2 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007DA8 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007DAE 6500                       		bcs.s	locret_6E3A
00007DB0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007DB6 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007DBC 6500                       		bcs.s	locret_6E3A
00007DBE 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007DC4 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007DCA 6500                       		bcs.s	locret_6E3A
00007DCC 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007DD2                            		
00007DD2                            locret_6E3A:
00007DD2 4E75                       		rts	
00007DD4                            ; ===========================================================================
00007DD4                            
00007DD4                            Resize_GHZ3:
00007DD4 7000                       		moveq	#0,d0
00007DD6 1038 F742                  		move.b	($FFFFF742).w,d0
00007DDA 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007DDE 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007DE2                            ; ===========================================================================
00007DE2 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007DE4 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007DE6 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007DE8                            ; ===========================================================================
00007DE8                            
00007DE8                            Resize_GHZ3main:
00007DE8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007DEE 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007DF4 6500                       		bcs.s	locret_6E96
00007DF6 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007DFC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007E02 6500                       		bcs.s	locret_6E96
00007E04 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007E0A 6500                       		bcs.s	loc_6E98
00007E0C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007E12 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007E18 6400                       		bcc.s	loc_6E8E
00007E1A 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007E20 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007E26                            
00007E26                            loc_6E8E:
00007E26 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007E2C 6400                       		bcc.s	loc_6E98
00007E2E                            
00007E2E                            locret_6E96:
00007E2E 4E75                       		rts	
00007E30                            ; ===========================================================================
00007E30                            
00007E30                            loc_6E98:
00007E30 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007E36 5438 F742                  		addq.b	#2,($FFFFF742).w
00007E3A 4E75                       		rts	
00007E3C                            ; ===========================================================================
00007E3C                            
00007E3C                            Resize_GHZ3boss:
00007E3C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007E42 6400                       		bcc.s	loc_6EB0
00007E44 5538 F742                  		subq.b	#2,($FFFFF742).w
00007E48                            
00007E48                            loc_6EB0:
00007E48 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007E4E 6500                       		bcs.s	locret_6EE8
00007E50 6100 0000                  		bsr.w	SingleObjLoad
00007E54 6600                       		bne.s	loc_6ED0
00007E56 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007E5A 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007E60 337C 0280 000C             		move.w	#$280,$C(a1)
00007E66                            
00007E66                            loc_6ED0:
00007E66 303C 008C                  		move.w	#$8C,d0
00007E6A 6100 9EA4                  		bsr.w	PlaySound	; play boss music
00007E6E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007E74 5438 F742                  		addq.b	#2,($FFFFF742).w
00007E78 7011                       		moveq	#$11,d0
00007E7A 6000 A07E                  		bra.w	LoadPLC		; load boss patterns
00007E7E                            ; ===========================================================================
00007E7E                            
00007E7E                            locret_6EE8:
00007E7E 4E75                       		rts	
00007E80                            ; ===========================================================================
00007E80                            
00007E80                            Resize_GHZ3end:
00007E80 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007E86 4E75                       		rts	
00007E88                            ; ===========================================================================
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            ; Labyrinth Zone dynamic screen	resizing
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            
00007E88                            Resize_LZ:				; XREF: Resize_Index
00007E88 7000                       		moveq	#0,d0
00007E8A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007E8E D040                       		add.w	d0,d0
00007E90 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007E94 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007E98                            ; ===========================================================================
00007E98 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007E9A 0000                       		dc.w Resize_LZ12-Resize_LZx
00007E9C 0000                       		dc.w Resize_LZ3-Resize_LZx
00007E9E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007EA0                            ; ===========================================================================
00007EA0                            
00007EA0                            Resize_LZ12:
00007EA0 4E75                       		rts	
00007EA2                            ; ===========================================================================
00007EA2                            
00007EA2                            Resize_LZ3:
00007EA2 7000                       		moveq	#0,d0
00007EA4 1038 F742                  		move.b	($FFFFF742).w,d0
00007EA8 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007EAC 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007EB0                            ; ===========================================================================
00007EB0                            off_6E4A2:	
00007EB0 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007EB2 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007EB4                            ; ===========================================================================
00007EB4                            Resize_LZ3boss:
00007EB4 4A38 F742                  		tst.b	($FFFFF742).w
00007EB8 6600                       		bne.s	locret_6F62
00007EBA 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007EC0 6500                       		bcs.s	locret_6F62
00007EC2 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007EC8 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007ECE                            
00007ECE 6100 0000                  		bsr.w	SingleObjLoad
00007ED2 6600                       		bne.s	loc_6F4A
00007ED4 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007ED8 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007EDE 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007EE4                            loc_6F4A:
00007EE4 303C 008C                  		move.w	#$8C,d0
00007EE8 6100 9E26                  		bsr.w	PlaySound	; play boss music
00007EEC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007EF2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007EF6 7022                       		moveq	#$22,d0
00007EF8 6000 A000                  		bra.w	LoadPLC		; load boss patterns
00007EFC                            ; ===========================================================================
00007EFC                            
00007EFC                            locret_6F62:
00007EFC 4E75                       		rts	
00007EFE                            ; ===========================================================================
00007EFE                            
00007EFE                            Resize_LZ3end:
00007EFE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007F04 4E75                       		rts	
00007F06                            ; ===========================================================================
00007F06                            
00007F06                            Resize_SBZ3:
00007F06 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007F0C 6500                       		bcs.s	locret_6F8C
00007F0E 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007F14 6400                       		bcc.s	locret_6F8C	; if not, branch
00007F16 4238 FE30                  		clr.b	($FFFFFE30).w
00007F1A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007F20 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007F26 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007F2C                            
00007F2C                            locret_6F8C:
00007F2C 4E75                       		rts	
00007F2E                            ; ===========================================================================
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            ; Marble Zone dynamic screen resizing
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            
00007F2E                            Resize_MZ:				; XREF: Resize_Index
00007F2E 7000                       		moveq	#0,d0
00007F30 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007F34 D040                       		add.w	d0,d0
00007F36 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007F3A 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007F3E                            ; ===========================================================================
00007F3E 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007F40 0000                       		dc.w Resize_MZ2-Resize_MZx
00007F42 0000                       		dc.w Resize_MZ3-Resize_MZx
00007F44                            ; ===========================================================================
00007F44                            
00007F44                            Resize_MZ1:
00007F44 7000                       		moveq	#0,d0
00007F46 1038 F742                  		move.b	($FFFFF742).w,d0
00007F4A 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007F4E 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007F52                            ; ===========================================================================
00007F52 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007F54 0000                       		dc.w loc_6FEA-off_6FB2
00007F56 0000                       		dc.w loc_702E-off_6FB2
00007F58 0000                       		dc.w loc_7050-off_6FB2
00007F5A                            ; ===========================================================================
00007F5A                            
00007F5A                            loc_6FBA:
00007F5A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F60 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007F66 6500                       		bcs.s	locret_6FE8
00007F68 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007F6E 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007F74 6500                       		bcs.s	locret_6FE8
00007F76 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007F7C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007F82 6500                       		bcs.s	locret_6FE8
00007F84 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F88                            
00007F88                            locret_6FE8:
00007F88 4E75                       		rts	
00007F8A                            ; ===========================================================================
00007F8A                            
00007F8A                            loc_6FEA:
00007F8A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007F90 6400                       		bcc.s	loc_6FF8
00007F92 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F96 4E75                       		rts	
00007F98                            ; ===========================================================================
00007F98                            
00007F98                            loc_6FF8:
00007F98 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007F9E 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007FA4 6400                       		bcc.s	locret_702C
00007FA6 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007FAC 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007FB2 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007FB8 6400                       		bcc.s	locret_702C
00007FBA 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007FC0 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007FC6 6500                       		bcs.s	locret_702C
00007FC8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FCC                            
00007FCC                            locret_702C:
00007FCC 4E75                       		rts	
00007FCE                            ; ===========================================================================
00007FCE                            
00007FCE                            loc_702E:
00007FCE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007FD4 6400                       		bcc.s	loc_703C
00007FD6 5538 F742                  		subq.b	#2,($FFFFF742).w
00007FDA 4E75                       		rts	
00007FDC                            ; ===========================================================================
00007FDC                            
00007FDC                            loc_703C:
00007FDC 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007FE2 6500                       		bcs.s	locret_704E
00007FE4 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007FEA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FEE                            
00007FEE                            locret_704E:
00007FEE 4E75                       		rts	
00007FF0                            ; ===========================================================================
00007FF0                            
00007FF0                            loc_7050:
00007FF0 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007FF6 6500                       		bcs.s	locret_7072
00007FF8 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007FFE 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008004 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000800A 6500                       		bcs.s	locret_7072
0000800C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008012                            
00008012                            locret_7072:
00008012 4E75                       		rts	
00008014                            ; ===========================================================================
00008014                            
00008014                            Resize_MZ2:
00008014 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000801A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008020 6500                       		bcs.s	locret_7088
00008022 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008028                            
00008028                            locret_7088:
00008028 4E75                       		rts	
0000802A                            ; ===========================================================================
0000802A                            
0000802A                            Resize_MZ3:
0000802A 7000                       		moveq	#0,d0
0000802C 1038 F742                  		move.b	($FFFFF742).w,d0
00008030 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008034 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008038                            ; ===========================================================================
00008038 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000803A 0000                       		dc.w Resize_MZ3end-off_7098
0000803C                            ; ===========================================================================
0000803C                            
0000803C                            Resize_MZ3boss:
0000803C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008042 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008048 6500                       		bcs.s	locret_70E8
0000804A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008050 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008056 6500                       		bcs.s	locret_70E8
00008058 6100 0000                  		bsr.w	SingleObjLoad
0000805C 6600                       		bne.s	loc_70D0
0000805E 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00008062 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008068 337C 022C 000C             		move.w	#$22C,$C(a1)
0000806E                            
0000806E                            loc_70D0:
0000806E 303C 008C                  		move.w	#$8C,d0
00008072 6100 9C9C                  		bsr.w	PlaySound	; play boss music
00008076 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000807C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008080 7011                       		moveq	#$11,d0
00008082 6000 9E76                  		bra.w	LoadPLC		; load boss patterns
00008086                            ; ===========================================================================
00008086                            
00008086                            locret_70E8:
00008086 4E75                       		rts	
00008088                            ; ===========================================================================
00008088                            
00008088                            Resize_MZ3end:
00008088 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000808E 4E75                       		rts	
00008090                            ; ===========================================================================
00008090                            ; ---------------------------------------------------------------------------
00008090                            ; Star Light Zone dynamic screen resizing
00008090                            ; ---------------------------------------------------------------------------
00008090                            
00008090                            Resize_SLZ:				; XREF: Resize_Index
00008090 7000                       		moveq	#0,d0
00008092 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008096 D040                       		add.w	d0,d0
00008098 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000809C 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000080A0                            ; ===========================================================================
000080A0 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000080A2 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000080A4 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000080A6                            ; ===========================================================================
000080A6                            
000080A6                            Resize_SLZ1:
000080A6 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000080AC 4E75                       		rts	
000080AE                            
000080AE                            Resize_SLZ2:
000080AE 4E75                       		rts	
000080B0                            ; ===========================================================================
000080B0                            
000080B0                            Resize_SLZ3:
000080B0 7000                       		moveq	#0,d0
000080B2 1038 F742                  		move.b	($FFFFF742).w,d0
000080B6 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000080BA 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000080BE                            ; ===========================================================================
000080BE 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000080C0 0000                       		dc.w Resize_SLZ3boss-off_7118
000080C2 0000                       		dc.w Resize_SLZ3end-off_7118
000080C4                            ; ===========================================================================
000080C4                            
000080C4                            Resize_SLZ3main:
000080C4 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000080CA 6500                       		bcs.s	locret_7130
000080CC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000080D2 5438 F742                  		addq.b	#2,($FFFFF742).w
000080D6                            
000080D6                            locret_7130:
000080D6 4E75                       		rts	
000080D8                            ; ===========================================================================
000080D8                            
000080D8                            Resize_SLZ3boss:
000080D8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000080DE 6500                       		bcs.s	locret_715C
000080E0 6100 0000                  		bsr.w	SingleObjLoad
000080E4 6600                       		bne.s	loc_7144
000080E6 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000080EA                            
000080EA                            loc_7144:
000080EA 303C 008C                  		move.w	#$8C,d0
000080EE 6100 9C20                  		bsr.w	PlaySound	; play boss music
000080F2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000080F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000080FC 7011                       		moveq	#$11,d0
000080FE 6000 9DFA                  		bra.w	LoadPLC		; load boss patterns
00008102                            ; ===========================================================================
00008102                            
00008102                            locret_715C:
00008102 4E75                       		rts	
00008104                            ; ===========================================================================
00008104                            
00008104                            Resize_SLZ3end:
00008104 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000810A 4E75                       		rts
0000810C 4E75                       		rts
0000810E                            ; ===========================================================================
0000810E                            ; ---------------------------------------------------------------------------
0000810E                            ; Spring Yard Zone dynamic screen resizing
0000810E                            ; ---------------------------------------------------------------------------
0000810E                            
0000810E                            Resize_SYZ:				; XREF: Resize_Index
0000810E 7000                       		moveq	#0,d0
00008110 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008114 D040                       		add.w	d0,d0
00008116 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000811A 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000811E                            ; ===========================================================================
0000811E 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008120 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008122 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008124                            ; ===========================================================================
00008124                            
00008124                            Resize_SYZ1:
00008124 4E75                       		rts	
00008126                            ; ===========================================================================
00008126                            
00008126                            Resize_SYZ2:
00008126 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000812C 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008132 6500                       		bcs.s	locret_71A2
00008134 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000813A 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008140 6500                       		bcs.s	locret_71A2
00008142 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008148                            
00008148                            locret_71A2:
00008148 4E75                       		rts	
0000814A                            ; ===========================================================================
0000814A                            
0000814A                            Resize_SYZ3:
0000814A 7000                       		moveq	#0,d0
0000814C 1038 F742                  		move.b	($FFFFF742).w,d0
00008150 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008154 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008158                            ; ===========================================================================
00008158 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000815A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000815C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000815E                            ; ===========================================================================
0000815E                            
0000815E                            Resize_SYZ3main:
0000815E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008164 6500                       		bcs.s	locret_71CE
00008166 6100 0000                  		bsr.w	SingleObjLoad
0000816A 6600                       		bne.s	locret_71CE
0000816C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008170 5438 F742                  		addq.b	#2,($FFFFF742).w
00008174                            
00008174                            locret_71CE:
00008174 4E75                       		rts	
00008176                            ; ===========================================================================
00008176                            
00008176                            Resize_SYZ3boss:
00008176 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000817C 6500                       		bcs.s	locret_7200
0000817E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008184 6100 0000                  		bsr.w	SingleObjLoad
00008188 6600                       		bne.s	loc_71EC
0000818A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000818E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008192                            
00008192                            loc_71EC:
00008192 303C 008C                  		move.w	#$8C,d0
00008196 6100 9B78                  		bsr.w	PlaySound	; play boss music
0000819A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081A0 7011                       		moveq	#$11,d0
000081A2 6000 9D56                  		bra.w	LoadPLC		; load boss patterns
000081A6                            ; ===========================================================================
000081A6                            
000081A6                            locret_7200:
000081A6 4E75                       		rts	
000081A8                            ; ===========================================================================
000081A8                            
000081A8                            Resize_SYZ3end:
000081A8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081AE 4E75                       		rts	
000081B0                            ; ===========================================================================
000081B0                            ; ---------------------------------------------------------------------------
000081B0                            ; Scrap	Brain Zone dynamic screen resizing
000081B0                            ; ---------------------------------------------------------------------------
000081B0                            
000081B0                            Resize_SBZ:				; XREF: Resize_Index
000081B0 7000                       		moveq	#0,d0
000081B2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000081B6 D040                       		add.w	d0,d0
000081B8 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000081BC 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000081C0                            ; ===========================================================================
000081C0 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000081C2 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000081C4 0000                       		dc.w Resize_FZ-Resize_SBZx
000081C6                            ; ===========================================================================
000081C6                            
000081C6                            Resize_SBZ1:
000081C6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000081CC 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000081D2 6500                       		bcs.s	locret_7242
000081D4 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000081DA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000081E0 6500                       		bcs.s	locret_7242
000081E2 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000081E8                            
000081E8                            locret_7242:
000081E8 4E75                       		rts	
000081EA                            ; ===========================================================================
000081EA                            
000081EA                            Resize_SBZ2:
000081EA 7000                       		moveq	#0,d0
000081EC 1038 F742                  		move.b	($FFFFF742).w,d0
000081F0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000081F4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000081F8                            ; ===========================================================================
000081F8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000081FA 0000                       		dc.w Resize_SBZ2boss-off_7252
000081FC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000081FE 0000                       		dc.w Resize_SBZ2end-off_7252
00008200                            ; ===========================================================================
00008200                            
00008200                            Resize_SBZ2main:
00008200 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008206 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000820C 6500                       		bcs.s	locret_727A
0000820E 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008214 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000821A 6500                       		bcs.s	locret_727A
0000821C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008220                            
00008220                            locret_727A:
00008220 4E75                       		rts	
00008222                            ; ===========================================================================
00008222                            
00008222                            Resize_SBZ2boss:
00008222 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008228 6500                       		bcs.s	locret_7298
0000822A 6100 0000                  		bsr.w	SingleObjLoad
0000822E 6600                       		bne.s	locret_7298
00008230 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008234 5438 F742                  		addq.b	#2,($FFFFF742).w
00008238 701E                       		moveq	#$1E,d0
0000823A 6000 9CBE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000823E                            ; ===========================================================================
0000823E                            
0000823E                            locret_7298:
0000823E 4E75                       		rts	
00008240                            ; ===========================================================================
00008240                            
00008240                            Resize_SBZ2boss2:
00008240 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008246 6500                       		bcs.s	loc_72B6
00008248 6100 0000                  		bsr.w	SingleObjLoad
0000824C 6600                       		bne.s	loc_72B0
0000824E 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008252 5438 F742                  		addq.b	#2,($FFFFF742).w
00008256                            
00008256                            loc_72B0:
00008256 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000825C                            
0000825C                            loc_72B6:
0000825C 6000                       		bra.s	loc_72C2
0000825E                            ; ===========================================================================
0000825E                            
0000825E                            Resize_SBZ2end:
0000825E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008264 6500                       		bcs.s	loc_72C2
00008266 4E75                       		rts	
00008268                            ; ===========================================================================
00008268                            
00008268                            loc_72C2:
00008268 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000826E 4E75                       		rts	
00008270                            ; ===========================================================================
00008270                            
00008270                            Resize_FZ:
00008270 7000                       		moveq	#0,d0
00008272 1038 F742                  		move.b	($FFFFF742).w,d0
00008276 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000827A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000827E                            ; ===========================================================================
0000827E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008282 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008286 0000                       		dc.w Resize_FZend2-off_72D8
00008288                            ; ===========================================================================
00008288                            
00008288                            Resize_FZmain:
00008288 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000828E 6500                       		bcs.s	loc_72F4
00008290 5438 F742                  		addq.b	#2,($FFFFF742).w
00008294 701F                       		moveq	#$1F,d0
00008296 6100 9C62                  		bsr.w	LoadPLC		; load FZ boss patterns
0000829A                            
0000829A                            loc_72F4:
0000829A 60CC                       		bra.s	loc_72C2
0000829C                            ; ===========================================================================
0000829C                            
0000829C                            Resize_FZboss:
0000829C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000082A2 6500                       		bcs.s	loc_7312
000082A4 6100 0000                  		bsr.w	SingleObjLoad
000082A8 6600                       		bne.s	loc_7312
000082AA 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000082AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000082B2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082B8                            
000082B8                            loc_7312:
000082B8 60AE                       		bra.s	loc_72C2
000082BA                            ; ===========================================================================
000082BA                            
000082BA                            Resize_FZend:
000082BA 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000082C0 6500                       		bcs.s	loc_7320
000082C2 5438 F742                  		addq.b	#2,($FFFFF742).w
000082C6                            
000082C6                            loc_7320:
000082C6 60A0                       		bra.s	loc_72C2
000082C8                            ; ===========================================================================
000082C8                            
000082C8                            locret_7322:
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            
000082CA                            Resize_FZend2:
000082CA 609C                       		bra.s	loc_72C2
000082CC                            ; ===========================================================================
000082CC                            ; ---------------------------------------------------------------------------
000082CC                            ; Ending sequence dynamic screen resizing (empty)
000082CC                            ; ---------------------------------------------------------------------------
000082CC                            
000082CC                            Resize_Ending:				; XREF: Resize_Index
000082CC 4E75                       		rts	
000082CE                            ; ===========================================================================
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            ; Object 11 - GHZ bridge
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            
000082CE                            Obj11:					; XREF: Obj_Index
000082CE 7000                       		moveq	#0,d0
000082D0 1028 0024                  		move.b	$24(a0),d0
000082D4 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000082D8 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000082DC                            ; ===========================================================================
000082DC 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000082E0 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000082E4 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000082E8                            ; ===========================================================================
000082E8                            
000082E8                            Obj11_Main:				; XREF: Obj11_Index
000082E8 5428 0024                  		addq.b	#2,$24(a0)
000082EC 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000082F4 317C 438E 0002             		move.w	#$438E,2(a0)
000082FA 117C 0004 0001             		move.b	#4,1(a0)
00008300 117C 0003 0018             		move.b	#3,$18(a0)
00008306 117C 0080 0019             		move.b	#$80,$19(a0)
0000830C 3428 000C                  		move.w	$C(a0),d2
00008310 3628 0008                  		move.w	8(a0),d3
00008314 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008316 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000831A 7200                       		moveq	#0,d1
0000831C 1212                       		move.b	(a2),d1		; copy a2 to d1
0000831E 14FC 0000                  		move.b	#0,(a2)+
00008322 3001                       		move.w	d1,d0
00008324 E248                       		lsr.w	#1,d0
00008326 E948                       		lsl.w	#4,d0
00008328 9640                       		sub.w	d0,d3
0000832A 5501                       		subq.b	#2,d1
0000832C 6500                       		bcs.s	Obj11_Action
0000832E                            
0000832E                            Obj11_MakeBdg:
0000832E 6100 0000                  		bsr.w	SingleObjLoad
00008332 6600                       		bne.s	Obj11_Action
00008334 5228 0028                  		addq.b	#1,$28(a0)
00008338 B668 0008                  		cmp.w	8(a0),d3
0000833C 6600                       		bne.s	loc_73B8
0000833E 0643 0010                  		addi.w	#$10,d3
00008342 3142 000C                  		move.w	d2,$C(a0)
00008346 3142 003C                  		move.w	d2,$3C(a0)
0000834A 3A08                       		move.w	a0,d5
0000834C 0445 D000                  		subi.w	#-$3000,d5
00008350 EC4D                       		lsr.w	#6,d5
00008352 0245 007F                  		andi.w	#$7F,d5
00008356 14C5                       		move.b	d5,(a2)+
00008358 5228 0028                  		addq.b	#1,$28(a0)
0000835C                            
0000835C                            loc_73B8:				; XREF: ROM:00007398j
0000835C 3A09                       		move.w	a1,d5
0000835E 0445 D000                  		subi.w	#-$3000,d5
00008362 EC4D                       		lsr.w	#6,d5
00008364 0245 007F                  		andi.w	#$7F,d5
00008368 14C5                       		move.b	d5,(a2)+
0000836A 137C 000A 0024             		move.b	#$A,$24(a1)
00008370 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008372 3342 000C                  		move.w	d2,$C(a1)
00008376 3342 003C                  		move.w	d2,$3C(a1)
0000837A 3343 0008                  		move.w	d3,8(a1)
0000837E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008386 337C 438E 0002             		move.w	#$438E,2(a1)
0000838C 137C 0004 0001             		move.b	#4,1(a1)
00008392 137C 0003 0018             		move.b	#3,$18(a1)
00008398 137C 0008 0019             		move.b	#8,$19(a1)
0000839E 0643 0010                  		addi.w	#$10,d3
000083A2 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000083A6                            
000083A6                            Obj11_Action:				; XREF: Obj11_Index
000083A6 6100                       		bsr.s	Obj11_Solid
000083A8 4A28 003E                  		tst.b	$3E(a0)
000083AC 6700                       		beq.s	Obj11_Display
000083AE 5928 003E                  		subq.b	#4,$3E(a0)
000083B2 6100 0000                  		bsr.w	Obj11_Bend
000083B6                            
000083B6                            Obj11_Display:
000083B6 6100 0000                  		bsr.w	DisplaySprite
000083BA 6000 0000                  		bra.w	Obj11_ChkDel
000083BE                            
000083BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083BE                            
000083BE                            
000083BE                            Obj11_Solid:				; XREF: Obj11_Action
000083BE 7200                       		moveq	#0,d1
000083C0 1228 0028                  		move.b	$28(a0),d1
000083C4 E749                       		lsl.w	#3,d1
000083C6 3401                       		move.w	d1,d2
000083C8 5041                       		addq.w	#8,d1
000083CA D442                       		add.w	d2,d2
000083CC 43F8 D000                  		lea	($FFFFD000).w,a1
000083D0 4A69 0012                  		tst.w	$12(a1)
000083D4 6B00 0000                  		bmi.w	locret_751E
000083D8 3029 0008                  		move.w	8(a1),d0
000083DC 9068 0008                  		sub.w	8(a0),d0
000083E0 D041                       		add.w	d1,d0
000083E2 6B00 0000                  		bmi.w	locret_751E
000083E6 B042                       		cmp.w	d2,d0
000083E8 6400 0000                  		bcc.w	locret_751E
000083EC 6000                       		bra.s	Platform2
000083EE                            ; End of function Obj11_Solid
000083EE                            
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            ; Platform subroutine
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            
000083EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083EE                            
000083EE                            
000083EE                            PlatformObject:
000083EE 43F8 D000                  		lea	($FFFFD000).w,a1
000083F2 4A69 0012                  		tst.w	$12(a1)
000083F6 6B00 0000                  		bmi.w	locret_751E
000083FA 3029 0008                  		move.w	8(a1),d0
000083FE 9068 0008                  		sub.w	8(a0),d0
00008402 D041                       		add.w	d1,d0
00008404 6B00 0000                  		bmi.w	locret_751E
00008408 D241                       		add.w	d1,d1
0000840A B041                       		cmp.w	d1,d0
0000840C 6400 0000                  		bcc.w	locret_751E
00008410                            
00008410                            Platform2:
00008410 3028 000C                  		move.w	$C(a0),d0
00008414 5140                       		subq.w	#8,d0
00008416                            
00008416                            Platform3:
00008416 3429 000C                  		move.w	$C(a1),d2
0000841A 1229 0016                  		move.b	$16(a1),d1
0000841E 4881                       		ext.w	d1
00008420 D242                       		add.w	d2,d1
00008422 5841                       		addq.w	#4,d1
00008424 9041                       		sub.w	d1,d0
00008426 6200 0000                  		bhi.w	locret_751E
0000842A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000842E 6500 0000                  		bcs.w	locret_751E
00008432 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008436 6B00 0000                  		bmi.w	locret_751E
0000843A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008440 6400 0000                  		bcc.w	locret_751E
00008444 D440                       		add.w	d0,d2
00008446 5642                       		addq.w	#3,d2
00008448 3342 000C                  		move.w	d2,$C(a1)
0000844C 5428 0024                  		addq.b	#2,$24(a0)
00008450                            
00008450                            loc_74AE:
00008450 0829 0003 0022             		btst	#3,$22(a1)
00008456 6700                       		beq.s	loc_74DC
00008458 7000                       		moveq	#0,d0
0000845A 1029 003D                  		move.b	$3D(a1),d0
0000845E ED48                       		lsl.w	#6,d0
00008460 0680 00FF D000             		addi.l	#$FFD000,d0
00008466 2440                       		movea.l	d0,a2
00008468 08AA 0003 0022             		bclr	#3,$22(a2)
0000846E 422A 0025                  		clr.b	$25(a2)
00008472 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008478 6600                       		bne.s	loc_74DC
0000847A 552A 0024                  		subq.b	#2,$24(a2)
0000847E                            
0000847E                            loc_74DC:
0000847E 3008                       		move.w	a0,d0
00008480 0440 D000                  		subi.w	#-$3000,d0
00008484 EC48                       		lsr.w	#6,d0
00008486 0240 007F                  		andi.w	#$7F,d0
0000848A 1340 003D                  		move.b	d0,$3D(a1)
0000848E 137C 0000 0026             		move.b	#0,$26(a1)
00008494 337C 0000 0012             		move.w	#0,$12(a1)
0000849A 3369 0010 0014             		move.w	$10(a1),$14(a1)
000084A0 0829 0001 0022             		btst	#1,$22(a1)
000084A6 6700                       		beq.s	loc_7512
000084A8 2F08                       		move.l	a0,-(sp)
000084AA 2049                       		movea.l	a1,a0
000084AC 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000084B2 205F                       		movea.l	(sp)+,a0
000084B4                            
000084B4                            loc_7512:
000084B4 08E9 0003 0022             		bset	#3,$22(a1)
000084BA 08E8 0003 0022             		bset	#3,$22(a0)
000084C0                            
000084C0                            locret_751E:
000084C0 4E75                       		rts	
000084C2                            ; End of function PlatformObject
000084C2                            
000084C2                            ; ---------------------------------------------------------------------------
000084C2                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000084C2                            ; ---------------------------------------------------------------------------
000084C2                            
000084C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084C2                            
000084C2                            
000084C2                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000084C2 43F8 D000                  		lea	($FFFFD000).w,a1
000084C6 4A69 0012                  		tst.w	$12(a1)
000084CA 6B00 FFF4                  		bmi.w	locret_751E
000084CE 3029 0008                  		move.w	8(a1),d0
000084D2 9068 0008                  		sub.w	8(a0),d0
000084D6 D041                       		add.w	d1,d0
000084D8 6BE6                       		bmi.s	locret_751E
000084DA D241                       		add.w	d1,d1
000084DC B041                       		cmp.w	d1,d0
000084DE 64E0                       		bcc.s	locret_751E
000084E0 0828 0000 0001             		btst	#0,1(a0)
000084E6 6700                       		beq.s	loc_754A
000084E8 4640                       		not.w	d0
000084EA D041                       		add.w	d1,d0
000084EC                            
000084EC                            loc_754A:
000084EC E248                       		lsr.w	#1,d0
000084EE 7600                       		moveq	#0,d3
000084F0 1632 0000                  		move.b	(a2,d0.w),d3
000084F4 3028 000C                  		move.w	$C(a0),d0
000084F8 9043                       		sub.w	d3,d0
000084FA 6000 FF1A                  		bra.w	Platform3
000084FE                            ; End of function SlopeObject
000084FE                            
000084FE                            
000084FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084FE                            
000084FE                            
000084FE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000084FE 43F8 D000                  		lea	($FFFFD000).w,a1
00008502 4A69 0012                  		tst.w	$12(a1)
00008506 6B00 FFB8                  		bmi.w	locret_751E
0000850A 3029 0008                  		move.w	8(a1),d0
0000850E 9068 0008                  		sub.w	8(a0),d0
00008512 D041                       		add.w	d1,d0
00008514 6B00 FFAA                  		bmi.w	locret_751E
00008518 D241                       		add.w	d1,d1
0000851A B041                       		cmp.w	d1,d0
0000851C 6400 FFA2                  		bcc.w	locret_751E
00008520 3028 000C                  		move.w	$C(a0),d0
00008524 9043                       		sub.w	d3,d0
00008526 6000 FEEE                  		bra.w	Platform3
0000852A                            ; End of function Obj15_Solid
0000852A                            
0000852A                            ; ===========================================================================
0000852A                            
0000852A                            Obj11_Action2:				; XREF: Obj11_Index
0000852A 6100                       		bsr.s	Obj11_WalkOff
0000852C 6100 0000                  		bsr.w	DisplaySprite
00008530 6000 0000                  		bra.w	Obj11_ChkDel
00008534                            
00008534                            ; ---------------------------------------------------------------------------
00008534                            ; Subroutine allowing Sonic to walk off a bridge
00008534                            ; ---------------------------------------------------------------------------
00008534                            
00008534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008534                            
00008534                            
00008534                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008534 7200                       		moveq	#0,d1
00008536 1228 0028                  		move.b	$28(a0),d1
0000853A E749                       		lsl.w	#3,d1
0000853C 3401                       		move.w	d1,d2
0000853E 5041                       		addq.w	#8,d1
00008540 6100                       		bsr.s	ExitPlatform2
00008542 6400                       		bcc.s	locret_75BE
00008544 E848                       		lsr.w	#4,d0
00008546 1140 003F                  		move.b	d0,$3F(a0)
0000854A 1028 003E                  		move.b	$3E(a0),d0
0000854E 0C00 0040                  		cmpi.b	#$40,d0
00008552 6700                       		beq.s	loc_75B6
00008554 5828 003E                  		addq.b	#4,$3E(a0)
00008558                            
00008558                            loc_75B6:
00008558 6100 0000                  		bsr.w	Obj11_Bend
0000855C 6100 0000                  		bsr.w	Obj11_MoveSonic
00008560                            
00008560                            locret_75BE:
00008560 4E75                       		rts	
00008562                            ; End of function Obj11_WalkOff
00008562                            
00008562                            ; ---------------------------------------------------------------------------
00008562                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008562                            ; ---------------------------------------------------------------------------
00008562                            
00008562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008562                            
00008562                            
00008562                            ExitPlatform:
00008562 3401                       		move.w	d1,d2
00008564                            
00008564                            ExitPlatform2:
00008564 D442                       		add.w	d2,d2
00008566 43F8 D000                  		lea	($FFFFD000).w,a1
0000856A 0829 0001 0022             		btst	#1,$22(a1)
00008570 6600                       		bne.s	loc_75E0
00008572 3029 0008                  		move.w	8(a1),d0
00008576 9068 0008                  		sub.w	8(a0),d0
0000857A D041                       		add.w	d1,d0
0000857C 6B00                       		bmi.s	loc_75E0
0000857E B042                       		cmp.w	d2,d0
00008580 6500                       		bcs.s	locret_75F2
00008582                            
00008582                            loc_75E0:
00008582 08A9 0003 0022             		bclr	#3,$22(a1)
00008588 117C 0002 0024             		move.b	#2,$24(a0)
0000858E 08A8 0003 0022             		bclr	#3,$22(a0)
00008594                            
00008594                            locret_75F2:
00008594 4E75                       		rts	
00008596                            ; End of function ExitPlatform
00008596                            
00008596                            
00008596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008596                            
00008596                            
00008596                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008596 7000                       		moveq	#0,d0
00008598 1028 003F                  		move.b	$3F(a0),d0
0000859C 1030 0029                  		move.b	$29(a0,d0.w),d0
000085A0 ED48                       		lsl.w	#6,d0
000085A2 0680 00FF D000             		addi.l	#$FFD000,d0
000085A8 2440                       		movea.l	d0,a2
000085AA 43F8 D000                  		lea	($FFFFD000).w,a1
000085AE 302A 000C                  		move.w	$C(a2),d0
000085B2 5140                       		subq.w	#8,d0
000085B4 7200                       		moveq	#0,d1
000085B6 1229 0016                  		move.b	$16(a1),d1
000085BA 9041                       		sub.w	d1,d0
000085BC 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000085C0 4E75                       		rts	
000085C2                            ; End of function Obj11_MoveSonic
000085C2                            
000085C2                            
000085C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085C2                            
000085C2                            
000085C2                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000085C2 1028 003E                  		move.b	$3E(a0),d0
000085C6 6100 AEF0                  		bsr.w	CalcSine
000085CA 3800                       		move.w	d0,d4
000085CC 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000085D2 7000                       		moveq	#0,d0
000085D4 1028 0028                  		move.b	$28(a0),d0
000085D8 E948                       		lsl.w	#4,d0
000085DA 7600                       		moveq	#0,d3
000085DC 1628 003F                  		move.b	$3F(a0),d3
000085E0 3403                       		move.w	d3,d2
000085E2 D640                       		add.w	d0,d3
000085E4 7A00                       		moveq	#0,d5
000085E6 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000085EC 1A35 3000                  		move.b	(a5,d3.w),d5
000085F0 0243 000F                  		andi.w	#$F,d3
000085F4 E94B                       		lsl.w	#4,d3
000085F6 47F4 3000                  		lea	(a4,d3.w),a3
000085FA 45E8 0029                  		lea	$29(a0),a2
000085FE                            
000085FE                            loc_765C:
000085FE 7000                       		moveq	#0,d0
00008600 101A                       		move.b	(a2)+,d0
00008602 ED48                       		lsl.w	#6,d0
00008604 0680 00FF D000             		addi.l	#$FFD000,d0
0000860A 2240                       		movea.l	d0,a1
0000860C 7000                       		moveq	#0,d0
0000860E 101B                       		move.b	(a3)+,d0
00008610 5240                       		addq.w	#1,d0
00008612 C0C5                       		mulu.w	d5,d0
00008614 C0C4                       		mulu.w	d4,d0
00008616 4840                       		swap	d0
00008618 D069 003C                  		add.w	$3C(a1),d0
0000861C 3340 000C                  		move.w	d0,$C(a1)
00008620 51CA FFDC                  		dbf	d2,loc_765C
00008624 7000                       		moveq	#0,d0
00008626 1028 0028                  		move.b	$28(a0),d0
0000862A 7600                       		moveq	#0,d3
0000862C 1628 003F                  		move.b	$3F(a0),d3
00008630 5203                       		addq.b	#1,d3
00008632 9600                       		sub.b	d0,d3
00008634 4403                       		neg.b	d3
00008636 6B00                       		bmi.s	locret_76CA
00008638 3403                       		move.w	d3,d2
0000863A E94B                       		lsl.w	#4,d3
0000863C 47F4 3000                  		lea	(a4,d3.w),a3
00008640 D6C2                       		adda.w	d2,a3
00008642 5342                       		subq.w	#1,d2
00008644 6500                       		bcs.s	locret_76CA
00008646                            
00008646                            loc_76A4:
00008646 7000                       		moveq	#0,d0
00008648 101A                       		move.b	(a2)+,d0
0000864A ED48                       		lsl.w	#6,d0
0000864C 0680 00FF D000             		addi.l	#$FFD000,d0
00008652 2240                       		movea.l	d0,a1
00008654 7000                       		moveq	#0,d0
00008656 1023                       		move.b	-(a3),d0
00008658 5240                       		addq.w	#1,d0
0000865A C0C5                       		mulu.w	d5,d0
0000865C C0C4                       		mulu.w	d4,d0
0000865E 4840                       		swap	d0
00008660 D069 003C                  		add.w	$3C(a1),d0
00008664 3340 000C                  		move.w	d0,$C(a1)
00008668 51CA FFDC                  		dbf	d2,loc_76A4
0000866C                            
0000866C                            locret_76CA:
0000866C 4E75                       		rts	
0000866E                            ; End of function Obj11_Bend
0000866E                            
0000866E                            ; ===========================================================================
0000866E                            ; ---------------------------------------------------------------------------
0000866E                            ; GHZ bridge-bending data
0000866E                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000866E                            ; ---------------------------------------------------------------------------
0000866E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000877E                            		even
0000877E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000887E                            		even
0000887E                            
0000887E                            ; ===========================================================================
0000887E                            
0000887E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000887E 3028 0008                  		move.w	8(a0),d0
00008882 0240 FF80                  		andi.w	#$FF80,d0
00008886 3238 F700                  		move.w	($FFFFF700).w,d1
0000888A 0441 0080                  		subi.w	#$80,d1
0000888E 0241 FF80                  		andi.w	#$FF80,d1
00008892 9041                       		sub.w	d1,d0
00008894 0C40 0280                  		cmpi.w	#$280,d0
00008898 6200 0000                  		bhi.w	Obj11_DelAll
0000889C 4E75                       		rts	
0000889E                            ; ===========================================================================
0000889E                            
0000889E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000889E 7400                       		moveq	#0,d2
000088A0 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000088A4 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000088A6 5302                       		subq.b	#1,d2		; subtract 1
000088A8 6500                       		bcs.s	Obj11_Delete
000088AA                            
000088AA                            Obj11_DelLoop:
000088AA 7000                       		moveq	#0,d0
000088AC 101A                       		move.b	(a2)+,d0
000088AE ED48                       		lsl.w	#6,d0
000088B0 0680 00FF D000             		addi.l	#$FFD000,d0
000088B6 2240                       		movea.l	d0,a1
000088B8 B048                       		cmp.w	a0,d0
000088BA 6700                       		beq.s	loc_791E
000088BC 6100 0000                  		bsr.w	DeleteObject2
000088C0                            
000088C0                            loc_791E:
000088C0 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000088C4                            
000088C4                            Obj11_Delete:
000088C4 6100 0000                  		bsr.w	DeleteObject
000088C8 4E75                       		rts	
000088CA                            ; ===========================================================================
000088CA                            
000088CA                            Obj11_Delete2:				; XREF: Obj11_Index
000088CA 6100 0000                  		bsr.w	DeleteObject
000088CE 4E75                       		rts	
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            Obj11_Display2:				; XREF: Obj11_Index
000088D0 6100 0000                  		bsr.w	DisplaySprite
000088D4 4E75                       		rts	
000088D6                            ; ===========================================================================
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            ; Sprite mappings - GHZ	bridge
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            Map_obj11:
000088D6                            	include "_maps\obj11.asm"
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            ; Sprite mappings - GHZ	bridge
000088D6                            ; ---------------------------------------------------------------------------
000088D6 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000088DA 0000                       		dc.w byte_794B-Map_obj11
000088DC 01                         byte_793A:	dc.b 1
000088DD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000088E2 02                         byte_7940:	dc.b 2
000088E3 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000088E8 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000088ED 01                         byte_794B:	dc.b 1
000088EE FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000088F4 00                         		even
000088F4 00                         		even
000088F4                            
000088F4                            ; ===========================================================================
000088F4                            ; ---------------------------------------------------------------------------
000088F4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000088F4                            ;	    - spiked ball on a chain (SBZ)
000088F4                            ; ---------------------------------------------------------------------------
000088F4                            
000088F4                            Obj15:					; XREF: Obj_Index
000088F4 7000                       		moveq	#0,d0
000088F6 1028 0024                  		move.b	$24(a0),d0
000088FA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000088FE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008902                            ; ===========================================================================
00008902 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008906 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000890A 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000890E 0000                       		dc.w Obj15_Action-Obj15_Index
00008910                            ; ===========================================================================
00008910                            
00008910                            Obj15_Main:				; XREF: Obj15_Index
00008910 5428 0024                  		addq.b	#2,$24(a0)
00008914 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000891C 317C 4380 0002             		move.w	#$4380,2(a0)
00008922 117C 0004 0001             		move.b	#4,1(a0)
00008928 117C 0003 0018             		move.b	#3,$18(a0)
0000892E 117C 0018 0019             		move.b	#$18,$19(a0)
00008934 117C 0008 0016             		move.b	#8,$16(a0)
0000893A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008940 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008946 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000894C 6600                       		bne.s	Obj15_NotSLZ
0000894E 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008956 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000895C 117C 0020 0019             		move.b	#$20,$19(a0)
00008962 117C 0010 0016             		move.b	#$10,$16(a0)
00008968 117C 0099 0020             		move.b	#$99,$20(a0)
0000896E                            
0000896E                            Obj15_NotSLZ:
0000896E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008974 6600                       		bne.s	Obj15_SetLength
00008976 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000897E 317C 0391 0002             		move.w	#$391,2(a0)
00008984 117C 0018 0019             		move.b	#$18,$19(a0)
0000898A 117C 0018 0016             		move.b	#$18,$16(a0)
00008990 117C 0086 0020             		move.b	#$86,$20(a0)
00008996 117C 000C 0024             		move.b	#$C,$24(a0)
0000899C                            
0000899C                            Obj15_SetLength:
0000899C 1810                       		move.b	0(a0),d4
0000899E 7200                       		moveq	#0,d1
000089A0 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000089A4 1212                       		move.b	(a2),d1		; move a2 to d1
000089A6 3F01                       		move.w	d1,-(sp)
000089A8 0241 000F                  		andi.w	#$F,d1
000089AC 14FC 0000                  		move.b	#0,(a2)+
000089B0 3601                       		move.w	d1,d3
000089B2 E94B                       		lsl.w	#4,d3
000089B4 5003                       		addq.b	#8,d3
000089B6 1143 003C                  		move.b	d3,$3C(a0)
000089BA 5103                       		subq.b	#8,d3
000089BC 4A28 001A                  		tst.b	$1A(a0)
000089C0 6700                       		beq.s	Obj15_MakeChain
000089C2 5003                       		addq.b	#8,d3
000089C4 5341                       		subq.w	#1,d1
000089C6                            
000089C6                            Obj15_MakeChain:
000089C6 6100 0000                  		bsr.w	SingleObjLoad
000089CA 6600                       		bne.s	loc_7A92
000089CC 5228 0028                  		addq.b	#1,$28(a0)
000089D0 3A09                       		move.w	a1,d5
000089D2 0445 D000                  		subi.w	#-$3000,d5
000089D6 EC4D                       		lsr.w	#6,d5
000089D8 0245 007F                  		andi.w	#$7F,d5
000089DC 14C5                       		move.b	d5,(a2)+
000089DE 137C 000A 0024             		move.b	#$A,$24(a1)
000089E4 1284                       		move.b	d4,0(a1)	; load swinging	object
000089E6 2368 0004 0004             		move.l	4(a0),4(a1)
000089EC 3368 0002 0002             		move.w	2(a0),2(a1)
000089F2 08A9 0006 0002             		bclr	#6,2(a1)
000089F8 137C 0004 0001             		move.b	#4,1(a1)
000089FE 137C 0004 0018             		move.b	#4,$18(a1)
00008A04 137C 0008 0019             		move.b	#8,$19(a1)
00008A0A 137C 0001 001A             		move.b	#1,$1A(a1)
00008A10 1343 003C                  		move.b	d3,$3C(a1)
00008A14 0403 0010                  		subi.b	#$10,d3
00008A18 6400                       		bcc.s	loc_7A8E
00008A1A 137C 0002 001A             		move.b	#2,$1A(a1)
00008A20 137C 0003 0018             		move.b	#3,$18(a1)
00008A26 08E9 0006 0002             		bset	#6,2(a1)
00008A2C                            
00008A2C                            loc_7A8E:
00008A2C 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008A30                            
00008A30                            loc_7A92:
00008A30 3A08                       		move.w	a0,d5
00008A32 0445 D000                  		subi.w	#-$3000,d5
00008A36 EC4D                       		lsr.w	#6,d5
00008A38 0245 007F                  		andi.w	#$7F,d5
00008A3C 14C5                       		move.b	d5,(a2)+
00008A3E 317C 4080 0026             		move.w	#$4080,$26(a0)
00008A44 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008A4A 321F                       		move.w	(sp)+,d1
00008A4C 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008A50 6700                       		beq.s	loc_7AD4	; if not, branch
00008A52 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008A5A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008A60 117C 0001 001A             		move.b	#1,$1A(a0)
00008A66 117C 0002 0018             		move.b	#2,$18(a0)
00008A6C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008A72                            
00008A72                            loc_7AD4:
00008A72 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008A78 6700                       		beq.s	Obj15_Action	; if yes, branch
00008A7A                            
00008A7A                            Obj15_SetSolid:				; XREF: Obj15_Index
00008A7A 7200                       		moveq	#0,d1
00008A7C 1228 0019                  		move.b	$19(a0),d1
00008A80 7600                       		moveq	#0,d3
00008A82 1628 0016                  		move.b	$16(a0),d3
00008A86 6100 FA76                  		bsr.w	Obj15_Solid
00008A8A                            
00008A8A                            Obj15_Action:				; XREF: Obj15_Index
00008A8A 6100 0000                  		bsr.w	Obj15_Move
00008A8E 6100 0000                  		bsr.w	DisplaySprite
00008A92 6000 0000                  		bra.w	Obj15_ChkDel
00008A96                            ; ===========================================================================
00008A96                            
00008A96                            Obj15_Action2:				; XREF: Obj15_Index
00008A96 7200                       		moveq	#0,d1
00008A98 1228 0019                  		move.b	$19(a0),d1
00008A9C 6100 FAC4                  		bsr.w	ExitPlatform
00008AA0 3F28 0008                  		move.w	8(a0),-(sp)
00008AA4 6100 0000                  		bsr.w	Obj15_Move
00008AA8 341F                       		move.w	(sp)+,d2
00008AAA 7600                       		moveq	#0,d3
00008AAC 1628 0016                  		move.b	$16(a0),d3
00008AB0 5203                       		addq.b	#1,d3
00008AB2 6100 0000                  		bsr.w	MvSonicOnPtfm
00008AB6 6100 0000                  		bsr.w	DisplaySprite
00008ABA 6000 0000                  		bra.w	Obj15_ChkDel
00008ABE                            
00008ABE 4E75                       		rts
00008AC0                            
00008AC0                            ; ---------------------------------------------------------------------------
00008AC0                            ; Subroutine to	change Sonic's position with a platform
00008AC0                            ; ---------------------------------------------------------------------------
00008AC0                            
00008AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AC0                            
00008AC0                            
00008AC0                            MvSonicOnPtfm:
00008AC0 43F8 D000                  		lea	($FFFFD000).w,a1
00008AC4 3028 000C                  		move.w	$C(a0),d0
00008AC8 9043                       		sub.w	d3,d0
00008ACA 6000                       		bra.s	MvSonic2
00008ACC                            ; End of function MvSonicOnPtfm
00008ACC                            
00008ACC                            ; ---------------------------------------------------------------------------
00008ACC                            ; Subroutine to	change Sonic's position with a platform
00008ACC                            ; ---------------------------------------------------------------------------
00008ACC                            
00008ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008ACC                            
00008ACC                            
00008ACC                            MvSonicOnPtfm2:
00008ACC 43F8 D000                  		lea	($FFFFD000).w,a1
00008AD0 3028 000C                  		move.w	$C(a0),d0
00008AD4 0440 0009                  		subi.w	#9,d0
00008AD8                            
00008AD8                            MvSonic2:
00008AD8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008ADC 6B00                       		bmi.s	locret_7B62
00008ADE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008AE4 6400                       		bcc.s	locret_7B62
00008AE6 4A78 FE08                  		tst.w	($FFFFFE08).w
00008AEA 6600                       		bne.s	locret_7B62
00008AEC 7200                       		moveq	#0,d1
00008AEE 1229 0016                  		move.b	$16(a1),d1
00008AF2 9041                       		sub.w	d1,d0
00008AF4 3340 000C                  		move.w	d0,$C(a1)
00008AF8 9468 0008                  		sub.w	8(a0),d2
00008AFC 9569 0008                  		sub.w	d2,8(a1)
00008B00                            
00008B00                            locret_7B62:
00008B00 4E75                       		rts	
00008B02                            ; End of function MvSonicOnPtfm2
00008B02                            
00008B02                            
00008B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B02                            
00008B02                            
00008B02                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008B02 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008B06 323C 0080                  		move.w	#$80,d1
00008B0A 0828 0000 0022             		btst	#0,$22(a0)
00008B10 6700                       		beq.s	loc_7B78
00008B12 4440                       		neg.w	d0
00008B14 D041                       		add.w	d1,d0
00008B16                            
00008B16                            loc_7B78:
00008B16 6000                       		bra.s	Obj15_Move2
00008B18                            ; End of function Obj15_Move
00008B18                            
00008B18                            
00008B18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B18                            
00008B18                            
00008B18                            Obj48_Move:				; XREF: Obj48_Display2
00008B18 4A28 003D                  		tst.b	$3D(a0)
00008B1C 6600                       		bne.s	loc_7B9C
00008B1E 3028 003E                  		move.w	$3E(a0),d0
00008B22 5040                       		addq.w	#8,d0
00008B24 3140 003E                  		move.w	d0,$3E(a0)
00008B28 D168 0026                  		add.w	d0,$26(a0)
00008B2C 0C40 0200                  		cmpi.w	#$200,d0
00008B30 6600                       		bne.s	loc_7BB6
00008B32 117C 0001 003D             		move.b	#1,$3D(a0)
00008B38 6000                       		bra.s	loc_7BB6
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            loc_7B9C:
00008B3A 3028 003E                  		move.w	$3E(a0),d0
00008B3E 5140                       		subq.w	#8,d0
00008B40 3140 003E                  		move.w	d0,$3E(a0)
00008B44 D168 0026                  		add.w	d0,$26(a0)
00008B48 0C40 FE00                  		cmpi.w	#-$200,d0
00008B4C 6600                       		bne.s	loc_7BB6
00008B4E 117C 0000 003D             		move.b	#0,$3D(a0)
00008B54                            
00008B54                            loc_7BB6:
00008B54 1028 0026                  		move.b	$26(a0),d0
00008B58                            ; End of function Obj48_Move
00008B58                            
00008B58                            
00008B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B58                            
00008B58                            
00008B58                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008B58 6100 A95E                  		bsr.w	CalcSine
00008B5C 3428 0038                  		move.w	$38(a0),d2
00008B60 3628 003A                  		move.w	$3A(a0),d3
00008B64 45E8 0028                  		lea	$28(a0),a2
00008B68 7C00                       		moveq	#0,d6
00008B6A 1C1A                       		move.b	(a2)+,d6
00008B6C                            
00008B6C                            loc_7BCE:
00008B6C 7800                       		moveq	#0,d4
00008B6E 181A                       		move.b	(a2)+,d4
00008B70 ED4C                       		lsl.w	#6,d4
00008B72 0684 00FF D000             		addi.l	#$FFD000,d4
00008B78 2244                       		movea.l	d4,a1
00008B7A 7800                       		moveq	#0,d4
00008B7C 1829 003C                  		move.b	$3C(a1),d4
00008B80 2A04                       		move.l	d4,d5
00008B82 C9C0                       		muls.w	d0,d4
00008B84 E084                       		asr.l	#8,d4
00008B86 CBC1                       		muls.w	d1,d5
00008B88 E085                       		asr.l	#8,d5
00008B8A D842                       		add.w	d2,d4
00008B8C DA43                       		add.w	d3,d5
00008B8E 3344 000C                  		move.w	d4,$C(a1)
00008B92 3345 0008                  		move.w	d5,8(a1)
00008B96 51CE FFD4                  		dbf	d6,loc_7BCE
00008B9A 4E75                       		rts	
00008B9C                            ; End of function Obj15_Move2
00008B9C                            
00008B9C                            ; ===========================================================================
00008B9C                            
00008B9C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008B9C 3028 003A                  		move.w	$3A(a0),d0
00008BA0 0240 FF80                  		andi.w	#$FF80,d0
00008BA4 3238 F700                  		move.w	($FFFFF700).w,d1
00008BA8 0441 0080                  		subi.w	#$80,d1
00008BAC 0241 FF80                  		andi.w	#$FF80,d1
00008BB0 9041                       		sub.w	d1,d0
00008BB2 0C40 0280                  		cmpi.w	#$280,d0
00008BB6 6200 0000                  		bhi.w	Obj15_DelAll
00008BBA 4E75                       		rts	
00008BBC                            ; ===========================================================================
00008BBC                            
00008BBC                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008BBC 7400                       		moveq	#0,d2
00008BBE 45E8 0028                  		lea	$28(a0),a2
00008BC2 141A                       		move.b	(a2)+,d2
00008BC4                            
00008BC4                            Obj15_DelLoop:
00008BC4 7000                       		moveq	#0,d0
00008BC6 101A                       		move.b	(a2)+,d0
00008BC8 ED48                       		lsl.w	#6,d0
00008BCA 0680 00FF D000             		addi.l	#$FFD000,d0
00008BD0 2240                       		movea.l	d0,a1
00008BD2 6100 0000                  		bsr.w	DeleteObject2
00008BD6 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008BDA 4E75                       		rts	
00008BDC                            ; ===========================================================================
00008BDC                            
00008BDC                            Obj15_Delete:				; XREF: Obj15_Index
00008BDC 6100 0000                  		bsr.w	DeleteObject
00008BE0 4E75                       		rts	
00008BE2                            ; ===========================================================================
00008BE2                            
00008BE2                            Obj15_Display:				; XREF: Obj15_Index
00008BE2 6000 0000                  		bra.w	DisplaySprite
00008BE6                            ; ===========================================================================
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            Map_obj15:
00008BE6                            	include "_maps\obj15ghz.asm"
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6 0000                       		dc.w byte_7C4E-Map_obj15
00008BE8 0000                       		dc.w byte_7C59-Map_obj15
00008BEA 0000                       		dc.w byte_7C5F-Map_obj15
00008BEC 02                         byte_7C4E:	dc.b 2
00008BED F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008BF2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008BF7 01                         byte_7C59:	dc.b 1
00008BF8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008BFD 01                         byte_7C5F:	dc.b 1
00008BFE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008C04 00                         		even
00008C04 00                         		even
00008C04                            
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            ; Sprite mappings - SLZ	swinging platforms
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            Map_obj15a:
00008C04                            	include "_maps\obj15slz.asm"
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            ; Sprite mappings - SLZ	swinging platforms
00008C04                            ; ---------------------------------------------------------------------------
00008C04 0000                       		dc.w byte_7C6C-Map_obj15a
00008C06 0000                       		dc.w byte_7C95-Map_obj15a
00008C08 0000                       		dc.w byte_7C9B-Map_obj15a
00008C0A 08                         byte_7C6C:	dc.b 8
00008C0B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008C10 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008C15 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008C1A F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008C1F 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008C24 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008C29 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008C2E 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008C33 01                         byte_7C95:	dc.b 1
00008C34 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008C39 01                         byte_7C9B:	dc.b 1
00008C3A F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008C40 00                         		even
00008C40 00                         		even
00008C40                            
00008C40                            ; ===========================================================================
00008C40                            ; ---------------------------------------------------------------------------
00008C40                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008C40                            ; ---------------------------------------------------------------------------
00008C40                            
00008C40                            Obj17:					; XREF: Obj_Index
00008C40 7000                       		moveq	#0,d0
00008C42 1028 0024                  		move.b	$24(a0),d0
00008C46 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008C4A 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008C4E                            ; ===========================================================================
00008C4E 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008C50 0000                       		dc.w Obj17_Action-Obj17_Index
00008C52 0000                       		dc.w Obj17_Action-Obj17_Index
00008C54 0000                       		dc.w Obj17_Delete-Obj17_Index
00008C56 0000                       		dc.w Obj17_Display-Obj17_Index
00008C58                            ; ===========================================================================
00008C58                            
00008C58                            Obj17_Main:				; XREF: Obj17_Index
00008C58 5428 0024                  		addq.b	#2,$24(a0)
00008C5C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008C64 317C 4398 0002             		move.w	#$4398,2(a0)
00008C6A 117C 0007 0022             		move.b	#7,$22(a0)
00008C70 117C 0004 0001             		move.b	#4,1(a0)
00008C76 117C 0003 0018             		move.b	#3,$18(a0)
00008C7C 117C 0008 0019             		move.b	#8,$19(a0)
00008C82 3428 000C                  		move.w	$C(a0),d2
00008C86 3628 0008                  		move.w	8(a0),d3
00008C8A 1810                       		move.b	0(a0),d4
00008C8C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008C90 7200                       		moveq	#0,d1
00008C92 1212                       		move.b	(a2),d1		; move a2 to d1
00008C94 14FC 0000                  		move.b	#0,(a2)+
00008C98 3001                       		move.w	d1,d0
00008C9A E248                       		lsr.w	#1,d0
00008C9C E948                       		lsl.w	#4,d0
00008C9E 9640                       		sub.w	d0,d3
00008CA0 5501                       		subq.b	#2,d1
00008CA2 6500                       		bcs.s	Obj17_Action
00008CA4 7C00                       		moveq	#0,d6
00008CA6                            
00008CA6                            Obj17_MakeHelix:
00008CA6 6100 0000                  		bsr.w	SingleObjLoad
00008CAA 6600                       		bne.s	Obj17_Action
00008CAC 5228 0028                  		addq.b	#1,$28(a0)
00008CB0 3A09                       		move.w	a1,d5
00008CB2 0445 D000                  		subi.w	#$D000,d5
00008CB6 EC4D                       		lsr.w	#6,d5
00008CB8 0245 007F                  		andi.w	#$7F,d5
00008CBC 14C5                       		move.b	d5,(a2)+
00008CBE 137C 0008 0024             		move.b	#8,$24(a1)
00008CC4 1284                       		move.b	d4,0(a1)
00008CC6 3342 000C                  		move.w	d2,$C(a1)
00008CCA 3343 0008                  		move.w	d3,8(a1)
00008CCE 2368 0004 0004             		move.l	4(a0),4(a1)
00008CD4 337C 4398 0002             		move.w	#$4398,2(a1)
00008CDA 137C 0004 0001             		move.b	#4,1(a1)
00008CE0 137C 0003 0018             		move.b	#3,$18(a1)
00008CE6 137C 0008 0019             		move.b	#8,$19(a1)
00008CEC 1346 003E                  		move.b	d6,$3E(a1)
00008CF0 5206                       		addq.b	#1,d6
00008CF2 0206 0007                  		andi.b	#7,d6
00008CF6 0643 0010                  		addi.w	#$10,d3
00008CFA B668 0008                  		cmp.w	8(a0),d3
00008CFE 6600                       		bne.s	loc_7D78
00008D00 1146 003E                  		move.b	d6,$3E(a0)
00008D04 5206                       		addq.b	#1,d6
00008D06 0206 0007                  		andi.b	#7,d6
00008D0A 0643 0010                  		addi.w	#$10,d3
00008D0E 5228 0028                  		addq.b	#1,$28(a0)
00008D12                            
00008D12                            loc_7D78:
00008D12 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008D16                            
00008D16                            Obj17_Action:				; XREF: Obj17_Index
00008D16 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008D1A 6100 0000                  		bsr.w	DisplaySprite
00008D1E 6000 0000                  		bra.w	Obj17_ChkDel
00008D22                            
00008D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D22                            
00008D22                            
00008D22                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008D22 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008D26 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008D2C D028 003E                  		add.b	$3E(a0),d0
00008D30 0200 0007                  		andi.b	#7,d0
00008D34 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008D38 6600                       		bne.s	locret_7DA6
00008D3A 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008D40                            
00008D40                            locret_7DA6:
00008D40 4E75                       		rts	
00008D42                            ; End of function Obj17_RotateSpikes
00008D42                            
00008D42                            ; ===========================================================================
00008D42                            
00008D42                            Obj17_ChkDel:				; XREF: Obj17_Action
00008D42 3028 0008                  		move.w	8(a0),d0
00008D46 0240 FF80                  		andi.w	#$FF80,d0
00008D4A 3238 F700                  		move.w	($FFFFF700).w,d1
00008D4E 0441 0080                  		subi.w	#$80,d1
00008D52 0241 FF80                  		andi.w	#$FF80,d1
00008D56 9041                       		sub.w	d1,d0
00008D58 0C40 0280                  		cmpi.w	#$280,d0
00008D5C 6200 0000                  		bhi.w	Obj17_DelAll
00008D60 4E75                       		rts	
00008D62                            ; ===========================================================================
00008D62                            
00008D62                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008D62 7400                       		moveq	#0,d2
00008D64 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008D68 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008D6A 5502                       		subq.b	#2,d2
00008D6C 6500                       		bcs.s	Obj17_Delete
00008D6E                            
00008D6E                            Obj17_DelLoop:
00008D6E 7000                       		moveq	#0,d0
00008D70 101A                       		move.b	(a2)+,d0
00008D72 ED48                       		lsl.w	#6,d0
00008D74 0680 00FF D000             		addi.l	#$FFD000,d0
00008D7A 2240                       		movea.l	d0,a1
00008D7C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008D80 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008D84                            
00008D84                            Obj17_Delete:				; XREF: Obj17_Index
00008D84 6100 0000                  		bsr.w	DeleteObject
00008D88 4E75                       		rts	
00008D8A                            ; ===========================================================================
00008D8A                            
00008D8A                            Obj17_Display:				; XREF: Obj17_Index
00008D8A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008D8E 6000 0000                  		bra.w	DisplaySprite
00008D92                            ; ===========================================================================
00008D92                            ; ---------------------------------------------------------------------------
00008D92                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008D92                            ; ---------------------------------------------------------------------------
00008D92                            Map_obj17:
00008D92                            	include "_maps\obj17.asm"
00008D92                            ; ---------------------------------------------------------------------------
00008D92                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008D92                            ; ---------------------------------------------------------------------------
00008D92 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008D96 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008D9A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008D9E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008DA2 01                         byte_7E08:	dc.b 1
00008DA3 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008DA8 01                         byte_7E0E:	dc.b 1
00008DA9 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008DAE 01                         byte_7E14:	dc.b 1
00008DAF F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008DB4 01                         byte_7E1A:	dc.b 1
00008DB5 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008DBA 01                         byte_7E20:	dc.b 1
00008DBB 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008DC0 01                         byte_7E26:	dc.b 1
00008DC1 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008DC6 01                         byte_7E2C:	dc.b 1
00008DC7 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008DCC                            		even
00008DCC                            		even
00008DCC                            
00008DCC                            ; ===========================================================================
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            
00008DCC                            Obj18:					; XREF: Obj_Index
00008DCC 7000                       		moveq	#0,d0
00008DCE 1028 0024                  		move.b	$24(a0),d0
00008DD2 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008DD6 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008DDA                            ; ===========================================================================
00008DDA 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008DDC 0000                       		dc.w Obj18_Solid-Obj18_Index
00008DDE 0000                       		dc.w Obj18_Action2-Obj18_Index
00008DE0 0000                       		dc.w Obj18_Delete-Obj18_Index
00008DE2 0000                       		dc.w Obj18_Action-Obj18_Index
00008DE4                            ; ===========================================================================
00008DE4                            
00008DE4                            Obj18_Main:				; XREF: Obj18_Index
00008DE4 5428 0024                  		addq.b	#2,$24(a0)
00008DE8 317C 4000 0002             		move.w	#$4000,2(a0)
00008DEE 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008DF6 117C 0020 0019             		move.b	#$20,$19(a0)
00008DFC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008E02 6600                       		bne.s	Obj18_NotSYZ
00008E04 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00008E12                            
00008E12                            Obj18_NotSYZ:
00008E12 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008E18 6600                       		bne.s	Obj18_NotSLZ
00008E1A 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008E22 117C 0020 0019             		move.b	#$20,$19(a0)
00008E28 317C 4000 0002             		move.w	#$4000,2(a0)
00008E2E 117C 0003 0028             		move.b	#3,$28(a0)
00008E34                            
00008E34                            Obj18_NotSLZ:
00008E34 117C 0004 0001             		move.b	#4,1(a0)
00008E3A 117C 0004 0018             		move.b	#4,$18(a0)
00008E40 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008E46 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008E4C 3168 0008 0032             		move.w	8(a0),$32(a0)
00008E52 317C 0080 0026             		move.w	#$80,$26(a0)
00008E58 7200                       		moveq	#0,d1
00008E5A 1028 0028                  		move.b	$28(a0),d0
00008E5E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008E62 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008E64 5201                       		addq.b	#1,d1		; use frame #1
00008E66 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008E6C                            
00008E6C                            Obj18_SetFrame:
00008E6C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008E70                            
00008E70                            Obj18_Solid:				; XREF: Obj18_Index
00008E70 4A28 0038                  		tst.b	$38(a0)
00008E74 6700                       		beq.s	loc_7EE0
00008E76 5928 0038                  		subq.b	#4,$38(a0)
00008E7A                            
00008E7A                            loc_7EE0:
00008E7A 7200                       		moveq	#0,d1
00008E7C 1228 0019                  		move.b	$19(a0),d1
00008E80 6100 F56C                  		bsr.w	PlatformObject
00008E84                            
00008E84                            Obj18_Action:				; XREF: Obj18_Index
00008E84 6100 0000                  		bsr.w	Obj18_Move
00008E88 6100 0000                  		bsr.w	Obj18_Nudge
00008E8C 6100 0000                  		bsr.w	DisplaySprite
00008E90 6000 0000                  		bra.w	Obj18_ChkDel
00008E94                            ; ===========================================================================
00008E94                            
00008E94                            Obj18_Action2:				; XREF: Obj18_Index
00008E94 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008E9A 6700                       		beq.s	loc_7F06
00008E9C 5828 0038                  		addq.b	#4,$38(a0)
00008EA0                            
00008EA0                            loc_7F06:
00008EA0 7200                       		moveq	#0,d1
00008EA2 1228 0019                  		move.b	$19(a0),d1
00008EA6 6100 F6BA                  		bsr.w	ExitPlatform
00008EAA 3F28 0008                  		move.w	8(a0),-(sp)
00008EAE 6100 0000                  		bsr.w	Obj18_Move
00008EB2 6100 0000                  		bsr.w	Obj18_Nudge
00008EB6 341F                       		move.w	(sp)+,d2
00008EB8 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008EBC 6100 0000                  		bsr.w	DisplaySprite
00008EC0 6000 0000                  		bra.w	Obj18_ChkDel
00008EC4                            
00008EC4 4E75                       		rts
00008EC6                            
00008EC6                            ; ---------------------------------------------------------------------------
00008EC6                            ; Subroutine to	move platform slightly when you	stand on it
00008EC6                            ; ---------------------------------------------------------------------------
00008EC6                            
00008EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EC6                            
00008EC6                            
00008EC6                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008EC6 1028 0038                  		move.b	$38(a0),d0
00008ECA 6100 A5EC                  		bsr.w	CalcSine
00008ECE 323C 0400                  		move.w	#$400,d1
00008ED2 C1C1                       		muls.w	d1,d0
00008ED4 4840                       		swap	d0
00008ED6 D068 002C                  		add.w	$2C(a0),d0
00008EDA 3140 000C                  		move.w	d0,$C(a0)
00008EDE 4E75                       		rts	
00008EE0                            ; End of function Obj18_Nudge
00008EE0                            
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            ; Subroutine to	move platforms
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            
00008EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EE0                            
00008EE0                            
00008EE0                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008EE0 7000                       		moveq	#0,d0
00008EE2 1028 0028                  		move.b	$28(a0),d0
00008EE6 0240 000F                  		andi.w	#$F,d0
00008EEA D040                       		add.w	d0,d0
00008EEC 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008EF0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008EF4                            ; End of function Obj18_Move
00008EF4                            
00008EF4                            ; ===========================================================================
00008EF4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008EF8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008EFC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008F00 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008F04 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008F08 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008F0C 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008F0E                            ; ===========================================================================
00008F0E                            
00008F0E                            Obj18_Type00:
00008F0E 4E75                       		rts			; platform 00 doesn't move
00008F10                            ; ===========================================================================
00008F10                            
00008F10                            Obj18_Type05:
00008F10 3028 0032                  		move.w	$32(a0),d0
00008F14 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008F18 4401                       		neg.b	d1		; reverse platform-motion
00008F1A 0601 0040                  		addi.b	#$40,d1
00008F1E 6000                       		bra.s	Obj18_01_Move
00008F20                            ; ===========================================================================
00008F20                            
00008F20                            Obj18_Type01:
00008F20 3028 0032                  		move.w	$32(a0),d0
00008F24 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008F28 0401 0040                  		subi.b	#$40,d1
00008F2C                            
00008F2C                            Obj18_01_Move:
00008F2C 4881                       		ext.w	d1
00008F2E D041                       		add.w	d1,d0
00008F30 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008F34 6000 0000                  		bra.w	Obj18_ChgMotion
00008F38                            ; ===========================================================================
00008F38                            
00008F38                            Obj18_Type0C:
00008F38 3028 0034                  		move.w	$34(a0),d0
00008F3C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008F40 4401                       		neg.b	d1		; reverse platform-motion
00008F42 0601 0030                  		addi.b	#$30,d1
00008F46 6000                       		bra.s	Obj18_02_Move
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            Obj18_Type0B:
00008F48 3028 0034                  		move.w	$34(a0),d0
00008F4C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008F50 0401 0030                  		subi.b	#$30,d1
00008F54 6000                       		bra.s	Obj18_02_Move
00008F56                            ; ===========================================================================
00008F56                            
00008F56                            Obj18_Type06:
00008F56 3028 0034                  		move.w	$34(a0),d0
00008F5A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008F5E 4401                       		neg.b	d1		; reverse platform-motion
00008F60 0601 0040                  		addi.b	#$40,d1
00008F64 6000                       		bra.s	Obj18_02_Move
00008F66                            ; ===========================================================================
00008F66                            
00008F66                            Obj18_Type02:
00008F66 3028 0034                  		move.w	$34(a0),d0
00008F6A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008F6E 0401 0040                  		subi.b	#$40,d1
00008F72                            
00008F72                            Obj18_02_Move:
00008F72 4881                       		ext.w	d1
00008F74 D041                       		add.w	d1,d0
00008F76 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008F7A 6000 0000                  		bra.w	Obj18_ChgMotion
00008F7E                            ; ===========================================================================
00008F7E                            
00008F7E                            Obj18_Type03:
00008F7E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008F82 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008F84 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008F8A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008F8C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008F92                            
00008F92                            Obj18_03_NoMove:
00008F92 4E75                       		rts	
00008F94                            ; ===========================================================================
00008F94                            
00008F94                            Obj18_03_Wait:
00008F94 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008F98 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008F9A 317C 0020 003A             		move.w	#32,$3A(a0)
00008FA0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008FA4 4E75                       		rts	
00008FA6                            ; ===========================================================================
00008FA6                            
00008FA6                            Obj18_Type04:
00008FA6 4A68 003A                  		tst.w	$3A(a0)
00008FAA 6700                       		beq.s	loc_8048
00008FAC 5368 003A                  		subq.w	#1,$3A(a0)
00008FB0 6600                       		bne.s	loc_8048
00008FB2 0828 0003 0022             		btst	#3,$22(a0)
00008FB8 6700                       		beq.s	loc_8042
00008FBA 08E9 0001 0022             		bset	#1,$22(a1)
00008FC0 08A9 0003 0022             		bclr	#3,$22(a1)
00008FC6 137C 0002 0024             		move.b	#2,$24(a1)
00008FCC 08A8 0003 0022             		bclr	#3,$22(a0)
00008FD2 4228 0025                  		clr.b	$25(a0)
00008FD6 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008FDC                            
00008FDC                            loc_8042:
00008FDC 117C 0008 0024             		move.b	#8,$24(a0)
00008FE2                            
00008FE2                            loc_8048:
00008FE2 2628 002C                  		move.l	$2C(a0),d3
00008FE6 3028 0012                  		move.w	$12(a0),d0
00008FEA 48C0                       		ext.l	d0
00008FEC E180                       		asl.l	#8,d0
00008FEE D680                       		add.l	d0,d3
00008FF0 2143 002C                  		move.l	d3,$2C(a0)
00008FF4 0668 0038 0012             		addi.w	#$38,$12(a0)
00008FFA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008FFE 0640 00E0                  		addi.w	#$E0,d0
00009002 B068 002C                  		cmp.w	$2C(a0),d0
00009006 6400                       		bcc.s	locret_8074
00009008 117C 0006 0024             		move.b	#6,$24(a0)
0000900E                            
0000900E                            locret_8074:
0000900E 4E75                       		rts	
00009010                            ; ===========================================================================
00009010                            
00009010                            Obj18_Type07:
00009010 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009014 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009016 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000901A 7000                       		moveq	#0,d0
0000901C 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009020 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009022 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009026 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00009028 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000902E                            
0000902E                            Obj18_07_NoMove:
0000902E 4E75                       		rts	
00009030                            ; ===========================================================================
00009030                            
00009030                            Obj18_07_Wait:
00009030 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009034 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009036 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000903A 4E75                       		rts	
0000903C                            ; ===========================================================================
0000903C                            
0000903C                            Obj18_Type08:
0000903C 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009040 3028 0034                  		move.w	$34(a0),d0
00009044 0440 0200                  		subi.w	#$200,d0
00009048 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000904C 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000904E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009052                            
00009052                            Obj18_08_NoStop:
00009052 4E75                       		rts	
00009054                            ; ===========================================================================
00009054                            
00009054                            Obj18_Type0A:
00009054 3028 0034                  		move.w	$34(a0),d0
00009058 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000905C 0401 0040                  		subi.b	#$40,d1
00009060 4881                       		ext.w	d1
00009062 E241                       		asr.w	#1,d1
00009064 D041                       		add.w	d1,d0
00009066 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000906A                            
0000906A                            Obj18_ChgMotion:
0000906A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009070 4E75                       		rts	
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009072 3028 0032                  		move.w	$32(a0),d0
00009076 0240 FF80                  		andi.w	#$FF80,d0
0000907A 3238 F700                  		move.w	($FFFFF700).w,d1
0000907E 0441 0080                  		subi.w	#$80,d1
00009082 0241 FF80                  		andi.w	#$FF80,d1
00009086 9041                       		sub.w	d1,d0
00009088 0C40 0280                  		cmpi.w	#$280,d0
0000908C 6200                       		bhi.s	Obj18_Delete
0000908E 4E75                       		rts	
00009090                            ; ===========================================================================
00009090                            
00009090                            Obj18_Delete:				; XREF: Obj18_Index
00009090 6000 0000                  		bra.w	DeleteObject
00009094                            ; ===========================================================================
00009094                            ; ---------------------------------------------------------------------------
00009094                            ; Sprite mappings - unused
00009094                            ; ---------------------------------------------------------------------------
00009094                            Map_obj18x:
00009094                            	include "_maps\obj18x.asm"
00009094                            ; ---------------------------------------------------------------------------
00009094                            ; Sprite mappings - unused
00009094                            ; ---------------------------------------------------------------------------
00009094 0000                       		dc.w byte_80FE-Map_obj18x
00009096 0000                       		dc.w byte_8109-Map_obj18x
00009098 02                         byte_80FE:	dc.b 2
00009099 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000909E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000090A3 0A                         byte_8109:	dc.b $A
000090A4 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000090A9 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000090AE 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000090B3 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000090B8 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000090BD F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000090C2 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000090C7 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000090CC 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000090D1 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000090D6                            		even
000090D6                            		even
000090D6                            
000090D6                            ; ---------------------------------------------------------------------------
000090D6                            ; Sprite mappings - GHZ	platforms
000090D6                            ; ---------------------------------------------------------------------------
000090D6                            Map_obj18:
000090D6                            	include "_maps\obj18ghz.asm"
000090D6                            ; ---------------------------------------------------------------------------
000090D6                            ; Sprite mappings - GHZ	platforms
000090D6                            ; ---------------------------------------------------------------------------
000090D6 0000                       		dc.w byte_8140-Map_obj18
000090D8 0000                       		dc.w byte_8155-Map_obj18
000090DA 04                         byte_8140:	dc.b 4
000090DB F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000090E0 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000090E5 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000090EA F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000090EF 0A                         byte_8155:	dc.b $A
000090F0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000090F5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000090FA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000090FF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009104 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009109 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000910E 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009113 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009118 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000911D 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009122                            		even
00009122                            		even
00009122                            
00009122                            ; ---------------------------------------------------------------------------
00009122                            ; Sprite mappings - SYZ	platforms
00009122                            ; ---------------------------------------------------------------------------
00009122                            Map_obj18a:
00009122                            	include "_maps\obj18syz.asm"
00009122                            ; ---------------------------------------------------------------------------
00009122                            ; Sprite mappings - SYZ	platforms
00009122                            ; ---------------------------------------------------------------------------
00009122 0000                       		dc.w byte_818A-Map_obj18a
00009124 03                         byte_818A:	dc.b 3
00009125 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000912A F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000912F F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009134                            		even
00009134                            		even
00009134                            
00009134                            ; ---------------------------------------------------------------------------
00009134                            ; Sprite mappings - SLZ	platforms
00009134                            ; ---------------------------------------------------------------------------
00009134                            Map_obj18b:
00009134                            	include "_maps\obj18slz.asm"
00009134                            ; ---------------------------------------------------------------------------
00009134                            ; Sprite mappings - SLZ	platforms
00009134                            ; ---------------------------------------------------------------------------
00009134 0000                       		dc.w byte_819C-Map_obj18b
00009136 02                         byte_819C:	dc.b 2
00009137 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000913C F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009142 00                         		even
00009142 00                         		even
00009142                            
00009142                            ; ===========================================================================
00009142                            ; ---------------------------------------------------------------------------
00009142                            ; Object 19 - Pearto bombs
00009142                            ; ---------------------------------------------------------------------------
00009142                            Obj19:					; XREF: Obj_Index
00009142 7000                       		moveq	#0,d0
00009144 1028 0024                  		move.b	$24(a0),d0
00009148 323B 0000                  		move.w	off_7070(pc,d0.w),d1
0000914C 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00009150                            ; ---------------------------------------------------------------------------
00009150                            
00009150 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00009156                            ; ---------------------------------------------------------------------------
00009156                            
00009156                            loc_7076:
00009156 5428 0024                  		addq.b	#2,$24(a0)
0000915A 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00009162 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00009168 117C 0004 0001             		move.b	#4,1(a0)
0000916E 117C 0003 0019             		move.b	#3,$19(a0)
00009174 117C 0087 0020             		move.b	#$87,$20(a0)
0000917A 117C 0008 0018             		move.b	#8,$18(a0)
00009180 317C 0018 0030             		move.w	#$18,$30(a0)
00009186                            
00009186                            loc_70A6:
00009186 0828 0007 0022             		btst	#7,$22(a0)
0000918C 6600                       		bne.s	loc_70C2
0000918E 4A68 0030                  		tst.w	$30(a0)
00009192 6600                       		bne.s	loc_70D2
00009194 4EB9 0000 0000             		jsr	ObjHitFloor
0000919A 4A41                       		tst.w	d1
0000919C 6A00                       		bpl.s	loc_70D6
0000919E D368 000C                  		add.w	d1,$C(a0)
000091A2                            
000091A2                            loc_70C2:
000091A2 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000091A6 117C 0000 0024             		move.b	#0,$24(a0)
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            
000091AC                            loc_70D2:
000091AC 5368 0030                  		subq.w	#1,$30(a0)
000091B0                            
000091B0                            loc_70D6:
000091B0 6100 0000                  		bsr.w	ObjectFall
000091B4 6100 0000                  		bsr.w	DisplaySprite
000091B8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091BC 0640 00E0                  		addi.w	#$E0,d0
000091C0 B068 000C                  		cmp.w	$C(a0),d0
000091C4 6500                       		bcs.s	loc_70EE
000091C6 4E75                       		rts
000091C8                            ; ---------------------------------------------------------------------------
000091C8                            
000091C8                            loc_70EE:
000091C8 6100 0000                  		bsr.w	DeleteObject
000091CC 4E75                       		rts
000091CE                            		
000091CE                            Map_obj19:
000091CE                            	include "_maps\obj19.asm"
000091CE                            Map_02b4:
000091CE 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000091D0 01                         Map_02b4_2: 	dc.b $1
000091D1 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000091D6                            	even
000091D6                            	even
000091D6                            ; ===========================================================================
000091D6                            ; ---------------------------------------------------------------------------
000091D6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000091D6                            ; ---------------------------------------------------------------------------
000091D6                            Map_obj48:
000091D6                            	include "_maps\obj48.asm"
000091D6                            ; ---------------------------------------------------------------------------
000091D6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000091D6                            ; ---------------------------------------------------------------------------
000091D6 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000091DA 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000091DE 06                         byte_81B2:	dc.b 6
000091DF F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000091E4 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000091E9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000091EE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000091F3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000091F8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000091FD 04                         byte_81D1:	dc.b 4
000091FE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009203 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009208 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000920D 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009212 04                         byte_81E6:	dc.b 4
00009213 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009218 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000921D 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009222 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009227 04                         byte_81FB:	dc.b 4
00009228 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000922D E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009232 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009237 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000923C                            		even
0000923C                            		even
0000923C                            
0000923C                            ; ===========================================================================
0000923C                            ; ---------------------------------------------------------------------------
0000923C                            ; Object 1A - GHZ collapsing ledge
0000923C                            ; ---------------------------------------------------------------------------
0000923C                            
0000923C                            Obj1A:					; XREF: Obj_Index
0000923C 7000                       		moveq	#0,d0
0000923E 1028 0024                  		move.b	$24(a0),d0
00009242 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009246 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000924A                            ; ===========================================================================
0000924A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000924E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009252 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009256                            ; ===========================================================================
00009256                            
00009256                            Obj1A_Main:				; XREF: Obj1A_Index
00009256 5428 0024                  		addq.b	#2,$24(a0)
0000925A 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00009262 317C 4000 0002             		move.w	#$4000,2(a0)
00009268 0028 0004 0001             		ori.b	#4,1(a0)
0000926E 117C 0004 0018             		move.b	#4,$18(a0)
00009274 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000927A 117C 0064 0019             		move.b	#$64,$19(a0)
00009280 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009286 117C 0038 0016             		move.b	#$38,$16(a0)
0000928C 08E8 0004 0001             		bset	#4,1(a0)
00009292                            
00009292                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009292 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009296 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009298 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000929C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000092A0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000092A4                            
000092A4                            Obj1A_Slope:
000092A4 323C 0030                  		move.w	#$30,d1
000092A8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000092AE 6100 F212                  		bsr.w	SlopeObject
000092B2 6000 0000                  		bra.w	MarkObjGone
000092B6                            ; ===========================================================================
000092B6                            
000092B6                            Obj1A_Touch:				; XREF: Obj1A_Index
000092B6 4A28 0038                  		tst.b	$38(a0)
000092BA 6700 0000                  		beq.w	loc_847A
000092BE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000092C4 5328 0038                  		subq.b	#1,$38(a0)
000092C8                            
000092C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092C8                            
000092C8                            
000092C8                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000092C8 323C 0030                  		move.w	#$30,d1
000092CC 6100 F294                  		bsr.w	ExitPlatform
000092D0 323C 0030                  		move.w	#$30,d1
000092D4 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000092DA 3428 0008                  		move.w	8(a0),d2
000092DE 6100 0000                  		bsr.w	SlopeObject2
000092E2 6000 0000                  		bra.w	MarkObjGone
000092E6                            ; End of function Obj1A_WalkOff
000092E6                            
000092E6                            ; ===========================================================================
000092E6                            
000092E6                            Obj1A_Display:				; XREF: Obj1A_Index
000092E6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000092EA 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000092EC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000092F0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000092F4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000092F8 6000 0000                  		bra.w	DisplaySprite
000092FC                            ; ===========================================================================
000092FC                            
000092FC                            loc_82D0:				; XREF: Obj1A_Display
000092FC 5328 0038                  		subq.b	#1,$38(a0)
00009300 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009304 43F8 D000                  		lea	($FFFFD000).w,a1
00009308 0829 0003 0022             		btst	#3,$22(a1)
0000930E 6700                       		beq.s	loc_82FC
00009310 4A28 0038                  		tst.b	$38(a0)
00009314 6600                       		bne.s	locret_8308
00009316 08A9 0003 0022             		bclr	#3,$22(a1)
0000931C 08A9 0005 0022             		bclr	#5,$22(a1)
00009322 137C 0001 001D             		move.b	#1,$1D(a1)
00009328                            
00009328                            loc_82FC:
00009328 117C 0000 003A             		move.b	#0,$3A(a0)
0000932E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009334                            
00009334                            locret_8308:
00009334 4E75                       		rts	
00009336                            ; ===========================================================================
00009336                            
00009336                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009336 6100 0000                  		bsr.w	ObjectFall
0000933A 6100 0000                  		bsr.w	DisplaySprite
0000933E 4A28 0001                  		tst.b	1(a0)
00009342 6A00                       		bpl.s	Obj1A_Delete
00009344 4E75                       		rts	
00009346                            ; ===========================================================================
00009346                            
00009346                            Obj1A_Delete:				; XREF: Obj1A_Index
00009346 6100 0000                  		bsr.w	DeleteObject
0000934A 4E75                       		rts	
0000934C                            ; ===========================================================================
0000934C                            ; ---------------------------------------------------------------------------
0000934C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000934C                            ; ---------------------------------------------------------------------------
0000934C                            
0000934C                            Obj53:					; XREF: Obj_Index
0000934C 7000                       		moveq	#0,d0
0000934E 1028 0024                  		move.b	$24(a0),d0
00009352 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009356 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000935A                            ; ===========================================================================
0000935A 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000935E 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00009362 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00009366                            ; ===========================================================================
00009366                            
00009366                            Obj53_Main:				; XREF: Obj53_Index
00009366 5428 0024                  		addq.b	#2,$24(a0)
0000936A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009372 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009378 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000937E 6600                       		bne.s	Obj53_NotSLZ
00009380 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009386 5428 001A                  		addq.b	#2,$1A(a0)
0000938A                            
0000938A                            Obj53_NotSLZ:
0000938A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009390 6600                       		bne.s	Obj53_NotSBZ
00009392 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009398                            
00009398                            Obj53_NotSBZ:
00009398 0028 0004 0001             		ori.b	#4,1(a0)
0000939E 117C 0004 0018             		move.b	#4,$18(a0)
000093A4 117C 0007 0038             		move.b	#7,$38(a0)
000093AA 117C 0044 0019             		move.b	#$44,$19(a0)
000093B0                            
000093B0                            Obj53_ChkTouch:				; XREF: Obj53_Index
000093B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000093B4 6700                       		beq.s	Obj53_Solid	; if not, branch
000093B6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000093BA 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000093BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093C2                            
000093C2                            Obj53_Solid:
000093C2 323C 0020                  		move.w	#$20,d1
000093C6 6100 F026                  		bsr.w	PlatformObject
000093CA 4A28 0028                  		tst.b	$28(a0)
000093CE 6A00                       		bpl.s	Obj53_MarkAsGone
000093D0 0829 0003 0022             		btst	#3,$22(a1)
000093D6 6700                       		beq.s	Obj53_MarkAsGone
000093D8 08A8 0000 0001             		bclr	#0,1(a0)
000093DE 3029 0008                  		move.w	8(a1),d0
000093E2 9068 0008                  		sub.w	8(a0),d0
000093E6 6400                       		bcc.s	Obj53_MarkAsGone
000093E8 08E8 0000 0001             		bset	#0,1(a0)
000093EE                            
000093EE                            Obj53_MarkAsGone:
000093EE 6000 0000                  		bra.w	MarkObjGone
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Obj53_Touch:				; XREF: Obj53_Index
000093F2 4A28 0038                  		tst.b	$38(a0)
000093F6 6700 0000                  		beq.w	loc_8458
000093FA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009400 5328 0038                  		subq.b	#1,$38(a0)
00009404                            
00009404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009404                            
00009404                            
00009404                            Obj53_WalkOff:				; XREF: Obj53_Index
00009404 323C 0020                  		move.w	#$20,d1
00009408 6100 F158                  		bsr.w	ExitPlatform
0000940C 3428 0008                  		move.w	8(a0),d2
00009410 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00009414 6000 0000                  		bra.w	MarkObjGone
00009418                            ; End of function Obj53_WalkOff
00009418                            
00009418                            ; ===========================================================================
00009418                            
00009418                            Obj53_Display:				; XREF: Obj53_Index
00009418 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000941C 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000941E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009422 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009426 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000942A 6000 0000                  		bra.w	DisplaySprite
0000942E                            ; ===========================================================================
0000942E                            
0000942E                            loc_8402:
0000942E 5328 0038                  		subq.b	#1,$38(a0)
00009432 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009436 43F8 D000                  		lea	($FFFFD000).w,a1
0000943A 0829 0003 0022             		btst	#3,$22(a1)
00009440 6700                       		beq.s	loc_842E
00009442 4A28 0038                  		tst.b	$38(a0)
00009446 6600                       		bne.s	locret_843A
00009448 08A9 0003 0022             		bclr	#3,$22(a1)
0000944E 08A9 0005 0022             		bclr	#5,$22(a1)
00009454 137C 0001 001D             		move.b	#1,$1D(a1)
0000945A                            
0000945A                            loc_842E:
0000945A 117C 0000 003A             		move.b	#0,$3A(a0)
00009460 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00009466                            
00009466                            locret_843A:
00009466 4E75                       		rts	
00009468                            ; ===========================================================================
00009468                            
00009468                            Obj53_TimeZero:				; XREF: Obj53_Display
00009468 6100 0000                  		bsr.w	ObjectFall
0000946C 6100 0000                  		bsr.w	DisplaySprite
00009470 4A28 0001                  		tst.b	1(a0)
00009474 6A00                       		bpl.s	Obj53_Delete
00009476 4E75                       		rts	
00009478                            ; ===========================================================================
00009478                            
00009478                            Obj53_Delete:				; XREF: Obj53_Index
00009478 6100 0000                  		bsr.w	DeleteObject
0000947C 4E75                       		rts	
0000947E                            ; ===========================================================================
0000947E                            
0000947E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000947E 117C 0000 003A             		move.b	#0,$3A(a0)
00009484                            
00009484                            loc_8458:				; XREF: Obj53_Touch
00009484 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000948A 0828 0000 0028             		btst	#0,$28(a0)
00009490 6700                       		beq.s	loc_846C
00009492 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009498                            
00009498                            loc_846C:
00009498 7207                       		moveq	#7,d1
0000949A 5228 001A                  		addq.b	#1,$1A(a0)
0000949E 6000                       		bra.s	loc_8486
000094A0                            ; ===========================================================================
000094A0                            
000094A0                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000094A0 117C 0000 003A             		move.b	#0,$3A(a0)
000094A6                            
000094A6                            loc_847A:				; XREF: Obj1A_Touch
000094A6 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000094AC 7218                       		moveq	#$18,d1
000094AE 5428 001A                  		addq.b	#2,$1A(a0)
000094B2                            
000094B2                            loc_8486:				; XREF: Obj53_Collapse
000094B2 7000                       		moveq	#0,d0
000094B4 1028 001A                  		move.b	$1A(a0),d0
000094B8 D040                       		add.w	d0,d0
000094BA 2668 0004                  		movea.l	4(a0),a3
000094BE D6F3 0000                  		adda.w	(a3,d0.w),a3
000094C2 524B                       		addq.w	#1,a3
000094C4 08E8 0005 0001             		bset	#5,1(a0)
000094CA 1810                       		move.b	0(a0),d4
000094CC 1A28 0001                  		move.b	1(a0),d5
000094D0 2248                       		movea.l	a0,a1
000094D2 6000                       		bra.s	loc_84B2
000094D4                            ; ===========================================================================
000094D4                            
000094D4                            loc_84AA:
000094D4 6100 0000                  		bsr.w	SingleObjLoad
000094D8 6600                       		bne.s	loc_84F2
000094DA 5A4B                       		addq.w	#5,a3
000094DC                            
000094DC                            loc_84B2:
000094DC 137C 0006 0024             		move.b	#6,$24(a1)
000094E2 1284                       		move.b	d4,0(a1)
000094E4 234B 0004                  		move.l	a3,4(a1)
000094E8 1345 0001                  		move.b	d5,1(a1)
000094EC 3368 0008 0008             		move.w	8(a0),8(a1)
000094F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000094F8 3368 0002 0002             		move.w	2(a0),2(a1)
000094FE 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009504 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000950A 135C 0038                  		move.b	(a4)+,$38(a1)
0000950E B3C8                       		cmpa.l	a0,a1
00009510 6400                       		bcc.s	loc_84EE
00009512 6100 0000                  		bsr.w	DisplaySprite2
00009516                            
00009516                            loc_84EE:
00009516 51C9 FFBC                  		dbf	d1,loc_84AA
0000951A                            
0000951A                            loc_84F2:
0000951A 6100 0000                  		bsr.w	DisplaySprite
0000951E 303C 00B9                  		move.w	#$B9,d0
00009522 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009528                            ; ===========================================================================
00009528                            ; ---------------------------------------------------------------------------
00009528                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009528                            ; ---------------------------------------------------------------------------
00009528 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009538 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009542 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000954A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009552                            
00009552                            ; ---------------------------------------------------------------------------
00009552                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009552                            ; ---------------------------------------------------------------------------
00009552                            
00009552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009552                            
00009552                            
00009552                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009552 43F8 D000                  		lea	($FFFFD000).w,a1
00009556 0829 0003 0022             		btst	#3,$22(a1)
0000955C 6700                       		beq.s	locret_856E
0000955E 3029 0008                  		move.w	8(a1),d0
00009562 9068 0008                  		sub.w	8(a0),d0
00009566 D041                       		add.w	d1,d0
00009568 E248                       		lsr.w	#1,d0
0000956A 0828 0000 0001             		btst	#0,1(a0)
00009570 6700                       		beq.s	loc_854E
00009572 4640                       		not.w	d0
00009574 D041                       		add.w	d1,d0
00009576                            
00009576                            loc_854E:
00009576 7200                       		moveq	#0,d1
00009578 1232 0000                  		move.b	(a2,d0.w),d1
0000957C 3028 000C                  		move.w	$C(a0),d0
00009580 9041                       		sub.w	d1,d0
00009582 7200                       		moveq	#0,d1
00009584 1229 0016                  		move.b	$16(a1),d1
00009588 9041                       		sub.w	d1,d0
0000958A 3340 000C                  		move.w	d0,$C(a1)
0000958E 9468 0008                  		sub.w	8(a0),d2
00009592 9569 0008                  		sub.w	d2,8(a1)
00009596                            
00009596                            locret_856E:
00009596 4E75                       		rts	
00009598                            ; End of function SlopeObject2
00009598                            
00009598                            ; ===========================================================================
00009598                            ; ---------------------------------------------------------------------------
00009598                            ; Collision data for GHZ collapsing ledge
00009598                            ; ---------------------------------------------------------------------------
00009598                            Obj1A_SlopeData:
00009598                            		incbin	misc\ghzledge.bin
000095C8                            		even
000095C8                            
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            ; Sprite mappings - GHZ	collapsing ledge
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            Map_obj1A:
000095C8                            	include "_maps\obj1A.asm"
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            ; Sprite mappings - GHZ	collapsing ledge
000095C8                            ; ---------------------------------------------------------------------------
000095C8 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000095CC 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000095D0 10                         byte_85A8:	dc.b $10
000095D1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000095D6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000095DB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000095E0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000095E5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000095EA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000095EF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000095F4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000095F9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000095FE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009603 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009608 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000960D 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009612 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009617 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000961C 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009621 10                         byte_85F9:	dc.b $10
00009622 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009627 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000962C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009631 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009636 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000963B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009640 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009645 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000964A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000964F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009654 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009659 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000965E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009663 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009668 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000966D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009672 19                         byte_864A:	dc.b $19
00009673 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009678 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000967D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009682 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009687 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000968C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009691 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009696 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000969B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000096A0 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000096A5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000096AA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000096AF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000096B4 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000096B9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000096BE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000096C3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000096C8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000096CD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000096D2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000096D7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000096DC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000096E1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000096E6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000096EB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000096F0 19                         byte_86C8:	dc.b $19
000096F1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000096F6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000096FB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009700 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009705 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000970A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000970F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009714 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009719 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000971E D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009723 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009728 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000972D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009732 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009737 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000973C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009741 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009746 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000974B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009750 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009755 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000975A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000975F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009764 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009769 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000976E                            		even
0000976E                            		even
0000976E                            
0000976E                            ; ---------------------------------------------------------------------------
0000976E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000976E                            ; ---------------------------------------------------------------------------
0000976E                            Map_obj53:
0000976E                            	include "_maps\obj53.asm"
0000976E                            ; ---------------------------------------------------------------------------
0000976E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000976E                            ; ---------------------------------------------------------------------------
0000976E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00009772 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00009776 04                         byte_874E:	dc.b 4
00009777 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000977C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009781 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009786 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000978B 08                         byte_8763:	dc.b 8
0000978C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009791 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009796 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000979B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000097A0 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000097A5 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000097AA 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000097AF 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000097B4 04                         byte_878C:	dc.b 4
000097B5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000097BA 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000097BF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000097C4 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000097C9 08                         byte_87A1:	dc.b 8
000097CA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000097CF F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000097D4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000097D9 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000097DE 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000097E3 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000097E8 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000097ED 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000097F2                            		even
000097F2                            		even
000097F2                            
000097F2                            ; ===========================================================================
000097F2                            ; ---------------------------------------------------------------------------
000097F2                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000097F2                            ; ---------------------------------------------------------------------------
000097F2                            
000097F2                            Obj1C:					; XREF: Obj_Index
000097F2 7000                       		moveq	#0,d0
000097F4 1028 0024                  		move.b	$24(a0),d0
000097F8 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000097FC 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009800                            ; ===========================================================================
00009800 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009802 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009804                            ; ===========================================================================
00009804                            
00009804                            Obj1C_Main:				; XREF: Obj1C_Index
00009804 5428 0024                  		addq.b	#2,$24(a0)
00009808 7000                       		moveq	#0,d0
0000980A 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000980E C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009812 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009816 2159 0004                  		move.l	(a1)+,4(a0)
0000981A 3159 0002                  		move.w	(a1)+,2(a0)
0000981E 0028 0004 0001             		ori.b	#4,1(a0)
00009824 1159 001A                  		move.b	(a1)+,$1A(a0)
00009828 1159 0019                  		move.b	(a1)+,$19(a0)
0000982C 1159 0018                  		move.b	(a1)+,$18(a0)
00009830 1159 0020                  		move.b	(a1)+,$20(a0)
00009834                            
00009834                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009834 3028 0008                  		move.w	8(a0),d0
00009838 0240 FF80                  		andi.w	#$FF80,d0
0000983C 3238 F700                  		move.w	($FFFFF700).w,d1
00009840 0441 0080                  		subi.w	#$80,d1
00009844 0241 FF80                  		andi.w	#$FF80,d1
00009848 9041                       		sub.w	d1,d0
0000984A 0C40 0280                  		cmpi.w	#$280,d0
0000984E 6200 0000                  		bhi.w	DeleteObject
00009852 6000 0000                  		bra.w	DisplaySprite
00009856                            ; ===========================================================================
00009856                            ; ---------------------------------------------------------------------------
00009856                            ; Variables for	object $1C are stored in an array
00009856                            ; ---------------------------------------------------------------------------
00009856 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000985A 44D8                       		dc.w $44D8		; VRAM setting
0000985C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009860 0000 0000                  		dc.l Map_obj1C
00009864 44D8                       		dc.w $44D8
00009866 0008 0200                  		dc.b 0,	8, 2, 0
0000986A 0000 0000                  		dc.l Map_obj1C
0000986E 44D8                       		dc.w $44D8
00009870 0008 0200                  		dc.b 0,	8, 2, 0
00009874 0000 88D6                  		dc.l Map_obj11
00009878 438E                       		dc.w $438E
0000987A 0110 0100                  		dc.b 1,	$10, 1,	0
0000987E                            ; ---------------------------------------------------------------------------
0000987E                            ; Sprite mappings - SLZ	lava thrower
0000987E                            ; ---------------------------------------------------------------------------
0000987E                            Map_obj1C:
0000987E                            	include "_maps\obj1C.asm"
0000987E                            ; ---------------------------------------------------------------------------
0000987E                            ; Sprite mappings - SLZ	lava thrower
0000987E                            ; ---------------------------------------------------------------------------
0000987E 0000                       		dc.w byte_8858-Map_obj1C
00009880 01                         byte_8858:	dc.b 1
00009881 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009886                            		even
00009886                            		even
00009886                            
00009886                            ; ===========================================================================
00009886                            ; ---------------------------------------------------------------------------
00009886                            ; Object 1D - switch that activates when Sonic touches it
00009886                            ; (this	is not used anywhere in	the game)
00009886                            ; ---------------------------------------------------------------------------
00009886                            
00009886                            Obj1D:					; XREF: Obj_Index
00009886 7000                       		moveq	#0,d0
00009888 1028 0024                  		move.b	$24(a0),d0
0000988C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009890 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009894                            ; ===========================================================================
00009894 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009896 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009898 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000989A                            ; ===========================================================================
0000989A                            
0000989A                            Obj1D_Main:				; XREF: Obj1D_Index
0000989A 5428 0024                  		addq.b	#2,$24(a0)
0000989E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000098A6 317C 4000 0002             		move.w	#$4000,2(a0)
000098AC 117C 0004 0001             		move.b	#4,1(a0)
000098B2 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000098B8 117C 0010 0019             		move.b	#$10,$19(a0)
000098BE 117C 0005 0018             		move.b	#5,$18(a0)
000098C4                            
000098C4                            Obj1D_Action:				; XREF: Obj1D_Index
000098C4 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000098CA 323C 0010                  		move.w	#$10,d1
000098CE 6100 0000                  		bsr.w	Obj1D_ChkTouch
000098D2 6700                       		beq.s	Obj1D_ChkDel
000098D4 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000098D8 7001                       		moveq	#1,d0
000098DA 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000098DE                            
000098DE                            Obj1D_ChkDel:
000098DE 6100 0000                  		bsr.w	DisplaySprite
000098E2 3028 0008                  		move.w	8(a0),d0
000098E6 0240 FF80                  		andi.w	#$FF80,d0
000098EA 3238 F700                  		move.w	($FFFFF700).w,d1
000098EE 0441 0080                  		subi.w	#$80,d1
000098F2 0241 FF80                  		andi.w	#$FF80,d1
000098F6 9041                       		sub.w	d1,d0
000098F8 0C40 0280                  		cmpi.w	#$280,d0
000098FC 6200 0000                  		bhi.w	Obj1D_Delete
00009900 4E75                       		rts	
00009902                            ; ===========================================================================
00009902                            
00009902                            Obj1D_Delete:				; XREF: Obj1D_Index
00009902 6100 0000                  		bsr.w	DeleteObject
00009906 4E75                       		rts	
00009908                            ; ---------------------------------------------------------------------------
00009908                            ; Subroutine to	check if Sonic touches the object
00009908                            ; ---------------------------------------------------------------------------
00009908                            
00009908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009908                            
00009908                            
00009908                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009908 43F8 D000                  		lea	($FFFFD000).w,a1
0000990C 3029 0008                  		move.w	8(a1),d0
00009910 9068 0008                  		sub.w	8(a0),d0
00009914 D041                       		add.w	d1,d0
00009916 6B00                       		bmi.s	loc_8918
00009918 D241                       		add.w	d1,d1
0000991A B041                       		cmp.w	d1,d0
0000991C 6400                       		bcc.s	loc_8918
0000991E 3429 000C                  		move.w	$C(a1),d2
00009922 1229 0016                  		move.b	$16(a1),d1
00009926 4881                       		ext.w	d1
00009928 D242                       		add.w	d2,d1
0000992A 3028 000C                  		move.w	$C(a0),d0
0000992E 0440 0010                  		subi.w	#$10,d0
00009932 9041                       		sub.w	d1,d0
00009934 6200                       		bhi.s	loc_8918
00009936 0C40 FFF0                  		cmpi.w	#-$10,d0
0000993A 6500                       		bcs.s	loc_8918
0000993C 70FF                       		moveq	#-1,d0
0000993E 4E75                       		rts	
00009940                            ; ===========================================================================
00009940                            
00009940                            loc_8918:
00009940 7000                       		moveq	#0,d0
00009942 4E75                       		rts	
00009944                            ; End of function Obj1D_ChkTouch
00009944                            
00009944                            ; ===========================================================================
00009944                            ; ---------------------------------------------------------------------------
00009944                            ; Sprite mappings - object 1D
00009944                            ; ---------------------------------------------------------------------------
00009944                            Map_obj1D:
00009944                            	include "_maps\obj1D.asm"
00009944                            ; ---------------------------------------------------------------------------
00009944                            ; Sprite mappings - object 1D
00009944                            ; ---------------------------------------------------------------------------
00009944 0000                       		dc.w byte_891E-Map_obj1D
00009946 04                         byte_891E:	dc.b 4
00009947 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000994C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009951 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009956 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000995C 00                         		even
0000995C 00                         		even
0000995C                            
0000995C                            ; ===========================================================================
0000995C                            ; ---------------------------------------------------------------------------
0000995C                            ; Object 2A - doors (SBZ)
0000995C                            ; ---------------------------------------------------------------------------
0000995C                            
0000995C                            Obj2A:					; XREF: Obj_Index
0000995C 7000                       		moveq	#0,d0
0000995E 1028 0024                  		move.b	$24(a0),d0
00009962 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009966 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000996A                            ; ===========================================================================
0000996A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000996C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000996E                            ; ===========================================================================
0000996E                            
0000996E                            Obj2A_Main:				; XREF: Obj2A_Index
0000996E 5428 0024                  		addq.b	#2,$24(a0)
00009972 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000997A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009980 0028 0004 0001             		ori.b	#4,1(a0)
00009986 117C 0008 0019             		move.b	#8,$19(a0)
0000998C 117C 0004 0018             		move.b	#4,$18(a0)
00009992                            
00009992                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009992 323C 0040                  		move.w	#$40,d1
00009996 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000999A 3038 D008                  		move.w	($FFFFD008).w,d0
0000999E D041                       		add.w	d1,d0
000099A0 B068 0008                  		cmp.w	8(a0),d0
000099A4 6500                       		bcs.s	Obj2A_Animate
000099A6 9041                       		sub.w	d1,d0
000099A8 9041                       		sub.w	d1,d0
000099AA B068 0008                  		cmp.w	8(a0),d0
000099AE 6400                       		bcc.s	Obj2A_Animate
000099B0 D041                       		add.w	d1,d0
000099B2 B068 0008                  		cmp.w	8(a0),d0
000099B6 6400                       		bcc.s	loc_899A
000099B8 0828 0000 0022             		btst	#0,$22(a0)
000099BE 6600                       		bne.s	Obj2A_Animate
000099C0 6000                       		bra.s	Obj2A_Open
000099C2                            ; ===========================================================================
000099C2                            
000099C2                            loc_899A:				; XREF: Obj2A_OpenShut
000099C2 0828 0000 0022             		btst	#0,$22(a0)
000099C8 6700                       		beq.s	Obj2A_Animate
000099CA                            
000099CA                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000099CA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000099D0                            
000099D0                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000099D0 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000099D6 6100 0000                  		bsr.w	AnimateSprite
000099DA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000099DE 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000099E0 323C 0011                  		move.w	#$11,d1
000099E4 343C 0020                  		move.w	#$20,d2
000099E8 3602                       		move.w	d2,d3
000099EA 5243                       		addq.w	#1,d3
000099EC 3828 0008                  		move.w	8(a0),d4
000099F0 6100 0000                  		bsr.w	SolidObject
000099F4                            
000099F4                            Obj2A_MarkAsUsed:
000099F4 6000 0000                  		bra.w	MarkObjGone
000099F8                            ; ===========================================================================
000099F8                            Ani_obj2A:
000099F8                            	include "_anim\obj2A.asm"
000099F8                            ; ---------------------------------------------------------------------------
000099F8                            ; Animation script - doors (SBZ)
000099F8                            ; ---------------------------------------------------------------------------
000099F8 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000099FA 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000099FC 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009A08 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009A14                            		even
00009A14                            		even
00009A14                            
00009A14                            ; ---------------------------------------------------------------------------
00009A14                            ; Sprite mappings - doors (SBZ)
00009A14                            ; ---------------------------------------------------------------------------
00009A14                            Map_obj2A:
00009A14                            	include "_maps\obj2A.asm"
00009A14                            ; ---------------------------------------------------------------------------
00009A14                            ; Sprite mappings - doors (SBZ)
00009A14                            ; ---------------------------------------------------------------------------
00009A14 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009A18 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009A1C 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009A20 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009A24 0000                       		dc.w byte_8A56-Map_obj2A
00009A26 02                         byte_89FE:	dc.b 2
00009A27 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009A2C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009A31 02                         byte_8A09:	dc.b 2
00009A32 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009A37 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009A3C 02                         byte_8A14:	dc.b 2
00009A3D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009A42 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009A47 02                         byte_8A1F:	dc.b 2
00009A48 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009A4D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009A52 02                         byte_8A2A:	dc.b 2
00009A53 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009A58 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009A5D 02                         byte_8A35:	dc.b 2
00009A5E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009A63 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009A68 02                         byte_8A40:	dc.b 2
00009A69 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009A6E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009A73 02                         byte_8A4B:	dc.b 2
00009A74 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009A79 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009A7E 02                         byte_8A56:	dc.b 2
00009A7F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009A84 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009A8A 00                         		even
00009A8A 00                         		even
00009A8A                            
00009A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A8A                            
00009A8A                            
00009A8A                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009A8A 6100 0000                  		bsr.w	Obj44_SolidWall2
00009A8E 6700                       		beq.s	loc_8AA8
00009A90 6B00 0000                  		bmi.w	loc_8AC4
00009A94 4A40                       		tst.w	d0
00009A96 6700 0000                  		beq.w	loc_8A92
00009A9A 6B00                       		bmi.s	loc_8A7C
00009A9C 4A69 0010                  		tst.w	$10(a1)
00009AA0 6B00                       		bmi.s	loc_8A92
00009AA2 6000                       		bra.s	loc_8A82
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            loc_8A7C:
00009AA4 4A69 0010                  		tst.w	$10(a1)
00009AA8 6A00                       		bpl.s	loc_8A92
00009AAA                            
00009AAA                            loc_8A82:
00009AAA 9169 0008                  		sub.w	d0,8(a1)
00009AAE 337C 0000 0014             		move.w	#0,$14(a1)
00009AB4 337C 0000 0010             		move.w	#0,$10(a1)
00009ABA                            
00009ABA                            loc_8A92:
00009ABA 0829 0001 0022             		btst	#1,$22(a1)
00009AC0 6600                       		bne.s	loc_8AB6
00009AC2 08E9 0005 0022             		bset	#5,$22(a1)
00009AC8 08E8 0005 0022             		bset	#5,$22(a0)
00009ACE 4E75                       		rts	
00009AD0                            ; ===========================================================================
00009AD0                            
00009AD0                            loc_8AA8:
00009AD0 0828 0005 0022             		btst	#5,$22(a0)
00009AD6 6700                       		beq.s	locret_8AC2
00009AD8 337C 0001 001C             		move.w	#1,$1C(a1)
00009ADE                            
00009ADE                            loc_8AB6:
00009ADE 08A8 0005 0022             		bclr	#5,$22(a0)
00009AE4 08A9 0005 0022             		bclr	#5,$22(a1)
00009AEA                            
00009AEA                            locret_8AC2:
00009AEA 4E75                       		rts	
00009AEC                            ; ===========================================================================
00009AEC                            
00009AEC                            loc_8AC4:
00009AEC 4A69 0012                  		tst.w	$12(a1)
00009AF0 6A00                       		bpl.s	locret_8AD8
00009AF2 4A43                       		tst.w	d3
00009AF4 6A00                       		bpl.s	locret_8AD8
00009AF6 9769 000C                  		sub.w	d3,$C(a1)
00009AFA 337C 0000 0012             		move.w	#0,$12(a1)
00009B00                            
00009B00                            locret_8AD8:
00009B00 4E75                       		rts	
00009B02                            ; End of function Obj44_SolidWall
00009B02                            
00009B02                            
00009B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B02                            
00009B02                            
00009B02                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009B02 43F8 D000                  		lea	($FFFFD000).w,a1
00009B06 3029 0008                  		move.w	8(a1),d0
00009B0A 9068 0008                  		sub.w	8(a0),d0
00009B0E D041                       		add.w	d1,d0
00009B10 6B00                       		bmi.s	loc_8B48
00009B12 3601                       		move.w	d1,d3
00009B14 D643                       		add.w	d3,d3
00009B16 B043                       		cmp.w	d3,d0
00009B18 6200                       		bhi.s	loc_8B48
00009B1A 1629 0016                  		move.b	$16(a1),d3
00009B1E 4883                       		ext.w	d3
00009B20 D443                       		add.w	d3,d2
00009B22 3629 000C                  		move.w	$C(a1),d3
00009B26 9668 000C                  		sub.w	$C(a0),d3
00009B2A D642                       		add.w	d2,d3
00009B2C 6B00                       		bmi.s	loc_8B48
00009B2E 3802                       		move.w	d2,d4
00009B30 D844                       		add.w	d4,d4
00009B32 B644                       		cmp.w	d4,d3
00009B34 6400                       		bcc.s	loc_8B48
00009B36 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009B3A 6B00                       		bmi.s	loc_8B48
00009B3C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009B42 6400                       		bcc.s	loc_8B48
00009B44 4A78 FE08                  		tst.w	($FFFFFE08).w
00009B48 6600                       		bne.s	loc_8B48
00009B4A 3A00                       		move.w	d0,d5
00009B4C B240                       		cmp.w	d0,d1
00009B4E 6400                       		bcc.s	loc_8B30
00009B50 D241                       		add.w	d1,d1
00009B52 9041                       		sub.w	d1,d0
00009B54 3A00                       		move.w	d0,d5
00009B56 4445                       		neg.w	d5
00009B58                            
00009B58                            loc_8B30:
00009B58 3203                       		move.w	d3,d1
00009B5A B443                       		cmp.w	d3,d2
00009B5C 6400                       		bcc.s	loc_8B3C
00009B5E 9644                       		sub.w	d4,d3
00009B60 3203                       		move.w	d3,d1
00009B62 4441                       		neg.w	d1
00009B64                            
00009B64                            loc_8B3C:
00009B64 BA41                       		cmp.w	d1,d5
00009B66 6200                       		bhi.s	loc_8B44
00009B68 7801                       		moveq	#1,d4
00009B6A 4E75                       		rts	
00009B6C                            ; ===========================================================================
00009B6C                            
00009B6C                            loc_8B44:
00009B6C 78FF                       		moveq	#-1,d4
00009B6E 4E75                       		rts	
00009B70                            ; ===========================================================================
00009B70                            
00009B70                            loc_8B48:
00009B70 7800                       		moveq	#0,d4
00009B72 4E75                       		rts	
00009B74                            ; End of function Obj44_SolidWall2
00009B74                            
00009B74                            ; ===========================================================================
00009B74                            ; ---------------------------------------------------------------------------
00009B74                            ; Object 1E - Ball Hog enemy (SBZ)
00009B74                            ; ---------------------------------------------------------------------------
00009B74                            
00009B74                            Obj1E:					; XREF: Obj_Index
00009B74 7000                       		moveq	#0,d0
00009B76 1028 0024                  		move.b	$24(a0),d0
00009B7A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009B7E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009B82                            ; ===========================================================================
00009B82 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009B84 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009B86                            ; ===========================================================================
00009B86                            
00009B86                            Obj1E_Main:				; XREF: Obj1E_Index
00009B86 117C 0013 0016             		move.b	#$13,$16(a0)
00009B8C 117C 0008 0017             		move.b	#8,$17(a0)
00009B92 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009B9A 317C 2302 0002             		move.w	#$2302,2(a0)
00009BA0 117C 0004 0001             		move.b	#4,1(a0)
00009BA6 117C 0004 0018             		move.b	#4,$18(a0)
00009BAC 117C 0005 0020             		move.b	#5,$20(a0)
00009BB2 117C 000C 0019             		move.b	#$C,$19(a0)
00009BB8 6100 0000                  		bsr.w	ObjectFall
00009BBC 4EB9 0000 0000             		jsr	ObjHitFloor
00009BC2 4A41                       		tst.w	d1
00009BC4 6A00                       		bpl.s	locret_8BAC
00009BC6 D368 000C                  		add.w	d1,$C(a0)
00009BCA 317C 0000 0012             		move.w	#0,$12(a0)
00009BD0 5428 0024                  		addq.b	#2,$24(a0)
00009BD4                            
00009BD4                            locret_8BAC:
00009BD4 4E75                       		rts	
00009BD6                            ; ===========================================================================
00009BD6                            
00009BD6                            Obj1E_Action:				; XREF: Obj1E_Index
00009BD6 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009BDC 6100 0000                  		bsr.w	AnimateSprite
00009BE0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009BE6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009BE8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009BEC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009BEE 6000                       		bra.s	Obj1E_MarkAsGone
00009BF0                            ; ===========================================================================
00009BF0                            
00009BF0                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009BF0 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009BF4                            
00009BF4                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009BF4 6000 0000                  		bra.w	MarkObjGone
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009BF8 117C 0001 0032             		move.b	#1,$32(a0)
00009BFE 6100 0000                  		bsr.w	SingleObjLoad
00009C02 6600                       		bne.s	loc_8C1A
00009C04 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009C08 3368 0008 0008             		move.w	8(a0),8(a1)
00009C0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C14 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009C1A 337C 0000 0012             		move.w	#0,$12(a1)
00009C20 70FC                       		moveq	#-4,d0
00009C22 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009C28 6700                       		beq.s	loc_8C0A	; if not, branch
00009C2A 4440                       		neg.w	d0
00009C2C 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009C30                            
00009C30                            loc_8C0A:
00009C30 D169 0008                  		add.w	d0,8(a1)
00009C34 0669 000C 000C             		addi.w	#$C,$C(a1)
00009C3A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009C40                            
00009C40                            loc_8C1A:
00009C40 60B2                       		bra.s	Obj1E_MarkAsGone
00009C42                            ; ===========================================================================
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            
00009C42                            Obj20:					; XREF: Obj_Index
00009C42 7000                       		moveq	#0,d0
00009C44 1028 0024                  		move.b	$24(a0),d0
00009C48 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009C4C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009C50                            ; ===========================================================================
00009C50 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009C52 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009C54                            ; ===========================================================================
00009C54                            
00009C54                            Obj20_Main:				; XREF: Obj20_Index
00009C54 5428 0024                  		addq.b	#2,$24(a0)
00009C58 117C 0007 0016             		move.b	#7,$16(a0)
00009C5E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009C66 317C 2302 0002             		move.w	#$2302,2(a0)
00009C6C 117C 0004 0001             		move.b	#4,1(a0)
00009C72 117C 0003 0018             		move.b	#3,$18(a0)
00009C78 117C 0087 0020             		move.b	#$87,$20(a0)
00009C7E 117C 0008 0019             		move.b	#8,$19(a0)
00009C84 7000                       		moveq	#0,d0
00009C86 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009C8A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009C8E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009C92 117C 0004 001A             		move.b	#4,$1A(a0)
00009C98                            
00009C98                            Obj20_Bounce:				; XREF: Obj20_Index
00009C98 4EB9 0000 0000             		jsr	ObjectFall
00009C9E 4A68 0012                  		tst.w	$12(a0)
00009CA2 6B00                       		bmi.s	Obj20_ChkExplode
00009CA4 4EB9 0000 0000             		jsr	ObjHitFloor
00009CAA 4A41                       		tst.w	d1
00009CAC 6A00                       		bpl.s	Obj20_ChkExplode
00009CAE D368 000C                  		add.w	d1,$C(a0)
00009CB2 317C FD00 0012             		move.w	#-$300,$12(a0)
00009CB8 4A03                       		tst.b	d3
00009CBA 6700                       		beq.s	Obj20_ChkExplode
00009CBC 6B00                       		bmi.s	loc_8CA4
00009CBE 4A68 0010                  		tst.w	$10(a0)
00009CC2 6A00                       		bpl.s	Obj20_ChkExplode
00009CC4 4468 0010                  		neg.w	$10(a0)
00009CC8 6000                       		bra.s	Obj20_ChkExplode
00009CCA                            ; ===========================================================================
00009CCA                            
00009CCA                            loc_8CA4:				; XREF: Obj20_Bounce
00009CCA 4A68 0010                  		tst.w	$10(a0)
00009CCE 6B00                       		bmi.s	Obj20_ChkExplode
00009CD0 4468 0010                  		neg.w	$10(a0)
00009CD4                            
00009CD4                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009CD4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009CD8 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009CDA 10BC 0024                  		move.b	#$24,0(a0)
00009CDE 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009CE2 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009CE8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009CEC                            ; ===========================================================================
00009CEC                            
00009CEC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009CEC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009CF0 6A00                       		bpl.s	Obj20_Display
00009CF2 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009CF8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009CFE                            
00009CFE                            Obj20_Display:
00009CFE 6100 0000                  		bsr.w	DisplaySprite
00009D02 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009D06 0640 00E0                  		addi.w	#$E0,d0
00009D0A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009D0E 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009D12 4E75                       		rts	
00009D14                            ; ===========================================================================
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            ; Object 24 - explosion	from a destroyed monitor
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            
00009D14                            Obj24:					; XREF: Obj_Index
00009D14 7000                       		moveq	#0,d0
00009D16 1028 0024                  		move.b	$24(a0),d0
00009D1A 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009D1E 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009D22                            ; ===========================================================================
00009D22 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009D24 0000                       		dc.w Obj24_Animate-Obj24_Index
00009D26                            ; ===========================================================================
00009D26                            
00009D26                            Obj24_Main:				; XREF: Obj24_Index
00009D26 5428 0024                  		addq.b	#2,$24(a0)
00009D2A 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009D32 317C 041C 0002             		move.w	#$41C,2(a0)
00009D38 117C 0004 0001             		move.b	#4,1(a0)
00009D3E 117C 0001 0018             		move.b	#1,$18(a0)
00009D44 117C 0000 0020             		move.b	#0,$20(a0)
00009D4A 117C 000C 0019             		move.b	#$C,$19(a0)
00009D50 117C 0009 001E             		move.b	#9,$1E(a0)
00009D56 117C 0000 001A             		move.b	#0,$1A(a0)
00009D5C 303C 00A5                  		move.w	#$A5,d0
00009D60 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play explosion sound
00009D66                            
00009D66                            Obj24_Animate:				; XREF: Obj24_Index
00009D66 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009D6A 6A00                       		bpl.s	Obj24_Display
00009D6C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009D72 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009D76 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009D7C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009D80                            
00009D80                            Obj24_Display:
00009D80 6000 0000                  		bra.w	DisplaySprite
00009D84                            ; ===========================================================================
00009D84                            ; ---------------------------------------------------------------------------
00009D84                            ; Object 27 - explosion	from a destroyed enemy
00009D84                            ; ---------------------------------------------------------------------------
00009D84                            
00009D84                            Obj27:					; XREF: Obj_Index
00009D84 7000                       		moveq	#0,d0
00009D86 1028 0024                  		move.b	$24(a0),d0
00009D8A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009D8E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009D92                            ; ===========================================================================
00009D92 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009D94 0000                       		dc.w Obj27_Main-Obj27_Index
00009D96 0000                       		dc.w Obj27_Animate-Obj27_Index
00009D98                            ; ===========================================================================
00009D98                            
00009D98                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009D98 5428 0024                  		addq.b	#2,$24(a0)
00009D9C 6100 0000                  		bsr.w	SingleObjLoad
00009DA0 6600                       		bne.s	Obj27_Main
00009DA2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009DA6 3368 0008 0008             		move.w	8(a0),8(a1)
00009DAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DB2 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009DB8                            
00009DB8                            Obj27_Main:				; XREF: Obj27_Index
00009DB8 5428 0024                  		addq.b	#2,$24(a0)
00009DBC 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009DC4 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009DCA 117C 0004 0001             		move.b	#4,1(a0)
00009DD0 117C 0001 0018             		move.b	#1,$18(a0)
00009DD6 117C 0000 0020             		move.b	#0,$20(a0)
00009DDC 117C 000C 0019             		move.b	#$C,$19(a0)
00009DE2                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009DE2 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009DE8 117C 0000 001A             		move.b	#0,$1A(a0)
00009DEE 303C 00C1                  		move.w	#$C1,d0
00009DF2 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009DF8                            
00009DF8 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009DFE 1028 0028                  		move.b	$28(a0),d0
00009E02 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009E08 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009E0E                            
00009E0E                            Obj27_Animate:				; XREF: Obj27_Index
00009E0E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009E12 6A00                       		bpl.s	Obj27_Display
00009E14                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009E14 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009E1A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009E1E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009E24 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009E28                            
00009E28                            Obj27_Display:
00009E28 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009E2E 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009E34 6000 0000                  		bra.w	DisplaySprite
00009E38                            ; ===========================================================================
00009E38                            ; ---------------------------------------------------------------------------
00009E38                            Obj27_ExplosionXYSpd:
00009E38                            		; dc.w	-$350, -$300	; Left
00009E38                            		; dc.w	-$200, -$450	; Near middle (left)
00009E38                            		; dc.w	0, -$500	; Middle
00009E38                            		; dc.w	$200, -$450	; Near middle (right)
00009E38                            		; dc.w	$350, -$300	; Right
00009E38                            
00009E38 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009E3C FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009E40 0000 FA00                  		dc.w	0, -$600	; Middle
00009E44 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009E48 0150 FC00                  		dc.w	$150, -$400	; Right
00009E4C                            
00009E4C 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009E66                            ; ---------------------------------------------------------------------------
00009E66                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009E66                            ; ---------------------------------------------------------------------------
00009E66                            
00009E66                            Obj3F:					; XREF: Obj_Index
00009E66 7000                       		moveq	#0,d0
00009E68 1028 0024                  		move.b	$24(a0),d0
00009E6C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009E70 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009E74                            ; ===========================================================================
00009E74 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009E76 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009E78                            ; ===========================================================================
00009E78                            
00009E78                            Obj3F_Main:				; XREF: Obj3F_Index
00009E78 5428 0024                  		addq.b	#2,$24(a0)
00009E7C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009E84 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009E8A 117C 0004 0001             		move.b	#4,1(a0)
00009E90 117C 0001 0018             		move.b	#1,$18(a0)
00009E96 117C 0000 0020             		move.b	#0,$20(a0)
00009E9C 117C 000C 0019             		move.b	#$C,$19(a0)
00009EA2 117C 0007 001E             		move.b	#7,$1E(a0)
00009EA8 117C 0000 001A             		move.b	#0,$1A(a0)
00009EAE 303C 00C4                  		move.w	#$C4,d0
00009EB2 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009EB8                            ; ===========================================================================
00009EB8                            Ani_obj1E:
00009EB8                            	include "_anim\obj1E.asm"
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            ; Animation script - doors (SBZ)
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8 0000                       		dc.w byte_8E4A-Ani_obj1E
00009EBA 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009ED2 00                         		even
00009ED2 00                         		even
00009ED2                            
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            Map_obj1E:
00009ED2                            	include "_maps\obj1E.asm"
00009ED2                            Map_a7ad:
00009ED2 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009ED4 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009ED6 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009ED8 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009EDA 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009EDC 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009EDE 02                         Map_a7ad_C: 	dc.b $2
00009EDF EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009EE4 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009EE9 02                         Map_a7ad_17: 	dc.b $2
00009EEA EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009EEF FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009EF4 02                         Map_a7ad_22: 	dc.b $2
00009EF5 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009EFA 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009EFF 02                         Map_a7ad_2D: 	dc.b $2
00009F00 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009F05 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009F0A 02                         Map_a7ad_38: 	dc.b $2
00009F0B F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009F10 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009F15 02                         Map_a7ad_43: 	dc.b $2
00009F16 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009F1B E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009F20                            	even
00009F20                            	even
00009F20                            
00009F20                            ; ---------------------------------------------------------------------------
00009F20                            ; Sprite mappings - explosion
00009F20                            ; ---------------------------------------------------------------------------
00009F20                            Map_obj24:
00009F20                            	include "_maps\obj24.asm"
00009F20                            ; ---------------------------------------------------------------------------
00009F20                            ; Sprite mappings - explosion
00009F20                            ; ---------------------------------------------------------------------------
00009F20 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009F24 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009F28 01                         byte_8EAE:	dc.b 1
00009F29 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009F2E 01                         byte_8EB4:	dc.b 1
00009F2F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009F34 01                         byte_8EBA:	dc.b 1
00009F35 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009F3A 01                         byte_8EC0:	dc.b 1
00009F3B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009F40                            		even
00009F40                            		even
00009F40                            
00009F40                            ; ---------------------------------------------------------------------------
00009F40                            ; Sprite mappings - explosion
00009F40                            ; ---------------------------------------------------------------------------
00009F40 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009F44 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009F48 0000                       		dc.w byte_8EF7-Map_obj27
00009F4A 01                         byte_8ED0:	dc.b 1
00009F4B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009F50 01                         byte_8ED6:	dc.b 1
00009F51 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009F56 01                         byte_8EDC:	dc.b 1
00009F57 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009F5C 04                         byte_8EE2:	dc.b 4
00009F5D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009F62 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009F67 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009F6C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009F71 04                         byte_8EF7:	dc.b 4
00009F72 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009F77 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009F7C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009F81 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009F86                            		even
00009F86                            ; ---------------------------------------------------------------------------
00009F86                            ; Sprite mappings - explosion from when	a boss is destroyed
00009F86                            ; ---------------------------------------------------------------------------
00009F86 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009F88 0000                       		dc.w byte_8F16-Map_obj3F
00009F8A 0000                       		dc.w byte_8F1C-Map_obj3F
00009F8C FFD6                       		dc.w byte_8EE2-Map_obj3F
00009F8E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009F90 01                         byte_8F16:	dc.b 1
00009F91 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009F96 01                         byte_8F1C:	dc.b 1
00009F97 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009F9C                            		even
00009F9C                            ; ===========================================================================
00009F9C                            ; ---------------------------------------------------------------------------
00009F9C                            ; Object 28 - animals
00009F9C                            ; ---------------------------------------------------------------------------
00009F9C                            
00009F9C                            Obj28:					; XREF: Obj_Index
00009F9C 7000                       		moveq	#0,d0
00009F9E 1028 0024                  		move.b	$24(a0),d0
00009FA2 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009FA6 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009FAA                            ; ===========================================================================
00009FAA 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009FAE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009FB2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009FB6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009FBA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009FBE 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009FC2 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009FC6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009FCA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009FCE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009FD2 0000                       		dc.w loc_92D6-Obj28_Index
00009FD4                            
00009FD4 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009FE4                            
00009FE4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009FE8 0000 0000                  		dc.l Map_obj28
00009FEC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009FF0 0000 0000                  		dc.l Map_obj28a		; mappings address
00009FF4 FE80 FD00                  		dc.w $FE80, $FD00
00009FF8 0000 0000                  		dc.l Map_obj28
00009FFC FEC0 FE80                  		dc.w $FEC0, $FE80
0000A000 0000 0000                  		dc.l Map_obj28a
0000A004 FE40 FD00                  		dc.w $FE40, $FD00
0000A008 0000 0000                  		dc.l Map_obj28b
0000A00C FD00 FC00                  		dc.w $FD00, $FC00
0000A010 0000 0000                  		dc.l Map_obj28a
0000A014 FD80 FC80                  		dc.w $FD80, $FC80
0000A018 0000 0000                  		dc.l Map_obj28b
0000A01C                            
0000A01C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A02C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A03C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A048                            
0000A048 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A05C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A070 0000 0000                  		dc.l Map_obj28b
0000A074                            
0000A074 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A086 0565 05B3                  		dc.w $565, $5B3
0000A08A                            ; ===========================================================================
0000A08A                            
0000A08A                            Obj28_Ending:				; XREF: Obj28_Index
0000A08A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A08E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A092 7000                       		moveq	#0,d0
0000A094 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A098 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A09A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A09E 0440 0014                  		subi.w	#$14,d0
0000A0A2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A0A8 D040                       		add.w	d0,d0
0000A0AA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A0B0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A0B4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A0BA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A0C0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A0C6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A0CC 117C 000C 0016             		move.b	#$C,$16(a0)
0000A0D2 117C 0004 0001             		move.b	#4,1(a0)
0000A0D8 08E8 0000 0001             		bset	#0,1(a0)
0000A0DE 117C 0006 0018             		move.b	#6,$18(a0)
0000A0E4 117C 0008 0019             		move.b	#8,$19(a0)
0000A0EA 117C 0007 001E             		move.b	#7,$1E(a0)
0000A0F0 6000 0000                  		bra.w	DisplaySprite
0000A0F4                            ; ===========================================================================
0000A0F4                            
0000A0F4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A0F4 5428 0024                  		addq.b	#2,$24(a0)
0000A0F8 6100 9398                  		bsr.w	RandomNumber
0000A0FC 0240 0001                  		andi.w	#1,d0
0000A100 7200                       		moveq	#0,d1
0000A102 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A106 D241                       		add.w	d1,d1
0000A108 D240                       		add.w	d0,d1
0000A10A 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
0000A10E 1031 1000                  		move.b	(a1,d1.w),d0
0000A112 1140 0030                  		move.b	d0,$30(a0)
0000A116 E748                       		lsl.w	#3,d0
0000A118 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A11C D2C0                       		adda.w	d0,a1
0000A11E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A122 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A126 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A12A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A130 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A136 6700                       		beq.s	loc_90C0	; if yes, branch
0000A138 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A13E                            
0000A13E                            loc_90C0:
0000A13E 117C 000C 0016             		move.b	#$C,$16(a0)
0000A144 117C 0004 0001             		move.b	#4,1(a0)
0000A14A 08E8 0000 0001             		bset	#0,1(a0)
0000A150 117C 0006 0018             		move.b	#6,$18(a0)
0000A156 117C 0008 0019             		move.b	#8,$19(a0)
0000A15C 117C 0007 001E             		move.b	#7,$1E(a0)
0000A162 117C 0002 001A             		move.b	#2,$1A(a0)
0000A168 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A16E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A172 6600                       		bne.s	loc_911C
0000A174 6100 0000                  		bsr.w	SingleObjLoad
0000A178 6600                       		bne.s	Obj28_Display
0000A17A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A17E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A184 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A18A 3028 003E                  		move.w	$3E(a0),d0
0000A18E E248                       		lsr.w	#1,d0
0000A190 1340 001A                  		move.b	d0,$1A(a1)
0000A194                            
0000A194                            Obj28_Display:
0000A194 6000 0000                  		bra.w	DisplaySprite
0000A198                            ; ===========================================================================
0000A198                            
0000A198                            loc_911C:
0000A198 117C 0012 0024             		move.b	#$12,$24(a0)
0000A19E 4268 0010                  		clr.w	$10(a0)
0000A1A2 6000 0000                  		bra.w	DisplaySprite
0000A1A6                            ; ===========================================================================
0000A1A6                            
0000A1A6                            loc_912A:				; XREF: Obj28_Index
0000A1A6 4A28 0001                  		tst.b	1(a0)
0000A1AA 6A00 0000                  		bpl.w	DeleteObject
0000A1AE 6100 0000                  		bsr.w	ObjectFall
0000A1B2 4A68 0012                  		tst.w	$12(a0)
0000A1B6 6B00                       		bmi.s	loc_9180
0000A1B8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1BE 4A41                       		tst.w	d1
0000A1C0 6A00                       		bpl.s	loc_9180
0000A1C2 D368 000C                  		add.w	d1,$C(a0)
0000A1C6 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A1CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A1D2 117C 0001 001A             		move.b	#1,$1A(a0)
0000A1D8 1028 0030                  		move.b	$30(a0),d0
0000A1DC D000                       		add.b	d0,d0
0000A1DE 5800                       		addq.b	#4,d0
0000A1E0 1140 0024                  		move.b	d0,$24(a0)
0000A1E4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A1E8 6700                       		beq.s	loc_9180
0000A1EA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A1F0 6700                       		beq.s	loc_9180
0000A1F2 4468 0010                  		neg.w	$10(a0)
0000A1F6 0868 0000 0001             		bchg	#0,1(a0)
0000A1FC                            
0000A1FC                            loc_9180:
0000A1FC 6000 0000                  		bra.w	DisplaySprite
0000A200                            ; ===========================================================================
0000A200                            
0000A200                            loc_9184:				; XREF: Obj28_Index
0000A200 6100 0000                  		bsr.w	ObjectFall
0000A204 117C 0001 001A             		move.b	#1,$1A(a0)
0000A20A 4A68 0012                  		tst.w	$12(a0)
0000A20E 6B00                       		bmi.s	loc_91AE
0000A210 117C 0000 001A             		move.b	#0,$1A(a0)
0000A216 4EB9 0000 0000             		jsr	ObjHitFloor
0000A21C 4A41                       		tst.w	d1
0000A21E 6A00                       		bpl.s	loc_91AE
0000A220 D368 000C                  		add.w	d1,$C(a0)
0000A224 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A22A                            
0000A22A                            loc_91AE:
0000A22A 4A28 0028                  		tst.b	$28(a0)
0000A22E 6600                       		bne.s	loc_9224
0000A230 4A28 0001                  		tst.b	1(a0)
0000A234 6A00 0000                  		bpl.w	DeleteObject
0000A238 6000 0000                  		bra.w	DisplaySprite
0000A23C                            ; ===========================================================================
0000A23C                            
0000A23C                            loc_91C0:				; XREF: Obj28_Index
0000A23C 6100 0000                  		bsr.w	SpeedToPos
0000A240 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A246 4A68 0012                  		tst.w	$12(a0)
0000A24A 6B00                       		bmi.s	loc_91FC
0000A24C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A252 4A41                       		tst.w	d1
0000A254 6A00                       		bpl.s	loc_91FC
0000A256 D368 000C                  		add.w	d1,$C(a0)
0000A25A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A260 4A28 0028                  		tst.b	$28(a0)
0000A264 6700                       		beq.s	loc_91FC
0000A266 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A26C 6700                       		beq.s	loc_91FC
0000A26E 4468 0010                  		neg.w	$10(a0)
0000A272 0868 0000 0001             		bchg	#0,1(a0)
0000A278                            
0000A278                            loc_91FC:
0000A278 5328 001E                  		subq.b	#1,$1E(a0)
0000A27C 6A00                       		bpl.s	loc_9212
0000A27E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A284 5228 001A                  		addq.b	#1,$1A(a0)
0000A288 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A28E                            
0000A28E                            loc_9212:
0000A28E 4A28 0028                  		tst.b	$28(a0)
0000A292 6600                       		bne.s	loc_9224
0000A294 4A28 0001                  		tst.b	1(a0)
0000A298 6A00 0000                  		bpl.w	DeleteObject
0000A29C 6000 0000                  		bra.w	DisplaySprite
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            loc_9224:				; XREF: Obj28_Index
0000A2A0 3028 0008                  		move.w	8(a0),d0
0000A2A4 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A2A8 6500                       		bcs.s	loc_923C
0000A2AA 0440 0180                  		subi.w	#$180,d0
0000A2AE 6A00                       		bpl.s	loc_923C
0000A2B0 4A28 0001                  		tst.b	1(a0)
0000A2B4 6A00 0000                  		bpl.w	DeleteObject
0000A2B8                            
0000A2B8                            loc_923C:
0000A2B8 6000 0000                  		bra.w	DisplaySprite
0000A2BC                            ; ===========================================================================
0000A2BC                            
0000A2BC                            loc_9240:				; XREF: Obj28_Index
0000A2BC 4A28 0001                  		tst.b	1(a0)
0000A2C0 6A00 0000                  		bpl.w	DeleteObject
0000A2C4 5368 0036                  		subq.w	#1,$36(a0)
0000A2C8 6600 0000                  		bne.w	loc_925C
0000A2CC 117C 0002 0024             		move.b	#2,$24(a0)
0000A2D2 117C 0003 0018             		move.b	#3,$18(a0)
0000A2D8                            
0000A2D8                            loc_925C:
0000A2D8 6000 0000                  		bra.w	DisplaySprite
0000A2DC                            ; ===========================================================================
0000A2DC                            
0000A2DC                            loc_9260:				; XREF: Obj28_Index
0000A2DC 6100 0000                  		bsr.w	sub_9404
0000A2E0 6400                       		bcc.s	loc_927C
0000A2E2 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A2E8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2EE 117C 000E 0024             		move.b	#$E,$24(a0)
0000A2F4 6000 FF46                  		bra.w	loc_91C0
0000A2F8                            ; ===========================================================================
0000A2F8                            
0000A2F8                            loc_927C:
0000A2F8 6000 FFA6                  		bra.w	loc_9224
0000A2FC                            ; ===========================================================================
0000A2FC                            
0000A2FC                            loc_9280:				; XREF: Obj28_Index
0000A2FC 6100 0000                  		bsr.w	sub_9404
0000A300 6A00                       		bpl.s	loc_92B6
0000A302 4268 0010                  		clr.w	$10(a0)
0000A306 4268 0032                  		clr.w	$32(a0)
0000A30A 6100 0000                  		bsr.w	SpeedToPos
0000A30E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A314 6100 0000                  		bsr.w	loc_93C4
0000A318 6100 0000                  		bsr.w	loc_93EC
0000A31C 5328 001E                  		subq.b	#1,$1E(a0)
0000A320 6A00                       		bpl.s	loc_92B6
0000A322 117C 0001 001E             		move.b	#1,$1E(a0)
0000A328 5228 001A                  		addq.b	#1,$1A(a0)
0000A32C 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A332                            
0000A332                            loc_92B6:
0000A332 6000 FF6C                  		bra.w	loc_9224
0000A336                            ; ===========================================================================
0000A336                            
0000A336                            loc_92BA:				; XREF: Obj28_Index
0000A336 6100 0000                  		bsr.w	sub_9404
0000A33A 6A00                       		bpl.s	loc_9310
0000A33C 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A342 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A348 117C 0004 0024             		move.b	#4,$24(a0)
0000A34E 6000 FEB0                  		bra.w	loc_9184
0000A352                            ; ===========================================================================
0000A352                            
0000A352                            loc_92D6:				; XREF: Obj28_Index
0000A352 6100 0000                  		bsr.w	ObjectFall
0000A356 117C 0001 001A             		move.b	#1,$1A(a0)
0000A35C 4A68 0012                  		tst.w	$12(a0)
0000A360 6B00                       		bmi.s	loc_9310
0000A362 117C 0000 001A             		move.b	#0,$1A(a0)
0000A368 4EB9 0000 0000             		jsr	ObjHitFloor
0000A36E 4A41                       		tst.w	d1
0000A370 6A00                       		bpl.s	loc_9310
0000A372 4628 0029                  		not.b	$29(a0)
0000A376 6600                       		bne.s	loc_9306
0000A378 4468 0010                  		neg.w	$10(a0)
0000A37C 0868 0000 0001             		bchg	#0,1(a0)
0000A382                            
0000A382                            loc_9306:
0000A382 D368 000C                  		add.w	d1,$C(a0)
0000A386 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A38C                            
0000A38C                            loc_9310:
0000A38C 6000 FF12                  		bra.w	loc_9224
0000A390                            ; ===========================================================================
0000A390                            
0000A390                            loc_9314:				; XREF: Obj28_Index
0000A390 6100 0000                  		bsr.w	sub_9404
0000A394 6A00                       		bpl.s	loc_932E
0000A396 4268 0010                  		clr.w	$10(a0)
0000A39A 4268 0032                  		clr.w	$32(a0)
0000A39E 6100 0000                  		bsr.w	ObjectFall
0000A3A2 6100 0000                  		bsr.w	loc_93C4
0000A3A6 6100 0000                  		bsr.w	loc_93EC
0000A3AA                            
0000A3AA                            loc_932E:
0000A3AA 6000 FEF4                  		bra.w	loc_9224
0000A3AE                            ; ===========================================================================
0000A3AE                            
0000A3AE                            loc_9332:				; XREF: Obj28_Index
0000A3AE 6100 0000                  		bsr.w	sub_9404
0000A3B2 6A00                       		bpl.s	loc_936C
0000A3B4 6100 0000                  		bsr.w	ObjectFall
0000A3B8 117C 0001 001A             		move.b	#1,$1A(a0)
0000A3BE 4A68 0012                  		tst.w	$12(a0)
0000A3C2 6B00                       		bmi.s	loc_936C
0000A3C4 117C 0000 001A             		move.b	#0,$1A(a0)
0000A3CA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3D0 4A41                       		tst.w	d1
0000A3D2 6A00                       		bpl.s	loc_936C
0000A3D4 4468 0010                  		neg.w	$10(a0)
0000A3D8 0868 0000 0001             		bchg	#0,1(a0)
0000A3DE D368 000C                  		add.w	d1,$C(a0)
0000A3E2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3E8                            
0000A3E8                            loc_936C:
0000A3E8 6000 FEB6                  		bra.w	loc_9224
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            loc_9370:				; XREF: Obj28_Index
0000A3EC 6100 0000                  		bsr.w	sub_9404
0000A3F0 6A00                       		bpl.s	loc_93C0
0000A3F2 6100 0000                  		bsr.w	SpeedToPos
0000A3F6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A3FC 4A68 0012                  		tst.w	$12(a0)
0000A400 6B00                       		bmi.s	loc_93AA
0000A402 4EB9 0000 0000             		jsr	ObjHitFloor
0000A408 4A41                       		tst.w	d1
0000A40A 6A00                       		bpl.s	loc_93AA
0000A40C 4628 0029                  		not.b	$29(a0)
0000A410 6600                       		bne.s	loc_93A0
0000A412 4468 0010                  		neg.w	$10(a0)
0000A416 0868 0000 0001             		bchg	#0,1(a0)
0000A41C                            
0000A41C                            loc_93A0:
0000A41C D368 000C                  		add.w	d1,$C(a0)
0000A420 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A426                            
0000A426                            loc_93AA:
0000A426 5328 001E                  		subq.b	#1,$1E(a0)
0000A42A 6A00                       		bpl.s	loc_93C0
0000A42C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A432 5228 001A                  		addq.b	#1,$1A(a0)
0000A436 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A43C                            
0000A43C                            loc_93C0:
0000A43C 6000 FE62                  		bra.w	loc_9224
0000A440                            ; ===========================================================================
0000A440                            
0000A440                            loc_93C4:
0000A440 117C 0001 001A             		move.b	#1,$1A(a0)
0000A446 4A68 0012                  		tst.w	$12(a0)
0000A44A 6B00                       		bmi.s	locret_93EA
0000A44C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A452 4EB9 0000 0000             		jsr	ObjHitFloor
0000A458 4A41                       		tst.w	d1
0000A45A 6A00                       		bpl.s	locret_93EA
0000A45C D368 000C                  		add.w	d1,$C(a0)
0000A460 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A466                            
0000A466                            locret_93EA:
0000A466 4E75                       		rts	
0000A468                            ; ===========================================================================
0000A468                            
0000A468                            loc_93EC:
0000A468 08E8 0000 0001             		bset	#0,1(a0)
0000A46E 3028 0008                  		move.w	8(a0),d0
0000A472 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A476 6400                       		bcc.s	locret_9402
0000A478 08A8 0000 0001             		bclr	#0,1(a0)
0000A47E                            
0000A47E                            locret_9402:
0000A47E 4E75                       		rts	
0000A480                            
0000A480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A480                            
0000A480                            
0000A480                            sub_9404:
0000A480 3038 D008                  		move.w	($FFFFD008).w,d0
0000A484 9068 0008                  		sub.w	8(a0),d0
0000A488 0440 00B8                  		subi.w	#$B8,d0
0000A48C 4E75                       		rts	
0000A48E                            ; End of function sub_9404
0000A48E                            
0000A48E                            ; ===========================================================================
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E                            ; Object 29 - points that appear when you destroy something
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E                            
0000A48E                            Obj29:					; XREF: Obj_Index
0000A48E 7000                       		moveq	#0,d0
0000A490 1028 0024                  		move.b	$24(a0),d0
0000A494 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A498 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A49C 6000 0000                  		bra.w	DisplaySprite
0000A4A0                            ; ===========================================================================
0000A4A0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A4A2 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A4A4                            ; ===========================================================================
0000A4A4                            
0000A4A4                            Obj29_Main:				; XREF: Obj29_Index
0000A4A4 5428 0024                  		addq.b	#2,$24(a0)
0000A4A8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A4B0 317C 2797 0002             		move.w	#$2797,2(a0)
0000A4B6 117C 0004 0001             		move.b	#4,1(a0)
0000A4BC 117C 0001 0018             		move.b	#1,$18(a0)
0000A4C2 117C 0008 0019             		move.b	#8,$19(a0)
0000A4C8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A4CE                            
0000A4CE                            Obj29_Slower:				; XREF: Obj29_Index
0000A4CE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A4D2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A4D6 6100 0000                  		bsr.w	SpeedToPos
0000A4DA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A4E0 4E75                       		rts	
0000A4E2                            ; ===========================================================================
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2                            ; Sprite mappings - animals
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2                            Map_obj28:
0000A4E2                            	include "_maps\obj28.asm"
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2                            ; Sprite mappings - animals
0000A4E2                            ; ---------------------------------------------------------------------------
0000A4E2 0000                       		dc.w byte_9472-Map_obj28
0000A4E4 0000                       		dc.w byte_9478-Map_obj28
0000A4E6 0000                       		dc.w byte_946C-Map_obj28
0000A4E8 01                         byte_946C:	dc.b 1
0000A4E9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A4EE 01                         byte_9472:	dc.b 1
0000A4EF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A4F4 01                         byte_9478:	dc.b 1
0000A4F5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A4FA                            		even
0000A4FA                            		even
0000A4FA                            
0000A4FA                            Map_obj28a:
0000A4FA                            	include "_maps\obj28a.asm"
0000A4FA                            ; ---------------------------------------------------------------------------
0000A4FA                            ; Sprite mappings - animals
0000A4FA                            ; ---------------------------------------------------------------------------
0000A4FA 0000                       		dc.w byte_948A-Map_obj28a
0000A4FC 0000                       		dc.w byte_9490-Map_obj28a
0000A4FE 0000                       		dc.w byte_9484-Map_obj28a
0000A500 01                         byte_9484:	dc.b 1
0000A501 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A506 01                         byte_948A:	dc.b 1
0000A507 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A50C 01                         byte_9490:	dc.b 1
0000A50D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A512                            		even
0000A512                            		even
0000A512                            
0000A512                            Map_obj28b:
0000A512                            	include "_maps\obj28b.asm"
0000A512                            ; ---------------------------------------------------------------------------
0000A512                            ; Sprite mappings - animals
0000A512                            ; ---------------------------------------------------------------------------
0000A512 0000                       		dc.w byte_94A2-Map_obj28b
0000A514 0000                       		dc.w byte_94A8-Map_obj28b
0000A516 0000                       		dc.w byte_949C-Map_obj28b
0000A518 01                         byte_949C:	dc.b 1
0000A519 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A51E 01                         byte_94A2:	dc.b 1
0000A51F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A524 01                         byte_94A8:	dc.b 1
0000A525 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A52A                            		even
0000A52A                            		even
0000A52A                            
0000A52A                            ; ---------------------------------------------------------------------------
0000A52A                            ; Sprite mappings - points that	appear when you	destroy	something
0000A52A                            ; ---------------------------------------------------------------------------
0000A52A                            Map_obj29:
0000A52A                            	include "_maps\obj29.asm"
0000A52A                            ; ---------------------------------------------------------------------------
0000A52A                            ; Sprite mappings - points that	appear when you	destroy	something
0000A52A                            ; ---------------------------------------------------------------------------
0000A52A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A52E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A532 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A536 0000                       		dc.w byte_94E5-Map_obj29
0000A538 01                         byte_94BC:	dc.b 1
0000A539 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A53E 01                         byte_94C2:	dc.b 1
0000A53F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A544 01                         byte_94C8:	dc.b 1
0000A545 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A54A 01                         byte_94CE:	dc.b 1
0000A54B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A550 01                         byte_94D4:	dc.b 1
0000A551 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A556 02                         byte_94DA:	dc.b 2
0000A557 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A55C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A561 02                         byte_94E5:	dc.b 2
0000A562 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A567 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A56C                            		even
0000A56C                            		even
0000A56C                            
0000A56C                            ; ===========================================================================
0000A56C                            ; ---------------------------------------------------------------------------
0000A56C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A56C                            ; ---------------------------------------------------------------------------
0000A56C                            
0000A56C                            Obj1F:					; XREF: Obj_Index
0000A56C 7000                       		moveq	#0,d0
0000A56E 1028 0024                  		move.b	$24(a0),d0
0000A572 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A576 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A57A                            ; ===========================================================================
0000A57A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A57C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A57E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A580 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A582 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A584                            ; ===========================================================================
0000A584                            
0000A584                            Obj1F_Main:				; XREF: Obj1F_Index
0000A584 117C 0010 0016             		move.b	#$10,$16(a0)
0000A58A 117C 0008 0017             		move.b	#8,$17(a0)
0000A590 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A598 317C 0400 0002             		move.w	#$400,2(a0)
0000A59E 117C 0004 0001             		move.b	#4,1(a0)
0000A5A4 117C 0003 0018             		move.b	#3,$18(a0)
0000A5AA 117C 0006 0020             		move.b	#6,$20(a0)
0000A5B0 117C 0015 0019             		move.b	#$15,$19(a0)
0000A5B6 6100 0000                  		bsr.w	ObjectFall
0000A5BA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A5C0 4A41                       		tst.w	d1
0000A5C2 6A00                       		bpl.s	locret_955A
0000A5C4 D368 000C                  		add.w	d1,$C(a0)
0000A5C8 1143 0026                  		move.b	d3,$26(a0)
0000A5CC 317C 0000 0012             		move.w	#0,$12(a0)
0000A5D2 5428 0024                  		addq.b	#2,$24(a0)
0000A5D6                            
0000A5D6                            locret_955A:
0000A5D6 4E75                       		rts	
0000A5D8                            ; ===========================================================================
0000A5D8                            
0000A5D8                            Obj1F_Action:				; XREF: Obj1F_Index
0000A5D8 7000                       		moveq	#0,d0
0000A5DA 1028 0025                  		move.b	$25(a0),d0
0000A5DE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A5E2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A5E6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A5EC 6100 0000                  		bsr.w	AnimateSprite
0000A5F0 6000 0000                  		bra.w	MarkObjGone
0000A5F4                            ; ===========================================================================
0000A5F4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A5F6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A5F8                            ; ===========================================================================
0000A5F8                            
0000A5F8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A5F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A5FC 6A00                       		bpl.s	locret_95B6
0000A5FE 4A28 0001                  		tst.b	1(a0)
0000A602 6A00                       		bpl.s	Obj1F_Move
0000A604 0868 0001 0032             		bchg	#1,$32(a0)
0000A60A 6600                       		bne.s	Obj1F_MakeFire
0000A60C                            
0000A60C                            Obj1F_Move:
0000A60C 5428 0025                  		addq.b	#2,$25(a0)
0000A610 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A616 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A61C 6100 0000                  		bsr.w	Obj1F_SetAni
0000A620 5600                       		addq.b	#3,d0
0000A622 1140 001C                  		move.b	d0,$1C(a0)
0000A626 0868 0000 0022             		bchg	#0,$22(a0)
0000A62C 6600                       		bne.s	locret_95B6
0000A62E 4468 0010                  		neg.w	$10(a0)		; change direction
0000A632                            
0000A632                            locret_95B6:
0000A632 4E75                       		rts	
0000A634                            ; ===========================================================================
0000A634                            
0000A634                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A634 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A63A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A640 6100 0000                  		bsr.w	SingleObjLoad
0000A644 6600                       		bne.s	Obj1F_MakeFire2
0000A646 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A64A 137C 0006 0024             		move.b	#6,$24(a1)
0000A650 3368 0008 0008             		move.w	8(a0),8(a1)
0000A656 0469 0010 0008             		subi.w	#$10,8(a1)
0000A65C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A662 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A668                            
0000A668                            Obj1F_MakeFire2:
0000A668 6100 0000                  		bsr.w	SingleObjLoad
0000A66C 6600                       		bne.s	locret_9618
0000A66E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A672 137C 0006 0024             		move.b	#6,$24(a1)
0000A678 3368 0008 0008             		move.w	8(a0),8(a1)
0000A67E 0669 0010 0008             		addi.w	#$10,8(a1)
0000A684 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A68A 337C 0100 0010             		move.w	#$100,$10(a1)
0000A690                            
0000A690                            locret_9618:
0000A690 4E75                       		rts	
0000A692                            ; ===========================================================================
0000A692                            
0000A692                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A692 5368 0030                  		subq.w	#1,$30(a0)
0000A696 6B00                       		bmi.s	loc_966E
0000A698 6100 0000                  		bsr.w	SpeedToPos
0000A69C 0868 0000 0032             		bchg	#0,$32(a0)
0000A6A2 6600                       		bne.s	loc_9654
0000A6A4 3628 0008                  		move.w	8(a0),d3
0000A6A8 0643 0010                  		addi.w	#$10,d3
0000A6AC 0828 0000 0022             		btst	#0,$22(a0)
0000A6B2 6700                       		beq.s	loc_9640
0000A6B4 0443 0020                  		subi.w	#$20,d3
0000A6B8                            
0000A6B8                            loc_9640:
0000A6B8 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A6BE 0C41 FFF8                  		cmpi.w	#-8,d1
0000A6C2 6D00                       		blt.s	loc_966E
0000A6C4 0C41 000C                  		cmpi.w	#$C,d1
0000A6C8 6C00                       		bge.s	loc_966E
0000A6CA 4E75                       		rts	
0000A6CC                            ; ===========================================================================
0000A6CC                            
0000A6CC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A6CC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6D2 D368 000C                  		add.w	d1,$C(a0)
0000A6D6 1143 0026                  		move.b	d3,$26(a0)
0000A6DA 6100 0000                  		bsr.w	Obj1F_SetAni
0000A6DE 5600                       		addq.b	#3,d0
0000A6E0 1140 001C                  		move.b	d0,$1C(a0)
0000A6E4 4E75                       		rts	
0000A6E6                            ; ===========================================================================
0000A6E6                            
0000A6E6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A6E6 5528 0025                  		subq.b	#2,$25(a0)
0000A6EA 317C 003B 0030             		move.w	#59,$30(a0)
0000A6F0 317C 0000 0010             		move.w	#0,$10(a0)
0000A6F6 6100 0000                  		bsr.w	Obj1F_SetAni
0000A6FA 1140 001C                  		move.b	d0,$1C(a0)
0000A6FE 4E75                       		rts	
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            
0000A700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A700                            
0000A700                            
0000A700                            Obj1F_SetAni:				; XREF: loc_966E
0000A700 7000                       		moveq	#0,d0
0000A702 1628 0026                  		move.b	$26(a0),d3
0000A706 6B00                       		bmi.s	loc_96A4
0000A708 0C03 0006                  		cmpi.b	#6,d3
0000A70C 6500                       		bcs.s	locret_96A2
0000A70E 7001                       		moveq	#1,d0
0000A710 0828 0000 0022             		btst	#0,$22(a0)
0000A716 6600                       		bne.s	locret_96A2
0000A718 7002                       		moveq	#2,d0
0000A71A                            
0000A71A                            locret_96A2:
0000A71A 4E75                       		rts	
0000A71C                            ; ===========================================================================
0000A71C                            
0000A71C                            loc_96A4:				; XREF: Obj1F_SetAni
0000A71C 0C03 00FA                  		cmpi.b	#-6,d3
0000A720 6200                       		bhi.s	locret_96B6
0000A722 7002                       		moveq	#2,d0
0000A724 0828 0000 0022             		btst	#0,$22(a0)
0000A72A 6600                       		bne.s	locret_96B6
0000A72C 7001                       		moveq	#1,d0
0000A72E                            
0000A72E                            locret_96B6:
0000A72E 4E75                       		rts	
0000A730                            ; End of function Obj1F_SetAni
0000A730                            
0000A730                            ; ===========================================================================
0000A730                            
0000A730                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A730 6100 0000                  		bsr.w	DeleteObject
0000A734 4E75                       		rts	
0000A736                            ; ===========================================================================
0000A736                            ; ---------------------------------------------------------------------------
0000A736                            ; Sub-object - missile that the	Crabmeat throws
0000A736                            ; ---------------------------------------------------------------------------
0000A736                            
0000A736                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A736 5428 0024                  		addq.b	#2,$24(a0)
0000A73A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A742 317C 0400 0002             		move.w	#$400,2(a0)
0000A748 117C 0004 0001             		move.b	#4,1(a0)
0000A74E 117C 0003 0018             		move.b	#3,$18(a0)
0000A754 117C 0087 0020             		move.b	#$87,$20(a0)
0000A75A 117C 0008 0019             		move.b	#8,$19(a0)
0000A760 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A766 117C 0007 001C             		move.b	#7,$1C(a0)
0000A76C                            
0000A76C                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A76C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A772 6100 0000                  		bsr.w	AnimateSprite
0000A776 6100 0000                  		bsr.w	ObjectFall
0000A77A 6100 0000                  		bsr.w	DisplaySprite
0000A77E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A782 0640 00E0                  		addi.w	#$E0,d0
0000A786 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A78A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A78C 4E75                       		rts	
0000A78E                            ; ===========================================================================
0000A78E                            
0000A78E                            Obj1F_Delete2:
0000A78E 6000 0000                  		bra.w	DeleteObject
0000A792                            ; ===========================================================================
0000A792                            Ani_obj1F:
0000A792                            	include "_anim\obj1F.asm"
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            ; Animation script - Crabmeat enemy
0000A792                            ; ---------------------------------------------------------------------------
0000A792 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A798 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A79E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A7A2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A7A6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A7AA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A7AE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A7B4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A7BA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A7C0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A7C4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A7C8                            		even
0000A7C8                            		even
0000A7C8                            
0000A7C8                            ; ---------------------------------------------------------------------------
0000A7C8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A7C8                            ; ---------------------------------------------------------------------------
0000A7C8                            Map_obj1F:
0000A7C8                            	include "_maps\obj1F.asm"
0000A7C8                            Map_1514:
0000A7C8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A7CA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A7CC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A7CE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A7D0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A7D2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A7D4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A7D6 03                         Map_1514_E: 	dc.b $3
0000A7D7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A7DC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A7E1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A7E6 03                         Map_1514_1E: 	dc.b $3
0000A7E7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A7EC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A7F1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A7F6 03                         Map_1514_2E: 	dc.b $3
0000A7F7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A7FC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A801 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A806 03                         Map_1514_3E: 	dc.b $3
0000A807 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A80C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A811 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A816 03                         Map_1514_4E: 	dc.b $3
0000A817 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A81C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A821 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A826 01                         Map_1514_5E: 	dc.b $1
0000A827 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A82C 01                         Map_1514_64: 	dc.b $1
0000A82D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A832                            	even
0000A832                            	even
0000A832                            
0000A832                            ; ===========================================================================
0000A832                            ; ---------------------------------------------------------------------------
0000A832                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A832                            ; ---------------------------------------------------------------------------
0000A832                            
0000A832                            Obj22:					; XREF: Obj_Index
0000A832 7000                       		moveq	#0,d0
0000A834 1028 0024                  		move.b	$24(a0),d0
0000A838 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A83C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A840                            ; ===========================================================================
0000A840 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A842 0000                       		dc.w Obj22_Action-Obj22_Index
0000A844 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A846                            ; ===========================================================================
0000A846                            
0000A846                            Obj22_Main:				; XREF: Obj22_Index
0000A846 5428 0024                  		addq.b	#2,$24(a0)
0000A84A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A852 317C 0444 0002             		move.w	#$444,2(a0)
0000A858 117C 0004 0001             		move.b	#4,1(a0)
0000A85E 117C 0003 0018             		move.b	#3,$18(a0)
0000A864 117C 0008 0020             		move.b	#8,$20(a0)
0000A86A 117C 0018 0019             		move.b	#$18,$19(a0)
0000A870                            
0000A870                            Obj22_Action:				; XREF: Obj22_Index
0000A870 7000                       		moveq	#0,d0
0000A872 1028 0025                  		move.b	$25(a0),d0
0000A876 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A87A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A87E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A884 6100 0000                  		bsr.w	AnimateSprite
0000A888 6000 0000                  		bra.w	MarkObjGone
0000A88C                            ; ===========================================================================
0000A88C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A88E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj22_Move:				; XREF: Obj22_Index2
0000A890 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A894 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A896 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A89C 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A89E 5428 0025                  		addq.b	#2,$25(a0)
0000A8A2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A8A8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A8AE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A8B4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A8BA 6600                       		bne.s	locret_986C	; if not, branch
0000A8BC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A8C0                            
0000A8C0                            locret_986C:
0000A8C0 4E75                       		rts	
0000A8C2                            ; ===========================================================================
0000A8C2                            
0000A8C2                            Obj22_Fire:				; XREF: Obj22_Move
0000A8C2 6100 0000                  		bsr.w	SingleObjLoad
0000A8C6 6600                       		bne.s	locret_98D0
0000A8C8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A8CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A8D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A8D8 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A8DE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A8E4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A8EA 303C 0018                  		move.w	#$18,d0
0000A8EE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A8F4 6600                       		bne.s	loc_98AA	; if not, branch
0000A8F6 4440                       		neg.w	d0
0000A8F8 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A8FC                            
0000A8FC                            loc_98AA:
0000A8FC D169 0008                  		add.w	d0,8(a1)
0000A900 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A906 337C 000E 0032             		move.w	#$E,$32(a1)
0000A90C 2348 003C                  		move.l	a0,$3C(a1)
0000A910 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A916 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A91C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A922                            
0000A922                            locret_98D0:
0000A922 4E75                       		rts	
0000A924                            ; ===========================================================================
0000A924                            
0000A924                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A924 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A928 6B00                       		bmi.s	Obj22_ChgDir
0000A92A 6100 0000                  		bsr.w	SpeedToPos
0000A92E 4A28 0034                  		tst.b	$34(a0)
0000A932 6600                       		bne.s	locret_992A
0000A934 3038 D008                  		move.w	($FFFFD008).w,d0
0000A938 9068 0008                  		sub.w	8(a0),d0
0000A93C 6A00                       		bpl.s	Obj22_SetNrSonic
0000A93E 4440                       		neg.w	d0
0000A940                            
0000A940                            Obj22_SetNrSonic:
0000A940 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A944 6400                       		bcc.s	locret_992A	; if not, branch
0000A946 4A28 0001                  		tst.b	1(a0)
0000A94A 6A00                       		bpl.s	locret_992A
0000A94C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A952 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A958 6000                       		bra.s	Obj22_Stop
0000A95A                            ; ===========================================================================
0000A95A                            
0000A95A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A95A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A960 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A966 317C 003B 0032             		move.w	#59,$32(a0)
0000A96C                            
0000A96C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A96C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A970 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A976 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A97C                            
0000A97C                            locret_992A:
0000A97C 4E75                       		rts	
0000A97E                            ; ===========================================================================
0000A97E                            
0000A97E                            Obj22_Delete:				; XREF: Obj22_Index
0000A97E 6100 0000                  		bsr.w	DeleteObject
0000A982 4E75                       		rts	
0000A984                            ; ===========================================================================
0000A984                            ; ---------------------------------------------------------------------------
0000A984                            ; Object 23 - missile that Buzz	Bomber throws
0000A984                            ; ---------------------------------------------------------------------------
0000A984                            
0000A984                            Obj23:					; XREF: Obj_Index
0000A984 7000                       		moveq	#0,d0
0000A986 1028 0024                  		move.b	$24(a0),d0
0000A98A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A98E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A992                            ; ===========================================================================
0000A992 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A994 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A996 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A998 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A99A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A99C                            ; ===========================================================================
0000A99C                            
0000A99C                            Obj23_Main:				; XREF: Obj23_Index
0000A99C 5368 0032                  		subq.w	#1,$32(a0)
0000A9A0 6A00                       		bpl.s	Obj23_ChkCancel
0000A9A2 5428 0024                  		addq.b	#2,$24(a0)
0000A9A6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A9AE 317C 2444 0002             		move.w	#$2444,2(a0)
0000A9B4 117C 0004 0001             		move.b	#4,1(a0)
0000A9BA 117C 0003 0018             		move.b	#3,$18(a0)
0000A9C0 117C 0008 0019             		move.b	#8,$19(a0)
0000A9C6 0228 0003 0022             		andi.b	#3,$22(a0)
0000A9CC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A9D0 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A9D2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A9D8 117C 0087 0020             		move.b	#$87,$20(a0)
0000A9DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000A9E4 6000                       		bra.s	Obj23_Animate2
0000A9E6                            ; ===========================================================================
0000A9E6                            
0000A9E6                            Obj23_Animate:				; XREF: Obj23_Index
0000A9E6 6100                       		bsr.s	Obj23_ChkCancel
0000A9E8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A9EE 6100 0000                  		bsr.w	AnimateSprite
0000A9F2 6000 0000                  		bra.w	DisplaySprite
0000A9F6                            ; ---------------------------------------------------------------------------
0000A9F6                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A9F6                            ; destroyed, and if it has, then cancel	the missile
0000A9F6                            ; ---------------------------------------------------------------------------
0000A9F6                            
0000A9F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9F6                            
0000A9F6                            
0000A9F6                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A9F6 2268 003C                  		movea.l	$3C(a0),a1
0000A9FA 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A9FE 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000AA00 4E75                       		rts	
0000AA02                            ; End of function Obj23_ChkCancel
0000AA02                            
0000AA02                            ; ===========================================================================
0000AA02                            
0000AA02                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000AA02 0828 0007 0022             		btst	#7,$22(a0)
0000AA08 6600                       		bne.s	Obj23_Explode
0000AA0A 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA10 117C 0001 001C             		move.b	#1,$1C(a0)
0000AA16 6100 0000                  		bsr.w	SpeedToPos
0000AA1A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AA20 6100 0000                  		bsr.w	AnimateSprite
0000AA24 6100 0000                  		bsr.w	DisplaySprite
0000AA28 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA2C 0640 00E0                  		addi.w	#$E0,d0
0000AA30 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AA34 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AA36 4E75                       		rts	
0000AA38                            ; ===========================================================================
0000AA38                            
0000AA38                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AA38 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AA3C 117C 0000 0024             		move.b	#0,$24(a0)
0000AA42 6000 F2D0                  		bra.w	Obj24
0000AA46                            ; ===========================================================================
0000AA46                            
0000AA46                            Obj23_Delete:				; XREF: Obj23_Index
0000AA46 6100 0000                  		bsr.w	DeleteObject
0000AA4A 4E75                       		rts	
0000AA4C                            ; ===========================================================================
0000AA4C                            
0000AA4C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AA4C 4A28 0001                  		tst.b	1(a0)
0000AA50 6AF4                       		bpl.s	Obj23_Delete
0000AA52 6100 0000                  		bsr.w	SpeedToPos
0000AA56                            
0000AA56                            Obj23_Animate2:				; XREF: Obj23_Main
0000AA56 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AA5C 6100 0000                  		bsr.w	AnimateSprite
0000AA60 6100 0000                  		bsr.w	DisplaySprite
0000AA64 4E75                       		rts	
0000AA66                            ; ===========================================================================
0000AA66                            Ani_obj22:
0000AA66                            	include "_anim\obj22.asm"
0000AA66                            ; ---------------------------------------------------------------------------
0000AA66                            ; Animation script - Buzz Bomber enemy
0000AA66                            ; ---------------------------------------------------------------------------
0000AA66 0000                       		dc.w byte_9A1E-Ani_obj22
0000AA68 0000                       		dc.w byte_9A22-Ani_obj22
0000AA6A 0000                       		dc.w byte_9A26-Ani_obj22
0000AA6C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AA70 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AA74 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AA78                            		even
0000AA78                            		even
0000AA78                            
0000AA78                            Ani_obj23:
0000AA78                            	include "_anim\obj23.asm"
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78                            ; Animation script - missile that Buzz Bomber throws
0000AA78                            ; ---------------------------------------------------------------------------
0000AA78 0000                       		dc.w byte_9A2E-Ani_obj23
0000AA7A 0000                       		dc.w byte_9A32-Ani_obj23
0000AA7C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AA80 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AA84                            		even
0000AA84                            		even
0000AA84                            
0000AA84                            ; ---------------------------------------------------------------------------
0000AA84                            ; Sprite mappings - Buzz Bomber	enemy
0000AA84                            ; ---------------------------------------------------------------------------
0000AA84                            Map_obj22:
0000AA84                            	include "_maps\obj22.asm"
0000AA84                            Map_e97a:
0000AA84 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000AA86 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000AA88 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000AA8A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000AA8C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000AA8E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000AA90 06                         Map_e97a_C: 	dc.b $6
0000AA91 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA96 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA9B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AAA0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AAA5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AAAA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AAAF 06                         Map_e97a_2B: 	dc.b $6
0000AAB0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AAB5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AABA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AABF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AAC4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AAC9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AACE 07                         Map_e97a_4A: 	dc.b $7
0000AACF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000AAD4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AAD9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AADE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AAE3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AAE8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AAED F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AAF2 07                         Map_e97a_6E: 	dc.b $7
0000AAF3 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000AAF8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AAFD F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AB02 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AB07 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AB0C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AB11 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AB16 06                         Map_e97a_92: 	dc.b $6
0000AB17 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AB1C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AB21 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AB26 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AB2B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AB30 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AB35 04                         Map_e97a_B1: 	dc.b $4
0000AB36 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AB3B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AB40 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AB45 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AB4A                            	even
0000AB4A                            	even
0000AB4A                            
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A                            ; Sprite mappings - missile that Buzz Bomber throws
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A                            Map_obj23:
0000AB4A                            	include "_maps\obj23.asm"
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A                            ; Sprite mappings - missile that Buzz Bomber throws
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AB4E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AB52 01                         byte_9B0E:	dc.b 1
0000AB53 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AB58 01                         byte_9B14:	dc.b 1
0000AB59 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AB5E 01                         byte_9B1A:	dc.b 1
0000AB5F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AB64 01                         byte_9B20:	dc.b 1
0000AB65 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AB6A                            		even
0000AB6A                            		even
0000AB6A                            
0000AB6A                            ; ===========================================================================
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            ; Object 25 - rings
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            
0000AB6A                            Obj25:					; XREF: Obj_Index
0000AB6A 7000                       		moveq	#0,d0
0000AB6C 1028 0024                  		move.b	$24(a0),d0
0000AB70 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AB74 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AB78                            ; ===========================================================================
0000AB78 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AB7A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AB7C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AB7E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AB80 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AB82                            ; ---------------------------------------------------------------------------
0000AB82                            ; Distances between rings (format: horizontal, vertical)
0000AB82                            ; ---------------------------------------------------------------------------
0000AB82 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000AB84 1800                       		dc.b $18, 0		; horizontal normal
0000AB86 2000                       		dc.b $20, 0		; horizontal wide
0000AB88 0010                       		dc.b 0,	$10		; vertical tight
0000AB8A 0018                       		dc.b 0,	$18		; vertical normal
0000AB8C 0020                       		dc.b 0,	$20		; vertical wide
0000AB8E 1010                       		dc.b $10, $10		; diagonal
0000AB90 1818                       		dc.b $18, $18
0000AB92 2020                       		dc.b $20, $20
0000AB94 F010                       		dc.b $F0, $10
0000AB96 E818                       		dc.b $E8, $18
0000AB98 E020                       		dc.b $E0, $20
0000AB9A 1008                       		dc.b $10, 8
0000AB9C 1810                       		dc.b $18, $10
0000AB9E F008                       		dc.b $F0, 8
0000ABA0 E810                       		dc.b $E8, $10
0000ABA2                            ; ===========================================================================
0000ABA2                            
0000ABA2                            Obj25_Main:				; XREF: Obj25_Index
0000ABA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ABA6 7000                       		moveq	#0,d0
0000ABA8 1028 0023                  		move.b	$23(a0),d0
0000ABAC 45F2 0002                  		lea	2(a2,d0.w),a2
0000ABB0 1812                       		move.b	(a2),d4
0000ABB2 1228 0028                  		move.b	$28(a0),d1
0000ABB6 1001                       		move.b	d1,d0
0000ABB8 0241 0007                  		andi.w	#7,d1
0000ABBC 0C41 0007                  		cmpi.w	#7,d1
0000ABC0 6600                       		bne.s	loc_9B80
0000ABC2 7206                       		moveq	#6,d1
0000ABC4                            
0000ABC4                            loc_9B80:
0000ABC4 4841                       		swap	d1
0000ABC6 323C 0000                  		move.w	#0,d1
0000ABCA E808                       		lsr.b	#4,d0
0000ABCC D040                       		add.w	d0,d0
0000ABCE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000ABD2 4885                       		ext.w	d5
0000ABD4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000ABD8 4886                       		ext.w	d6
0000ABDA 2248                       		movea.l	a0,a1
0000ABDC 3428 0008                  		move.w	8(a0),d2
0000ABE0 3628 000C                  		move.w	$C(a0),d3
0000ABE4 E20C                       		lsr.b	#1,d4
0000ABE6 6500                       		bcs.s	loc_9C02
0000ABE8 0892 0007                  		bclr	#7,(a2)
0000ABEC 6000                       		bra.s	loc_9BBA
0000ABEE                            ; ===========================================================================
0000ABEE                            
0000ABEE                            Obj25_MakeRings:
0000ABEE 4841                       		swap	d1
0000ABF0 E20C                       		lsr.b	#1,d4
0000ABF2 6500                       		bcs.s	loc_9C02
0000ABF4 0892 0007                  		bclr	#7,(a2)
0000ABF8 6100 0000                  		bsr.w	SingleObjLoad
0000ABFC 6600                       		bne.s	loc_9C0E
0000ABFE                            
0000ABFE                            loc_9BBA:				; XREF: Obj25_Main
0000ABFE 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000AC02 5429 0024                  		addq.b	#2,$24(a1)
0000AC06 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000AC0A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000AC10 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000AC14 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AC1C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000AC22 137C 0004 0001             		move.b	#4,1(a1)
0000AC28 137C 0002 0018             		move.b	#2,$18(a1)
0000AC2E 137C 0047 0020             		move.b	#$47,$20(a1)
0000AC34 137C 0008 0019             		move.b	#8,$19(a1)
0000AC3A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000AC40 1341 0034                  		move.b	d1,$34(a1)
0000AC44                            
0000AC44                            loc_9C02:
0000AC44 5241                       		addq.w	#1,d1
0000AC46 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000AC48 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000AC4A 4841                       		swap	d1
0000AC4C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000AC50                            
0000AC50                            loc_9C0E:
0000AC50 0812 0000                  		btst	#0,(a2)
0000AC54 6600 0000                  		bne.w	DeleteObject
0000AC58                            
0000AC58                            Obj25_Animate:				; XREF: Obj25_Index
0000AC58 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000AC5E 6100 0000                  		bsr.w	DisplaySprite
0000AC62 3028 0032                  		move.w	$32(a0),d0
0000AC66 0240 FF80                  		andi.w	#$FF80,d0
0000AC6A 3238 F700                  		move.w	($FFFFF700).w,d1
0000AC6E 0441 0080                  		subi.w	#$80,d1
0000AC72 0241 FF80                  		andi.w	#$FF80,d1
0000AC76 9041                       		sub.w	d1,d0
0000AC78 0C40 0280                  		cmpi.w	#$280,d0
0000AC7C 6200                       		bhi.s	Obj25_Delete
0000AC7E 4E75                       		rts	
0000AC80                            ; ===========================================================================
0000AC80                            
0000AC80                            Obj25_Collect:				; XREF: Obj25_Index
0000AC80 5428 0024                  		addq.b	#2,$24(a0)
0000AC84 117C 0000 0020             		move.b	#0,$20(a0)
0000AC8A 117C 0001 0018             		move.b	#1,$18(a0)
0000AC90 6100 0000                  		bsr.w	CollectRing
0000AC94 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC98 7000                       		moveq	#0,d0
0000AC9A 1028 0023                  		move.b	$23(a0),d0
0000AC9E 1228 0034                  		move.b	$34(a0),d1
0000ACA2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000ACA6                            
0000ACA6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000ACA6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000ACAC 6100 0000                  		bsr.w	AnimateSprite
0000ACB0 6000 0000                  		bra.w	DisplaySprite
0000ACB4                            ; ===========================================================================
0000ACB4                            
0000ACB4                            Obj25_Delete:				; XREF: Obj25_Index
0000ACB4 6000 0000                  		bra.w	DeleteObject
0000ACB8                            
0000ACB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACB8                            
0000ACB8                            
0000ACB8                            CollectRing:				; XREF: Obj25_Collect
0000ACB8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000ACBC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000ACC2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000ACC6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000ACCC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000ACCE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000ACD4 6700                       		beq.s	loc_9CA4
0000ACD6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000ACDC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000ACDE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000ACE4 6600                       		bne.s	Obj25_PlaySnd
0000ACE6                            
0000ACE6                            loc_9CA4:
0000ACE6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ACEA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000ACEE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000ACF2                            
0000ACF2                            Obj25_PlaySnd:
0000ACF2 4EF9 0000 1D16             		jmp	(PlaySound_Special).l
0000ACF8                            ; End of function CollectRing
0000ACF8                            
0000ACF8                            ; ===========================================================================
0000ACF8                            ; ---------------------------------------------------------------------------
0000ACF8                            ; Object 37 - rings flying out of Sonic	when he's hit
0000ACF8                            ; ---------------------------------------------------------------------------
0000ACF8                            
0000ACF8                            Obj37:					; XREF: Obj_Index
0000ACF8 7000                       		moveq	#0,d0
0000ACFA 1028 0024                  		move.b	$24(a0),d0
0000ACFE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AD02 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AD06                            ; ===========================================================================
0000AD06 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AD08 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AD0A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AD0C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AD0E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AD10                            ; ===========================================================================
0000AD10                            
0000AD10                            Obj37_CountRings:			; XREF: Obj37_Index
0000AD10 2248                       		movea.l	a0,a1
0000AD12 7A00                       		moveq	#0,d5
0000AD14 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AD18 7020                       		moveq	#32,d0
0000AD1A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AD1C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AD1E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AD20                            
0000AD20                            loc_9CDE:
0000AD20 5345                       		subq.w	#1,d5
0000AD22 383C 0288                  		move.w	#$288,d4
0000AD26 6000                       		bra.s	Obj37_MakeRings
0000AD28                            ; ===========================================================================
0000AD28                            
0000AD28                            Obj37_Loop:
0000AD28 6100 0000                  		bsr.w	SingleObjLoad
0000AD2C 6600 0000                  		bne.w	Obj37_ResetCounter
0000AD30                            
0000AD30                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AD30 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AD34 5429 0024                  		addq.b	#2,$24(a1)
0000AD38 137C 0008 0016             		move.b	#8,$16(a1)
0000AD3E 137C 0008 0017             		move.b	#8,$17(a1)
0000AD44 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD50 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AD58 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000AD5E 137C 0004 0001             		move.b	#4,1(a1)
0000AD64 137C 0003 0018             		move.b	#3,$18(a1)
0000AD6A 137C 0047 0020             		move.b	#$47,$20(a1)
0000AD70 137C 0008 0019             		move.b	#8,$19(a1)
0000AD76 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000AD7C 4A44                       		tst.w	d4
0000AD7E 6B00                       		bmi.s	loc_9D62
0000AD80 3004                       		move.w	d4,d0
0000AD82 6100 8734                  		bsr.w	CalcSine
0000AD86 3404                       		move.w	d4,d2
0000AD88 E04A                       		lsr.w	#8,d2
0000AD8A E560                       		asl.w	d2,d0
0000AD8C E561                       		asl.w	d2,d1
0000AD8E 3400                       		move.w	d0,d2
0000AD90 3601                       		move.w	d1,d3
0000AD92 0604 0010                  		addi.b	#$10,d4
0000AD96 6400                       		bcc.s	loc_9D62
0000AD98 0444 0080                  		subi.w	#$80,d4
0000AD9C 6400                       		bcc.s	loc_9D62
0000AD9E 383C 0288                  		move.w	#$288,d4
0000ADA2                            
0000ADA2                            loc_9D62:
0000ADA2 3342 0010                  		move.w	d2,$10(a1)
0000ADA6 3343 0012                  		move.w	d3,$12(a1)
0000ADAA 4442                       		neg.w	d2
0000ADAC 4444                       		neg.w	d4
0000ADAE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000ADB2                            
0000ADB2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000ADB2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000ADB8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000ADBE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000ADC4 303C 00C6                  		move.w	#$C6,d0
0000ADC8 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000ADCE                            
0000ADCE                            Obj37_Bounce:				; XREF: Obj37_Index
0000ADCE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000ADD4 6100 0000                  		bsr.w	SpeedToPos
0000ADD8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000ADDE 6B00                       		bmi.s	Obj37_ChkDel
0000ADE0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000ADE4 D007                       		add.b	d7,d0
0000ADE6 0200 0003                  		andi.b	#3,d0
0000ADEA 6600                       		bne.s	Obj37_ChkDel
0000ADEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADF2 4A41                       		tst.w	d1
0000ADF4 6A00                       		bpl.s	Obj37_ChkDel
0000ADF6 D368 000C                  		add.w	d1,$C(a0)
0000ADFA 3028 0012                  		move.w	$12(a0),d0
0000ADFE E440                       		asr.w	#2,d0
0000AE00 9168 0012                  		sub.w	d0,$12(a0)
0000AE04 4468 0012                  		neg.w	$12(a0)
0000AE08                            
0000AE08                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000AE08 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AE0C 6700                       		beq.s	Obj37_Delete
0000AE0E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AE12 0640 00E0                  		addi.w	#$E0,d0
0000AE16 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000AE1A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000AE1C 6000 0000                  		bra.w	DisplaySprite
0000AE20                            ; ===========================================================================
0000AE20                            
0000AE20                            Obj37_Collect:				; XREF: Obj37_Index
0000AE20 5428 0024                  		addq.b	#2,$24(a0)
0000AE24 117C 0000 0020             		move.b	#0,$20(a0)
0000AE2A 117C 0001 0018             		move.b	#1,$18(a0)
0000AE30 6100 FE86                  		bsr.w	CollectRing
0000AE34                            
0000AE34                            Obj37_Sparkle:				; XREF: Obj37_Index
0000AE34 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AE3A 6100 0000                  		bsr.w	AnimateSprite
0000AE3E 6000 0000                  		bra.w	DisplaySprite
0000AE42                            ; ===========================================================================
0000AE42                            
0000AE42                            Obj37_Delete:				; XREF: Obj37_Index
0000AE42 6000 0000                  		bra.w	DeleteObject
0000AE46                            ; ===========================================================================
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            ; Object 4B - giant ring for entry to special stage
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            
0000AE46                            Obj4B:					; XREF: Obj_Index
0000AE46 7000                       		moveq	#0,d0
0000AE48 1028 0024                  		move.b	$24(a0),d0
0000AE4C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000AE50 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000AE54                            ; ===========================================================================
0000AE54 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000AE56 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000AE58 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000AE5A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000AE5C                            ; ===========================================================================
0000AE5C                            
0000AE5C                            Obj4B_Main:				; XREF: Obj4B_Index
0000AE5C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000AE64 317C 2400 0002             		move.w	#$2400,2(a0)
0000AE6A 0028 0004 0001             		ori.b	#4,1(a0)
0000AE70 117C 0040 0019             		move.b	#$40,$19(a0)
0000AE76 4A28 0001                  		tst.b	1(a0)
0000AE7A 6A00                       		bpl.s	Obj4B_Animate
0000AE7C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000AE82 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000AE86 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000AE8C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000AE8E 4E75                       		rts	
0000AE90                            ; ===========================================================================
0000AE90                            
0000AE90                            Obj4B_Okay:				; XREF: Obj4B_Main
0000AE90 5428 0024                  		addq.b	#2,$24(a0)
0000AE94 117C 0002 0018             		move.b	#2,$18(a0)
0000AE9A 117C 0052 0020             		move.b	#$52,$20(a0)
0000AEA0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000AEA6                            
0000AEA6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000AEA6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AEAC 3028 0008                  		move.w	8(a0),d0
0000AEB0 0240 FF80                  		andi.w	#$FF80,d0
0000AEB4 3238 F700                  		move.w	($FFFFF700).w,d1
0000AEB8 0441 0080                  		subi.w	#$80,d1
0000AEBC 0241 FF80                  		andi.w	#$FF80,d1
0000AEC0 9041                       		sub.w	d1,d0
0000AEC2 0C40 0280                  		cmpi.w	#$280,d0
0000AEC6 6200 0000                  		bhi.w	DeleteObject
0000AECA 6000 0000                  		bra.w	DisplaySprite
0000AECE                            ; ===========================================================================
0000AECE                            
0000AECE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000AECE 5528 0024                  		subq.b	#2,$24(a0)
0000AED2 117C 0000 0020             		move.b	#0,$20(a0)
0000AED8 6100 0000                  		bsr.w	SingleObjLoad
0000AEDC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000AEE0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000AEE4 3368 0008 0008             		move.w	8(a0),8(a1)
0000AEEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AEF0 2348 003C                  		move.l	a0,$3C(a1)
0000AEF4 3038 D008                  		move.w	($FFFFD008).w,d0
0000AEF8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000AEFC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000AEFE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000AF04                            
0000AF04                            Obj4B_PlaySnd:
0000AF04 303C 00C3                  		move.w	#$C3,d0
0000AF08 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000AF0E 6096                       		bra.s	Obj4B_Animate
0000AF10                            ; ===========================================================================
0000AF10                            
0000AF10                            Obj4B_Delete:				; XREF: Obj4B_Index
0000AF10 6000 0000                  		bra.w	DeleteObject
0000AF14                            ; ===========================================================================
0000AF14                            ; ---------------------------------------------------------------------------
0000AF14                            ; Object 7C - flash effect when	you collect the	giant ring
0000AF14                            ; ---------------------------------------------------------------------------
0000AF14                            
0000AF14                            Obj7C:					; XREF: Obj_Index
0000AF14 7000                       		moveq	#0,d0
0000AF16 1028 0024                  		move.b	$24(a0),d0
0000AF1A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000AF1E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000AF22                            ; ===========================================================================
0000AF22 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000AF24 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000AF26 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000AF28                            ; ===========================================================================
0000AF28                            
0000AF28                            Obj7C_Main:				; XREF: Obj7C_Index
0000AF28 5428 0024                  		addq.b	#2,$24(a0)
0000AF2C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AF34 317C 2462 0002             		move.w	#$2462,2(a0)
0000AF3A 0028 0004 0001             		ori.b	#4,1(a0)
0000AF40 117C 0000 0018             		move.b	#0,$18(a0)
0000AF46 117C 0020 0019             		move.b	#$20,$19(a0)
0000AF4C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AF52                            
0000AF52                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AF52 6100                       		bsr.s	Obj7C_Collect
0000AF54 3028 0008                  		move.w	8(a0),d0
0000AF58 0240 FF80                  		andi.w	#$FF80,d0
0000AF5C 3238 F700                  		move.w	($FFFFF700).w,d1
0000AF60 0441 0080                  		subi.w	#$80,d1
0000AF64 0241 FF80                  		andi.w	#$FF80,d1
0000AF68 9041                       		sub.w	d1,d0
0000AF6A 0C40 0280                  		cmpi.w	#$280,d0
0000AF6E 6200 0000                  		bhi.w	DeleteObject
0000AF72 6000 0000                  		bra.w	DisplaySprite
0000AF76                            
0000AF76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF76                            
0000AF76                            
0000AF76                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AF76 5328 001E                  		subq.b	#1,$1E(a0)
0000AF7A 6A00                       		bpl.s	locret_9F76
0000AF7C 117C 0001 001E             		move.b	#1,$1E(a0)
0000AF82 5228 001A                  		addq.b	#1,$1A(a0)
0000AF86 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AF8C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AF8E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AF94 6600                       		bne.s	locret_9F76	; if not, branch
0000AF96 2268 003C                  		movea.l	$3C(a0),a1
0000AF9A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AFA0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AFA6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AFAC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AFB0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AFB4                            
0000AFB4                            locret_9F76:
0000AFB4 4E75                       		rts	
0000AFB6                            ; ===========================================================================
0000AFB6                            
0000AFB6                            Obj7C_End:				; XREF: Obj7C_Collect
0000AFB6 5428 0024                  		addq.b	#2,$24(a0)
0000AFBA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AFC0 588F                       		addq.l	#4,sp
0000AFC2 4E75                       		rts	
0000AFC4                            ; End of function Obj7C_Collect
0000AFC4                            
0000AFC4                            ; ===========================================================================
0000AFC4                            
0000AFC4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AFC4 6000 0000                  		bra.w	DeleteObject
0000AFC8                            ; ===========================================================================
0000AFC8                            Ani_obj25:
0000AFC8                            	include "_anim\obj25.asm"
0000AFC8                            ; ---------------------------------------------------------------------------
0000AFC8                            ; Animation script - ring
0000AFC8                            ; ---------------------------------------------------------------------------
0000AFC8 0000                       		dc.w byte_9F8C-Ani_obj25
0000AFCA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AFD0                            		even
0000AFD0                            		even
0000AFD0                            
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            ; Sprite mappings - rings
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            Map_obj25:
0000AFD0                            	include "_maps\obj25.asm"
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            ; Sprite mappings - rings
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AFD4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AFD8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AFDC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AFE0 01                         byte_9FA2:	dc.b 1
0000AFE1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AFE6 01                         byte_9FA8:	dc.b 1
0000AFE7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AFEC 01                         byte_9FAE:	dc.b 1
0000AFED F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AFF2 01                         byte_9FB4:	dc.b 1
0000AFF3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AFF8 01                         byte_9FBA:	dc.b 1
0000AFF9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AFFE 01                         byte_9FC0:	dc.b 1
0000AFFF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B004 01                         byte_9FC6:	dc.b 1
0000B005 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B00A 01                         byte_9FCC:	dc.b 1
0000B00B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B010                            		even
0000B010                            		even
0000B010                            
0000B010                            ; ---------------------------------------------------------------------------
0000B010                            ; Sprite mappings - giant ring
0000B010                            ; ---------------------------------------------------------------------------
0000B010                            Map_obj4B:
0000B010                            	include "_maps\obj4B.asm"
0000B010                            ; ---------------------------------------------------------------------------
0000B010                            ; Sprite mappings - giant ring
0000B010                            ; ---------------------------------------------------------------------------
0000B010 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B014 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B018 0A                         byte_9FDA:	dc.b $A
0000B019 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B01E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B023 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B028 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B02D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B032 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B037 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B03C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B041 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B046 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B04B 08                         byte_A00D:	dc.b 8
0000B04C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B051 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B056 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B05B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B060 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B065 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B06A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B06F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B074 04                         byte_A036:	dc.b 4
0000B075 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B07A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B07F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B084 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B089 08                         byte_A04B:	dc.b 8
0000B08A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B08F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B094 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B099 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B09E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B0A3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B0A8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B0AD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B0B2                            		even
0000B0B2                            		even
0000B0B2                            
0000B0B2                            ; ---------------------------------------------------------------------------
0000B0B2                            ; Sprite mappings - flash effect when you collect the giant ring
0000B0B2                            ; ---------------------------------------------------------------------------
0000B0B2                            Map_obj7C:
0000B0B2                            	include "_maps\obj7C.asm"
0000B0B2                            ; ---------------------------------------------------------------------------
0000B0B2                            ; Sprite mappings - flash effect when you collect the giant ring
0000B0B2                            ; ---------------------------------------------------------------------------
0000B0B2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B0B6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B0BA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B0BE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B0C2 02                         byte_A084:	dc.b 2
0000B0C3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B0C8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B0CD 04                         byte_A08F:	dc.b 4
0000B0CE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B0D3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B0D8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B0DD 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B0E2 04                         byte_A0A4:	dc.b 4
0000B0E3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B0E8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B0ED 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B0F2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B0F7 04                         byte_A0B9:	dc.b 4
0000B0F8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B0FD E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B102 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B107 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B10C 04                         byte_A0CE:	dc.b 4
0000B10D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B112 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B117 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B11C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B121 04                         byte_A0E3:	dc.b 4
0000B122 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B127 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B12C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B131 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B136 02                         byte_A0F8:	dc.b 2
0000B137 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B13C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B141 04                         byte_A103:	dc.b 4
0000B142 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B147 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B14C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B151 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B156                            		even
0000B156                            		even
0000B156                            
0000B156                            ; ===========================================================================
0000B156                            ; ---------------------------------------------------------------------------
0000B156                            ; Object 26 - monitors
0000B156                            ; ---------------------------------------------------------------------------
0000B156                            
0000B156                            Obj26:					; XREF: Obj_Index
0000B156 7000                       		moveq	#0,d0
0000B158 1028 0024                  		move.b	$24(a0),d0
0000B15C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B160 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B164                            ; ===========================================================================
0000B164 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B166 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B168 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B16A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B16C 0000                       		dc.w Obj26_Display-Obj26_Index
0000B16E                            ; ===========================================================================
0000B16E                            
0000B16E                            Obj26_Main:				; XREF: Obj26_Index
0000B16E 5428 0024                  		addq.b	#2,$24(a0)
0000B172 117C 000E 0016             		move.b	#$E,$16(a0)
0000B178 117C 000E 0017             		move.b	#$E,$17(a0)
0000B17E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B186 317C 0680 0002             		move.w	#$680,2(a0)
0000B18C 117C 0004 0001             		move.b	#4,1(a0)
0000B192 117C 0003 0018             		move.b	#3,$18(a0)
0000B198 117C 000F 0019             		move.b	#$F,$19(a0)
0000B19E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B1A2 7000                       		moveq	#0,d0
0000B1A4 1028 0023                  		move.b	$23(a0),d0
0000B1A8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000B1AE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000B1B4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B1B6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B1BC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B1C2 4E75                       		rts	
0000B1C4                            ; ===========================================================================
0000B1C4                            
0000B1C4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B1C4 117C 0046 0020             		move.b	#$46,$20(a0)
0000B1CA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B1D0                            
0000B1D0                            Obj26_Solid:				; XREF: Obj26_Index
0000B1D0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B1D4 6700                       		beq.s	loc_A1EC	; if not, branch
0000B1D6 5500                       		subq.b	#2,d0
0000B1D8 6600                       		bne.s	Obj26_Fall
0000B1DA 7200                       		moveq	#0,d1
0000B1DC 1228 0019                  		move.b	$19(a0),d1
0000B1E0 0641 000B                  		addi.w	#$B,d1
0000B1E4 6100 D37C                  		bsr.w	ExitPlatform
0000B1E8 0829 0003 0022             		btst	#3,$22(a1)
0000B1EE 6600 0000                  		bne.w	loc_A1BC
0000B1F2 4228 0025                  		clr.b	$25(a0)
0000B1F6 6000 0000                  		bra.w	Obj26_Animate
0000B1FA                            ; ===========================================================================
0000B1FA                            
0000B1FA                            loc_A1BC:				; XREF: Obj26_Solid
0000B1FA 363C 0010                  		move.w	#$10,d3
0000B1FE 3428 0008                  		move.w	8(a0),d2
0000B202 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000B206 6000 0000                  		bra.w	Obj26_Animate
0000B20A                            ; ===========================================================================
0000B20A                            
0000B20A                            Obj26_Fall:				; XREF: Obj26_Solid
0000B20A 6100 0000                  		bsr.w	ObjectFall
0000B20E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B214 4A41                       		tst.w	d1
0000B216 6A00 0000                  		bpl.w	Obj26_Animate
0000B21A D368 000C                  		add.w	d1,$C(a0)
0000B21E 4268 0012                  		clr.w	$12(a0)
0000B222 4228 0025                  		clr.b	$25(a0)
0000B226 6000 0000                  		bra.w	Obj26_Animate
0000B22A                            ; ===========================================================================
0000B22A                            
0000B22A                            loc_A1EC:				; XREF: Obj26_Solid
0000B22A 323C 001A                  		move.w	#$1A,d1
0000B22E 343C 000F                  		move.w	#$F,d2
0000B232 6100 0000                  		bsr.w	Obj26_SolidSides
0000B236 6700 0000                  		beq.w	loc_A25C
0000B23A 4A69 0012                  		tst.w	$12(a1)
0000B23E 6B00                       		bmi.s	loc_A20A
0000B240 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B246 6700                       		beq.s	loc_A25C	; if yes, branch
0000B248                            
0000B248                            loc_A20A:
0000B248 4A41                       		tst.w	d1
0000B24A 6A00                       		bpl.s	loc_A220
0000B24C 9769 000C                  		sub.w	d3,$C(a1)
0000B250 6100 D1FE                  		bsr.w	loc_74AE
0000B254 117C 0002 0025             		move.b	#2,$25(a0)
0000B25A 6000 0000                  		bra.w	Obj26_Animate
0000B25E                            ; ===========================================================================
0000B25E                            
0000B25E                            loc_A220:
0000B25E 4A40                       		tst.w	d0
0000B260 6700 0000                  		beq.w	loc_A246
0000B264 6B00                       		bmi.s	loc_A230
0000B266 4A69 0010                  		tst.w	$10(a1)
0000B26A 6B00                       		bmi.s	loc_A246
0000B26C 6000                       		bra.s	loc_A236
0000B26E                            ; ===========================================================================
0000B26E                            
0000B26E                            loc_A230:
0000B26E 4A69 0010                  		tst.w	$10(a1)
0000B272 6A00                       		bpl.s	loc_A246
0000B274                            
0000B274                            loc_A236:
0000B274 9169 0008                  		sub.w	d0,8(a1)
0000B278 337C 0000 0014             		move.w	#0,$14(a1)
0000B27E 337C 0000 0010             		move.w	#0,$10(a1)
0000B284                            
0000B284                            loc_A246:
0000B284 0829 0001 0022             		btst	#1,$22(a1)
0000B28A 6600                       		bne.s	loc_A26A
0000B28C 08E9 0005 0022             		bset	#5,$22(a1)
0000B292 08E8 0005 0022             		bset	#5,$22(a0)
0000B298 6000                       		bra.s	Obj26_Animate
0000B29A                            ; ===========================================================================
0000B29A                            
0000B29A                            loc_A25C:
0000B29A 0828 0005 0022             		btst	#5,$22(a0)
0000B2A0 6700                       		beq.s	Obj26_Animate
0000B2A2 337C 0001 001C             		move.w	#1,$1C(a1)
0000B2A8                            
0000B2A8                            loc_A26A:
0000B2A8 08A8 0005 0022             		bclr	#5,$22(a0)
0000B2AE 08A9 0005 0022             		bclr	#5,$22(a1)
0000B2B4                            
0000B2B4                            Obj26_Animate:				; XREF: Obj26_Index
0000B2B4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B2BA 6100 0000                  		bsr.w	AnimateSprite
0000B2BE                            
0000B2BE                            Obj26_Display:				; XREF: Obj26_Index
0000B2BE 6100 0000                  		bsr.w	DisplaySprite
0000B2C2 3028 0008                  		move.w	8(a0),d0
0000B2C6 0240 FF80                  		andi.w	#$FF80,d0
0000B2CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B2CE 0441 0080                  		subi.w	#$80,d1
0000B2D2 0241 FF80                  		andi.w	#$FF80,d1
0000B2D6 9041                       		sub.w	d1,d0
0000B2D8 0C40 0280                  		cmpi.w	#$280,d0
0000B2DC 6200 0000                  		bhi.w	DeleteObject
0000B2E0 4E75                       		rts	
0000B2E2                            ; ===========================================================================
0000B2E2                            
0000B2E2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B2E2 5428 0024                  		addq.b	#2,$24(a0)
0000B2E6 117C 0000 0020             		move.b	#0,$20(a0)
0000B2EC 6100 0000                  		bsr.w	SingleObjLoad
0000B2F0 6600                       		bne.s	Obj26_Explode
0000B2F2 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B2F6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B2FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B302 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B308 7400                       		moveq	#0,d2	; GMZ
0000B30A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000B30C                            
0000B30C                            Obj26_Explode:
0000B30C 6100 0000                  		bsr.w	SingleObjLoad
0000B310 6600                       		bne.s	Obj26_SetBroken
0000B312 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000B316 5429 0024                  		addq.b	#2,$24(a1)
0000B31A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000B31E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B324 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B32A                            
0000B32A                            Obj26_NextExplosion:
0000B32A 5802                       		addq.b	#4,d2
0000B32C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000B330                            
0000B330                            Obj26_SetBroken:
0000B330 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B334 7000                       		moveq	#0,d0
0000B336 1028 0023                  		move.b	$23(a0),d0
0000B33A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000B340 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B346 6000 0000                  		bra.w	DisplaySprite
0000B34A                            ; ===========================================================================
0000B34A                            ; ---------------------------------------------------------------------------
0000B34A                            ; Object 2E - contents of monitors
0000B34A                            ; ---------------------------------------------------------------------------
0000B34A                            
0000B34A                            Obj2E:					; XREF: Obj_Index
0000B34A 7000                       		moveq	#0,d0
0000B34C 1028 0024                  		move.b	$24(a0),d0
0000B350 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B354 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B358 6000 0000                  		bra.w	DisplaySprite
0000B35C                            ; ===========================================================================
0000B35C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B35E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B360 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B362                            ; ===========================================================================
0000B362                            
0000B362                            Obj2E_Main:				; XREF: Obj2E_Index
0000B362 5428 0024                  		addq.b	#2,$24(a0)
0000B366 317C 0680 0002             		move.w	#$680,2(a0)
0000B36C 117C 0024 0001             		move.b	#$24,1(a0)
0000B372 117C 0003 0018             		move.b	#3,$18(a0)
0000B378 117C 0008 0019             		move.b	#8,$19(a0)
0000B37E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B384 7000                       		moveq	#0,d0
0000B386 1028 001C                  		move.b	$1C(a0),d0
0000B38A 5400                       		addq.b	#2,d0
0000B38C 1140 001A                  		move.b	d0,$1A(a0)
0000B390 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B396 D000                       		add.b	d0,d0
0000B398 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B39C 5249                       		addq.w	#1,a1
0000B39E 2149 0004                  		move.l	a1,4(a0)
0000B3A2                            
0000B3A2                            Obj2E_Move:				; XREF: Obj2E_Index
0000B3A2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B3A6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B3AA 6100 0000                  		bsr.w	SpeedToPos
0000B3AE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B3B4 4E75                       		rts	
0000B3B6                            ; ===========================================================================
0000B3B6                            
0000B3B6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B3B6 5428 0024                  		addq.b	#2,$24(a0)
0000B3BA 317C 001D 001E             		move.w	#29,$1E(a0)
0000B3C0 1028 001C                  		move.b	$1C(a0),d0
0000B3C4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B3C8 6600                       		bne.s	Obj2E_ChkSonic
0000B3CA 4E75                       		rts			; Eggman monitor does nothing
0000B3CC                            ; ===========================================================================
0000B3CC                            
0000B3CC                            Obj2E_ChkSonic:
0000B3CC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B3D0 6600                       		bne.s	Obj2E_ChkShoes
0000B3D2                            
0000B3D2                            ExtraLife:
0000B3D2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B3D6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B3DA 303C 0088                  		move.w	#$88,d0
0000B3DE 4EF9 0000 1D10             		jmp	(PlaySound).l	; play extra life music
0000B3E4                            ; ===========================================================================
0000B3E4                            
0000B3E4                            Obj2E_ChkShoes:
0000B3E4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B3E8 6600                       		bne.s	Obj2E_ChkShield
0000B3EA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B3F0 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B3F6 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B3FC 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B402 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B408 303C 00E2                  		move.w	#$E2,d0
0000B40C 4EF9 0000 1D10             		jmp	(PlaySound).l	; Speed	up the music
0000B412                            ; ===========================================================================
0000B412                            
0000B412                            Obj2E_ChkShield:
0000B412 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B416 6600                       		bne.s	Obj2E_ChkInvinc
0000B418 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B41E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B424 303C 00AF                  		move.w	#$AF,d0
0000B428 4EF9 0000 1D10             		jmp	(PlaySound).l	; play shield sound
0000B42E                            ; ===========================================================================
0000B42E                            
0000B42E                            Obj2E_ChkInvinc:
0000B42E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000B432 6600                       		bne.s	Obj2E_ChkRings
0000B434 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000B43A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000B440 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000B446 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B44C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000B452 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000B458 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000B45E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000B464 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000B46A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000B470 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000B474 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000B476 303C 0087                  		move.w	#$87,d0
0000B47A 4EF9 0000 1D10             		jmp	(PlaySound).l	; play invincibility music
0000B480                            ; ===========================================================================
0000B480                            
0000B480                            Obj2E_NoMusic:
0000B480 4E75                       		rts	
0000B482                            ; ===========================================================================
0000B482                            
0000B482                            Obj2E_ChkRings:
0000B482 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B486 6600                       		bne.s	Obj2E_ChkS
0000B488 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B48E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B494 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B49A 6500                       		bcs.s	Obj2E_RingSound
0000B49C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B4A2 6700 FF2E                  		beq.w	ExtraLife
0000B4A6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B4AC 6500                       		bcs.s	Obj2E_RingSound
0000B4AE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B4B4 6700 FF1C                  		beq.w	ExtraLife
0000B4B8                            
0000B4B8                            Obj2E_RingSound:
0000B4B8 303C 00B5                  		move.w	#$B5,d0
0000B4BC 4EF9 0000 1D10             		jmp	(PlaySound).l	; play ring sound
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            Obj2E_ChkS:
0000B4C2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B4C6 6600                       		bne.s	Obj2E_ChkEnd
0000B4C8                            		; nop	
0000B4C8 7201                       		moveq	#1,d1
0000B4CA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000B4CE                            
0000B4CE                            Obj2E_ChkEnd:
0000B4CE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B4D0                            ; ===========================================================================
0000B4D0                            
0000B4D0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B4D0 5368 001E                  		subq.w	#1,$1E(a0)
0000B4D4 6B00 0000                  		bmi.w	DeleteObject
0000B4D8 4E75                       		rts	
0000B4DA                            ; ---------------------------------------------------------------------------
0000B4DA                            ; Subroutine to	make the sides of a monitor solid
0000B4DA                            ; ---------------------------------------------------------------------------
0000B4DA                            
0000B4DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4DA                            
0000B4DA                            
0000B4DA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B4DA 43F8 D000                  		lea	($FFFFD000).w,a1
0000B4DE 3029 0008                  		move.w	8(a1),d0
0000B4E2 9068 0008                  		sub.w	8(a0),d0
0000B4E6 D041                       		add.w	d1,d0
0000B4E8 6B00                       		bmi.s	loc_A4E6
0000B4EA 3601                       		move.w	d1,d3
0000B4EC D643                       		add.w	d3,d3
0000B4EE B043                       		cmp.w	d3,d0
0000B4F0 6200                       		bhi.s	loc_A4E6
0000B4F2 1629 0016                  		move.b	$16(a1),d3
0000B4F6 4883                       		ext.w	d3
0000B4F8 D443                       		add.w	d3,d2
0000B4FA 3629 000C                  		move.w	$C(a1),d3
0000B4FE 9668 000C                  		sub.w	$C(a0),d3
0000B502 D642                       		add.w	d2,d3
0000B504 6B00                       		bmi.s	loc_A4E6
0000B506 D442                       		add.w	d2,d2
0000B508 B642                       		cmp.w	d2,d3
0000B50A 6400                       		bcc.s	loc_A4E6
0000B50C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B510 6B00                       		bmi.s	loc_A4E6
0000B512 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B518 6400                       		bcc.s	loc_A4E6
0000B51A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B51E 6600                       		bne.s	loc_A4E6
0000B520 B240                       		cmp.w	d0,d1
0000B522 6400                       		bcc.s	loc_A4DC
0000B524 D241                       		add.w	d1,d1
0000B526 9041                       		sub.w	d1,d0
0000B528                            
0000B528                            loc_A4DC:
0000B528 0C43 0010                  		cmpi.w	#$10,d3
0000B52C 6500                       		bcs.s	loc_A4EA
0000B52E                            
0000B52E                            loc_A4E2:
0000B52E 7201                       		moveq	#1,d1
0000B530 4E75                       		rts	
0000B532                            ; ===========================================================================
0000B532                            
0000B532                            loc_A4E6:
0000B532 7200                       		moveq	#0,d1
0000B534 4E75                       		rts	
0000B536                            ; ===========================================================================
0000B536                            
0000B536                            loc_A4EA:
0000B536 7200                       		moveq	#0,d1
0000B538 1228 0019                  		move.b	$19(a0),d1
0000B53C 5841                       		addq.w	#4,d1
0000B53E 3401                       		move.w	d1,d2
0000B540 D442                       		add.w	d2,d2
0000B542 D269 0008                  		add.w	8(a1),d1
0000B546 9268 0008                  		sub.w	8(a0),d1
0000B54A 6BE2                       		bmi.s	loc_A4E2
0000B54C B242                       		cmp.w	d2,d1
0000B54E 64DE                       		bcc.s	loc_A4E2
0000B550 72FF                       		moveq	#-1,d1
0000B552 4E75                       		rts	
0000B554                            ; End of function Obj26_SolidSides
0000B554                            
0000B554                            ; ===========================================================================
0000B554                            Ani_obj26:
0000B554                            	include "_anim\obj26.asm"
0000B554                            ; ---------------------------------------------------------------------------
0000B554                            ; Animation script - monitors
0000B554                            ; ---------------------------------------------------------------------------
0000B554 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B55A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B560 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B566 0000                       		dc.w byte_A582-Ani_obj26
0000B568 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B56E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B57A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B586 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B592 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B59E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B5AA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B5B6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B5C2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B5CE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B5D6                            		even
0000B5D6                            		even
0000B5D6                            
0000B5D6                            ; ---------------------------------------------------------------------------
0000B5D6                            ; Sprite mappings - monitors
0000B5D6                            ; ---------------------------------------------------------------------------
0000B5D6                            Map_obj26:
0000B5D6                            	include "_maps\obj26.asm"
0000B5D6                            ; ================================================================================
0000B5D6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B5D6                            ; ================================================================================
0000B5D6                            
0000B5D6                            DATAY1U343IF3L:
0000B5D6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B5DA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B5DE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B5E2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B5E6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B5EA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B5EE 05                         DATAY1U343IF3L_0: dc.b $5
0000B5EF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5F4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5F9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5FE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B603 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B608 06                         DATAY1U343IF3L_1: dc.b $6
0000B609 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B60E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B613 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B618 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B61D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B622 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B627 05                         DATAY1U343IF3L_2: dc.b $5
0000B628 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B62D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B632 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B637 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B63C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B641 05                         DATAY1U343IF3L_3: dc.b $5
0000B642 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B647 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B64C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B651 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B656 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B65B 06                         DATAY1U343IF3L_4: dc.b $6
0000B65C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B661 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B666 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B66B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B670 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B675 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B67A 06                         DATAY1U343IF3L_5: dc.b $6
0000B67B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B680 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B685 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B68A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B68F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B694 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B699 06                         DATAY1U343IF3L_6: dc.b $6
0000B69A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B69F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B6A4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B6A9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B6AE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B6B3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B6B8 06                         DATAY1U343IF3L_7: dc.b $6
0000B6B9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B6BE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B6C3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B6C8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B6CD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B6D2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B6D7 06                         DATAY1U343IF3L_8: dc.b $6
0000B6D8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B6DD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B6E2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B6E7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B6EC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B6F1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B6F6 06                         DATAY1U343IF3L_9: dc.b $6
0000B6F7 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B6FC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B701 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B706 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B70B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B710 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B715 05                         DATAY1U343IF3L_A: dc.b $5
0000B716 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B71B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B720 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B725 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B72A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B72F 01                         DATAY1U343IF3L_B: dc.b $1
0000B730 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B736 00                         	even
0000B736 00                         	even
0000B736                            
0000B736                            ; ===========================================================================
0000B736                            ; ---------------------------------------------------------------------------
0000B736                            ; Object 0E - Sonic on the title screen
0000B736                            ; ---------------------------------------------------------------------------
0000B736                            
0000B736                            Obj0E:					; XREF: Obj_Index
0000B736 7000                       		moveq	#0,d0
0000B738 1028 0024                  		move.b	$24(a0),d0
0000B73C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B740 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B744                            ; ===========================================================================
0000B744 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B746 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B748 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B74A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B74C                            ; ===========================================================================
0000B74C                            
0000B74C                            Obj0E_Main:				; XREF: Obj0E_Index
0000B74C 5428 0024                  		addq.b	#2,$24(a0)
0000B750 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B756 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B75C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B764 317C 2300 0002             		move.w	#$2300,2(a0)
0000B76A 117C 0001 0018             		move.b	#1,$18(a0)
0000B770 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B776 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B77C 6100 0000                  		bsr.w	AnimateSprite
0000B780                            
0000B780                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B780 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B784 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B786 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B78A 6000 0000                  		bra.w	DisplaySprite
0000B78E                            ; ===========================================================================
0000B78E                            
0000B78E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B78E 4E75                       		rts	
0000B790                            ; ===========================================================================
0000B790                            
0000B790                            Obj0E_Move:				; XREF: Obj0E_Index
0000B790 5168 000A                  		subq.w	#8,$A(a0)
0000B794 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B79A 6600                       		bne.s	Obj0E_Display
0000B79C 5428 0024                  		addq.b	#2,$24(a0)
0000B7A0                            
0000B7A0                            Obj0E_Display:
0000B7A0 6000 0000                  		bra.w	DisplaySprite
0000B7A4                            ; ===========================================================================
0000B7A4 4E75                       		rts	
0000B7A6                            ; ===========================================================================
0000B7A6                            
0000B7A6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B7A6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B7AC 6100 0000                  		bsr.w	AnimateSprite
0000B7B0 6000 0000                  		bra.w	DisplaySprite
0000B7B4                            ; ===========================================================================
0000B7B4 4E75                       		rts	
0000B7B6                            ; ===========================================================================
0000B7B6                            ; ---------------------------------------------------------------------------
0000B7B6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B7B6                            ; ---------------------------------------------------------------------------
0000B7B6                            
0000B7B6                            Obj0F:					; XREF: Obj_Index
0000B7B6 7000                       		moveq	#0,d0
0000B7B8 1028 0024                  		move.b	$24(a0),d0
0000B7BC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B7C0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B7C4 6000 0000                  		bra.w	DisplaySprite
0000B7C8                            ; ===========================================================================
0000B7C8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B7CA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B7CC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B7CE                            ; ===========================================================================
0000B7CE                            
0000B7CE                            Obj0F_Main:				; XREF: Obj0F_Index
0000B7CE 5428 0024                  		addq.b	#2,$24(a0)
0000B7D2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B7D8 317C 0130 000A             		move.w	#$130,$A(a0)
0000B7DE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B7E6 317C 0200 0002             		move.w	#$200,2(a0)
0000B7EC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B7F2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B7F4 5428 0024                  		addq.b	#2,$24(a0)
0000B7F8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B7FE 6600                       		bne.s	locret_A6F8	; if not, branch
0000B800 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B806 317C 0170 0008             		move.w	#$170,8(a0)
0000B80C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B812                            
0000B812                            locret_A6F8:				; XREF: Obj0F_Index
0000B812 4E75                       		rts	
0000B814                            ; ===========================================================================
0000B814                            
0000B814                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B814 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B81A 6000 0000                  		bra.w	AnimateSprite
0000B81E                            ; ===========================================================================
0000B81E                            Ani_obj0E:
0000B81E                            	include "_anim\obj0E.asm"
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            ; Animation script - Sonic on the title screen
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E 0000                       		dc.w byte_A706-Ani_obj0E
0000B820 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B82C                            		even
0000B82C                            		even
0000B82C                            
0000B82C                            Ani_obj0F:
0000B82C                            	include "_anim\obj0F.asm"
0000B82C                            ; ---------------------------------------------------------------------------
0000B82C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B82C                            ; ---------------------------------------------------------------------------
0000B82C 0000                       		dc.w byte_A714-Ani_obj0F
0000B82E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B832                            		even
0000B832                            		even
0000B832                            
0000B832                            ; ---------------------------------------------------------------------------
0000B832                            ; Subroutine to	animate	a sprite using an animation script
0000B832                            ; ---------------------------------------------------------------------------
0000B832                            
0000B832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B832                            
0000B832                            
0000B832                            AnimateSprite:
0000B832 7000                       		moveq	#0,d0
0000B834 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B838 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B83C 6700                       		beq.s	Anim_Run	; if not, branch
0000B83E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B842 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B848 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B84E                            
0000B84E                            Anim_Run:
0000B84E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B852 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B854 D040                       		add.w	d0,d0
0000B856 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B85A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B85E 7200                       		moveq	#0,d1
0000B860 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B864 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B868 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B86A                            
0000B86A                            Anim_Next:
0000B86A 1200                       		move.b	d0,d1
0000B86C 0200 001F                  		andi.b	#$1F,d0
0000B870 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B874 1028 0022                  		move.b	$22(a0),d0
0000B878 E719                       		rol.b	#3,d1
0000B87A B101                       		eor.b	d0,d1
0000B87C 0201 0003                  		andi.b	#3,d1
0000B880 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B886 8328 0001                  		or.b	d1,1(a0)
0000B88A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B88E                            
0000B88E                            Anim_Wait:
0000B88E 4E75                       		rts	
0000B890                            ; ===========================================================================
0000B890                            
0000B890                            Anim_End_FF:
0000B890 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B892 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B894 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B89A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B89E 60CA                       		bra.s	Anim_Next
0000B8A0                            ; ===========================================================================
0000B8A0                            
0000B8A0                            Anim_End_FE:
0000B8A0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B8A2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B8A4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B8A8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B8AC 9200                       		sub.b	d0,d1
0000B8AE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B8B2 60B6                       		bra.s	Anim_Next
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Anim_End_FD:
0000B8B4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B8B6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B8B8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B8BE                            
0000B8BE                            Anim_End_FC:
0000B8BE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B8C0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B8C2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B8C6                            
0000B8C6                            Anim_End_FB:
0000B8C6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B8C8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B8CA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B8D0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B8D4                            
0000B8D4                            Anim_End_FA:
0000B8D4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B8D6 6600                       		bne.s	Anim_End	; if not, branch
0000B8D8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B8DC                            
0000B8DC                            Anim_End:
0000B8DC 4E75                       		rts	
0000B8DE                            ; End of function AnimateSprite
0000B8DE                            
0000B8DE                            ; ===========================================================================
0000B8DE                            ; ---------------------------------------------------------------------------
0000B8DE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B8DE                            ; ---------------------------------------------------------------------------
0000B8DE                            Map_obj0F:
0000B8DE                            	include "_maps\obj0F.asm"
0000B8DE                            ; ---------------------------------------------------------------------------
0000B8DE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B8DE                            ; ---------------------------------------------------------------------------
0000B8DE 0000                       		dc.w byte_A7CD-Map_obj0F
0000B8E0 0000                       		dc.w byte_A7CC-Map_obj0F
0000B8E2 0000                       		dc.w byte_A7EB-Map_obj0F
0000B8E4 0000                       		dc.w byte_A882-Map_obj0F
0000B8E6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B8E7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B8EC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B8F1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B8F6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B8FB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B900 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B905 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B906 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B90B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B910 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B915 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B91A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B91F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B924 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B929 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B92E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B933 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B938 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B93D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B942 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B947 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B94C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B951 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B956 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B95B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B960 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B965 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B96A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B96F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B974 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B979 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B97E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B983 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B988 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B98D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B992 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B997 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B99C 01                         byte_A882:	dc.b 1			; "TM"
0000B99D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B9A2                            		even
0000B9A2                            		even
0000B9A2                            
0000B9A2                            ; ---------------------------------------------------------------------------
0000B9A2                            ; Sprite mappings - Sonic on the title screen
0000B9A2                            ; ---------------------------------------------------------------------------
0000B9A2                            Map_obj0E:
0000B9A2                            	include "_maps\obj0E.asm"
0000B9A2                            ; ================================================================================
0000B9A2                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B9A2                            ; ================================================================================
0000B9A2                            
0000B9A2                            DATAGKI0HYDQBXP:
0000B9A2 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B9A6 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B9AA 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B9AE 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B9B2 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B9B3 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B9B8 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B9BD 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B9C2 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B9C7 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B9CC 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B9D1 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B9D6 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B9DB 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B9DC 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B9E1 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B9E6 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B9EB 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B9F0 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B9F5 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B9FA 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B9FF 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000BA04 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000BA09 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000BA0E 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000BA13 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000BA14 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000BA19 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000BA1E F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000BA23 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000BA28 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000BA2D 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000BA32 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000BA37 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000BA3C 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000BA41 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000BA46 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000BA4B 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000BA4C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000BA51 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000BA56 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000BA5B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000BA60 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000BA65 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000BA6A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000BA6F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000BA74 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000BA79 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000BA7E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000BA7F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000BA84 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000BA89 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000BA8E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000BA93 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000BA98 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000BA9D 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000BAA2 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000BAA7 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000BAAC 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000BAB1 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000BAB6 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000BABB 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000BAC0 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000BAC5 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000BACA 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000BACF 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000BAD0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BAD5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BADA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BADF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BAE4 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BAE9 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BAEE 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BAF3 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BAF8 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BAFD 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BB02 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BB07 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000BB08 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000BB0D 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000BB12 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BB17 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BB1C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BB21 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BB26 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BB2B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BB30 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BB35 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BB3A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BB3F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BB44 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000BB49 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BB4E 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000BB53 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000BB54 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000BB59 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000BB5E 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000BB63 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000BB68 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000BB6D 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000BB72 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000BB77 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000BB7C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000BB81 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000BB86 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000BB8B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000BB90 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000BB95 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000BB9A 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000BBA0 00                         	even
0000BBA0 00                         	even
0000BBA0                            
0000BBA0                            ; ===========================================================================
0000BBA0                            ; ---------------------------------------------------------------------------
0000BBA0                            ; Object 2B - Chopper enemy (GHZ)
0000BBA0                            ; ---------------------------------------------------------------------------
0000BBA0                            
0000BBA0                            Obj2B:					; XREF: Obj_Index
0000BBA0 7000                       		moveq	#0,d0
0000BBA2 1028 0024                  		move.b	$24(a0),d0
0000BBA6 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BBAA 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BBAE 6000 0000                  		bra.w	MarkObjGone
0000BBB2                            ; ===========================================================================
0000BBB2 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BBB4 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BBB6                            ; ===========================================================================
0000BBB6                            
0000BBB6                            Obj2B_Main:				; XREF: Obj2B_Index
0000BBB6 5428 0024                  		addq.b	#2,$24(a0)
0000BBBA 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BBC2 317C 047B 0002             		move.w	#$47B,2(a0)
0000BBC8 117C 0004 0001             		move.b	#4,1(a0)
0000BBCE 117C 0004 0018             		move.b	#4,$18(a0)
0000BBD4 117C 0009 0020             		move.b	#9,$20(a0)
0000BBDA 117C 0010 0019             		move.b	#$10,$19(a0)
0000BBE0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BBE6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BBEC                            
0000BBEC                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BBEC 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BBF2 6100 FC3E                  		bsr.w	AnimateSprite
0000BBF6 6100 0000                  		bsr.w	SpeedToPos
0000BBFA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BC00 3028 0030                  		move.w	$30(a0),d0
0000BC04 B068 000C                  		cmp.w	$C(a0),d0
0000BC08 6400                       		bcc.s	Obj2B_ChgAni
0000BC0A 3140 000C                  		move.w	d0,$C(a0)
0000BC0E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BC14                            
0000BC14                            Obj2B_ChgAni:
0000BC14 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BC1A 0440 00C0                  		subi.w	#$C0,d0
0000BC1E B068 000C                  		cmp.w	$C(a0),d0
0000BC22 6400                       		bcc.s	locret_ABB6
0000BC24 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BC2A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BC2E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BC30 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BC36                            
0000BC36                            locret_ABB6:
0000BC36 4E75                       		rts	
0000BC38                            ; ===========================================================================
0000BC38                            Ani_obj2B:
0000BC38                            	include "_anim\obj2B.asm"
0000BC38                            ; ---------------------------------------------------------------------------
0000BC38                            ; Animation script - Chopper enemy
0000BC38                            ; ---------------------------------------------------------------------------
0000BC38 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BC3A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BC3C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BC3E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BC42 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BC46 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BC4A 00                         		even
0000BC4A 00                         		even
0000BC4A                            
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            ; Sprite mappings - Chopper enemy (GHZ)
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            Map_obj2B:
0000BC4A                            	include "_maps\obj2B.asm"
0000BC4A                            Map_1ff1:
0000BC4A 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000BC4C 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000BC4E 02                         Map_1ff1_4: 	dc.b $2
0000BC4F E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000BC54 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BC59 02                         Map_1ff1_F: 	dc.b $2
0000BC5A E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000BC5F 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BC64                            	even
0000BC64                            	even
0000BC64                            
0000BC64                            ; ===========================================================================
0000BC64                            ; ---------------------------------------------------------------------------
0000BC64                            ; Object 2C - Jaws enemy (LZ)
0000BC64                            ; ---------------------------------------------------------------------------
0000BC64                            
0000BC64                            Obj2C:					; XREF: Obj_Index
0000BC64 7000                       		moveq	#0,d0
0000BC66 1028 0024                  		move.b	$24(a0),d0
0000BC6A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BC6E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BC72                            ; ===========================================================================
0000BC72 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BC74 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BC76                            ; ===========================================================================
0000BC76                            
0000BC76                            Obj2C_Main:				; XREF: Obj2C_Index
0000BC76 5428 0024                  		addq.b	#2,$24(a0)
0000BC7A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BC82 317C 2486 0002             		move.w	#$2486,2(a0)
0000BC88 0028 0004 0001             		ori.b	#4,1(a0)
0000BC8E 117C 000A 0020             		move.b	#$A,$20(a0)
0000BC94 117C 0004 0018             		move.b	#4,$18(a0)
0000BC9A 117C 0010 0019             		move.b	#$10,$19(a0)
0000BCA0 7000                       		moveq	#0,d0
0000BCA2 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BCA6 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BCA8 5340                       		subq.w	#1,d0
0000BCAA 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BCAE 3140 0032                  		move.w	d0,$32(a0)
0000BCB2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BCB8 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BCBE 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BCC0 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BCC4                            
0000BCC4                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BCC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BCC8 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BCCA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BCD0 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BCD4 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BCDA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BCE0                            
0000BCE0                            Obj2C_Animate:
0000BCE0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BCE6 6100 FB4A                  		bsr.w	AnimateSprite
0000BCEA 6100 0000                  		bsr.w	SpeedToPos
0000BCEE 6000 0000                  		bra.w	MarkObjGone
0000BCF2                            ; ===========================================================================
0000BCF2                            Ani_obj2C:
0000BCF2                            	include "_anim\obj2C.asm"
0000BCF2                            ; ---------------------------------------------------------------------------
0000BCF2                            ; Animation script - Jaws enemy
0000BCF2                            ; ---------------------------------------------------------------------------
0000BCF2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BCF4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BCFA                            		even
0000BCFA                            		even
0000BCFA                            
0000BCFA                            ; ---------------------------------------------------------------------------
0000BCFA                            ; Sprite mappings - Jaws enemy (LZ)
0000BCFA                            ; ---------------------------------------------------------------------------
0000BCFA                            Map_obj2C:
0000BCFA                            	include "_maps\obj2C.asm"
0000BCFA                            ; ---------------------------------------------------------------------------
0000BCFA                            ; Sprite mappings - Jaws enemy (LZ)
0000BCFA                            ; ---------------------------------------------------------------------------
0000BCFA 0000                       		dc.w byte_AC78-Map_obj2C
0000BCFC 0000                       		dc.w byte_AC83-Map_obj2C
0000BCFE 0000                       		dc.w byte_AC8E-Map_obj2C
0000BD00 0000                       		dc.w byte_AC99-Map_obj2C
0000BD02 02                         byte_AC78:	dc.b 2
0000BD03 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BD08 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000BD0D 02                         byte_AC83:	dc.b 2
0000BD0E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BD13 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000BD18 02                         byte_AC8E:	dc.b 2
0000BD19 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BD1E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000BD23 02                         byte_AC99:	dc.b 2
0000BD24 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BD29 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000BD2E                            		even
0000BD2E                            		even
0000BD2E                            
0000BD2E                            ; ===========================================================================
0000BD2E                            ; ---------------------------------------------------------------------------
0000BD2E                            ; Object 2D - Burrobot enemy (LZ)
0000BD2E                            ; ---------------------------------------------------------------------------
0000BD2E                            
0000BD2E                            Obj2D:					; XREF: Obj_Index
0000BD2E 7000                       		moveq	#0,d0
0000BD30 1028 0024                  		move.b	$24(a0),d0
0000BD34 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BD38 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BD3C                            ; ===========================================================================
0000BD3C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BD3E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BD40                            ; ===========================================================================
0000BD40                            
0000BD40                            Obj2D_Main:				; XREF: Obj2D_Index
0000BD40 5428 0024                  		addq.b	#2,$24(a0)
0000BD44 117C 0013 0016             		move.b	#$13,$16(a0)
0000BD4A 117C 0008 0017             		move.b	#8,$17(a0)
0000BD50 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BD58 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BD5E 0028 0004 0001             		ori.b	#4,1(a0)
0000BD64 117C 0004 0018             		move.b	#4,$18(a0)
0000BD6A 117C 0005 0020             		move.b	#5,$20(a0)
0000BD70 117C 000C 0019             		move.b	#$C,$19(a0)
0000BD76 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BD7A 117C 0002 001C             		move.b	#2,$1C(a0)
0000BD80                            
0000BD80                            Obj2D_Action:				; XREF: Obj2D_Index
0000BD80 7000                       		moveq	#0,d0
0000BD82 1028 0025                  		move.b	$25(a0),d0
0000BD86 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BD8A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BD8E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BD94 6100 FA9C                  		bsr.w	AnimateSprite
0000BD98 6000 0000                  		bra.w	MarkObjGone
0000BD9C                            ; ===========================================================================
0000BD9C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BD9E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BDA0 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BDA2 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BDA4                            ; ===========================================================================
0000BDA4                            
0000BDA4                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BDA4 5368 0030                  		subq.w	#1,$30(a0)
0000BDA8 6A00                       		bpl.s	locret_AD42
0000BDAA 5428 0025                  		addq.b	#2,$25(a0)
0000BDAE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BDB4 317C 0080 0010             		move.w	#$80,$10(a0)
0000BDBA 117C 0001 001C             		move.b	#1,$1C(a0)
0000BDC0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BDC6 6700                       		beq.s	locret_AD42
0000BDC8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BDCC                            
0000BDCC                            locret_AD42:
0000BDCC 4E75                       		rts	
0000BDCE                            ; ===========================================================================
0000BDCE                            
0000BDCE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BDCE 5368 0030                  		subq.w	#1,$30(a0)
0000BDD2 6B00                       		bmi.s	loc_AD84
0000BDD4 6100 0000                  		bsr.w	SpeedToPos
0000BDD8 0868 0000 0032             		bchg	#0,$32(a0)
0000BDDE 6600                       		bne.s	loc_AD78
0000BDE0 3628 0008                  		move.w	8(a0),d3
0000BDE4 0643 000C                  		addi.w	#$C,d3
0000BDE8 0828 0000 0022             		btst	#0,$22(a0)
0000BDEE 6600                       		bne.s	loc_AD6A
0000BDF0 0443 0018                  		subi.w	#$18,d3
0000BDF4                            
0000BDF4                            loc_AD6A:
0000BDF4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BDFA 0C41 000C                  		cmpi.w	#$C,d1
0000BDFE 6C00                       		bge.s	loc_AD84
0000BE00 4E75                       		rts	
0000BE02                            ; ===========================================================================
0000BE02                            
0000BE02                            loc_AD78:				; XREF: Obj2D_Move
0000BE02 4EB9 0000 0000             		jsr	ObjHitFloor
0000BE08 D368 000C                  		add.w	d1,$C(a0)
0000BE0C 4E75                       		rts	
0000BE0E                            ; ===========================================================================
0000BE0E                            
0000BE0E                            loc_AD84:				; XREF: Obj2D_Move
0000BE0E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BE14 6700                       		beq.s	loc_ADA4
0000BE16 5528 0025                  		subq.b	#2,$25(a0)
0000BE1A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BE20 317C 0000 0010             		move.w	#0,$10(a0)
0000BE26 117C 0000 001C             		move.b	#0,$1C(a0)
0000BE2C 4E75                       		rts	
0000BE2E                            ; ===========================================================================
0000BE2E                            
0000BE2E                            loc_ADA4:
0000BE2E 5428 0025                  		addq.b	#2,$25(a0)
0000BE32 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BE38 117C 0002 001C             		move.b	#2,$1C(a0)
0000BE3E 4E75                       		rts	
0000BE40                            ; ===========================================================================
0000BE40                            
0000BE40                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000BE40 6100 0000                  		bsr.w	SpeedToPos
0000BE44 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BE4A 6B00                       		bmi.s	locret_ADF0
0000BE4C 117C 0003 001C             		move.b	#3,$1C(a0)
0000BE52 4EB9 0000 0000             		jsr	ObjHitFloor
0000BE58 4A41                       		tst.w	d1
0000BE5A 6A00                       		bpl.s	locret_ADF0
0000BE5C D368 000C                  		add.w	d1,$C(a0)
0000BE60 317C 0000 0012             		move.w	#0,$12(a0)
0000BE66 117C 0001 001C             		move.b	#1,$1C(a0)
0000BE6C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BE72 5528 0025                  		subq.b	#2,$25(a0)
0000BE76 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BE7A                            
0000BE7A                            locret_ADF0:
0000BE7A 4E75                       		rts	
0000BE7C                            ; ===========================================================================
0000BE7C                            
0000BE7C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000BE7C 343C 0060                  		move.w	#$60,d2
0000BE80 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BE84 6400                       		bcc.s	locret_AE20
0000BE86 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000BE8A 9068 000C                  		sub.w	$C(a0),d0
0000BE8E 6400                       		bcc.s	locret_AE20
0000BE90 0C40 FF80                  		cmpi.w	#-$80,d0
0000BE94 6500                       		bcs.s	locret_AE20
0000BE96 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BE9A 6600                       		bne.s	locret_AE20
0000BE9C 5528 0025                  		subq.b	#2,$25(a0)
0000BEA0 3141 0010                  		move.w	d1,$10(a0)
0000BEA4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BEAA                            
0000BEAA                            locret_AE20:
0000BEAA 4E75                       		rts	
0000BEAC                            
0000BEAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEAC                            
0000BEAC                            
0000BEAC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000BEAC 323C 0080                  		move.w	#$80,d1
0000BEB0 08E8 0000 0022             		bset	#0,$22(a0)
0000BEB6 3038 D008                  		move.w	($FFFFD008).w,d0
0000BEBA 9068 0008                  		sub.w	8(a0),d0
0000BEBE 6400                       		bcc.s	loc_AE40
0000BEC0 4440                       		neg.w	d0
0000BEC2 4441                       		neg.w	d1
0000BEC4 08A8 0000 0022             		bclr	#0,$22(a0)
0000BECA                            
0000BECA                            loc_AE40:
0000BECA B042                       		cmp.w	d2,d0
0000BECC 4E75                       		rts	
0000BECE                            ; End of function Obj2D_ChkSonic2
0000BECE                            
0000BECE                            ; ===========================================================================
0000BECE                            Ani_obj2D:
0000BECE                            	include "_anim\obj2D.asm"
0000BECE                            ; ---------------------------------------------------------------------------
0000BECE                            ; Animation script - Burrobot enemy but craig
0000BECE                            ; ---------------------------------------------------------------------------
0000BECE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000BED0 0000                       		dc.w byte_AE50-Ani_obj2D
0000BED2 0000                       		dc.w byte_AE54-Ani_obj2D
0000BED4 0000                       		dc.w byte_AE58-Ani_obj2D
0000BED6 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000BED9 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000BEDD 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000BEEB 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000BEEE                            		even
0000BEEE                            		even
0000BEEE                            
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            ; Sprite mappings - Burrobot enemy (LZ)
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            Map_obj2D:
0000BEEE                            	include "_maps\obj2D.asm"
0000BEEE                            Map_e3a3:
0000BEEE 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000BEF0 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000BEF2 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000BEF4 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000BEF6 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000BEF8 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000BEFA 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000BEFC 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000BEFE 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000BF00 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000BF02 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000BF04 02                         Map_e3a3_16: 	dc.b $2
0000BF05 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000BF0A 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000BF0F 02                         Map_e3a3_21: 	dc.b $2
0000BF10 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000BF15 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000BF1A 02                         Map_e3a3_2C: 	dc.b $2
0000BF1B EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000BF20 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000BF25 02                         Map_e3a3_37: 	dc.b $2
0000BF26 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000BF2B FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000BF30 02                         Map_e3a3_42: 	dc.b $2
0000BF31 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000BF36 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000BF3B 02                         Map_e3a3_4D: 	dc.b $2
0000BF3C EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000BF41 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000BF46 02                         Map_e3a3_58: 	dc.b $2
0000BF47 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000BF4C FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BF51 02                         Map_e3a3_63: 	dc.b $2
0000BF52 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BF57 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BF5C 02                         Map_e3a3_6E: 	dc.b $2
0000BF5D EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BF62 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BF67 02                         Map_e3a3_79: 	dc.b $2
0000BF68 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BF6D 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BF72 02                         Map_e3a3_84: 	dc.b $2
0000BF73 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BF78 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BF7E 00                         	even
0000BF7E 00                         	even
0000BF7E                            
0000BF7E                            ; ===========================================================================
0000BF7E                            ; ---------------------------------------------------------------------------
0000BF7E                            ; Object 2F - large moving platforms (MZ)
0000BF7E                            ; ---------------------------------------------------------------------------
0000BF7E                            
0000BF7E                            Obj2F:					; XREF: Obj_Index
0000BF7E 7000                       		moveq	#0,d0
0000BF80 1028 0024                  		move.b	$24(a0),d0
0000BF84 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BF88 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BF8C                            ; ===========================================================================
0000BF8C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BF8E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BF90                            
0000BF90 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BF92 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BF94 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BF96 0140                       		dc.b 1,	$40
0000BF98 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BF9A 0220                       		dc.b 2,	$20
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            Obj2F_Main:				; XREF: Obj2F_Index
0000BF9C 5428 0024                  		addq.b	#2,$24(a0)
0000BFA0 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BFA8 317C C000 0002             		move.w	#$C000,2(a0)
0000BFAE 117C 0004 0001             		move.b	#4,1(a0)
0000BFB4 117C 0005 0018             		move.b	#5,$18(a0)
0000BFBA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BFC0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BFC6 7000                       		moveq	#0,d0
0000BFC8 1028 0028                  		move.b	$28(a0),d0
0000BFCC E448                       		lsr.w	#2,d0
0000BFCE 0240 001C                  		andi.w	#$1C,d0
0000BFD2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BFD6 3019                       		move.w	(a1)+,d0
0000BFD8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BFDC 214A 0030                  		move.l	a2,$30(a0)
0000BFE0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BFE4 1151 0019                  		move.b	(a1),$19(a0)
0000BFE8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BFEE 117C 0040 0016             		move.b	#$40,$16(a0)
0000BFF4 08E8 0004 0001             		bset	#4,1(a0)
0000BFFA                            
0000BFFA                            Obj2F_Action:				; XREF: Obj2F_Index
0000BFFA 6100 0000                  		bsr.w	Obj2F_Types
0000BFFE 4A28 0025                  		tst.b	$25(a0)
0000C002 6700                       		beq.s	Obj2F_Solid
0000C004 7200                       		moveq	#0,d1
0000C006 1228 0019                  		move.b	$19(a0),d1
0000C00A 0641 000B                  		addi.w	#$B,d1
0000C00E 6100 C552                  		bsr.w	ExitPlatform
0000C012 0829 0003 0022             		btst	#3,$22(a1)
0000C018 6600 0000                  		bne.w	Obj2F_Slope
0000C01C 4228 0025                  		clr.b	$25(a0)
0000C020 6000                       		bra.s	Obj2F_Display
0000C022                            ; ===========================================================================
0000C022                            
0000C022                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C022 7200                       		moveq	#0,d1
0000C024 1228 0019                  		move.b	$19(a0),d1
0000C028 0641 000B                  		addi.w	#$B,d1
0000C02C 2468 0030                  		movea.l	$30(a0),a2
0000C030 3428 0008                  		move.w	8(a0),d2
0000C034 6100 D51C                  		bsr.w	SlopeObject2
0000C038 6000                       		bra.s	Obj2F_Display
0000C03A                            ; ===========================================================================
0000C03A                            
0000C03A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C03A 7200                       		moveq	#0,d1
0000C03C 1228 0019                  		move.b	$19(a0),d1
0000C040 0641 000B                  		addi.w	#$B,d1
0000C044 343C 0020                  		move.w	#$20,d2
0000C048 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C04E 6600                       		bne.s	loc_AF8E
0000C050 343C 0030                  		move.w	#$30,d2
0000C054                            
0000C054                            loc_AF8E:
0000C054 2468 0030                  		movea.l	$30(a0),a2
0000C058 6100 0000                  		bsr.w	SolidObject2F
0000C05C                            
0000C05C                            Obj2F_Display:				; XREF: Obj2F_Action
0000C05C 6100 0000                  		bsr.w	DisplaySprite
0000C060 6000 0000                  		bra.w	Obj2F_ChkDel
0000C064                            
0000C064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C064                            
0000C064                            
0000C064                            Obj2F_Types:				; XREF: Obj2F_Action
0000C064 7000                       		moveq	#0,d0
0000C066 1028 0028                  		move.b	$28(a0),d0
0000C06A 0240 0007                  		andi.w	#7,d0
0000C06E D040                       		add.w	d0,d0
0000C070 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C074 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C078                            ; End of function Obj2F_Types
0000C078                            
0000C078                            ; ===========================================================================
0000C078 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C07A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C07C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C07E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C080 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C082 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C084                            ; ===========================================================================
0000C084                            
0000C084                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C084 4E75                       		rts			; type 00 platform doesn't move
0000C086                            ; ===========================================================================
0000C086                            
0000C086                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C086 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C08A 323C 0020                  		move.w	#$20,d1
0000C08E 6000                       		bra.s	Obj2F_Move
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C090 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C094 323C 0030                  		move.w	#$30,d1
0000C098 6000                       		bra.s	Obj2F_Move
0000C09A                            ; ===========================================================================
0000C09A                            
0000C09A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C09A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C09E 323C 0040                  		move.w	#$40,d1
0000C0A2 6000                       		bra.s	Obj2F_Move
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C0A4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C0A8 323C 0060                  		move.w	#$60,d1
0000C0AC                            
0000C0AC                            Obj2F_Move:
0000C0AC 0828 0003 0028             		btst	#3,$28(a0)
0000C0B2 6700                       		beq.s	loc_AFF2
0000C0B4 4440                       		neg.w	d0
0000C0B6 D041                       		add.w	d1,d0
0000C0B8                            
0000C0B8                            loc_AFF2:
0000C0B8 3228 002C                  		move.w	$2C(a0),d1
0000C0BC 9240                       		sub.w	d0,d1
0000C0BE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C0C2 4E75                       		rts	
0000C0C4                            ; ===========================================================================
0000C0C4                            
0000C0C4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C0C4 1028 0034                  		move.b	$34(a0),d0
0000C0C8 4A28 0025                  		tst.b	$25(a0)
0000C0CC 6600                       		bne.s	loc_B010
0000C0CE 5500                       		subq.b	#2,d0
0000C0D0 6400                       		bcc.s	loc_B01C
0000C0D2 7000                       		moveq	#0,d0
0000C0D4 6000                       		bra.s	loc_B01C
0000C0D6                            ; ===========================================================================
0000C0D6                            
0000C0D6                            loc_B010:
0000C0D6 5800                       		addq.b	#4,d0
0000C0D8 0C00 0040                  		cmpi.b	#$40,d0
0000C0DC 6500                       		bcs.s	loc_B01C
0000C0DE 103C 0040                  		move.b	#$40,d0
0000C0E2                            
0000C0E2                            loc_B01C:
0000C0E2 1140 0034                  		move.b	d0,$34(a0)
0000C0E6 4EB9 0000 34B8             		jsr	(CalcSine).l
0000C0EC E848                       		lsr.w	#4,d0
0000C0EE 3200                       		move.w	d0,d1
0000C0F0 D068 002C                  		add.w	$2C(a0),d0
0000C0F4 3140 000C                  		move.w	d0,$C(a0)
0000C0F8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C0FE 6600                       		bne.s	loc_B07A
0000C100 4A28 0035                  		tst.b	$35(a0)
0000C104 6600                       		bne.s	loc_B07A
0000C106 117C 0001 0035             		move.b	#1,$35(a0)
0000C10C 6100 0000                  		bsr.w	SingleObjLoad2
0000C110 6600                       		bne.s	loc_B07A
0000C112 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C116 3368 0008 0008             		move.w	8(a0),8(a1)
0000C11C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C122 5069 002C                  		addq.w	#8,$2C(a1)
0000C126 5769 002C                  		subq.w	#3,$2C(a1)
0000C12A 0469 0040 0008             		subi.w	#$40,8(a1)
0000C130 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C136 2348 0038                  		move.l	a0,$38(a1)
0000C13A 2448                       		movea.l	a0,a2
0000C13C 6100                       		bsr.s	sub_B09C
0000C13E                            
0000C13E                            loc_B07A:
0000C13E 7400                       		moveq	#0,d2
0000C140 45E8 0036                  		lea	$36(a0),a2
0000C144 141A                       		move.b	(a2)+,d2
0000C146 5302                       		subq.b	#1,d2
0000C148 6500                       		bcs.s	locret_B09A
0000C14A                            
0000C14A                            loc_B086:
0000C14A 7000                       		moveq	#0,d0
0000C14C 101A                       		move.b	(a2)+,d0
0000C14E ED48                       		lsl.w	#6,d0
0000C150 0640 D000                  		addi.w	#-$3000,d0
0000C154 3240                       		movea.w	d0,a1
0000C156 3341 003C                  		move.w	d1,$3C(a1)
0000C15A 51CA FFEE                  		dbf	d2,loc_B086
0000C15E                            
0000C15E                            locret_B09A:
0000C15E 4E75                       		rts	
0000C160                            
0000C160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C160                            
0000C160                            
0000C160                            sub_B09C:
0000C160 45EA 0036                  		lea	$36(a2),a2
0000C164 7000                       		moveq	#0,d0
0000C166 1012                       		move.b	(a2),d0
0000C168 5212                       		addq.b	#1,(a2)
0000C16A 45F2 0001                  		lea	1(a2,d0.w),a2
0000C16E 3009                       		move.w	a1,d0
0000C170 0440 D000                  		subi.w	#-$3000,d0
0000C174 EC48                       		lsr.w	#6,d0
0000C176 0240 007F                  		andi.w	#$7F,d0
0000C17A 1480                       		move.b	d0,(a2)
0000C17C 4E75                       		rts	
0000C17E                            ; End of function sub_B09C
0000C17E                            
0000C17E                            ; ===========================================================================
0000C17E                            
0000C17E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C17E 4A28 0035                  		tst.b	$35(a0)
0000C182 6700                       		beq.s	loc_B0C6
0000C184 4A28 0001                  		tst.b	1(a0)
0000C188 6A00                       		bpl.s	Obj2F_DelFlames
0000C18A                            
0000C18A                            loc_B0C6:
0000C18A 3028 002A                  		move.w	$2A(a0),d0
0000C18E 0240 FF80                  		andi.w	#$FF80,d0
0000C192 3238 F700                  		move.w	($FFFFF700).w,d1
0000C196 0441 0080                  		subi.w	#$80,d1
0000C19A 0241 FF80                  		andi.w	#$FF80,d1
0000C19E 9041                       		sub.w	d1,d0
0000C1A0 0C40 0280                  		cmpi.w	#$280,d0
0000C1A4 6200 0000                  		bhi.w	DeleteObject
0000C1A8 4E75                       		rts	
0000C1AA                            ; ===========================================================================
0000C1AA                            
0000C1AA                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C1AA 7400                       		moveq	#0,d2
0000C1AC                            
0000C1AC                            loc_B0E8:
0000C1AC 45E8 0036                  		lea	$36(a0),a2
0000C1B0 1412                       		move.b	(a2),d2
0000C1B2 421A                       		clr.b	(a2)+
0000C1B4 5302                       		subq.b	#1,d2
0000C1B6 6500                       		bcs.s	locret_B116
0000C1B8                            
0000C1B8                            loc_B0F4:
0000C1B8 7000                       		moveq	#0,d0
0000C1BA 1012                       		move.b	(a2),d0
0000C1BC 421A                       		clr.b	(a2)+
0000C1BE ED48                       		lsl.w	#6,d0
0000C1C0 0640 D000                  		addi.w	#-$3000,d0
0000C1C4 3240                       		movea.w	d0,a1
0000C1C6 6100 0000                  		bsr.w	DeleteObject2
0000C1CA 51CA FFEC                  		dbf	d2,loc_B0F4
0000C1CE 117C 0000 0035             		move.b	#0,$35(a0)
0000C1D4 117C 0000 0034             		move.b	#0,$34(a0)
0000C1DA                            
0000C1DA                            locret_B116:
0000C1DA 4E75                       		rts	
0000C1DC                            ; ===========================================================================
0000C1DC                            ; ---------------------------------------------------------------------------
0000C1DC                            ; Collision data for large moving platforms (MZ)
0000C1DC                            ; ---------------------------------------------------------------------------
0000C1DC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C228                            		even
0000C228                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C254                            		even
0000C254                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C2A0                            		even
0000C2A0                            ; ===========================================================================
0000C2A0                            ; ---------------------------------------------------------------------------
0000C2A0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C2A0                            ; (appears when	you walk on sinking platforms)
0000C2A0                            ; ---------------------------------------------------------------------------
0000C2A0                            
0000C2A0                            Obj35:					; XREF: Obj_Index
0000C2A0 7000                       		moveq	#0,d0
0000C2A2 1028 0024                  		move.b	$24(a0),d0
0000C2A6 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C2AA 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C2AE                            ; ===========================================================================
0000C2AE 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C2B0 0000                       		dc.w loc_B238-Obj35_Index
0000C2B2 0000                       		dc.w Obj35_Move-Obj35_Index
0000C2B4                            ; ===========================================================================
0000C2B4                            
0000C2B4                            Obj35_Main:				; XREF: Obj35_Index
0000C2B4 5428 0024                  		addq.b	#2,$24(a0)
0000C2B8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C2C0 317C 0345 0002             		move.w	#$345,2(a0)
0000C2C6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C2CC 117C 0004 0001             		move.b	#4,1(a0)
0000C2D2 117C 0001 0018             		move.b	#1,$18(a0)
0000C2D8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C2DE 117C 0008 0019             		move.b	#8,$19(a0)
0000C2E4 303C 00C8                  		move.w	#$C8,d0
0000C2E8 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play flame sound
0000C2EE 4A28 0028                  		tst.b	$28(a0)
0000C2F2 6700                       		beq.s	loc_B238
0000C2F4 5428 0024                  		addq.b	#2,$24(a0)
0000C2F8 6000 0000                  		bra.w	Obj35_Move
0000C2FC                            ; ===========================================================================
0000C2FC                            
0000C2FC                            loc_B238:				; XREF: Obj35_Index
0000C2FC 2268 0030                  		movea.l	$30(a0),a1
0000C300 3228 0008                  		move.w	8(a0),d1
0000C304 9268 002A                  		sub.w	$2A(a0),d1
0000C308 0641 000C                  		addi.w	#$C,d1
0000C30C 3001                       		move.w	d1,d0
0000C30E E248                       		lsr.w	#1,d0
0000C310 1031 0000                  		move.b	(a1,d0.w),d0
0000C314 4440                       		neg.w	d0
0000C316 D068 002C                  		add.w	$2C(a0),d0
0000C31A 3400                       		move.w	d0,d2
0000C31C D068 003C                  		add.w	$3C(a0),d0
0000C320 3140 000C                  		move.w	d0,$C(a0)
0000C324 0C41 0084                  		cmpi.w	#$84,d1
0000C328 6400                       		bcc.s	loc_B2B0
0000C32A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C332 0C41 0080                  		cmpi.w	#$80,d1
0000C336 6400                       		bcc.s	loc_B2B0
0000C338 2028 0008                  		move.l	8(a0),d0
0000C33C 0680 0008 0000             		addi.l	#$80000,d0
0000C342 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C348 6600                       		bne.s	loc_B2B0
0000C34A 6100 0000                  		bsr.w	SingleObjLoad2
0000C34E 6600                       		bne.s	loc_B2B0
0000C350 12BC 0035                  		move.b	#$35,0(a1)
0000C354 3368 0008 0008             		move.w	8(a0),8(a1)
0000C35A 3342 002C                  		move.w	d2,$2C(a1)
0000C35E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C364 137C 0001 0028             		move.b	#1,$28(a1)
0000C36A 2468 0038                  		movea.l	$38(a0),a2
0000C36E 6100 FDF0                  		bsr.w	sub_B09C
0000C372                            
0000C372                            loc_B2B0:
0000C372 6000                       		bra.s	Obj35_Animate
0000C374                            ; ===========================================================================
0000C374                            
0000C374                            Obj35_Move:				; XREF: Obj35_Index
0000C374 3028 002C                  		move.w	$2C(a0),d0
0000C378 D068 003C                  		add.w	$3C(a0),d0
0000C37C 3140 000C                  		move.w	d0,$C(a0)
0000C380                            
0000C380                            Obj35_Animate:				; XREF: loc_B238
0000C380 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C386 6100 F4AA                  		bsr.w	AnimateSprite
0000C38A 6000 0000                  		bra.w	DisplaySprite
0000C38E                            ; ===========================================================================
0000C38E                            Ani_obj35:
0000C38E                            	include "_anim\obj35.asm"
0000C38E                            ; ---------------------------------------------------------------------------
0000C38E                            ; Animation script - fireball that sits on the	floor (MZ)
0000C38E                            ; ---------------------------------------------------------------------------
0000C38E 0000                       		dc.w byte_B2CE-Ani_obj35
0000C390 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C396                            		even
0000C396                            		even
0000C396                            
0000C396                            ; ---------------------------------------------------------------------------
0000C396                            ; Sprite mappings - large moving platforms (MZ)
0000C396                            ; ---------------------------------------------------------------------------
0000C396                            Map_obj2F:
0000C396                            	include "_maps\obj2F.asm"
0000C396                            ; ---------------------------------------------------------------------------
0000C396                            ; Sprite mappings - large moving platforms (MZ)
0000C396                            ; ---------------------------------------------------------------------------
0000C396 0000                       		dc.w byte_B2DA-Map_obj2F
0000C398 0000                       		dc.w byte_B31C-Map_obj2F
0000C39A 0000                       		dc.w byte_B34F-Map_obj2F
0000C39C 0D                         byte_B2DA:	dc.b $D
0000C39D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C3A2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C3A7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C3AC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C3B1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C3B6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C3BB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C3C0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C3C5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C3CA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C3CF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C3D4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C3D9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C3DE 0A                         byte_B31C:	dc.b $A
0000C3DF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C3E4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C3E9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C3EE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C3F3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C3F8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C3FD C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C402 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C407 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C40C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C411 06                         byte_B34F:	dc.b 6
0000C412 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C417 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C41C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C421 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C426 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C42B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C430                            		even
0000C430                            		even
0000C430                            
0000C430                            ; ---------------------------------------------------------------------------
0000C430                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C430                            ; ---------------------------------------------------------------------------
0000C430                            Map_obj14:
0000C430                            	include "_maps\obj14.asm"
0000C430                            ; --------------------------------------------------------------------------------
0000C430                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C430                            ; --------------------------------------------------------------------------------
0000C430                            
0000C430                            SME_C6wT7:	
0000C430 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000C434 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000C438 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000C43C 01                         SME_C6wT7_C:	dc.b 1	
0000C43D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C442 01                         SME_C6wT7_12:	dc.b 1	
0000C443 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C448 02                         SME_C6wT7_18:	dc.b 2	
0000C449 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000C44E E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000C453 01                         SME_C6wT7_23:	dc.b 1	
0000C454 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C459 01                         SME_C6wT7_29:	dc.b 1	
0000C45A F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C45F 01                         SME_C6wT7_2F:	dc.b 1	
0000C460 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000C466 00                         		even
0000C466 00                         		even
0000C466                            
0000C466                            ; ===========================================================================
0000C466                            ; ---------------------------------------------------------------------------
0000C466                            ; Object 30 - large green glassy blocks	(MZ)
0000C466                            ; ---------------------------------------------------------------------------
0000C466                            
0000C466                            Obj30:					; XREF: Obj_Index
0000C466 7000                       		moveq	#0,d0
0000C468 1028 0024                  		move.b	$24(a0),d0
0000C46C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C470 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C474 3028 0008                  		move.w	8(a0),d0
0000C478 0240 FF80                  		andi.w	#$FF80,d0
0000C47C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C480 0441 0080                  		subi.w	#$80,d1
0000C484 0241 FF80                  		andi.w	#$FF80,d1
0000C488 9041                       		sub.w	d1,d0
0000C48A 0C40 0280                  		cmpi.w	#$280,d0
0000C48E 6200 0000                  		bhi.w	Obj30_Delete
0000C492 6000 0000                  		bra.w	DisplaySprite
0000C496                            ; ===========================================================================
0000C496                            
0000C496                            Obj30_Delete:
0000C496 6000 0000                  		bra.w	DeleteObject
0000C49A                            ; ===========================================================================
0000C49A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C49C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C49E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C4A0 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C4A2 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C4A4                            
0000C4A4 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C4A7 0400 01                    		dc.b 4,	0, 1
0000C4AA 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C4AD 0800 01                    		dc.b 8,	0, 1
0000C4B0                            ; ===========================================================================
0000C4B0                            
0000C4B0                            Obj30_Main:				; XREF: Obj30_Index
0000C4B0 45F9 0000 C4A4             		lea	(Obj30_Vars1).l,a2
0000C4B6 7201                       		moveq	#1,d1
0000C4B8 117C 0048 0016             		move.b	#$48,$16(a0)
0000C4BE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C4C4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C4C6 45F9 0000 C4AA             		lea	(Obj30_Vars2).l,a2
0000C4CC 7201                       		moveq	#1,d1
0000C4CE 117C 0038 0016             		move.b	#$38,$16(a0)
0000C4D4                            
0000C4D4                            loc_B40C:
0000C4D4 2248                       		movea.l	a0,a1
0000C4D6 6000                       		bra.s	Obj30_Load	; load main object
0000C4D8                            ; ===========================================================================
0000C4D8                            
0000C4D8                            Obj30_Loop:
0000C4D8 6100 0000                  		bsr.w	SingleObjLoad2
0000C4DC 6600                       		bne.s	loc_B480
0000C4DE                            
0000C4DE                            Obj30_Load:				; XREF: Obj30_Main
0000C4DE 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4E2 12BC 0030                  		move.b	#$30,0(a1)
0000C4E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000C4EC 101A                       		move.b	(a2)+,d0
0000C4EE 4880                       		ext.w	d0
0000C4F0 D068 000C                  		add.w	$C(a0),d0
0000C4F4 3340 000C                  		move.w	d0,$C(a1)
0000C4F8 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C500 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C506 137C 0004 0001             		move.b	#4,1(a1)
0000C50C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C512 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C518 137C 0020 0019             		move.b	#$20,$19(a1)
0000C51E 137C 0004 0018             		move.b	#4,$18(a1)
0000C524 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C528 2348 003C                  		move.l	a0,$3C(a1)
0000C52C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C530                            
0000C530 137C 0010 0019             		move.b	#$10,$19(a1)
0000C536 137C 0003 0018             		move.b	#3,$18(a1)
0000C53C 5029 0028                  		addq.b	#8,$28(a1)
0000C540 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C546                            
0000C546                            loc_B480:
0000C546 317C 0090 0032             		move.w	#$90,$32(a0)
0000C54C 08E8 0004 0001             		bset	#4,1(a0)
0000C552                            
0000C552                            Obj30_Block012:				; XREF: Obj30_Index
0000C552 6100 0000                  		bsr.w	Obj30_Types
0000C556 323C 002B                  		move.w	#$2B,d1
0000C55A 343C 0048                  		move.w	#$48,d2
0000C55E 363C 0049                  		move.w	#$49,d3
0000C562 3828 0008                  		move.w	8(a0),d4
0000C566 6000 0000                  		bra.w	SolidObject
0000C56A                            ; ===========================================================================
0000C56A                            
0000C56A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C56A 2268 003C                  		movea.l	$3C(a0),a1
0000C56E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C574 6000 0000                  		bra.w	Obj30_Types
0000C578                            ; ===========================================================================
0000C578                            
0000C578                            Obj30_Block34:				; XREF: Obj30_Index
0000C578 6100 0000                  		bsr.w	Obj30_Types
0000C57C 323C 002B                  		move.w	#$2B,d1
0000C580 343C 0038                  		move.w	#$38,d2
0000C584 363C 0039                  		move.w	#$39,d3
0000C588 3828 0008                  		move.w	8(a0),d4
0000C58C 6000 0000                  		bra.w	SolidObject
0000C590                            ; ===========================================================================
0000C590                            
0000C590                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C590 2268 003C                  		movea.l	$3C(a0),a1
0000C594 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C59A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C5A0 6000 0002                  		bra.w	*+4
0000C5A4                            
0000C5A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5A4                            
0000C5A4                            
0000C5A4                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C5A4 7000                       		moveq	#0,d0
0000C5A6 1028 0028                  		move.b	$28(a0),d0
0000C5AA 0240 0007                  		andi.w	#7,d0
0000C5AE D040                       		add.w	d0,d0
0000C5B0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C5B4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C5B8                            ; End of function Obj30_Types
0000C5B8                            
0000C5B8                            ; ===========================================================================
0000C5B8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C5BA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C5BC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C5BE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C5C0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C5C2                            ; ===========================================================================
0000C5C2                            
0000C5C2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C5C2 4E75                       		rts	
0000C5C4                            ; ===========================================================================
0000C5C4                            
0000C5C4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C5C4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C5C8 323C 0040                  		move.w	#$40,d1
0000C5CC 6000                       		bra.s	loc_B514
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C5CE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C5D2 323C 0040                  		move.w	#$40,d1
0000C5D6 4440                       		neg.w	d0
0000C5D8 D041                       		add.w	d1,d0
0000C5DA                            
0000C5DA                            loc_B514:				; XREF: Obj30_Type01
0000C5DA 0828 0003 0028             		btst	#3,$28(a0)
0000C5E0 6700                       		beq.s	loc_B526
0000C5E2 4440                       		neg.w	d0
0000C5E4 D041                       		add.w	d1,d0
0000C5E6 E208                       		lsr.b	#1,d0
0000C5E8 0640 0020                  		addi.w	#$20,d0
0000C5EC                            
0000C5EC                            loc_B526:
0000C5EC 6000 0000                  		bra.w	loc_B5EE
0000C5F0                            ; ===========================================================================
0000C5F0                            
0000C5F0                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C5F0 0828 0003 0028             		btst	#3,$28(a0)
0000C5F6 6700                       		beq.s	loc_B53E
0000C5F8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C5FC 0440 0010                  		subi.w	#$10,d0
0000C600 6000 0000                  		bra.w	loc_B5EE
0000C604                            ; ===========================================================================
0000C604                            
0000C604                            loc_B53E:
0000C604 0828 0003 0022             		btst	#3,$22(a0)
0000C60A 6600                       		bne.s	loc_B54E
0000C60C 08A8 0000 0034             		bclr	#0,$34(a0)
0000C612 6000                       		bra.s	loc_B582
0000C614                            ; ===========================================================================
0000C614                            
0000C614                            loc_B54E:
0000C614 4A28 0034                  		tst.b	$34(a0)
0000C618 6600                       		bne.s	loc_B582
0000C61A 117C 0001 0034             		move.b	#1,$34(a0)
0000C620 08E8 0000 0035             		bset	#0,$35(a0)
0000C626 6700                       		beq.s	loc_B582
0000C628 08E8 0007 0034             		bset	#7,$34(a0)
0000C62E 317C 0010 0036             		move.w	#$10,$36(a0)
0000C634 117C 000A 0038             		move.b	#$A,$38(a0)
0000C63A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C640 6600                       		bne.s	loc_B582
0000C642 317C 0040 0036             		move.w	#$40,$36(a0)
0000C648                            
0000C648                            loc_B582:
0000C648 4A28 0034                  		tst.b	$34(a0)
0000C64C 6A00                       		bpl.s	loc_B5AA
0000C64E 4A28 0038                  		tst.b	$38(a0)
0000C652 6700                       		beq.s	loc_B594
0000C654 5328 0038                  		subq.b	#1,$38(a0)
0000C658 6600                       		bne.s	loc_B5AA
0000C65A                            
0000C65A                            loc_B594:
0000C65A 4A68 0032                  		tst.w	$32(a0)
0000C65E 6700                       		beq.s	loc_B5A4
0000C660 5368 0032                  		subq.w	#1,$32(a0)
0000C664 5368 0036                  		subq.w	#1,$36(a0)
0000C668 6600                       		bne.s	loc_B5AA
0000C66A                            
0000C66A                            loc_B5A4:
0000C66A 08A8 0007 0034             		bclr	#7,$34(a0)
0000C670                            
0000C670                            loc_B5AA:
0000C670 3028 0032                  		move.w	$32(a0),d0
0000C674 6000                       		bra.s	loc_B5EE
0000C676                            ; ===========================================================================
0000C676                            
0000C676                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C676 0828 0003 0028             		btst	#3,$28(a0)
0000C67C 6700                       		beq.s	Obj30_ChkSwitch
0000C67E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C682 0440 0010                  		subi.w	#$10,d0
0000C686 6000                       		bra.s	loc_B5EE
0000C688                            ; ===========================================================================
0000C688                            
0000C688                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C688 4A28 0034                  		tst.b	$34(a0)
0000C68C 6600                       		bne.s	loc_B5E0
0000C68E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C692 7000                       		moveq	#0,d0
0000C694 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C698 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C69A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C69E 6700                       		beq.s	loc_B5EA	; if not, branch
0000C6A0 117C 0001 0034             		move.b	#1,$34(a0)
0000C6A6                            
0000C6A6                            loc_B5E0:
0000C6A6 4A68 0032                  		tst.w	$32(a0)
0000C6AA 6700                       		beq.s	loc_B5EA
0000C6AC 5568 0032                  		subq.w	#2,$32(a0)
0000C6B0                            
0000C6B0                            loc_B5EA:
0000C6B0 3028 0032                  		move.w	$32(a0),d0
0000C6B4                            
0000C6B4                            loc_B5EE:
0000C6B4 3228 0030                  		move.w	$30(a0),d1
0000C6B8 9240                       		sub.w	d0,d1
0000C6BA 3141 000C                  		move.w	d1,$C(a0)
0000C6BE 4E75                       		rts	
0000C6C0                            ; ===========================================================================
0000C6C0                            ; ---------------------------------------------------------------------------
0000C6C0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C6C0                            ; ---------------------------------------------------------------------------
0000C6C0                            Map_obj30:
0000C6C0                            	include "_maps\obj30.asm"
0000C6C0                            ; ---------------------------------------------------------------------------
0000C6C0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C6C0                            ; ---------------------------------------------------------------------------
0000C6C0 0000                       		dc.w byte_B600-Map_obj30
0000C6C2 0000                       		dc.w byte_B63D-Map_obj30
0000C6C4 0000                       		dc.w byte_B648-Map_obj30
0000C6C6 0C                         byte_B600:	dc.b $C
0000C6C7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C6CC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C6D1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C6D6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C6DB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C6E0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C6E5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C6EA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C6EF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C6F4 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C6F9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C6FE 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C703 02                         byte_B63D:	dc.b 2
0000C704 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C709 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C70E 0A                         byte_B648:	dc.b $A
0000C70F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C714 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C719 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C71E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C723 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C728 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C72D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C732 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C737 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C73C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C742 00                         		even
0000C742 00                         		even
0000C742                            
0000C742                            ; ===========================================================================
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            
0000C742                            Obj31:					; XREF: Obj_Index
0000C742 7000                       		moveq	#0,d0
0000C744 1028 0024                  		move.b	$24(a0),d0
0000C748 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C74C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C750                            ; ===========================================================================
0000C750 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C752 0000                       		dc.w loc_B798-Obj31_Index
0000C754 0000                       		dc.w loc_B7FE-Obj31_Index
0000C756 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C758 0000                       		dc.w loc_B7E2-Obj31_Index
0000C75A                            
0000C75A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C75C 0100                       		dc.b 1,	0
0000C75E                            
0000C75E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C761 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C764 08CC 03                    		dc.b 8,	$CC, 3
0000C767 06F0 02                    		dc.b 6,	$F0, 2
0000C76A                            
0000C76A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C76E 5000 7800                  		dc.w $5000, $7800
0000C772 3800 5800                  		dc.w $3800, $5800
0000C776 B800                       		dc.w $B800
0000C778                            ; ===========================================================================
0000C778                            
0000C778                            Obj31_Main:				; XREF: Obj31_Index
0000C778 7000                       		moveq	#0,d0
0000C77A 1028 0028                  		move.b	$28(a0),d0
0000C77E 6A00                       		bpl.s	loc_B6CE
0000C780 0240 007F                  		andi.w	#$7F,d0
0000C784 D040                       		add.w	d0,d0
0000C786 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C78A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C78E 101A                       		move.b	(a2)+,d0
0000C790 1140 0028                  		move.b	d0,$28(a0)
0000C794                            
0000C794                            loc_B6CE:
0000C794 0200 000F                  		andi.b	#$F,d0
0000C798 D040                       		add.w	d0,d0
0000C79A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C79E 4A40                       		tst.w	d0
0000C7A0 6600                       		bne.s	loc_B6E0
0000C7A2 3142 0032                  		move.w	d2,$32(a0)
0000C7A6                            
0000C7A6                            loc_B6E0:
0000C7A6 45F9 0000 C75E             		lea	(Obj31_Var).l,a2
0000C7AC 2248                       		movea.l	a0,a1
0000C7AE 7203                       		moveq	#3,d1
0000C7B0 6000                       		bra.s	Obj31_MakeStomper
0000C7B2                            ; ===========================================================================
0000C7B2                            
0000C7B2                            Obj31_Loop:
0000C7B2 6100 0000                  		bsr.w	SingleObjLoad2
0000C7B6 6600 0000                  		bne.w	Obj31_SetSize
0000C7BA                            
0000C7BA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C7BA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C7BE 12BC 0031                  		move.b	#$31,0(a1)
0000C7C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C7C8 101A                       		move.b	(a2)+,d0
0000C7CA 4880                       		ext.w	d0
0000C7CC D068 000C                  		add.w	$C(a0),d0
0000C7D0 3340 000C                  		move.w	d0,$C(a1)
0000C7D4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C7DC 337C 0300 0002             		move.w	#$300,2(a1)
0000C7E2 137C 0004 0001             		move.b	#4,1(a1)
0000C7E8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C7EE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C7F4 137C 0010 0019             		move.b	#$10,$19(a1)
0000C7FA 3342 0034                  		move.w	d2,$34(a1)
0000C7FE 137C 0004 0018             		move.b	#4,$18(a1)
0000C804 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C808 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C80E 6600                       		bne.s	loc_B76A
0000C810 5341                       		subq.w	#1,d1
0000C812 1028 0028                  		move.b	$28(a0),d0
0000C816 0240 00F0                  		andi.w	#$F0,d0
0000C81A 0C40 0020                  		cmpi.w	#$20,d0
0000C81E 679A                       		beq.s	Obj31_MakeStomper
0000C820 137C 0038 0019             		move.b	#$38,$19(a1)
0000C826 137C 0090 0020             		move.b	#$90,$20(a1)
0000C82C 5241                       		addq.w	#1,d1
0000C82E                            
0000C82E                            loc_B76A:
0000C82E 2348 003C                  		move.l	a0,$3C(a1)
0000C832 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C836                            
0000C836 137C 0003 0018             		move.b	#3,$18(a1)
0000C83C                            
0000C83C                            Obj31_SetSize:
0000C83C 7000                       		moveq	#0,d0
0000C83E 1028 0028                  		move.b	$28(a0),d0
0000C842 E648                       		lsr.w	#3,d0
0000C844 0200 000E                  		andi.b	#$E,d0
0000C848 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C84C 115A 0019                  		move.b	(a2)+,$19(a0)
0000C850 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C854 6000                       		bra.s	loc_B798
0000C856                            ; ===========================================================================
0000C856 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C858 3009                       		dc.b $30, 9
0000C85A 100A                       		dc.b $10, $A
0000C85C                            ; ===========================================================================
0000C85C                            
0000C85C                            loc_B798:				; XREF: Obj31_Index
0000C85C 6100 0000                  		bsr.w	Obj31_Types
0000C860 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C866 7200                       		moveq	#0,d1
0000C868 1228 0019                  		move.b	$19(a0),d1
0000C86C 0641 000B                  		addi.w	#$B,d1
0000C870 343C 000C                  		move.w	#$C,d2
0000C874 363C 000D                  		move.w	#$D,d3
0000C878 3828 0008                  		move.w	8(a0),d4
0000C87C 6100 0000                  		bsr.w	SolidObject
0000C880 0828 0003 0022             		btst	#3,$22(a0)
0000C886 6700                       		beq.s	Obj31_Display
0000C888 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C88E 6400                       		bcc.s	Obj31_Display
0000C890 2448                       		movea.l	a0,a2
0000C892 41F8 D000                  		lea	($FFFFD000).w,a0
0000C896 4EB9 0000 0000             		jsr	KillSonic
0000C89C 204A                       		movea.l	a2,a0
0000C89E                            
0000C89E                            Obj31_Display:
0000C89E 6100 0000                  		bsr.w	DisplaySprite
0000C8A2 6000 0000                  		bra.w	Obj31_ChkDel
0000C8A6                            ; ===========================================================================
0000C8A6                            
0000C8A6                            loc_B7E2:				; XREF: Obj31_Index
0000C8A6 117C 0080 0016             		move.b	#$80,$16(a0)
0000C8AC 08E8 0004 0001             		bset	#4,1(a0)
0000C8B2 2268 003C                  		movea.l	$3C(a0),a1
0000C8B6 1029 0032                  		move.b	$32(a1),d0
0000C8BA EA08                       		lsr.b	#5,d0
0000C8BC 5600                       		addq.b	#3,d0
0000C8BE 1140 001A                  		move.b	d0,$1A(a0)
0000C8C2                            
0000C8C2                            loc_B7FE:				; XREF: Obj31_Index
0000C8C2 2268 003C                  		movea.l	$3C(a0),a1
0000C8C6 7000                       		moveq	#0,d0
0000C8C8 1029 0032                  		move.b	$32(a1),d0
0000C8CC D068 0030                  		add.w	$30(a0),d0
0000C8D0 3140 000C                  		move.w	d0,$C(a0)
0000C8D4                            
0000C8D4                            Obj31_Display2:				; XREF: Obj31_Index
0000C8D4 6100 0000                  		bsr.w	DisplaySprite
0000C8D8                            
0000C8D8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C8D8 3028 0008                  		move.w	8(a0),d0
0000C8DC 0240 FF80                  		andi.w	#$FF80,d0
0000C8E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8E4 0441 0080                  		subi.w	#$80,d1
0000C8E8 0241 FF80                  		andi.w	#$FF80,d1
0000C8EC 9041                       		sub.w	d1,d0
0000C8EE 0C40 0280                  		cmpi.w	#$280,d0
0000C8F2 6200 0000                  		bhi.w	DeleteObject
0000C8F6 4E75                       		rts	
0000C8F8                            ; ===========================================================================
0000C8F8                            
0000C8F8                            Obj31_Types:				; XREF: loc_B798
0000C8F8 1028 0028                  		move.b	$28(a0),d0
0000C8FC 0240 000F                  		andi.w	#$F,d0
0000C900 D040                       		add.w	d0,d0
0000C902 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C906 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C90A                            ; ===========================================================================
0000C90A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C90C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C90E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C910 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C912 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C914 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C916 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C918                            ; ===========================================================================
0000C918                            
0000C918                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C918 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C91C 7000                       		moveq	#0,d0
0000C91E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C922 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C926 6700                       		beq.s	loc_B8A8	; if not, branch
0000C928 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C92C 6A00                       		bpl.s	loc_B872
0000C92E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C934 6700                       		beq.s	loc_B8A0
0000C936                            
0000C936                            loc_B872:
0000C936 4A68 0032                  		tst.w	$32(a0)
0000C93A 6700                       		beq.s	loc_B8A0
0000C93C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C940 0200 000F                  		andi.b	#$F,d0
0000C944 6600                       		bne.s	loc_B892
0000C946 4A28 0001                  		tst.b	1(a0)
0000C94A 6A00                       		bpl.s	loc_B892
0000C94C 303C 00C7                  		move.w	#$C7,d0
0000C950 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C956                            
0000C956                            loc_B892:
0000C956 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C95C 6400                       		bcc.s	Obj31_Restart
0000C95E 317C 0000 0032             		move.w	#0,$32(a0)
0000C964                            
0000C964                            loc_B8A0:
0000C964 317C 0000 0012             		move.w	#0,$12(a0)
0000C96A 6000                       		bra.s	Obj31_Restart
0000C96C                            ; ===========================================================================
0000C96C                            
0000C96C                            loc_B8A8:				; XREF: Obj31_Type00
0000C96C 3228 0034                  		move.w	$34(a0),d1
0000C970 B268 0032                  		cmp.w	$32(a0),d1
0000C974 6700                       		beq.s	Obj31_Restart
0000C976 3028 0012                  		move.w	$12(a0),d0
0000C97A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C980 D168 0032                  		add.w	d0,$32(a0)
0000C984 B268 0032                  		cmp.w	$32(a0),d1
0000C988 6200                       		bhi.s	Obj31_Restart
0000C98A 3141 0032                  		move.w	d1,$32(a0)
0000C98E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C994 4A28 0001                  		tst.b	1(a0)
0000C998 6A00                       		bpl.s	Obj31_Restart
0000C99A 303C 00BD                  		move.w	#$BD,d0
0000C99E 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C9A4                            
0000C9A4                            Obj31_Restart:
0000C9A4 7000                       		moveq	#0,d0
0000C9A6 1028 0032                  		move.b	$32(a0),d0
0000C9AA D068 0030                  		add.w	$30(a0),d0
0000C9AE 3140 000C                  		move.w	d0,$C(a0)
0000C9B2 4E75                       		rts	
0000C9B4                            ; ===========================================================================
0000C9B4                            
0000C9B4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C9B4 4A68 0036                  		tst.w	$36(a0)
0000C9B8 6700                       		beq.s	loc_B938
0000C9BA 4A68 0038                  		tst.w	$38(a0)
0000C9BE 6700                       		beq.s	loc_B902
0000C9C0 5368 0038                  		subq.w	#1,$38(a0)
0000C9C4 6000                       		bra.s	loc_B97C
0000C9C6                            ; ===========================================================================
0000C9C6                            
0000C9C6                            loc_B902:
0000C9C6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9CA 0200 000F                  		andi.b	#$F,d0
0000C9CE 6600                       		bne.s	loc_B91C
0000C9D0 4A28 0001                  		tst.b	1(a0)
0000C9D4 6A00                       		bpl.s	loc_B91C
0000C9D6 303C 00C7                  		move.w	#$C7,d0
0000C9DA 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C9E0                            
0000C9E0                            loc_B91C:
0000C9E0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C9E6 6400                       		bcc.s	loc_B97C
0000C9E8 317C 0000 0032             		move.w	#0,$32(a0)
0000C9EE 317C 0000 0012             		move.w	#0,$12(a0)
0000C9F4 317C 0000 0036             		move.w	#0,$36(a0)
0000C9FA 6000                       		bra.s	loc_B97C
0000C9FC                            ; ===========================================================================
0000C9FC                            
0000C9FC                            loc_B938:				; XREF: Obj31_Type01
0000C9FC 3228 0034                  		move.w	$34(a0),d1
0000CA00 B268 0032                  		cmp.w	$32(a0),d1
0000CA04 6700                       		beq.s	loc_B97C
0000CA06 3028 0012                  		move.w	$12(a0),d0
0000CA0A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CA10 D168 0032                  		add.w	d0,$32(a0)
0000CA14 B268 0032                  		cmp.w	$32(a0),d1
0000CA18 6200                       		bhi.s	loc_B97C
0000CA1A 3141 0032                  		move.w	d1,$32(a0)
0000CA1E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CA24 317C 0001 0036             		move.w	#1,$36(a0)
0000CA2A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CA30 4A28 0001                  		tst.b	1(a0)
0000CA34 6A00                       		bpl.s	loc_B97C
0000CA36 303C 00BD                  		move.w	#$BD,d0
0000CA3A 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CA40                            
0000CA40                            loc_B97C:
0000CA40 6000 FF62                  		bra.w	Obj31_Restart
0000CA44                            ; ===========================================================================
0000CA44                            
0000CA44                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CA44 3038 D008                  		move.w	($FFFFD008).w,d0
0000CA48 9068 0008                  		sub.w	8(a0),d0
0000CA4C 6400                       		bcc.s	loc_B98C
0000CA4E 4440                       		neg.w	d0
0000CA50                            
0000CA50                            loc_B98C:
0000CA50 0C40 0090                  		cmpi.w	#$90,d0
0000CA54 6400                       		bcc.s	loc_B996
0000CA56 5228 0028                  		addq.b	#1,$28(a0)
0000CA5A                            
0000CA5A                            loc_B996:
0000CA5A 6000 FF48                  		bra.w	Obj31_Restart
0000CA5E                            ; ===========================================================================
0000CA5E                            ; ---------------------------------------------------------------------------
0000CA5E                            ; Object 45 - spiked metal block from beta version (MZ)
0000CA5E                            ; ---------------------------------------------------------------------------
0000CA5E                            
0000CA5E                            Obj45:					; XREF: Obj_Index
0000CA5E 7000                       		moveq	#0,d0
0000CA60 1028 0024                  		move.b	$24(a0),d0
0000CA64 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CA68 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CA6C                            ; ===========================================================================
0000CA6C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CA6E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CA70 0000                       		dc.w loc_BA8E-Obj45_Index
0000CA72 0000                       		dc.w Obj45_Display-Obj45_Index
0000CA74 0000                       		dc.w loc_BA7A-Obj45_Index
0000CA76                            
0000CA76 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CA79 04E4 01                    		dc.b	4, $E4,	  1
0000CA7C 0834 03                    		dc.b	8, $34,	  3
0000CA7F 0628 02                    		dc.b	6, $28,	  2
0000CA82                            
0000CA82 3800                       word_B9BE:	dc.w $3800
0000CA84 A000                       		dc.w -$6000
0000CA86 5000                       		dc.w $5000
0000CA88                            ; ===========================================================================
0000CA88                            
0000CA88                            Obj45_Main:				; XREF: Obj45_Index
0000CA88 7000                       		moveq	#0,d0
0000CA8A 1028 0028                  		move.b	$28(a0),d0
0000CA8E D040                       		add.w	d0,d0
0000CA90 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CA94 45F9 0000 CA76             		lea	(Obj45_Var).l,a2
0000CA9A 2248                       		movea.l	a0,a1
0000CA9C 7203                       		moveq	#3,d1
0000CA9E 6000                       		bra.s	Obj45_Load
0000CAA0                            ; ===========================================================================
0000CAA0                            
0000CAA0                            Obj45_Loop:
0000CAA0 6100 0000                  		bsr.w	SingleObjLoad2
0000CAA4 6600                       		bne.s	loc_BA52
0000CAA6                            
0000CAA6                            Obj45_Load:				; XREF: Obj45_Main
0000CAA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAAA 12BC 0045                  		move.b	#$45,0(a1)
0000CAAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CAB4 101A                       		move.b	(a2)+,d0
0000CAB6 4880                       		ext.w	d0
0000CAB8 D068 0008                  		add.w	8(a0),d0
0000CABC 3340 0008                  		move.w	d0,8(a1)
0000CAC0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CAC8 337C 0300 0002             		move.w	#$300,2(a1)
0000CACE 137C 0004 0001             		move.b	#4,1(a1)
0000CAD4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CADA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CAE0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CAE6 137C 0020 0019             		move.b	#$20,$19(a1)
0000CAEC 3342 0034                  		move.w	d2,$34(a1)
0000CAF0 137C 0004 0018             		move.b	#4,$18(a1)
0000CAF6 0C12 0001                  		cmpi.b	#1,(a2)
0000CAFA 6600                       		bne.s	loc_BA40
0000CAFC 137C 0091 0020             		move.b	#$91,$20(a1)
0000CB02                            
0000CB02                            loc_BA40:
0000CB02 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CB06 2348 003C                  		move.l	a0,$3C(a1)
0000CB0A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CB0E                            
0000CB0E 137C 0003 0018             		move.b	#3,$18(a1)
0000CB14                            
0000CB14                            loc_BA52:
0000CB14 117C 0010 0019             		move.b	#$10,$19(a0)
0000CB1A                            
0000CB1A                            Obj45_Solid:				; XREF: Obj45_Index
0000CB1A 3F28 0008                  		move.w	8(a0),-(sp)
0000CB1E 6100 0000                  		bsr.w	Obj45_Move
0000CB22 323C 0017                  		move.w	#$17,d1
0000CB26 343C 0020                  		move.w	#$20,d2
0000CB2A 363C 0020                  		move.w	#$20,d3
0000CB2E 381F                       		move.w	(sp)+,d4
0000CB30 6100 0000                  		bsr.w	SolidObject
0000CB34 6100 0000                  		bsr.w	DisplaySprite
0000CB38 6000 0000                  		bra.w	Obj45_ChkDel
0000CB3C                            ; ===========================================================================
0000CB3C                            
0000CB3C                            loc_BA7A:				; XREF: Obj45_Index
0000CB3C 2268 003C                  		movea.l	$3C(a0),a1
0000CB40 1029 0032                  		move.b	$32(a1),d0
0000CB44 0600 0010                  		addi.b	#$10,d0
0000CB48 EA08                       		lsr.b	#5,d0
0000CB4A 5600                       		addq.b	#3,d0
0000CB4C 1140 001A                  		move.b	d0,$1A(a0)
0000CB50                            
0000CB50                            loc_BA8E:				; XREF: Obj45_Index
0000CB50 2268 003C                  		movea.l	$3C(a0),a1
0000CB54 7000                       		moveq	#0,d0
0000CB56 1029 0032                  		move.b	$32(a1),d0
0000CB5A 4440                       		neg.w	d0
0000CB5C D068 0030                  		add.w	$30(a0),d0
0000CB60 3140 0008                  		move.w	d0,8(a0)
0000CB64                            
0000CB64                            Obj45_Display:				; XREF: Obj45_Index
0000CB64 6100 0000                  		bsr.w	DisplaySprite
0000CB68                            
0000CB68                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CB68 3028 003A                  		move.w	$3A(a0),d0
0000CB6C 0240 FF80                  		andi.w	#$FF80,d0
0000CB70 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB74 0441 0080                  		subi.w	#$80,d1
0000CB78 0241 FF80                  		andi.w	#$FF80,d1
0000CB7C 9041                       		sub.w	d1,d0
0000CB7E 0C40 0280                  		cmpi.w	#$280,d0
0000CB82 6200 0000                  		bhi.w	DeleteObject
0000CB86 4E75                       		rts	
0000CB88                            
0000CB88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CB88                            
0000CB88                            
0000CB88                            Obj45_Move:				; XREF: Obj45_Solid
0000CB88 7000                       		moveq	#0,d0
0000CB8A 1028 0028                  		move.b	$28(a0),d0
0000CB8E D040                       		add.w	d0,d0
0000CB90 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CB94 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CB98                            ; End of function Obj45_Move
0000CB98                            
0000CB98                            ; ===========================================================================
0000CB98 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CB9A 0000                       		dc.w loc_BADA-off_BAD6
0000CB9C                            ; ===========================================================================
0000CB9C                            
0000CB9C                            loc_BADA:				; XREF: off_BAD6
0000CB9C 4A68 0036                  		tst.w	$36(a0)
0000CBA0 6700                       		beq.s	loc_BB08
0000CBA2 4A68 0038                  		tst.w	$38(a0)
0000CBA6 6700                       		beq.s	loc_BAEC
0000CBA8 5368 0038                  		subq.w	#1,$38(a0)
0000CBAC 6000                       		bra.s	loc_BB3C
0000CBAE                            ; ===========================================================================
0000CBAE                            
0000CBAE                            loc_BAEC:
0000CBAE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CBB4 6400                       		bcc.s	loc_BB3C
0000CBB6 317C 0000 0032             		move.w	#0,$32(a0)
0000CBBC 317C 0000 0010             		move.w	#0,$10(a0)
0000CBC2 317C 0000 0036             		move.w	#0,$36(a0)
0000CBC8 6000                       		bra.s	loc_BB3C
0000CBCA                            ; ===========================================================================
0000CBCA                            
0000CBCA                            loc_BB08:				; XREF: loc_BADA
0000CBCA 3228 0034                  		move.w	$34(a0),d1
0000CBCE B268 0032                  		cmp.w	$32(a0),d1
0000CBD2 6700                       		beq.s	loc_BB3C
0000CBD4 3028 0010                  		move.w	$10(a0),d0
0000CBD8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CBDE D168 0032                  		add.w	d0,$32(a0)
0000CBE2 B268 0032                  		cmp.w	$32(a0),d1
0000CBE6 6200                       		bhi.s	loc_BB3C
0000CBE8 3141 0032                  		move.w	d1,$32(a0)
0000CBEC 317C 0000 0010             		move.w	#0,$10(a0)
0000CBF2 317C 0001 0036             		move.w	#1,$36(a0)
0000CBF8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CBFE                            
0000CBFE                            loc_BB3C:
0000CBFE 7000                       		moveq	#0,d0
0000CC00 1028 0032                  		move.b	$32(a0),d0
0000CC04 4440                       		neg.w	d0
0000CC06 D068 0030                  		add.w	$30(a0),d0
0000CC0A 3140 0008                  		move.w	d0,8(a0)
0000CC0E 4E75                       		rts	
0000CC10                            ; ===========================================================================
0000CC10                            ; ---------------------------------------------------------------------------
0000CC10                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CC10                            ; ---------------------------------------------------------------------------
0000CC10                            Map_obj31:
0000CC10                            	include "_maps\obj31.asm"
0000CC10                            ; ---------------------------------------------------------------------------
0000CC10                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CC10                            ; ---------------------------------------------------------------------------
0000CC10 0000                       		dc.w byte_BB64-Map_obj31
0000CC12 0000                       		dc.w byte_BB7E-Map_obj31
0000CC14 0000                       		dc.w byte_BB98-Map_obj31
0000CC16 0000                       		dc.w byte_BB9E-Map_obj31
0000CC18 0000                       		dc.w byte_BBA9-Map_obj31
0000CC1A 0000                       		dc.w byte_BBBE-Map_obj31
0000CC1C 0000                       		dc.w byte_BBDD-Map_obj31
0000CC1E 0000                       		dc.w byte_BC06-Map_obj31
0000CC20 0000                       		dc.w byte_BC06-Map_obj31
0000CC22 0000                       		dc.w byte_BC39-Map_obj31
0000CC24 0000                       		dc.w byte_BC53-Map_obj31
0000CC26 05                         byte_BB64:	dc.b 5
0000CC27 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CC2C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CC31 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CC36 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CC3B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CC40 05                         byte_BB7E:	dc.b 5
0000CC41 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CC46 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CC4B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CC50 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CC55 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CC5A 01                         byte_BB98:	dc.b 1
0000CC5B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CC60 02                         byte_BB9E:	dc.b 2
0000CC61 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC66 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC6B 04                         byte_BBA9:	dc.b 4
0000CC6C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC71 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC76 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC7B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC80 06                         byte_BBBE:	dc.b 6
0000CC81 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC86 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC8B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC90 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC95 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC9A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC9F 08                         byte_BBDD:	dc.b 8
0000CCA0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CCA5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CCAA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CCAF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CCB4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CCB9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CCBE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CCC3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CCC8 0A                         byte_BC06:	dc.b $A
0000CCC9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CCCE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CCD3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CCD8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CCDD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CCE2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CCE7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CCEC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CCF1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CCF6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CCFB 05                         byte_BC39:	dc.b 5
0000CCFC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CD01 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CD06 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CD0B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CD10 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CD15 01                         byte_BC53:	dc.b 1
0000CD16 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CD1C 00                         		even
0000CD1C 00                         		even
0000CD1C                            
0000CD1C                            ; ---------------------------------------------------------------------------
0000CD1C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CD1C                            ; ---------------------------------------------------------------------------
0000CD1C                            Map_obj45:
0000CD1C                            	include "_maps\obj45.asm"
0000CD1C                            ; ---------------------------------------------------------------------------
0000CD1C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CD1C                            ; ---------------------------------------------------------------------------
0000CD1C 0000                       		dc.w byte_BC6C-Map_obj45
0000CD1E 0000                       		dc.w byte_BC7C-Map_obj45
0000CD20 0000                       		dc.w byte_BC8C-Map_obj45
0000CD22 0000                       		dc.w byte_BC92-Map_obj45
0000CD24 0000                       		dc.w byte_BC9D-Map_obj45
0000CD26 0000                       		dc.w byte_BCB2-Map_obj45
0000CD28 0000                       		dc.w byte_BCD1-Map_obj45
0000CD2A 0000                       		dc.w byte_BCFA-Map_obj45
0000CD2C 0000                       		dc.w byte_BCFA-Map_obj45
0000CD2E 03                         byte_BC6C:	dc.b 3
0000CD2F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CD34 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CD39 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CD3E 03                         byte_BC7C:	dc.b 3
0000CD3F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CD44 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CD49 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CD4E 01                         byte_BC8C:	dc.b 1
0000CD4F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CD54 02                         byte_BC92:	dc.b 2
0000CD55 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD5A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD5F 04                         byte_BC9D:	dc.b 4
0000CD60 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD65 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD6A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD6F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD74 06                         byte_BCB2:	dc.b 6
0000CD75 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD7A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD7F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD84 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD89 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD8E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD93 08                         byte_BCD1:	dc.b 8
0000CD94 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD99 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD9E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CDA3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CDA8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CDAD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CDB2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CDB7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CDBC 08                         byte_BCFA:	dc.b 8
0000CDBD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CDC2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CDC7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CDCC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CDD1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CDD6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CDDB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CDE0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CDE5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CDEA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CDF0 00                         		even
0000CDF0 00                         		even
0000CDF0                            
0000CDF0                            ; ===========================================================================
0000CDF0                            ; ---------------------------------------------------------------------------
0000CDF0                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CDF0                            ; ---------------------------------------------------------------------------
0000CDF0                            
0000CDF0                            Obj32:					; XREF: Obj_Index
0000CDF0 7000                       		moveq	#0,d0
0000CDF2 1028 0024                  		move.b	$24(a0),d0
0000CDF6 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CDFA 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CDFE                            ; ===========================================================================
0000CDFE 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CE00 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CE02                            ; ===========================================================================
0000CE02                            
0000CE02                            Obj32_Main:				; XREF: Obj32_Index
0000CE02 5428 0024                  		addq.b	#2,$24(a0)
0000CE06 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000CE0E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000CE14 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000CE1A 6700                       		beq.s	loc_BD60
0000CE1C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000CE22                            
0000CE22                            loc_BD60:
0000CE22 117C 0004 0001             		move.b	#4,1(a0)
0000CE28 117C 0010 0019             		move.b	#$10,$19(a0)
0000CE2E 117C 0004 0018             		move.b	#4,$18(a0)
0000CE34 5668 000C                  		addq.w	#3,$C(a0)
0000CE38                            
0000CE38                            Obj32_Pressed:				; XREF: Obj32_Index
0000CE38 4A28 0001                  		tst.b	1(a0)
0000CE3C 6A00                       		bpl.s	Obj32_Display
0000CE3E 323C 001B                  		move.w	#$1B,d1
0000CE42 343C 0005                  		move.w	#5,d2
0000CE46 363C 0005                  		move.w	#5,d3
0000CE4A 3828 0008                  		move.w	8(a0),d4
0000CE4E 6100 0000                  		bsr.w	SolidObject
0000CE52 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000CE58 1028 0028                  		move.b	$28(a0),d0
0000CE5C 0240 000F                  		andi.w	#$F,d0
0000CE60 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000CE64 47F3 0000                  		lea	(a3,d0.w),a3
0000CE68 7600                       		moveq	#0,d3
0000CE6A 0828 0006 0028             		btst	#6,$28(a0)
0000CE70 6700                       		beq.s	loc_BDB2
0000CE72 7607                       		moveq	#7,d3
0000CE74                            
0000CE74                            loc_BDB2:
0000CE74 4A28 0028                  		tst.b	$28(a0)
0000CE78 6A00                       		bpl.s	loc_BDBE
0000CE7A 6100 0000                  		bsr.w	Obj32_MZBlock
0000CE7E 6600                       		bne.s	loc_BDC8
0000CE80                            
0000CE80                            loc_BDBE:
0000CE80 4A28 0025                  		tst.b	$25(a0)
0000CE84 6600                       		bne.s	loc_BDC8
0000CE86 0793                       		bclr	d3,(a3)
0000CE88 6000                       		bra.s	loc_BDDE
0000CE8A                            ; ===========================================================================
0000CE8A                            
0000CE8A                            loc_BDC8:
0000CE8A 4A13                       		tst.b	(a3)
0000CE8C 6600                       		bne.s	loc_BDD6
0000CE8E 303C 00CD                  		move.w	#$CD,d0
0000CE92 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play switch sound
0000CE98                            
0000CE98                            loc_BDD6:
0000CE98 07D3                       		bset	d3,(a3)
0000CE9A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000CEA0                            
0000CEA0                            loc_BDDE:
0000CEA0 0828 0005 0028             		btst	#5,$28(a0)
0000CEA6 6700                       		beq.s	Obj32_Display
0000CEA8 5328 001E                  		subq.b	#1,$1E(a0)
0000CEAC 6A00                       		bpl.s	Obj32_Display
0000CEAE 117C 0007 001E             		move.b	#7,$1E(a0)
0000CEB4 0868 0001 001A             		bchg	#1,$1A(a0)
0000CEBA                            
0000CEBA                            Obj32_Display:
0000CEBA 6100 0000                  		bsr.w	DisplaySprite
0000CEBE 3028 0008                  		move.w	8(a0),d0
0000CEC2 0240 FF80                  		andi.w	#$FF80,d0
0000CEC6 3238 F700                  		move.w	($FFFFF700).w,d1
0000CECA 0441 0080                  		subi.w	#$80,d1
0000CECE 0241 FF80                  		andi.w	#$FF80,d1
0000CED2 9041                       		sub.w	d1,d0
0000CED4 0C40 0280                  		cmpi.w	#$280,d0
0000CED8 6200 0000                  		bhi.w	Obj32_Delete
0000CEDC 4E75                       		rts	
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            Obj32_Delete:
0000CEDE 6100 0000                  		bsr.w	DeleteObject
0000CEE2 4E75                       		rts	
0000CEE4                            
0000CEE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEE4                            
0000CEE4                            
0000CEE4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000CEE4 3F03                       		move.w	d3,-(sp)
0000CEE6 3428 0008                  		move.w	8(a0),d2
0000CEEA 3628 000C                  		move.w	$C(a0),d3
0000CEEE 0442 0010                  		subi.w	#$10,d2
0000CEF2 5143                       		subq.w	#8,d3
0000CEF4 383C 0020                  		move.w	#$20,d4
0000CEF8 3A3C 0010                  		move.w	#$10,d5
0000CEFC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000CF00 3C3C 005F                  		move.w	#$5F,d6
0000CF04                            
0000CF04                            Obj32_MZLoop:
0000CF04 4A29 0001                  		tst.b	1(a1)
0000CF08 6A00                       		bpl.s	loc_BE4E
0000CF0A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000CF0E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000CF10                            
0000CF10                            loc_BE4E:
0000CF10 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000CF14 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000CF18                            
0000CF18 361F                       		move.w	(sp)+,d3
0000CF1A 7000                       		moveq	#0,d0
0000CF1C                            
0000CF1C                            locret_BE5A:
0000CF1C 4E75                       		rts	
0000CF1E                            ; ===========================================================================
0000CF1E 1010                       Obj32_MZData:	dc.b $10, $10
0000CF20                            ; ===========================================================================
0000CF20                            
0000CF20                            loc_BE5E:				; XREF: Obj32_MZBlock
0000CF20 7001                       		moveq	#1,d0
0000CF22 0240 003F                  		andi.w	#$3F,d0
0000CF26 D040                       		add.w	d0,d0
0000CF28 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000CF2C 121A                       		move.b	(a2)+,d1
0000CF2E 4881                       		ext.w	d1
0000CF30 3029 0008                  		move.w	8(a1),d0
0000CF34 9041                       		sub.w	d1,d0
0000CF36 9042                       		sub.w	d2,d0
0000CF38 6400                       		bcc.s	loc_BE80
0000CF3A D241                       		add.w	d1,d1
0000CF3C D041                       		add.w	d1,d0
0000CF3E 6500                       		bcs.s	loc_BE84
0000CF40 60CE                       		bra.s	loc_BE4E
0000CF42                            ; ===========================================================================
0000CF42                            
0000CF42                            loc_BE80:
0000CF42 B044                       		cmp.w	d4,d0
0000CF44 62CA                       		bhi.s	loc_BE4E
0000CF46                            
0000CF46                            loc_BE84:
0000CF46 121A                       		move.b	(a2)+,d1
0000CF48 4881                       		ext.w	d1
0000CF4A 3029 000C                  		move.w	$C(a1),d0
0000CF4E 9041                       		sub.w	d1,d0
0000CF50 9043                       		sub.w	d3,d0
0000CF52 6400                       		bcc.s	loc_BE9A
0000CF54 D241                       		add.w	d1,d1
0000CF56 D041                       		add.w	d1,d0
0000CF58 6500                       		bcs.s	loc_BE9E
0000CF5A 60B4                       		bra.s	loc_BE4E
0000CF5C                            ; ===========================================================================
0000CF5C                            
0000CF5C                            loc_BE9A:
0000CF5C B045                       		cmp.w	d5,d0
0000CF5E 62B0                       		bhi.s	loc_BE4E
0000CF60                            
0000CF60                            loc_BE9E:
0000CF60 361F                       		move.w	(sp)+,d3
0000CF62 7001                       		moveq	#1,d0
0000CF64 4E75                       		rts	
0000CF66                            ; End of function Obj32_MZBlock
0000CF66                            
0000CF66                            ; ===========================================================================
0000CF66                            ; ---------------------------------------------------------------------------
0000CF66                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CF66                            ; ---------------------------------------------------------------------------
0000CF66                            Map_obj32:
0000CF66                            	include "_maps\obj32.asm"
0000CF66                            ; ---------------------------------------------------------------------------
0000CF66                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CF66                            ; ---------------------------------------------------------------------------
0000CF66 0000                       		dc.w byte_BEAC-Map_obj32
0000CF68 0000                       		dc.w byte_BEB7-Map_obj32
0000CF6A 0000                       		dc.w byte_BEC2-Map_obj32
0000CF6C 0000                       		dc.w byte_BEB7-Map_obj32
0000CF6E 02                         byte_BEAC:	dc.b 2
0000CF6F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CF74 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CF79 02                         byte_BEB7:	dc.b 2
0000CF7A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CF7F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CF84 02                         byte_BEC2:	dc.b 2
0000CF85 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CF8A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CF8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF94                            		even
0000CF94                            		even
0000CF94                            
0000CF94                            ; ===========================================================================
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            ; Object 33 - pushable blocks (MZ, LZ)
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            
0000CF94                            Obj33:					; XREF: Obj_Index
0000CF94 7000                       		moveq	#0,d0
0000CF96 1028 0024                  		move.b	$24(a0),d0
0000CF9A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CF9E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CFA2                            ; ===========================================================================
0000CFA2 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CFA4 0000                       		dc.w loc_BF6E-Obj33_Index
0000CFA6 0000                       		dc.w loc_C02C-Obj33_Index
0000CFA8                            
0000CFA8 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CFAA 4001                       		dc.b $40, 1
0000CFAC                            ; ===========================================================================
0000CFAC                            
0000CFAC                            Obj33_Main:				; XREF: Obj33_Index
0000CFAC 5428 0024                  		addq.b	#2,$24(a0)
0000CFB0 117C 000F 0016             		move.b	#$F,$16(a0)
0000CFB6 117C 000F 0017             		move.b	#$F,$17(a0)
0000CFBC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CFC4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CFCA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CFD0 6600                       		bne.s	loc_BF16
0000CFD2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CFD8                            
0000CFD8                            loc_BF16:
0000CFD8 117C 0004 0001             		move.b	#4,1(a0)
0000CFDE 117C 0003 0018             		move.b	#3,$18(a0)
0000CFE4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CFEA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CFF0 7000                       		moveq	#0,d0
0000CFF2 1028 0028                  		move.b	$28(a0),d0
0000CFF6 D040                       		add.w	d0,d0
0000CFF8 0240 000E                  		andi.w	#$E,d0
0000CFFC 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D000 115A 0019                  		move.b	(a2)+,$19(a0)
0000D004 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D008 4A28 0028                  		tst.b	$28(a0)
0000D00C 6700                       		beq.s	Obj33_ChkGone
0000D00E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D014                            
0000D014                            Obj33_ChkGone:
0000D014 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D018 7000                       		moveq	#0,d0
0000D01A 1028 0023                  		move.b	$23(a0),d0
0000D01E 6700                       		beq.s	loc_BF6E
0000D020 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D026 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D02C 6600 0000                  		bne.w	DeleteObject
0000D030                            
0000D030                            loc_BF6E:				; XREF: Obj33_Index
0000D030 4A28 0032                  		tst.b	$32(a0)
0000D034 6600 0000                  		bne.w	loc_C046
0000D038 7200                       		moveq	#0,d1
0000D03A 1228 0019                  		move.b	$19(a0),d1
0000D03E 0641 000B                  		addi.w	#$B,d1
0000D042 343C 0010                  		move.w	#$10,d2
0000D046 363C 0011                  		move.w	#$11,d3
0000D04A 3828 0008                  		move.w	8(a0),d4
0000D04E 6100 0000                  		bsr.w	loc_C186
0000D052 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D058 6600                       		bne.s	loc_BFC6	; if not, branch
0000D05A 08A8 0007 0028             		bclr	#7,$28(a0)
0000D060 3028 0008                  		move.w	8(a0),d0
0000D064 0C40 0A20                  		cmpi.w	#$A20,d0
0000D068 6500                       		bcs.s	loc_BFC6
0000D06A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D06E 6400                       		bcc.s	loc_BFC6
0000D070 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D074 0440 001C                  		subi.w	#$1C,d0
0000D078 3140 000C                  		move.w	d0,$C(a0)
0000D07C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D082 08E8 0007 0028             		bset	#7,$28(a0)
0000D088                            
0000D088                            loc_BFC6:
0000D088 3028 0008                  		move.w	8(a0),d0
0000D08C 0240 FF80                  		andi.w	#$FF80,d0
0000D090 3238 F700                  		move.w	($FFFFF700).w,d1
0000D094 0441 0080                  		subi.w	#$80,d1
0000D098 0241 FF80                  		andi.w	#$FF80,d1
0000D09C 9041                       		sub.w	d1,d0
0000D09E 0C40 0280                  		cmpi.w	#$280,d0
0000D0A2 6200                       		bhi.s	loc_BFE6
0000D0A4 6000 0000                  		bra.w	DisplaySprite
0000D0A8                            ; ===========================================================================
0000D0A8                            
0000D0A8                            loc_BFE6:
0000D0A8 3028 0034                  		move.w	$34(a0),d0
0000D0AC 0240 FF80                  		andi.w	#$FF80,d0
0000D0B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0B4 0441 0080                  		subi.w	#$80,d1
0000D0B8 0241 FF80                  		andi.w	#$FF80,d1
0000D0BC 9041                       		sub.w	d1,d0
0000D0BE 0C40 0280                  		cmpi.w	#$280,d0
0000D0C2 6200                       		bhi.s	loc_C016
0000D0C4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D0CA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D0D0 117C 0004 0024             		move.b	#4,$24(a0)
0000D0D6 6000                       		bra.s	loc_C02C
0000D0D8                            ; ===========================================================================
0000D0D8                            
0000D0D8                            loc_C016:
0000D0D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D0DC 7000                       		moveq	#0,d0
0000D0DE 1028 0023                  		move.b	$23(a0),d0
0000D0E2 6700                       		beq.s	loc_C028
0000D0E4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000D0EA                            
0000D0EA                            loc_C028:
0000D0EA 6000 0000                  		bra.w	DeleteObject
0000D0EE                            ; ===========================================================================
0000D0EE                            
0000D0EE                            loc_C02C:				; XREF: Obj33_Index
0000D0EE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D0F2 6700                       		beq.s	locret_C044
0000D0F4 117C 0002 0024             		move.b	#2,$24(a0)
0000D0FA 4228 0032                  		clr.b	$32(a0)
0000D0FE 4268 0010                  		clr.w	$10(a0)
0000D102 4268 0012                  		clr.w	$12(a0)
0000D106                            
0000D106                            locret_C044:
0000D106 4E75                       		rts	
0000D108                            ; ===========================================================================
0000D108                            
0000D108                            loc_C046:				; XREF: loc_BF6E
0000D108 3F28 0008                  		move.w	8(a0),-(sp)
0000D10C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D112 6400                       		bcc.s	loc_C056
0000D114 6100 0000                  		bsr.w	SpeedToPos
0000D118                            
0000D118                            loc_C056:
0000D118 0828 0001 0022             		btst	#1,$22(a0)
0000D11E 6700                       		beq.s	loc_C0A0
0000D120 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D126 4EB9 0000 0000             		jsr	ObjHitFloor
0000D12C 4A41                       		tst.w	d1
0000D12E 6A00 0000                  		bpl.w	loc_C09E
0000D132 D368 000C                  		add.w	d1,$C(a0)
0000D136 4268 0012                  		clr.w	$12(a0)
0000D13A 08A8 0001 0022             		bclr	#1,$22(a0)
0000D140 3011                       		move.w	(a1),d0
0000D142 0240 03FF                  		andi.w	#$3FF,d0
0000D146 0C40 016A                  		cmpi.w	#$16A,d0
0000D14A 6500                       		bcs.s	loc_C09E
0000D14C 3028 0030                  		move.w	$30(a0),d0
0000D150 E640                       		asr.w	#3,d0
0000D152 3140 0010                  		move.w	d0,$10(a0)
0000D156 117C 0001 0032             		move.b	#1,$32(a0)
0000D15C 4268 000E                  		clr.w	$E(a0)
0000D160                            
0000D160                            loc_C09E:
0000D160 6000                       		bra.s	loc_C0E6
0000D162                            ; ===========================================================================
0000D162                            
0000D162                            loc_C0A0:
0000D162 4A68 0010                  		tst.w	$10(a0)
0000D166 6700 0000                  		beq.w	loc_C0D6
0000D16A 6B00                       		bmi.s	loc_C0BC
0000D16C 7600                       		moveq	#0,d3
0000D16E 1628 0019                  		move.b	$19(a0),d3
0000D172 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D178 4A41                       		tst.w	d1		; has block touched a wall?
0000D17A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D17C 6000                       		bra.s	loc_C0E6
0000D17E                            ; ===========================================================================
0000D17E                            
0000D17E                            loc_C0BC:
0000D17E 7600                       		moveq	#0,d3
0000D180 1628 0019                  		move.b	$19(a0),d3
0000D184 4643                       		not.w	d3
0000D186 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D18C 4A41                       		tst.w	d1		; has block touched a wall?
0000D18E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D190 6000                       		bra.s	loc_C0E6
0000D192                            ; ===========================================================================
0000D192                            
0000D192                            Obj33_StopPush:
0000D192 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D196 6000                       		bra.s	loc_C0E6
0000D198                            ; ===========================================================================
0000D198                            
0000D198                            loc_C0D6:
0000D198 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D1A0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D1A6 6400                       		bcc.s	loc_C104
0000D1A8                            
0000D1A8                            loc_C0E6:
0000D1A8 7200                       		moveq	#0,d1
0000D1AA 1228 0019                  		move.b	$19(a0),d1
0000D1AE 0641 000B                  		addi.w	#$B,d1
0000D1B2 343C 0010                  		move.w	#$10,d2
0000D1B6 363C 0011                  		move.w	#$11,d3
0000D1BA 381F                       		move.w	(sp)+,d4
0000D1BC 6100 0000                  		bsr.w	loc_C186
0000D1C0 6100                       		bsr.s	Obj33_ChkLava
0000D1C2 6000 FEC4                  		bra.w	loc_BFC6
0000D1C6                            ; ===========================================================================
0000D1C6                            
0000D1C6                            loc_C104:
0000D1C6 381F                       		move.w	(sp)+,d4
0000D1C8 43F8 D000                  		lea	($FFFFD000).w,a1
0000D1CC 08A9 0003 0022             		bclr	#3,$22(a1)
0000D1D2 08A8 0003 0022             		bclr	#3,$22(a0)
0000D1D8 6000 FECE                  		bra.w	loc_BFE6
0000D1DC                            ; ===========================================================================
0000D1DC                            
0000D1DC                            Obj33_ChkLava:
0000D1DC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D1E2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D1E4 343C FFE0                  		move.w	#-$20,d2
0000D1E8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D1EE 6700                       		beq.s	Obj33_LoadLava
0000D1F0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D1F6 6700                       		beq.s	Obj33_LoadLava
0000D1F8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D1FE 6700                       		beq.s	Obj33_LoadLava
0000D200 4E75                       		rts	
0000D202                            ; ===========================================================================
0000D202                            
0000D202                            Obj33_ChkLava2:
0000D202 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D208 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D20A 343C 0020                  		move.w	#$20,d2
0000D20E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D214 6700                       		beq.s	Obj33_LoadLava
0000D216 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D21C 6700                       		beq.s	Obj33_LoadLava
0000D21E                            
0000D21E                            Obj33_NoLava:
0000D21E 4E75                       		rts	
0000D220                            ; ===========================================================================
0000D220                            
0000D220                            Obj33_LoadLava:
0000D220 6100 0000                  		bsr.w	SingleObjLoad
0000D224 6600                       		bne.s	locret_C184
0000D226 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D22A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D230 D569 0008                  		add.w	d2,8(a1)
0000D234 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D23A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D240 2348 003C                  		move.l	a0,$3C(a1)
0000D244                            
0000D244                            locret_C184:
0000D244 4E75                       		rts	
0000D246                            ; ===========================================================================
0000D246                            
0000D246                            loc_C186:				; XREF: loc_BF6E
0000D246 1028 0025                  		move.b	$25(a0),d0
0000D24A 6700 0000                  		beq.w	loc_C218
0000D24E 5500                       		subq.b	#2,d0
0000D250 6600                       		bne.s	loc_C1AA
0000D252 6100 B30E                  		bsr.w	ExitPlatform
0000D256 0829 0003 0022             		btst	#3,$22(a1)
0000D25C 6600                       		bne.s	loc_C1A4
0000D25E 4228 0025                  		clr.b	$25(a0)
0000D262 4E75                       		rts	
0000D264                            ; ===========================================================================
0000D264                            
0000D264                            loc_C1A4:
0000D264 3404                       		move.w	d4,d2
0000D266 6000 B858                  		bra.w	MvSonicOnPtfm
0000D26A                            ; ===========================================================================
0000D26A                            
0000D26A                            loc_C1AA:
0000D26A 5500                       		subq.b	#2,d0
0000D26C 6600                       		bne.s	loc_C1F2
0000D26E 6100 0000                  		bsr.w	SpeedToPos
0000D272 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D278 4EB9 0000 0000             		jsr	ObjHitFloor
0000D27E 4A41                       		tst.w	d1
0000D280 6A00 0000                  		bpl.w	locret_C1F0
0000D284 D368 000C                  		add.w	d1,$C(a0)
0000D288 4268 0012                  		clr.w	$12(a0)
0000D28C 4228 0025                  		clr.b	$25(a0)
0000D290 3011                       		move.w	(a1),d0
0000D292 0240 03FF                  		andi.w	#$3FF,d0
0000D296 0C40 016A                  		cmpi.w	#$16A,d0
0000D29A 6500                       		bcs.s	locret_C1F0
0000D29C 3028 0030                  		move.w	$30(a0),d0
0000D2A0 E640                       		asr.w	#3,d0
0000D2A2 3140 0010                  		move.w	d0,$10(a0)
0000D2A6 117C 0001 0032             		move.b	#1,$32(a0)
0000D2AC 4268 000E                  		clr.w	$E(a0)
0000D2B0                            
0000D2B0                            locret_C1F0:
0000D2B0 4E75                       		rts	
0000D2B2                            ; ===========================================================================
0000D2B2                            
0000D2B2                            loc_C1F2:
0000D2B2 6100 0000                  		bsr.w	SpeedToPos
0000D2B6 3028 0008                  		move.w	8(a0),d0
0000D2BA 0240 000C                  		andi.w	#$C,d0
0000D2BE 6600 0000                  		bne.w	locret_C2E4
0000D2C2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D2C8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D2CE 4268 0010                  		clr.w	$10(a0)
0000D2D2 5528 0025                  		subq.b	#2,$25(a0)
0000D2D6 4E75                       		rts	
0000D2D8                            ; ===========================================================================
0000D2D8                            
0000D2D8                            loc_C218:
0000D2D8 6100 0000                  		bsr.w	loc_FAC8
0000D2DC 4A44                       		tst.w	d4
0000D2DE 6700 0000                  		beq.w	locret_C2E4
0000D2E2 6B00 0000                  		bmi.w	locret_C2E4
0000D2E6 4A28 0032                  		tst.b	$32(a0)
0000D2EA 6700                       		beq.s	loc_C230
0000D2EC 6000 0000                  		bra.w	locret_C2E4
0000D2F0                            ; ===========================================================================
0000D2F0                            
0000D2F0                            loc_C230:
0000D2F0 4A40                       		tst.w	d0
0000D2F2 6700 0000                  		beq.w	locret_C2E4
0000D2F6 6B00                       		bmi.s	loc_C268
0000D2F8 0829 0000 0022             		btst	#0,$22(a1)
0000D2FE 6600 0000                  		bne.w	locret_C2E4
0000D302 3F00                       		move.w	d0,-(sp)
0000D304 7600                       		moveq	#0,d3
0000D306 1628 0019                  		move.b	$19(a0),d3
0000D30A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D310 301F                       		move.w	(sp)+,d0
0000D312 4A41                       		tst.w	d1
0000D314 6B00 0000                  		bmi.w	locret_C2E4
0000D318 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D320 7001                       		moveq	#1,d0
0000D322 323C 0040                  		move.w	#$40,d1
0000D326 6000                       		bra.s	loc_C294
0000D328                            ; ===========================================================================
0000D328                            
0000D328                            loc_C268:
0000D328 0829 0000 0022             		btst	#0,$22(a1)
0000D32E 6700                       		beq.s	locret_C2E4
0000D330 3F00                       		move.w	d0,-(sp)
0000D332 7600                       		moveq	#0,d3
0000D334 1628 0019                  		move.b	$19(a0),d3
0000D338 4643                       		not.w	d3
0000D33A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D340 301F                       		move.w	(sp)+,d0
0000D342 4A41                       		tst.w	d1
0000D344 6B00                       		bmi.s	locret_C2E4
0000D346 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D34E 70FF                       		moveq	#-1,d0
0000D350 323C FFC0                  		move.w	#-$40,d1
0000D354                            
0000D354                            loc_C294:
0000D354 43F8 D000                  		lea	($FFFFD000).w,a1
0000D358 D169 0008                  		add.w	d0,8(a1)
0000D35C 3341 0014                  		move.w	d1,$14(a1)
0000D360 337C 0000 0010             		move.w	#0,$10(a1)
0000D366 3F00                       		move.w	d0,-(sp)
0000D368 303C 00A7                  		move.w	#$A7,d0
0000D36C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D372 301F                       		move.w	(sp)+,d0
0000D374 4A28 0028                  		tst.b	$28(a0)
0000D378 6B00                       		bmi.s	locret_C2E4
0000D37A 3F00                       		move.w	d0,-(sp)
0000D37C 4EB9 0000 0000             		jsr	ObjHitFloor
0000D382 301F                       		move.w	(sp)+,d0
0000D384 0C41 0004                  		cmpi.w	#4,d1
0000D388 6F00                       		ble.s	loc_C2E0
0000D38A 317C 0400 0010             		move.w	#$400,$10(a0)
0000D390 4A40                       		tst.w	d0
0000D392 6A00                       		bpl.s	loc_C2D8
0000D394 4468 0010                  		neg.w	$10(a0)
0000D398                            
0000D398                            loc_C2D8:
0000D398 117C 0006 0025             		move.b	#6,$25(a0)
0000D39E 6000                       		bra.s	locret_C2E4
0000D3A0                            ; ===========================================================================
0000D3A0                            
0000D3A0                            loc_C2E0:
0000D3A0 D368 000C                  		add.w	d1,$C(a0)
0000D3A4                            
0000D3A4                            locret_C2E4:
0000D3A4 4E75                       		rts	
0000D3A6                            ; ===========================================================================
0000D3A6                            ; ---------------------------------------------------------------------------
0000D3A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D3A6                            ; ---------------------------------------------------------------------------
0000D3A6                            Map_obj33:
0000D3A6                            	include "_maps\obj33.asm"
0000D3A6                            ; ---------------------------------------------------------------------------
0000D3A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D3A6                            ; ---------------------------------------------------------------------------
0000D3A6 0000                       		dc.w byte_C2EA-Map_obj33
0000D3A8 0000                       		dc.w byte_C2F0-Map_obj33
0000D3AA 01                         byte_C2EA:	dc.b 1
0000D3AB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D3B0 04                         byte_C2F0:	dc.b 4
0000D3B1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D3B6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D3BB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D3C0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D3C6 00                         		even
0000D3C6 00                         		even
0000D3C6                            
0000D3C6                            ; ===========================================================================
0000D3C6                            ; ---------------------------------------------------------------------------
0000D3C6                            ; Object 34 - zone title cards
0000D3C6                            ; ---------------------------------------------------------------------------
0000D3C6                            Obj34:					; XREF: Obj_Index
0000D3C6 7000                       		moveq	#0,d0
0000D3C8 1028 0024                  		move.b	$24(a0),d0
0000D3CC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D3D0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D3D4                            ; ===========================================================================
0000D3D4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D3D6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D3D8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D3DA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D3DC                            ; ===========================================================================
0000D3DC                            
0000D3DC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D3DC 2248                       		movea.l	a0,a1
0000D3DE 7000                       		moveq	#0,d0
0000D3E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D3E4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D3EA 6600                       		bne.s	Obj34_CheckFZ
0000D3EC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D3EE                            
0000D3EE                            Obj34_CheckFZ:
0000D3EE 3400                       		move.w	d0,d2
0000D3F0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D3F6 6600                       		bne.s	Obj34_LoadConfig
0000D3F8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D3FA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D3FC                            
0000D3FC                            Obj34_LoadConfig:
0000D3FC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D402 E948                       		lsl.w	#4,d0
0000D404 D6C0                       		adda.w	d0,a3
0000D406 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D40C 7203                       		moveq	#3,d1
0000D40E                            
0000D40E                            Obj34_Loop:
0000D40E 12BC 0034                  		move.b	#$34,0(a1)
0000D412 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D416 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D41A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D41E 335A 000A                  		move.w	(a2)+,$A(a1)
0000D422 135A 0024                  		move.b	(a2)+,$24(a1)
0000D426 101A                       		move.b	(a2)+,d0
0000D428 6600                       		bne.s	Obj34_ActNumber
0000D42A 1002                       		move.b	d2,d0
0000D42C                            
0000D42C                            Obj34_ActNumber:
0000D42C 0C00 0007                  		cmpi.b	#7,d0
0000D430 6600                       		bne.s	Obj34_MakeSprite
0000D432 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D436 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D43C 6600                       		bne.s	Obj34_MakeSprite
0000D43E 5300                       		subq.b	#1,d0
0000D440                            
0000D440                            Obj34_MakeSprite:
0000D440 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D444 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D44C 337C 8580 0002             		move.w	#$8580,2(a1)
0000D452 137C 0078 0019             		move.b	#$78,$19(a1)
0000D458 137C 0000 0001             		move.b	#0,1(a1)
0000D45E 137C 0000 0018             		move.b	#0,$18(a1)
0000D464 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D46A 43E9 0040                  		lea	$40(a1),a1	; next object
0000D46E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D472                            
0000D472                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D472 7210                       		moveq	#$10,d1		; set horizontal speed
0000D474 3028 0030                  		move.w	$30(a0),d0
0000D478 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D47C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D47E 6C00                       		bge.s	Obj34_Move
0000D480 4441                       		neg.w	d1
0000D482                            
0000D482                            Obj34_Move:
0000D482 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D486                            
0000D486                            loc_C3C8:
0000D486 3028 0008                  		move.w	8(a0),d0
0000D48A 6B00                       		bmi.s	locret_C3D8
0000D48C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D490 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D492 6000 0000                  		bra.w	DisplaySprite
0000D496                            ; ===========================================================================
0000D496                            
0000D496                            locret_C3D8:
0000D496 4E75                       		rts	
0000D498                            ; ===========================================================================
0000D498                            
0000D498                            Obj34_Wait:				; XREF: Obj34_Index
0000D498 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D49C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D49E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D4A2 6000 0000                  		bra.w	DisplaySprite
0000D4A6                            ; ===========================================================================
0000D4A6                            
0000D4A6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D4A6 4A28 0001                  		tst.b	1(a0)
0000D4AA 6A00                       		bpl.s	Obj34_ChangeArt
0000D4AC 7220                       		moveq	#$20,d1
0000D4AE 3028 0032                  		move.w	$32(a0),d0
0000D4B2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D4B6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D4B8 6C00                       		bge.s	Obj34_Move2
0000D4BA 4441                       		neg.w	d1
0000D4BC                            
0000D4BC                            Obj34_Move2:
0000D4BC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D4C0 3028 0008                  		move.w	8(a0),d0
0000D4C4 6B00                       		bmi.s	locret_C412
0000D4C6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D4CA 6400                       		bcc.s	locret_C412	; if yes, branch
0000D4CC 6000 0000                  		bra.w	DisplaySprite
0000D4D0                            ; ===========================================================================
0000D4D0                            
0000D4D0                            locret_C412:
0000D4D0 4E75                       		rts	
0000D4D2                            ; ===========================================================================
0000D4D2                            
0000D4D2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D4D2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D4D8 6600                       		bne.s	Obj34_Delete
0000D4DA 7002                       		moveq	#2,d0
0000D4DC 4EB9 0000 1EFA             		jsr	(LoadPLC).l	; load explosion patterns
0000D4E2 7000                       		moveq	#0,d0
0000D4E4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D4E8 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000D4EC 4EB9 0000 1EFA             		jsr	(LoadPLC).l	; load animal patterns
0000D4F2                            
0000D4F2                            Obj34_Delete:
0000D4F2 6000 0000                  		bra.w	DeleteObject
0000D4F6                            
0000D4F6                            ; ===========================================================================
0000D4F6                            Obj34_AnimalPLC:
0000D4F6 15                         		dc.b $15	; "GHZ"
0000D4F7 16                         		dc.b $16
0000D4F8 17                         		dc.b $17
0000D4F9 18                         		dc.b $18
0000D4FA 19                         		dc.b $19
0000D4FB 1A                         		dc.b $1A	; "SBZ"
0000D4FC 15                         		dc.b $15	; Ending (placeholder?
0000D4FD 1A                         		dc.b $1A	; MAKOTO
0000D4FE                            	even
0000D4FE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D500 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D502 00E4                       		dc.w $E4
0000D504 0206                       		dc.b 2,	6
0000D506 00EA                       		dc.w $EA
0000D508 0207                       		dc.b 2,	7
0000D50A 00E0                       		dc.w $E0
0000D50C 020A                       		dc.b 2,	$A
0000D50E                            ; ---------------------------------------------------------------------------
0000D50E                            ; Title	card configuration data
0000D50E                            ; Format:
0000D50E                            ; 4 bytes per item (YYYY XXXX)
0000D50E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D50E                            ; ---------------------------------------------------------------------------
0000D50E 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D51E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D52E 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D53E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D54E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D55E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D56E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D57E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D58E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D59E                            ; ===========================================================================
0000D59E                            ; ---------------------------------------------------------------------------
0000D59E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D59E                            ; ---------------------------------------------------------------------------
0000D59E                            
0000D59E                            Obj39:					; XREF: Obj_Index
0000D59E 7000                       		moveq	#0,d0
0000D5A0 1028 0024                  		move.b	$24(a0),d0
0000D5A4 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D5A8 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D5AC                            ; ===========================================================================
0000D5AC 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D5AE 0000                       		dc.w loc_C50C-Obj39_Index
0000D5B0 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D5B2                            ; ===========================================================================
0000D5B2                            
0000D5B2                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D5B2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D5B6 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D5B8 4E75                       		rts	
0000D5BA                            ; ===========================================================================
0000D5BA                            
0000D5BA                            Obj39_Main:
0000D5BA 5428 0024                  		addq.b	#2,$24(a0)
0000D5BE 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D5C4 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D5CA 6700                       		beq.s	loc_C4EC	; if not, branch
0000D5CC 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D5D2                            
0000D5D2                            loc_C4EC:
0000D5D2 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D5D8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D5E0 317C 855E 0002             		move.w	#$855E,2(a0)
0000D5E6 117C 0000 0001             		move.b	#0,1(a0)
0000D5EC 117C 0000 0018             		move.b	#0,$18(a0)
0000D5F2                            
0000D5F2                            loc_C50C:				; XREF: Obj39_Index
0000D5F2 7210                       		moveq	#$10,d1		; set horizontal speed
0000D5F4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D5FA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D5FC 6500                       		bcs.s	Obj39_Move
0000D5FE 4441                       		neg.w	d1
0000D600                            
0000D600                            Obj39_Move:
0000D600 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D604 6000 0000                  		bra.w	DisplaySprite
0000D608                            ; ===========================================================================
0000D608                            
0000D608                            Obj39_SetWait:				; XREF: Obj39_Main
0000D608 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D60E 5428 0024                  		addq.b	#2,$24(a0)
0000D612 4E75                       		rts	
0000D614                            ; ===========================================================================
0000D614                            
0000D614                            Obj39_Wait:				; XREF: Obj39_Index
0000D614 1038 F605                  		move.b	($FFFFF605).w,d0
0000D618 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D61C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D61E 0828 0000 001A             		btst	#0,$1A(a0)
0000D624 6600                       		bne.s	Obj39_Display
0000D626 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D62A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D62C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D630 6000 0000                  		bra.w	DisplaySprite
0000D634                            ; ===========================================================================
0000D634                            
0000D634                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D634 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D638 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D63A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D640 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D644 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D646 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D64C 6000                       		bra.s	Obj39_Display
0000D64E                            ; ===========================================================================
0000D64E                            
0000D64E                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D64E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D654                            
0000D654                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D654 6000 0000                  		bra.w	DisplaySprite
0000D658                            ; ===========================================================================
0000D658                            ; ---------------------------------------------------------------------------
0000D658                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D658                            ; ---------------------------------------------------------------------------
0000D658                            
0000D658                            Obj3A:					; XREF: Obj_Index
0000D658 7000                       		moveq	#0,d0
0000D65A 1028 0024                  		move.b	$24(a0),d0
0000D65E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D662 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D666                            ; ===========================================================================
0000D666 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D668 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D66A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D66C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D66E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D670 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D672 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D674 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D676 0000                       		dc.w loc_C766-Obj3A_Index
0000D678                            ; ===========================================================================
0000D678                            
0000D678                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D678 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D67C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D67E 4E75                       		rts	
0000D680                            ; ===========================================================================
0000D680                            
0000D680                            Obj3A_Main:
0000D680 2248                       		movea.l	a0,a1
0000D682 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D688 7206                       		moveq	#6,d1
0000D68A                            
0000D68A                            Obj3A_Loop:
0000D68A 12BC 003A                  		move.b	#$3A,0(a1)
0000D68E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D692 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D696 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D69A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D69E 135A 0024                  		move.b	(a2)+,$24(a1)
0000D6A2 101A                       		move.b	(a2)+,d0
0000D6A4 0C00 0006                  		cmpi.b	#6,d0
0000D6A8 6600                       		bne.s	loc_C5CA
0000D6AA D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D6AE                            
0000D6AE                            loc_C5CA:
0000D6AE 1340 001A                  		move.b	d0,$1A(a1)
0000D6B2 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D6BA 337C 8580 0002             		move.w	#$8580,2(a1)
0000D6C0 137C 0000 0001             		move.b	#0,1(a1)
0000D6C6 43E9 0040                  		lea	$40(a1),a1
0000D6CA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D6CE                            
0000D6CE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D6CE 7210                       		moveq	#$10,d1		; set horizontal speed
0000D6D0 3028 0030                  		move.w	$30(a0),d0
0000D6D4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D6D8 6700                       		beq.s	loc_C61A	; if yes, branch
0000D6DA 6C00                       		bge.s	Obj3A_Move
0000D6DC 4441                       		neg.w	d1
0000D6DE                            
0000D6DE                            Obj3A_Move:
0000D6DE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6E2                            
0000D6E2                            loc_C5FE:				; XREF: loc_C61A
0000D6E2 3028 0008                  		move.w	8(a0),d0
0000D6E6 6B00                       		bmi.s	locret_C60E
0000D6E8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6EC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D6EE 6000 0000                  		bra.w	DisplaySprite
0000D6F2                            ; ===========================================================================
0000D6F2                            
0000D6F2                            locret_C60E:
0000D6F2 4E75                       		rts	
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            loc_C610:				; XREF: loc_C61A
0000D6F4 117C 000E 0024             		move.b	#$E,$24(a0)
0000D6FA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D6FE                            ; ===========================================================================
0000D6FE                            
0000D6FE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D6FE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D704 67EE                       		beq.s	loc_C610
0000D706 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D70C 66D4                       		bne.s	loc_C5FE
0000D70E 5428 0024                  		addq.b	#2,$24(a0)
0000D712 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D718                            
0000D718                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D718 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D71C 6600                       		bne.s	Obj3A_Display
0000D71E 5428 0024                  		addq.b	#2,$24(a0)
0000D722                            
0000D722                            Obj3A_Display:
0000D722 6000 0000                  		bra.w	DisplaySprite
0000D726                            ; ===========================================================================
0000D726                            
0000D726                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D726 6100 0000                  		bsr.w	DisplaySprite
0000D72A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D730 7000                       		moveq	#0,d0
0000D732 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D736 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D738 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D73C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D742                            
0000D742                            Obj3A_RingBonus:
0000D742 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D746 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D748 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D74C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D752                            
0000D752                            Obj3A_ChkBonus:
0000D752 4A40                       		tst.w	d0		; is there any bonus?
0000D754 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D756 303C 00C5                  		move.w	#$C5,d0
0000D75A 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D760 5428 0024                  		addq.b	#2,$24(a0)
0000D764 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D76A 6600                       		bne.s	Obj3A_SetDelay
0000D76C 5828 0024                  		addq.b	#4,$24(a0)
0000D770                            
0000D770                            Obj3A_SetDelay:
0000D770 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D776                            
0000D776                            locret_C692:
0000D776 4E75                       		rts	
0000D778                            ; ===========================================================================
0000D778                            
0000D778                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D778 4EB9 0000 0000             		jsr	AddPoints
0000D77E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D782 0200 0003                  		andi.b	#3,d0
0000D786 66EE                       		bne.s	locret_C692
0000D788 303C 00CD                  		move.w	#$CD,d0
0000D78C 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D792                            ; ===========================================================================
0000D792                            
0000D792                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D792 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D796 0240 0007                  		andi.w	#7,d0
0000D79A E748                       		lsl.w	#3,d0
0000D79C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D7A0 0241 0003                  		andi.w	#3,d1
0000D7A4 D241                       		add.w	d1,d1
0000D7A6 D041                       		add.w	d1,d0
0000D7A8 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D7AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D7B0 4A40                       		tst.w	d0
0000D7B2 6600                       		bne.s	Obj3A_ChkSS
0000D7B4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D7BA 6000                       		bra.s	Obj3A_Display2
0000D7BC                            ; ===========================================================================
0000D7BC                            
0000D7BC                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D7BC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D7C0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D7C4 6700                       		beq.s	loc_C6EA	; if not, branch
0000D7C6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D7CC 6000                       		bra.s	Obj3A_Display2
0000D7CE                            ; ===========================================================================
0000D7CE                            
0000D7CE                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D7CE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D7D4                            
0000D7D4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D7D4 6000 0000                  		bra.w	DisplaySprite
0000D7D8                            ; ===========================================================================
0000D7D8                            ; ---------------------------------------------------------------------------
0000D7D8                            ; Level	order array
0000D7D8                            ; ---------------------------------------------------------------------------
0000D7D8                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D818                            		even
0000D818                            ; ===========================================================================
0000D818                            
0000D818                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D818 7220                       		moveq	#$20,d1		; set horizontal speed
0000D81A 3028 0032                  		move.w	$32(a0),d0
0000D81E B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D822 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D824 6C00                       		bge.s	Obj3A_Move2
0000D826 4441                       		neg.w	d1
0000D828                            
0000D828                            Obj3A_Move2:
0000D828 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D82C 3028 0008                  		move.w	8(a0),d0
0000D830 6B00                       		bmi.s	locret_C748
0000D832 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D836 6400                       		bcc.s	locret_C748	; if yes, branch
0000D838 6000 0000                  		bra.w	DisplaySprite
0000D83C                            ; ===========================================================================
0000D83C                            
0000D83C                            locret_C748:
0000D83C 4E75                       		rts	
0000D83E                            ; ===========================================================================
0000D83E                            
0000D83E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D83E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D844 6600 0000                  		bne.w	DeleteObject
0000D848 5428 0024                  		addq.b	#2,$24(a0)
0000D84C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D850 303C 008D                  		move.w	#$8D,d0
0000D854 4EF9 0000 1D10             		jmp	(PlaySound).l	; play FZ music
0000D85A                            ; ===========================================================================
0000D85A                            
0000D85A                            loc_C766:				; XREF: Obj3A_Index
0000D85A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D85E 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D864 6700 0000                  		beq.w	DeleteObject
0000D868 4E75                       		rts	
0000D86A                            ; ===========================================================================
0000D86A 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D870 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D872 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D878 0201                       		dc.b 2,	1
0000D87A 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D880 0206                       		dc.b 2,	6
0000D882 0520 0120 00EC             		dc.w $520, $120, $EC
0000D888 0202                       		dc.b 2,	2
0000D88A 0540 0120 00FC             		dc.w $540, $120, $FC
0000D890 0203                       		dc.b 2,	3
0000D892 0560 0120 010C             		dc.w $560, $120, $10C
0000D898 0204                       		dc.b 2,	4
0000D89A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D8A0 0205                       		dc.b 2,	5
0000D8A2                            ; ===========================================================================
0000D8A2                            ; ---------------------------------------------------------------------------
0000D8A2                            ; Object 7E - special stage results screen
0000D8A2                            ; ---------------------------------------------------------------------------
0000D8A2                            
0000D8A2                            Obj7E:					; XREF: Obj_Index
0000D8A2 7000                       		moveq	#0,d0
0000D8A4 1028 0024                  		move.b	$24(a0),d0
0000D8A8 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D8AC 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D8B0                            ; ===========================================================================
0000D8B0 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D8B2 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D8B4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D8B6 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D8B8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D8BA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D8BC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D8BE 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D8C0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D8C2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D8C4 0000                       		dc.w loc_C91A-Obj7E_Index
0000D8C6                            ; ===========================================================================
0000D8C6                            
0000D8C6                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D8C6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D8CA 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D8CC 4E75                       		rts	
0000D8CE                            ; ===========================================================================
0000D8CE                            
0000D8CE                            Obj7E_Main:
0000D8CE 2248                       		movea.l	a0,a1
0000D8D0 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D8D6 7203                       		moveq	#3,d1
0000D8D8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D8DE 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D8E0 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D8E2                            
0000D8E2                            Obj7E_Loop:
0000D8E2 12BC 007E                  		move.b	#$7E,0(a1)
0000D8E6 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D8EA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D8EE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D8F2 135A 0024                  		move.b	(a2)+,$24(a1)
0000D8F6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D8FA 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D902 337C 8580 0002             		move.w	#$8580,2(a1)
0000D908 137C 0000 0001             		move.b	#0,1(a1)
0000D90E 43E9 0040                  		lea	$40(a1),a1
0000D912 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D916                            
0000D916 7007                       		moveq	#7,d0
0000D918 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D91C 6700                       		beq.s	loc_C842
0000D91E 7000                       		moveq	#0,d0
0000D920 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D924 6600                       		bne.s	loc_C842	; if not, branch
0000D926 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D928 317C 0018 0008             		move.w	#$18,8(a0)
0000D92E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D934                            
0000D934                            loc_C842:
0000D934 1140 001A                  		move.b	d0,$1A(a0)
0000D938                            
0000D938                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D938 7210                       		moveq	#$10,d1		; set horizontal speed
0000D93A 3028 0030                  		move.w	$30(a0),d0
0000D93E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D942 6700                       		beq.s	loc_C86C	; if yes, branch
0000D944 6C00                       		bge.s	Obj7E_Move
0000D946 4441                       		neg.w	d1
0000D948                            
0000D948                            Obj7E_Move:
0000D948 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D94C                            
0000D94C                            loc_C85A:				; XREF: loc_C86C
0000D94C 3028 0008                  		move.w	8(a0),d0
0000D950 6B00                       		bmi.s	locret_C86A
0000D952 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D956 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D958 6000 0000                  		bra.w	DisplaySprite
0000D95C                            ; ===========================================================================
0000D95C                            
0000D95C                            locret_C86A:
0000D95C 4E75                       		rts	
0000D95E                            ; ===========================================================================
0000D95E                            
0000D95E                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D95E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D964 66E6                       		bne.s	loc_C85A
0000D966 5428 0024                  		addq.b	#2,$24(a0)
0000D96A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D970 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D976                            
0000D976                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D976 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D97A 6600                       		bne.s	Obj7E_Display
0000D97C 5428 0024                  		addq.b	#2,$24(a0)
0000D980                            
0000D980                            Obj7E_Display:
0000D980 6000 0000                  		bra.w	DisplaySprite
0000D984                            ; ===========================================================================
0000D984                            
0000D984                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D984 6100 0000                  		bsr.w	DisplaySprite
0000D988 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D98E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D992 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D994 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D99A 700A                       		moveq	#10,d0		; add 10 to score
0000D99C 4EB9 0000 0000             		jsr	AddPoints
0000D9A2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D9A6 0200 0003                  		andi.b	#3,d0
0000D9AA 6600                       		bne.s	locret_C8EA
0000D9AC 303C 00CD                  		move.w	#$CD,d0
0000D9B0 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D9B6                            ; ===========================================================================
0000D9B6                            
0000D9B6                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D9B6 303C 00C5                  		move.w	#$C5,d0
0000D9BA 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D9C0 5428 0024                  		addq.b	#2,$24(a0)
0000D9C4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D9CA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D9D0 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D9D2 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D9D8 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D9DC                            
0000D9DC                            locret_C8EA:
0000D9DC 4E75                       		rts	
0000D9DE                            ; ===========================================================================
0000D9DE                            
0000D9DE                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D9DE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D9E4 6000 0000                  		bra.w	DisplaySprite
0000D9E8                            ; ===========================================================================
0000D9E8                            
0000D9E8                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D9E8 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D9EE 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D9F4 303C 00BF                  		move.w	#$BF,d0
0000D9F8 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play continues music
0000D9FE 5428 0024                  		addq.b	#2,$24(a0)
0000DA02 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DA08 6000 0000                  		bra.w	DisplaySprite
0000DA0C                            ; ===========================================================================
0000DA0C                            
0000DA0C                            loc_C91A:				; XREF: Obj7E_Index
0000DA0C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA10 0200 000F                  		andi.b	#$F,d0
0000DA14 6600                       		bne.s	Obj7E_Display2
0000DA16 0868 0000 001A             		bchg	#0,$1A(a0)
0000DA1C                            
0000DA1C                            Obj7E_Display2:
0000DA1C 6000 0000                  		bra.w	DisplaySprite
0000DA20                            ; ===========================================================================
0000DA20 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DA26 0200                       		dc.b 2,	0		; rountine number, frame number
0000DA28 0320 0120 0118             		dc.w $320, $120, $118
0000DA2E 0201                       		dc.b 2,	1
0000DA30 0360 0120 0128             		dc.w $360, $120, $128
0000DA36 0202                       		dc.b 2,	2
0000DA38 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DA3E 0203                       		dc.b 2,	3
0000DA40 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DA46 0206                       		dc.b 2,	6
0000DA48                            ; ===========================================================================
0000DA48                            ; ---------------------------------------------------------------------------
0000DA48                            ; Object 7F - chaos emeralds from the special stage results screen
0000DA48                            ; ---------------------------------------------------------------------------
0000DA48                            
0000DA48                            Obj7F:					; XREF: Obj_Index
0000DA48 7000                       		moveq	#0,d0
0000DA4A 1028 0024                  		move.b	$24(a0),d0
0000DA4E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DA52 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DA56                            ; ===========================================================================
0000DA56 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DA58 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DA5A                            
0000DA5A                            ; ---------------------------------------------------------------------------
0000DA5A                            ; X-axis positions for chaos emeralds
0000DA5A                            ; ---------------------------------------------------------------------------
0000DA5A 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DA66                            ; ===========================================================================
0000DA66                            
0000DA66                            Obj7F_Main:				; XREF: Obj7F_Index
0000DA66 2248                       		movea.l	a0,a1
0000DA68 45F9 0000 DA5A             		lea	(Obj7F_PosData).l,a2
0000DA6E 7400                       		moveq	#0,d2
0000DA70 7200                       		moveq	#0,d1
0000DA72 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DA76 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DA78 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DA7C                            
0000DA7C                            Obj7F_Loop:
0000DA7C 12BC 007F                  		move.b	#$7F,0(a1)
0000DA80 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DA84 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DA8A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DA8E 1633 2000                  		move.b	(a3,d2.w),d3
0000DA92 1343 001A                  		move.b	d3,$1A(a1)
0000DA96 1343 001C                  		move.b	d3,$1C(a1)
0000DA9A 5202                       		addq.b	#1,d2
0000DA9C 5429 0024                  		addq.b	#2,$24(a1)
0000DAA0 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DAA8 337C 8541 0002             		move.w	#$8541,2(a1)
0000DAAE 137C 0000 0001             		move.b	#0,1(a1)
0000DAB4 43E9 0040                  		lea	$40(a1),a1	; next object
0000DAB8 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DABC                            
0000DABC                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DABC 1028 001A                  		move.b	$1A(a0),d0
0000DAC0 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DAC6 0C00 0006                  		cmpi.b	#6,d0
0000DACA 6600                       		bne.s	Obj7F_Display
0000DACC 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DAD2                            
0000DAD2                            Obj7F_Display:
0000DAD2 6000 0000                  		bra.w	DisplaySprite
0000DAD6                            ; ===========================================================================
0000DAD6                            ; ---------------------------------------------------------------------------
0000DAD6                            ; Sprite mappings - zone title cards
0000DAD6                            ; ---------------------------------------------------------------------------
0000DAD6                            Map_obj34:
0000DAD6                                    include "_maps\obj34.asm"
0000DAD6                            Map_c5df:
0000DAD6 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000DAD8 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000DADA 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000DADC 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000DADE 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000DAE0 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000DAE2 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000DAE4 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000DAE6 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000DAE8 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000DAEA 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000DAEC 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000DAEE 0C                         Map_c5df_18: 	dc.b $C
0000DAEF F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000DAF4 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000DAF9 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000DAFE F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000DB03 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000DB08 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000DB0D F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000DB12 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000DB17 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000DB1C F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000DB21 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000DB26 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000DB2B 16                         Map_c5df_55: 	dc.b $16
0000DB2C F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000DB31 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000DB36 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000DB3B F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000DB40 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000DB45 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000DB4A F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DB4F F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000DB54 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000DB59 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000DB5E F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000DB63 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000DB68 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000DB6D F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000DB72 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000DB77 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000DB7C F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000DB81 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000DB86 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000DB8B F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000DB90 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000DB95 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000DB9A 05                         Map_c5df_C4: 	dc.b $5
0000DB9B F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000DBA0 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000DBA5 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000DBAA F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000DBAF F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000DBB4 11                         Map_c5df_DE: 	dc.b $11
0000DBB5 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000DBBA F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000DBBF F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000DBC4 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000DBC9 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000DBCE F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000DBD3 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000DBD8 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000DBDD F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000DBE2 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000DBE7 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000DBEC F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000DBF1 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000DBF6 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000DBFB F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000DC00 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000DC05 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000DC0A 15                         Map_c5df_134: 	dc.b $15
0000DC0B F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000DC10 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000DC15 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000DC1A F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DC1F F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000DC24 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000DC29 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000DC2E F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000DC33 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000DC38 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000DC3D F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000DC42 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000DC47 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000DC4C F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000DC51 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000DC56 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000DC5B F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000DC60 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000DC65 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000DC6A F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000DC6F F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000DC74 07                         Map_c5df_19E: 	dc.b $7
0000DC75 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000DC7A F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000DC7F F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000DC84 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DC89 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000DC8E F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DC93 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DC98 04                         Map_c5df_1C2: 	dc.b $4
0000DC99 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DC9E F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000DCA3 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000DCA8 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000DCAD 02                         Map_c5df_1D7: 	dc.b $2
0000DCAE 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DCB3 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000DCB8 02                         Map_c5df_1E2: 	dc.b $2
0000DCB9 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DCBE F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000DCC3 02                         Map_c5df_1ED: 	dc.b $2
0000DCC4 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DCC9 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000DCCE 0D                         Map_c5df_1F8: 	dc.b $D
0000DCCF E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000DCD4 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000DCD9 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000DCDE F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000DCE3 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000DCE8 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000DCED 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000DCF2 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000DCF7 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000DCFC F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000DD01 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000DD06 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000DD0B 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000DD10 05                         Map_c5df_23A: 	dc.b $5
0000DD11 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000DD16 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000DD1B F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000DD20 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000DD25 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000DD2A                            	even
0000DD2A                            	even
0000DD2A                            ; ---------------------------------------------------------------------------
0000DD2A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DD2A                            ; ---------------------------------------------------------------------------
0000DD2A                            Map_obj39:
0000DD2A                            	include "_maps\obj39.asm"
0000DD2A                            ; ---------------------------------------------------------------------------
0000DD2A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DD2A                            ; ---------------------------------------------------------------------------
0000DD2A 0000                       		dc.w byte_CBAC-Map_obj39
0000DD2C 0000                       		dc.w byte_CBB7-Map_obj39
0000DD2E 0000                       		dc.w byte_CBC2-Map_obj39
0000DD30 0000                       		dc.w byte_CBCD-Map_obj39
0000DD32 02                         byte_CBAC:	dc.b 2
0000DD33 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DD38 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DD3D 02                         byte_CBB7:	dc.b 2
0000DD3E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DD43 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DD48 02                         byte_CBC2:	dc.b 2
0000DD49 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DD4E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DD53 02                         byte_CBCD:	dc.b 2
0000DD54 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DD59 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DD5E                            		even
0000DD5E                            		even
0000DD5E                            
0000DD5E                            ; ---------------------------------------------------------------------------
0000DD5E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DD5E                            ; ---------------------------------------------------------------------------
0000DD5E 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DD60 0000                       		dc.w byte_CC13-Map_obj3A
0000DD62 0000                       		dc.w byte_CC32-Map_obj3A
0000DD64 0000                       		dc.w byte_CC51-Map_obj3A
0000DD66 0000                       		dc.w byte_CC75-Map_obj3A
0000DD68                            		;dc.w byte_CB47-Map_obj3A
0000DD68                            		;dc.w byte_CB26-Map_obj3A
0000DD68                            		;dc.w byte_CB31-Map_obj3A
0000DD68                            		;dc.w byte_CB3C-Map_obj3A
0000DD68 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000DD69 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000DD6E F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000DD73 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000DD78 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000DD7D F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000DD82 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000DD87 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000DD8C F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000DD91 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000DD96 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000DD9B F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000DDA0 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000DDA5 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000DDAA F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000DDAF F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000DDB4 06                         byte_CC13:	dc.b 6			; PASSED
0000DDB5 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DDBA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DDBF F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DDC4 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DDC9 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDCE F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DDD3 06                         byte_CC32:	dc.b 6			; SCORE
0000DDD4 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DDD9 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DDDE F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DDE3 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DDE8 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DDED FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DDF2 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DDF3 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DDF8 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DDFD F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE02 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE07 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE0C F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DE11 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE16 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DE17 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DE1C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE21 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE26 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE2B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE30 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DE35 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE3A                            		even
0000DE3A                            ; ---------------------------------------------------------------------------
0000DE3A                            ; Sprite mappings - special stage results screen
0000DE3A                            ; ---------------------------------------------------------------------------
0000DE3A 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DE3C 0000                       		dc.w byte_CCEE-Map_obj7E
0000DE3E 0000                       		dc.w byte_CD0D-Map_obj7E
0000DE40                            		;dc.w byte_CB47-Map_obj7E
0000DE40 0000                       		dc.w byte_CD31-Map_obj7E
0000DE42 0000                       		dc.w byte_CD46-Map_obj7E
0000DE44 0000                       		dc.w byte_CD5B-Map_obj7E
0000DE46 0000                       		dc.w byte_CD6B-Map_obj7E
0000DE48 0000                       		dc.w byte_CDA8-Map_obj7E
0000DE4A 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DE4B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DE50 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DE55 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DE5A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DE5F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DE64 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DE69 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DE6E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DE73 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DE78 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DE7D F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DE82 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DE87 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DE8C 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DE8D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DE92 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DE97 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DE9C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DEA1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DEA6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DEAB 07                         byte_CD0D:	dc.b 7
0000DEAC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DEB1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DEB6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DEBB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DEC0 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DEC5 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DECA F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DECF 04                         byte_CD31:	dc.b 4
0000DED0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DED5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DEDA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DEDF F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000DEE4 04                         byte_CD46:	dc.b 4
0000DEE5 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DEEA F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DEEF F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DEF4 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000DEF9 03                         byte_CD5B:	dc.b 3
0000DEFA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DEFF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DF04 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DF09 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000DF0A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000DF0F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000DF14 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000DF19 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000DF1E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DF23 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000DF28 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000DF2D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000DF32 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DF37 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DF3C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DF41 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DF46 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DF47 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DF4C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DF51 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DF56 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DF5B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DF60 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DF65 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DF6A F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DF6F F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DF74 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DF79 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DF7E F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DF83 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DF88 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DF8D F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DF92                            		even
0000DF92                            ; ---------------------------------------------------------------------------
0000DF92                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF92                            ; ---------------------------------------------------------------------------
0000DF92                            Map_obj7F:
0000DF92                            	include "_maps\obj7F.asm"
0000DF92                            ; ---------------------------------------------------------------------------
0000DF92                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF92                            ; ---------------------------------------------------------------------------
0000DF92 0000                       		dc.w byte_CE02-Map_obj7F
0000DF94 0000                       		dc.w byte_CE08-Map_obj7F
0000DF96 0000                       		dc.w byte_CE0E-Map_obj7F
0000DF98 0000                       		dc.w byte_CE14-Map_obj7F
0000DF9A 0000                       		dc.w byte_CE1A-Map_obj7F
0000DF9C 0000                       		dc.w byte_CE20-Map_obj7F
0000DF9E 0000                       		dc.w byte_CE26-Map_obj7F
0000DFA0 01                         byte_CE02:	dc.b 1
0000DFA1 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DFA6 01                         byte_CE08:	dc.b 1
0000DFA7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DFAC 01                         byte_CE0E:	dc.b 1
0000DFAD F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DFB2 01                         byte_CE14:	dc.b 1
0000DFB3 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DFB8 01                         byte_CE1A:	dc.b 1
0000DFB9 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DFBE 01                         byte_CE20:	dc.b 1
0000DFBF F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DFC4 00                         byte_CE26:	dc.b 0			; Blank frame
0000DFC6 00                         		even
0000DFC6 00                         		even
0000DFC6                            
0000DFC6                            ; ===========================================================================
0000DFC6                            ; ---------------------------------------------------------------------------
0000DFC6                            ; Object 36 - spikes
0000DFC6                            ; ---------------------------------------------------------------------------
0000DFC6                            
0000DFC6                            Obj36:					; XREF: Obj_Index
0000DFC6 7000                       		moveq	#0,d0
0000DFC8 1028 0024                  		move.b	$24(a0),d0
0000DFCC 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DFD0 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DFD4                            ; ===========================================================================
0000DFD4 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DFD6 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DFD8                            
0000DFD8 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DFDA 0110                       		dc.b 1,	$10
0000DFDC 0204                       		dc.b 2,	4
0000DFDE 031C                       		dc.b 3,	$1C
0000DFE0 0440                       		dc.b 4,	$40
0000DFE2 0510                       		dc.b 5,	$10
0000DFE4                            ; ===========================================================================
0000DFE4                            
0000DFE4                            Obj36_Main:				; XREF: Obj36_Index
0000DFE4 5428 0024                  		addq.b	#2,$24(a0)
0000DFE8 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DFF0 317C 051B 0002             		move.w	#$51B,2(a0)
0000DFF6 0028 0004 0001             		ori.b	#4,1(a0)
0000DFFC 117C 0004 0018             		move.b	#4,$18(a0)
0000E002 1028 0028                  		move.b	$28(a0),d0
0000E006 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E00C 0240 00F0                  		andi.w	#$F0,d0
0000E010 43F9 0000 DFD8             		lea	(Obj36_Var).l,a1
0000E016 E648                       		lsr.w	#3,d0
0000E018 D2C0                       		adda.w	d0,a1
0000E01A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E01E 1159 0019                  		move.b	(a1)+,$19(a0)
0000E022 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E028 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E02E                            
0000E02E                            Obj36_Solid:				; XREF: Obj36_Index
0000E02E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E032 343C 0004                  		move.w	#4,d2
0000E036 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E03C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E03E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E044 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E046 343C 0014                  		move.w	#$14,d2
0000E04A                            
0000E04A                            ; Spikes types $1x and $5x face	sideways
0000E04A                            
0000E04A                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E04A 323C 001B                  		move.w	#$1B,d1
0000E04E 3602                       		move.w	d2,d3
0000E050 5243                       		addq.w	#1,d3
0000E052 3828 0008                  		move.w	8(a0),d4
0000E056 6100 0000                  		bsr.w	SolidObject
0000E05A 0828 0003 0022             		btst	#3,$22(a0)
0000E060 6600                       		bne.s	Obj36_Display
0000E062 0C44 0001                  		cmpi.w	#1,d4
0000E066 6700                       		beq.s	Obj36_Hurt
0000E068 6000                       		bra.s	Obj36_Display
0000E06A                            ; ===========================================================================
0000E06A                            
0000E06A                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E06A                            
0000E06A                            Obj36_Upright:				; XREF: Obj36_Solid
0000E06A 7200                       		moveq	#0,d1
0000E06C 1228 0019                  		move.b	$19(a0),d1
0000E070 0641 000B                  		addi.w	#$B,d1
0000E074 343C 0010                  		move.w	#$10,d2
0000E078 363C 0011                  		move.w	#$11,d3
0000E07C 3828 0008                  		move.w	8(a0),d4
0000E080 6100 0000                  		bsr.w	SolidObject
0000E084 0828 0003 0022             		btst	#3,$22(a0)
0000E08A 6600                       		bne.s	Obj36_Hurt
0000E08C 4A44                       		tst.w	d4
0000E08E 6A00                       		bpl.s	Obj36_Display
0000E090                            
0000E090                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E090 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E094 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E096 2F08                       		move.l	a0,-(sp)
0000E098 2448                       		movea.l	a0,a2
0000E09A 41F8 D000                  		lea	($FFFFD000).w,a0
0000E09E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E0A4 6400                       		bcc.s	loc_CF20
0000E0A6 2628 000C                  		move.l	$C(a0),d3
0000E0AA 3028 0012                  		move.w	$12(a0),d0
0000E0AE 48C0                       		ext.l	d0
0000E0B0 E180                       		asl.l	#8,d0
0000E0B2 9680                       		sub.l	d0,d3
0000E0B4 2143 000C                  		move.l	d3,$C(a0)
0000E0B8 4EB9 0000 0000             		jsr	HurtSonic
0000E0BE                            
0000E0BE                            loc_CF20:
0000E0BE 205F                       		movea.l	(sp)+,a0
0000E0C0                            
0000E0C0                            Obj36_Display:
0000E0C0 6100 0000                  		bsr.w	DisplaySprite
0000E0C4 3028 0030                  		move.w	$30(a0),d0
0000E0C8 0240 FF80                  		andi.w	#$FF80,d0
0000E0CC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E0D0 0441 0080                  		subi.w	#$80,d1
0000E0D4 0241 FF80                  		andi.w	#$FF80,d1
0000E0D8 9041                       		sub.w	d1,d0
0000E0DA 0C40 0280                  		cmpi.w	#$280,d0
0000E0DE 6200 0000                  		bhi.w	DeleteObject
0000E0E2 4E75                       		rts	
0000E0E4                            ; ===========================================================================
0000E0E4                            
0000E0E4                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E0E4 7000                       		moveq	#0,d0
0000E0E6 1028 0028                  		move.b	$28(a0),d0
0000E0EA D040                       		add.w	d0,d0
0000E0EC 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E0F0 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E0F4                            ; ===========================================================================
0000E0F4 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E0F6 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E0F8 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E0FA                            ; ===========================================================================
0000E0FA                            
0000E0FA                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E0FA 4E75                       		rts			; don't move the object
0000E0FC                            ; ===========================================================================
0000E0FC                            
0000E0FC                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E0FC 6100 0000                  		bsr.w	Obj36_Wait
0000E100 7000                       		moveq	#0,d0
0000E102 1028 0034                  		move.b	$34(a0),d0
0000E106 D068 0032                  		add.w	$32(a0),d0
0000E10A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E10E 4E75                       		rts	
0000E110                            ; ===========================================================================
0000E110                            
0000E110                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E110 6100 0000                  		bsr.w	Obj36_Wait
0000E114 7000                       		moveq	#0,d0
0000E116 1028 0034                  		move.b	$34(a0),d0
0000E11A D068 0030                  		add.w	$30(a0),d0
0000E11E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E122 4E75                       		rts	
0000E124                            ; ===========================================================================
0000E124                            
0000E124                            Obj36_Wait:
0000E124 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E128 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E12A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E12E 6600                       		bne.s	locret_CFE6
0000E130 4A28 0001                  		tst.b	1(a0)
0000E134 6A00                       		bpl.s	locret_CFE6
0000E136 303C 00B6                  		move.w	#$B6,d0
0000E13A 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E140 6000                       		bra.s	locret_CFE6
0000E142                            ; ===========================================================================
0000E142                            
0000E142                            loc_CFA4:
0000E142 4A68 0036                  		tst.w	$36(a0)
0000E146 6700                       		beq.s	loc_CFC6
0000E148 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E14E 6400                       		bcc.s	locret_CFE6
0000E150 317C 0000 0034             		move.w	#0,$34(a0)
0000E156 317C 0000 0036             		move.w	#0,$36(a0)
0000E15C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E162 6000                       		bra.s	locret_CFE6
0000E164                            ; ===========================================================================
0000E164                            
0000E164                            loc_CFC6:
0000E164 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E16A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E170 6500                       		bcs.s	locret_CFE6
0000E172 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E178 317C 0001 0036             		move.w	#1,$36(a0)
0000E17E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E184                            
0000E184                            locret_CFE6:
0000E184 4E75                       		rts	
0000E186                            ; ===========================================================================
0000E186                            ; ---------------------------------------------------------------------------
0000E186                            ; Sprite mappings - spikes
0000E186                            ; ---------------------------------------------------------------------------
0000E186                            Map_obj36:
0000E186                            	include "_maps\obj36.asm"
0000E186                            Map_obj36_inner:
0000E186 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000E188 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000E18A 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000E18C 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000E18E 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000E190 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000E192 03                         Map_obj36_inner_C: 	dc.b $3
0000E193 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000E198 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E19D F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000E1A2 03                         Map_obj36_inner_1C: 	dc.b $3
0000E1A3 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000E1A8 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E1AD 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000E1B2 01                         Map_obj36_inner_2C: 	dc.b $1
0000E1B3 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E1B8 03                         Map_obj36_inner_32: 	dc.b $3
0000E1B9 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000E1BE F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E1C3 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000E1C8 06                         Map_obj36_inner_42: 	dc.b $6
0000E1C9 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000E1CE F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000E1D3 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000E1D8 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000E1DD F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000E1E2 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000E1E7 01                         Map_obj36_inner_61: 	dc.b $1
0000E1E8 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E1EE 00                         	even
0000E1EE 00                         	even
0000E1EE                            
0000E1EE                            ; ===========================================================================
0000E1EE                            ; ---------------------------------------------------------------------------
0000E1EE                            ; Object 3B - purple rock (GHZ)
0000E1EE                            ; ---------------------------------------------------------------------------
0000E1EE                            
0000E1EE                            Obj3B:					; XREF: Obj_Index
0000E1EE 7000                       		moveq	#0,d0
0000E1F0 1028 0024                  		move.b	$24(a0),d0
0000E1F4 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E1F8 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E1FC                            ; ===========================================================================
0000E1FC 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E1FE 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E200                            ; ===========================================================================
0000E200                            
0000E200                            Obj3B_Main:				; XREF: Obj3B_Index
0000E200 5428 0024                  		addq.b	#2,$24(a0)
0000E204 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E20C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E212 117C 0004 0001             		move.b	#4,1(a0)
0000E218 117C 0013 0019             		move.b	#$13,$19(a0)
0000E21E 117C 0004 0018             		move.b	#4,$18(a0)
0000E224                            
0000E224                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E224 323C 001B                  		move.w	#$1B,d1
0000E228 343C 0010                  		move.w	#$10,d2
0000E22C 363C 0010                  		move.w	#$10,d3
0000E230 3828 0008                  		move.w	8(a0),d4
0000E234 6100 0000                  		bsr.w	SolidObject
0000E238 6100 0000                  		bsr.w	DisplaySprite
0000E23C 3028 0008                  		move.w	8(a0),d0
0000E240 0240 FF80                  		andi.w	#$FF80,d0
0000E244 3238 F700                  		move.w	($FFFFF700).w,d1
0000E248 0441 0080                  		subi.w	#$80,d1
0000E24C 0241 FF80                  		andi.w	#$FF80,d1
0000E250 9041                       		sub.w	d1,d0
0000E252 0C40 0280                  		cmpi.w	#$280,d0
0000E256 6200 0000                  		bhi.w	DeleteObject
0000E25A 4E75                       		rts	
0000E25C                            ; ===========================================================================
0000E25C                            ; ---------------------------------------------------------------------------
0000E25C                            ; Object 49 - waterfall	sound effect (GHZ)
0000E25C                            ; ---------------------------------------------------------------------------
0000E25C                            
0000E25C                            Obj49:					; XREF: Obj_Index
0000E25C 7000                       		moveq	#0,d0
0000E25E 1028 0024                  		move.b	$24(a0),d0
0000E262 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E266 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E26A                            ; ===========================================================================
0000E26A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E26C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E26E                            ; ===========================================================================
0000E26E                            
0000E26E                            Obj49_Main:				; XREF: Obj49_Index
0000E26E 5428 0024                  		addq.b	#2,$24(a0)
0000E272 117C 0004 0001             		move.b	#4,1(a0)
0000E278                            
0000E278                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E278 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E27C 0200 003F                  		andi.b	#$3F,d0
0000E280 6600                       		bne.s	Obj49_ChkDel
0000E282 303C 00D0                  		move.w	#$D0,d0
0000E286 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E28C                            
0000E28C                            Obj49_ChkDel:
0000E28C 3028 0008                  		move.w	8(a0),d0
0000E290 0240 FF80                  		andi.w	#$FF80,d0
0000E294 3238 F700                  		move.w	($FFFFF700).w,d1
0000E298 0441 0080                  		subi.w	#$80,d1
0000E29C 0241 FF80                  		andi.w	#$FF80,d1
0000E2A0 9041                       		sub.w	d1,d0
0000E2A2 0C40 0280                  		cmpi.w	#$280,d0
0000E2A6 6200 0000                  		bhi.w	DeleteObject
0000E2AA 4E75                       		rts	
0000E2AC                            ; ===========================================================================
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            ; Sprite mappings - purple rock	(GHZ)
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            Map_obj3B:
0000E2AC                            	include "_maps\obj3B.asm"
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            ; Sprite mappings - purple rock	(GHZ)
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC 0000                       		dc.w byte_D110-Map_obj3B
0000E2AE 02                         byte_D110:	dc.b 2
0000E2AF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E2B4 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E2BA 00                         		even
0000E2BA 00                         		even
0000E2BA                            
0000E2BA                            ; ===========================================================================
0000E2BA                            ; ---------------------------------------------------------------------------
0000E2BA                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E2BA                            ; ---------------------------------------------------------------------------
0000E2BA                            
0000E2BA                            Obj3C:					; XREF: Obj_Index
0000E2BA 7000                       		moveq	#0,d0
0000E2BC 1028 0024                  		move.b	$24(a0),d0
0000E2C0 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E2C4 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E2C8 6000 0000                  		bra.w	MarkObjGone
0000E2CC                            ; ===========================================================================
0000E2CC 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E2CE 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E2D0 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E2D2                            ; ===========================================================================
0000E2D2                            
0000E2D2                            Obj3C_Main:				; XREF: Obj3C_Index
0000E2D2 5428 0024                  		addq.b	#2,$24(a0)
0000E2D6 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E2DE 317C 450F 0002             		move.w	#$450F,2(a0)
0000E2E4 117C 0004 0001             		move.b	#4,1(a0)
0000E2EA 117C 0010 0019             		move.b	#$10,$19(a0)
0000E2F0 117C 0004 0018             		move.b	#4,$18(a0)
0000E2F6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E2FC                            
0000E2FC                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E2FC 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E302 323C 001B                  		move.w	#$1B,d1
0000E306 343C 0020                  		move.w	#$20,d2
0000E30A 363C 0020                  		move.w	#$20,d3
0000E30E 3828 0008                  		move.w	8(a0),d4
0000E312 6100 0000                  		bsr.w	SolidObject
0000E316 0828 0005 0022             		btst	#5,$22(a0)
0000E31C 6600                       		bne.s	Obj3C_ChkRoll
0000E31E                            
0000E31E                            locret_D180:
0000E31E 4E75                       		rts	
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E320 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E326 66F6                       		bne.s	locret_D180	; if not, branch
0000E328 3028 0030                  		move.w	$30(a0),d0
0000E32C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E32E 4440                       		neg.w	d0
0000E330                            
0000E330                            Obj3C_ChkSpeed:
0000E330 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E334 65E8                       		bcs.s	locret_D180	; if not, branch
0000E336 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E33C 5869 0008                  		addq.w	#4,8(a1)
0000E340 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E346 3028 0008                  		move.w	8(a0),d0
0000E34A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E34E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E350 5169 0008                  		subq.w	#8,8(a1)
0000E354 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E35A                            
0000E35A                            Obj3C_Smash:
0000E35A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E360 08A8 0005 0022             		bclr	#5,$22(a0)
0000E366 08A9 0005 0022             		bclr	#5,$22(a1)
0000E36C 7207                       		moveq	#7,d1		; load 8 fragments
0000E36E 343C 0070                  		move.w	#$70,d2
0000E372 6100                       		bsr.s	SmashObject
0000E374                            
0000E374                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E374 6100 0000                  		bsr.w	SpeedToPos
0000E378 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E37E 6100 0000                  		bsr.w	DisplaySprite
0000E382 4A28 0001                  		tst.b	1(a0)
0000E386 6A00 0000                  		bpl.w	DeleteObject
0000E38A 4E75                       		rts	
0000E38C                            
0000E38C                            ; ---------------------------------------------------------------------------
0000E38C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E38C                            ; ---------------------------------------------------------------------------
0000E38C                            
0000E38C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E38C                            
0000E38C                            
0000E38C                            SmashObject:				; XREF: Obj3C_Smash
0000E38C 7000                       		moveq	#0,d0
0000E38E 1028 001A                  		move.b	$1A(a0),d0
0000E392 D040                       		add.w	d0,d0
0000E394 2668 0004                  		movea.l	4(a0),a3
0000E398 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E39C 524B                       		addq.w	#1,a3
0000E39E 08E8 0005 0001             		bset	#5,1(a0)
0000E3A4 1810                       		move.b	0(a0),d4
0000E3A6 1A28 0001                  		move.b	1(a0),d5
0000E3AA 2248                       		movea.l	a0,a1
0000E3AC 6000                       		bra.s	Smash_LoadFrag
0000E3AE                            ; ===========================================================================
0000E3AE                            
0000E3AE                            Smash_Loop:
0000E3AE 6100 0000                  		bsr.w	SingleObjLoad
0000E3B2 6600                       		bne.s	Smash_PlaySnd
0000E3B4 5A4B                       		addq.w	#5,a3
0000E3B6                            
0000E3B6                            Smash_LoadFrag:				; XREF: SmashObject
0000E3B6 137C 0004 0024             		move.b	#4,$24(a1)
0000E3BC 1284                       		move.b	d4,0(a1)
0000E3BE 234B 0004                  		move.l	a3,4(a1)
0000E3C2 1345 0001                  		move.b	d5,1(a1)
0000E3C6 3368 0008 0008             		move.w	8(a0),8(a1)
0000E3CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E3D2 3368 0002 0002             		move.w	2(a0),2(a1)
0000E3D8 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E3DE 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E3E4 335C 0010                  		move.w	(a4)+,$10(a1)
0000E3E8 335C 0012                  		move.w	(a4)+,$12(a1)
0000E3EC B3C8                       		cmpa.l	a0,a1
0000E3EE 6400                       		bcc.s	loc_D268
0000E3F0 2F08                       		move.l	a0,-(sp)
0000E3F2 2049                       		movea.l	a1,a0
0000E3F4 6100 0000                  		bsr.w	SpeedToPos
0000E3F8 D568 0012                  		add.w	d2,$12(a0)
0000E3FC 205F                       		movea.l	(sp)+,a0
0000E3FE 6100 0000                  		bsr.w	DisplaySprite2
0000E402                            
0000E402                            loc_D268:
0000E402 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E406                            
0000E406                            Smash_PlaySnd:
0000E406 303C 00CB                  		move.w	#$CB,d0
0000E40A 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E410                            ; End of function SmashObject
0000E410                            
0000E410                            ; ===========================================================================
0000E410                            ; Smashed block	fragment speeds
0000E410                            ;
0000E410 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E414 0600 FF00                  		dc.w $600, $FF00
0000E418 0600 0100                  		dc.w $600, $100
0000E41C 0400 0500                  		dc.w $400, $500
0000E420 0600 FA00                  		dc.w $600, $FA00
0000E424 0800 FE00                  		dc.w $800, $FE00
0000E428 0800 0200                  		dc.w $800, $200
0000E42C 0600 0600                  		dc.w $600, $600
0000E430                            
0000E430 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E434 F800 FE00                  		dc.w $F800, $FE00
0000E438 F800 0200                  		dc.w $F800, $200
0000E43C FA00 0600                  		dc.w $FA00, $600
0000E440 FC00 FB00                  		dc.w $FC00, $FB00
0000E444 FA00 FF00                  		dc.w $FA00, $FF00
0000E448 FA00 0100                  		dc.w $FA00, $100
0000E44C FC00 0500                  		dc.w $FC00, $500
0000E450                            ; ---------------------------------------------------------------------------
0000E450                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E450                            ; ---------------------------------------------------------------------------
0000E450                            Map_obj3C:
0000E450                            	include "_maps\obj3C.asm"
0000E450                            ; ---------------------------------------------------------------------------
0000E450                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E450                            ; ---------------------------------------------------------------------------
0000E450 0000                       		dc.w byte_D2BC-Map_obj3C
0000E452 0000                       		dc.w byte_D2E5-Map_obj3C
0000E454 0000                       		dc.w byte_D30E-Map_obj3C
0000E456 08                         byte_D2BC:	dc.b 8
0000E457 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E45C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E461 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E466 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E46B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E470 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E475 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E47A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E47F 08                         byte_D2E5:	dc.b 8
0000E480 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E485 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E48A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E48F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E494 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E499 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E49E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E4A3 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E4A8 08                         byte_D30E:	dc.b 8
0000E4A9 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E4AE F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E4B3 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E4B8 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E4BD E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E4C2 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E4C7 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E4CC 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E4D2 00                         		even
0000E4D2 00                         		even
0000E4D2                            
0000E4D2                            ; ---------------------------------------------------------------------------
0000E4D2                            ; Object code loading subroutine
0000E4D2                            ; ---------------------------------------------------------------------------
0000E4D2                            
0000E4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4D2                            
0000E4D2                            
0000E4D2                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E4D2 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E4D6 7E7F                       		moveq	#$7F,d7
0000E4D8 7000                       		moveq	#0,d0
0000E4DA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E4E0 6400                       		bcc.s	loc_D362
0000E4E2                            
0000E4E2                            loc_D348:
0000E4E2 1010                       		move.b	(a0),d0		; load object number from RAM
0000E4E4 6700                       		beq.s	loc_D358
0000E4E6 D040                       		add.w	d0,d0
0000E4E8 D040                       		add.w	d0,d0
0000E4EA 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E4EE 4E91                       		jsr	(a1)		; run the object's code
0000E4F0 7000                       		moveq	#0,d0
0000E4F2                            
0000E4F2                            loc_D358:
0000E4F2 41E8 0040                  		lea	$40(a0),a0	; next object
0000E4F6 51CF FFEA                  		dbf	d7,loc_D348
0000E4FA 4E75                       		rts	
0000E4FC                            ; ===========================================================================
0000E4FC                            
0000E4FC                            loc_D362:
0000E4FC 7E1F                       		moveq	#$1F,d7
0000E4FE 61E2                       		bsr.s	loc_D348
0000E500 7E5F                       		moveq	#$5F,d7
0000E502                            
0000E502                            loc_D368:
0000E502 7000                       		moveq	#0,d0
0000E504 1010                       		move.b	(a0),d0
0000E506 6700                       		beq.s	loc_D378
0000E508 4A28 0001                  		tst.b	1(a0)
0000E50C 6A00                       		bpl.s	loc_D378
0000E50E 6100 0000                  		bsr.w	DisplaySprite
0000E512                            
0000E512                            loc_D378:
0000E512 41E8 0040                  		lea	$40(a0),a0
0000E516                            
0000E516                            loc_D37C:
0000E516 51CF FFEA                  		dbf	d7,loc_D368
0000E51A 4E75                       		rts	
0000E51C                            ; End of function ObjectsLoad
0000E51C                            
0000E51C                            ; ===========================================================================
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            ; Object pointers
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            Obj_Index:
0000E51C                            	include "_inc\Object pointers.asm"
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            ; Object pointers
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000E52C 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E53C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E54C 0000 0000 0000 B736 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E55C 0000 82CE 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E56C 0000 88F4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E57C 0000 9142 0000 923C 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E58C 0000 9886 0000 9B74 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E59C 0000 0000 0000 A832 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E5AC 0000 AB6A 0000 B156 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E5BC 0000 A48E 0000 995C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E5CC 0000 BD2E 0000 B34A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E5DC 0000 C742 0000 CDF0 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E5EC 0000 C2A0 0000 DFC6 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E5FC 0000 D59E 0000 D658 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E60C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E61C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E62C 0000 CA5E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E63C 0000 E25C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E64C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E65C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E66C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E67C 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E68C 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E69C 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E6AC 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E6BC 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E6CC 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E6DC 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E6EC 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E6FC 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E70C 0000 0000 0000 D8A2 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E71C 0000 5D2C 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E72C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E73C 0000 63E6 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E73C 0000 63E6 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E74C                            
0000E74C                            ; ---------------------------------------------------------------------------
0000E74C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E74C                            ; ---------------------------------------------------------------------------
0000E74C                            
0000E74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E74C                            
0000E74C                            _objectFall: 
0000E74C                            ObjectFall:
0000E74C 2428 0008                  		move.l	8(a0),d2
0000E750 2628 000C                  		move.l	$C(a0),d3
0000E754 3028 0010                  		move.w	$10(a0),d0
0000E758 48C0                       		ext.l	d0
0000E75A E180                       		asl.l	#8,d0
0000E75C D480                       		add.l	d0,d2
0000E75E 3028 0012                  		move.w	$12(a0),d0
0000E762 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E768 48C0                       		ext.l	d0
0000E76A E180                       		asl.l	#8,d0
0000E76C D680                       		add.l	d0,d3
0000E76E 2142 0008                  		move.l	d2,8(a0)
0000E772 2143 000C                  		move.l	d3,$C(a0)
0000E776 4E75                       		rts	
0000E778                            ; End of function ObjectFall
0000E778                            
0000E778                            ; ---------------------------------------------------------------------------
0000E778                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E778                            ; ---------------------------------------------------------------------------
0000E778                            
0000E778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E778                            
0000E778                            
0000E778                            ObjectFallNoJump:
0000E778 2428 0008                  		move.l	8(a0),d2
0000E77C 2628 000C                  		move.l	$C(a0),d3
0000E780 3028 0010                  		move.w	$10(a0),d0
0000E784 48C0                       		ext.l	d0
0000E786 E180                       		asl.l	#8,d0
0000E788 D480                       		add.l	d0,d2
0000E78A                            ;		cmpi.b	#1,obID(a0)
0000E78A                            ;		beq.s	ObjectFallSonic
0000E78A 3028 000C                  		move.w	$C(a0),d0
0000E78E 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000E792                            ;		ext.l	d0
0000E792                            ;		asl.l	#8,d0
0000E792                            ;		add.l	d0,d3
0000E792 2142 0008                  		move.l	d2,$8(a0)
0000E796                            ;		move.l	d3,obY(a0)
0000E796 4E75                       		rts	
0000E798                            
0000E798                            ; End of function ObjectFall
0000E798                            
0000E798                            JumpFallSonic:
0000E798 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E79E                                    
0000E79E E180                               asl.l    #8,d0                ; Apply X speed
0000E7A0 D1A8 0008                          add.l    d0,$8(a0)
0000E7A4                                    
0000E7A4 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E7A8 4A41                               tst.w    d1                ; Are we falling?
0000E7AA 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E7AC 4440                               neg.w    d0                ; Make Y movement go up
0000E7AE                                    
0000E7AE                            .SetYSpeed:
0000E7AE 48C0                               ext.l    d0                ; Apply Y speed
0000E7B0 E180                               asl.l    #8,d0
0000E7B2 D1A8 000C                          add.l    d0,$C(a0)
0000E7B6 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E7BC 4E75                               rts
0000E7BE                            
0000E7BE                            ; ---------------------------------------------------------------------------
0000E7BE                            ; Subroutine translating object	speed to update	object position
0000E7BE                            ; ---------------------------------------------------------------------------
0000E7BE                            
0000E7BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7BE                            
0000E7BE                            _objectSetSpeed:
0000E7BE                            SpeedToPos:
0000E7BE 2428 0008                  		move.l	8(a0),d2
0000E7C2 2628 000C                  		move.l	$C(a0),d3
0000E7C6 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E7CA 48C0                       		ext.l	d0
0000E7CC E180                       		asl.l	#8,d0		; multiply speed by $100
0000E7CE D480                       		add.l	d0,d2		; add to x-axis	position
0000E7D0 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E7D4 48C0                       		ext.l	d0
0000E7D6 E180                       		asl.l	#8,d0		; multiply by $100
0000E7D8 D680                       		add.l	d0,d3		; add to y-axis	position
0000E7DA 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E7DE 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E7E2 4E75                       		rts	
0000E7E4                            ; End of function SpeedToPos
0000E7E4                            
0000E7E4                            ; ---------------------------------------------------------------------------
0000E7E4                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E7E4                            ; ---------------------------------------------------------------------------
0000E7E4                            
0000E7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7E4                            
0000E7E4                            _objectDraw:
0000E7E4                            DisplaySprite:
0000E7E4 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E7E8 3028 0018                  		move.w	$18(a0),d0
0000E7EC E248                       		lsr.w	#1,d0
0000E7EE 0240 0380                  		andi.w	#$380,d0
0000E7F2 D2C0                       		adda.w	d0,a1
0000E7F4 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E7F8 6400                       		bcc.s	locret_D620
0000E7FA 5451                       		addq.w	#2,(a1)
0000E7FC D2D1                       		adda.w	(a1),a1
0000E7FE 3288                       		move.w	a0,(a1)
0000E800                            
0000E800                            locret_D620:
0000E800 4E75                       		rts	
0000E802                            ; End of function DisplaySprite
0000E802                            
0000E802                            ; ---------------------------------------------------------------------------
0000E802                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E802                            ; ---------------------------------------------------------------------------
0000E802                            
0000E802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E802                            
0000E802                            _objectDrawChild: 
0000E802                            DisplaySprite2:
0000E802 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E806 3029 0018                  		move.w	$18(a1),d0
0000E80A E248                       		lsr.w	#1,d0
0000E80C 0240 0380                  		andi.w	#$380,d0
0000E810 D4C0                       		adda.w	d0,a2
0000E812 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E816 6400                       		bcc.s	locret_D63E
0000E818 5452                       		addq.w	#2,(a2)
0000E81A D4D2                       		adda.w	(a2),a2
0000E81C 3489                       		move.w	a1,(a2)
0000E81E                            
0000E81E                            locret_D63E:
0000E81E 4E75                       		rts	
0000E820                            ; End of function DisplaySprite2
0000E820                            
0000E820                            ; ---------------------------------------------------------------------------
0000E820                            ; Subroutine to	delete an object
0000E820                            ; ---------------------------------------------------------------------------
0000E820                            
0000E820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E820                            
0000E820                            _objectDelete: 
0000E820                            DeleteObject:
0000E820 2248                       		movea.l	a0,a1
0000E822                            
0000E822                            DeleteObject2:
0000E822 7200                       		moveq	#0,d1
0000E824 700F                       		moveq	#$F,d0
0000E826                            
0000E826                            loc_D646:
0000E826 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E828 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E82C 4E75                       		rts	
0000E82E                            ; End of function DeleteObject
0000E82E                            
0000E82E                            ; ===========================================================================
0000E82E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E832 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E836 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E83A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E83E                            ; ---------------------------------------------------------------------------
0000E83E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E83E                            ; ---------------------------------------------------------------------------
0000E83E                            
0000E83E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E83E                            
0000E83E                            DrawObjects:
0000E83E                            BuildSprites:				; XREF: TitleScreen; et al
0000E83E 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E842 7A00                       		moveq	#0,d5
0000E844 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E848 7E07                       		moveq	#7,d7
0000E84A                            
0000E84A                            loc_D66A:
0000E84A 4A54                       		tst.w	(a4)
0000E84C 6700 0000                  		beq.w	loc_D72E
0000E850 7C02                       		moveq	#2,d6
0000E852                            
0000E852                            loc_D672:
0000E852 3074 6000                  		movea.w	(a4,d6.w),a0
0000E856 4A10                       		tst.b	(a0)
0000E858 6700 0000                  		beq.w	loc_D726
0000E85C 08A8 0007 0001             		bclr	#7,1(a0)
0000E862 1028 0001                  		move.b	1(a0),d0
0000E866 1800                       		move.b	d0,d4
0000E868 0240 000C                  		andi.w	#$C,d0
0000E86C 6700                       		beq.s	loc_D6DE
0000E86E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E872 7000                       		moveq	#0,d0
0000E874 1028 0019                  		move.b	$19(a0),d0
0000E878 3628 0008                  		move.w	8(a0),d3
0000E87C 9651                       		sub.w	(a1),d3
0000E87E 3203                       		move.w	d3,d1
0000E880 D240                       		add.w	d0,d1
0000E882 6B00 0000                  		bmi.w	loc_D726
0000E886 3203                       		move.w	d3,d1
0000E888 9240                       		sub.w	d0,d1
0000E88A 0C41 0140                  		cmpi.w	#$140,d1
0000E88E 6C00                       		bge.s	loc_D726
0000E890 0643 0080                  		addi.w	#$80,d3
0000E894 0804 0004                  		btst	#4,d4
0000E898 6700                       		beq.s	loc_D6E8
0000E89A 7000                       		moveq	#0,d0
0000E89C 1028 0016                  		move.b	$16(a0),d0
0000E8A0 3428 000C                  		move.w	$C(a0),d2
0000E8A4 9469 0004                  		sub.w	4(a1),d2
0000E8A8 3202                       		move.w	d2,d1
0000E8AA D240                       		add.w	d0,d1
0000E8AC 6B00                       		bmi.s	loc_D726
0000E8AE 3202                       		move.w	d2,d1
0000E8B0 9240                       		sub.w	d0,d1
0000E8B2 0C41 00E0                  		cmpi.w	#$E0,d1
0000E8B6 6C00                       		bge.s	loc_D726
0000E8B8 0642 0080                  		addi.w	#$80,d2
0000E8BC 6000                       		bra.s	loc_D700
0000E8BE                            ; ===========================================================================
0000E8BE                            
0000E8BE                            loc_D6DE:
0000E8BE 3428 000A                  		move.w	$A(a0),d2
0000E8C2 3628 0008                  		move.w	8(a0),d3
0000E8C6 6000                       		bra.s	loc_D700
0000E8C8                            ; ===========================================================================
0000E8C8                            
0000E8C8                            loc_D6E8:
0000E8C8 3428 000C                  		move.w	$C(a0),d2
0000E8CC 9469 0004                  		sub.w	4(a1),d2
0000E8D0 0642 0080                  		addi.w	#$80,d2
0000E8D4 0C42 0060                  		cmpi.w	#$60,d2
0000E8D8 6500                       		bcs.s	loc_D726
0000E8DA 0C42 0180                  		cmpi.w	#$180,d2
0000E8DE 6400                       		bcc.s	loc_D726
0000E8E0                            
0000E8E0                            loc_D700:
0000E8E0 2268 0004                  		movea.l	4(a0),a1
0000E8E4 7200                       		moveq	#0,d1
0000E8E6 0804 0005                  		btst	#5,d4
0000E8EA 6600                       		bne.s	loc_D71C
0000E8EC 1228 001A                  		move.b	$1A(a0),d1
0000E8F0 D201                       		add.b	d1,d1
0000E8F2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E8F6 1219                       		move.b	(a1)+,d1
0000E8F8 5301                       		subq.b	#1,d1
0000E8FA 6B00                       		bmi.s	loc_D720
0000E8FC                            
0000E8FC                            loc_D71C:
0000E8FC 6100 0000                  		bsr.w	sub_D750
0000E900                            
0000E900                            loc_D720:
0000E900 08E8 0007 0001             		bset	#7,1(a0)
0000E906                            
0000E906                            loc_D726:
0000E906 5446                       		addq.w	#2,d6
0000E908 5554                       		subq.w	#2,(a4)
0000E90A 6600 FF46                  		bne.w	loc_D672
0000E90E                            
0000E90E                            loc_D72E:
0000E90E 49EC 0080                  		lea	$80(a4),a4
0000E912 51CF FF36                  		dbf	d7,loc_D66A
0000E916 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E91A 0C05 0050                  		cmpi.b	#$50,d5
0000E91E 6700                       		beq.s	loc_D748
0000E920 24BC 0000 0000             		move.l	#0,(a2)
0000E926 4E75                       		rts	
0000E928                            ; ===========================================================================
0000E928                            
0000E928                            loc_D748:
0000E928 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E92E 4E75                       		rts	
0000E930                            ; End of function BuildSprites
0000E930                            
0000E930                            
0000E930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E930                            
0000E930                            
0000E930                            sub_D750:				; XREF: BuildSprites
0000E930 3668 0002                  		movea.w	2(a0),a3
0000E934 0804 0000                  		btst	#0,d4
0000E938 6600                       		bne.s	loc_D796
0000E93A 0804 0001                  		btst	#1,d4
0000E93E 6600 0000                  		bne.w	loc_D7E4
0000E942                            ; End of function sub_D750
0000E942                            
0000E942                            
0000E942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E942                            
0000E942                            
0000E942                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E942 0C05 0050                  		cmpi.b	#$50,d5
0000E946 6700                       		beq.s	locret_D794
0000E948 1019                       		move.b	(a1)+,d0
0000E94A 4880                       		ext.w	d0
0000E94C D042                       		add.w	d2,d0
0000E94E 34C0                       		move.w	d0,(a2)+
0000E950 14D9                       		move.b	(a1)+,(a2)+
0000E952 5205                       		addq.b	#1,d5
0000E954 14C5                       		move.b	d5,(a2)+
0000E956 1019                       		move.b	(a1)+,d0
0000E958 E148                       		lsl.w	#8,d0
0000E95A 1019                       		move.b	(a1)+,d0
0000E95C D04B                       		add.w	a3,d0
0000E95E 34C0                       		move.w	d0,(a2)+
0000E960 1019                       		move.b	(a1)+,d0
0000E962 4880                       		ext.w	d0
0000E964 D043                       		add.w	d3,d0
0000E966 0240 01FF                  		andi.w	#$1FF,d0
0000E96A 6600                       		bne.s	loc_D78E
0000E96C 5240                       		addq.w	#1,d0
0000E96E                            
0000E96E                            loc_D78E:
0000E96E 34C0                       		move.w	d0,(a2)+
0000E970 51C9 FFD0                  		dbf	d1,sub_D762
0000E974                            
0000E974                            locret_D794:
0000E974 4E75                       		rts	
0000E976                            ; End of function sub_D762
0000E976                            
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            loc_D796:
0000E976 0804 0001                  		btst	#1,d4
0000E97A 6600 0000                  		bne.w	loc_D82A
0000E97E                            
0000E97E                            loc_D79E:
0000E97E 0C05 0050                  		cmpi.b	#$50,d5
0000E982 6700                       		beq.s	locret_D7E2
0000E984 1019                       		move.b	(a1)+,d0
0000E986 4880                       		ext.w	d0
0000E988 D042                       		add.w	d2,d0
0000E98A 34C0                       		move.w	d0,(a2)+
0000E98C 1819                       		move.b	(a1)+,d4
0000E98E 14C4                       		move.b	d4,(a2)+
0000E990 5205                       		addq.b	#1,d5
0000E992 14C5                       		move.b	d5,(a2)+
0000E994 1019                       		move.b	(a1)+,d0
0000E996 E148                       		lsl.w	#8,d0
0000E998 1019                       		move.b	(a1)+,d0
0000E99A D04B                       		add.w	a3,d0
0000E99C 0A40 0800                  		eori.w	#$800,d0
0000E9A0 34C0                       		move.w	d0,(a2)+
0000E9A2 1019                       		move.b	(a1)+,d0
0000E9A4 4880                       		ext.w	d0
0000E9A6 4440                       		neg.w	d0
0000E9A8 D804                       		add.b	d4,d4
0000E9AA 0244 0018                  		andi.w	#$18,d4
0000E9AE 5044                       		addq.w	#8,d4
0000E9B0 9044                       		sub.w	d4,d0
0000E9B2 D043                       		add.w	d3,d0
0000E9B4 0240 01FF                  		andi.w	#$1FF,d0
0000E9B8 6600                       		bne.s	loc_D7DC
0000E9BA 5240                       		addq.w	#1,d0
0000E9BC                            
0000E9BC                            loc_D7DC:
0000E9BC 34C0                       		move.w	d0,(a2)+
0000E9BE 51C9 FFBE                  		dbf	d1,loc_D79E
0000E9C2                            
0000E9C2                            locret_D7E2:
0000E9C2 4E75                       		rts	
0000E9C4                            ; ===========================================================================
0000E9C4                            
0000E9C4                            loc_D7E4:				; XREF: sub_D750
0000E9C4 0C05 0050                  		cmpi.b	#$50,d5
0000E9C8 6700                       		beq.s	locret_D828
0000E9CA 1019                       		move.b	(a1)+,d0
0000E9CC 1811                       		move.b	(a1),d4
0000E9CE 4880                       		ext.w	d0
0000E9D0 4440                       		neg.w	d0
0000E9D2 E70C                       		lsl.b	#3,d4
0000E9D4 0244 0018                  		andi.w	#$18,d4
0000E9D8 5044                       		addq.w	#8,d4
0000E9DA 9044                       		sub.w	d4,d0
0000E9DC D042                       		add.w	d2,d0
0000E9DE 34C0                       		move.w	d0,(a2)+
0000E9E0 14D9                       		move.b	(a1)+,(a2)+
0000E9E2 5205                       		addq.b	#1,d5
0000E9E4 14C5                       		move.b	d5,(a2)+
0000E9E6 1019                       		move.b	(a1)+,d0
0000E9E8 E148                       		lsl.w	#8,d0
0000E9EA 1019                       		move.b	(a1)+,d0
0000E9EC D04B                       		add.w	a3,d0
0000E9EE 0A40 1000                  		eori.w	#$1000,d0
0000E9F2 34C0                       		move.w	d0,(a2)+
0000E9F4 1019                       		move.b	(a1)+,d0
0000E9F6 4880                       		ext.w	d0
0000E9F8 D043                       		add.w	d3,d0
0000E9FA 0240 01FF                  		andi.w	#$1FF,d0
0000E9FE 6600                       		bne.s	loc_D822
0000EA00 5240                       		addq.w	#1,d0
0000EA02                            
0000EA02                            loc_D822:
0000EA02 34C0                       		move.w	d0,(a2)+
0000EA04 51C9 FFBE                  		dbf	d1,loc_D7E4
0000EA08                            
0000EA08                            locret_D828:
0000EA08 4E75                       		rts	
0000EA0A                            ; ===========================================================================
0000EA0A                            
0000EA0A                            loc_D82A:
0000EA0A 0C05 0050                  		cmpi.b	#$50,d5
0000EA0E 6700                       		beq.s	locret_D87C
0000EA10 1019                       		move.b	(a1)+,d0
0000EA12 1811                       		move.b	(a1),d4
0000EA14 4880                       		ext.w	d0
0000EA16 4440                       		neg.w	d0
0000EA18 E70C                       		lsl.b	#3,d4
0000EA1A 0244 0018                  		andi.w	#$18,d4
0000EA1E 5044                       		addq.w	#8,d4
0000EA20 9044                       		sub.w	d4,d0
0000EA22 D042                       		add.w	d2,d0
0000EA24 34C0                       		move.w	d0,(a2)+
0000EA26 1819                       		move.b	(a1)+,d4
0000EA28 14C4                       		move.b	d4,(a2)+
0000EA2A 5205                       		addq.b	#1,d5
0000EA2C 14C5                       		move.b	d5,(a2)+
0000EA2E 1019                       		move.b	(a1)+,d0
0000EA30 E148                       		lsl.w	#8,d0
0000EA32 1019                       		move.b	(a1)+,d0
0000EA34 D04B                       		add.w	a3,d0
0000EA36 0A40 1800                  		eori.w	#$1800,d0
0000EA3A 34C0                       		move.w	d0,(a2)+
0000EA3C 1019                       		move.b	(a1)+,d0
0000EA3E 4880                       		ext.w	d0
0000EA40 4440                       		neg.w	d0
0000EA42 D804                       		add.b	d4,d4
0000EA44 0244 0018                  		andi.w	#$18,d4
0000EA48 5044                       		addq.w	#8,d4
0000EA4A 9044                       		sub.w	d4,d0
0000EA4C D043                       		add.w	d3,d0
0000EA4E 0240 01FF                  		andi.w	#$1FF,d0
0000EA52 6600                       		bne.s	loc_D876
0000EA54 5240                       		addq.w	#1,d0
0000EA56                            
0000EA56                            loc_D876:
0000EA56 34C0                       		move.w	d0,(a2)+
0000EA58 51C9 FFB0                  		dbf	d1,loc_D82A
0000EA5C                            
0000EA5C                            locret_D87C:
0000EA5C 4E75                       		rts	
0000EA5E                            ; ---------------------------------------------------------------------------
0000EA5E                            ; Subroutine to	check if an object is on the screen
0000EA5E                            ; ---------------------------------------------------------------------------
0000EA5E                            
0000EA5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA5E                            
0000EA5E                            
0000EA5E                            ChkObjOnScreen:
0000EA5E 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000EA62 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000EA66 6B00                       		bmi.s	NotOnScreen
0000EA68 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000EA6C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000EA6E                            
0000EA6E 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000EA72 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000EA76 6B00                       		bmi.s	NotOnScreen
0000EA78 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000EA7C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000EA7E                            
0000EA7E 7000                       		moveq	#0,d0		; set flag to 0
0000EA80 4E75                       		rts	
0000EA82                            ; ===========================================================================
0000EA82                            
0000EA82                            NotOnScreen:				; XREF: ChkObjOnScreen
0000EA82 7001                       		moveq	#1,d0		; set flag to 1
0000EA84 4E75                       		rts	
0000EA86                            ; End of function ChkObjOnScreen
0000EA86                            
0000EA86                            
0000EA86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA86                            
0000EA86                            
0000EA86                            ChkObjOnScreen2:
0000EA86 7200                       		moveq	#0,d1
0000EA88 1228 0019                  		move.b	$19(a0),d1
0000EA8C 3028 0008                  		move.w	8(a0),d0
0000EA90 9078 F700                  		sub.w	($FFFFF700).w,d0
0000EA94 D041                       		add.w	d1,d0
0000EA96 6B00                       		bmi.s	NotOnScreen2
0000EA98 D241                       		add.w	d1,d1
0000EA9A 9041                       		sub.w	d1,d0
0000EA9C 0C40 0140                  		cmpi.w	#320,d0
0000EAA0 6C00                       		bge.s	NotOnScreen2
0000EAA2                            
0000EAA2 3228 000C                  		move.w	$C(a0),d1
0000EAA6 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EAAA 6B00                       		bmi.s	NotOnScreen2
0000EAAC 0C41 00E0                  		cmpi.w	#224,d1
0000EAB0 6C00                       		bge.s	NotOnScreen2
0000EAB2                            
0000EAB2 7000                       		moveq	#0,d0
0000EAB4 4E75                       		rts	
0000EAB6                            ; ===========================================================================
0000EAB6                            
0000EAB6                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EAB6 7001                       		moveq	#1,d0
0000EAB8 4E75                       		rts	
0000EABA                            ; End of function ChkObjOnScreen2
0000EABA                            
0000EABA                            ; ---------------------------------------------------------------------------
0000EABA                            ; Subroutine to	load a level's objects
0000EABA                            ; ---------------------------------------------------------------------------
0000EABA                            
0000EABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EABA                            
0000EABA                            
0000EABA                            ObjPosLoad:				; XREF: Level; et al
0000EABA 7000                       		moveq	#0,d0
0000EABC 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000EAC0 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000EAC4 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000EAC8                            ; End of function ObjPosLoad
0000EAC8                            
0000EAC8                            ; ===========================================================================
0000EAC8 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000EACA 0000                       		dc.w OPL_Next-OPL_Index
0000EACC                            ; ===========================================================================
0000EACC                            
0000EACC                            OPL_Main:				; XREF: OPL_Index
0000EACC 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000EAD0 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000EAD4 ED08                       		lsl.b	#6,d0
0000EAD6 E848                       		lsr.w	#4,d0
0000EAD8 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000EADE 2248                       		movea.l	a0,a1
0000EAE0 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000EAE4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EAE8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EAEC D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000EAF0 21C9 F778                  		move.l	a1,($FFFFF778).w
0000EAF4 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000EAF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EAFC 34FC 0101                  		move.w	#$101,(a2)+
0000EB00 303C 005E                  		move.w	#$5E,d0
0000EB04                            
0000EB04                            OPL_ClrList:
0000EB04 429A                       		clr.l	(a2)+
0000EB06 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000EB0A                            
0000EB0A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB0E 7400                       		moveq	#0,d2
0000EB10 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EB14 0446 0080                  		subi.w	#$80,d6
0000EB18 6400                       		bcc.s	loc_D93C
0000EB1A 7C00                       		moveq	#0,d6
0000EB1C                            
0000EB1C                            loc_D93C:
0000EB1C 0246 FF80                  		andi.w	#$FF80,d6
0000EB20 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB24                            
0000EB24                            loc_D944:
0000EB24 BC50                       		cmp.w	(a0),d6
0000EB26 6300                       		bls.s	loc_D956
0000EB28 4A28 0004                  		tst.b	4(a0)
0000EB2C 6A00                       		bpl.s	loc_D952
0000EB2E 1412                       		move.b	(a2),d2
0000EB30 5212                       		addq.b	#1,(a2)
0000EB32                            
0000EB32                            loc_D952:
0000EB32 5C48                       		addq.w	#6,a0
0000EB34 60EE                       		bra.s	loc_D944
0000EB36                            ; ===========================================================================
0000EB36                            
0000EB36                            loc_D956:
0000EB36 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB3A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EB3E 0446 0080                  		subi.w	#$80,d6
0000EB42 6500                       		bcs.s	loc_D976
0000EB44                            
0000EB44                            loc_D964:
0000EB44 BC50                       		cmp.w	(a0),d6
0000EB46 6300                       		bls.s	loc_D976
0000EB48 4A28 0004                  		tst.b	4(a0)
0000EB4C 6A00                       		bpl.s	loc_D972
0000EB4E 522A 0001                  		addq.b	#1,1(a2)
0000EB52                            
0000EB52                            loc_D972:
0000EB52 5C48                       		addq.w	#6,a0
0000EB54 60EE                       		bra.s	loc_D964
0000EB56                            ; ===========================================================================
0000EB56                            
0000EB56                            loc_D976:
0000EB56 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB5A 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000EB60                            
0000EB60                            OPL_Next:				; XREF: OPL_Index
0000EB60 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB64 7400                       		moveq	#0,d2
0000EB66 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EB6A 0246 FF80                  		andi.w	#$FF80,d6
0000EB6E BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000EB72 6700 0000                  		beq.w	locret_DA3A
0000EB76 6C00                       		bge.s	loc_D9F6
0000EB78 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EB7C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EB80 0446 0080                  		subi.w	#$80,d6
0000EB84 6500                       		bcs.s	loc_D9D2
0000EB86                            
0000EB86                            loc_D9A6:
0000EB86 BC68 FFFA                  		cmp.w	-6(a0),d6
0000EB8A 6C00                       		bge.s	loc_D9D2
0000EB8C 5D48                       		subq.w	#6,a0
0000EB8E 4A28 0004                  		tst.b	4(a0)
0000EB92 6A00                       		bpl.s	loc_D9BC
0000EB94 532A 0001                  		subq.b	#1,1(a2)
0000EB98 142A 0001                  		move.b	1(a2),d2
0000EB9C                            
0000EB9C                            loc_D9BC:
0000EB9C 6100 0000                  		bsr.w	loc_DA3C
0000EBA0 6600                       		bne.s	loc_D9C6
0000EBA2 5D48                       		subq.w	#6,a0
0000EBA4 60E0                       		bra.s	loc_D9A6
0000EBA6                            ; ===========================================================================
0000EBA6                            
0000EBA6                            loc_D9C6:
0000EBA6 4A28 0004                  		tst.b	4(a0)
0000EBAA 6A00                       		bpl.s	loc_D9D0
0000EBAC 522A 0001                  		addq.b	#1,1(a2)
0000EBB0                            
0000EBB0                            loc_D9D0:
0000EBB0 5C48                       		addq.w	#6,a0
0000EBB2                            
0000EBB2                            loc_D9D2:
0000EBB2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EBB6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EBBA 0646 0300                  		addi.w	#$300,d6
0000EBBE                            
0000EBBE                            loc_D9DE:
0000EBBE BC68 FFFA                  		cmp.w	-6(a0),d6
0000EBC2 6E00                       		bgt.s	loc_D9F0
0000EBC4 4A28 FFFE                  		tst.b	-2(a0)
0000EBC8 6A00                       		bpl.s	loc_D9EC
0000EBCA 5312                       		subq.b	#1,(a2)
0000EBCC                            
0000EBCC                            loc_D9EC:
0000EBCC 5D48                       		subq.w	#6,a0
0000EBCE 60EE                       		bra.s	loc_D9DE
0000EBD0                            ; ===========================================================================
0000EBD0                            
0000EBD0                            loc_D9F0:
0000EBD0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EBD4 4E75                       		rts	
0000EBD6                            ; ===========================================================================
0000EBD6                            
0000EBD6                            loc_D9F6:
0000EBD6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EBDA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EBDE 0646 0280                  		addi.w	#$280,d6
0000EBE2                            
0000EBE2                            loc_DA02:
0000EBE2 BC50                       		cmp.w	(a0),d6
0000EBE4 6300                       		bls.s	loc_DA16
0000EBE6 4A28 0004                  		tst.b	4(a0)
0000EBEA 6A00                       		bpl.s	loc_DA10
0000EBEC 1412                       		move.b	(a2),d2
0000EBEE 5212                       		addq.b	#1,(a2)
0000EBF0                            
0000EBF0                            loc_DA10:
0000EBF0 6100 0000                  		bsr.w	loc_DA3C
0000EBF4 67EC                       		beq.s	loc_DA02
0000EBF6                            
0000EBF6                            loc_DA16:
0000EBF6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EBFA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EBFE 0446 0300                  		subi.w	#$300,d6
0000EC02 6500                       		bcs.s	loc_DA36
0000EC04                            
0000EC04                            loc_DA24:
0000EC04 BC50                       		cmp.w	(a0),d6
0000EC06 6300                       		bls.s	loc_DA36
0000EC08 4A28 0004                  		tst.b	4(a0)
0000EC0C 6A00                       		bpl.s	loc_DA32
0000EC0E 522A 0001                  		addq.b	#1,1(a2)
0000EC12                            
0000EC12                            loc_DA32:
0000EC12 5C48                       		addq.w	#6,a0
0000EC14 60EE                       		bra.s	loc_DA24
0000EC16                            ; ===========================================================================
0000EC16                            
0000EC16                            loc_DA36:
0000EC16 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EC1A                            
0000EC1A                            locret_DA3A:
0000EC1A 4E75                       		rts	
0000EC1C                            ; ===========================================================================
0000EC1C                            
0000EC1C                            loc_DA3C:
0000EC1C 4A28 0004                  		tst.b	4(a0)
0000EC20 6A00                       		bpl.s	OPL_MakeItem
0000EC22 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000EC28 6700                       		beq.s	OPL_MakeItem
0000EC2A 5C48                       		addq.w	#6,a0
0000EC2C 7000                       		moveq	#0,d0
0000EC2E 4E75                       		rts	
0000EC30                            ; ===========================================================================
0000EC30                            
0000EC30                            OPL_MakeItem:
0000EC30 6100 0000                  		bsr.w	SingleObjLoad
0000EC34 6600                       		bne.s	locret_DA8A
0000EC36 3358 0008                  		move.w	(a0)+,8(a1)
0000EC3A 3018                       		move.w	(a0)+,d0
0000EC3C 3200                       		move.w	d0,d1
0000EC3E 0240 0FFF                  		andi.w	#$FFF,d0
0000EC42 3340 000C                  		move.w	d0,$C(a1)
0000EC46 E559                       		rol.w	#2,d1
0000EC48 0201 0003                  		andi.b	#3,d1
0000EC4C 1341 0001                  		move.b	d1,1(a1)
0000EC50 1341 0022                  		move.b	d1,$22(a1)
0000EC54 1018                       		move.b	(a0)+,d0
0000EC56 6A00                       		bpl.s	loc_DA80
0000EC58 0200 007F                  		andi.b	#$7F,d0
0000EC5C 1342 0023                  		move.b	d2,$23(a1)
0000EC60                            
0000EC60                            loc_DA80:
0000EC60 1280                       		move.b	d0,0(a1)
0000EC62 1358 0028                  		move.b	(a0)+,$28(a1)
0000EC66 7000                       		moveq	#0,d0
0000EC68                            
0000EC68                            locret_DA8A:
0000EC68 4E75                       		rts	
0000EC6A                            ; ---------------------------------------------------------------------------
0000EC6A                            ; Single object	loading	subroutine
0000EC6A                            ; ---------------------------------------------------------------------------
0000EC6A                            
0000EC6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC6A                            
0000EC6A                            
0000EC6A                            SingleObjLoad:
0000EC6A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000EC6E 303C 005F                  		move.w	#$5F,d0
0000EC72                            
0000EC72                            loc_DA94:
0000EC72 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000EC74 6700                       		beq.s	locret_DAA0	; if yes, branch
0000EC76 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000EC7A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000EC7E                            
0000EC7E                            locret_DAA0:
0000EC7E 4E75                       		rts	
0000EC80                            ; End of function SingleObjLoad
0000EC80                            
0000EC80                            
0000EC80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC80                            
0000EC80                            
0000EC80                            SingleObjLoad2:
0000EC80 2248                       		movea.l	a0,a1
0000EC82 303C F000                  		move.w	#-$1000,d0
0000EC86 9048                       		sub.w	a0,d0
0000EC88 EC48                       		lsr.w	#6,d0
0000EC8A 5340                       		subq.w	#1,d0
0000EC8C 6500                       		bcs.s	locret_DABC
0000EC8E                            
0000EC8E                            loc_DAB0:
0000EC8E 4A11                       		tst.b	(a1)
0000EC90 6700                       		beq.s	locret_DABC
0000EC92 43E9 0040                  		lea	$40(a1),a1
0000EC96 51C8 FFF6                  		dbf	d0,loc_DAB0
0000EC9A                            
0000EC9A                            locret_DABC:
0000EC9A 4E75                       		rts	
0000EC9C                            ; End of function SingleObjLoad2
0000EC9C                            
0000EC9C                            ; ===========================================================================
0000EC9C                            ; ---------------------------------------------------------------------------
0000EC9C                            ; Object 41 - springs
0000EC9C                            ; ---------------------------------------------------------------------------
0000EC9C                            
0000EC9C                            Obj41:					; XREF: Obj_Index
0000EC9C 7000                       		moveq	#0,d0
0000EC9E 1028 0024                  		move.b	$24(a0),d0
0000ECA2 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000ECA6 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000ECAA 6100 FB38                  		bsr.w	DisplaySprite
0000ECAE 3028 0008                  		move.w	8(a0),d0
0000ECB2 0240 FF80                  		andi.w	#$FF80,d0
0000ECB6 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECBA 0441 0080                  		subi.w	#$80,d1
0000ECBE 0241 FF80                  		andi.w	#$FF80,d1
0000ECC2 9041                       		sub.w	d1,d0
0000ECC4 0C40 0280                  		cmpi.w	#$280,d0
0000ECC8 6200 FB56                  		bhi.w	DeleteObject
0000ECCC 4E75                       		rts	
0000ECCE                            ; ===========================================================================
0000ECCE 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000ECD0 0000                       		dc.w Obj41_Up-Obj41_Index
0000ECD2 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000ECD4 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000ECD6 0000                       		dc.w Obj41_LR-Obj41_Index
0000ECD8 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000ECDA 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000ECDC 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000ECDE 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000ECE0 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000ECE2                            
0000ECE2 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000ECE4 F600                       		dc.w -$A00		; power	of yellow spring
0000ECE6                            ; ===========================================================================
0000ECE6                            
0000ECE6                            Obj41_Main:				; XREF: Obj41_Index
0000ECE6 5428 0024                  		addq.b	#2,$24(a0)
0000ECEA 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000ECF2 317C 0523 0002             		move.w	#$523,2(a0)
0000ECF8 0028 0004 0001             		ori.b	#4,1(a0)
0000ECFE 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED04 117C 0004 0018             		move.b	#4,$18(a0)
0000ED0A 1028 0028                  		move.b	$28(a0),d0
0000ED0E 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000ED12 6700                       		beq.s	loc_DB54	; if not, branch
0000ED14 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000ED1A 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED20 117C 0003 001A             		move.b	#3,$1A(a0)
0000ED26 317C 0533 0002             		move.w	#$533,2(a0)
0000ED2C 117C 0008 0019             		move.b	#8,$19(a0)
0000ED32                            
0000ED32                            loc_DB54:
0000ED32 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000ED36 6700                       		beq.s	loc_DB66	; if not, branch
0000ED38 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000ED3E 08E8 0001 0022             		bset	#1,$22(a0)
0000ED44                            
0000ED44                            loc_DB66:
0000ED44 0800 0001                  		btst	#1,d0
0000ED48 6700                       		beq.s	loc_DB72
0000ED4A 08E8 0005 0002             		bset	#5,2(a0)
0000ED50                            
0000ED50                            loc_DB72:
0000ED50 0240 000F                  		andi.w	#$F,d0
0000ED54 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000ED5A 4E75                       		rts	
0000ED5C                            ; ===========================================================================
0000ED5C                            
0000ED5C                            Obj41_Up:				; XREF: Obj41_Index
0000ED5C 323C 001B                  		move.w	#$1B,d1
0000ED60 343C 0008                  		move.w	#8,d2
0000ED64 363C 0010                  		move.w	#$10,d3
0000ED68 3828 0008                  		move.w	8(a0),d4
0000ED6C 6100 0000                  		bsr.w	SolidObject
0000ED70 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000ED74 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000ED76 4E75                       		rts	
0000ED78                            ; ===========================================================================
0000ED78                            
0000ED78                            Obj41_BounceUp:				; XREF: Obj41_Up
0000ED78 5428 0024                  		addq.b	#2,$24(a0)
0000ED7C 5069 000C                  		addq.w	#8,$C(a1)
0000ED80 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000ED86 08E9 0001 0022             		bset	#1,$22(a1)
0000ED8C 08A9 0003 0022             		bclr	#3,$22(a1)
0000ED92 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000ED98 137C 0002 0024             		move.b	#2,$24(a1)
0000ED9E 08A8 0003 0022             		bclr	#3,$22(a0)
0000EDA4 4228 0025                  		clr.b	$25(a0)
0000EDA8 303C 00CC                  		move.w	#$CC,d0
0000EDAC 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play spring sound
0000EDB2                            
0000EDB2                            Obj41_AniUp:				; XREF: Obj41_Index
0000EDB2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EDB8 6000 CA78                  		bra.w	AnimateSprite
0000EDBC                            ; ===========================================================================
0000EDBC                            
0000EDBC                            Obj41_ResetUp:				; XREF: Obj41_Index
0000EDBC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EDC2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000EDC6 4E75                       		rts	
0000EDC8                            ; ===========================================================================
0000EDC8                            
0000EDC8                            Obj41_LR:				; XREF: Obj41_Index
0000EDC8 323C 0013                  		move.w	#$13,d1
0000EDCC 343C 000E                  		move.w	#$E,d2
0000EDD0 363C 000F                  		move.w	#$F,d3
0000EDD4 3828 0008                  		move.w	8(a0),d4
0000EDD8 6100 0000                  		bsr.w	SolidObject
0000EDDC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EDE2 6600                       		bne.s	loc_DC0C
0000EDE4 117C 0008 0024             		move.b	#8,$24(a0)
0000EDEA                            
0000EDEA                            loc_DC0C:
0000EDEA 0828 0005 0022             		btst	#5,$22(a0)
0000EDF0 6600                       		bne.s	Obj41_BounceLR
0000EDF2 4E75                       		rts	
0000EDF4                            ; ===========================================================================
0000EDF4                            
0000EDF4                            Obj41_BounceLR:				; XREF: Obj41_LR
0000EDF4 5428 0024                  		addq.b	#2,$24(a0)
0000EDF8 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000EDFE 5069 0008                  		addq.w	#8,8(a1)
0000EE02 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000EE08 6600                       		bne.s	loc_DC36	; if yes, branch
0000EE0A 0469 0010 0008             		subi.w	#$10,8(a1)
0000EE10 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000EE14                            
0000EE14                            loc_DC36:
0000EE14 337C 000F 003E             		move.w	#$F,$3E(a1)
0000EE1A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000EE20 0869 0000 0022             		bchg	#0,$22(a1)
0000EE26 0829 0002 0022             		btst	#2,$22(a1)
0000EE2C 6600                       		bne.s	loc_DC56
0000EE2E 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000EE34                            
0000EE34                            loc_DC56:
0000EE34 08A8 0005 0022             		bclr	#5,$22(a0)
0000EE3A 08A9 0005 0022             		bclr	#5,$22(a1)
0000EE40 303C 00CC                  		move.w	#$CC,d0
0000EE44 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play spring sound
0000EE4A                            
0000EE4A                            Obj41_AniLR:				; XREF: Obj41_Index
0000EE4A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EE50 6000 C9E0                  		bra.w	AnimateSprite
0000EE54                            ; ===========================================================================
0000EE54                            
0000EE54                            Obj41_ResetLR:				; XREF: Obj41_Index
0000EE54 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000EE5A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000EE5E 4E75                       		rts	
0000EE60                            ; ===========================================================================
0000EE60                            
0000EE60                            Obj41_Dwn:				; XREF: Obj41_Index
0000EE60 323C 001B                  		move.w	#$1B,d1
0000EE64 343C 0008                  		move.w	#8,d2
0000EE68 363C 0010                  		move.w	#$10,d3
0000EE6C 3828 0008                  		move.w	8(a0),d4
0000EE70 6100 0000                  		bsr.w	SolidObject
0000EE74 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EE7A 6600                       		bne.s	loc_DCA4
0000EE7C 117C 000E 0024             		move.b	#$E,$24(a0)
0000EE82                            
0000EE82                            loc_DCA4:
0000EE82 4A28 0025                  		tst.b	$25(a0)
0000EE86 6600                       		bne.s	locret_DCAE
0000EE88 4A44                       		tst.w	d4
0000EE8A 6B00                       		bmi.s	Obj41_BounceDwn
0000EE8C                            
0000EE8C                            locret_DCAE:
0000EE8C 4E75                       		rts	
0000EE8E                            ; ===========================================================================
0000EE8E                            
0000EE8E                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000EE8E 5428 0024                  		addq.b	#2,$24(a0)
0000EE92 5169 000C                  		subq.w	#8,$C(a1)
0000EE96 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000EE9C 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000EEA0 08E9 0001 0022             		bset	#1,$22(a1)
0000EEA6 08A9 0003 0022             		bclr	#3,$22(a1)
0000EEAC 137C 0002 0024             		move.b	#2,$24(a1)
0000EEB2 08A8 0003 0022             		bclr	#3,$22(a0)
0000EEB8 4228 0025                  		clr.b	$25(a0)
0000EEBC 303C 00CC                  		move.w	#$CC,d0
0000EEC0 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play spring sound
0000EEC6                            
0000EEC6                            Obj41_AniDwn:				; XREF: Obj41_Index
0000EEC6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EECC 6000 C964                  		bra.w	AnimateSprite
0000EED0                            ; ===========================================================================
0000EED0                            
0000EED0                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000EED0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EED6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000EEDA 4E75                       		rts	
0000EEDC                            ; ===========================================================================
0000EEDC                            Ani_obj41:
0000EEDC                            	include "_anim\obj41.asm"
0000EEDC                            ; ---------------------------------------------------------------------------
0000EEDC                            ; Animation script - springs
0000EEDC                            ; ---------------------------------------------------------------------------
0000EEDC 0000                       		dc.w byte_DD02-Ani_obj41
0000EEDE 0000                       		dc.w byte_DD0E-Ani_obj41
0000EEE0 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000EEEC 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000EEF8                            		even
0000EEF8                            		even
0000EEF8                            
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8                            ; Sprite mappings - springs
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8                            Map_obj41:
0000EEF8                            	include "_maps\obj41.asm"
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8                            ; Sprite mappings - springs
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8 0000                       		dc.w byte_DD26-Map_obj41
0000EEFA 0000                       		dc.w byte_DD31-Map_obj41
0000EEFC 0000                       		dc.w byte_DD37-Map_obj41
0000EEFE 0000                       		dc.w byte_DD47-Map_obj41
0000EF00 0000                       		dc.w byte_DD4D-Map_obj41
0000EF02 0000                       		dc.w byte_DD53-Map_obj41
0000EF04 02                         byte_DD26:	dc.b 2
0000EF05 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000EF0A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000EF0F 01                         byte_DD31:	dc.b 1
0000EF10 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000EF15 03                         byte_DD37:	dc.b 3
0000EF16 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000EF1B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EF20 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000EF25 01                         byte_DD47:	dc.b 1
0000EF26 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000EF2B 01                         byte_DD4D:	dc.b 1
0000EF2C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000EF31 04                         byte_DD53:	dc.b 4
0000EF32 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000EF37 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000EF3C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000EF41 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EF46                            		even
0000EF46                            		even
0000EF46                            
0000EF46                            ; ===========================================================================
0000EF46                            ; ---------------------------------------------------------------------------
0000EF46                            ; Object 42 - Newtron enemy (GHZ)
0000EF46                            ; ---------------------------------------------------------------------------
0000EF46                            
0000EF46                            Obj42:					; XREF: Obj_Index
0000EF46 7000                       		moveq	#0,d0
0000EF48 1028 0024                  		move.b	$24(a0),d0
0000EF4C 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EF50 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EF54                            ; ===========================================================================
0000EF54 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EF56 0000                       		dc.w Obj42_Action-Obj42_Index
0000EF58 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EF5A                            ; ===========================================================================
0000EF5A                            
0000EF5A                            Obj42_Main:				; XREF: Obj42_Index
0000EF5A 5428 0024                  		addq.b	#2,$24(a0)
0000EF5E 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EF66 317C 049B 0002             		move.w	#$49B,2(a0)
0000EF6C 117C 0004 0001             		move.b	#4,1(a0)
0000EF72 117C 0004 0018             		move.b	#4,$18(a0)
0000EF78 117C 0014 0019             		move.b	#$14,$19(a0)
0000EF7E 117C 0010 0016             		move.b	#$10,$16(a0)
0000EF84 117C 0008 0017             		move.b	#8,$17(a0)
0000EF8A                            
0000EF8A                            Obj42_Action:				; XREF: Obj42_Index
0000EF8A 7000                       		moveq	#0,d0
0000EF8C 1028 0025                  		move.b	$25(a0),d0
0000EF90 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EF94 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EF98 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EF9E 6100 C892                  		bsr.w	AnimateSprite
0000EFA2 6000 0000                  		bra.w	MarkObjGone
0000EFA6                            ; ===========================================================================
0000EFA6 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EFA8 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EFAA 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EFAC 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EFAE 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EFB0                            ; ===========================================================================
0000EFB0                            
0000EFB0                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EFB0 08E8 0000 0022             		bset	#0,$22(a0)
0000EFB6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFBA 9068 0008                  		sub.w	8(a0),d0
0000EFBE 6400                       		bcc.s	loc_DDEA
0000EFC0 4440                       		neg.w	d0
0000EFC2 08A8 0000 0022             		bclr	#0,$22(a0)
0000EFC8                            
0000EFC8                            loc_DDEA:
0000EFC8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EFCC 6400                       		bcc.s	locret_DE12	; if not, branch
0000EFCE 5428 0025                  		addq.b	#2,$25(a0)
0000EFD2 117C 0001 001C             		move.b	#1,$1C(a0)
0000EFD8 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EFDC 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EFDE 317C 249B 0002             		move.w	#$249B,2(a0)
0000EFE4 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EFEA 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EFF0                            
0000EFF0                            locret_DE12:
0000EFF0 4E75                       		rts	
0000EFF2                            ; ===========================================================================
0000EFF2                            
0000EFF2                            Obj42_Type00:				; XREF: Obj42_Index2
0000EFF2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EFF8 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EFFA 08E8 0000 0022             		bset	#0,$22(a0)
0000F000 3038 D008                  		move.w	($FFFFD008).w,d0
0000F004 9068 0008                  		sub.w	8(a0),d0
0000F008 6400                       		bcc.s	locret_DE32
0000F00A 08A8 0000 0022             		bclr	#0,$22(a0)
0000F010                            
0000F010                            locret_DE32:
0000F010 4E75                       		rts	
0000F012                            ; ===========================================================================
0000F012                            
0000F012                            Obj42_Fall:				; XREF: Obj42_Type00
0000F012 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F018 6600                       		bne.s	loc_DE42
0000F01A 117C 000C 0020             		move.b	#$C,$20(a0)
0000F020                            
0000F020                            loc_DE42:
0000F020 6100 F72A                  		bsr.w	ObjectFall
0000F024 6100 0000                  		bsr.w	ObjHitFloor
0000F028 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F02A 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F02C D368 000C                  		add.w	d1,$C(a0)
0000F030 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F036 5428 0025                  		addq.b	#2,$25(a0)
0000F03A 117C 0002 001C             		move.b	#2,$1C(a0)
0000F040 0828 0005 0002             		btst	#5,2(a0)
0000F046 6700                       		beq.s	Obj42_Move
0000F048 5228 001C                  		addq.b	#1,$1C(a0)
0000F04C                            
0000F04C                            Obj42_Move:
0000F04C 117C 000D 0020             		move.b	#$D,$20(a0)
0000F052 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F058 0828 0000 0022             		btst	#0,$22(a0)
0000F05E 6600                       		bne.s	locret_DE86
0000F060 4468 0010                  		neg.w	$10(a0)
0000F064                            
0000F064                            locret_DE86:
0000F064 4E75                       		rts	
0000F066                            ; ===========================================================================
0000F066                            
0000F066                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F066 6100 F756                  		bsr.w	SpeedToPos
0000F06A 6100 0000                  		bsr.w	ObjHitFloor
0000F06E 0C41 FFF8                  		cmpi.w	#-8,d1
0000F072 6D00                       		blt.s	loc_DEA2
0000F074 0C41 000C                  		cmpi.w	#$C,d1
0000F078 6C00                       		bge.s	loc_DEA2
0000F07A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F07E 4E75                       		rts	
0000F080                            ; ===========================================================================
0000F080                            
0000F080                            loc_DEA2:
0000F080 5428 0025                  		addq.b	#2,$25(a0)
0000F084 4E75                       		rts	
0000F086                            ; ===========================================================================
0000F086                            
0000F086                            Obj42_Speed:				; XREF: Obj42_Index2
0000F086 6100 F736                  		bsr.w	SpeedToPos
0000F08A 4E75                       		rts	
0000F08C                            ; ===========================================================================
0000F08C                            
0000F08C                            Obj42_Type01:				; XREF: Obj42_Index2
0000F08C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F092 6600                       		bne.s	Obj42_FireMissile
0000F094 117C 000C 0020             		move.b	#$C,$20(a0)
0000F09A                            
0000F09A                            Obj42_FireMissile:
0000F09A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F0A0 6600                       		bne.s	locret_DF14
0000F0A2 4A28 0032                  		tst.b	$32(a0)
0000F0A6 6600                       		bne.s	locret_DF14
0000F0A8 117C 0001 0032             		move.b	#1,$32(a0)
0000F0AE 6100 FBBA                  		bsr.w	SingleObjLoad
0000F0B2 6600                       		bne.s	locret_DF14
0000F0B4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F0B8 3368 0008 0008             		move.w	8(a0),8(a1)
0000F0BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F0C4 5169 000C                  		subq.w	#8,$C(a1)
0000F0C8 337C 0200 0010             		move.w	#$200,$10(a1)
0000F0CE 303C 0014                  		move.w	#$14,d0
0000F0D2 0828 0000 0022             		btst	#0,$22(a0)
0000F0D8 6600                       		bne.s	loc_DF04
0000F0DA 4440                       		neg.w	d0
0000F0DC 4469 0010                  		neg.w	$10(a1)
0000F0E0                            
0000F0E0                            loc_DF04:
0000F0E0 D169 0008                  		add.w	d0,8(a1)
0000F0E4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F0EA 137C 0001 0028             		move.b	#1,$28(a1)
0000F0F0                            
0000F0F0                            locret_DF14:
0000F0F0 4E75                       		rts	
0000F0F2                            ; ===========================================================================
0000F0F2                            
0000F0F2                            Obj42_Delete:				; XREF: Obj42_Index
0000F0F2 6000 F72C                  		bra.w	DeleteObject
0000F0F6                            ; ===========================================================================
0000F0F6                            Ani_obj42:
0000F0F6                            	include "_anim\obj42.asm"
0000F0F6                            ; ---------------------------------------------------------------------------
0000F0F6                            ; Animation script - Newtron enemy
0000F0F6                            ; ---------------------------------------------------------------------------
0000F0F6 0000                       		dc.w byte_DF24-Ani_obj42
0000F0F8 0000                       		dc.w byte_DF28-Ani_obj42
0000F0FA 0000                       		dc.w byte_DF30-Ani_obj42
0000F0FC 0000                       		dc.w byte_DF34-Ani_obj42
0000F0FE 0000                       		dc.w byte_DF38-Ani_obj42
0000F100 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F104 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F10C 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F110 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F114 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F11E                            		even
0000F11E                            		even
0000F11E                            
0000F11E                            ; ---------------------------------------------------------------------------
0000F11E                            ; Sprite mappings - Newtron enemy (GHZ)
0000F11E                            ; ---------------------------------------------------------------------------
0000F11E                            Map_obj42:
0000F11E                            	include "_maps\obj42.asm"
0000F11E                            ; ---------------------------------------------------------------------------
0000F11E                            ; Sprite mappings - Newtron enemy (GHZ)
0000F11E                            ; ---------------------------------------------------------------------------
0000F11E 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F122 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F126 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F12A 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F12E 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F132 0000                       		dc.w byte_DFF8-Map_obj42
0000F134 03                         byte_DF58:	dc.b 3
0000F135 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F13A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F13F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F144 03                         byte_DF68:	dc.b 3
0000F145 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F14A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F14F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F154 03                         byte_DF78:	dc.b 3
0000F155 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F15A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F15F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F164 04                         byte_DF88:	dc.b 4
0000F165 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F16A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F16F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F174 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F179 03                         byte_DF9D:	dc.b 3
0000F17A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F17F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F184 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F189 02                         byte_DFAD:	dc.b 2
0000F18A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F18F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F194 03                         byte_DFB8:	dc.b 3
0000F195 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F19A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F19F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F1A4 03                         byte_DFC8:	dc.b 3
0000F1A5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F1AA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F1AF FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F1B4 03                         byte_DFD8:	dc.b 3
0000F1B5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F1BA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F1BF FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F1C4 03                         byte_DFE8:	dc.b 3
0000F1C5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F1CA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F1CF FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F1D4 00                         byte_DFF8:	dc.b 0
0000F1D6 00                         		even
0000F1D6 00                         		even
0000F1D6                            
0000F1D6                            ; ===========================================================================
0000F1D6                            ; ---------------------------------------------------------------------------
0000F1D6                            ; Object 43 - Roller enemy (SYZ)
0000F1D6                            ; ---------------------------------------------------------------------------
0000F1D6                            
0000F1D6                            Obj43:					; XREF: Obj_Index
0000F1D6 7000                       		moveq	#0,d0
0000F1D8 1028 0024                  		move.b	$24(a0),d0
0000F1DC 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F1E0 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F1E4                            ; ===========================================================================
0000F1E4 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F1E6 0000                       		dc.w Obj43_Action-Obj43_Index
0000F1E8                            ; ===========================================================================
0000F1E8                            
0000F1E8                            Obj43_Main:				; XREF: Obj43_Index
0000F1E8 117C 000E 0016             		move.b	#$E,$16(a0)
0000F1EE 117C 0008 0017             		move.b	#8,$17(a0)
0000F1F4 6100 F556                  		bsr.w	ObjectFall
0000F1F8 6100 0000                  		bsr.w	ObjHitFloor
0000F1FC 4A41                       		tst.w	d1
0000F1FE 6A00                       		bpl.s	locret_E052
0000F200 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F204 317C 0000 0012             		move.w	#0,$12(a0)
0000F20A 5428 0024                  		addq.b	#2,$24(a0)
0000F20E 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F216 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F21C 117C 0004 0001             		move.b	#4,1(a0)
0000F222 117C 0004 0018             		move.b	#4,$18(a0)
0000F228 117C 0010 0019             		move.b	#$10,$19(a0)
0000F22E                            
0000F22E                            locret_E052:
0000F22E 4E75                       		rts	
0000F230                            ; ===========================================================================
0000F230                            
0000F230                            Obj43_Action:				; XREF: Obj43_Index
0000F230 7000                       		moveq	#0,d0
0000F232 1028 0025                  		move.b	$25(a0),d0
0000F236 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F23A 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F23E 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F244 6100 C5EC                  		bsr.w	AnimateSprite
0000F248 3028 0008                  		move.w	8(a0),d0
0000F24C 0240 FF80                  		andi.w	#$FF80,d0
0000F250 3238 F700                  		move.w	($FFFFF700).w,d1
0000F254 0441 0080                  		subi.w	#$80,d1
0000F258 0241 FF80                  		andi.w	#$FF80,d1
0000F25C 9041                       		sub.w	d1,d0
0000F25E 0C40 0280                  		cmpi.w	#$280,d0
0000F262 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F266 6000 F57C                  		bra.w	DisplaySprite
0000F26A                            ; ===========================================================================
0000F26A                            
0000F26A                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F26A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F26E 7000                       		moveq	#0,d0
0000F270 1028 0023                  		move.b	$23(a0),d0
0000F274 6700                       		beq.s	Obj43_Delete
0000F276 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F27C                            
0000F27C                            Obj43_Delete:
0000F27C 6000 F5A2                  		bra.w	DeleteObject
0000F280                            ; ===========================================================================
0000F280 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F282 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F284 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F286 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F288                            ; ===========================================================================
0000F288                            
0000F288                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F288 3038 D008                  		move.w	($FFFFD008).w,d0
0000F28C 0440 0100                  		subi.w	#$100,d0
0000F290 6500                       		bcs.s	loc_E0D2
0000F292 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F296 6500                       		bcs.s	loc_E0D2
0000F298 5828 0025                  		addq.b	#4,$25(a0)
0000F29C 117C 0002 001C             		move.b	#2,$1C(a0)
0000F2A2 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F2A8 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F2AE                            
0000F2AE                            loc_E0D2:
0000F2AE 588F                       		addq.l	#4,sp
0000F2B0 4E75                       		rts	
0000F2B2                            ; ===========================================================================
0000F2B2                            
0000F2B2                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F2B2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F2B8 6700                       		beq.s	loc_E0F8
0000F2BA 5368 0030                  		subq.w	#1,$30(a0)
0000F2BE 6A00                       		bpl.s	locret_E0F6
0000F2C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F2C6 317C 0700 0010             		move.w	#$700,$10(a0)
0000F2CC 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F2D2                            
0000F2D2                            locret_E0F6:
0000F2D2 4E75                       		rts	
0000F2D4                            ; ===========================================================================
0000F2D4                            
0000F2D4                            loc_E0F8:
0000F2D4 5428 0025                  		addq.b	#2,$25(a0)
0000F2D8 4E75                       		rts	
0000F2DA                            ; ===========================================================================
0000F2DA                            
0000F2DA                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F2DA 6100 0000                  		bsr.w	Obj43_Stop
0000F2DE 6100 F4DE                  		bsr.w	SpeedToPos
0000F2E2 6100 0000                  		bsr.w	ObjHitFloor
0000F2E6 0C41 FFF8                  		cmpi.w	#-8,d1
0000F2EA 6D00                       		blt.s	Obj43_Jump
0000F2EC 0C41 000C                  		cmpi.w	#$C,d1
0000F2F0 6C00                       		bge.s	Obj43_Jump
0000F2F2 D368 000C                  		add.w	d1,$C(a0)
0000F2F6 4E75                       		rts	
0000F2F8                            ; ===========================================================================
0000F2F8                            
0000F2F8                            Obj43_Jump:
0000F2F8 5428 0025                  		addq.b	#2,$25(a0)
0000F2FC 08E8 0000 0032             		bset	#0,$32(a0)
0000F302 6700                       		beq.s	locret_E12E
0000F304 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F30A                            
0000F30A                            locret_E12E:
0000F30A 4E75                       		rts	
0000F30C                            ; ===========================================================================
0000F30C                            
0000F30C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F30C 6100 F43E                  		bsr.w	ObjectFall
0000F310 4A68 0012                  		tst.w	$12(a0)
0000F314 6B00                       		bmi.s	locret_E150
0000F316 6100 0000                  		bsr.w	ObjHitFloor
0000F31A 4A41                       		tst.w	d1
0000F31C 6A00                       		bpl.s	locret_E150
0000F31E D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F322 5528 0025                  		subq.b	#2,$25(a0)
0000F326 317C 0000 0012             		move.w	#0,$12(a0)
0000F32C                            
0000F32C                            locret_E150:
0000F32C 4E75                       		rts	
0000F32E                            
0000F32E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F32E                            
0000F32E                            
0000F32E                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F32E 4A28 0032                  		tst.b	$32(a0)
0000F332 6B00                       		bmi.s	locret_E188
0000F334 3038 D008                  		move.w	($FFFFD008).w,d0
0000F338 0440 0030                  		subi.w	#$30,d0
0000F33C 9068 0008                  		sub.w	8(a0),d0
0000F340 6400                       		bcc.s	locret_E188
0000F342 117C 0000 001C             		move.b	#0,$1C(a0)
0000F348 117C 000E 0020             		move.b	#$E,$20(a0)
0000F34E 4268 0010                  		clr.w	$10(a0)
0000F352 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F358 117C 0002 0025             		move.b	#2,$25(a0)
0000F35E 08E8 0007 0032             		bset	#7,$32(a0)
0000F364                            
0000F364                            locret_E188:
0000F364 4E75                       		rts	
0000F366                            ; End of function Obj43_Stop
0000F366                            
0000F366                            ; ===========================================================================
0000F366                            Ani_obj43:
0000F366                            	include "_anim\obj43.asm"
0000F366                            ; ---------------------------------------------------------------------------
0000F366                            ; Animation script - Roller enemy
0000F366                            ; ---------------------------------------------------------------------------
0000F366 0000                       		dc.w byte_E190-Ani_obj43
0000F368 0000                       		dc.w byte_E196-Ani_obj43
0000F36A 0000                       		dc.w byte_E19C-Ani_obj43
0000F36C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F372 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F378 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F37E 00                         		even
0000F37E 00                         		even
0000F37E                            
0000F37E                            ; ---------------------------------------------------------------------------
0000F37E                            ; Sprite mappings - Roller enemy (SYZ)
0000F37E                            ; ---------------------------------------------------------------------------
0000F37E                            Map_obj43:
0000F37E                            	include "_maps\obj43.asm"
0000F37E                            Map_61da:
0000F37E 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000F380 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000F382 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000F384 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000F386 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000F388 02                         Map_61da_A: 	dc.b $2
0000F389 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000F38E F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000F393 02                         Map_61da_15: 	dc.b $2
0000F394 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000F399 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000F39E 01                         Map_61da_20: 	dc.b $1
0000F39F F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000F3A4 01                         Map_61da_26: 	dc.b $1
0000F3A5 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000F3AA 01                         Map_61da_2C: 	dc.b $1
0000F3AB F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000F3B0                            	even
0000F3B0                            	even
0000F3B0                            
0000F3B0                            ; ===========================================================================
0000F3B0                            ; ---------------------------------------------------------------------------
0000F3B0                            ; Object 44 - walls (GHZ)
0000F3B0                            ; ---------------------------------------------------------------------------
0000F3B0                            
0000F3B0                            Obj44:					; XREF: Obj_Index
0000F3B0 7000                       		moveq	#0,d0
0000F3B2 1028 0024                  		move.b	$24(a0),d0
0000F3B6 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000F3BA 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000F3BE                            ; ===========================================================================
0000F3BE 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000F3C0 0000                       		dc.w Obj44_Solid-Obj44_Index
0000F3C2 0000                       		dc.w Obj44_Display-Obj44_Index
0000F3C4                            ; ===========================================================================
0000F3C4                            
0000F3C4                            Obj44_Main:				; XREF: Obj44_Index
0000F3C4 5428 0024                  		addq.b	#2,$24(a0)
0000F3C8 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000F3D0 317C 434C 0002             		move.w	#$434C,2(a0)
0000F3D6 0028 0004 0001             		ori.b	#4,1(a0)
0000F3DC 117C 0008 0019             		move.b	#8,$19(a0)
0000F3E2 117C 0006 0018             		move.b	#6,$18(a0)
0000F3E8 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000F3EE 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000F3F4 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000F3F6 5428 0024                  		addq.b	#2,$24(a0)
0000F3FA 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000F3FC                            ; ===========================================================================
0000F3FC                            
0000F3FC                            Obj44_Solid:				; XREF: Obj44_Index
0000F3FC 323C 0013                  		move.w	#$13,d1
0000F400 343C 0028                  		move.w	#$28,d2
0000F404 6100 A684                  		bsr.w	Obj44_SolidWall
0000F408                            
0000F408                            Obj44_Display:				; XREF: Obj44_Index
0000F408 6100 F3DA                  		bsr.w	DisplaySprite
0000F40C 3028 0008                  		move.w	8(a0),d0
0000F410 0240 FF80                  		andi.w	#$FF80,d0
0000F414 3238 F700                  		move.w	($FFFFF700).w,d1
0000F418 0441 0080                  		subi.w	#$80,d1
0000F41C 0241 FF80                  		andi.w	#$FF80,d1
0000F420 9041                       		sub.w	d1,d0
0000F422 0C40 0280                  		cmpi.w	#$280,d0
0000F426 6200 F3F8                  		bhi.w	DeleteObject
0000F42A 4E75                       		rts	
0000F42C                            ; ===========================================================================
0000F42C                            ; ---------------------------------------------------------------------------
0000F42C                            ; Sprite mappings - walls (GHZ)
0000F42C                            ; ---------------------------------------------------------------------------
0000F42C                            Map_obj44:
0000F42C                            	include "_maps\obj44.asm"
0000F42C                            ; ---------------------------------------------------------------------------
0000F42C                            ; Sprite mappings - walls (GHZ)
0000F42C                            ; ---------------------------------------------------------------------------
0000F42C 0000                       		dc.w byte_E256-Map_obj44
0000F42E 0000                       		dc.w byte_E26B-Map_obj44
0000F430 0000                       		dc.w byte_E280-Map_obj44
0000F432 04                         byte_E256:	dc.b 4
0000F433 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000F438 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F43D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F442 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F447 04                         byte_E26B:	dc.b 4
0000F448 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000F44D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F452 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F457 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F45C 04                         byte_E280:	dc.b 4
0000F45D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000F462 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000F467 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000F46C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000F472 00                         		even
0000F472 00                         		even
0000F472                            
0000F472                            ; ===========================================================================
0000F472                            ; ---------------------------------------------------------------------------
0000F472                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000F472                            ; ---------------------------------------------------------------------------
0000F472                            
0000F472                            Obj13:					; XREF: Obj_Index
0000F472 7000                       		moveq	#0,d0
0000F474 1028 0024                  		move.b	$24(a0),d0
0000F478 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000F47C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000F480 6000 0000                  		bra.w	Obj14_ChkDel
0000F484                            ; ===========================================================================
0000F484 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000F486 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000F488                            ; ---------------------------------------------------------------------------
0000F488                            ;
0000F488                            ; Lava ball production rates
0000F488                            ;
0000F488 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000F48E                            ; ===========================================================================
0000F48E                            
0000F48E                            Obj13_Main:				; XREF: Obj13_Index
0000F48E 5428 0024                  		addq.b	#2,$24(a0)
0000F492 1028 0028                  		move.b	$28(a0),d0
0000F496 E848                       		lsr.w	#4,d0
0000F498 0240 000F                  		andi.w	#$F,d0
0000F49C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000F4A2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000F4A8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000F4AE                            
0000F4AE                            Obj13_MakeLava:				; XREF: Obj13_Index
0000F4AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000F4B2 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000F4B4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000F4BA 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000F4BE 6600                       		bne.s	locret_E302
0000F4C0 6100 F7A8                  		bsr.w	SingleObjLoad
0000F4C4 6600                       		bne.s	locret_E302
0000F4C6 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000F4CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4D6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4DC                            
0000F4DC                            locret_E302:
0000F4DC 4E75                       		rts	
0000F4DE                            ; ===========================================================================
0000F4DE                            ; ---------------------------------------------------------------------------
0000F4DE                            ; Object 14 - lava balls (MZ, SLZ)
0000F4DE                            ; ---------------------------------------------------------------------------
0000F4DE                            
0000F4DE                            Obj14:					; XREF: Obj_Index
0000F4DE 7000                       		moveq	#0,d0
0000F4E0 1028 0024                  		move.b	$24(a0),d0
0000F4E4 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000F4E8 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000F4EC 6000 F2F6                  		bra.w	DisplaySprite
0000F4F0                            ; ===========================================================================
0000F4F0 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000F4F2 0000                       		dc.w Obj14_Action-Obj14_Index
0000F4F4 0000                       		dc.w Obj14_Delete-Obj14_Index
0000F4F6                            
0000F4F6 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000F500 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000F508                            ; ===========================================================================
0000F508                            
0000F508                            Obj14_Main:				; XREF: Obj14_Index
0000F508 5428 0024                  		addq.b	#2,$24(a0)
0000F50C 117C 0008 0016             		move.b	#8,$16(a0)
0000F512 117C 0008 0017             		move.b	#8,$17(a0)
0000F518 217C 0000 C430 0004        		move.l	#Map_obj14,4(a0)
0000F520 317C 0345 0002             		move.w	#$345,2(a0)
0000F526 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F52C 6600                       		bne.s	loc_E35A
0000F52E 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000F534                            
0000F534                            loc_E35A:
0000F534 117C 0004 0001             		move.b	#4,1(a0)
0000F53A 117C 0003 0018             		move.b	#3,$18(a0)
0000F540 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F546 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F54C 4A28 0029                  		tst.b	$29(a0)
0000F550 6700                       		beq.s	Obj14_SetSpeed
0000F552 5428 0018                  		addq.b	#2,$18(a0)
0000F556                            
0000F556                            Obj14_SetSpeed:
0000F556 7000                       		moveq	#0,d0
0000F558 1028 0028                  		move.b	$28(a0),d0
0000F55C D040                       		add.w	d0,d0
0000F55E 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F564 117C 0008 0019             		move.b	#8,$19(a0)
0000F56A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F570 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F572 117C 0010 0019             		move.b	#$10,$19(a0)
0000F578 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F57E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F584 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F58A                            
0000F58A                            Obj14_PlaySnd:
0000F58A 303C 00AE                  		move.w	#$AE,d0
0000F58E 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F594                            
0000F594                            Obj14_Action:				; XREF: Obj14_Index
0000F594 7000                       		moveq	#0,d0
0000F596 1028 0028                  		move.b	$28(a0),d0
0000F59A D040                       		add.w	d0,d0
0000F59C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F5A0 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F5A4 6100 F218                  		bsr.w	SpeedToPos
0000F5A8 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F5AE 6100 C282                  		bsr.w	AnimateSprite
0000F5B2                            
0000F5B2                            Obj14_ChkDel:				; XREF: Obj13
0000F5B2 3028 0008                  		move.w	8(a0),d0
0000F5B6 0240 FF80                  		andi.w	#$FF80,d0
0000F5BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5BE 0441 0080                  		subi.w	#$80,d1
0000F5C2 0241 FF80                  		andi.w	#$FF80,d1
0000F5C6 9041                       		sub.w	d1,d0
0000F5C8 0C40 0280                  		cmpi.w	#$280,d0
0000F5CC 6200 F252                  		bhi.w	DeleteObject
0000F5D0 4E75                       		rts	
0000F5D2                            ; ===========================================================================
0000F5D2 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F5D6 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F5DA 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F5DE 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F5E2 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F5E4                            ; ===========================================================================
0000F5E4                            ; lavaball types 00-03 fly up and fall back down
0000F5E4                            
0000F5E4                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F5E4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F5EA 3028 0030                  		move.w	$30(a0),d0
0000F5EE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F5F2 6400                       		bcc.s	loc_E41E	; if not, branch
0000F5F4 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F5F8                            
0000F5F8                            loc_E41E:
0000F5F8 08A8 0001 0022             		bclr	#1,$22(a0)
0000F5FE 4A68 0012                  		tst.w	$12(a0)
0000F602 6A00                       		bpl.s	locret_E430
0000F604 08E8 0001 0022             		bset	#1,$22(a0)
0000F60A                            
0000F60A                            locret_E430:
0000F60A 4E75                       		rts	
0000F60C                            ; ===========================================================================
0000F60C                            ; lavaball type	04 flies up until it hits the ceiling
0000F60C                            
0000F60C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F60C 08E8 0001 0022             		bset	#1,$22(a0)
0000F612 6100 0000                  		bsr.w	ObjHitCeiling
0000F616 4A41                       		tst.w	d1
0000F618 6A00                       		bpl.s	locret_E452
0000F61A 117C 0008 0028             		move.b	#8,$28(a0)
0000F620 117C 0001 001C             		move.b	#1,$1C(a0)
0000F626 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F62C                            
0000F62C                            locret_E452:
0000F62C 4E75                       		rts	
0000F62E                            ; ===========================================================================
0000F62E                            ; lavaball type	05 falls down until it hits the	floor
0000F62E                            
0000F62E                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F62E 08A8 0001 0022             		bclr	#1,$22(a0)
0000F634 6100 0000                  		bsr.w	ObjHitFloor
0000F638 4A41                       		tst.w	d1
0000F63A 6A00                       		bpl.s	locret_E474
0000F63C 117C 0008 0028             		move.b	#8,$28(a0)
0000F642 117C 0001 001C             		move.b	#1,$1C(a0)
0000F648 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F64E                            
0000F64E                            locret_E474:
0000F64E 4E75                       		rts	
0000F650                            ; ===========================================================================
0000F650                            ; lavaball types 06-07 move sideways
0000F650                            
0000F650                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F650 08E8 0000 0022             		bset	#0,$22(a0)
0000F656 76F8                       		moveq	#-8,d3
0000F658 6100 0000                  		bsr.w	ObjHitWallLeft
0000F65C 4A41                       		tst.w	d1
0000F65E 6A00                       		bpl.s	locret_E498
0000F660 117C 0008 0028             		move.b	#8,$28(a0)
0000F666 117C 0003 001C             		move.b	#3,$1C(a0)
0000F66C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F672                            
0000F672                            locret_E498:
0000F672 4E75                       		rts	
0000F674                            ; ===========================================================================
0000F674                            
0000F674                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F674 08A8 0000 0022             		bclr	#0,$22(a0)
0000F67A 7608                       		moveq	#8,d3
0000F67C 6100 0000                  		bsr.w	ObjHitWallRight
0000F680 4A41                       		tst.w	d1
0000F682 6A00                       		bpl.s	locret_E4BC
0000F684 117C 0008 0028             		move.b	#8,$28(a0)
0000F68A 117C 0003 001C             		move.b	#3,$1C(a0)
0000F690 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F696                            
0000F696                            locret_E4BC:
0000F696 4E75                       		rts	
0000F698                            ; ===========================================================================
0000F698                            
0000F698                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F698 4E75                       		rts	
0000F69A                            ; ===========================================================================
0000F69A                            
0000F69A                            Obj14_Delete:				; XREF: Obj14_Index
0000F69A 6000 F184                  		bra.w	DeleteObject
0000F69E                            ; ===========================================================================
0000F69E                            Ani_obj14:
0000F69E                            	include "_anim\obj14.asm"
0000F69E                            ; ---------------------------------------------------------------------------
0000F69E                            ; Animation script - lava balls
0000F69E                            ; ---------------------------------------------------------------------------
0000F69E 0000                       		dc.w byte_E4CC-Ani_obj14
0000F6A0 0000                       		dc.w byte_E4D2-Ani_obj14
0000F6A2 0000                       		dc.w byte_E4D6-Ani_obj14
0000F6A4 0000                       		dc.w byte_E4DC-Ani_obj14
0000F6A6 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F6AC 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F6B0 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F6B6 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F6BA                            		even
0000F6BA                            		even
0000F6BA                            
0000F6BA                            ; ===========================================================================
0000F6BA                            ; ---------------------------------------------------------------------------
0000F6BA                            ; Object 6D - flame thrower (SBZ)
0000F6BA                            ; ---------------------------------------------------------------------------
0000F6BA                            
0000F6BA                            Obj6D:					; XREF: Obj_Index
0000F6BA 7000                       		moveq	#0,d0
0000F6BC 1028 0024                  		move.b	$24(a0),d0
0000F6C0 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F6C4 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F6C8                            ; ===========================================================================
0000F6C8 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F6CA 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F6CC                            ; ===========================================================================
0000F6CC                            
0000F6CC                            Obj6D_Main:				; XREF: Obj6D_Index
0000F6CC 5428 0024                  		addq.b	#2,$24(a0)
0000F6D0 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F6D8 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F6DE 0028 0004 0001             		ori.b	#4,1(a0)
0000F6E4 117C 0001 0018             		move.b	#1,$18(a0)
0000F6EA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F6F0 117C 000C 0019             		move.b	#$C,$19(a0)
0000F6F6 1028 0028                  		move.b	$28(a0),d0
0000F6FA 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F6FE D040                       		add.w	d0,d0		; multiply by 2
0000F700 3140 0030                  		move.w	d0,$30(a0)
0000F704 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F708 1028 0028                  		move.b	$28(a0),d0
0000F70C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F710 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F712 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F716 117C 000A 0036             		move.b	#$A,$36(a0)
0000F71C 0828 0001 0022             		btst	#1,$22(a0)
0000F722 6700                       		beq.s	Obj6D_Action
0000F724 117C 0002 001C             		move.b	#2,$1C(a0)
0000F72A 117C 0015 0036             		move.b	#$15,$36(a0)
0000F730                            
0000F730                            Obj6D_Action:				; XREF: Obj6D_Index
0000F730 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F734 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F736 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F73C 0868 0000 001C             		bchg	#0,$1C(a0)
0000F742 6700                       		beq.s	loc_E57A
0000F744 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F74A 303C 00B3                  		move.w	#$B3,d0
0000F74E 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play flame sound
0000F754                            
0000F754                            loc_E57A:
0000F754 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F75A 6100 C0D6                  		bsr.w	AnimateSprite
0000F75E 117C 0000 0020             		move.b	#0,$20(a0)
0000F764 1028 0036                  		move.b	$36(a0),d0
0000F768 B028 001A                  		cmp.b	$1A(a0),d0
0000F76C 6600                       		bne.s	Obj6D_ChkDel
0000F76E 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F774                            
0000F774                            Obj6D_ChkDel:
0000F774 3028 0008                  		move.w	8(a0),d0
0000F778 0240 FF80                  		andi.w	#$FF80,d0
0000F77C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F780 0441 0080                  		subi.w	#$80,d1
0000F784 0241 FF80                  		andi.w	#$FF80,d1
0000F788 9041                       		sub.w	d1,d0
0000F78A 0C40 0280                  		cmpi.w	#$280,d0
0000F78E 6200 F090                  		bhi.w	DeleteObject
0000F792 6000 F050                  		bra.w	DisplaySprite
0000F796                            ; ===========================================================================
0000F796                            Ani_obj6D:
0000F796                            	include "_anim\obj6D.asm"
0000F796                            ; ---------------------------------------------------------------------------
0000F796                            ; Animation script - flamethrower (SBZ)
0000F796                            ; ---------------------------------------------------------------------------
0000F796 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F798 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F79A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F79C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F79E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F7AC 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F7B6 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F7C4 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F7CE                            		even
0000F7CE                            		even
0000F7CE                            
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE                            ; Sprite mappings - flame thrower (SBZ)
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE                            Map_obj6D:
0000F7CE                            	include "_maps\obj6D.asm"
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE                            ; Sprite mappings - flame thrower (SBZ)
0000F7CE                            ; ---------------------------------------------------------------------------
0000F7CE 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F7D2 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F7D6 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F7DA 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F7DE 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F7E2 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F7E6 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F7EA 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F7EE 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F7F2 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F7F6 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F7FA 01                         byte_E620:	dc.b 1
0000F7FB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F800 02                         byte_E626:	dc.b 2
0000F801 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F806 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F80B 02                         byte_E631:	dc.b 2
0000F80C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F811 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F816 03                         byte_E63C:	dc.b 3
0000F817 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F81C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F821 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F826 03                         byte_E64C:	dc.b 3
0000F827 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F82C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F831 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F836 04                         byte_E65C:	dc.b 4
0000F837 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F83C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F841 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F846 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F84B 04                         byte_E671:	dc.b 4
0000F84C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F851 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F856 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F85B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F860 05                         byte_E686:	dc.b 5
0000F861 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F866 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F86B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F870 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F875 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F87A 05                         byte_E6A0:	dc.b 5
0000F87B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F880 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F885 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F88A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F88F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F894 06                         byte_E6BA:	dc.b 6
0000F895 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F89A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F89F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8A4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F8A9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8AE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8B3 06                         byte_E6D9:	dc.b 6
0000F8B4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F8B9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F8BE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F8C3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8C8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8CD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8D2 01                         byte_E6F8:	dc.b 1
0000F8D3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8D8 02                         byte_E6FE:	dc.b 2
0000F8D9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8DE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8E3 02                         byte_E709:	dc.b 2
0000F8E4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8E9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8EE 03                         byte_E714:	dc.b 3
0000F8EF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F8F4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8F9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8FE 03                         byte_E724:	dc.b 3
0000F8FF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F904 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F909 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F90E 04                         byte_E734:	dc.b 4
0000F90F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F914 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F919 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F91E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F923 04                         byte_E749:	dc.b 4
0000F924 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F929 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F92E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F933 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F938 05                         byte_E75E:	dc.b 5
0000F939 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F93E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F943 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F948 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F94D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F952 05                         byte_E778:	dc.b 5
0000F953 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F958 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F95D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F962 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F967 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F96C 06                         byte_E792:	dc.b 6
0000F96D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F972 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F977 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F97C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F981 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F986 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F98B 06                         byte_E7B1:	dc.b 6
0000F98C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F991 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F996 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F99B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F9A0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F9A5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F9AA                            		even
0000F9AA                            		even
0000F9AA                            
0000F9AA                            ; ===========================================================================
0000F9AA                            ; ---------------------------------------------------------------------------
0000F9AA                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F9AA                            ; ---------------------------------------------------------------------------
0000F9AA                            
0000F9AA                            Obj46:					; XREF: Obj_Index
0000F9AA 7000                       		moveq	#0,d0
0000F9AC 1028 0024                  		move.b	$24(a0),d0
0000F9B0 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F9B4 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F9B8                            ; ===========================================================================
0000F9B8 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F9BA 0000                       		dc.w Obj46_Action-Obj46_Index
0000F9BC                            ; ===========================================================================
0000F9BC                            
0000F9BC                            Obj46_Main:				; XREF: Obj46_Index
0000F9BC 5428 0024                  		addq.b	#2,$24(a0)
0000F9C0 117C 000F 0016             		move.b	#$F,$16(a0)
0000F9C6 117C 000F 0017             		move.b	#$F,$17(a0)
0000F9CC 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F9D4 317C 4000 0002             		move.w	#$4000,2(a0)
0000F9DA 117C 0004 0001             		move.b	#4,1(a0)
0000F9E0 117C 0003 0018             		move.b	#3,$18(a0)
0000F9E6 117C 0010 0019             		move.b	#$10,$19(a0)
0000F9EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F9F2 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F9F8                            
0000F9F8                            Obj46_Action:				; XREF: Obj46_Index
0000F9F8 4A28 0001                  		tst.b	1(a0)
0000F9FC 6A00                       		bpl.s	Obj46_ChkDel
0000F9FE 7000                       		moveq	#0,d0
0000FA00 1028 0028                  		move.b	$28(a0),d0	; get object type
0000FA04 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000FA08 D040                       		add.w	d0,d0
0000FA0A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000FA0E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000FA12 323C 001B                  		move.w	#$1B,d1
0000FA16 343C 0010                  		move.w	#$10,d2
0000FA1A 363C 0011                  		move.w	#$11,d3
0000FA1E 3828 0008                  		move.w	8(a0),d4
0000FA22 6100 0000                  		bsr.w	SolidObject
0000FA26                            
0000FA26                            Obj46_ChkDel:
0000FA26 6100 EDBC                  		bsr.w	DisplaySprite
0000FA2A 3028 0008                  		move.w	8(a0),d0
0000FA2E 0240 FF80                  		andi.w	#$FF80,d0
0000FA32 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA36 0441 0080                  		subi.w	#$80,d1
0000FA3A 0241 FF80                  		andi.w	#$FF80,d1
0000FA3E 9041                       		sub.w	d1,d0
0000FA40 0C40 0280                  		cmpi.w	#$280,d0
0000FA44 6200 EDDA                  		bhi.w	DeleteObject
0000FA48 4E75                       		rts	
0000FA4A                            ; ===========================================================================
0000FA4A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000FA4C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000FA4E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000FA50 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000FA52 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000FA54                            ; ===========================================================================
0000FA54                            
0000FA54                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000FA54 4E75                       		rts	
0000FA56                            ; ===========================================================================
0000FA56                            
0000FA56                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000FA56 3038 D008                  		move.w	($FFFFD008).w,d0
0000FA5A 9068 0008                  		sub.w	8(a0),d0
0000FA5E 6400                       		bcc.s	loc_E888
0000FA60 4440                       		neg.w	d0
0000FA62                            
0000FA62                            loc_E888:
0000FA62 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000FA66 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000FA68 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000FA6E                            
0000FA6E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000FA6E 7000                       		moveq	#0,d0
0000FA70 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000FA74 0828 0003 0028             		btst	#3,$28(a0)
0000FA7A 6700                       		beq.s	loc_E8A8
0000FA7C 4440                       		neg.w	d0
0000FA7E 0640 0010                  		addi.w	#$10,d0
0000FA82                            
0000FA82                            loc_E8A8:
0000FA82 3228 0030                  		move.w	$30(a0),d1
0000FA86 9240                       		sub.w	d0,d1
0000FA88 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000FA8C 4E75                       		rts	
0000FA8E                            ; ===========================================================================
0000FA8E                            
0000FA8E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000FA8E 6100 ED2E                  		bsr.w	SpeedToPos
0000FA92 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000FA98 6100 0000                  		bsr.w	ObjHitFloor
0000FA9C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000FA9E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000FAA2 D368 000C                  		add.w	d1,$C(a0)
0000FAA6 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000FAAA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FAB0 117C 0004 0028             		move.b	#4,$28(a0)
0000FAB6 3011                       		move.w	(a1),d0
0000FAB8 0240 03FF                  		andi.w	#$3FF,d0
0000FABC 0C40 02E8                  		cmpi.w	#$2E8,d0
0000FAC0 6400                       		bcc.s	locret_E8EE
0000FAC2 117C 0000 0028             		move.b	#0,$28(a0)
0000FAC8                            
0000FAC8                            locret_E8EE:
0000FAC8 4E75                       		rts	
0000FACA                            ; ===========================================================================
0000FACA                            
0000FACA                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000FACA 7000                       		moveq	#0,d0
0000FACC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000FAD0 E648                       		lsr.w	#3,d0
0000FAD2 3228 0030                  		move.w	$30(a0),d1
0000FAD6 9240                       		sub.w	d0,d1
0000FAD8 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000FADC 4E75                       		rts	
0000FADE                            ; ===========================================================================
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            Map_obj46:
0000FADE                            	include "_maps\obj46.asm"
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE 0000                       		dc.w byte_E906-Map_obj46
0000FAE0 01                         byte_E906:	dc.b 1
0000FAE1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000FAE6                            		even
0000FAE6                            		even
0000FAE6                            
0000FAE6                            ; ===========================================================================
0000FAE6                            ; ---------------------------------------------------------------------------
0000FAE6                            ; Object 12 - lamp (SYZ)
0000FAE6                            ; ---------------------------------------------------------------------------
0000FAE6                            
0000FAE6                            Obj12:					; XREF: Obj_Index
0000FAE6 7000                       		moveq	#0,d0
0000FAE8 1028 0024                  		move.b	$24(a0),d0
0000FAEC 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000FAF0 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000FAF4                            ; ===========================================================================
0000FAF4 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000FAF6 0000                       		dc.w Obj12_Animate-Obj12_Index
0000FAF8                            ; ===========================================================================
0000FAF8                            
0000FAF8                            Obj12_Main:				; XREF: Obj12_Index
0000FAF8 5428 0024                  		addq.b	#2,$24(a0)
0000FAFC 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000FB04 317C 0000 0002             		move.w	#0,2(a0)
0000FB0A 117C 0004 0001             		move.b	#4,1(a0)
0000FB10 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB16 117C 0006 0018             		move.b	#6,$18(a0)
0000FB1C                            
0000FB1C                            Obj12_Animate:				; XREF: Obj12_Index
0000FB1C 5328 001E                  		subq.b	#1,$1E(a0)
0000FB20 6A00                       		bpl.s	Obj12_ChkDel
0000FB22 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB28 5228 001A                  		addq.b	#1,$1A(a0)
0000FB2C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000FB32 6500                       		bcs.s	Obj12_ChkDel
0000FB34 117C 0000 001A             		move.b	#0,$1A(a0)
0000FB3A                            
0000FB3A                            Obj12_ChkDel:
0000FB3A 3028 0008                  		move.w	8(a0),d0
0000FB3E 0240 FF80                  		andi.w	#$FF80,d0
0000FB42 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB46 0441 0080                  		subi.w	#$80,d1
0000FB4A 0241 FF80                  		andi.w	#$FF80,d1
0000FB4E 9041                       		sub.w	d1,d0
0000FB50 0C40 0280                  		cmpi.w	#$280,d0
0000FB54 6200 ECCA                  		bhi.w	DeleteObject
0000FB58 6000 EC8A                  		bra.w	DisplaySprite
0000FB5C                            ; ===========================================================================
0000FB5C                            ; ---------------------------------------------------------------------------
0000FB5C                            ; Sprite mappings - lamp (SYZ)
0000FB5C                            ; ---------------------------------------------------------------------------
0000FB5C                            Map_obj12:
0000FB5C                            	include "_maps\obj12.asm"
0000FB5C                            ; ---------------------------------------------------------------------------
0000FB5C                            ; Sprite mappings - lamp (SYZ)
0000FB5C                            ; ---------------------------------------------------------------------------
0000FB5C 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000FB60 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000FB64 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000FB68 02                         byte_E98E:	dc.b 2
0000FB69 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000FB6E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000FB73 02                         byte_E999:	dc.b 2
0000FB74 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000FB79 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000FB7E 02                         byte_E9A4:	dc.b 2
0000FB7F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000FB84 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000FB89 02                         byte_E9AF:	dc.b 2
0000FB8A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000FB8F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000FB94 02                         byte_E9BA:	dc.b 2
0000FB95 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000FB9A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000FB9F 02                         byte_E9C5:	dc.b 2
0000FBA0 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000FBA5 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000FBAA                            		even
0000FBAA                            		even
0000FBAA                            
0000FBAA                            ; ===========================================================================
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            ; Object 47 - pinball bumper (SYZ)
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            
0000FBAA                            Obj47:					; XREF: Obj_Index
0000FBAA 7000                       		moveq	#0,d0
0000FBAC 1028 0024                  		move.b	$24(a0),d0
0000FBB0 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000FBB4 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000FBB8                            ; ===========================================================================
0000FBB8 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000FBBA 0000                       		dc.w Obj47_Hit-Obj47_Index
0000FBBC                            ; ===========================================================================
0000FBBC                            
0000FBBC                            Obj47_Main:				; XREF: Obj47_Index
0000FBBC 5428 0024                  		addq.b	#2,$24(a0)
0000FBC0 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000FBC8 317C 0380 0002             		move.w	#$380,2(a0)
0000FBCE 117C 0004 0001             		move.b	#4,1(a0)
0000FBD4 117C 0010 0019             		move.b	#$10,$19(a0)
0000FBDA 117C 0001 0018             		move.b	#1,$18(a0)
0000FBE0 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000FBE6                            
0000FBE6                            Obj47_Hit:				; XREF: Obj47_Index
0000FBE6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000FBEA 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000FBEE 4228 0021                  		clr.b	$21(a0)
0000FBF2 43F8 D000                  		lea	($FFFFD000).w,a1
0000FBF6 3228 0008                  		move.w	8(a0),d1
0000FBFA 3428 000C                  		move.w	$C(a0),d2
0000FBFE 9269 0008                  		sub.w	8(a1),d1
0000FC02 9469 000C                  		sub.w	$C(a1),d2
0000FC06 4EB9 0000 3786             		jsr	(CalcAngle).l
0000FC0C 4EB9 0000 34B8             		jsr	(CalcSine).l
0000FC12 C3FC F900                  		muls.w	#-$700,d1
0000FC16 E081                       		asr.l	#8,d1
0000FC18 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000FC1C C1FC F900                  		muls.w	#-$700,d0
0000FC20 E080                       		asr.l	#8,d0
0000FC22 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000FC26 08E9 0001 0022             		bset	#1,$22(a1)
0000FC2C 08A9 0004 0022             		bclr	#4,$22(a1)
0000FC32 08A9 0005 0022             		bclr	#5,$22(a1)
0000FC38 4229 003C                  		clr.b	$3C(a1)
0000FC3C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC42 303C 00B4                  		move.w	#$B4,d0
0000FC46 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play bumper sound
0000FC4C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC50 7000                       		moveq	#0,d0
0000FC52 1028 0023                  		move.b	$23(a0),d0
0000FC56 6700                       		beq.s	Obj47_Score
0000FC58 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000FC5E 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000FC60 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000FC64                            
0000FC64                            Obj47_Score:
0000FC64 7001                       		moveq	#1,d0
0000FC66 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000FC6C 6100 EFFC                  		bsr.w	SingleObjLoad
0000FC70 6600                       		bne.s	Obj47_Display
0000FC72 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FC76 3368 0008 0008             		move.w	8(a0),8(a1)
0000FC7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FC82 137C 0004 001A             		move.b	#4,$1A(a1)
0000FC88                            
0000FC88                            Obj47_Display:
0000FC88 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000FC8E 6100 BBA2                  		bsr.w	AnimateSprite
0000FC92 3028 0008                  		move.w	8(a0),d0
0000FC96 0240 FF80                  		andi.w	#$FF80,d0
0000FC9A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC9E 0441 0080                  		subi.w	#$80,d1
0000FCA2 0241 FF80                  		andi.w	#$FF80,d1
0000FCA6 9041                       		sub.w	d1,d0
0000FCA8 0C40 0280                  		cmpi.w	#$280,d0
0000FCAC 6200                       		bhi.s	Obj47_ChkHit
0000FCAE 6000 EB34                  		bra.w	DisplaySprite
0000FCB2                            ; ===========================================================================
0000FCB2                            
0000FCB2                            Obj47_ChkHit:				; XREF: Obj47_Display
0000FCB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCB6 7000                       		moveq	#0,d0
0000FCB8 1028 0023                  		move.b	$23(a0),d0
0000FCBC 6700                       		beq.s	Obj47_Delete
0000FCBE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCC4                            
0000FCC4                            Obj47_Delete:
0000FCC4 6000 EB5A                  		bra.w	DeleteObject
0000FCC8                            ; ===========================================================================
0000FCC8                            Ani_obj47:
0000FCC8                            	include "_anim\obj47.asm"
0000FCC8                            ; ---------------------------------------------------------------------------
0000FCC8                            ; Animation script - flamethrower (SBZ)
0000FCC8                            ; ---------------------------------------------------------------------------
0000FCC8 0000                       		dc.w byte_EAF4-Ani_obj47
0000FCCA 0000                       		dc.w byte_EAF8-Ani_obj47
0000FCCC 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000FCD0 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000FCD8                            		even
0000FCD8                            		even
0000FCD8                            
0000FCD8                            ; ---------------------------------------------------------------------------
0000FCD8                            ; Sprite mappings - pinball bumper (SYZ)
0000FCD8                            ; ---------------------------------------------------------------------------
0000FCD8                            Map_obj47:
0000FCD8                            	include "_maps\obj47.asm"
0000FCD8                            ; ---------------------------------------------------------------------------
0000FCD8                            ; Sprite mappings - pinball bumper (SYZ)
0000FCD8                            ; ---------------------------------------------------------------------------
0000FCD8 0000                       		dc.w byte_EB06-Map_obj47
0000FCDA 0000                       		dc.w byte_EB11-Map_obj47
0000FCDC 0000                       		dc.w byte_EB1C-Map_obj47
0000FCDE 02                         byte_EB06:	dc.b 2
0000FCDF F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000FCE4 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000FCE9 02                         byte_EB11:	dc.b 2
0000FCEA F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000FCEF F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000FCF4 02                         byte_EB1C:	dc.b 2
0000FCF5 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000FCFA F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000FD00 00                         		even
0000FD00 00                         		even
0000FD00                            
0000FD00                            ; ===========================================================================
0000FD00                            ; ---------------------------------------------------------------------------
0000FD00                            ; Object 0D - signpost at the end of a level
0000FD00                            ; ---------------------------------------------------------------------------
0000FD00                            
0000FD00                            Obj0D:					; XREF: Obj_Index
0000FD00 7000                       		moveq	#0,d0
0000FD02 1028 0024                  		move.b	$24(a0),d0
0000FD06 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000FD0A 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000FD0E 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000FD14 6100 BB1C                  		bsr.w	AnimateSprite
0000FD18 6100 EACA                  		bsr.w	DisplaySprite
0000FD1C 3028 0008                  		move.w	8(a0),d0
0000FD20 0240 FF80                  		andi.w	#$FF80,d0
0000FD24 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD28 0441 0080                  		subi.w	#$80,d1
0000FD2C 0241 FF80                  		andi.w	#$FF80,d1
0000FD30 9041                       		sub.w	d1,d0
0000FD32 0C40 0280                  		cmpi.w	#$280,d0
0000FD36 6200 EAE8                  		bhi.w	DeleteObject
0000FD3A 4E75                       		rts	
0000FD3C                            ; ===========================================================================
0000FD3C 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000FD3E 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000FD40 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000FD42 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000FD44 0000                       		dc.w locret_ED1A-Obj0D_Index
0000FD46                            ; ===========================================================================
0000FD46                            
0000FD46                            Obj0D_Main:				; XREF: Obj0D_Index
0000FD46 5428 0024                  		addq.b	#2,$24(a0)
0000FD4A 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000FD52 317C 0680 0002             		move.w	#$680,2(a0)
0000FD58 117C 0004 0001             		move.b	#4,1(a0)
0000FD5E 117C 0018 0019             		move.b	#$18,$19(a0)
0000FD64 117C 0004 0018             		move.b	#4,$18(a0)
0000FD6A                            
0000FD6A                            Obj0D_Touch:				; XREF: Obj0D_Index
0000FD6A 3038 D008                  		move.w	($FFFFD008).w,d0
0000FD6E 9068 0008                  		sub.w	8(a0),d0
0000FD72 6500                       		bcs.s	locret_EBBA
0000FD74 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000FD78 6400                       		bcc.s	locret_EBBA	; if not, branch
0000FD7A 303C 00CF                  		move.w	#$CF,d0
0000FD7E 4EB9 0000 1D10             		jsr	(PlaySound).l	; play signpost	sound
0000FD84 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FD88 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000FD8E 5428 0024                  		addq.b	#2,$24(a0)
0000FD92                            
0000FD92                            locret_EBBA:
0000FD92 4E75                       		rts	
0000FD94                            ; ===========================================================================
0000FD94                            
0000FD94                            Obj0D_Spin:				; XREF: Obj0D_Index
0000FD94 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000FD98 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000FD9A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000FDA0 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000FDA4 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000FDAA 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000FDAC 5428 0024                  		addq.b	#2,$24(a0)
0000FDB0                            
0000FDB0                            Obj0D_Sparkle:
0000FDB0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000FDB4 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000FDB6 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000FDBC 7000                       		moveq	#0,d0
0000FDBE 1028 0034                  		move.b	$34(a0),d0
0000FDC2 5428 0034                  		addq.b	#2,$34(a0)
0000FDC6 0228 000E 0034             		andi.b	#$E,$34(a0)
0000FDCC 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000FDD0 6100 EE98                  		bsr.w	SingleObjLoad
0000FDD4 6600                       		bne.s	locret_EC42
0000FDD6 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000FDDA 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000FDE0 101A                       		move.b	(a2)+,d0
0000FDE2 4880                       		ext.w	d0
0000FDE4 D068 0008                  		add.w	8(a0),d0
0000FDE8 3340 0008                  		move.w	d0,8(a1)
0000FDEC 101A                       		move.b	(a2)+,d0
0000FDEE 4880                       		ext.w	d0
0000FDF0 D068 000C                  		add.w	$C(a0),d0
0000FDF4 3340 000C                  		move.w	d0,$C(a1)
0000FDF8 237C 0000 AFD0 0004        		move.l	#Map_obj25,4(a1)
0000FE00 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000FE06 137C 0004 0001             		move.b	#4,1(a1)
0000FE0C 137C 0002 0018             		move.b	#2,$18(a1)
0000FE12 137C 0008 0019             		move.b	#8,$19(a1)
0000FE18                            
0000FE18                            locret_EC42:
0000FE18 4E75                       		rts	
0000FE1A                            ; ===========================================================================
0000FE1A E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000FE1C 0808                       		dc.b	8,   8
0000FE1E F000                       		dc.b -$10,   0
0000FE20 18F8                       		dc.b  $18,  -8
0000FE22 00F8                       		dc.b	0,  -8
0000FE24 1000                       		dc.b  $10,   0
0000FE26 E808                       		dc.b -$18,   8
0000FE28 1810                       		dc.b  $18, $10
0000FE2A                            ; ===========================================================================
0000FE2A                            
0000FE2A                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000FE2A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000FE2E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000FE32 0838 0001 D022             		btst	#1,($FFFFD022).w
0000FE38 6600                       		bne.s	loc_EC70
0000FE3A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000FE40 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000FE46 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000FE48 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000FE4E 6000                       		bra.s	loc_EC70
0000FE50                            
0000FE50                            Obj0D_MoveLeft:
0000FE50 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000FE56                            
0000FE56                            loc_EC70:
0000FE56 4A38 D000                  		tst.b	($FFFFD000).w
0000FE5A 6700                       		beq.s	loc_EC86
0000FE5C 3038 D008                  		move.w	($FFFFD008).w,d0
0000FE60 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000FE64 0641 0128                  		addi.w	#$128,d1
0000FE68 B041                       		cmp.w	d1,d0
0000FE6A 6500                       		bcs.s	locret_ECEE
0000FE6C                            
0000FE6C                            loc_EC86:
0000FE6C 5428 0024                  		addq.b	#2,$24(a0)
0000FE70                            
0000FE70                            ; ---------------------------------------------------------------------------
0000FE70                            ; Subroutine to	set up bonuses at the end of an	act
0000FE70                            ; ---------------------------------------------------------------------------
0000FE70                            
0000FE70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE70                            
0000FE70                            
0000FE70                            GotThroughAct:				; XREF: Obj3E_EndAct
0000FE70 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000FE74 6600                       		bne.s	locret_ECEE
0000FE76 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000FE7C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000FE80 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FE84 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000FE8A 7010                       		moveq	#$10,d0
0000FE8C 4EB9 0000 1F2C             		jsr	(LoadPLC2).l	; load title card patterns
0000FE92 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000FE98 7000                       		moveq	#0,d0
0000FE9A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000FE9E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000FEA2 7200                       		moveq	#0,d1
0000FEA4 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000FEA8 D041                       		add.w	d1,d0		; add up your time
0000FEAA 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000FEAE 7214                       		moveq	#$14,d1
0000FEB0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000FEB2 6500                       		bcs.s	loc_ECD0	; if not, branch
0000FEB4 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000FEB6                            
0000FEB6                            loc_ECD0:
0000FEB6 D040                       		add.w	d0,d0
0000FEB8 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000FEBE 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000FEC2 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000FEC6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000FECA 303C 008E                  		move.w	#$8E,d0
0000FECE 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000FED4                            
0000FED4                            locret_ECEE:
0000FED4 4E75                       		rts	
0000FED6                            ; End of function GotThroughAct
0000FED6                            
0000FED6                            ; ===========================================================================
0000FED6 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000FEEA 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000FF00                            ; ===========================================================================
0000FF00                            
0000FF00                            locret_ED1A:				; XREF: Obj0D_Index
0000FF00 4E75                       		rts	
0000FF02                            ; ===========================================================================
0000FF02                            Ani_obj0D:
0000FF02                            	include "_anim\obj0D.asm"
0000FF02                            ; ---------------------------------------------------------------------------
0000FF02                            ; Animation script - signpost
0000FF02                            ; ---------------------------------------------------------------------------
0000FF02 0000                       		dc.w byte_ED24-Ani_obj0D
0000FF04 0000                       		dc.w byte_ED28-Ani_obj0D
0000FF06 0000                       		dc.w byte_ED2E-Ani_obj0D
0000FF08 0000                       		dc.w byte_ED34-Ani_obj0D
0000FF0A 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000FF0E 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000FF14 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000FF1A 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000FF1E 00                         		even
0000FF1E 00                         		even
0000FF1E                            
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            ; Sprite mappings - signpost
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            Map_obj0D:
0000FF1E                            	include "_maps\obj0D.asm"
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            ; Sprite mappings - signpost
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000FF22 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000FF26 0000                       		dc.w byte_ED73-Map_obj0D
0000FF28 03                         byte_ED42:	dc.b 3
0000FF29 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FF2E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000FF33 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FF38 02                         byte_ED52:	dc.b 2
0000FF39 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000FF3E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FF43 02                         byte_ED5D:	dc.b 2
0000FF44 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FF49 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FF4E 02                         byte_ED68:	dc.b 2
0000FF4F F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FF54 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FF59 03                         byte_ED73:	dc.b 3
0000FF5A F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FF5F F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FF64 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FF6A 00                         		even
0000FF6A 00                         		even
0000FF6A                            
0000FF6A                            ; ===========================================================================
0000FF6A                            ; ---------------------------------------------------------------------------
0000FF6A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FF6A                            ; ---------------------------------------------------------------------------
0000FF6A                            
0000FF6A                            Obj4C:					; XREF: Obj_Index
0000FF6A 7000                       		moveq	#0,d0
0000FF6C 1028 0024                  		move.b	$24(a0),d0
0000FF70 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FF74 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FF78 6000 0000                  		bra.w	Obj4D_ChkDel
0000FF7C                            ; ===========================================================================
0000FF7C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FF7E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FF80 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FF82 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FF84 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FF86 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FF88                            ; ===========================================================================
0000FF88                            
0000FF88                            Obj4C_Main:				; XREF: Obj4C_Index
0000FF88 5428 0024                  		addq.b	#2,$24(a0)
0000FF8C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FF94 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FF9A 117C 0004 0001             		move.b	#4,1(a0)
0000FFA0 117C 0001 0018             		move.b	#1,$18(a0)
0000FFA6 117C 0038 0019             		move.b	#$38,$19(a0)
0000FFAC 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FFB2                            
0000FFB2                            loc_EDCC:				; XREF: Obj4C_Index
0000FFB2 5368 0032                  		subq.w	#1,$32(a0)
0000FFB6 6A00                       		bpl.s	locret_EDF0
0000FFB8 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FFBE 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FFC2 3228 000C                  		move.w	$C(a0),d1
0000FFC6 B041                       		cmp.w	d1,d0
0000FFC8 6400                       		bcc.s	locret_EDF0
0000FFCA 0441 0170                  		subi.w	#$170,d1
0000FFCE B041                       		cmp.w	d1,d0
0000FFD0 6500                       		bcs.s	locret_EDF0
0000FFD2 5428 0024                  		addq.b	#2,$24(a0)
0000FFD6                            
0000FFD6                            locret_EDF0:
0000FFD6 4E75                       		rts	
0000FFD8                            ; ===========================================================================
0000FFD8                            
0000FFD8                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FFD8 5428 0024                  		addq.b	#2,$24(a0)
0000FFDC 6100 ECA2                  		bsr.w	SingleObjLoad2
0000FFE0 6600                       		bne.s	loc_EE18
0000FFE2 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FFE6 3368 0008 0008             		move.w	8(a0),8(a1)
0000FFEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FFF2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FFF8 2348 003C                  		move.l	a0,$3C(a1)
0000FFFC                            
0000FFFC                            loc_EE18:
0000FFFC 117C 0001 001C             		move.b	#1,$1C(a0)
00010002 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010006 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010008 117C 0004 001C             		move.b	#4,$1C(a0)
0001000E 6000                       		bra.s	Obj4C_Display
00010010                            ; ===========================================================================
00010010                            
00010010                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00010010 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00010014 08E9 0001 0022             		bset	#1,$22(a1)
0001001A 337C FA80 0012             		move.w	#-$580,$12(a1)
00010020 6000                       		bra.s	Obj4C_Display
00010022                            ; ===========================================================================
00010022                            
00010022                            loc_EE3E:				; XREF: Obj4C_Index
00010022 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010026 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010028 5428 0024                  		addq.b	#2,$24(a0)
0001002C 4E75                       		rts	
0001002E                            ; ===========================================================================
0001002E                            
0001002E                            Obj4C_Display:				; XREF: Obj4C_Index
0001002E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010034 6100 B7FC                  		bsr.w	AnimateSprite
00010038 6100 E7AA                  		bsr.w	DisplaySprite
0001003C 4E75                       		rts	
0001003E                            ; ===========================================================================
0001003E                            
0001003E                            Obj4C_Delete:				; XREF: Obj4C_Index
0001003E 117C 0000 001C             		move.b	#0,$1C(a0)
00010044 117C 0002 0024             		move.b	#2,$24(a0)
0001004A 4A28 0028                  		tst.b	$28(a0)
0001004E 6700 E7D0                  		beq.w	DeleteObject
00010052 4E75                       		rts	
00010054                            ; ===========================================================================
00010054                            ; ---------------------------------------------------------------------------
00010054                            ; Object 4D - lava geyser / lavafall (MZ)
00010054                            ; ---------------------------------------------------------------------------
00010054                            
00010054                            Obj4D:					; XREF: Obj_Index
00010054 7000                       		moveq	#0,d0
00010056 1028 0024                  		move.b	$24(a0),d0
0001005A 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001005E 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010062 6000 E780                  		bra.w	DisplaySprite
00010066                            ; ===========================================================================
00010066 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010068 0000                       		dc.w Obj4D_Action-Obj4D_Index
0001006A 0000                       		dc.w loc_EFFC-Obj4D_Index
0001006C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001006E                            
0001006E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010072                            ; ===========================================================================
00010072                            
00010072                            Obj4D_Main:				; XREF: Obj4D_Index
00010072 5428 0024                  		addq.b	#2,$24(a0)
00010076 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001007C 4A28 0028                  		tst.b	$28(a0)
00010080 6700                       		beq.s	loc_EEA4
00010082 0468 0250 000C             		subi.w	#$250,$C(a0)
00010088                            
00010088                            loc_EEA4:
00010088 7000                       		moveq	#0,d0
0001008A 1028 0028                  		move.b	$28(a0),d0
0001008E D040                       		add.w	d0,d0
00010090 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010096 2248                       		movea.l	a0,a1
00010098 7201                       		moveq	#1,d1
0001009A 6100                       		bsr.s	Obj4D_MakeLava
0001009C 6000                       		bra.s	loc_EF10
0001009E                            ; ===========================================================================
0001009E                            
0001009E                            Obj4D_Loop:
0001009E 6100 EBE0                  		bsr.w	SingleObjLoad2
000100A2 6600                       		bne.s	loc_EF0A
000100A4                            
000100A4                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000100A4 12BC 004D                  		move.b	#$4D,0(a1)
000100A8 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000100B0 337C 63A8 0002             		move.w	#$63A8,2(a1)
000100B6 137C 0004 0001             		move.b	#4,1(a1)
000100BC 137C 0020 0019             		move.b	#$20,$19(a1)
000100C2 3368 0008 0008             		move.w	8(a0),8(a1)
000100C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000100CE 1368 0028 0028             		move.b	$28(a0),$28(a1)
000100D4 137C 0001 0018             		move.b	#1,$18(a1)
000100DA 137C 0005 001C             		move.b	#5,$1C(a1)
000100E0 4A28 0028                  		tst.b	$28(a0)
000100E4 6700                       		beq.s	loc_EF0A
000100E6 137C 0002 001C             		move.b	#2,$1C(a1)
000100EC                            
000100EC                            loc_EF0A:
000100EC 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000100F0 4E75                       		rts	
000100F2                            ; ===========================================================================
000100F2                            
000100F2                            loc_EF10:				; XREF: Obj4D_Main
000100F2 0669 0060 000C             		addi.w	#$60,$C(a1)
000100F8 3368 0030 0030             		move.w	$30(a0),$30(a1)
000100FE 0669 0060 0030             		addi.w	#$60,$30(a1)
00010104 137C 0093 0020             		move.b	#$93,$20(a1)
0001010A 137C 0080 0016             		move.b	#$80,$16(a1)
00010110 08E9 0004 0001             		bset	#4,1(a1)
00010116 5829 0024                  		addq.b	#4,$24(a1)
0001011A 2348 003C                  		move.l	a0,$3C(a1)
0001011E 4A28 0028                  		tst.b	$28(a0)
00010122 6700                       		beq.s	Obj4D_PlaySnd
00010124 7200                       		moveq	#0,d1
00010126 6100 FF76                  		bsr.w	Obj4D_Loop
0001012A 5429 0024                  		addq.b	#2,$24(a1)
0001012E 08E9 0004 0002             		bset	#4,2(a1)
00010134 0669 0100 000C             		addi.w	#$100,$C(a1)
0001013A 137C 0000 0018             		move.b	#0,$18(a1)
00010140 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010146 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0001014C 117C 0000 0028             		move.b	#0,$28(a0)
00010152                            
00010152                            Obj4D_PlaySnd:
00010152 303C 00C8                  		move.w	#$C8,d0
00010156 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play flame sound
0001015C                            
0001015C                            Obj4D_Action:				; XREF: Obj4D_Index
0001015C 7000                       		moveq	#0,d0
0001015E 1028 0028                  		move.b	$28(a0),d0
00010162 D040                       		add.w	d0,d0
00010164 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010168 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0001016C 6100 E650                  		bsr.w	SpeedToPos
00010170 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010176 6100 B6BA                  		bsr.w	AnimateSprite
0001017A                            
0001017A                            Obj4D_ChkDel:				; XREF: Obj4C
0001017A 3028 0008                  		move.w	8(a0),d0
0001017E 0240 FF80                  		andi.w	#$FF80,d0
00010182 3238 F700                  		move.w	($FFFFF700).w,d1
00010186 0441 0080                  		subi.w	#$80,d1
0001018A 0241 FF80                  		andi.w	#$FF80,d1
0001018E 9041                       		sub.w	d1,d0
00010190 0C40 0280                  		cmpi.w	#$280,d0
00010194 6200 E68A                  		bhi.w	DeleteObject
00010198 4E75                       		rts	
0001019A                            ; ===========================================================================
0001019A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001019C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0001019E                            ; ===========================================================================
0001019E                            
0001019E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0001019E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000101A4 3028 0030                  		move.w	$30(a0),d0
000101A8 B068 000C                  		cmp.w	$C(a0),d0
000101AC 6400                       		bcc.s	locret_EFDA
000101AE 5828 0024                  		addq.b	#4,$24(a0)
000101B2 2268 003C                  		movea.l	$3C(a0),a1
000101B6 137C 0003 001C             		move.b	#3,$1C(a1)
000101BC                            
000101BC                            locret_EFDA:
000101BC 4E75                       		rts	
000101BE                            ; ===========================================================================
000101BE                            
000101BE                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000101BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000101C4 3028 0030                  		move.w	$30(a0),d0
000101C8 B068 000C                  		cmp.w	$C(a0),d0
000101CC 6400                       		bcc.s	locret_EFFA
000101CE 5828 0024                  		addq.b	#4,$24(a0)
000101D2 2268 003C                  		movea.l	$3C(a0),a1
000101D6 137C 0001 001C             		move.b	#1,$1C(a1)
000101DC                            
000101DC                            locret_EFFA:
000101DC 4E75                       		rts	
000101DE                            ; ===========================================================================
000101DE                            
000101DE                            loc_EFFC:				; XREF: Obj4D_Index
000101DE 2268 003C                  		movea.l	$3C(a0),a1
000101E2 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000101E8 6700 0000                  		beq.w	Obj4D_Delete
000101EC 3029 000C                  		move.w	$C(a1),d0
000101F0 0640 0060                  		addi.w	#$60,d0
000101F4 3140 000C                  		move.w	d0,$C(a0)
000101F8 9068 0030                  		sub.w	$30(a0),d0
000101FC 4440                       		neg.w	d0
000101FE 7208                       		moveq	#8,d1
00010200 0C40 0040                  		cmpi.w	#$40,d0
00010204 6C00                       		bge.s	loc_F026
00010206 720B                       		moveq	#$B,d1
00010208                            
00010208                            loc_F026:
00010208 0C40 0080                  		cmpi.w	#$80,d0
0001020C 6F00                       		ble.s	loc_F02E
0001020E 720E                       		moveq	#$E,d1
00010210                            
00010210                            loc_F02E:
00010210 5328 001E                  		subq.b	#1,$1E(a0)
00010214 6A00                       		bpl.s	loc_F04C
00010216 117C 0007 001E             		move.b	#7,$1E(a0)
0001021C 5228 001B                  		addq.b	#1,$1B(a0)
00010220 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010226 6500                       		bcs.s	loc_F04C
00010228 117C 0000 001B             		move.b	#0,$1B(a0)
0001022E                            
0001022E                            loc_F04C:
0001022E 1028 001B                  		move.b	$1B(a0),d0
00010232 D001                       		add.b	d1,d0
00010234 1140 001A                  		move.b	d0,$1A(a0)
00010238 6000 FF40                  		bra.w	Obj4D_ChkDel
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            Obj4D_Delete:				; XREF: Obj4D_Index
0001023C 6000 E5E2                  		bra.w	DeleteObject
00010240                            ; ===========================================================================
00010240                            ; ---------------------------------------------------------------------------
00010240                            ; Object 4E - advancing	wall of	lava (MZ)
00010240                            ; ---------------------------------------------------------------------------
00010240                            
00010240                            Obj4E:					; XREF: Obj_Index
00010240 7000                       		moveq	#0,d0
00010242 1028 0024                  		move.b	$24(a0),d0
00010246 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0001024A 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0001024E                            ; ===========================================================================
0001024E 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010250 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010252 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010254 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010256 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010258                            ; ===========================================================================
00010258                            
00010258                            Obj4E_Main:				; XREF: Obj4E_Index
00010258 5828 0024                  		addq.b	#4,$24(a0)
0001025C 2248                       		movea.l	a0,a1
0001025E 7201                       		moveq	#1,d1
00010260 6000                       		bra.s	Obj4E_Main2
00010262                            ; ===========================================================================
00010262                            
00010262                            Obj4E_Loop:
00010262 6100 EA1C                  		bsr.w	SingleObjLoad2
00010266 6600                       		bne.s	loc_F0C8
00010268                            
00010268                            Obj4E_Main2:				; XREF: Obj4E_Main
00010268 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0001026C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010274 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001027A 137C 0004 0001             		move.b	#4,1(a1)
00010280 137C 0050 0019             		move.b	#$50,$19(a1)
00010286 3368 0008 0008             		move.w	8(a0),8(a1)
0001028C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010292 137C 0001 0018             		move.b	#1,$18(a1)
00010298 137C 0000 001C             		move.b	#0,$1C(a1)
0001029E 137C 0094 0020             		move.b	#$94,$20(a1)
000102A4 2348 003C                  		move.l	a0,$3C(a1)
000102A8                            
000102A8                            loc_F0C8:
000102A8 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
000102AC                            
000102AC 5C29 0024                  		addq.b	#6,$24(a1)
000102B0 137C 0004 001A             		move.b	#4,$1A(a1)
000102B6                            
000102B6                            Obj4E_Action:				; XREF: Obj4E_Index
000102B6 3038 D008                  		move.w	($FFFFD008).w,d0
000102BA 9068 0008                  		sub.w	8(a0),d0
000102BE 6400                       		bcc.s	Obj4E_ChkSonic
000102C0 4440                       		neg.w	d0
000102C2                            
000102C2                            Obj4E_ChkSonic:
000102C2 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
000102C6 6400                       		bcc.s	Obj4E_Move	; if not, branch
000102C8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000102CC 9068 000C                  		sub.w	$C(a0),d0
000102D0 6400                       		bcc.s	loc_F0F4
000102D2 4440                       		neg.w	d0
000102D4                            
000102D4                            loc_F0F4:
000102D4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
000102D8 6400                       		bcc.s	Obj4E_Move	; if not, branch
000102DA 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000102E0 6000                       		bra.s	Obj4E_Solid
000102E2                            ; ===========================================================================
000102E2                            
000102E2                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000102E2 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000102E6 6700                       		beq.s	Obj4E_Solid	; if not, branch
000102E8 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
000102EE 5528 0024                  		subq.b	#2,$24(a0)
000102F2                            
000102F2                            Obj4E_Solid:				; XREF: Obj4E_Index
000102F2 323C 002B                  		move.w	#$2B,d1
000102F6 343C 0018                  		move.w	#$18,d2
000102FA 3602                       		move.w	d2,d3
000102FC 5243                       		addq.w	#1,d3
000102FE 3828 0008                  		move.w	8(a0),d4
00010302 1028 0024                  		move.b	$24(a0),d0
00010306 3F00                       		move.w	d0,-(sp)
00010308 6100 0000                  		bsr.w	SolidObject
0001030C 301F                       		move.w	(sp)+,d0
0001030E 1140 0024                  		move.b	d0,$24(a0)
00010312 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010318 6600                       		bne.s	Obj4E_Animate	; if not, branch
0001031A 4268 0010                  		clr.w	$10(a0)		; stop object moving
0001031E 4228 0036                  		clr.b	$36(a0)
00010322                            
00010322                            Obj4E_Animate:
00010322 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010328 6100 B508                  		bsr.w	AnimateSprite
0001032C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010332 6400                       		bcc.s	Obj4E_ChkDel
00010334 6100 E488                  		bsr.w	SpeedToPos
00010338                            
00010338                            Obj4E_ChkDel:
00010338 6100 E4AA                  		bsr.w	DisplaySprite
0001033C 4A28 0036                  		tst.b	$36(a0)
00010340 6600                       		bne.s	locret_F17E
00010342 3028 0008                  		move.w	8(a0),d0
00010346 0240 FF80                  		andi.w	#$FF80,d0
0001034A 3238 F700                  		move.w	($FFFFF700).w,d1
0001034E 0441 0080                  		subi.w	#$80,d1
00010352 0241 FF80                  		andi.w	#$FF80,d1
00010356 9041                       		sub.w	d1,d0
00010358 0C40 0280                  		cmpi.w	#$280,d0
0001035C 6200                       		bhi.s	Obj4E_ChkGone
0001035E                            
0001035E                            locret_F17E:
0001035E 4E75                       		rts	
00010360                            ; ===========================================================================
00010360                            
00010360                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010360 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010364 7000                       		moveq	#0,d0
00010366 1028 0023                  		move.b	$23(a0),d0
0001036A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010370 117C 0008 0024             		move.b	#8,$24(a0)
00010376 4E75                       		rts	
00010378                            ; ===========================================================================
00010378                            
00010378                            Obj4E_Move2:				; XREF: Obj4E_Index
00010378 2268 003C                  		movea.l	$3C(a0),a1
0001037C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010382 6700                       		beq.s	Obj4E_Delete
00010384 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0001038A 0468 0080 0008             		subi.w	#$80,8(a0)
00010390 6000 E452                  		bra.w	DisplaySprite
00010394                            ; ===========================================================================
00010394                            
00010394                            Obj4E_Delete:				; XREF: Obj4E_Index
00010394 6000 E48A                  		bra.w	DeleteObject
00010398                            ; ===========================================================================
00010398                            ; ---------------------------------------------------------------------------
00010398                            ; Object 54 - invisible	lava tag (MZ)
00010398                            ; ---------------------------------------------------------------------------
00010398                            
00010398                            Obj54:					; XREF: Obj_Index
00010398 7000                       		moveq	#0,d0
0001039A 1028 0024                  		move.b	$24(a0),d0
0001039E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
000103A2 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
000103A6                            ; ===========================================================================
000103A6 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
000103A8 0000                       		dc.w Obj54_ChkDel-Obj54_Index
000103AA                            
000103AA 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
000103AE                            ; ===========================================================================
000103AE                            
000103AE                            Obj54_Main:				; XREF: Obj54_Index
000103AE 5428 0024                  		addq.b	#2,$24(a0)
000103B2 7000                       		moveq	#0,d0
000103B4 1028 0028                  		move.b	$28(a0),d0
000103B8 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
000103BE 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
000103C6 117C 0084 0001             		move.b	#$84,1(a0)
000103CC                            
000103CC                            Obj54_ChkDel:				; XREF: Obj54_Index
000103CC 3028 0008                  		move.w	8(a0),d0
000103D0 0240 FF80                  		andi.w	#$FF80,d0
000103D4 3238 F700                  		move.w	($FFFFF700).w,d1
000103D8 0441 0080                  		subi.w	#$80,d1
000103DC 0241 FF80                  		andi.w	#$FF80,d1
000103E0 9041                       		sub.w	d1,d0
000103E2 6B00 E43C                  		bmi.w	DeleteObject
000103E6 0C40 0280                  		cmpi.w	#$280,d0
000103EA 6200 E434                  		bhi.w	DeleteObject
000103EE 4E75                       		rts	
000103F0                            ; ===========================================================================
000103F0                            ; ---------------------------------------------------------------------------
000103F0                            ; Sprite mappings - invisible lava tag (MZ)
000103F0                            ; ---------------------------------------------------------------------------
000103F0                            Map_obj54:
000103F0                            	include "_maps\obj54.asm"
000103F0                            ; ---------------------------------------------------------------------------
000103F0                            ; Sprite mappings - invisible lava tag (MZ)
000103F0                            ; ---------------------------------------------------------------------------
000103F0 0000                       		dc.w byte_F212-Map_obj54
000103F2 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
000103F4 00                         		even
000103F4 00                         		even
000103F4                            
000103F4                            Ani_obj4C:
000103F4                            	include "_anim\obj4C.asm"
000103F4                            ; ---------------------------------------------------------------------------
000103F4                            ; Animation script - geyser of lava (MZ)
000103F4                            ; ---------------------------------------------------------------------------
000103F4 0000                       		dc.w byte_F220-Ani_obj4C
000103F6 0000                       		dc.w byte_F22A-Ani_obj4C
000103F8 0000                       		dc.w byte_F22E-Ani_obj4C
000103FA 0000                       		dc.w byte_F232-Ani_obj4C
000103FC 0000                       		dc.w byte_F23A-Ani_obj4C
000103FE 0000                       		dc.w byte_F23E-Ani_obj4C
00010400 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0001040A 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0001040E 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010412 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0001041A 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0001041E 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010422                            		even
00010422                            		even
00010422                            
00010422                            Ani_obj4E:
00010422                            	include "_anim\obj4E.asm"
00010422                            ; ---------------------------------------------------------------------------
00010422                            ; Animation script - advancing wall of lava (MZ)
00010422                            ; ---------------------------------------------------------------------------
00010422 0000                       		dc.w byte_F244-Ani_obj4E
00010424 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0001042A                            		even
0001042A                            		even
0001042A                            
0001042A                            ; ---------------------------------------------------------------------------
0001042A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001042A                            ; ---------------------------------------------------------------------------
0001042A                            Map_obj4C:
0001042A                            	include "_maps\obj4C.asm"
0001042A                            ; ---------------------------------------------------------------------------
0001042A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001042A                            ; ---------------------------------------------------------------------------
0001042A 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0001042E 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010432 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010436 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0001043A 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0001043E 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010442 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010446 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0001044A 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0001044E 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010452 02                         byte_F272:	dc.b 2
00010453 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010458 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001045D 02                         byte_F27D:	dc.b 2
0001045E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010463 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010468 04                         byte_F288:	dc.b 4
00010469 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001046E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010473 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010478 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001047D 04                         byte_F29D:	dc.b 4
0001047E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010483 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010488 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001048D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010492 06                         byte_F2B2:	dc.b 6
00010493 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010498 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001049D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000104A2 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000104A7 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000104AC E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000104B1 06                         byte_F2D1:	dc.b 6
000104B2 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000104B7 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000104BC F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000104C1 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000104C6 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000104CB E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000104D0 02                         byte_F2F0:	dc.b 2
000104D1 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000104D6 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000104DB 02                         byte_F2FB:	dc.b 2
000104DC E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000104E1 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000104E6 0A                         byte_F306:	dc.b $A
000104E7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000104EC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000104F1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000104F6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000104FB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010500 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010505 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001050A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001050F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010514 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010519 0A                         byte_F339:	dc.b $A
0001051A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001051F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010524 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010529 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001052E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010533 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010538 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001053D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010542 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010547 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001054C 0A                         byte_F36C:	dc.b $A
0001054D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010552 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010557 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001055C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010561 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010566 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001056B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010570 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010575 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001057A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001057F 06                         byte_F39F:	dc.b 6
00010580 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010585 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001058A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001058F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010594 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010599 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001059E 06                         byte_F3BE:	dc.b 6
0001059F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000105A4 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000105A9 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000105AE B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000105B3 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000105B8 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000105BD 06                         byte_F3DD:	dc.b 6
000105BE 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000105C3 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000105C8 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000105CD B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000105D2 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000105D7 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000105DC 10                         byte_F3FC:	dc.b $10
000105DD 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000105E2 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000105E7 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000105EC B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000105F1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000105F6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000105FB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010600 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010605 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001060A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001060F 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010614 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010619 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001061E 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010623 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010628 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001062D 10                         byte_F44D:	dc.b $10
0001062E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010633 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010638 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001063D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010642 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010647 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001064C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010651 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010656 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001065B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010660 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010665 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001066A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001066F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010674 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010679 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001067E 10                         byte_F49E:	dc.b $10
0001067F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010684 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010689 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001068E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010693 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010698 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001069D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000106A2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000106A7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000106AC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000106B1 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000106B6 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000106BB 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000106C0 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000106C5 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000106CA 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000106CF 06                         byte_F4EF:	dc.b 6
000106D0 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000106D5 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000106DA E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000106DF E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000106E4 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000106E9 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000106EE 06                         byte_F50E:	dc.b 6
000106EF E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000106F4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000106F9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000106FE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010703 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010708 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001070D 00                         byte_F52D:	dc.b 0
0001070E                            		even
0001070E                            		even
0001070E                            
0001070E                            ; ---------------------------------------------------------------------------
0001070E                            ; Sprite mappings - advancing wall of lava (MZ)
0001070E                            ; ---------------------------------------------------------------------------
0001070E                            Map_obj4E:
0001070E                            	include "_maps\obj4E.asm"
0001070E                            ; ---------------------------------------------------------------------------
0001070E                            ; Sprite mappings - advancing wall of lava (MZ)
0001070E                            ; ---------------------------------------------------------------------------
0001070E 0000                       		dc.w byte_F538-Map_obj4E
00010710 0000                       		dc.w byte_F566-Map_obj4E
00010712 0000                       		dc.w byte_F594-Map_obj4E
00010714 0000                       		dc.w byte_F5C2-Map_obj4E
00010716 0000                       		dc.w byte_F5F0-Map_obj4E
00010718 09                         byte_F538:	dc.b 9
00010719 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001071E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010723 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010728 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001072D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010732 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010737 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001073C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010741 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010746 09                         byte_F566:	dc.b 9
00010747 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001074C 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010751 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010756 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001075B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010760 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010765 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001076A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001076F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010774 09                         byte_F594:	dc.b 9
00010775 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001077A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001077F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010784 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010789 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001078E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010793 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010798 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001079D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000107A2 09                         byte_F5C2:	dc.b 9
000107A3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000107A8 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000107AD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000107B2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000107B7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000107BC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000107C1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000107C6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000107CB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000107D0 08                         byte_F5F0:	dc.b 8
000107D1 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000107D6 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000107DB E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000107E0 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000107E5 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000107EA 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000107EF E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000107F4 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000107FA 00                         		even
000107FA 00                         		even
000107FA                            
000107FA                            ; ===========================================================================
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            ; Object 40 - Moto Bug enemy (GHZ)
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            
000107FA                            Obj40:					; XREF: Obj_Index
000107FA 7000                       		moveq	#0,d0
000107FC 1028 0024                  		move.b	$24(a0),d0
00010800 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010804 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010808                            ; ===========================================================================
00010808 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001080A 0000                       		dc.w Obj40_Action-Obj40_Index
0001080C 0000                       		dc.w Obj40_Animate-Obj40_Index
0001080E 0000                       		dc.w Obj40_Delete-Obj40_Index
00010810                            ; ===========================================================================
00010810                            
00010810                            Obj40_Main:				; XREF: Obj40_Index
00010810 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010818 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001081E 117C 0004 0001             		move.b	#4,1(a0)
00010824 117C 0004 0018             		move.b	#4,$18(a0)
0001082A 117C 0014 0019             		move.b	#$14,$19(a0)
00010830 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010834 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010836 117C 000E 0016             		move.b	#$E,$16(a0)
0001083C 117C 0008 0017             		move.b	#8,$17(a0)
00010842 117C 000C 0020             		move.b	#$C,$20(a0)
00010848 6100 DF02                  		bsr.w	ObjectFall
0001084C 4EB9 0000 0000             		jsr	ObjHitFloor
00010852 4A41                       		tst.w	d1
00010854 6A00                       		bpl.s	locret_F68A
00010856 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001085A 317C 0000 0012             		move.w	#0,$12(a0)
00010860 5428 0024                  		addq.b	#2,$24(a0)
00010864 0868 0000 0022             		bchg	#0,$22(a0)
0001086A                            
0001086A                            locret_F68A:
0001086A 4E75                       		rts	
0001086C                            ; ===========================================================================
0001086C                            
0001086C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001086C 5828 0024                  		addq.b	#4,$24(a0)
00010870 6000 0000                  		bra.w	Obj40_Animate
00010874                            ; ===========================================================================
00010874                            
00010874                            Obj40_Action:				; XREF: Obj40_Index
00010874 7000                       		moveq	#0,d0
00010876 1028 0025                  		move.b	$25(a0),d0
0001087A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001087E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010882 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010888 6100 AFA8                  		bsr.w	AnimateSprite
0001088C                            
0001088C                            ; ---------------------------------------------------------------------------
0001088C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001088C                            ; ---------------------------------------------------------------------------
0001088C                            
0001088C                            MarkObjGone:
0001088C 3028 0008                  		move.w	8(a0),d0
00010890 0240 FF80                  		andi.w	#$FF80,d0
00010894 3238 F700                  		move.w	($FFFFF700).w,d1
00010898 0441 0080                  		subi.w	#$80,d1
0001089C 0241 FF80                  		andi.w	#$FF80,d1
000108A0 9041                       		sub.w	d1,d0
000108A2 0C40 0280                  		cmpi.w	#$280,d0
000108A6 6200 0000                  		bhi.w	Mark_ChkGone
000108AA 6000 DF38                  		bra.w	DisplaySprite
000108AE                            ; ===========================================================================
000108AE                            
000108AE                            Mark_ChkGone:
000108AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108B2 7000                       		moveq	#0,d0
000108B4 1028 0023                  		move.b	$23(a0),d0
000108B8 6700                       		beq.s	Mark_Delete
000108BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000108C0                            
000108C0                            Mark_Delete:
000108C0 6000 DF5E                  		bra.w	DeleteObject
000108C4                            
000108C4                            ; ===========================================================================
000108C4 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000108C6 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000108C8                            ; ===========================================================================
000108C8                            
000108C8                            Obj40_Move:				; XREF: Obj40_Index2
000108C8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000108CC 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000108CE 5428 0025                  		addq.b	#2,$25(a0)
000108D2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000108D8 117C 0001 001C             		move.b	#1,$1C(a0)
000108DE 0868 0000 0022             		bchg	#0,$22(a0)
000108E4 6600                       		bne.s	locret_F70A
000108E6 4468 0010                  		neg.w	$10(a0)		; change direction
000108EA                            
000108EA                            locret_F70A:
000108EA 4E75                       		rts	
000108EC                            ; ===========================================================================
000108EC                            
000108EC                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000108EC 6100 DED0                  		bsr.w	SpeedToPos
000108F0 4EB9 0000 0000             		jsr	ObjHitFloor
000108F6 0C41 FFF8                  		cmpi.w	#-8,d1
000108FA 6D00                       		blt.s	Obj40_Pause
000108FC 0C41 000C                  		cmpi.w	#$C,d1
00010900 6C00                       		bge.s	Obj40_Pause
00010902 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010906 5328 0033                  		subq.b	#1,$33(a0)
0001090A 6A00                       		bpl.s	locret_F756
0001090C 117C 000F 0033             		move.b	#$F,$33(a0)
00010912 6100 E356                  		bsr.w	SingleObjLoad
00010916 6600                       		bne.s	locret_F756
00010918 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001091C 3368 0008 0008             		move.w	8(a0),8(a1)
00010922 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010928 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001092E 137C 0002 001C             		move.b	#2,$1C(a1)
00010934                            
00010934                            locret_F756:
00010934 4E75                       		rts	
00010936                            ; ===========================================================================
00010936                            
00010936                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010936 5528 0025                  		subq.b	#2,$25(a0)
0001093A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010940 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010946 117C 0000 001C             		move.b	#0,$1C(a0)
0001094C 4E75                       		rts	
0001094E                            ; ===========================================================================
0001094E                            
0001094E                            Obj40_Animate:				; XREF: Obj40_Index
0001094E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010954 6100 AEDC                  		bsr.w	AnimateSprite
00010958 6000 DE8A                  		bra.w	DisplaySprite
0001095C                            ; ===========================================================================
0001095C                            
0001095C                            Obj40_Delete:				; XREF: Obj40_Index
0001095C 6000 DEC2                  		bra.w	DeleteObject
00010960                            ; ===========================================================================
00010960                            Ani_obj40:
00010960                            	include "_anim\obj40.asm"
00010960                            ; ---------------------------------------------------------------------------
00010960                            ; Animation script - Motobug enemy
00010960                            ; ---------------------------------------------------------------------------
00010960 0000                       		dc.w byte_F788-Ani_obj40
00010962 0000                       		dc.w byte_F78C-Ani_obj40
00010964 0000                       		dc.w byte_F792-Ani_obj40
00010966 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001096A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010970 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001097E                            		even
0001097E                            		even
0001097E                            
0001097E                            ; ---------------------------------------------------------------------------
0001097E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001097E                            ; ---------------------------------------------------------------------------
0001097E                            Map_obj40:
0001097E                            	include "_maps\obj40.asm"
0001097E                            Map_cedc:
0001097E 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010980 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010982 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010984 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010986 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
00010988 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001098A 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0001098C 04                         Map_cedc_E: 	dc.b $4
0001098D F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010992 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010997 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001099C 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000109A1 04                         Map_cedc_23: 	dc.b $4
000109A2 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
000109A7 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
000109AC F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
000109B1 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
000109B6 05                         Map_cedc_38: 	dc.b $5
000109B7 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000109BC 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
000109C1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000109C6 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
000109CB 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
000109D0 01                         Map_cedc_52: 	dc.b $1
000109D1 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
000109D6 01                         Map_cedc_58: 	dc.b $1
000109D7 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
000109DC 01                         Map_cedc_5E: 	dc.b $1
000109DD FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
000109E2 00                         Map_cedc_64: 	dc.b $0
000109E4 00                         	even
000109E4 00                         	even
000109E4                            
000109E4                            ; ===========================================================================
000109E4                            ; ---------------------------------------------------------------------------
000109E4                            ; Object 4F - blank
000109E4                            ; ---------------------------------------------------------------------------
000109E4                            
000109E4                            Obj4F:					; XREF: Obj_Index
000109E4 4E75                       		rts	
000109E6                            
000109E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000109E6                            
000109E6                            
000109E6                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000109E6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000109EA D047                       		add.w	d7,d0
000109EC 0240 0003                  		andi.w	#3,d0
000109F0 6600                       		bne.s	loc_F836
000109F2 7600                       		moveq	#0,d3
000109F4 1628 0019                  		move.b	$19(a0),d3
000109F8 4A68 0010                  		tst.w	$10(a0)
000109FC 6B00                       		bmi.s	loc_F82C
000109FE 6100 0000                  		bsr.w	ObjHitWallRight
00010A02 4A41                       		tst.w	d1
00010A04 6A00                       		bpl.s	loc_F836
00010A06                            
00010A06                            loc_F828:
00010A06 7001                       		moveq	#1,d0
00010A08 4E75                       		rts	
00010A0A                            ; ===========================================================================
00010A0A                            
00010A0A                            loc_F82C:
00010A0A 4643                       		not.w	d3
00010A0C 6100 0000                  		bsr.w	ObjHitWallLeft
00010A10 4A41                       		tst.w	d1
00010A12 6BF2                       		bmi.s	loc_F828
00010A14                            
00010A14                            loc_F836:
00010A14 7000                       		moveq	#0,d0
00010A16 4E75                       		rts	
00010A18                            ; End of function Obj50_ChkWall
00010A18                            
00010A18                            ; ===========================================================================
00010A18                            ; ---------------------------------------------------------------------------
00010A18                            ; Object 50 - Yadrin enemy (SYZ)
00010A18                            ; ---------------------------------------------------------------------------
00010A18                            
00010A18                            Obj50:					; XREF: Obj_Index
00010A18 7000                       		moveq	#0,d0
00010A1A 1028 0024                  		move.b	$24(a0),d0
00010A1E 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010A22 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010A26                            ; ===========================================================================
00010A26 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010A28 0000                       		dc.w Obj50_Action-Obj50_Index
00010A2A                            ; ===========================================================================
00010A2A                            
00010A2A                            Obj50_Main:				; XREF: Obj50_Index
00010A2A 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010A32 317C 247B 0002             		move.w	#$247B,2(a0)
00010A38 117C 0004 0001             		move.b	#4,1(a0)
00010A3E 117C 0004 0018             		move.b	#4,$18(a0)
00010A44 117C 0014 0019             		move.b	#$14,$19(a0)
00010A4A 117C 0011 0016             		move.b	#$11,$16(a0)
00010A50 117C 0008 0017             		move.b	#8,$17(a0)
00010A56 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010A5C 6100 DCEE                  		bsr.w	ObjectFall
00010A60 6100 0000                  		bsr.w	ObjHitFloor
00010A64 4A41                       		tst.w	d1
00010A66 6A00                       		bpl.s	locret_F89E
00010A68 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010A6C 317C 0000 0012             		move.w	#0,$12(a0)
00010A72 5428 0024                  		addq.b	#2,$24(a0)
00010A76 0868 0000 0022             		bchg	#0,$22(a0)
00010A7C                            
00010A7C                            locret_F89E:
00010A7C 4E75                       		rts	
00010A7E                            ; ===========================================================================
00010A7E                            
00010A7E                            Obj50_Action:				; XREF: Obj50_Index
00010A7E 7000                       		moveq	#0,d0
00010A80 1028 0025                  		move.b	$25(a0),d0
00010A84 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010A88 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010A8C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010A92 6100 AD9E                  		bsr.w	AnimateSprite
00010A96 6000 FDF4                  		bra.w	MarkObjGone
00010A9A                            ; ===========================================================================
00010A9A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010A9C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010A9E                            ; ===========================================================================
00010A9E                            
00010A9E                            Obj50_Move:				; XREF: Obj50_Index2
00010A9E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010AA2 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010AA4 5428 0025                  		addq.b	#2,$25(a0)
00010AA8 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010AAE 117C 0001 001C             		move.b	#1,$1C(a0)
00010AB4 0868 0000 0022             		bchg	#0,$22(a0)
00010ABA 6600                       		bne.s	locret_F8E2
00010ABC 4468 0010                  		neg.w	$10(a0)		; change direction
00010AC0                            
00010AC0                            locret_F8E2:
00010AC0 4E75                       		rts	
00010AC2                            ; ===========================================================================
00010AC2                            
00010AC2                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010AC2 6100 DCFA                  		bsr.w	SpeedToPos
00010AC6 6100 0000                  		bsr.w	ObjHitFloor
00010ACA 0C41 FFF8                  		cmpi.w	#-8,d1
00010ACE 6D00                       		blt.s	Obj50_Pause
00010AD0 0C41 000C                  		cmpi.w	#$C,d1
00010AD4 6C00                       		bge.s	Obj50_Pause
00010AD6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010ADA 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010ADE 6600                       		bne.s	Obj50_Pause
00010AE0 4E75                       		rts	
00010AE2                            ; ===========================================================================
00010AE2                            
00010AE2                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010AE2 5528 0025                  		subq.b	#2,$25(a0)
00010AE6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010AEC 317C 0000 0010             		move.w	#0,$10(a0)
00010AF2 117C 0000 001C             		move.b	#0,$1C(a0)
00010AF8 4E75                       		rts	
00010AFA                            ; ===========================================================================
00010AFA                            Ani_obj50:
00010AFA                            	include "_anim\obj50.asm"
00010AFA                            ; ---------------------------------------------------------------------------
00010AFA                            ; Animation script - Yadrin enemy
00010AFA                            ; ---------------------------------------------------------------------------
00010AFA 0000                       		dc.w byte_F920-Ani_obj50
00010AFC 0000                       		dc.w byte_F924-Ani_obj50
00010AFE 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010B02 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010B0C                            		even
00010B0C                            		even
00010B0C                            
00010B0C                            ; ---------------------------------------------------------------------------
00010B0C                            ; Sprite mappings - Yadrin enemy (SYZ)
00010B0C                            ; ---------------------------------------------------------------------------
00010B0C                            Map_obj50:
00010B0C                            	include "_maps\obj50.asm"
00010B0C                            Map_ff24:
00010B0C 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010B0E 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010B10 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010B12 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010B14 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010B16 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010B18 05                         Map_ff24_C: 	dc.b $5
00010B19 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010B1E FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010B23 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B28 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B2D 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010B32 05                         Map_ff24_26: 	dc.b $5
00010B33 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010B38 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010B3D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B42 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B47 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010B4C 05                         Map_ff24_40: 	dc.b $5
00010B4D F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010B52 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010B57 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B5C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B61 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010B66 05                         Map_ff24_5A: 	dc.b $5
00010B67 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010B6C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010B71 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B76 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B7B 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B80 05                         Map_ff24_74: 	dc.b $5
00010B81 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010B86 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010B8B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B90 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B95 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B9A 05                         Map_ff24_8E: 	dc.b $5
00010B9B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010BA0 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010BA5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010BAA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010BAF 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010BB4                            	even
00010BB4                            	even
00010BB4                            
00010BB4                            ; ---------------------------------------------------------------------------
00010BB4                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010BB4                            ;
00010BB4                            ; variables:
00010BB4                            ; d1 = width
00010BB4                            ; d2 = height /	2 (when	jumping)
00010BB4                            ; d3 = height /	2 (when	walking)
00010BB4                            ; d4 = x-axis position
00010BB4                            ; ---------------------------------------------------------------------------
00010BB4                            
00010BB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010BB4                            
00010BB4                            
00010BB4                            SolidObject:
00010BB4 4A28 0025                  		tst.b	$25(a0)
00010BB8 6700 0000                  		beq.w	loc_FAC8
00010BBC 3401                       		move.w	d1,d2
00010BBE D442                       		add.w	d2,d2
00010BC0 43F8 D000                  		lea	($FFFFD000).w,a1
00010BC4 0829 0001 0022             		btst	#1,$22(a1)
00010BCA 6600                       		bne.s	loc_F9FE
00010BCC 3029 0008                  		move.w	8(a1),d0
00010BD0 9068 0008                  		sub.w	8(a0),d0
00010BD4 D041                       		add.w	d1,d0
00010BD6 6B00                       		bmi.s	loc_F9FE
00010BD8 B042                       		cmp.w	d2,d0
00010BDA 6500                       		bcs.s	loc_FA12
00010BDC                            
00010BDC                            loc_F9FE:
00010BDC 08A9 0003 0022             		bclr	#3,$22(a1)
00010BE2 08A8 0003 0022             		bclr	#3,$22(a0)
00010BE8 4228 0025                  		clr.b	$25(a0)
00010BEC 7800                       		moveq	#0,d4
00010BEE 4E75                       		rts	
00010BF0                            ; ===========================================================================
00010BF0                            
00010BF0                            loc_FA12:
00010BF0 3404                       		move.w	d4,d2
00010BF2 4EB9 0000 8AC0             		jsr	MvSonicOnPtfm 
00010BF8 7800                       		moveq	#0,d4
00010BFA 4E75                       		rts	
00010BFC                            ; ===========================================================================
00010BFC                            
00010BFC                            SolidObject71:				; XREF: Obj71_Solid
00010BFC 4A28 0025                  		tst.b	$25(a0)
00010C00 6700 0000                  		beq.w	loc_FAD0
00010C04 3401                       		move.w	d1,d2
00010C06 D442                       		add.w	d2,d2
00010C08 43F8 D000                  		lea	($FFFFD000).w,a1
00010C0C 0829 0001 0022             		btst	#1,$22(a1)
00010C12 6600                       		bne.s	loc_FA44
00010C14 3029 0008                  		move.w	8(a1),d0
00010C18 9068 0008                  		sub.w	8(a0),d0
00010C1C D041                       		add.w	d1,d0
00010C1E 6B00                       		bmi.s	loc_FA44
00010C20 B042                       		cmp.w	d2,d0
00010C22 6500                       		bcs.s	loc_FA58
00010C24                            
00010C24                            loc_FA44:
00010C24 08A9 0003 0022             		bclr	#3,$22(a1)
00010C2A 08A8 0003 0022             		bclr	#3,$22(a0)
00010C30 4228 0025                  		clr.b	$25(a0)
00010C34 7800                       		moveq	#0,d4
00010C36 4E75                       		rts	
00010C38                            ; ===========================================================================
00010C38                            
00010C38                            loc_FA58:
00010C38 3404                       		move.w	d4,d2
00010C3A                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010C3A 7800                       		moveq	#0,d4
00010C3C 4E75                       		rts	
00010C3E                            ; ===========================================================================
00010C3E                            
00010C3E                            SolidObject2F:				; XREF: Obj2F_Solid
00010C3E 43F8 D000                  		lea	($FFFFD000).w,a1
00010C42 4A28 0001                  		tst.b	1(a0)
00010C46 6A00 0000                  		bpl.w	loc_FB92
00010C4A 3029 0008                  		move.w	8(a1),d0
00010C4E 9068 0008                  		sub.w	8(a0),d0
00010C52 D041                       		add.w	d1,d0
00010C54 6B00 0000                  		bmi.w	loc_FB92
00010C58 3601                       		move.w	d1,d3
00010C5A D643                       		add.w	d3,d3
00010C5C B043                       		cmp.w	d3,d0
00010C5E 6200 0000                  		bhi.w	loc_FB92
00010C62 3A00                       		move.w	d0,d5
00010C64 0828 0000 0001             		btst	#0,1(a0)
00010C6A 6700                       		beq.s	loc_FA94
00010C6C 4645                       		not.w	d5
00010C6E DA43                       		add.w	d3,d5
00010C70                            
00010C70                            loc_FA94:
00010C70 E24D                       		lsr.w	#1,d5
00010C72 7600                       		moveq	#0,d3
00010C74 1632 5000                  		move.b	(a2,d5.w),d3
00010C78 9612                       		sub.b	(a2),d3
00010C7A 3A28 000C                  		move.w	$C(a0),d5
00010C7E 9A43                       		sub.w	d3,d5
00010C80 1629 0016                  		move.b	$16(a1),d3
00010C84 4883                       		ext.w	d3
00010C86 D443                       		add.w	d3,d2
00010C88 3629 000C                  		move.w	$C(a1),d3
00010C8C 9645                       		sub.w	d5,d3
00010C8E 5843                       		addq.w	#4,d3
00010C90 D642                       		add.w	d2,d3
00010C92 6B00 0000                  		bmi.w	loc_FB92
00010C96 3802                       		move.w	d2,d4
00010C98 D844                       		add.w	d4,d4
00010C9A B644                       		cmp.w	d4,d3
00010C9C 6400 0000                  		bcc.w	loc_FB92
00010CA0 6000 0000                  		bra.w	loc_FB0E
00010CA4                            ; ===========================================================================
00010CA4                            
00010CA4                            loc_FAC8:
00010CA4 4A28 0001                  		tst.b	1(a0)
00010CA8 6A00 0000                  		bpl.w	loc_FB92
00010CAC                            
00010CAC                            loc_FAD0:
00010CAC 43F8 D000                  		lea	($FFFFD000).w,a1
00010CB0 3029 0008                  		move.w	8(a1),d0
00010CB4 9068 0008                  		sub.w	8(a0),d0
00010CB8 D041                       		add.w	d1,d0
00010CBA 6B00 0000                  		bmi.w	loc_FB92
00010CBE 3601                       		move.w	d1,d3
00010CC0 D643                       		add.w	d3,d3
00010CC2 B043                       		cmp.w	d3,d0
00010CC4 6200 0000                  		bhi.w	loc_FB92
00010CC8 1629 0016                  		move.b	$16(a1),d3
00010CCC 4883                       		ext.w	d3
00010CCE D443                       		add.w	d3,d2
00010CD0 3629 000C                  		move.w	$C(a1),d3
00010CD4 9668 000C                  		sub.w	$C(a0),d3
00010CD8 5843                       		addq.w	#4,d3
00010CDA D642                       		add.w	d2,d3
00010CDC 6B00 0000                  		bmi.w	loc_FB92
00010CE0 3802                       		move.w	d2,d4
00010CE2 D844                       		add.w	d4,d4
00010CE4 B644                       		cmp.w	d4,d3
00010CE6 6400 0000                  		bcc.w	loc_FB92
00010CEA                            
00010CEA                            loc_FB0E:
00010CEA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010CEE 6B00 0000                  		bmi.w	loc_FB92
00010CF2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010CF8 6400 0000                  		bcc.w	loc_FB92
00010CFC 4A78 FE08                  		tst.w	($FFFFFE08).w
00010D00 6600 0000                  		bne.w	loc_FBAC
00010D04 3A00                       		move.w	d0,d5
00010D06 B240                       		cmp.w	d0,d1
00010D08 6400                       		bcc.s	loc_FB36
00010D0A D241                       		add.w	d1,d1
00010D0C 9041                       		sub.w	d1,d0
00010D0E 3A00                       		move.w	d0,d5
00010D10 4445                       		neg.w	d5
00010D12                            
00010D12                            loc_FB36:
00010D12 3203                       		move.w	d3,d1
00010D14 B443                       		cmp.w	d3,d2
00010D16 6400                       		bcc.s	loc_FB44
00010D18 5943                       		subq.w	#4,d3
00010D1A 9644                       		sub.w	d4,d3
00010D1C 3203                       		move.w	d3,d1
00010D1E 4441                       		neg.w	d1
00010D20                            
00010D20                            loc_FB44:
00010D20 BA41                       		cmp.w	d1,d5
00010D22 6200 0000                  		bhi.w	loc_FBB0
00010D26 0C41 0004                  		cmpi.w	#4,d1
00010D2A 6300                       		bls.s	loc_FB8C
00010D2C 4A40                       		tst.w	d0
00010D2E 6700                       		beq.s	loc_FB70
00010D30 6B00                       		bmi.s	loc_FB5E
00010D32 4A69 0010                  		tst.w	$10(a1)
00010D36 6B00                       		bmi.s	loc_FB70
00010D38 6000                       		bra.s	loc_FB64
00010D3A                            ; ===========================================================================
00010D3A                            
00010D3A                            loc_FB5E:
00010D3A 4A69 0010                  		tst.w	$10(a1)
00010D3E 6A00                       		bpl.s	loc_FB70
00010D40                            
00010D40                            loc_FB64:
00010D40 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010D46 337C 0000 0010             		move.w	#0,$10(a1)
00010D4C                            
00010D4C                            loc_FB70:
00010D4C 9169 0008                  		sub.w	d0,8(a1)
00010D50 0829 0001 0022             		btst	#1,$22(a1)
00010D56 6600                       		bne.s	loc_FB8C
00010D58 08E9 0005 0022             		bset	#5,$22(a1)
00010D5E 08E8 0005 0022             		bset	#5,$22(a0)
00010D64 7801                       		moveq	#1,d4
00010D66 4E75                       		rts	
00010D68                            ; ===========================================================================
00010D68                            
00010D68                            loc_FB8C:
00010D68 6100                       		bsr.s	loc_FBA0
00010D6A 7801                       		moveq	#1,d4
00010D6C 4E75                       		rts	
00010D6E                            ; ===========================================================================
00010D6E                            
00010D6E                            loc_FB92:
00010D6E 0828 0005 0022             		btst	#5,$22(a0)
00010D74 6700                       		beq.s	loc_FBAC
00010D76 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010D7C                            
00010D7C                            loc_FBA0:
00010D7C 08A8 0005 0022             		bclr	#5,$22(a0)
00010D82 08A9 0005 0022             		bclr	#5,$22(a1)
00010D88                            
00010D88                            loc_FBAC:
00010D88 7800                       		moveq	#0,d4
00010D8A 4E75                       		rts	
00010D8C                            ; ===========================================================================
00010D8C                            
00010D8C                            loc_FBB0:
00010D8C 4A43                       		tst.w	d3
00010D8E 6B00                       		bmi.s	loc_FBBC
00010D90 0C43 0010                  		cmpi.w	#$10,d3
00010D94 6500                       		bcs.s	loc_FBEE
00010D96 60D6                       		bra.s	loc_FB92
00010D98                            ; ===========================================================================
00010D98                            
00010D98                            loc_FBBC:
00010D98 4A69 0012                  		tst.w	$12(a1)
00010D9C 6700                       		beq.s	loc_FBD6
00010D9E 6A00                       		bpl.s	loc_FBD2
00010DA0 4A43                       		tst.w	d3
00010DA2 6A00                       		bpl.s	loc_FBD2
00010DA4 9769 000C                  		sub.w	d3,$C(a1)
00010DA8 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010DAE                            
00010DAE                            loc_FBD2:
00010DAE 78FF                       		moveq	#-1,d4
00010DB0 4E75                       		rts	
00010DB2                            ; ===========================================================================
00010DB2                            
00010DB2                            loc_FBD6:
00010DB2 0829 0001 0022             		btst	#1,$22(a1)
00010DB8 66F4                       		bne.s	loc_FBD2
00010DBA 2F08                       		move.l	a0,-(sp)
00010DBC 2049                       		movea.l	a1,a0
00010DBE 4EB9 0000 0000             		jsr	KillSonic
00010DC4 205F                       		movea.l	(sp)+,a0
00010DC6 78FF                       		moveq	#-1,d4
00010DC8 4E75                       		rts	
00010DCA                            ; ===========================================================================
00010DCA                            
00010DCA                            loc_FBEE:
00010DCA 5943                       		subq.w	#4,d3
00010DCC 7200                       		moveq	#0,d1
00010DCE 1228 0019                  		move.b	$19(a0),d1
00010DD2 3401                       		move.w	d1,d2
00010DD4 D442                       		add.w	d2,d2
00010DD6 D269 0008                  		add.w	8(a1),d1
00010DDA 9268 0008                  		sub.w	8(a0),d1
00010DDE 6B00                       		bmi.s	loc_FC28
00010DE0 B242                       		cmp.w	d2,d1
00010DE2 6400                       		bcc.s	loc_FC28
00010DE4 4A69 0012                  		tst.w	$12(a1)
00010DE8 6B00                       		bmi.s	loc_FC28
00010DEA 9769 000C                  		sub.w	d3,$C(a1)
00010DEE 5369 000C                  		subq.w	#1,$C(a1)
00010DF2 6100                       		bsr.s	sub_FC2C
00010DF4 117C 0002 0025             		move.b	#2,$25(a0)
00010DFA 08E8 0003 0022             		bset	#3,$22(a0)
00010E00 78FF                       		moveq	#-1,d4
00010E02 4E75                       		rts	
00010E04                            ; ===========================================================================
00010E04                            
00010E04                            loc_FC28:
00010E04 7800                       		moveq	#0,d4
00010E06 4E75                       		rts	
00010E08                            ; End of function SolidObject
00010E08                            
00010E08                            
00010E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E08                            
00010E08                            
00010E08                            sub_FC2C:				; XREF: SolidObject
00010E08 0829 0003 0022             		btst	#3,$22(a1)
00010E0E 6700                       		beq.s	loc_FC4E
00010E10 7000                       		moveq	#0,d0
00010E12 1029 003D                  		move.b	$3D(a1),d0
00010E16 ED48                       		lsl.w	#6,d0
00010E18 0680 00FF D000             		addi.l	#$FFD000,d0
00010E1E 2440                       		movea.l	d0,a2
00010E20 08AA 0003 0022             		bclr	#3,$22(a2)
00010E26 422A 0025                  		clr.b	$25(a2)
00010E2A                            
00010E2A                            loc_FC4E:
00010E2A 3008                       		move.w	a0,d0
00010E2C 0440 D000                  		subi.w	#-$3000,d0
00010E30 EC48                       		lsr.w	#6,d0
00010E32 0240 007F                  		andi.w	#$7F,d0
00010E36 1340 003D                  		move.b	d0,$3D(a1)
00010E3A 137C 0000 0026             		move.b	#0,$26(a1)
00010E40 337C 0000 0012             		move.w	#0,$12(a1)
00010E46 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010E4C 0829 0001 0022             		btst	#1,$22(a1)
00010E52 6700                       		beq.s	loc_FC84
00010E54 2F08                       		move.l	a0,-(sp)
00010E56 2049                       		movea.l	a1,a0
00010E58 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010E5E 205F                       		movea.l	(sp)+,a0
00010E60                            
00010E60                            loc_FC84:
00010E60 08E9 0003 0022             		bset	#3,$22(a1)
00010E66 08E8 0003 0022             		bset	#3,$22(a0)
00010E6C 4E75                       		rts	
00010E6E                            ; End of function sub_FC2C
00010E6E                            
00010E6E                            ; ===========================================================================
00010E6E                            ; ---------------------------------------------------------------------------
00010E6E                            ; Object 51 - smashable	green block (MZ)
00010E6E                            ; ---------------------------------------------------------------------------
00010E6E                            
00010E6E                            Obj51:					; XREF: Obj_Index
00010E6E 7000                       		moveq	#0,d0
00010E70 1028 0024                  		move.b	$24(a0),d0
00010E74 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010E78 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010E7C 6000 FA0E                  		bra.w	MarkObjGone
00010E80                            ; ===========================================================================
00010E80 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010E82 0000                       		dc.w Obj51_Solid-Obj51_Index
00010E84 0000                       		dc.w Obj51_Display-Obj51_Index
00010E86                            ; ===========================================================================
00010E86                            
00010E86                            Obj51_Main:				; XREF: Obj51_Index
00010E86 5428 0024                  		addq.b	#2,$24(a0)
00010E8A 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010E92 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010E98 117C 0004 0001             		move.b	#4,1(a0)
00010E9E 117C 0010 0019             		move.b	#$10,$19(a0)
00010EA4 117C 0004 0018             		move.b	#4,$18(a0)
00010EAA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010EB0                            
00010EB0                            Obj51_Solid:				; XREF: Obj51_Index
00010EB0 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010EB6 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010EBC 323C 001B                  		move.w	#$1B,d1
00010EC0 343C 0010                  		move.w	#$10,d2
00010EC4 363C 0011                  		move.w	#$11,d3
00010EC8 3828 0008                  		move.w	8(a0),d4
00010ECC 6100 FCE6                  		bsr.w	SolidObject
00010ED0 0828 0003 0022             		btst	#3,$22(a0)
00010ED6 6600                       		bne.s	Obj51_Smash
00010ED8                            
00010ED8                            locret_FCFC:
00010ED8 4E75                       		rts	
00010EDA                            ; ===========================================================================
00010EDA                            
00010EDA                            Obj51_Smash:				; XREF: Obj51_Solid
00010EDA 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010EE0 66F6                       		bne.s	locret_FCFC	; if not, branch
00010EE2 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010EE8 08E9 0002 0022             		bset	#2,$22(a1)
00010EEE 137C 000E 0016             		move.b	#$E,$16(a1)
00010EF4 137C 0007 0017             		move.b	#7,$17(a1)
00010EFA 137C 0002 001C             		move.b	#2,$1C(a1)
00010F00 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010F06 08E9 0001 0022             		bset	#1,$22(a1)
00010F0C 08A9 0003 0022             		bclr	#3,$22(a1)
00010F12 137C 0002 0024             		move.b	#2,$24(a1)
00010F18 08A8 0003 0022             		bclr	#3,$22(a0)
00010F1E 4228 0025                  		clr.b	$25(a0)
00010F22 117C 0001 001A             		move.b	#1,$1A(a0)
00010F28 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010F2E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010F30 343C 0038                  		move.w	#$38,d2
00010F34 6100 D456                  		bsr.w	SmashObject
00010F38 6100 DD30                  		bsr.w	SingleObjLoad
00010F3C 6600                       		bne.s	Obj51_Display
00010F3E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010F42 3368 0008 0008             		move.w	8(a0),8(a1)
00010F48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010F4E 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010F52 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010F56 0C42 0006                  		cmpi.w	#6,d2
00010F5A 6500                       		bcs.s	Obj51_Bonus
00010F5C 7406                       		moveq	#6,d2
00010F5E                            
00010F5E                            Obj51_Bonus:
00010F5E 7000                       		moveq	#0,d0
00010F60 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010F64 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010F6A 6500                       		bcs.s	loc_FD98	; if not, branch
00010F6C 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010F70 740A                       		moveq	#10,d2
00010F72                            
00010F72                            loc_FD98:
00010F72 4EB9 0000 0000             		jsr	AddPoints
00010F78 E24A                       		lsr.w	#1,d2
00010F7A 1342 001A                  		move.b	d2,$1A(a1)
00010F7E                            
00010F7E                            Obj51_Display:				; XREF: Obj51_Index
00010F7E 6100 D83E                  		bsr.w	SpeedToPos
00010F82 0668 0038 0012             		addi.w	#$38,$12(a0)
00010F88 6100 D85A                  		bsr.w	DisplaySprite
00010F8C 4A28 0001                  		tst.b	1(a0)
00010F90 6A00 D88E                  		bpl.w	DeleteObject
00010F94 4E75                       		rts	
00010F96                            ; ===========================================================================
00010F96 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010F9A FF00 FF00                  		dc.w $FF00, $FF00
00010F9E 0200 FE00                  		dc.w $200, $FE00
00010FA2 0100 FF00                  		dc.w $100, $FF00
00010FA6                            
00010FA6 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE                            ; Sprite mappings - smashable green block (MZ)
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE                            Map_obj51:
00010FAE                            	include "_maps\obj51.asm"
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE                            ; Sprite mappings - smashable green block (MZ)
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE 0000                       		dc.w byte_FDD8-Map_obj51
00010FB0 0000                       		dc.w byte_FDE3-Map_obj51
00010FB2 02                         byte_FDD8:	dc.b 2
00010FB3 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010FB8 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010FBD 04                         byte_FDE3:	dc.b 4
00010FBE F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010FC3 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010FC8 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010FCD 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010FD2                            		even
00010FD2                            		even
00010FD2                            
00010FD2                            ; ===========================================================================
00010FD2                            ; ---------------------------------------------------------------------------
00010FD2                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010FD2                            ; ---------------------------------------------------------------------------
00010FD2                            
00010FD2                            Obj52:					; XREF: Obj_Index
00010FD2 7000                       		moveq	#0,d0
00010FD4 1028 0024                  		move.b	$24(a0),d0
00010FD8 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010FDC 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010FE0                            ; ===========================================================================
00010FE0 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010FE2 0000                       		dc.w Obj52_Platform-Obj52_Index
00010FE4 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010FE6                            
00010FE6 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010FE8 2001                       		dc.b $20, 1
00010FEA 2002                       		dc.b $20, 2
00010FEC 4003                       		dc.b $40, 3
00010FEE 3004                       		dc.b $30, 4
00010FF0                            ; ===========================================================================
00010FF0                            
00010FF0                            Obj52_Main:				; XREF: Obj52_Index
00010FF0 5428 0024                  		addq.b	#2,$24(a0)
00010FF4 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010FFC 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011002 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011008 6600                       		bne.s	loc_FE44
0001100A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011012 317C 43BC 0002             		move.w	#$43BC,2(a0)
00011018 117C 0007 0016             		move.b	#7,$16(a0)
0001101E                            
0001101E                            loc_FE44:
0001101E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011024 6600                       		bne.s	loc_FE60
00011026 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001102C 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011032 6700                       		beq.s	loc_FE60	; if yes, branch
00011034 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001103A                            
0001103A                            loc_FE60:
0001103A 117C 0004 0001             		move.b	#4,1(a0)
00011040 7000                       		moveq	#0,d0
00011042 1028 0028                  		move.b	$28(a0),d0
00011046 E648                       		lsr.w	#3,d0
00011048 0240 001E                  		andi.w	#$1E,d0
0001104C 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011050 115A 0019                  		move.b	(a2)+,$19(a0)
00011054 115A 001A                  		move.b	(a2)+,$1A(a0)
00011058 117C 0004 0018             		move.b	#4,$18(a0)
0001105E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011064 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001106A 0228 000F 0028             		andi.b	#$F,$28(a0)
00011070                            
00011070                            Obj52_Platform:				; XREF: Obj52_Index
00011070 6100 0000                  		bsr.w	Obj52_Move
00011074 7200                       		moveq	#0,d1
00011076 1228 0019                  		move.b	$19(a0),d1
0001107A 4EB9 0000 83EE             		jsr	(PlatformObject).l
00011080 6000                       		bra.s	Obj52_ChkDel
00011082                            ; ===========================================================================
00011082                            
00011082                            Obj52_StandOn:				; XREF: Obj52_Index
00011082 7200                       		moveq	#0,d1
00011084 1228 0019                  		move.b	$19(a0),d1
00011088 4EB9 0000 8562             		jsr	(ExitPlatform).l
0001108E 3F28 0008                  		move.w	8(a0),-(sp)
00011092 6100 0000                  		bsr.w	Obj52_Move
00011096 341F                       		move.w	(sp)+,d2
00011098 4EB9 0000 8ACC             		jsr	(MvSonicOnPtfm2).l
0001109E                            
0001109E                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001109E 3028 0030                  		move.w	$30(a0),d0
000110A2 0240 FF80                  		andi.w	#$FF80,d0
000110A6 3238 F700                  		move.w	($FFFFF700).w,d1
000110AA 0441 0080                  		subi.w	#$80,d1
000110AE 0241 FF80                  		andi.w	#$FF80,d1
000110B2 9041                       		sub.w	d1,d0
000110B4 0C40 0280                  		cmpi.w	#$280,d0
000110B8 6200 D766                  		bhi.w	DeleteObject
000110BC 6000 D726                  		bra.w	DisplaySprite
000110C0                            ; ===========================================================================
000110C0                            
000110C0                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000110C0 7000                       		moveq	#0,d0
000110C2 1028 0028                  		move.b	$28(a0),d0
000110C6 0240 000F                  		andi.w	#$F,d0
000110CA D040                       		add.w	d0,d0
000110CC 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000110D0 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000110D4                            ; ===========================================================================
000110D4 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000110D8 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000110DC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000110E0 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000110E4 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000110E8 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000110EA                            ; ===========================================================================
000110EA                            
000110EA                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000110EA 4E75                       		rts	
000110EC                            ; ===========================================================================
000110EC                            
000110EC                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000110EC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000110F0 323C 0060                  		move.w	#$60,d1
000110F4 0828 0000 0022             		btst	#0,$22(a0)
000110FA 6700                       		beq.s	loc_FF26
000110FC 4440                       		neg.w	d0
000110FE D041                       		add.w	d1,d0
00011100                            
00011100                            loc_FF26:
00011100 3228 0030                  		move.w	$30(a0),d1
00011104 9240                       		sub.w	d0,d1
00011106 3141 0008                  		move.w	d1,8(a0)
0001110A 4E75                       		rts	
0001110C                            ; ===========================================================================
0001110C                            
0001110C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001110C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011112 6600                       		bne.s	Obj52_02_Wait
00011114 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011118                            
00011118                            Obj52_02_Wait:
00011118 4E75                       		rts	
0001111A                            ; ===========================================================================
0001111A                            
0001111A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001111A 7600                       		moveq	#0,d3
0001111C 1628 0019                  		move.b	$19(a0),d3
00011120 6100 0000                  		bsr.w	ObjHitWallRight
00011124 4A41                       		tst.w	d1		; has the platform hit a wall?
00011126 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011128 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001112C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011132 4E75                       		rts	
00011134                            ; ===========================================================================
00011134                            
00011134                            Obj52_03_End:
00011134 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011138 4E75                       		rts	
0001113A                            ; ===========================================================================
0001113A                            
0001113A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001113A 7600                       		moveq	#0,d3
0001113C 1628 0019                  		move.b	$19(a0),d3
00011140 6100 0000                  		bsr.w	ObjHitWallRight
00011144 4A41                       		tst.w	d1		; has the platform hit a wall?
00011146 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011148 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001114C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011152 4E75                       		rts	
00011154                            ; ===========================================================================
00011154                            
00011154                            Obj52_05_End:
00011154 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011158 4E75                       		rts	
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001115A 6100 D662                  		bsr.w	SpeedToPos
0001115E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011164 6100 0000                  		bsr.w	ObjHitFloor
00011168 4A41                       		tst.w	d1		; has platform hit the floor?
0001116A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001116E D368 000C                  		add.w	d1,$C(a0)
00011172 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011176 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001117A                            
0001117A                            locret_FFA0:
0001117A 4E75                       		rts	
0001117C                            ; ===========================================================================
0001117C                            
0001117C                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001117C 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011180 6700                       		beq.s	Obj52_07_ChkDel
00011182 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011186                            
00011186                            Obj52_07_ChkDel:
00011186 588F                       		addq.l	#4,sp
00011188 3028 0030                  		move.w	$30(a0),d0
0001118C 0240 FF80                  		andi.w	#$FF80,d0
00011190 3238 F700                  		move.w	($FFFFF700).w,d1
00011194 0441 0080                  		subi.w	#$80,d1
00011198 0241 FF80                  		andi.w	#$FF80,d1
0001119C 9041                       		sub.w	d1,d0
0001119E 0C40 0280                  		cmpi.w	#$280,d0
000111A2 6200 D67C                  		bhi.w	DeleteObject
000111A6 4E75                       		rts	
000111A8                            ; ===========================================================================
000111A8                            
000111A8                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000111A8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000111AC 323C 0080                  		move.w	#$80,d1
000111B0 0828 0000 0022             		btst	#0,$22(a0)
000111B6 6700                       		beq.s	loc_FFE2
000111B8 4440                       		neg.w	d0
000111BA D041                       		add.w	d1,d0
000111BC                            
000111BC                            loc_FFE2:
000111BC 3228 0032                  		move.w	$32(a0),d1
000111C0 9240                       		sub.w	d0,d1
000111C2 3141 000C                  		move.w	d1,$C(a0)
000111C6 4E75                       		rts	
000111C8                            ; ===========================================================================
000111C8                            
000111C8                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000111C8 7600                       		moveq	#0,d3
000111CA 1628 0019                  		move.b	$19(a0),d3
000111CE D643                       		add.w	d3,d3
000111D0 7208                       		moveq	#8,d1
000111D2 0828 0000 0022             		btst	#0,$22(a0)
000111D8 6700                       		beq.s	loc_10004
000111DA 4441                       		neg.w	d1
000111DC 4443                       		neg.w	d3
000111DE                            
000111DE                            loc_10004:
000111DE 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000111E2 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000111E4 3028 0008                  		move.w	8(a0),d0
000111E8 9068 0030                  		sub.w	$30(a0),d0
000111EC B043                       		cmp.w	d3,d0
000111EE 6700                       		beq.s	Obj52_0A_Wait
000111F0 D368 0008                  		add.w	d1,8(a0)	; move platform
000111F4 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000111FA 4E75                       		rts	
000111FC                            ; ===========================================================================
000111FC                            
000111FC                            Obj52_0A_Wait:
000111FC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011200 6600                       		bne.s	locret_1002E	; if time remains, branch
00011202 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011208                            
00011208                            locret_1002E:
00011208 4E75                       		rts	
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            Obj52_0A_Back:
0001120A 3028 0008                  		move.w	8(a0),d0
0001120E 9068 0030                  		sub.w	$30(a0),d0
00011212 6700                       		beq.s	Obj52_0A_Reset
00011214 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011218 4E75                       		rts	
0001121A                            ; ===========================================================================
0001121A                            
0001121A                            Obj52_0A_Reset:
0001121A 4268 0036                  		clr.w	$36(a0)
0001121E 5328 0028                  		subq.b	#1,$28(a0)
00011222 4E75                       		rts	
00011224                            ; ===========================================================================
00011224                            ; ---------------------------------------------------------------------------
00011224                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011224                            ; ---------------------------------------------------------------------------
00011224                            Map_obj52:
00011224                            	include "_maps\obj52mz.asm"
00011224                            ; ---------------------------------------------------------------------------
00011224                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011224                            ; ---------------------------------------------------------------------------
00011224 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011228 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001122C 0000                       		dc.w byte_1008F-Map_obj52
0001122E 01                         byte_10054:	dc.b 1
0001122F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011234 02                         byte_1005A:	dc.b 2
00011235 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001123A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001123F 04                         byte_10065:	dc.b 4
00011240 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011245 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001124A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001124F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011254 04                         byte_1007A:	dc.b 4
00011255 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001125A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001125F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011264 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00011269 03                         byte_1008F:	dc.b 3
0001126A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001126F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011274 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001127A 00                         		even
0001127A 00                         		even
0001127A                            
0001127A                            ; ---------------------------------------------------------------------------
0001127A                            ; Sprite mappings - moving block (LZ)
0001127A                            ; ---------------------------------------------------------------------------
0001127A                            Map_obj52a:
0001127A                            	include "_maps\obj52lz.asm"
0001127A                            ; ---------------------------------------------------------------------------
0001127A                            ; Sprite mappings - moving block (LZ)
0001127A                            ; ---------------------------------------------------------------------------
0001127A 0000                       		dc.w byte_100A2-Map_obj52a
0001127C 01                         byte_100A2:	dc.b 1
0001127D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011282                            		even
00011282                            		even
00011282                            
00011282                            ; ===========================================================================
00011282                            ; ---------------------------------------------------------------------------
00011282                            ; Object 55 - Basaran enemy (MZ)
00011282                            ; ---------------------------------------------------------------------------
00011282                            
00011282                            Obj55:					; XREF: Obj_Index
00011282 7000                       		moveq	#0,d0
00011284 1028 0024                  		move.b	$24(a0),d0
00011288 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001128C 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011290                            ; ===========================================================================
00011290 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011292 0000                       		dc.w Obj55_Action-Obj55_Index
00011294                            ; ===========================================================================
00011294                            
00011294                            Obj55_Main:				; XREF: Obj55_Index
00011294 5428 0024                  		addq.b	#2,$24(a0)
00011298 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000112A0 317C 84B8 0002             		move.w	#$84B8,2(a0)
000112A6 117C 0004 0001             		move.b	#4,1(a0)
000112AC 117C 000C 0016             		move.b	#$C,$16(a0)
000112B2 117C 0002 0018             		move.b	#2,$18(a0)
000112B8 117C 000B 0020             		move.b	#$B,$20(a0)
000112BE 117C 0010 0019             		move.b	#$10,$19(a0)
000112C4                            
000112C4                            Obj55_Action:				; XREF: Obj55_Index
000112C4 7000                       		moveq	#0,d0
000112C6 1028 0025                  		move.b	$25(a0),d0
000112CA 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000112CE 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000112D2 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000112D8 6100 A558                  		bsr.w	AnimateSprite
000112DC 6000 F5AE                  		bra.w	MarkObjGone
000112E0                            ; ===========================================================================
000112E0 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000112E2 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000112E4 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000112E6 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000112E8                            ; ===========================================================================
000112E8                            
000112E8                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000112E8 343C 0080                  		move.w	#$80,d2
000112EC 6100 0000                  		bsr.w	Obj55_ChkSonic
000112F0 6400                       		bcc.s	Obj55_NoDrop
000112F2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000112F6 3140 0036                  		move.w	d0,$36(a0)
000112FA 9068 000C                  		sub.w	$C(a0),d0
000112FE 6500                       		bcs.s	Obj55_NoDrop
00011300 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011304 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011306 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001130A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001130C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011310 D007                       		add.b	d7,d0
00011312 0200 0007                  		andi.b	#7,d0
00011316 6600                       		bne.s	Obj55_NoDrop
00011318 117C 0001 001C             		move.b	#1,$1C(a0)
0001131E 5428 0025                  		addq.b	#2,$25(a0)
00011322                            
00011322                            Obj55_NoDrop:
00011322 4E75                       		rts	
00011324                            ; ===========================================================================
00011324                            
00011324                            Obj55_DropFly:				; XREF: Obj55_Index2
00011324 6100 D498                  		bsr.w	SpeedToPos
00011328 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001132E 343C 0080                  		move.w	#$80,d2
00011332 6100 0000                  		bsr.w	Obj55_ChkSonic
00011336 3028 0036                  		move.w	$36(a0),d0
0001133A 9068 000C                  		sub.w	$C(a0),d0
0001133E 6500                       		bcs.s	Obj55_ChkDel
00011340 0C40 0010                  		cmpi.w	#$10,d0
00011344 6400                       		bcc.s	locret_10180
00011346 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001134A 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011350 117C 0002 001C             		move.b	#2,$1C(a0)
00011356 5428 0025                  		addq.b	#2,$25(a0)
0001135A                            
0001135A                            locret_10180:
0001135A 4E75                       		rts	
0001135C                            ; ===========================================================================
0001135C                            
0001135C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001135C 4A28 0001                  		tst.b	1(a0)
00011360 6A00 D4BE                  		bpl.w	DeleteObject
00011364 4E75                       		rts	
00011366                            ; ===========================================================================
00011366                            
00011366                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011366 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001136A 0200 000F                  		andi.b	#$F,d0
0001136E 6600                       		bne.s	loc_101A0
00011370 303C 00C0                  		move.w	#$C0,d0
00011374 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play flapping sound
0001137A                            
0001137A                            loc_101A0:
0001137A 6100 D442                  		bsr.w	SpeedToPos
0001137E 3038 D008                  		move.w	($FFFFD008).w,d0
00011382 9068 0008                  		sub.w	8(a0),d0
00011386 6400                       		bcc.s	loc_101B0
00011388 4440                       		neg.w	d0
0001138A                            
0001138A                            loc_101B0:
0001138A 0C40 0080                  		cmpi.w	#$80,d0
0001138E 6500                       		bcs.s	locret_101C6
00011390 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011394 D007                       		add.b	d7,d0
00011396 0200 0007                  		andi.b	#7,d0
0001139A 6600                       		bne.s	locret_101C6
0001139C 5428 0025                  		addq.b	#2,$25(a0)
000113A0                            
000113A0                            locret_101C6:
000113A0 4E75                       		rts	
000113A2                            ; ===========================================================================
000113A2                            
000113A2                            Obj55_FlyUp:				; XREF: Obj55_Index2
000113A2 6100 D41A                  		bsr.w	SpeedToPos
000113A6 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000113AC 6100 0000                  		bsr.w	ObjHitCeiling
000113B0 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000113B2 6A00                       		bpl.s	locret_101F4	; if not, branch
000113B4 9368 000C                  		sub.w	d1,$C(a0)
000113B8 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000113BE 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000113C2 4268 0012                  		clr.w	$12(a0)
000113C6 4228 001C                  		clr.b	$1C(a0)
000113CA 4228 0025                  		clr.b	$25(a0)
000113CE                            
000113CE                            locret_101F4:
000113CE 4E75                       		rts	
000113D0                            ; ===========================================================================
000113D0                            
000113D0                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000113D0 323C 0100                  		move.w	#$100,d1
000113D4 08E8 0000 0022             		bset	#0,$22(a0)
000113DA 3038 D008                  		move.w	($FFFFD008).w,d0
000113DE 9068 0008                  		sub.w	8(a0),d0
000113E2 6400                       		bcc.s	loc_10214
000113E4 4440                       		neg.w	d0
000113E6 4441                       		neg.w	d1
000113E8 08A8 0000 0022             		bclr	#0,$22(a0)
000113EE                            
000113EE                            loc_10214:
000113EE B042                       		cmp.w	d2,d0
000113F0 4E75                       		rts	
000113F2                            ; ===========================================================================
000113F2 6100 D3CA                  		bsr.w	SpeedToPos
000113F6 6100 D3EC                  		bsr.w	DisplaySprite
000113FA 4A28 0001                  		tst.b	1(a0)
000113FE 6A00 D420                  		bpl.w	DeleteObject
00011402 4E75                       		rts	
00011404                            ; ===========================================================================
00011404                            Ani_obj55:
00011404                            	include "_anim\obj55.asm"
00011404                            ; ---------------------------------------------------------------------------
00011404                            ; Animation script - Basaran enemy
00011404                            ; ---------------------------------------------------------------------------
00011404 0000                       		dc.w byte_10230-Ani_obj55
00011406 0000                       		dc.w byte_10234-Ani_obj55
00011408 0000                       		dc.w byte_10238-Ani_obj55
0001140A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001140E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011412 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011418                            		even
00011418                            		even
00011418                            
00011418                            ; ---------------------------------------------------------------------------
00011418                            ; Sprite mappings - Basaran enemy (MZ)
00011418                            ; ---------------------------------------------------------------------------
00011418                            Map_obj55:
00011418                            	include "_maps\obj55.asm"
00011418                            ; ---------------------------------------------------------------------------
00011418                            ; Sprite mappings - Basaran enemy (MZ)
00011418                            ; ---------------------------------------------------------------------------
00011418 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001141C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011420 01                         byte_10246:	dc.b 1
00011421 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011426 03                         byte_1024C:	dc.b 3
00011427 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001142C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011431 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011436 04                         byte_1025C:	dc.b 4
00011437 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001143C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011441 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011446 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001144B 04                         byte_10271:	dc.b 4
0001144C F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011451 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011456 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001145B FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011460                            		even
00011460                            		even
00011460                            
00011460                            ; ===========================================================================
00011460                            ; ---------------------------------------------------------------------------
00011460                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011460                            ; ---------------------------------------------------------------------------
00011460                            
00011460                            Obj56:					; XREF: Obj_Index
00011460 7000                       		moveq	#0,d0
00011462 1028 0024                  		move.b	$24(a0),d0
00011466 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001146A 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0001146E                            ; ===========================================================================
0001146E 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011470 0000                       		dc.w Obj56_Action-Obj56_Index
00011472                            
00011472 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011474 2020                       		dc.b  $20, $20
00011476 1020                       		dc.b  $10, $20
00011478 201A                       		dc.b  $20, $1A
0001147A 1027                       		dc.b  $10, $27
0001147C 1010                       		dc.b  $10, $10
0001147E 0820                       		dc.b	8, $20
00011480 4010                       		dc.b  $40, $10
00011482                            ; ===========================================================================
00011482                            
00011482                            Obj56_Main:				; XREF: Obj56_Index
00011482 5428 0024                  		addq.b	#2,$24(a0)
00011486 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001148E 317C 4000 0002             		move.w	#$4000,2(a0)
00011494 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001149A 6600                       		bne.s	loc_102C8
0001149C 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000114A2                            
000114A2                            loc_102C8:
000114A2 117C 0004 0001             		move.b	#4,1(a0)
000114A8 117C 0003 0018             		move.b	#3,$18(a0)
000114AE 7000                       		moveq	#0,d0
000114B0 1028 0028                  		move.b	$28(a0),d0
000114B4 E648                       		lsr.w	#3,d0
000114B6 0240 000E                  		andi.w	#$E,d0
000114BA 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000114BE 115A 0019                  		move.b	(a2)+,$19(a0)
000114C2 1152 0016                  		move.b	(a2),$16(a0)
000114C6 E248                       		lsr.w	#1,d0
000114C8 1140 001A                  		move.b	d0,$1A(a0)
000114CC 3168 0008 0034             		move.w	8(a0),$34(a0)
000114D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000114D8 7000                       		moveq	#0,d0
000114DA 1012                       		move.b	(a2),d0
000114DC D040                       		add.w	d0,d0
000114DE 3140 003A                  		move.w	d0,$3A(a0)
000114E2 7000                       		moveq	#0,d0
000114E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000114EA 6700                       		beq.s	loc_10332
000114EC 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000114F0 0240 000F                  		andi.w	#$F,d0
000114F4 5140                       		subq.w	#8,d0
000114F6 6500                       		bcs.s	loc_10332
000114F8 E548                       		lsl.w	#2,d0
000114FA 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000114FE 45F2 0000                  		lea	(a2,d0.w),a2
00011502 4A52                       		tst.w	(a2)
00011504 6A00                       		bpl.s	loc_10332
00011506 0868 0000 0022             		bchg	#0,$22(a0)
0001150C                            
0001150C                            loc_10332:
0001150C 1028 0028                  		move.b	$28(a0),d0
00011510 6A00                       		bpl.s	Obj56_Action
00011512 0200 000F                  		andi.b	#$F,d0
00011516 1140 003C                  		move.b	d0,$3C(a0)
0001151A 117C 0005 0028             		move.b	#5,$28(a0)
00011520 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011526 6600                       		bne.s	Obj56_ChkGone
00011528 117C 000C 0028             		move.b	#$C,$28(a0)
0001152E 317C 0080 003A             		move.w	#$80,$3A(a0)
00011534                            
00011534                            Obj56_ChkGone:
00011534 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011538 7000                       		moveq	#0,d0
0001153A 1028 0023                  		move.b	$23(a0),d0
0001153E 6700                       		beq.s	Obj56_Action
00011540 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011546 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001154C 6700                       		beq.s	Obj56_Action
0001154E 5228 0028                  		addq.b	#1,$28(a0)
00011552 4268 003A                  		clr.w	$3A(a0)
00011556                            
00011556                            Obj56_Action:				; XREF: Obj56_Index
00011556 3F28 0008                  		move.w	8(a0),-(sp)
0001155A 7000                       		moveq	#0,d0
0001155C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011560 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011564 D040                       		add.w	d0,d0
00011566 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0001156A 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0001156E 381F                       		move.w	(sp)+,d4
00011570 4A28 0001                  		tst.b	1(a0)
00011574 6A00                       		bpl.s	Obj56_ChkDel
00011576 7200                       		moveq	#0,d1
00011578 1228 0019                  		move.b	$19(a0),d1
0001157C 0641 000B                  		addi.w	#$B,d1
00011580 7400                       		moveq	#0,d2
00011582 1428 0016                  		move.b	$16(a0),d2
00011586 3602                       		move.w	d2,d3
00011588 5243                       		addq.w	#1,d3
0001158A 6100 F628                  		bsr.w	SolidObject
0001158E                            
0001158E                            Obj56_ChkDel:
0001158E 3028 0034                  		move.w	$34(a0),d0
00011592 0240 FF80                  		andi.w	#$FF80,d0
00011596 3238 F700                  		move.w	($FFFFF700).w,d1
0001159A 0441 0080                  		subi.w	#$80,d1
0001159E 0241 FF80                  		andi.w	#$FF80,d1
000115A2 9041                       		sub.w	d1,d0
000115A4 0C40 0280                  		cmpi.w	#$280,d0
000115A8 6200 D276                  		bhi.w	DeleteObject
000115AC 6000 D236                  		bra.w	DisplaySprite
000115B0                            ; ===========================================================================
000115B0 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
000115B4 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
000115B8 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
000115BC 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
000115C0 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
000115C4 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
000115C8 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000115CC                            ; ===========================================================================
000115CC                            
000115CC                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000115CC 4E75                       		rts	
000115CE                            ; ===========================================================================
000115CE                            
000115CE                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000115CE 323C 0040                  		move.w	#$40,d1
000115D2 7000                       		moveq	#0,d0
000115D4 1038 FE68                  		move.b	($FFFFFE68).w,d0
000115D8 6000                       		bra.s	Obj56_Move_LR
000115DA                            ; ===========================================================================
000115DA                            
000115DA                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000115DA 323C 0080                  		move.w	#$80,d1
000115DE 7000                       		moveq	#0,d0
000115E0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000115E4                            
000115E4                            Obj56_Move_LR:
000115E4 0828 0000 0022             		btst	#0,$22(a0)
000115EA 6700                       		beq.s	loc_10416
000115EC 4440                       		neg.w	d0
000115EE D041                       		add.w	d1,d0
000115F0                            
000115F0                            loc_10416:
000115F0 3228 0034                  		move.w	$34(a0),d1
000115F4 9240                       		sub.w	d0,d1
000115F6 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000115FA 4E75                       		rts	
000115FC                            ; ===========================================================================
000115FC                            
000115FC                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000115FC 323C 0040                  		move.w	#$40,d1
00011600 7000                       		moveq	#0,d0
00011602 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011606 6000                       		bra.s	Obj56_Move_UD
00011608                            ; ===========================================================================
00011608                            
00011608                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011608 323C 0080                  		move.w	#$80,d1
0001160C 7000                       		moveq	#0,d0
0001160E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011612                            
00011612                            Obj56_Move_UD:
00011612 0828 0000 0022             		btst	#0,$22(a0)
00011618 6700                       		beq.s	loc_10444
0001161A 4440                       		neg.w	d0
0001161C D041                       		add.w	d1,d0
0001161E                            
0001161E                            loc_10444:
0001161E 3228 0030                  		move.w	$30(a0),d1
00011622 9240                       		sub.w	d0,d1
00011624 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011628 4E75                       		rts	
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0001162A 4A28 0038                  		tst.b	$38(a0)
0001162E 6600                       		bne.s	loc_104A4
00011630 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011636 6600                       		bne.s	loc_1047A	; if not, branch
00011638 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001163E 6600                       		bne.s	loc_1047A
00011640 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011644 3038 D008                  		move.w	($FFFFD008).w,d0
00011648 B068 0008                  		cmp.w	8(a0),d0
0001164C 6400                       		bcc.s	loc_1047A
0001164E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011654                            
00011654                            loc_1047A:
00011654 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011658 7000                       		moveq	#0,d0
0001165A 1028 003C                  		move.b	$3C(a0),d0
0001165E 0832 0000 0000             		btst	#0,(a2,d0.w)
00011664 6700                       		beq.s	loc_104AE
00011666 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001166C 6600                       		bne.s	loc_1049E	; if not, branch
0001166E 0C00 0003                  		cmpi.b	#3,d0
00011672 6600                       		bne.s	loc_1049E
00011674 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011678                            
00011678                            loc_1049E:
00011678 117C 0001 0038             		move.b	#1,$38(a0)
0001167E                            
0001167E                            loc_104A4:
0001167E 4A68 003A                  		tst.w	$3A(a0)
00011682 6700                       		beq.s	loc_104C8
00011684 5568 003A                  		subq.w	#2,$3A(a0)
00011688                            
00011688                            loc_104AE:
00011688 3028 003A                  		move.w	$3A(a0),d0
0001168C 0828 0000 0022             		btst	#0,$22(a0)
00011692 6700                       		beq.s	loc_104BC
00011694 4440                       		neg.w	d0
00011696                            
00011696                            loc_104BC:
00011696 3228 0030                  		move.w	$30(a0),d1
0001169A D240                       		add.w	d0,d1
0001169C 3141 000C                  		move.w	d1,$C(a0)
000116A0 4E75                       		rts	
000116A2                            ; ===========================================================================
000116A2                            
000116A2                            loc_104C8:
000116A2 5228 0028                  		addq.b	#1,$28(a0)
000116A6 4228 0038                  		clr.b	$38(a0)
000116AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000116AE 7000                       		moveq	#0,d0
000116B0 1028 0023                  		move.b	$23(a0),d0
000116B4 67D2                       		beq.s	loc_104AE
000116B6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000116BC 60CA                       		bra.s	loc_104AE
000116BE                            ; ===========================================================================
000116BE                            
000116BE                            Obj56_Type06:				; XREF: Obj56_TypeIndex
000116BE 4A28 0038                  		tst.b	$38(a0)
000116C2 6600                       		bne.s	loc_10500
000116C4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000116C8 7000                       		moveq	#0,d0
000116CA 1028 003C                  		move.b	$3C(a0),d0
000116CE 4A32 0000                  		tst.b	(a2,d0.w)
000116D2 6A00                       		bpl.s	loc_10512
000116D4 117C 0001 0038             		move.b	#1,$38(a0)
000116DA                            
000116DA                            loc_10500:
000116DA 7000                       		moveq	#0,d0
000116DC 1028 0016                  		move.b	$16(a0),d0
000116E0 D040                       		add.w	d0,d0
000116E2 B068 003A                  		cmp.w	$3A(a0),d0
000116E6 6700                       		beq.s	loc_1052C
000116E8 5468 003A                  		addq.w	#2,$3A(a0)
000116EC                            
000116EC                            loc_10512:
000116EC 3028 003A                  		move.w	$3A(a0),d0
000116F0 0828 0000 0022             		btst	#0,$22(a0)
000116F6 6700                       		beq.s	loc_10520
000116F8 4440                       		neg.w	d0
000116FA                            
000116FA                            loc_10520:
000116FA 3228 0030                  		move.w	$30(a0),d1
000116FE D240                       		add.w	d0,d1
00011700 3141 000C                  		move.w	d1,$C(a0)
00011704 4E75                       		rts	
00011706                            ; ===========================================================================
00011706                            
00011706                            loc_1052C:
00011706 5328 0028                  		subq.b	#1,$28(a0)
0001170A 4228 0038                  		clr.b	$38(a0)
0001170E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011712 7000                       		moveq	#0,d0
00011714 1028 0023                  		move.b	$23(a0),d0
00011718 67D2                       		beq.s	loc_10512
0001171A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011720 60CA                       		bra.s	loc_10512
00011722                            ; ===========================================================================
00011722                            
00011722                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011722 4A28 0038                  		tst.b	$38(a0)
00011726 6600                       		bne.s	loc_1055E
00011728 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001172C 6700                       		beq.s	locret_10578
0001172E 117C 0001 0038             		move.b	#1,$38(a0)
00011734 4268 003A                  		clr.w	$3A(a0)
00011738                            
00011738                            loc_1055E:
00011738 5268 0008                  		addq.w	#1,8(a0)
0001173C 3168 0008 0034             		move.w	8(a0),$34(a0)
00011742 5268 003A                  		addq.w	#1,$3A(a0)
00011746 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0001174C 6600                       		bne.s	locret_10578
0001174E 4228 0028                  		clr.b	$28(a0)
00011752                            
00011752                            locret_10578:
00011752 4E75                       		rts	
00011754                            ; ===========================================================================
00011754                            
00011754                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011754 4A28 0038                  		tst.b	$38(a0)
00011758 6600                       		bne.s	loc_10598
0001175A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001175E 7000                       		moveq	#0,d0
00011760 1028 003C                  		move.b	$3C(a0),d0
00011764 0832 0000 0000             		btst	#0,(a2,d0.w)
0001176A 6700                       		beq.s	loc_105A2
0001176C 117C 0001 0038             		move.b	#1,$38(a0)
00011772                            
00011772                            loc_10598:
00011772 4A68 003A                  		tst.w	$3A(a0)
00011776 6700                       		beq.s	loc_105C0
00011778 5568 003A                  		subq.w	#2,$3A(a0)
0001177C                            
0001177C                            loc_105A2:
0001177C 3028 003A                  		move.w	$3A(a0),d0
00011780 0828 0000 0022             		btst	#0,$22(a0)
00011786 6700                       		beq.s	loc_105B4
00011788 4440                       		neg.w	d0
0001178A 0640 0080                  		addi.w	#$80,d0
0001178E                            
0001178E                            loc_105B4:
0001178E 3228 0034                  		move.w	$34(a0),d1
00011792 D240                       		add.w	d0,d1
00011794 3141 0008                  		move.w	d1,8(a0)
00011798 4E75                       		rts	
0001179A                            ; ===========================================================================
0001179A                            
0001179A                            loc_105C0:
0001179A 5228 0028                  		addq.b	#1,$28(a0)
0001179E 4228 0038                  		clr.b	$38(a0)
000117A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000117A6 7000                       		moveq	#0,d0
000117A8 1028 0023                  		move.b	$23(a0),d0
000117AC 67CE                       		beq.s	loc_105A2
000117AE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000117B4 60C6                       		bra.s	loc_105A2
000117B6                            ; ===========================================================================
000117B6                            
000117B6                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000117B6 4A28 0038                  		tst.b	$38(a0)
000117BA 6600                       		bne.s	loc_105F8
000117BC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000117C0 7000                       		moveq	#0,d0
000117C2 1028 003C                  		move.b	$3C(a0),d0
000117C6 4A32 0000                  		tst.b	(a2,d0.w)
000117CA 6A00                       		bpl.s	loc_10606
000117CC 117C 0001 0038             		move.b	#1,$38(a0)
000117D2                            
000117D2                            loc_105F8:
000117D2 303C 0080                  		move.w	#$80,d0
000117D6 B068 003A                  		cmp.w	$3A(a0),d0
000117DA 6700                       		beq.s	loc_10624
000117DC 5468 003A                  		addq.w	#2,$3A(a0)
000117E0                            
000117E0                            loc_10606:
000117E0 3028 003A                  		move.w	$3A(a0),d0
000117E4 0828 0000 0022             		btst	#0,$22(a0)
000117EA 6700                       		beq.s	loc_10618
000117EC 4440                       		neg.w	d0
000117EE 0640 0080                  		addi.w	#$80,d0
000117F2                            
000117F2                            loc_10618:
000117F2 3228 0034                  		move.w	$34(a0),d1
000117F6 D240                       		add.w	d0,d1
000117F8 3141 0008                  		move.w	d1,8(a0)
000117FC 4E75                       		rts	
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            loc_10624:
000117FE 5328 0028                  		subq.b	#1,$28(a0)
00011802 4228 0038                  		clr.b	$38(a0)
00011806 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001180A 7000                       		moveq	#0,d0
0001180C 1028 0023                  		move.b	$23(a0),d0
00011810 67CE                       		beq.s	loc_10606
00011812 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011818 60C6                       		bra.s	loc_10606
0001181A                            ; ===========================================================================
0001181A                            
0001181A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001181A 323C 0010                  		move.w	#$10,d1
0001181E 7000                       		moveq	#0,d0
00011820 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011824 E248                       		lsr.w	#1,d0
00011826 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001182A 6000                       		bra.s	Obj56_Move_Sqr
0001182C                            ; ===========================================================================
0001182C                            
0001182C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001182C 323C 0030                  		move.w	#$30,d1
00011830 7000                       		moveq	#0,d0
00011832 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011836 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001183A 6000                       		bra.s	Obj56_Move_Sqr
0001183C                            ; ===========================================================================
0001183C                            
0001183C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001183C 323C 0050                  		move.w	#$50,d1
00011840 7000                       		moveq	#0,d0
00011842 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011846 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001184A 6000                       		bra.s	Obj56_Move_Sqr
0001184C                            ; ===========================================================================
0001184C                            
0001184C                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001184C 323C 0070                  		move.w	#$70,d1
00011850 7000                       		moveq	#0,d0
00011852 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011856 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001185A                            
0001185A                            Obj56_Move_Sqr:
0001185A 4A43                       		tst.w	d3
0001185C 6600                       		bne.s	loc_1068E
0001185E 5228 0022                  		addq.b	#1,$22(a0)
00011862 0228 0003 0022             		andi.b	#3,$22(a0)
00011868                            
00011868                            loc_1068E:
00011868 1428 0022                  		move.b	$22(a0),d2
0001186C 0202 0003                  		andi.b	#3,d2
00011870 6600                       		bne.s	loc_106AE
00011872 9041                       		sub.w	d1,d0
00011874 D068 0034                  		add.w	$34(a0),d0
00011878 3140 0008                  		move.w	d0,8(a0)
0001187C 4441                       		neg.w	d1
0001187E D268 0030                  		add.w	$30(a0),d1
00011882 3141 000C                  		move.w	d1,$C(a0)
00011886 4E75                       		rts	
00011888                            ; ===========================================================================
00011888                            
00011888                            loc_106AE:
00011888 5302                       		subq.b	#1,d2
0001188A 6600                       		bne.s	loc_106CC
0001188C 5341                       		subq.w	#1,d1
0001188E 9041                       		sub.w	d1,d0
00011890 4440                       		neg.w	d0
00011892 D068 0030                  		add.w	$30(a0),d0
00011896 3140 000C                  		move.w	d0,$C(a0)
0001189A 5241                       		addq.w	#1,d1
0001189C D268 0034                  		add.w	$34(a0),d1
000118A0 3141 0008                  		move.w	d1,8(a0)
000118A4 4E75                       		rts	
000118A6                            ; ===========================================================================
000118A6                            
000118A6                            loc_106CC:
000118A6 5302                       		subq.b	#1,d2
000118A8 6600                       		bne.s	loc_106EA
000118AA 5341                       		subq.w	#1,d1
000118AC 9041                       		sub.w	d1,d0
000118AE 4440                       		neg.w	d0
000118B0 D068 0034                  		add.w	$34(a0),d0
000118B4 3140 0008                  		move.w	d0,8(a0)
000118B8 5241                       		addq.w	#1,d1
000118BA D268 0030                  		add.w	$30(a0),d1
000118BE 3141 000C                  		move.w	d1,$C(a0)
000118C2 4E75                       		rts	
000118C4                            ; ===========================================================================
000118C4                            
000118C4                            loc_106EA:
000118C4 9041                       		sub.w	d1,d0
000118C6 D068 0030                  		add.w	$30(a0),d0
000118CA 3140 000C                  		move.w	d0,$C(a0)
000118CE 4441                       		neg.w	d1
000118D0 D268 0034                  		add.w	$34(a0),d1
000118D4 3141 0008                  		move.w	d1,8(a0)
000118D8 4E75                       		rts	
000118DA                            ; ===========================================================================
000118DA                            ; ---------------------------------------------------------------------------
000118DA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000118DA                            ; ---------------------------------------------------------------------------
000118DA                            Map_obj56:
000118DA                            	include "_maps\obj56.asm"
000118DA                            ; ---------------------------------------------------------------------------
000118DA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000118DA                            ; ---------------------------------------------------------------------------
000118DA 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000118DE 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000118E2 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000118E6 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000118EA 01                         byte_10710:	dc.b 1
000118EB F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000118F0 04                         byte_10716:	dc.b 4
000118F1 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000118F6 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000118FB 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011900 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011905 02                         byte_1072B:	dc.b 2
00011906 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001190B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011910 04                         byte_10736:	dc.b 4
00011911 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011916 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001191B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011920 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011925 03                         byte_1074B:	dc.b 3
00011926 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001192B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011930 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011935 01                         byte_1075B:	dc.b 1
00011936 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001193B 02                         byte_10761:	dc.b 2
0001193C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011941 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011946 04                         byte_1076C:	dc.b 4
00011947 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001194C F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011951 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011956 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001195C 00                         		even
0001195C 00                         		even
0001195C                            
0001195C                            ; ===========================================================================
0001195C                            ; ---------------------------------------------------------------------------
0001195C                            ; Object 57 - spiked balls (SYZ, LZ)
0001195C                            ; ---------------------------------------------------------------------------
0001195C                            
0001195C                            Obj57:					; XREF: Obj_Index
0001195C 7000                       		moveq	#0,d0
0001195E 1028 0024                  		move.b	$24(a0),d0
00011962 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011966 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001196A                            ; ===========================================================================
0001196A 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001196C 0000                       		dc.w Obj57_Move-Obj57_Index
0001196E 0000                       		dc.w Obj57_Display-Obj57_Index
00011970                            ; ===========================================================================
00011970                            
00011970                            Obj57_Main:				; XREF: Obj57_Index
00011970 5428 0024                  		addq.b	#2,$24(a0)
00011974 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001197C 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011982 117C 0004 0001             		move.b	#4,1(a0)
00011988 117C 0004 0018             		move.b	#4,$18(a0)
0001198E 117C 0008 0019             		move.b	#8,$19(a0)
00011994 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001199A 3168 000C 0038             		move.w	$C(a0),$38(a0)
000119A0 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000119A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000119AC 6600                       		bne.s	loc_107E8
000119AE 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000119B4 317C 0310 0002             		move.w	#$310,2(a0)
000119BA 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000119C2                            
000119C2                            loc_107E8:
000119C2 1228 0028                  		move.b	$28(a0),d1	; get object type
000119C6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000119CA 4881                       		ext.w	d1
000119CC E741                       		asl.w	#3,d1		; multiply by 8
000119CE 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000119D2 1028 0022                  		move.b	$22(a0),d0
000119D6 E418                       		ror.b	#2,d0
000119D8 0200 00C0                  		andi.b	#-$40,d0
000119DC 1140 0026                  		move.b	d0,$26(a0)
000119E0 45E8 0029                  		lea	$29(a0),a2
000119E4 1228 0028                  		move.b	$28(a0),d1	; get object type
000119E8 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000119EC 14FC 0000                  		move.b	#0,(a2)+
000119F0 3601                       		move.w	d1,d3
000119F2 E94B                       		lsl.w	#4,d3
000119F4 1143 003C                  		move.b	d3,$3C(a0)
000119F8 5341                       		subq.w	#1,d1		; set chain length (type-1)
000119FA 6500                       		bcs.s	loc_10894
000119FC 0828 0003 0028             		btst	#3,$28(a0)
00011A02 6700                       		beq.s	Obj57_MakeChain
00011A04 5341                       		subq.w	#1,d1
00011A06 6500                       		bcs.s	loc_10894
00011A08                            
00011A08                            Obj57_MakeChain:
00011A08 6100 D260                  		bsr.w	SingleObjLoad
00011A0C 6600                       		bne.s	loc_10894
00011A0E 5228 0029                  		addq.b	#1,$29(a0)
00011A12 3A09                       		move.w	a1,d5
00011A14 0445 D000                  		subi.w	#-$3000,d5
00011A18 EC4D                       		lsr.w	#6,d5
00011A1A 0245 007F                  		andi.w	#$7F,d5
00011A1E 14C5                       		move.b	d5,(a2)+
00011A20 137C 0004 0024             		move.b	#4,$24(a1)
00011A26 1290                       		move.b	0(a0),0(a1)
00011A28 2368 0004 0004             		move.l	4(a0),4(a1)
00011A2E 3368 0002 0002             		move.w	2(a0),2(a1)
00011A34 1368 0001 0001             		move.b	1(a0),1(a1)
00011A3A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011A40 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011A46 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011A4C 0403 0010                  		subi.b	#$10,d3
00011A50 1343 003C                  		move.b	d3,$3C(a1)
00011A54 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011A5A 6600                       		bne.s	loc_10890
00011A5C 4A03                       		tst.b	d3
00011A5E 6600                       		bne.s	loc_10890
00011A60 137C 0002 001A             		move.b	#2,$1A(a1)
00011A66                            
00011A66                            loc_10890:
00011A66 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011A6A                            
00011A6A                            loc_10894:
00011A6A 3A08                       		move.w	a0,d5
00011A6C 0445 D000                  		subi.w	#-$3000,d5
00011A70 EC4D                       		lsr.w	#6,d5
00011A72 0245 007F                  		andi.w	#$7F,d5
00011A76 14C5                       		move.b	d5,(a2)+
00011A78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011A7E 6600                       		bne.s	Obj57_Move
00011A80 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011A86 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011A8C                            
00011A8C                            Obj57_Move:				; XREF: Obj57_Index
00011A8C 6100 0000                  		bsr.w	Obj57_MoveSub
00011A90 6000 0000                  		bra.w	Obj57_ChkDel
00011A94                            ; ===========================================================================
00011A94                            
00011A94                            Obj57_MoveSub:				; XREF: Obj57_Move
00011A94 3028 003E                  		move.w	$3E(a0),d0
00011A98 D168 0026                  		add.w	d0,$26(a0)
00011A9C 1028 0026                  		move.b	$26(a0),d0
00011AA0 4EB9 0000 34B8             		jsr	(CalcSine).l
00011AA6 3428 0038                  		move.w	$38(a0),d2
00011AAA 3628 003A                  		move.w	$3A(a0),d3
00011AAE 45E8 0029                  		lea	$29(a0),a2
00011AB2 7C00                       		moveq	#0,d6
00011AB4 1C1A                       		move.b	(a2)+,d6
00011AB6                            
00011AB6                            Obj57_MoveLoop:
00011AB6 7800                       		moveq	#0,d4
00011AB8 181A                       		move.b	(a2)+,d4
00011ABA ED4C                       		lsl.w	#6,d4
00011ABC 0684 00FF D000             		addi.l	#$FFD000,d4
00011AC2 2244                       		movea.l	d4,a1
00011AC4 7800                       		moveq	#0,d4
00011AC6 1829 003C                  		move.b	$3C(a1),d4
00011ACA 2A04                       		move.l	d4,d5
00011ACC C9C0                       		muls.w	d0,d4
00011ACE E084                       		asr.l	#8,d4
00011AD0 CBC1                       		muls.w	d1,d5
00011AD2 E085                       		asr.l	#8,d5
00011AD4 D842                       		add.w	d2,d4
00011AD6 DA43                       		add.w	d3,d5
00011AD8 3344 000C                  		move.w	d4,$C(a1)
00011ADC 3345 0008                  		move.w	d5,8(a1)
00011AE0 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011AE4 4E75                       		rts	
00011AE6                            ; ===========================================================================
00011AE6                            
00011AE6                            Obj57_ChkDel:				; XREF: Obj57_Move
00011AE6 3028 003A                  		move.w	$3A(a0),d0
00011AEA 0240 FF80                  		andi.w	#$FF80,d0
00011AEE 3238 F700                  		move.w	($FFFFF700).w,d1
00011AF2 0441 0080                  		subi.w	#$80,d1
00011AF6 0241 FF80                  		andi.w	#$FF80,d1
00011AFA 9041                       		sub.w	d1,d0
00011AFC 0C40 0280                  		cmpi.w	#$280,d0
00011B00 6200 0000                  		bhi.w	Obj57_Delete
00011B04 6000 CCDE                  		bra.w	DisplaySprite
00011B08                            ; ===========================================================================
00011B08                            
00011B08                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011B08 7400                       		moveq	#0,d2
00011B0A 45E8 0029                  		lea	$29(a0),a2
00011B0E 141A                       		move.b	(a2)+,d2
00011B10                            
00011B10                            Obj57_DelLoop:
00011B10 7000                       		moveq	#0,d0
00011B12 101A                       		move.b	(a2)+,d0
00011B14 ED48                       		lsl.w	#6,d0
00011B16 0680 00FF D000             		addi.l	#$FFD000,d0
00011B1C 2240                       		movea.l	d0,a1
00011B1E 6100 CD02                  		bsr.w	DeleteObject2
00011B22 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011B26                            
00011B26 4E75                       		rts	
00011B28                            ; ===========================================================================
00011B28                            
00011B28                            Obj57_Display:				; XREF: Obj57_Index
00011B28 6000 CCBA                  		bra.w	DisplaySprite
00011B2C                            ; ===========================================================================
00011B2C                            ; ---------------------------------------------------------------------------
00011B2C                            ; Sprite mappings - chain of spiked balls (SYZ)
00011B2C                            ; ---------------------------------------------------------------------------
00011B2C                            Map_obj57:
00011B2C                            	include "_maps\obj57syz.asm"
00011B2C                            ; ---------------------------------------------------------------------------
00011B2C                            ; Sprite mappings - chain of spiked balls (SYZ)
00011B2C                            ; ---------------------------------------------------------------------------
00011B2C 0000                       		dc.w byte_10958-Map_obj57
00011B2E 01                         byte_10958:	dc.b 1
00011B2F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011B34                            		even
00011B34                            		even
00011B34                            
00011B34                            ; ---------------------------------------------------------------------------
00011B34                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011B34                            ; ---------------------------------------------------------------------------
00011B34                            Map_obj57a:
00011B34                            	include "_maps\obj57lz.asm"
00011B34                            ; ---------------------------------------------------------------------------
00011B34                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011B34                            ; ---------------------------------------------------------------------------
00011B34 0000                       		dc.w byte_10964-Map_obj57a
00011B36 0000                       		dc.w byte_1096A-Map_obj57a
00011B38 0000                       		dc.w byte_10970-Map_obj57a
00011B3A 01                         byte_10964:	dc.b 1
00011B3B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011B40 01                         byte_1096A:	dc.b 1
00011B41 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011B46 01                         byte_10970:	dc.b 1
00011B47 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011B4C                            		even
00011B4C                            		even
00011B4C                            
00011B4C                            ; ===========================================================================
00011B4C                            ; ---------------------------------------------------------------------------
00011B4C                            ; Object 58 - giant spiked balls (SYZ)
00011B4C                            ; ---------------------------------------------------------------------------
00011B4C                            
00011B4C                            Obj58:					; XREF: Obj_Index
00011B4C 7000                       		moveq	#0,d0
00011B4E 1028 0024                  		move.b	$24(a0),d0
00011B52 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011B56 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011B5A                            ; ===========================================================================
00011B5A 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011B5C 0000                       		dc.w Obj58_Move-Obj58_Index
00011B5E                            ; ===========================================================================
00011B5E                            
00011B5E                            Obj58_Main:				; XREF: Obj58_Index
00011B5E 5428 0024                  		addq.b	#2,$24(a0)
00011B62 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011B6A 317C 0396 0002             		move.w	#$396,2(a0)
00011B70 117C 0004 0001             		move.b	#4,1(a0)
00011B76 117C 0004 0018             		move.b	#4,$18(a0)
00011B7C 117C 0018 0019             		move.b	#$18,$19(a0)
00011B82 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011B88 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011B8E 117C 0086 0020             		move.b	#$86,$20(a0)
00011B94 1228 0028                  		move.b	$28(a0),d1	; get object type
00011B98 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011B9C 4881                       		ext.w	d1
00011B9E E741                       		asl.w	#3,d1		; multiply by 8
00011BA0 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011BA4 1028 0022                  		move.b	$22(a0),d0
00011BA8 E418                       		ror.b	#2,d0
00011BAA 0200 00C0                  		andi.b	#$C0,d0
00011BAE 1140 0026                  		move.b	d0,$26(a0)
00011BB2 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011BB8                            
00011BB8                            Obj58_Move:				; XREF: Obj58_Index
00011BB8 7000                       		moveq	#0,d0
00011BBA 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BBE 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011BC2 D040                       		add.w	d0,d0
00011BC4 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011BC8 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011BCC 3028 003A                  		move.w	$3A(a0),d0
00011BD0 0240 FF80                  		andi.w	#$FF80,d0
00011BD4 3238 F700                  		move.w	($FFFFF700).w,d1
00011BD8 0441 0080                  		subi.w	#$80,d1
00011BDC 0241 FF80                  		andi.w	#$FF80,d1
00011BE0 9041                       		sub.w	d1,d0
00011BE2 0C40 0280                  		cmpi.w	#$280,d0
00011BE6 6200 CC38                  		bhi.w	DeleteObject
00011BEA 6000 CBF8                  		bra.w	DisplaySprite
00011BEE                            ; ===========================================================================
00011BEE 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011BF0 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011BF2 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011BF4 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011BF6                            ; ===========================================================================
00011BF6                            
00011BF6                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011BF6 4E75                       		rts	
00011BF8                            ; ===========================================================================
00011BF8                            
00011BF8                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011BF8 323C 0060                  		move.w	#$60,d1
00011BFC 7000                       		moveq	#0,d0
00011BFE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011C02 0828 0000 0022             		btst	#0,$22(a0)
00011C08 6700                       		beq.s	loc_10A38
00011C0A 4440                       		neg.w	d0
00011C0C D041                       		add.w	d1,d0
00011C0E                            
00011C0E                            loc_10A38:
00011C0E 3228 003A                  		move.w	$3A(a0),d1
00011C12 9240                       		sub.w	d0,d1
00011C14 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011C18 4E75                       		rts	
00011C1A                            ; ===========================================================================
00011C1A                            
00011C1A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011C1A 323C 0060                  		move.w	#$60,d1
00011C1E 7000                       		moveq	#0,d0
00011C20 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011C24 0828 0000 0022             		btst	#0,$22(a0)
00011C2A 6700                       		beq.s	loc_10A5C
00011C2C 4440                       		neg.w	d0
00011C2E 0640 0080                  		addi.w	#$80,d0
00011C32                            
00011C32                            loc_10A5C:
00011C32 3228 0038                  		move.w	$38(a0),d1
00011C36 9240                       		sub.w	d0,d1
00011C38 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011C3C 4E75                       		rts	
00011C3E                            ; ===========================================================================
00011C3E                            
00011C3E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011C3E 3028 003E                  		move.w	$3E(a0),d0
00011C42 D168 0026                  		add.w	d0,$26(a0)
00011C46 1028 0026                  		move.b	$26(a0),d0
00011C4A 4EB9 0000 34B8             		jsr	(CalcSine).l
00011C50 3428 0038                  		move.w	$38(a0),d2
00011C54 3628 003A                  		move.w	$3A(a0),d3
00011C58 7800                       		moveq	#0,d4
00011C5A 1828 003C                  		move.b	$3C(a0),d4
00011C5E 2A04                       		move.l	d4,d5
00011C60 C9C0                       		muls.w	d0,d4
00011C62 E084                       		asr.l	#8,d4
00011C64 CBC1                       		muls.w	d1,d5
00011C66 E085                       		asr.l	#8,d5
00011C68 D842                       		add.w	d2,d4
00011C6A DA43                       		add.w	d3,d5
00011C6C 3144 000C                  		move.w	d4,$C(a0)
00011C70 3145 0008                  		move.w	d5,8(a0)
00011C74 4E75                       		rts	
00011C76                            ; ===========================================================================
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            ; Sprite mappings - SBZ	spiked ball on a chain
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            Map_obj15b:
00011C76                            	include "_maps\obj15sbz.asm"
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011C76                            ; ---------------------------------------------------------------------------
00011C76 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011C7A 0000                       		dc.w byte_10AC6-Map_obj15b
00011C7C 05                         byte_10AA6:	dc.b 5
00011C7D E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011C82 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011C87 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011C8C F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011C91 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011C96 01                         byte_10AC0:	dc.b 1
00011C97 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011C9C 02                         byte_10AC6:	dc.b 2
00011C9D F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011CA2 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011CA8 00                         		even
00011CA8 00                         		even
00011CA8                            
00011CA8                            ; ===========================================================================
00011CA8                            ; ---------------------------------------------------------------------------
00011CA8                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011CA8                            ; ---------------------------------------------------------------------------
00011CA8                            
00011CA8                            Obj59:					; XREF: Obj_Index
00011CA8 7000                       		moveq	#0,d0
00011CAA 1028 0024                  		move.b	$24(a0),d0
00011CAE 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011CB2 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011CB6 3028 0032                  		move.w	$32(a0),d0
00011CBA 0240 FF80                  		andi.w	#$FF80,d0
00011CBE 3238 F700                  		move.w	($FFFFF700).w,d1
00011CC2 0441 0080                  		subi.w	#$80,d1
00011CC6 0241 FF80                  		andi.w	#$FF80,d1
00011CCA 9041                       		sub.w	d1,d0
00011CCC 0C40 0280                  		cmpi.w	#$280,d0
00011CD0 6200 CB4E                  		bhi.w	DeleteObject
00011CD4 6000 CB0E                  		bra.w	DisplaySprite
00011CD8                            ; ===========================================================================
00011CD8 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011CDA 0000                       		dc.w Obj59_Platform-Obj59_Index
00011CDC 0000                       		dc.w Obj59_Action-Obj59_Index
00011CDE 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011CE0                            
00011CE0 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011CE2                            
00011CE2 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011CE4 2001                       		dc.b $20, 1
00011CE6 3401                       		dc.b $34, 1
00011CE8 1003                       		dc.b $10, 3
00011CEA 2003                       		dc.b $20, 3
00011CEC 3403                       		dc.b $34, 3
00011CEE 1401                       		dc.b $14, 1
00011CF0 2401                       		dc.b $24, 1
00011CF2 2C01                       		dc.b $2C, 1
00011CF4 1403                       		dc.b $14, 3
00011CF6 2403                       		dc.b $24, 3
00011CF8 2C03                       		dc.b $2C, 3
00011CFA 2005                       		dc.b $20, 5
00011CFC 2007                       		dc.b $20, 7
00011CFE 3009                       		dc.b $30, 9
00011D00                            ; ===========================================================================
00011D00                            
00011D00                            Obj59_Main:				; XREF: Obj59_Index
00011D00 5428 0024                  		addq.b	#2,$24(a0)
00011D04 7000                       		moveq	#0,d0
00011D06 1028 0028                  		move.b	$28(a0),d0
00011D0A 6A00                       		bpl.s	Obj59_Main2
00011D0C 5828 0024                  		addq.b	#4,$24(a0)
00011D10 0240 007F                  		andi.w	#$7F,d0
00011D14 C0FC 0006                  		mulu.w	#6,d0
00011D18 3140 003C                  		move.w	d0,$3C(a0)
00011D1C 3140 003E                  		move.w	d0,$3E(a0)
00011D20 588F                       		addq.l	#4,sp
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            Obj59_Main2:
00011D24 E648                       		lsr.w	#3,d0
00011D26 0240 001E                  		andi.w	#$1E,d0
00011D2A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011D2E 115A 0019                  		move.b	(a2)+,$19(a0)
00011D32 115A 001A                  		move.b	(a2)+,$1A(a0)
00011D36 7000                       		moveq	#0,d0
00011D38 1028 0028                  		move.b	$28(a0),d0
00011D3C D040                       		add.w	d0,d0
00011D3E 0240 001E                  		andi.w	#$1E,d0
00011D42 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011D46 101A                       		move.b	(a2)+,d0
00011D48 E548                       		lsl.w	#2,d0
00011D4A 3140 003C                  		move.w	d0,$3C(a0)
00011D4E 115A 0028                  		move.b	(a2)+,$28(a0)
00011D52 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011D5A 317C 4000 0002             		move.w	#$4000,2(a0)
00011D60 117C 0004 0001             		move.b	#4,1(a0)
00011D66 117C 0004 0018             		move.b	#4,$18(a0)
00011D6C 3168 0008 0032             		move.w	8(a0),$32(a0)
00011D72 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011D78                            
00011D78                            Obj59_Platform:				; XREF: Obj59_Index
00011D78 7200                       		moveq	#0,d1
00011D7A 1228 0019                  		move.b	$19(a0),d1
00011D7E 4EB9 0000 83EE             		jsr	(PlatformObject).l
00011D84 6000 0000                  		bra.w	Obj59_Types
00011D88                            ; ===========================================================================
00011D88                            
00011D88                            Obj59_Action:				; XREF: Obj59_Index
00011D88 7200                       		moveq	#0,d1
00011D8A 1228 0019                  		move.b	$19(a0),d1
00011D8E 4EB9 0000 8562             		jsr	(ExitPlatform).l
00011D94 3F28 0008                  		move.w	8(a0),-(sp)
00011D98 6100 0000                  		bsr.w	Obj59_Types
00011D9C 341F                       		move.w	(sp)+,d2
00011D9E 4A10                       		tst.b	0(a0)
00011DA0 6700                       		beq.s	locret_10BD4
00011DA2 4EF9 0000 8ACC             		jmp	(MvSonicOnPtfm2).l
00011DA8                            ; ===========================================================================
00011DA8                            
00011DA8                            locret_10BD4:
00011DA8 4E75                       		rts	
00011DAA                            ; ===========================================================================
00011DAA                            
00011DAA                            Obj59_Types:
00011DAA 7000                       		moveq	#0,d0
00011DAC 1028 0028                  		move.b	$28(a0),d0
00011DB0 0240 000F                  		andi.w	#$F,d0
00011DB4 D040                       		add.w	d0,d0
00011DB6 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011DBA 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011DBE                            ; ===========================================================================
00011DBE 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011DC2 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011DC6 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011DCA 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011DCE 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011DD2                            ; ===========================================================================
00011DD2                            
00011DD2                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011DD2 4E75                       		rts	
00011DD4                            ; ===========================================================================
00011DD4                            
00011DD4                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011DD4 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011DDA 6600                       		bne.s	locret_10C0C
00011DDC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011DE0                            
00011DE0                            locret_10C0C:
00011DE0 4E75                       		rts	
00011DE2                            ; ===========================================================================
00011DE2                            
00011DE2                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011DE2 6100 0000                  		bsr.w	Obj59_Move
00011DE6 3028 0034                  		move.w	$34(a0),d0
00011DEA 4440                       		neg.w	d0
00011DEC D068 0030                  		add.w	$30(a0),d0
00011DF0 3140 000C                  		move.w	d0,$C(a0)
00011DF4 4E75                       		rts	
00011DF6                            ; ===========================================================================
00011DF6                            
00011DF6                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011DF6 6100 0000                  		bsr.w	Obj59_Move
00011DFA 3028 0034                  		move.w	$34(a0),d0
00011DFE D068 0030                  		add.w	$30(a0),d0
00011E02 3140 000C                  		move.w	d0,$C(a0)
00011E06 4E75                       		rts	
00011E08                            ; ===========================================================================
00011E08                            
00011E08                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011E08 6100 0000                  		bsr.w	Obj59_Move
00011E0C 3028 0034                  		move.w	$34(a0),d0
00011E10 E240                       		asr.w	#1,d0
00011E12 4440                       		neg.w	d0
00011E14 D068 0030                  		add.w	$30(a0),d0
00011E18 3140 000C                  		move.w	d0,$C(a0)
00011E1C 3028 0034                  		move.w	$34(a0),d0
00011E20 D068 0032                  		add.w	$32(a0),d0
00011E24 3140 0008                  		move.w	d0,8(a0)
00011E28 4E75                       		rts	
00011E2A                            ; ===========================================================================
00011E2A                            
00011E2A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011E2A 6100 0000                  		bsr.w	Obj59_Move
00011E2E 3028 0034                  		move.w	$34(a0),d0
00011E32 E240                       		asr.w	#1,d0
00011E34 D068 0030                  		add.w	$30(a0),d0
00011E38 3140 000C                  		move.w	d0,$C(a0)
00011E3C 3028 0034                  		move.w	$34(a0),d0
00011E40 4440                       		neg.w	d0
00011E42 D068 0032                  		add.w	$32(a0),d0
00011E46 3140 0008                  		move.w	d0,8(a0)
00011E4A 4E75                       		rts	
00011E4C                            ; ===========================================================================
00011E4C                            
00011E4C                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011E4C 6100 0000                  		bsr.w	Obj59_Move
00011E50 3028 0034                  		move.w	$34(a0),d0
00011E54 4440                       		neg.w	d0
00011E56 D068 0030                  		add.w	$30(a0),d0
00011E5A 3140 000C                  		move.w	d0,$C(a0)
00011E5E 4A28 0028                  		tst.b	$28(a0)
00011E62 6700 0000                  		beq.w	loc_10C94
00011E66 4E75                       		rts	
00011E68                            ; ===========================================================================
00011E68                            
00011E68                            loc_10C94:
00011E68 0828 0003 0022             		btst	#3,$22(a0)
00011E6E 6700                       		beq.s	Obj59_Delete
00011E70 08E9 0001 0022             		bset	#1,$22(a1)
00011E76 08A9 0003 0022             		bclr	#3,$22(a1)
00011E7C 137C 0002 0024             		move.b	#2,$24(a1)
00011E82                            
00011E82                            Obj59_Delete:
00011E82 6000 C99C                  		bra.w	DeleteObject
00011E86                            
00011E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011E86                            
00011E86                            
00011E86                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011E86 3028 0038                  		move.w	$38(a0),d0
00011E8A 4A28 003A                  		tst.b	$3A(a0)
00011E8E 6600                       		bne.s	loc_10CC8
00011E90 0C40 0800                  		cmpi.w	#$800,d0
00011E94 6400                       		bcc.s	loc_10CD0
00011E96 0640 0010                  		addi.w	#$10,d0
00011E9A 6000                       		bra.s	loc_10CD0
00011E9C                            ; ===========================================================================
00011E9C                            
00011E9C                            loc_10CC8:
00011E9C 4A40                       		tst.w	d0
00011E9E 6700                       		beq.s	loc_10CD0
00011EA0 0440 0010                  		subi.w	#$10,d0
00011EA4                            
00011EA4                            loc_10CD0:
00011EA4 3140 0038                  		move.w	d0,$38(a0)
00011EA8 48C0                       		ext.l	d0
00011EAA E180                       		asl.l	#8,d0
00011EAC D0A8 0034                  		add.l	$34(a0),d0
00011EB0 2140 0034                  		move.l	d0,$34(a0)
00011EB4 4840                       		swap	d0
00011EB6 3428 003C                  		move.w	$3C(a0),d2
00011EBA B042                       		cmp.w	d2,d0
00011EBC 6300                       		bls.s	loc_10CF0
00011EBE 117C 0001 003A             		move.b	#1,$3A(a0)
00011EC4                            
00011EC4                            loc_10CF0:
00011EC4 D442                       		add.w	d2,d2
00011EC6 B042                       		cmp.w	d2,d0
00011EC8 6600                       		bne.s	locret_10CFA
00011ECA 4228 0028                  		clr.b	$28(a0)
00011ECE                            
00011ECE                            locret_10CFA:
00011ECE 4E75                       		rts	
00011ED0                            ; End of function Obj59_Move
00011ED0                            
00011ED0                            ; ===========================================================================
00011ED0                            
00011ED0                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011ED0 5368 003C                  		subq.w	#1,$3C(a0)
00011ED4 6600                       		bne.s	Obj59_ChkDel
00011ED6 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011EDC 6100 CD8C                  		bsr.w	SingleObjLoad
00011EE0 6600                       		bne.s	Obj59_ChkDel
00011EE2 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011EE6 3368 0008 0008             		move.w	8(a0),8(a1)
00011EEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011EF2 137C 000E 0028             		move.b	#$E,$28(a1)
00011EF8                            
00011EF8                            Obj59_ChkDel:
00011EF8 588F                       		addq.l	#4,sp
00011EFA 3028 0008                  		move.w	8(a0),d0
00011EFE 0240 FF80                  		andi.w	#$FF80,d0
00011F02 3238 F700                  		move.w	($FFFFF700).w,d1
00011F06 0441 0080                  		subi.w	#$80,d1
00011F0A 0241 FF80                  		andi.w	#$FF80,d1
00011F0E 9041                       		sub.w	d1,d0
00011F10 0C40 0280                  		cmpi.w	#$280,d0
00011F14 6200 C90A                  		bhi.w	DeleteObject
00011F18 4E75                       		rts	
00011F1A                            ; ===========================================================================
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            Map_obj59:
00011F1A                            	include "_maps\obj59.asm"
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A 0000                       		dc.w byte_10D4A-Map_obj59
00011F1C 03                         byte_10D4A:	dc.b 3
00011F1D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011F22 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011F27 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011F2C                            		even
00011F2C                            		even
00011F2C                            
00011F2C                            ; ===========================================================================
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            ; Object 5A - platforms	moving in circles (SLZ)
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            
00011F2C                            Obj5A:					; XREF: Obj_Index
00011F2C 7000                       		moveq	#0,d0
00011F2E 1028 0024                  		move.b	$24(a0),d0
00011F32 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011F36 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011F3A 3028 0032                  		move.w	$32(a0),d0
00011F3E 0240 FF80                  		andi.w	#$FF80,d0
00011F42 3238 F700                  		move.w	($FFFFF700).w,d1
00011F46 0441 0080                  		subi.w	#$80,d1
00011F4A 0241 FF80                  		andi.w	#$FF80,d1
00011F4E 9041                       		sub.w	d1,d0
00011F50 0C40 0280                  		cmpi.w	#$280,d0
00011F54 6200 C8CA                  		bhi.w	DeleteObject
00011F58 6000 C88A                  		bra.w	DisplaySprite
00011F5C                            ; ===========================================================================
00011F5C 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011F5E 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011F60 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011F62                            ; ===========================================================================
00011F62                            
00011F62                            Obj5A_Main:				; XREF: Obj5A_Index
00011F62 5428 0024                  		addq.b	#2,$24(a0)
00011F66 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011F6E 317C 4000 0002             		move.w	#$4000,2(a0)
00011F74 117C 0004 0001             		move.b	#4,1(a0)
00011F7A 117C 0004 0018             		move.b	#4,$18(a0)
00011F80 117C 0018 0019             		move.b	#$18,$19(a0)
00011F86 3168 0008 0032             		move.w	8(a0),$32(a0)
00011F8C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011F92                            
00011F92                            Obj5A_Platform:				; XREF: Obj5A_Index
00011F92 7200                       		moveq	#0,d1
00011F94 1228 0019                  		move.b	$19(a0),d1
00011F98 4EB9 0000 83EE             		jsr	(PlatformObject).l
00011F9E 6000 0000                  		bra.w	Obj5A_Types
00011FA2                            ; ===========================================================================
00011FA2                            
00011FA2                            Obj5A_Action:				; XREF: Obj5A_Index
00011FA2 7200                       		moveq	#0,d1
00011FA4 1228 0019                  		move.b	$19(a0),d1
00011FA8 4EB9 0000 8562             		jsr	(ExitPlatform).l
00011FAE 3F28 0008                  		move.w	8(a0),-(sp)
00011FB2 6100 0000                  		bsr.w	Obj5A_Types
00011FB6 341F                       		move.w	(sp)+,d2
00011FB8 4EF9 0000 8ACC             		jmp	(MvSonicOnPtfm2).l
00011FBE                            ; ===========================================================================
00011FBE                            
00011FBE                            Obj5A_Types:
00011FBE 7000                       		moveq	#0,d0
00011FC0 1028 0028                  		move.b	$28(a0),d0
00011FC4 0240 000C                  		andi.w	#$C,d0
00011FC8 E248                       		lsr.w	#1,d0
00011FCA 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011FCE 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011FD2                            ; ===========================================================================
00011FD2 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011FD4 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011FD6                            ; ===========================================================================
00011FD6                            
00011FD6                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011FD6 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011FDA 0401 0050                  		subi.b	#$50,d1
00011FDE 4881                       		ext.w	d1
00011FE0 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011FE4 0402 0050                  		subi.b	#$50,d2
00011FE8 4882                       		ext.w	d2
00011FEA 0828 0000 0028             		btst	#0,$28(a0)
00011FF0 6700                       		beq.s	loc_10E24
00011FF2 4441                       		neg.w	d1
00011FF4 4442                       		neg.w	d2
00011FF6                            
00011FF6                            loc_10E24:
00011FF6 0828 0001 0028             		btst	#1,$28(a0)
00011FFC 6700                       		beq.s	loc_10E30
00011FFE 4441                       		neg.w	d1
00012000 C342                       		exg	d1,d2
00012002                            
00012002                            loc_10E30:
00012002 D268 0032                  		add.w	$32(a0),d1
00012006 3141 0008                  		move.w	d1,8(a0)
0001200A D468 0030                  		add.w	$30(a0),d2
0001200E 3142 000C                  		move.w	d2,$C(a0)
00012012 4E75                       		rts	
00012014                            ; ===========================================================================
00012014                            
00012014                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012014 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012018 0401 0050                  		subi.b	#$50,d1
0001201C 4881                       		ext.w	d1
0001201E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012022 0402 0050                  		subi.b	#$50,d2
00012026 4882                       		ext.w	d2
00012028 0828 0000 0028             		btst	#0,$28(a0)
0001202E 6700                       		beq.s	loc_10E62
00012030 4441                       		neg.w	d1
00012032 4442                       		neg.w	d2
00012034                            
00012034                            loc_10E62:
00012034 0828 0001 0028             		btst	#1,$28(a0)
0001203A 6700                       		beq.s	loc_10E6E
0001203C 4441                       		neg.w	d1
0001203E C342                       		exg	d1,d2
00012040                            
00012040                            loc_10E6E:
00012040 4441                       		neg.w	d1
00012042 D268 0032                  		add.w	$32(a0),d1
00012046 3141 0008                  		move.w	d1,8(a0)
0001204A D468 0030                  		add.w	$30(a0),d2
0001204E 3142 000C                  		move.w	d2,$C(a0)
00012052 4E75                       		rts	
00012054                            ; ===========================================================================
00012054                            ; ---------------------------------------------------------------------------
00012054                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012054                            ; ---------------------------------------------------------------------------
00012054                            Map_obj5A:
00012054                            	include "_maps\obj5A.asm"
00012054                            ; ---------------------------------------------------------------------------
00012054                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012054                            ; ---------------------------------------------------------------------------
00012054 0000                       		dc.w byte_10E84-Map_obj5A
00012056 02                         byte_10E84:	dc.b 2
00012057 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001205C F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012062 00                         		even
00012062 00                         		even
00012062                            
00012062                            ; ===========================================================================
00012062                            ; ---------------------------------------------------------------------------
00012062                            ; Object 5B - blocks that form a staircase (SLZ)
00012062                            ; ---------------------------------------------------------------------------
00012062                            
00012062                            Obj5B:					; XREF: Obj_Index
00012062 7000                       		moveq	#0,d0
00012064 1028 0024                  		move.b	$24(a0),d0
00012068 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001206C 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012070 3028 0030                  		move.w	$30(a0),d0
00012074 0240 FF80                  		andi.w	#$FF80,d0
00012078 3238 F700                  		move.w	($FFFFF700).w,d1
0001207C 0441 0080                  		subi.w	#$80,d1
00012080 0241 FF80                  		andi.w	#$FF80,d1
00012084 9041                       		sub.w	d1,d0
00012086 0C40 0280                  		cmpi.w	#$280,d0
0001208A 6200 C794                  		bhi.w	DeleteObject
0001208E 6000 C754                  		bra.w	DisplaySprite
00012092                            ; ===========================================================================
00012092 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012094 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012096 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012098                            ; ===========================================================================
00012098                            
00012098                            Obj5B_Main:				; XREF: Obj5B_Index
00012098 5428 0024                  		addq.b	#2,$24(a0)
0001209C 7638                       		moveq	#$38,d3
0001209E 7801                       		moveq	#1,d4
000120A0 0828 0000 0022             		btst	#0,$22(a0)
000120A6 6700                       		beq.s	loc_10EDA
000120A8 763B                       		moveq	#$3B,d3
000120AA 78FF                       		moveq	#-1,d4
000120AC                            
000120AC                            loc_10EDA:
000120AC 3428 0008                  		move.w	8(a0),d2
000120B0 2248                       		movea.l	a0,a1
000120B2 7203                       		moveq	#3,d1
000120B4 6000                       		bra.s	Obj5B_MakeBlocks
000120B6                            ; ===========================================================================
000120B6                            
000120B6                            Obj5B_Loop:
000120B6 6100 CBC8                  		bsr.w	SingleObjLoad2
000120BA 6600 0000                  		bne.w	Obj5B_Move
000120BE 137C 0004 0024             		move.b	#4,$24(a1)
000120C4                            
000120C4                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000120C4 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000120C8 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000120D0 337C 4000 0002             		move.w	#$4000,2(a1)
000120D6 137C 0004 0001             		move.b	#4,1(a1)
000120DC 137C 0003 0018             		move.b	#3,$18(a1)
000120E2 137C 0010 0019             		move.b	#$10,$19(a1)
000120E8 1368 0028 0028             		move.b	$28(a0),$28(a1)
000120EE 3342 0008                  		move.w	d2,8(a1)
000120F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120F8 3368 0008 0030             		move.w	8(a0),$30(a1)
000120FE 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012104 0642 0020                  		addi.w	#$20,d2
00012108 1343 0037                  		move.b	d3,$37(a1)
0001210C 2348 003C                  		move.l	a0,$3C(a1)
00012110 D604                       		add.b	d4,d3
00012112 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012116                            
00012116                            Obj5B_Move:				; XREF: Obj5B_Index
00012116 7000                       		moveq	#0,d0
00012118 1028 0028                  		move.b	$28(a0),d0
0001211C 0240 0007                  		andi.w	#7,d0
00012120 D040                       		add.w	d0,d0
00012122 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012126 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001212A                            
0001212A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001212A 2468 003C                  		movea.l	$3C(a0),a2
0001212E 7000                       		moveq	#0,d0
00012130 1028 0037                  		move.b	$37(a0),d0
00012134 1032 0000                  		move.b	(a2,d0.w),d0
00012138 D068 0032                  		add.w	$32(a0),d0
0001213C 3140 000C                  		move.w	d0,$C(a0)
00012140 7200                       		moveq	#0,d1
00012142 1228 0019                  		move.b	$19(a0),d1
00012146 0641 000B                  		addi.w	#$B,d1
0001214A 343C 0010                  		move.w	#$10,d2
0001214E 363C 0011                  		move.w	#$11,d3
00012152 3828 0008                  		move.w	8(a0),d4
00012156 6100 EA5C                  		bsr.w	SolidObject
0001215A 4A04                       		tst.b	d4
0001215C 6A00                       		bpl.s	loc_10F92
0001215E 1544 0036                  		move.b	d4,$36(a2)
00012162                            
00012162                            loc_10F92:
00012162 0828 0003 0022             		btst	#3,$22(a0)
00012168 6700                       		beq.s	locret_10FA0
0001216A 157C 0001 0036             		move.b	#1,$36(a2)
00012170                            
00012170                            locret_10FA0:
00012170 4E75                       		rts	
00012172                            ; ===========================================================================
00012172 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00012174 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012176 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012178 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001217A                            ; ===========================================================================
0001217A                            
0001217A                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001217A 4A68 0034                  		tst.w	$34(a0)
0001217E 6600                       		bne.s	loc_10FC0
00012180 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012186 6600                       		bne.s	locret_10FBE
00012188 317C 001E 0034             		move.w	#$1E,$34(a0)
0001218E                            
0001218E                            locret_10FBE:
0001218E 4E75                       		rts	
00012190                            ; ===========================================================================
00012190                            
00012190                            loc_10FC0:
00012190 5368 0034                  		subq.w	#1,$34(a0)
00012194 66F8                       		bne.s	locret_10FBE
00012196 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001219A 4E75                       		rts	
0001219C                            ; ===========================================================================
0001219C                            
0001219C                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001219C 4A68 0034                  		tst.w	$34(a0)
000121A0 6600                       		bne.s	loc_10FE0
000121A2 4A28 0036                  		tst.b	$36(a0)
000121A6 6A00                       		bpl.s	locret_10FDE
000121A8 317C 003C 0034             		move.w	#$3C,$34(a0)
000121AE                            
000121AE                            locret_10FDE:
000121AE 4E75                       		rts	
000121B0                            ; ===========================================================================
000121B0                            
000121B0                            loc_10FE0:
000121B0 5368 0034                  		subq.w	#1,$34(a0)
000121B4 6600                       		bne.s	loc_10FEC
000121B6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000121BA 4E75                       		rts	
000121BC                            ; ===========================================================================
000121BC                            
000121BC                            loc_10FEC:
000121BC 43E8 0038                  		lea	$38(a0),a1
000121C0 3028 0034                  		move.w	$34(a0),d0
000121C4 E408                       		lsr.b	#2,d0
000121C6 0200 0001                  		andi.b	#1,d0
000121CA 12C0                       		move.b	d0,(a1)+
000121CC 0A00 0001                  		eori.b	#1,d0
000121D0 12C0                       		move.b	d0,(a1)+
000121D2 0A00 0001                  		eori.b	#1,d0
000121D6 12C0                       		move.b	d0,(a1)+
000121D8 0A00 0001                  		eori.b	#1,d0
000121DC 12C0                       		move.b	d0,(a1)+
000121DE 4E75                       		rts	
000121E0                            ; ===========================================================================
000121E0                            
000121E0                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000121E0 43E8 0038                  		lea	$38(a0),a1
000121E4 0C11 0080                  		cmpi.b	#$80,(a1)
000121E8 6700                       		beq.s	locret_11038
000121EA 5211                       		addq.b	#1,(a1)
000121EC 7200                       		moveq	#0,d1
000121EE 1219                       		move.b	(a1)+,d1
000121F0 4841                       		swap	d1
000121F2 E289                       		lsr.l	#1,d1
000121F4 2401                       		move.l	d1,d2
000121F6 E289                       		lsr.l	#1,d1
000121F8 2601                       		move.l	d1,d3
000121FA D682                       		add.l	d2,d3
000121FC 4841                       		swap	d1
000121FE 4842                       		swap	d2
00012200 4843                       		swap	d3
00012202 12C3                       		move.b	d3,(a1)+
00012204 12C2                       		move.b	d2,(a1)+
00012206 12C1                       		move.b	d1,(a1)+
00012208                            
00012208                            locret_11038:
00012208 4E75                       		rts	
0001220A 4E75                       		rts	
0001220C                            ; ===========================================================================
0001220C                            ; ---------------------------------------------------------------------------
0001220C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001220C                            ; ---------------------------------------------------------------------------
0001220C                            Map_obj5B:
0001220C                            	include "_maps\obj5B.asm"
0001220C                            ; ---------------------------------------------------------------------------
0001220C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001220C                            ; ---------------------------------------------------------------------------
0001220C 0000                       		dc.w byte_1103E-Map_obj5B
0001220E 01                         byte_1103E:	dc.b 1
0001220F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012214                            		even
00012214                            		even
00012214                            
00012214                            ; ===========================================================================
00012214                            ; ---------------------------------------------------------------------------
00012214                            ; Object 5C - metal girders in foreground (SLZ)
00012214                            ; ---------------------------------------------------------------------------
00012214                            
00012214                            Obj5C:					; XREF: Obj_Index
00012214 7000                       		moveq	#0,d0
00012216 1028 0024                  		move.b	$24(a0),d0
0001221A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001221E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012222                            ; ===========================================================================
00012222 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012224 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012226                            ; ===========================================================================
00012226                            
00012226                            Obj5C_Main:				; XREF: Obj5C_Index
00012226 5428 0024                  		addq.b	#2,$24(a0)
0001222A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012232 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012238 117C 0010 0019             		move.b	#$10,$19(a0)
0001223E                            
0001223E                            Obj5C_Display:				; XREF: Obj5C_Index
0001223E 2238 F700                  		move.l	($FFFFF700).w,d1
00012242 D281                       		add.l	d1,d1
00012244 4841                       		swap	d1
00012246 4441                       		neg.w	d1
00012248 3141 0008                  		move.w	d1,8(a0)
0001224C 2238 F704                  		move.l	($FFFFF704).w,d1
00012250 D281                       		add.l	d1,d1
00012252 4841                       		swap	d1
00012254 0241 003F                  		andi.w	#$3F,d1
00012258 4441                       		neg.w	d1
0001225A 0641 0100                  		addi.w	#$100,d1
0001225E 3141 000A                  		move.w	d1,$A(a0)
00012262 6000 C580                  		bra.w	DisplaySprite
00012266                            ; ===========================================================================
00012266                            ; ---------------------------------------------------------------------------
00012266                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012266                            ; ---------------------------------------------------------------------------
00012266                            Map_obj5C:
00012266                            	include "_maps\obj5C.asm"
00012266                            ; ---------------------------------------------------------------------------
00012266                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012266                            ; ---------------------------------------------------------------------------
00012266 0000                       		dc.w byte_11098-Map_obj5C
00012268 09                         byte_11098:	dc.b 9
00012269 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001226E A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00012273 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012278 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001227D 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012282 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012287 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001228C 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012291 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012296                            		even
00012296                            		even
00012296                            
00012296                            ; ===========================================================================
00012296                            ; ---------------------------------------------------------------------------
00012296                            ; Object 1B - water surface (LZ)
00012296                            ; ---------------------------------------------------------------------------
00012296                            
00012296                            Obj1B:					; XREF: Obj_Index
00012296 7000                       		moveq	#0,d0
00012298 1028 0024                  		move.b	$24(a0),d0
0001229C 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000122A0 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000122A4                            ; ===========================================================================
000122A4 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000122A6 0000                       		dc.w Obj1B_Action-Obj1B_Index
000122A8                            ; ===========================================================================
000122A8                            
000122A8                            Obj1B_Main:				; XREF: Obj1B_Index
000122A8 5428 0024                  		addq.b	#2,$24(a0)
000122AC 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000122B4 317C C300 0002             		move.w	#$C300,2(a0)
000122BA 117C 0004 0001             		move.b	#4,1(a0)
000122C0 117C 0080 0019             		move.b	#$80,$19(a0)
000122C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000122CC                            
000122CC                            Obj1B_Action:				; XREF: Obj1B_Index
000122CC 3238 F700                  		move.w	($FFFFF700).w,d1
000122D0 0241 FFE0                  		andi.w	#$FFE0,d1
000122D4 D268 0030                  		add.w	$30(a0),d1
000122D8 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000122DE 6700                       		beq.s	loc_11114
000122E0 0641 0020                  		addi.w	#$20,d1
000122E4                            
000122E4                            loc_11114:
000122E4 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000122E8 3238 F646                  		move.w	($FFFFF646).w,d1
000122EC 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000122F0 4A28 0032                  		tst.b	$32(a0)
000122F4 6600                       		bne.s	Obj1B_Animate
000122F6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000122FC 6700                       		beq.s	loc_1114A	; if not, branch
000122FE 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012302 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012308 6000                       		bra.s	Obj1B_Display
0001230A                            ; ===========================================================================
0001230A                            
0001230A                            Obj1B_Animate:				; XREF: loc_11114
0001230A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001230E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012310 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012316 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001231A                            
0001231A                            loc_1114A:				; XREF: loc_11114
0001231A 5328 001E                  		subq.b	#1,$1E(a0)
0001231E 6A00                       		bpl.s	Obj1B_Display
00012320 117C 0007 001E             		move.b	#7,$1E(a0)
00012326 5228 001A                  		addq.b	#1,$1A(a0)
0001232A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012330 6500                       		bcs.s	Obj1B_Display
00012332 117C 0000 001A             		move.b	#0,$1A(a0)
00012338                            
00012338                            Obj1B_Display:
00012338 6000 C4AA                  		bra.w	DisplaySprite
0001233C                            ; ===========================================================================
0001233C                            ; ---------------------------------------------------------------------------
0001233C                            ; Sprite mappings - water surface (LZ)
0001233C                            ; ---------------------------------------------------------------------------
0001233C                            Map_obj1B:
0001233C                            	include "_maps\obj1B.asm"
0001233C                            ; ---------------------------------------------------------------------------
0001233C                            ; Sprite mappings - water surface (LZ)
0001233C                            ; ---------------------------------------------------------------------------
0001233C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012340 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012344 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012348 03                         byte_11178:	dc.b 3
00012349 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001234E FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012353 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012358 03                         byte_11188:	dc.b 3
00012359 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001235E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012363 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012368 03                         byte_11198:	dc.b 3
00012369 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001236E FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012373 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012378 06                         byte_111A8:	dc.b 6
00012379 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001237E FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012383 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012388 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001238D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012392 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012397 06                         byte_111C7:	dc.b 6
00012398 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001239D FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000123A2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000123A7 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000123AC FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000123B1 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000123B6 06                         byte_111E6:	dc.b 6
000123B7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000123BC FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000123C1 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000123C6 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000123CB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000123D0 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000123D6 00                         		even
000123D6 00                         		even
000123D6                            
000123D6                            ; ===========================================================================
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            ; Object 0B - pole that	breaks (LZ)
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            
000123D6                            Obj0B:					; XREF: Obj_Index
000123D6 7000                       		moveq	#0,d0
000123D8 1028 0024                  		move.b	$24(a0),d0
000123DC 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000123E0 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000123E4                            ; ===========================================================================
000123E4 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000123E6 0000                       		dc.w Obj0B_Action-Obj0B_Index
000123E8 0000                       		dc.w Obj0B_Display-Obj0B_Index
000123EA                            ; ===========================================================================
000123EA                            
000123EA                            Obj0B_Main:				; XREF: Obj0B_Index
000123EA 5428 0024                  		addq.b	#2,$24(a0)
000123EE 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000123F6 317C 43DE 0002             		move.w	#$43DE,2(a0)
000123FC 117C 0004 0001             		move.b	#4,1(a0)
00012402 117C 0008 0019             		move.b	#8,$19(a0)
00012408 117C 0004 0018             		move.b	#4,$18(a0)
0001240E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012414 7000                       		moveq	#0,d0
00012416 1028 0028                  		move.b	$28(a0),d0	; get object type
0001241A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001241E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012422                            
00012422                            Obj0B_Action:				; XREF: Obj0B_Index
00012422 4A28 0032                  		tst.b	$32(a0)
00012426 6700                       		beq.s	Obj0B_Grab
00012428 4A68 0030                  		tst.w	$30(a0)
0001242C 6700                       		beq.s	Obj0B_MoveUp
0001242E 5368 0030                  		subq.w	#1,$30(a0)
00012432 6600                       		bne.s	Obj0B_MoveUp
00012434 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001243A 6000                       		bra.s	Obj0B_Release
0001243C                            ; ===========================================================================
0001243C                            
0001243C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001243C 43F8 D000                  		lea	($FFFFD000).w,a1
00012440 3028 000C                  		move.w	$C(a0),d0
00012444 0440 0018                  		subi.w	#$18,d0
00012448 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001244E 6700                       		beq.s	Obj0B_MoveDown
00012450 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012454 B069 000C                  		cmp.w	$C(a1),d0
00012458 6500                       		bcs.s	Obj0B_MoveDown
0001245A 3340 000C                  		move.w	d0,$C(a1)
0001245E                            
0001245E                            Obj0B_MoveDown:
0001245E 0640 0024                  		addi.w	#$24,d0
00012462 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012468 6700                       		beq.s	Obj0B_LetGo
0001246A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001246E B069 000C                  		cmp.w	$C(a1),d0
00012472 6400                       		bcc.s	Obj0B_LetGo
00012474 3340 000C                  		move.w	d0,$C(a1)
00012478                            
00012478                            Obj0B_LetGo:
00012478 1038 F603                  		move.b	($FFFFF603).w,d0
0001247C 0240 0070                  		andi.w	#$70,d0
00012480 6700                       		beq.s	Obj0B_Display
00012482                            
00012482                            Obj0B_Release:				; XREF: Obj0B_Action
00012482 4228 0020                  		clr.b	$20(a0)
00012486 5428 0024                  		addq.b	#2,$24(a0)
0001248A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001248E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012492 4228 0032                  		clr.b	$32(a0)
00012496 6000                       		bra.s	Obj0B_Display
00012498                            ; ===========================================================================
00012498                            
00012498                            Obj0B_Grab:				; XREF: Obj0B_Action
00012498 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001249C 6700                       		beq.s	Obj0B_Display	; if not, branch
0001249E 43F8 D000                  		lea	($FFFFD000).w,a1
000124A2 3028 0008                  		move.w	8(a0),d0
000124A6 0640 0014                  		addi.w	#$14,d0
000124AA B069 0008                  		cmp.w	8(a1),d0
000124AE 6400                       		bcc.s	Obj0B_Display
000124B0 4228 0021                  		clr.b	$21(a0)
000124B4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000124BA 6400                       		bcc.s	Obj0B_Display
000124BC 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000124C0 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000124C4 3028 0008                  		move.w	8(a0),d0
000124C8 0640 0014                  		addi.w	#$14,d0
000124CC 3340 0008                  		move.w	d0,8(a1)
000124D0 08A9 0000 0022             		bclr	#0,$22(a1)
000124D6 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000124DC 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000124E2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000124E8 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000124EE                            
000124EE                            Obj0B_Display:				; XREF: Obj0B_Index
000124EE 6000 E39C                  		bra.w	MarkObjGone
000124F2                            ; ===========================================================================
000124F2                            ; ---------------------------------------------------------------------------
000124F2                            ; Sprite mappings - pole that breaks (LZ)
000124F2                            ; ---------------------------------------------------------------------------
000124F2                            Map_obj0B:
000124F2                            	include "_maps\obj0B.asm"
000124F2                            ; ---------------------------------------------------------------------------
000124F2                            ; Sprite mappings - pole that breaks (LZ)
000124F2                            ; ---------------------------------------------------------------------------
000124F2 0000                       		dc.w byte_11326-Map_obj0B
000124F4 0000                       		dc.w byte_11331-Map_obj0B
000124F6 02                         byte_11326:	dc.b 2			; normal pole
000124F7 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000124FC 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012501 04                         byte_11331:	dc.b 4			; broken pole
00012502 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012507 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001250C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012511 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012516                            		even
00012516                            		even
00012516                            
00012516                            ; ===========================================================================
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Object 0C - flapping door (LZ)
00012516                            ; ---------------------------------------------------------------------------
00012516                            
00012516                            Obj0C:					; XREF: Obj_Index
00012516 7000                       		moveq	#0,d0
00012518 1028 0024                  		move.b	$24(a0),d0
0001251C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012520 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012524                            ; ===========================================================================
00012524 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012526 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012528                            ; ===========================================================================
00012528                            
00012528                            Obj0C_Main:				; XREF: Obj0C_Index
00012528 5428 0024                  		addq.b	#2,$24(a0)
0001252C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012534 317C 4328 0002             		move.w	#$4328,2(a0)
0001253A 0028 0004 0001             		ori.b	#4,1(a0)
00012540 117C 0028 0019             		move.b	#$28,$19(a0)
00012546 7000                       		moveq	#0,d0
00012548 1028 0028                  		move.b	$28(a0),d0	; get object type
0001254C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012550 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012554                            
00012554                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012554 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012558 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001255A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012560 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012566 4A28 0001                  		tst.b	1(a0)
0001256A 6A00                       		bpl.s	Obj0C_Solid
0001256C 303C 00BB                  		move.w	#$BB,d0
00012570 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play door sound
00012576                            
00012576                            Obj0C_Solid:
00012576 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001257C 6100 92B4                  		bsr.w	AnimateSprite
00012580 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012584 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012588 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001258A 3038 D008                  		move.w	($FFFFD008).w,d0
0001258E B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012592 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012594 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001259A 323C 0013                  		move.w	#$13,d1
0001259E 343C 0020                  		move.w	#$20,d2
000125A2 3602                       		move.w	d2,d3
000125A4 5243                       		addq.w	#1,d3
000125A6 3828 0008                  		move.w	8(a0),d4
000125AA 6100 E608                  		bsr.w	SolidObject	; make the door	solid
000125AE                            
000125AE                            Obj0C_Display:
000125AE 6000 E2DC                  		bra.w	MarkObjGone
000125B2                            ; ===========================================================================
000125B2                            Ani_obj0C:
000125B2                            	include "_anim\obj0C.asm"
000125B2                            ; ---------------------------------------------------------------------------
000125B2                            ; Animation script - flapping door (LZ)
000125B2                            ; ---------------------------------------------------------------------------
000125B2 0000                       		dc.w byte_113E6-Ani_obj0C
000125B4 0000                       		dc.w byte_113EC-Ani_obj0C
000125B6 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
000125BC 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
000125C2                            		even
000125C2                            		even
000125C2                            
000125C2                            ; ---------------------------------------------------------------------------
000125C2                            ; Sprite mappings - flapping door (LZ)
000125C2                            ; ---------------------------------------------------------------------------
000125C2                            Map_obj0C:
000125C2                            	include "_maps\obj0C.asm"
000125C2                            ; ---------------------------------------------------------------------------
000125C2                            ; Sprite mappings - flapping door (LZ)
000125C2                            ; ---------------------------------------------------------------------------
000125C2 0000                       		dc.w byte_113F8-Map_obj0C
000125C4 0000                       		dc.w byte_11403-Map_obj0C
000125C6 0000                       		dc.w byte_1140E-Map_obj0C
000125C8 02                         byte_113F8:	dc.b 2
000125C9 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000125CE 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000125D3 02                         byte_11403:	dc.b 2
000125D4 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000125D9 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000125DE 02                         byte_1140E:	dc.b 2
000125DF D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000125E4 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000125EA 00                         		even
000125EA 00                         		even
000125EA                            
000125EA                            ; ===========================================================================
000125EA                            ; ---------------------------------------------------------------------------
000125EA                            ; Object 71 - invisible	solid blocks
000125EA                            ; ---------------------------------------------------------------------------
000125EA                            
000125EA                            Obj71:					; XREF: Obj_Index
000125EA 7000                       		moveq	#0,d0
000125EC 1028 0024                  		move.b	$24(a0),d0
000125F0 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000125F4 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000125F8                            ; ===========================================================================
000125F8 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000125FA 0000                       		dc.w Obj71_Solid-Obj71_Index
000125FC                            ; ===========================================================================
000125FC                            
000125FC                            Obj71_Main:				; XREF: Obj71_Index
000125FC 5428 0024                  		addq.b	#2,$24(a0)
00012600 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012608 317C 8680 0002             		move.w	#$8680,2(a0)
0001260E 0028 0004 0001             		ori.b	#4,1(a0)
00012614 1028 0028                  		move.b	$28(a0),d0	; get object type
00012618 1200                       		move.b	d0,d1
0001261A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001261E 0640 0010                  		addi.w	#$10,d0
00012622 E248                       		lsr.w	#1,d0
00012624 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012628 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001262C 5241                       		addq.w	#1,d1
0001262E E749                       		lsl.w	#3,d1
00012630 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012634                            
00012634                            Obj71_Solid:				; XREF: Obj71_Index
00012634 6100 C428                  		bsr.w	ChkObjOnScreen
00012638 6600                       		bne.s	Obj71_ChkDel
0001263A 7200                       		moveq	#0,d1
0001263C 1228 0019                  		move.b	$19(a0),d1
00012640 0641 000B                  		addi.w	#$B,d1
00012644 7400                       		moveq	#0,d2
00012646 1428 0016                  		move.b	$16(a0),d2
0001264A 3602                       		move.w	d2,d3
0001264C 5243                       		addq.w	#1,d3
0001264E 3828 0008                  		move.w	8(a0),d4
00012652 6100 E5A8                  		bsr.w	SolidObject71
00012656                            
00012656                            Obj71_ChkDel:
00012656 3028 0008                  		move.w	8(a0),d0
0001265A 0240 FF80                  		andi.w	#$FF80,d0
0001265E 3238 F700                  		move.w	($FFFFF700).w,d1
00012662 0441 0080                  		subi.w	#$80,d1
00012666 0241 FF80                  		andi.w	#$FF80,d1
0001266A 9041                       		sub.w	d1,d0
0001266C 0C40 0280                  		cmpi.w	#$280,d0
00012670 6200                       		bhi.s	Obj71_Delete
00012672 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012676 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012678 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
0001267C                            ; ===========================================================================
0001267C                            
0001267C                            Obj71_NoDisplay:
0001267C 4E75                       		rts	
0001267E                            ; ===========================================================================
0001267E                            
0001267E                            Obj71_Delete:
0001267E 4EFA C1A0                  		jmp	DeleteObject
00012682                            ; ===========================================================================
00012682                            ; ---------------------------------------------------------------------------
00012682                            ; Sprite mappings - invisible solid blocks
00012682                            ; ---------------------------------------------------------------------------
00012682                            Map_obj71:
00012682                            	include "_maps\obj71.asm"
00012682                            ; ---------------------------------------------------------------------------
00012682                            ; Sprite mappings - invisible solid blocks
00012682                            ; ---------------------------------------------------------------------------
00012682 0000                       		dc.w byte_114BC-Map_obj71
00012684 0000                       		dc.w byte_114D1-Map_obj71
00012686 0000                       		dc.w byte_114E6-Map_obj71
00012688 04                         byte_114BC:	dc.b 4
00012689 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001268E F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012693 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012698 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001269D 04                         byte_114D1:	dc.b 4
0001269E E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
000126A3 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
000126A8 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
000126AD 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
000126B2 04                         byte_114E6:	dc.b 4
000126B3 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
000126B8 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
000126BD 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
000126C2 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
000126C8 00                         		even
000126C8 00                         		even
000126C8                            
000126C8                            ; ===========================================================================
000126C8                            ; ---------------------------------------------------------------------------
000126C8                            ; Object 5D - fans (SLZ)
000126C8                            ; ---------------------------------------------------------------------------
000126C8                            
000126C8                            Obj5D:					; XREF: Obj_Index
000126C8 7000                       		moveq	#0,d0
000126CA 1028 0024                  		move.b	$24(a0),d0
000126CE 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
000126D2 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
000126D6                            ; ===========================================================================
000126D6 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
000126D8 0000                       		dc.w Obj5D_Delay-Obj5D_Index
000126DA                            ; ===========================================================================
000126DA                            
000126DA                            Obj5D_Main:				; XREF: Obj5D_Index
000126DA 5428 0024                  		addq.b	#2,$24(a0)
000126DE 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000126E6 317C 43A0 0002             		move.w	#$43A0,2(a0)
000126EC 0028 0004 0001             		ori.b	#4,1(a0)
000126F2 117C 0010 0019             		move.b	#$10,$19(a0)
000126F8 117C 0004 0018             		move.b	#4,$18(a0)
000126FE                            
000126FE                            Obj5D_Delay:				; XREF: Obj5D_Index
000126FE 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012704 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012706 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001270A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001270C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012712 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012718 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001271A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012720                            
00012720                            Obj5D_Blow:
00012720 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012724 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012728 43F8 D000                  		lea	($FFFFD000).w,a1
0001272C 3029 0008                  		move.w	8(a1),d0
00012730 9068 0008                  		sub.w	8(a0),d0
00012734 0828 0000 0022             		btst	#0,$22(a0)
0001273A 6600                       		bne.s	Obj5D_ChkSonic
0001273C 4440                       		neg.w	d0
0001273E                            
0001273E                            Obj5D_ChkSonic:
0001273E 0640 0050                  		addi.w	#$50,d0
00012742 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012746 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012748 3229 000C                  		move.w	$C(a1),d1
0001274C 0641 0060                  		addi.w	#$60,d1
00012750 9268 000C                  		sub.w	$C(a0),d1
00012754 6500                       		bcs.s	Obj5D_Animate
00012756 0C41 0070                  		cmpi.w	#$70,d1
0001275A 6400                       		bcc.s	Obj5D_Animate
0001275C 0440 0050                  		subi.w	#$50,d0
00012760 6400                       		bcc.s	loc_1159A
00012762 4640                       		not.w	d0
00012764 D040                       		add.w	d0,d0
00012766                            
00012766                            loc_1159A:
00012766 0640 0060                  		addi.w	#$60,d0
0001276A 0828 0000 0022             		btst	#0,$22(a0)
00012770 6600                       		bne.s	loc_115A8
00012772 4440                       		neg.w	d0
00012774                            
00012774                            loc_115A8:
00012774 4400                       		neg.b	d0
00012776 E840                       		asr.w	#4,d0
00012778 0828 0000 0028             		btst	#0,$28(a0)
0001277E 6700                       		beq.s	Obj5D_MoveSonic
00012780 4440                       		neg.w	d0
00012782                            
00012782                            Obj5D_MoveSonic:
00012782 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012786                            
00012786                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012786 5328 001E                  		subq.b	#1,$1E(a0)
0001278A 6A00                       		bpl.s	Obj5D_ChkDel
0001278C 117C 0000 001E             		move.b	#0,$1E(a0)
00012792 5228 001B                  		addq.b	#1,$1B(a0)
00012796 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0001279C 6500                       		bcs.s	loc_115D8
0001279E 117C 0000 001B             		move.b	#0,$1B(a0)
000127A4                            
000127A4                            loc_115D8:
000127A4 7000                       		moveq	#0,d0
000127A6 0828 0000 0028             		btst	#0,$28(a0)
000127AC 6700                       		beq.s	loc_115E4
000127AE 7002                       		moveq	#2,d0
000127B0                            
000127B0                            loc_115E4:
000127B0 D028 001B                  		add.b	$1B(a0),d0
000127B4 1140 001A                  		move.b	d0,$1A(a0)
000127B8                            
000127B8                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000127B8 6100 C02A                  		bsr.w	DisplaySprite
000127BC 3028 0008                  		move.w	8(a0),d0
000127C0 0240 FF80                  		andi.w	#$FF80,d0
000127C4 3238 F700                  		move.w	($FFFFF700).w,d1
000127C8 0441 0080                  		subi.w	#$80,d1
000127CC 0241 FF80                  		andi.w	#$FF80,d1
000127D0 9041                       		sub.w	d1,d0
000127D2 0C40 0280                  		cmpi.w	#$280,d0
000127D6 6200 C048                  		bhi.w	DeleteObject
000127DA 4E75                       		rts	
000127DC                            ; ===========================================================================
000127DC                            ; ---------------------------------------------------------------------------
000127DC                            ; Sprite mappings - fans (SLZ)
000127DC                            ; ---------------------------------------------------------------------------
000127DC                            Map_obj5D:
000127DC                            	include "_maps\obj5D.asm"
000127DC                            ; ---------------------------------------------------------------------------
000127DC                            ; Sprite mappings - fans (SLZ)
000127DC                            ; ---------------------------------------------------------------------------
000127DC 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000127E0 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000127E4 0000                       		dc.w byte_1161A-Map_obj5D
000127E6 02                         byte_1161A:	dc.b 2
000127E7 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000127EC 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000127F1 02                         byte_11625:	dc.b 2
000127F2 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000127F7 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000127FC 02                         byte_11630:	dc.b 2
000127FD F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012802 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012808 00                         		even
00012808 00                         		even
00012808                            
00012808                            ; ===========================================================================
00012808                            ; ---------------------------------------------------------------------------
00012808                            ; Object 5E - seesaws (SLZ)
00012808                            ; ---------------------------------------------------------------------------
00012808                            
00012808                            Obj5E:					; XREF: Obj_Index
00012808 7000                       		moveq	#0,d0
0001280A 1028 0024                  		move.b	$24(a0),d0
0001280E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012812 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012816 3028 0030                  		move.w	$30(a0),d0
0001281A 0240 FF80                  		andi.w	#$FF80,d0
0001281E 3238 F700                  		move.w	($FFFFF700).w,d1
00012822 0441 0080                  		subi.w	#$80,d1
00012826 0241 FF80                  		andi.w	#$FF80,d1
0001282A 9041                       		sub.w	d1,d0
0001282C 6B00 BFF2                  		bmi.w	DeleteObject
00012830 0C40 0280                  		cmpi.w	#$280,d0
00012834 6200 BFEA                  		bhi.w	DeleteObject
00012838 6000 BFAA                  		bra.w	DisplaySprite
0001283C                            ; ===========================================================================
0001283C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001283E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012840 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012842 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012844 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012846 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012848                            ; ===========================================================================
00012848                            
00012848                            Obj5E_Main:				; XREF: Obj5E_Index
00012848 5428 0024                  		addq.b	#2,$24(a0)
0001284C 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012854 317C 0374 0002             		move.w	#$374,2(a0)
0001285A 0028 0004 0001             		ori.b	#4,1(a0)
00012860 117C 0004 0018             		move.b	#4,$18(a0)
00012866 117C 0030 0019             		move.b	#$30,$19(a0)
0001286C 3168 0008 0030             		move.w	8(a0),$30(a0)
00012872 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012876 6600                       		bne.s	loc_116D2	; if not, branch
00012878 6100 C406                  		bsr.w	SingleObjLoad2
0001287C 6600                       		bne.s	loc_116D2
0001287E 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012882 5C29 0024                  		addq.b	#6,$24(a1)
00012886 3368 0008 0008             		move.w	8(a0),8(a1)
0001288C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012892 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012898 2348 003C                  		move.l	a0,$3C(a1)
0001289C                            
0001289C                            loc_116D2:
0001289C 0828 0000 0022             		btst	#0,$22(a0)
000128A2 6700                       		beq.s	loc_116E0
000128A4 117C 0002 001A             		move.b	#2,$1A(a0)
000128AA                            
000128AA                            loc_116E0:
000128AA 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000128B0                            
000128B0                            Obj5E_Slope:				; XREF: Obj5E_Index
000128B0 1228 003A                  		move.b	$3A(a0),d1
000128B4 6100 0000                  		bsr.w	loc_11766
000128B8 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000128BE 0828 0000 001A             		btst	#0,$1A(a0)
000128C4 6700                       		beq.s	loc_11702
000128C6 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000128CC                            
000128CC                            loc_11702:
000128CC 43F8 D000                  		lea	($FFFFD000).w,a1
000128D0 3169 0012 0038             		move.w	$12(a1),$38(a0)
000128D6 323C 0030                  		move.w	#$30,d1
000128DA 4EB9 0000 84C2             		jsr	(SlopeObject).l
000128E0 4E75                       		rts	
000128E2                            ; ===========================================================================
000128E2                            
000128E2                            Obj5E_Slope2:				; XREF: Obj5E_Index
000128E2 6100 0000                  		bsr.w	loc_1174A
000128E6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000128EC 0828 0000 001A             		btst	#0,$1A(a0)
000128F2 6700                       		beq.s	loc_11730
000128F4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000128FA                            
000128FA                            loc_11730:
000128FA 323C 0030                  		move.w	#$30,d1
000128FE 4EB9 0000 8562             		jsr	(ExitPlatform).l
00012904 323C 0030                  		move.w	#$30,d1
00012908 3428 0008                  		move.w	8(a0),d2
0001290C 4EB9 0000 9552             		jsr	SlopeObject2
00012912 4E75                       		rts	
00012914                            ; ===========================================================================
00012914                            
00012914                            loc_1174A:				; XREF: Obj5E_Slope2
00012914 7202                       		moveq	#2,d1
00012916 43F8 D000                  		lea	($FFFFD000).w,a1
0001291A 3028 0008                  		move.w	8(a0),d0
0001291E 9069 0008                  		sub.w	8(a1),d0
00012922 6400                       		bcc.s	loc_1175E
00012924 4440                       		neg.w	d0
00012926 7200                       		moveq	#0,d1
00012928                            
00012928                            loc_1175E:
00012928 0C40 0008                  		cmpi.w	#8,d0
0001292C 6400                       		bcc.s	loc_11766
0001292E 7201                       		moveq	#1,d1
00012930                            
00012930                            loc_11766:
00012930 1028 001A                  		move.b	$1A(a0),d0
00012934 B001                       		cmp.b	d1,d0
00012936 6700                       		beq.s	locret_11790
00012938 6400                       		bcc.s	loc_11772
0001293A 5400                       		addq.b	#2,d0
0001293C                            
0001293C                            loc_11772:
0001293C 5300                       		subq.b	#1,d0
0001293E 1140 001A                  		move.b	d0,$1A(a0)
00012942 1141 003A                  		move.b	d1,$3A(a0)
00012946 08A8 0000 0001             		bclr	#0,1(a0)
0001294C 0828 0001 001A             		btst	#1,$1A(a0)
00012952 6700                       		beq.s	locret_11790
00012954 08E8 0000 0001             		bset	#0,1(a0)
0001295A                            
0001295A                            locret_11790:
0001295A 4E75                       		rts	
0001295C                            ; ===========================================================================
0001295C                            
0001295C                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001295C 5428 0024                  		addq.b	#2,$24(a0)
00012960 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012968 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001296E 0028 0004 0001             		ori.b	#4,1(a0)
00012974 117C 0004 0018             		move.b	#4,$18(a0)
0001297A 117C 008B 0020             		move.b	#$8B,$20(a0)
00012980 117C 000C 0019             		move.b	#$C,$19(a0)
00012986 3168 0008 0030             		move.w	8(a0),$30(a0)
0001298C 0668 0028 0008             		addi.w	#$28,8(a0)
00012992 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012998 117C 0001 001A             		move.b	#1,$1A(a0)
0001299E 0828 0000 0022             		btst	#0,$22(a0)
000129A4 6700                       		beq.s	Obj5E_MoveSpike
000129A6 0468 0050 0008             		subi.w	#$50,8(a0)
000129AC 117C 0002 003A             		move.b	#2,$3A(a0)
000129B2                            
000129B2                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000129B2 2268 003C                  		movea.l	$3C(a0),a1
000129B6 7000                       		moveq	#0,d0
000129B8 1028 003A                  		move.b	$3A(a0),d0
000129BC 9029 003A                  		sub.b	$3A(a1),d0
000129C0 6700                       		beq.s	loc_1183E
000129C2 6400                       		bcc.s	loc_117FC
000129C4 4400                       		neg.b	d0
000129C6                            
000129C6                            loc_117FC:
000129C6 323C F7E8                  		move.w	#-$818,d1
000129CA 343C FEEC                  		move.w	#-$114,d2
000129CE 0C00 0001                  		cmpi.b	#1,d0
000129D2 6700                       		beq.s	loc_11822
000129D4 323C F510                  		move.w	#-$AF0,d1
000129D8 343C FF34                  		move.w	#-$CC,d2
000129DC 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000129E2 6D00                       		blt.s	loc_11822
000129E4 323C F200                  		move.w	#-$E00,d1
000129E8 343C FF60                  		move.w	#-$A0,d2
000129EC                            
000129EC                            loc_11822:
000129EC 3141 0012                  		move.w	d1,$12(a0)
000129F0 3142 0010                  		move.w	d2,$10(a0)
000129F4 3028 0008                  		move.w	8(a0),d0
000129F8 9068 0030                  		sub.w	$30(a0),d0
000129FC 6400                       		bcc.s	loc_11838
000129FE 4468 0010                  		neg.w	$10(a0)
00012A02                            
00012A02                            loc_11838:
00012A02 5428 0024                  		addq.b	#2,$24(a0)
00012A06 6000                       		bra.s	Obj5E_SpikeFall
00012A08                            ; ===========================================================================
00012A08                            
00012A08                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012A08 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012A0E 7000                       		moveq	#0,d0
00012A10 1029 001A                  		move.b	$1A(a1),d0
00012A14 343C 0028                  		move.w	#$28,d2
00012A18 3228 0008                  		move.w	8(a0),d1
00012A1C 9268 0030                  		sub.w	$30(a0),d1
00012A20 6400                       		bcc.s	loc_1185C
00012A22 4442                       		neg.w	d2
00012A24 5440                       		addq.w	#2,d0
00012A26                            
00012A26                            loc_1185C:
00012A26 D040                       		add.w	d0,d0
00012A28 3228 0034                  		move.w	$34(a0),d1
00012A2C D272 0000                  		add.w	(a2,d0.w),d1
00012A30 3141 000C                  		move.w	d1,$C(a0)
00012A34 D468 0030                  		add.w	$30(a0),d2
00012A38 3142 0008                  		move.w	d2,8(a0)
00012A3C 4268 000E                  		clr.w	$E(a0)
00012A40 4268 000A                  		clr.w	$A(a0)
00012A44 4E75                       		rts	
00012A46                            ; ===========================================================================
00012A46                            
00012A46                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012A46 4A68 0012                  		tst.w	$12(a0)
00012A4A 6A00                       		bpl.s	loc_1189A
00012A4C 6100 BCFE                  		bsr.w	ObjectFall
00012A50 3028 0034                  		move.w	$34(a0),d0
00012A54 0440 002F                  		subi.w	#$2F,d0
00012A58 B068 000C                  		cmp.w	$C(a0),d0
00012A5C 6E00                       		bgt.s	locret_11898
00012A5E 6100 BCEC                  		bsr.w	ObjectFall
00012A62                            
00012A62                            locret_11898:
00012A62 4E75                       		rts	
00012A64                            ; ===========================================================================
00012A64                            
00012A64                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012A64 6100 BCE6                  		bsr.w	ObjectFall
00012A68 2268 003C                  		movea.l	$3C(a0),a1
00012A6C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012A72 7000                       		moveq	#0,d0
00012A74 1029 001A                  		move.b	$1A(a1),d0
00012A78 3228 0008                  		move.w	8(a0),d1
00012A7C 9268 0030                  		sub.w	$30(a0),d1
00012A80 6400                       		bcc.s	loc_118BA
00012A82 5440                       		addq.w	#2,d0
00012A84                            
00012A84                            loc_118BA:
00012A84 D040                       		add.w	d0,d0
00012A86 3228 0034                  		move.w	$34(a0),d1
00012A8A D272 0000                  		add.w	(a2,d0.w),d1
00012A8E B268 000C                  		cmp.w	$C(a0),d1
00012A92 6E00                       		bgt.s	locret_11938
00012A94 2268 003C                  		movea.l	$3C(a0),a1
00012A98 7202                       		moveq	#2,d1
00012A9A 4A68 0010                  		tst.w	$10(a0)
00012A9E 6B00                       		bmi.s	Obj5E_Spring
00012AA0 7200                       		moveq	#0,d1
00012AA2                            
00012AA2                            Obj5E_Spring:
00012AA2 1341 003A                  		move.b	d1,$3A(a1)
00012AA6 1141 003A                  		move.b	d1,$3A(a0)
00012AAA B229 001A                  		cmp.b	$1A(a1),d1
00012AAE 6700                       		beq.s	loc_1192C
00012AB0 08A9 0003 0022             		bclr	#3,$22(a1)
00012AB6 6700                       		beq.s	loc_1192C
00012AB8 4229 0025                  		clr.b	$25(a1)
00012ABC 137C 0002 0024             		move.b	#2,$24(a1)
00012AC2 45F8 D000                  		lea	($FFFFD000).w,a2
00012AC6 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012ACC 446A 0012                  		neg.w	$12(a2)
00012AD0 08EA 0001 0022             		bset	#1,$22(a2)
00012AD6 08AA 0003 0022             		bclr	#3,$22(a2)
00012ADC 422A 003C                  		clr.b	$3C(a2)
00012AE0 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012AE6 157C 0002 0024             		move.b	#2,$24(a2)
00012AEC 303C 00CC                  		move.w	#$CC,d0
00012AF0 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play spring sound
00012AF6                            
00012AF6                            loc_1192C:
00012AF6 4268 0010                  		clr.w	$10(a0)
00012AFA 4268 0012                  		clr.w	$12(a0)
00012AFE 5528 0024                  		subq.b	#2,$24(a0)
00012B02                            
00012B02                            locret_11938:
00012B02 4E75                       		rts	
00012B04                            ; ===========================================================================
00012B04 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012B0E                            
00012B0E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012B3E                            		even
00012B3E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012B6E                            		even
00012B6E                            ; ---------------------------------------------------------------------------
00012B6E                            ; Sprite mappings - seesaws (SLZ)
00012B6E                            ; ---------------------------------------------------------------------------
00012B6E                            Map_obj5E:
00012B6E                            	include "_maps\obj5E.asm"
00012B6E                            ; ---------------------------------------------------------------------------
00012B6E                            ; Sprite mappings - seesaws (SLZ)
00012B6E                            ; ---------------------------------------------------------------------------
00012B6E 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012B72 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012B76 07                         byte_119AC:	dc.b 7
00012B77 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012B7C DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012B81 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012B86 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012B8B FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012B90 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012B95 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012B9A 04                         byte_119D0:	dc.b 4
00012B9B E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012BA0 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012BA5 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012BAA E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012BB0 00                         		even
00012BB0 00                         		even
00012BB0                            
00012BB0                            ; ---------------------------------------------------------------------------
00012BB0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012BB0                            ; ---------------------------------------------------------------------------
00012BB0                            Map_obj5Ea:
00012BB0                            	include "_maps\obj5Eballs.asm"
00012BB0                            ; ---------------------------------------------------------------------------
00012BB0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012BB0                            ; ---------------------------------------------------------------------------
00012BB0 0000                       		dc.w byte_119EA-Map_obj5Ea
00012BB2 0000                       		dc.w byte_119F0-Map_obj5Ea
00012BB4 01                         byte_119EA:	dc.b 1
00012BB5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012BBA 01                         byte_119F0:	dc.b 1
00012BBB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012BC0                            		even
00012BC0                            		even
00012BC0                            
00012BC0                            ; ===========================================================================
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012BC0                            ; ---------------------------------------------------------------------------
00012BC0                            
00012BC0                            Obj5F:					; XREF: Obj_Index
00012BC0 7000                       		moveq	#0,d0
00012BC2 1028 0024                  		move.b	$24(a0),d0
00012BC6 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012BCA 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012BCE                            ; ===========================================================================
00012BCE 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012BD0 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012BD2 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012BD4 0000                       		dc.w Obj5F_End-Obj5F_Index
00012BD6                            ; ===========================================================================
00012BD6                            
00012BD6                            Obj5F_Main:				; XREF: Obj5F_Index
00012BD6 5428 0024                  		addq.b	#2,$24(a0)
00012BDA 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012BE2 317C 0400 0002             		move.w	#$400,2(a0)
00012BE8 0028 0004 0001             		ori.b	#4,1(a0)
00012BEE 117C 0003 0018             		move.b	#3,$18(a0)
00012BF4 117C 000C 0019             		move.b	#$C,$19(a0)
00012BFA 1028 0028                  		move.b	$28(a0),d0
00012BFE 6700                       		beq.s	loc_11A3C
00012C00 1140 0024                  		move.b	d0,$24(a0)
00012C04 4E75                       		rts	
00012C06                            ; ===========================================================================
00012C06                            
00012C06                            loc_11A3C:
00012C06 117C 009A 0020             		move.b	#$9A,$20(a0)
00012C0C 0868 0000 0022             		bchg	#0,$22(a0)
00012C12                            
00012C12                            Obj5F_Action:				; XREF: Obj5F_Index
00012C12 7000                       		moveq	#0,d0
00012C14 1028 0025                  		move.b	$25(a0),d0
00012C18 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012C1C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012C20 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012C26 6100 8C0A                  		bsr.w	AnimateSprite
00012C2A 6000 DC60                  		bra.w	MarkObjGone
00012C2E                            ; ===========================================================================
00012C2E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012C30 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012C32 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012C34                            ; ===========================================================================
00012C34                            
00012C34                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012C34 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012C38 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012C3C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012C3E 5428 0025                  		addq.b	#2,$25(a0)
00012C42 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012C48 317C 0010 0010             		move.w	#$10,$10(a0)
00012C4E 117C 0001 001C             		move.b	#1,$1C(a0)
00012C54 0868 0000 0022             		bchg	#0,$22(a0)
00012C5A 6700                       		beq.s	locret_11A96
00012C5C 4468 0010                  		neg.w	$10(a0)		; change direction
00012C60                            
00012C60                            locret_11A96:
00012C60 4E75                       		rts	
00012C62                            ; ===========================================================================
00012C62                            
00012C62                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012C62 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012C66 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012C6A 6B00                       		bmi.s	loc_11AA8
00012C6C 6100 BB50                  		bsr.w	SpeedToPos
00012C70 4E75                       		rts	
00012C72                            ; ===========================================================================
00012C72                            
00012C72                            loc_11AA8:
00012C72 5528 0025                  		subq.b	#2,$25(a0)
00012C76 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012C7C 4268 0010                  		clr.w	$10(a0)		; stop walking
00012C80 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012C86 4E75                       		rts	
00012C88                            ; ===========================================================================
00012C88                            
00012C88                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012C88 5368 0030                  		subq.w	#1,$30(a0)
00012C8C 6A00                       		bpl.s	locret_11AD0
00012C8E 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012C92 117C 0000 0024             		move.b	#0,$24(a0)
00012C98                            
00012C98                            locret_11AD0:
00012C98 4E75                       		rts	
00012C9A                            ; ===========================================================================
00012C9A                            
00012C9A                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012C9A 3038 D008                  		move.w	($FFFFD008).w,d0
00012C9E 9068 0008                  		sub.w	8(a0),d0
00012CA2 6400                       		bcc.s	loc_11ADE
00012CA4 4440                       		neg.w	d0
00012CA6                            
00012CA6                            loc_11ADE:
00012CA6 0C40 0060                  		cmpi.w	#$60,d0
00012CAA 6400                       		bcc.s	locret_11B5E
00012CAC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012CB0 9068 000C                  		sub.w	$C(a0),d0
00012CB4 6400                       		bcc.s	Obj5F_MakeFuse
00012CB6 4440                       		neg.w	d0
00012CB8                            
00012CB8                            Obj5F_MakeFuse:
00012CB8 0C40 0060                  		cmpi.w	#$60,d0
00012CBC 6400                       		bcc.s	locret_11B5E
00012CBE 4A78 FE08                  		tst.w	($FFFFFE08).w
00012CC2 6600                       		bne.s	locret_11B5E
00012CC4 117C 0004 0025             		move.b	#4,$25(a0)
00012CCA 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012CD0 4268 0010                  		clr.w	$10(a0)
00012CD4 117C 0002 001C             		move.b	#2,$1C(a0)
00012CDA 6100 BFA4                  		bsr.w	SingleObjLoad2
00012CDE 6600                       		bne.s	locret_11B5E
00012CE0 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012CE4 3368 0008 0008             		move.w	8(a0),8(a1)
00012CEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012CF0 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012CF6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012CFC 137C 0004 0028             		move.b	#4,$28(a1)
00012D02 137C 0003 001C             		move.b	#3,$1C(a1)
00012D08 337C 0010 0012             		move.w	#$10,$12(a1)
00012D0E 0828 0001 0022             		btst	#1,$22(a0)
00012D14 6700                       		beq.s	loc_11B54
00012D16 4469 0012                  		neg.w	$12(a1)
00012D1A                            
00012D1A                            loc_11B54:
00012D1A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012D20 2348 003C                  		move.l	a0,$3C(a1)
00012D24                            
00012D24                            locret_11B5E:
00012D24 4E75                       		rts	
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            Obj5F_Display:				; XREF: Obj5F_Index
00012D26 6100                       		bsr.s	loc_11B70
00012D28 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012D2E 6100 8B02                  		bsr.w	AnimateSprite
00012D32 6000 DB58                  		bra.w	MarkObjGone
00012D36                            ; ===========================================================================
00012D36                            
00012D36                            loc_11B70:
00012D36 5368 0030                  		subq.w	#1,$30(a0)
00012D3A 6B00                       		bmi.s	loc_11B7C
00012D3C 6100 BA80                  		bsr.w	SpeedToPos
00012D40 4E75                       		rts	
00012D42                            ; ===========================================================================
00012D42                            
00012D42                            loc_11B7C:
00012D42 4268 0030                  		clr.w	$30(a0)
00012D46 4228 0024                  		clr.b	$24(a0)
00012D4A 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012D50 7203                       		moveq	#3,d1
00012D52 2248                       		movea.l	a0,a1
00012D54 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012D5A 6000                       		bra.s	Obj5F_MakeShrap
00012D5C                            ; ===========================================================================
00012D5C                            
00012D5C                            Obj5F_Loop:
00012D5C 6100 BF22                  		bsr.w	SingleObjLoad2
00012D60 6600                       		bne.s	loc_11BCE
00012D62                            
00012D62                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012D62 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012D66 3368 0008 0008             		move.w	8(a0),8(a1)
00012D6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D72 137C 0006 0028             		move.b	#6,$28(a1)
00012D78 137C 0004 001C             		move.b	#4,$1C(a1)
00012D7E 335A 0010                  		move.w	(a2)+,$10(a1)
00012D82 335A 0012                  		move.w	(a2)+,$12(a1)
00012D86 137C 0098 0020             		move.b	#$98,$20(a1)
00012D8C 08E9 0007 0001             		bset	#7,1(a1)
00012D92                            
00012D92                            loc_11BCE:
00012D92 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012D96                            
00012D96 117C 0006 0024             		move.b	#6,$24(a0)
00012D9C                            
00012D9C                            Obj5F_End:				; XREF: Obj5F_Index
00012D9C 6100 BA20                  		bsr.w	SpeedToPos
00012DA0 0668 0018 0012             		addi.w	#$18,$12(a0)
00012DA6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012DAC 6100 8A84                  		bsr.w	AnimateSprite
00012DB0 4A28 0001                  		tst.b	1(a0)
00012DB4 6A00 BA6A                  		bpl.w	DeleteObject
00012DB8 6000 BA2A                  		bra.w	DisplaySprite
00012DBC                            ; ===========================================================================
00012DBC FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012DCC                            
00012DCC                            Ani_obj5F:
00012DCC                            	include "_anim\obj5F.asm"
00012DCC                            ; ---------------------------------------------------------------------------
00012DCC                            ; Animation script - Bomb enemy
00012DCC                            ; ---------------------------------------------------------------------------
00012DCC 0000                       		dc.w byte_11C12-Ani_obj5F
00012DCE 0000                       		dc.w byte_11C16-Ani_obj5F
00012DD0 0000                       		dc.w byte_11C1C-Ani_obj5F
00012DD2 0000                       		dc.w byte_11C20-Ani_obj5F
00012DD4 0000                       		dc.w byte_11C24-Ani_obj5F
00012DD6 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012DDA 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012DE0 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012DE4 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012DE8 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012DEC                            		even
00012DEC                            		even
00012DEC                            
00012DEC                            ; ---------------------------------------------------------------------------
00012DEC                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012DEC                            ; ---------------------------------------------------------------------------
00012DEC                            Map_obj5F:
00012DEC                            	include "_maps\obj5F.asm"
00012DEC                            ; ---------------------------------------------------------------------------
00012DEC                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012DEC                            ; ---------------------------------------------------------------------------
00012DEC 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012DF0 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012DF4 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012DF8 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012DFC 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012E00 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012E04 03                         byte_11C40:	dc.b 3
00012E05 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012E0A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012E0F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012E14 03                         byte_11C50:	dc.b 3
00012E15 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012E1A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012E1F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012E24 03                         byte_11C60:	dc.b 3
00012E25 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012E2A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012E2F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012E34 03                         byte_11C70:	dc.b 3
00012E35 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012E3A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012E3F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012E44 03                         byte_11C80:	dc.b 3
00012E45 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012E4A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012E4F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012E54 03                         byte_11C90:	dc.b 3
00012E55 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012E5A 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012E5F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012E64 02                         byte_11CA0:	dc.b 2
00012E65 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012E6A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012E6F 02                         byte_11CAB:	dc.b 2
00012E70 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012E75 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012E7A 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012E7B E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012E80 01                         byte_11CBC:	dc.b 1			; fuse
00012E81 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012E86 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012E87 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012E8C 01                         byte_11CC8:	dc.b 1			; fireball
00012E8D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012E92                            		even
00012E92                            		even
00012E92                            
00012E92                            ; ===========================================================================
00012E92                            ; ---------------------------------------------------------------------------
00012E92                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012E92                            ; ---------------------------------------------------------------------------
00012E92                            
00012E92                            Obj60:					; XREF: Obj_Index
00012E92 7000                       		moveq	#0,d0
00012E94 1028 0024                  		move.b	$24(a0),d0
00012E98 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012E9C 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012EA0                            ; ===========================================================================
00012EA0 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012EA2 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012EA4 0000                       		dc.w Obj60_Display-Obj60_Index
00012EA6 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012EA8 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012EAA                            ; ===========================================================================
00012EAA                            
00012EAA                            Obj60_Main:				; XREF: Obj60_Index
00012EAA 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012EB2 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012EB8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012EBE 6700                       		beq.s	loc_11D02
00012EC0 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012EC6                            
00012EC6                            loc_11D02:
00012EC6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012ECC 6600                       		bne.s	loc_11D10
00012ECE 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012ED4                            
00012ED4                            loc_11D10:
00012ED4 0028 0004 0001             		ori.b	#4,1(a0)
00012EDA 117C 0004 0018             		move.b	#4,$18(a0)
00012EE0 117C 000B 0020             		move.b	#$B,$20(a0)
00012EE6 117C 000C 0019             		move.b	#$C,$19(a0)
00012EEC 7400                       		moveq	#0,d2
00012EEE 45E8 0037                  		lea	$37(a0),a2
00012EF2 264A                       		movea.l	a2,a3
00012EF4 524A                       		addq.w	#1,a2
00012EF6 7203                       		moveq	#3,d1
00012EF8                            
00012EF8                            Obj60_MakeOrbs:
00012EF8 6100 BD86                  		bsr.w	SingleObjLoad2
00012EFC 6600                       		bne.s	loc_11D90
00012EFE 5213                       		addq.b	#1,(a3)
00012F00 3A09                       		move.w	a1,d5
00012F02 0445 D000                  		subi.w	#-$3000,d5
00012F06 EC4D                       		lsr.w	#6,d5
00012F08 0245 007F                  		andi.w	#$7F,d5
00012F0C 14C5                       		move.b	d5,(a2)+
00012F0E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012F10 137C 0006 0024             		move.b	#6,$24(a1)
00012F16 2368 0004 0004             		move.l	4(a0),4(a1)
00012F1C 3368 0002 0002             		move.w	2(a0),2(a1)
00012F22 0029 0004 0001             		ori.b	#4,1(a1)
00012F28 137C 0004 0018             		move.b	#4,$18(a1)
00012F2E 137C 0008 0019             		move.b	#8,$19(a1)
00012F34 137C 0003 001A             		move.b	#3,$1A(a1)
00012F3A 137C 0098 0020             		move.b	#$98,$20(a1)
00012F40 1342 0026                  		move.b	d2,$26(a1)
00012F44 0602 0040                  		addi.b	#$40,d2
00012F48 2348 003C                  		move.l	a0,$3C(a1)
00012F4C 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012F50                            
00012F50                            loc_11D90:
00012F50 7001                       		moveq	#1,d0
00012F52 0828 0000 0022             		btst	#0,$22(a0)
00012F58 6700                       		beq.s	Obj60_Move
00012F5A 4440                       		neg.w	d0
00012F5C                            
00012F5C                            Obj60_Move:
00012F5C 1140 0036                  		move.b	d0,$36(a0)
00012F60 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012F66 5428 0024                  		addq.b	#2,$24(a0)
00012F6A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012F70 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012F76 6700                       		beq.s	locret_11DBC	; if not, branch
00012F78 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012F7C                            
00012F7C                            locret_11DBC:
00012F7C 4E75                       		rts	
00012F7E                            ; ===========================================================================
00012F7E                            
00012F7E                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012F7E 3038 D008                  		move.w	($FFFFD008).w,d0
00012F82 9068 0008                  		sub.w	8(a0),d0
00012F86 6400                       		bcc.s	loc_11DCA
00012F88 4440                       		neg.w	d0
00012F8A                            
00012F8A                            loc_11DCA:
00012F8A 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012F8E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012F90 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012F94 9068 000C                  		sub.w	$C(a0),d0
00012F98 6400                       		bcc.s	loc_11DDC
00012F9A 4440                       		neg.w	d0
00012F9C                            
00012F9C                            loc_11DDC:
00012F9C 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012FA0 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012FA2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012FA6 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012FA8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012FAE                            
00012FAE                            Obj60_Animate:
00012FAE 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012FB4 6100 887C                  		bsr.w	AnimateSprite
00012FB8 6000 0000                  		bra.w	Obj60_ChkDel
00012FBC                            ; ===========================================================================
00012FBC                            
00012FBC                            Obj60_Display:				; XREF: Obj60_Index
00012FBC 6100 B800                  		bsr.w	SpeedToPos
00012FC0                            
00012FC0                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012FC0 3028 0008                  		move.w	8(a0),d0
00012FC4 0240 FF80                  		andi.w	#$FF80,d0
00012FC8 3238 F700                  		move.w	($FFFFF700).w,d1
00012FCC 0441 0080                  		subi.w	#$80,d1
00012FD0 0241 FF80                  		andi.w	#$FF80,d1
00012FD4 9041                       		sub.w	d1,d0
00012FD6 0C40 0280                  		cmpi.w	#$280,d0
00012FDA 6200 0000                  		bhi.w	Obj60_ChkGone
00012FDE 6000 B804                  		bra.w	DisplaySprite
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012FE2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012FE6 7000                       		moveq	#0,d0
00012FE8 1028 0023                  		move.b	$23(a0),d0
00012FEC 6700                       		beq.s	loc_11E34
00012FEE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012FF4                            
00012FF4                            loc_11E34:
00012FF4 45E8 0037                  		lea	$37(a0),a2
00012FF8 7400                       		moveq	#0,d2
00012FFA 141A                       		move.b	(a2)+,d2
00012FFC 5342                       		subq.w	#1,d2
00012FFE 6500                       		bcs.s	Obj60_Delete
00013000                            
00013000                            loc_11E40:
00013000 7000                       		moveq	#0,d0
00013002 101A                       		move.b	(a2)+,d0
00013004 ED48                       		lsl.w	#6,d0
00013006 0680 00FF D000             		addi.l	#$FFD000,d0
0001300C 2240                       		movea.l	d0,a1
0001300E 6100 B812                  		bsr.w	DeleteObject2
00013012 51CA FFEC                  		dbf	d2,loc_11E40
00013016                            
00013016                            Obj60_Delete:
00013016 6000 B808                  		bra.w	DeleteObject
0001301A                            ; ===========================================================================
0001301A                            
0001301A                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001301A 2268 003C                  		movea.l	$3C(a0),a1
0001301E 0C11 0060                  		cmpi.b	#$60,0(a1)
00013022 6600 B7FC                  		bne.w	DeleteObject
00013026 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001302C 6600                       		bne.s	Obj60_Circle
0001302E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00013034 6600                       		bne.s	Obj60_Circle
00013036 5428 0024                  		addq.b	#2,$24(a0)
0001303A 5329 0037                  		subq.b	#1,$37(a1)
0001303E 6600                       		bne.s	Obj60_FireOrb
00013040 5429 0024                  		addq.b	#2,$24(a1)
00013044                            
00013044                            Obj60_FireOrb:
00013044 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001304A 0829 0000 0022             		btst	#0,$22(a1)
00013050 6700                       		beq.s	Obj60_Display2
00013052 4468 0010                  		neg.w	$10(a0)
00013056                            
00013056                            Obj60_Display2:
00013056 6000 B78C                  		bra.w	DisplaySprite
0001305A                            ; ===========================================================================
0001305A                            
0001305A                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001305A 1028 0026                  		move.b	$26(a0),d0
0001305E 4EB9 0000 34B8             		jsr	(CalcSine).l
00013064 E841                       		asr.w	#4,d1
00013066 D269 0008                  		add.w	8(a1),d1
0001306A 3141 0008                  		move.w	d1,8(a0)
0001306E E840                       		asr.w	#4,d0
00013070 D069 000C                  		add.w	$C(a1),d0
00013074 3140 000C                  		move.w	d0,$C(a0)
00013078 1029 0036                  		move.b	$36(a1),d0
0001307C D128 0026                  		add.b	d0,$26(a0)
00013080 6000 B762                  		bra.w	DisplaySprite
00013084                            ; ===========================================================================
00013084                            
00013084                            Obj60_ChkDel2:				; XREF: Obj60_Index
00013084 6100 B738                  		bsr.w	SpeedToPos
00013088 4A28 0001                  		tst.b	1(a0)
0001308C 6A00 B792                  		bpl.w	DeleteObject
00013090 6000 B752                  		bra.w	DisplaySprite
00013094                            ; ===========================================================================
00013094                            Ani_obj60:
00013094                            	include "_anim\obj60.asm"
00013094                            ; ---------------------------------------------------------------------------
00013094                            ; Animation script - Orbinaut enemy
00013094                            ; ---------------------------------------------------------------------------
00013094 0000                       		dc.w byte_11EDA-Ani_obj60
00013096 0000                       		dc.w byte_11EDE-Ani_obj60
00013098 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001309C 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000130A2                            		even
000130A2                            		even
000130A2                            
000130A2                            ; ---------------------------------------------------------------------------
000130A2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000130A2                            ; ---------------------------------------------------------------------------
000130A2                            Map_obj60:
000130A2                            	include "_maps\obj60.asm"
000130A2                            ; ---------------------------------------------------------------------------
000130A2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000130A2                            ; ---------------------------------------------------------------------------
000130A2 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000130A6 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000130AA 01                         byte_11EEC:	dc.b 1
000130AB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000130B0 01                         byte_11EF2:	dc.b 1
000130B1 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000130B6 01                         byte_11EF8:	dc.b 1
000130B7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000130BC 01                         byte_11EFE:	dc.b 1
000130BD F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000130C2                            		even
000130C2                            		even
000130C2                            
000130C2                            ; ===========================================================================
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Object 16 - harpoon (LZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            
000130C2                            Obj16:					; XREF: Obj_Index
000130C2 7000                       		moveq	#0,d0
000130C4 1028 0024                  		move.b	$24(a0),d0
000130C8 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000130CC 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000130D0                            ; ===========================================================================
000130D0 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000130D2 0000                       		dc.w Obj16_Move-Obj16_Index
000130D4 0000                       		dc.w Obj16_Wait-Obj16_Index
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            Obj16_Main:				; XREF: Obj16_Index
000130D6 5428 0024                  		addq.b	#2,$24(a0)
000130DA 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000130E2 317C 03CC 0002             		move.w	#$3CC,2(a0)
000130E8 0028 0004 0001             		ori.b	#4,1(a0)
000130EE 117C 0004 0018             		move.b	#4,$18(a0)
000130F4 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000130FA 117C 0014 0019             		move.b	#$14,$19(a0)
00013100 317C 003C 0030             		move.w	#60,$30(a0)
00013106                            
00013106                            Obj16_Move:				; XREF: Obj16_Index
00013106 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001310C 6100 8724                  		bsr.w	AnimateSprite
00013110 7000                       		moveq	#0,d0
00013112 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013116 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001311C 6000 D76E                  		bra.w	MarkObjGone
00013120                            ; ===========================================================================
00013120 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013126                            ; ===========================================================================
00013126                            
00013126                            Obj16_Wait:				; XREF: Obj16_Index
00013126 5368 0030                  		subq.w	#1,$30(a0)
0001312A 6A00                       		bpl.s	Obj16_ChkDel
0001312C 317C 003C 0030             		move.w	#60,$30(a0)
00013132 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013136 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001313C                            
0001313C                            Obj16_ChkDel:
0001313C 6000 D74E                  		bra.w	MarkObjGone
00013140                            ; ===========================================================================
00013140                            Ani_obj16:
00013140                            	include "_anim\obj16.asm"
00013140                            ; ---------------------------------------------------------------------------
00013140                            ; Animation script - harpoon (LZ)
00013140                            ; ---------------------------------------------------------------------------
00013140 0000                       		dc.w byte_11F8A-Ani_obj16
00013142 0000                       		dc.w byte_11F8E-Ani_obj16
00013144 0000                       		dc.w byte_11F92-Ani_obj16
00013146 0000                       		dc.w byte_11F96-Ani_obj16
00013148 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001314C 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013150 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013154 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013158                            		even
00013158                            		even
00013158                            
00013158                            ; ---------------------------------------------------------------------------
00013158                            ; Sprite mappings - harpoon (LZ)
00013158                            ; ---------------------------------------------------------------------------
00013158                            Map_obj16:
00013158                            	include "_maps\obj16.asm"
00013158                            ; ---------------------------------------------------------------------------
00013158                            ; Sprite mappings - harpoon (LZ)
00013158                            ; ---------------------------------------------------------------------------
00013158 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001315C 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013160 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013164 01                         byte_11FA6:	dc.b 1
00013165 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001316A 01                         byte_11FAC:	dc.b 1
0001316B FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013170 02                         byte_11FB2:	dc.b 2
00013171 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013176 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001317B 01                         byte_11FBD:	dc.b 1
0001317C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013181 01                         byte_11FC3:	dc.b 1
00013182 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013187 02                         byte_11FC9:	dc.b 2
00013188 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001318D F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013192                            		even
00013192                            		even
00013192                            
00013192                            ; ===========================================================================
00013192                            ; ---------------------------------------------------------------------------
00013192                            ; Object 61 - blocks (LZ)
00013192                            ; ---------------------------------------------------------------------------
00013192                            
00013192                            Obj61:					; XREF: Obj_Index
00013192 7000                       		moveq	#0,d0
00013194 1028 0024                  		move.b	$24(a0),d0
00013198 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001319C 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000131A0                            ; ===========================================================================
000131A0 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000131A2 0000                       		dc.w Obj61_Action-Obj61_Index
000131A4                            
000131A4 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000131A6 200C                       		dc.b $20, $C
000131A8 1010                       		dc.b $10, $10
000131AA 1010                       		dc.b $10, $10
000131AC                            ; ===========================================================================
000131AC                            
000131AC                            Obj61_Main:				; XREF: Obj61_Index
000131AC 5428 0024                  		addq.b	#2,$24(a0)
000131B0 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000131B8 317C 43E6 0002             		move.w	#$43E6,2(a0)
000131BE 117C 0004 0001             		move.b	#4,1(a0)
000131C4 117C 0003 0018             		move.b	#3,$18(a0)
000131CA 7000                       		moveq	#0,d0
000131CC 1028 0028                  		move.b	$28(a0),d0
000131D0 E648                       		lsr.w	#3,d0
000131D2 0240 000E                  		andi.w	#$E,d0
000131D6 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000131DA 115A 0019                  		move.b	(a2)+,$19(a0)
000131DE 1152 0016                  		move.b	(a2),$16(a0)
000131E2 E248                       		lsr.w	#1,d0
000131E4 1140 001A                  		move.b	d0,$1A(a0)
000131E8 3168 0008 0034             		move.w	8(a0),$34(a0)
000131EE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000131F4 1028 0028                  		move.b	$28(a0),d0
000131F8 0200 000F                  		andi.b	#$F,d0
000131FC 6700                       		beq.s	Obj61_Action
000131FE 0C00 0007                  		cmpi.b	#7,d0
00013202 6700                       		beq.s	Obj61_Action
00013204 117C 0001 0038             		move.b	#1,$38(a0)
0001320A                            
0001320A                            Obj61_Action:				; XREF: Obj61_Index
0001320A 3F28 0008                  		move.w	8(a0),-(sp)
0001320E 7000                       		moveq	#0,d0
00013210 1028 0028                  		move.b	$28(a0),d0
00013214 0240 000F                  		andi.w	#$F,d0
00013218 D040                       		add.w	d0,d0
0001321A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001321E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013222 381F                       		move.w	(sp)+,d4
00013224 4A28 0001                  		tst.b	1(a0)
00013228 6A00                       		bpl.s	Obj61_ChkDel
0001322A 7200                       		moveq	#0,d1
0001322C 1228 0019                  		move.b	$19(a0),d1
00013230 0641 000B                  		addi.w	#$B,d1
00013234 7400                       		moveq	#0,d2
00013236 1428 0016                  		move.b	$16(a0),d2
0001323A 3602                       		move.w	d2,d3
0001323C 5243                       		addq.w	#1,d3
0001323E 6100 D974                  		bsr.w	SolidObject
00013242 1144 003F                  		move.b	d4,$3F(a0)
00013246 6100 0000                  		bsr.w	loc_12180
0001324A                            
0001324A                            Obj61_ChkDel:
0001324A 3028 0034                  		move.w	$34(a0),d0
0001324E 0240 FF80                  		andi.w	#$FF80,d0
00013252 3238 F700                  		move.w	($FFFFF700).w,d1
00013256 0441 0080                  		subi.w	#$80,d1
0001325A 0241 FF80                  		andi.w	#$FF80,d1
0001325E 9041                       		sub.w	d1,d0
00013260 0C40 0280                  		cmpi.w	#$280,d0
00013264 6200 B5BA                  		bhi.w	DeleteObject
00013268 6000 B57A                  		bra.w	DisplaySprite
0001326C                            ; ===========================================================================
0001326C 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013270 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013274 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013278 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001327C                            ; ===========================================================================
0001327C                            
0001327C                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001327C 4E75                       		rts	
0001327E                            ; ===========================================================================
0001327E                            
0001327E                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001327E 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013282 6600                       		bne.s	loc_120D6	; if yes, branch
00013284 0828 0003 0022             		btst	#3,$22(a0)
0001328A 6700                       		beq.s	locret_120D4
0001328C 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00013292                            
00013292                            locret_120D4:
00013292 4E75                       		rts	
00013294                            ; ===========================================================================
00013294                            
00013294                            loc_120D6:
00013294 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013298 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001329A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001329E 4228 0038                  		clr.b	$38(a0)
000132A2 4E75                       		rts	
000132A4                            ; ===========================================================================
000132A4                            
000132A4                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000132A4 6100 B518                  		bsr.w	SpeedToPos
000132A8 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000132AC 6100 0000                  		bsr.w	ObjHitFloor
000132B0 4A41                       		tst.w	d1
000132B2 6A00 0000                  		bpl.w	locret_12106
000132B6 5241                       		addq.w	#1,d1
000132B8 D368 000C                  		add.w	d1,$C(a0)
000132BC 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000132C0 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000132C4                            
000132C4                            locret_12106:
000132C4 4E75                       		rts	
000132C6                            ; ===========================================================================
000132C6                            
000132C6                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000132C6 6100 B4F6                  		bsr.w	SpeedToPos
000132CA 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000132CE 6100 0000                  		bsr.w	ObjHitCeiling
000132D2 4A41                       		tst.w	d1
000132D4 6A00 0000                  		bpl.w	locret_12126
000132D8 9368 000C                  		sub.w	d1,$C(a0)
000132DC 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000132E0 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000132E4                            
000132E4                            locret_12126:
000132E4 4E75                       		rts	
000132E6                            ; ===========================================================================
000132E6                            
000132E6                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000132E6 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000132EC 6600                       		bne.s	locret_12138	; if not, branch
000132EE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000132F2 4228 0038                  		clr.b	$38(a0)
000132F6                            
000132F6                            locret_12138:
000132F6 4E75                       		rts	
000132F8                            ; ===========================================================================
000132F8                            
000132F8                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000132F8 3038 F646                  		move.w	($FFFFF646).w,d0
000132FC 9068 000C                  		sub.w	$C(a0),d0
00013300 6700                       		beq.s	locret_1217E
00013302 6400                       		bcc.s	loc_12162
00013304 0C40 FFFE                  		cmpi.w	#-2,d0
00013308 6C00                       		bge.s	loc_1214E
0001330A 70FE                       		moveq	#-2,d0
0001330C                            
0001330C                            loc_1214E:
0001330C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013310 6100 0000                  		bsr.w	ObjHitCeiling
00013314 4A41                       		tst.w	d1
00013316 6A00 0000                  		bpl.w	locret_12160
0001331A 9368 000C                  		sub.w	d1,$C(a0)
0001331E                            
0001331E                            locret_12160:
0001331E 4E75                       		rts	
00013320                            ; ===========================================================================
00013320                            
00013320                            loc_12162:				; XREF: Obj61_Type07
00013320 0C40 0002                  		cmpi.w	#2,d0
00013324 6F00                       		ble.s	loc_1216A
00013326 7002                       		moveq	#2,d0
00013328                            
00013328                            loc_1216A:
00013328 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001332C 6100 0000                  		bsr.w	ObjHitFloor
00013330 4A41                       		tst.w	d1
00013332 6A00 0000                  		bpl.w	locret_1217E
00013336 5241                       		addq.w	#1,d1
00013338 D368 000C                  		add.w	d1,$C(a0)
0001333C                            
0001333C                            locret_1217E:
0001333C 4E75                       		rts	
0001333E                            ; ===========================================================================
0001333E                            
0001333E                            loc_12180:				; XREF: Obj61_Action
0001333E 4A28 0038                  		tst.b	$38(a0)
00013342 6700                       		beq.s	locret_121C0
00013344 0828 0003 0022             		btst	#3,$22(a0)
0001334A 6600                       		bne.s	loc_1219A
0001334C 4A28 003E                  		tst.b	$3E(a0)
00013350 6700                       		beq.s	locret_121C0
00013352 5928 003E                  		subq.b	#4,$3E(a0)
00013356 6000                       		bra.s	loc_121A6
00013358                            ; ===========================================================================
00013358                            
00013358                            loc_1219A:
00013358 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001335E 6700                       		beq.s	locret_121C0
00013360 5828 003E                  		addq.b	#4,$3E(a0)
00013364                            
00013364                            loc_121A6:
00013364 1028 003E                  		move.b	$3E(a0),d0
00013368 4EB9 0000 34B8             		jsr	(CalcSine).l
0001336E 323C 0400                  		move.w	#$400,d1
00013372 C1C1                       		muls.w	d1,d0
00013374 4840                       		swap	d0
00013376 D068 0030                  		add.w	$30(a0),d0
0001337A 3140 000C                  		move.w	d0,$C(a0)
0001337E                            
0001337E                            locret_121C0:
0001337E 4E75                       		rts	
00013380                            ; ===========================================================================
00013380                            ; ---------------------------------------------------------------------------
00013380                            ; Sprite mappings - blocks (LZ)
00013380                            ; ---------------------------------------------------------------------------
00013380                            Map_obj61:
00013380                            	include "_maps\obj61.asm"
00013380                            ; ---------------------------------------------------------------------------
00013380                            ; Sprite mappings - blocks (LZ)
00013380                            ; ---------------------------------------------------------------------------
00013380 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013384 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013388 01                         byte_121CA:	dc.b 1
00013389 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001338E 02                         byte_121D0:	dc.b 2
0001338F F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013394 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013399 01                         byte_121DB:	dc.b 1
0001339A F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001339F 01                         byte_121E1:	dc.b 1
000133A0 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000133A6 00                         		even
000133A6 00                         		even
000133A6                            
000133A6                            ; ===========================================================================
000133A6                            ; ---------------------------------------------------------------------------
000133A6                            ; Object 62 - gargoyle head (LZ)
000133A6                            ; ---------------------------------------------------------------------------
000133A6                            
000133A6                            Obj62:					; XREF: Obj_Index
000133A6 7000                       		moveq	#0,d0
000133A8 1028 0024                  		move.b	$24(a0),d0
000133AC 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000133B0 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000133B4 6000 D4D6                  		bra.w	MarkObjGone
000133B8                            ; ===========================================================================
000133B8 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000133BA 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000133BC 0000                       		dc.w Obj62_FireBall-Obj62_Index
000133BE 0000                       		dc.w Obj62_AniFire-Obj62_Index
000133C0                            
000133C0 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000133C8                            ; ===========================================================================
000133C8                            
000133C8                            Obj62_Main:				; XREF: Obj62_Index
000133C8 5428 0024                  		addq.b	#2,$24(a0)
000133CC 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000133D4 317C 42E9 0002             		move.w	#$42E9,2(a0)
000133DA 0028 0004 0001             		ori.b	#4,1(a0)
000133E0 117C 0003 0018             		move.b	#3,$18(a0)
000133E6 117C 0010 0019             		move.b	#$10,$19(a0)
000133EC 1028 0028                  		move.b	$28(a0),d0	; get object type
000133F0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000133F4 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000133FA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013400 0228 000F 0028             		andi.b	#$F,$28(a0)
00013406                            
00013406                            Obj62_MakeFire:				; XREF: Obj62_Index
00013406 5328 001E                  		subq.b	#1,$1E(a0)
0001340A 6600                       		bne.s	Obj62_NoFire
0001340C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013412 6100 B64A                  		bsr.w	ChkObjOnScreen
00013416 6600                       		bne.s	Obj62_NoFire
00013418 6100 B850                  		bsr.w	SingleObjLoad
0001341C 6600                       		bne.s	Obj62_NoFire
0001341E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013422 5829 0024                  		addq.b	#4,$24(a1)
00013426 3368 0008 0008             		move.w	8(a0),8(a1)
0001342C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013432 1368 0001 0001             		move.b	1(a0),1(a1)
00013438 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001343E                            
0001343E                            Obj62_NoFire:
0001343E 4E75                       		rts	
00013440                            ; ===========================================================================
00013440                            
00013440                            Obj62_FireBall:				; XREF: Obj62_Index
00013440 5428 0024                  		addq.b	#2,$24(a0)
00013444 117C 0008 0016             		move.b	#8,$16(a0)
0001344A 117C 0008 0017             		move.b	#8,$17(a0)
00013450 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013458 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001345E 0028 0004 0001             		ori.b	#4,1(a0)
00013464 117C 0004 0018             		move.b	#4,$18(a0)
0001346A 117C 0098 0020             		move.b	#$98,$20(a0)
00013470 117C 0008 0019             		move.b	#8,$19(a0)
00013476 117C 0002 001A             		move.b	#2,$1A(a0)
0001347C 5068 000C                  		addq.w	#8,$C(a0)
00013480 317C 0200 0010             		move.w	#$200,$10(a0)
00013486 0828 0000 0022             		btst	#0,$22(a0)
0001348C 6600                       		bne.s	Obj62_Sound
0001348E 4468 0010                  		neg.w	$10(a0)
00013492                            
00013492                            Obj62_Sound:
00013492 303C 00AE                  		move.w	#$AE,d0
00013496 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001349C                            
0001349C                            Obj62_AniFire:				; XREF: Obj62_Index
0001349C 1038 FE05                  		move.b	($FFFFFE05).w,d0
000134A0 0200 0007                  		andi.b	#7,d0
000134A4 6600                       		bne.s	Obj62_StopFire
000134A6 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
000134AC                            
000134AC                            Obj62_StopFire:
000134AC 6100 B310                  		bsr.w	SpeedToPos
000134B0 0828 0000 0022             		btst	#0,$22(a0)
000134B6 6600                       		bne.s	Obj62_StopFire2
000134B8 76F8                       		moveq	#-8,d3
000134BA 6100 0000                  		bsr.w	ObjHitWallLeft
000134BE 4A41                       		tst.w	d1
000134C0 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000134C4 4E75                       		rts	
000134C6                            ; ===========================================================================
000134C6                            
000134C6                            Obj62_StopFire2:
000134C6 7608                       		moveq	#8,d3
000134C8 6100 0000                  		bsr.w	ObjHitWallRight
000134CC 4A41                       		tst.w	d1
000134CE 6B00 B350                  		bmi.w	DeleteObject
000134D2 4E75                       		rts	
000134D4                            ; ===========================================================================
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            ; Sprite mappings - gargoyle head (LZ)
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            Map_obj62:
000134D4                            	include "_maps\obj62.asm"
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            ; Sprite mappings - gargoyle head (LZ)
000134D4                            ; ---------------------------------------------------------------------------
000134D4 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000134D8 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000134DC 03                         byte_12320:	dc.b 3
000134DD F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000134E2 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000134E7 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000134EC 01                         byte_12330:	dc.b 1
000134ED FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000134F2 01                         byte_12336:	dc.b 1
000134F3 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000134F8                            		even
000134F8                            		even
000134F8                            
000134F8                            ; ===========================================================================
000134F8                            ; ---------------------------------------------------------------------------
000134F8                            ; Object 63 - platforms	on a conveyor belt (LZ)
000134F8                            ; ---------------------------------------------------------------------------
000134F8                            
000134F8                            Obj63:					; XREF: Obj_Index
000134F8 7000                       		moveq	#0,d0
000134FA 1028 0024                  		move.b	$24(a0),d0
000134FE 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013502 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013506 3028 0030                  		move.w	$30(a0),d0
0001350A 0240 FF80                  		andi.w	#$FF80,d0
0001350E 3238 F700                  		move.w	($FFFFF700).w,d1
00013512 0441 0080                  		subi.w	#$80,d1
00013516 0241 FF80                  		andi.w	#$FF80,d1
0001351A 9041                       		sub.w	d1,d0
0001351C 0C40 0280                  		cmpi.w	#$280,d0
00013520 6200                       		bhi.s	loc_1236A
00013522                            
00013522                            Obj63_Display:				; XREF: loc_1236A
00013522 6000 B2C0                  		bra.w	DisplaySprite
00013526                            ; ===========================================================================
00013526                            
00013526                            loc_1236A:				; XREF: Obj63
00013526 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001352C 6600                       		bne.s	loc_12378
0001352E 0C40 FF80                  		cmpi.w	#-$80,d0
00013532 64EE                       		bcc.s	Obj63_Display
00013534                            
00013534                            loc_12378:
00013534 1028 002F                  		move.b	$2F(a0),d0
00013538 6A00 B2E6                  		bpl.w	DeleteObject
0001353C 0240 007F                  		andi.w	#$7F,d0
00013540 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013544 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001354A 6000 B2D4                  		bra.w	DeleteObject
0001354E                            ; ===========================================================================
0001354E 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013550 0000                       		dc.w loc_124B2-Obj63_Index
00013552 0000                       		dc.w loc_124C2-Obj63_Index
00013554 0000                       		dc.w loc_124DE-Obj63_Index
00013556                            ; ===========================================================================
00013556                            
00013556                            Obj63_Main:				; XREF: Obj63_Index
00013556 1028 0028                  		move.b	$28(a0),d0
0001355A 6B00 0000                  		bmi.w	loc_12460
0001355E 5428 0024                  		addq.b	#2,$24(a0)
00013562 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001356A 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013570 0028 0004 0001             		ori.b	#4,1(a0)
00013576 117C 0010 0019             		move.b	#$10,$19(a0)
0001357C 117C 0004 0018             		move.b	#4,$18(a0)
00013582 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013588 6600                       		bne.s	loc_123E2
0001358A 5828 0024                  		addq.b	#4,$24(a0)
0001358E 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013594 117C 0001 0018             		move.b	#1,$18(a0)
0001359A 6000 0000                  		bra.w	loc_124DE
0001359E                            ; ===========================================================================
0001359E                            
0001359E                            loc_123E2:
0001359E 117C 0004 001A             		move.b	#4,$1A(a0)
000135A4 7000                       		moveq	#0,d0
000135A6 1028 0028                  		move.b	$28(a0),d0
000135AA 3200                       		move.w	d0,d1
000135AC E648                       		lsr.w	#3,d0
000135AE 0240 001E                  		andi.w	#$1E,d0
000135B2 45FA 0000                  		lea	Obj63_Data(pc),a2
000135B6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000135BA 315A 0038                  		move.w	(a2)+,$38(a0)
000135BE 315A 0030                  		move.w	(a2)+,$30(a0)
000135C2 214A 003C                  		move.l	a2,$3C(a0)
000135C6 0241 000F                  		andi.w	#$F,d1
000135CA E549                       		lsl.w	#2,d1
000135CC 1141 0038                  		move.b	d1,$38(a0)
000135D0 117C 0004 003A             		move.b	#4,$3A(a0)
000135D6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000135DA 6700                       		beq.s	loc_1244C
000135DC 117C 0001 003B             		move.b	#1,$3B(a0)
000135E2 4428 003A                  		neg.b	$3A(a0)
000135E6 7200                       		moveq	#0,d1
000135E8 1228 0038                  		move.b	$38(a0),d1
000135EC D228 003A                  		add.b	$3A(a0),d1
000135F0 B228 0039                  		cmp.b	$39(a0),d1
000135F4 6500                       		bcs.s	loc_12448
000135F6 1001                       		move.b	d1,d0
000135F8 7200                       		moveq	#0,d1
000135FA 4A00                       		tst.b	d0
000135FC 6A00                       		bpl.s	loc_12448
000135FE 1228 0039                  		move.b	$39(a0),d1
00013602 5901                       		subq.b	#4,d1
00013604                            
00013604                            loc_12448:
00013604 1141 0038                  		move.b	d1,$38(a0)
00013608                            
00013608                            loc_1244C:
00013608 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001360E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013614 6100 0000                  		bsr.w	Obj63_ChangeDir
00013618 6000 0000                  		bra.w	loc_124B2
0001361C                            ; ===========================================================================
0001361C                            
0001361C                            loc_12460:				; XREF: Obj63_Main
0001361C 1140 002F                  		move.b	d0,$2F(a0)
00013620 0240 007F                  		andi.w	#$7F,d0
00013624 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013628 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001362E 6600 B1F0                  		bne.w	DeleteObject
00013632 D040                       		add.w	d0,d0
00013634 0240 001E                  		andi.w	#$1E,d0
00013638 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
0001363E D4F2 0000                  		adda.w	(a2,d0.w),a2
00013642 321A                       		move.w	(a2)+,d1
00013644 2248                       		movea.l	a0,a1
00013646 6000                       		bra.s	Obj63_MakePtfms
00013648                            ; ===========================================================================
00013648                            
00013648                            Obj63_Loop:
00013648 6100 B620                  		bsr.w	SingleObjLoad
0001364C 6600                       		bne.s	loc_124AA
0001364E                            
0001364E                            Obj63_MakePtfms:			; XREF: loc_12460
0001364E 12BC 0063                  		move.b	#$63,0(a1)
00013652 335A 0008                  		move.w	(a2)+,8(a1)
00013656 335A 000C                  		move.w	(a2)+,$C(a1)
0001365A 301A                       		move.w	(a2)+,d0
0001365C 1340 0028                  		move.b	d0,$28(a1)
00013660                            
00013660                            loc_124AA:
00013660 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013664                            
00013664 588F                       		addq.l	#4,sp
00013666 4E75                       		rts	
00013668                            ; ===========================================================================
00013668                            
00013668                            loc_124B2:				; XREF: Obj63_Index
00013668 7200                       		moveq	#0,d1
0001366A 1228 0019                  		move.b	$19(a0),d1
0001366E 4EB9 0000 83EE             		jsr	(PlatformObject).l
00013674 6000 0000                  		bra.w	sub_12502
00013678                            ; ===========================================================================
00013678                            
00013678                            loc_124C2:				; XREF: Obj63_Index
00013678 7200                       		moveq	#0,d1
0001367A 1228 0019                  		move.b	$19(a0),d1
0001367E 4EB9 0000 8562             		jsr	(ExitPlatform).l
00013684 3F28 0008                  		move.w	8(a0),-(sp)
00013688 6100 0000                  		bsr.w	sub_12502
0001368C 341F                       		move.w	(sp)+,d2
0001368E 4EF9 0000 8ACC             		jmp	(MvSonicOnPtfm2).l
00013694                            ; ===========================================================================
00013694                            
00013694                            loc_124DE:				; XREF: Obj63_Index
00013694 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013698 0240 0003                  		andi.w	#3,d0
0001369C 6600                       		bne.s	loc_124FC
0001369E 7201                       		moveq	#1,d1
000136A0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000136A4 6700                       		beq.s	loc_124F2
000136A6 4401                       		neg.b	d1
000136A8                            
000136A8                            loc_124F2:
000136A8 D328 001A                  		add.b	d1,$1A(a0)
000136AC 0228 0003 001A             		andi.b	#3,$1A(a0)
000136B2                            
000136B2                            loc_124FC:
000136B2 588F                       		addq.l	#4,sp
000136B4 6000 D1D6                  		bra.w	MarkObjGone
000136B8                            
000136B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136B8                            
000136B8                            
000136B8                            sub_12502:				; XREF: loc_124B2; loc_124C2
000136B8 4A38 F7EE                  		tst.b	($FFFFF7EE).w
000136BC 6700                       		beq.s	loc_12520
000136BE 4A28 003B                  		tst.b	$3B(a0)
000136C2 6600                       		bne.s	loc_12520
000136C4 117C 0001 003B             		move.b	#1,$3B(a0)
000136CA 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
000136D0 4428 003A                  		neg.b	$3A(a0)
000136D4 6000                       		bra.s	loc_12534
000136D6                            ; ===========================================================================
000136D6                            
000136D6                            loc_12520:
000136D6 3028 0008                  		move.w	8(a0),d0
000136DA B068 0034                  		cmp.w	$34(a0),d0
000136DE 6600                       		bne.s	loc_1256A
000136E0 3028 000C                  		move.w	$C(a0),d0
000136E4 B068 0036                  		cmp.w	$36(a0),d0
000136E8 6600                       		bne.s	loc_1256A
000136EA                            
000136EA                            loc_12534:
000136EA 7200                       		moveq	#0,d1
000136EC 1228 0038                  		move.b	$38(a0),d1
000136F0 D228 003A                  		add.b	$3A(a0),d1
000136F4 B228 0039                  		cmp.b	$39(a0),d1
000136F8 6500                       		bcs.s	loc_12552
000136FA 1001                       		move.b	d1,d0
000136FC 7200                       		moveq	#0,d1
000136FE 4A00                       		tst.b	d0
00013700 6A00                       		bpl.s	loc_12552
00013702 1228 0039                  		move.b	$39(a0),d1
00013706 5901                       		subq.b	#4,d1
00013708                            
00013708                            loc_12552:
00013708 1141 0038                  		move.b	d1,$38(a0)
0001370C 2268 003C                  		movea.l	$3C(a0),a1
00013710 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013716 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001371C 6100 0000                  		bsr.w	Obj63_ChangeDir
00013720                            
00013720                            loc_1256A:
00013720 6100 B09C                  		bsr.w	SpeedToPos
00013724 4E75                       		rts	
00013726                            ; End of function sub_12502
00013726                            
00013726                            
00013726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013726                            
00013726                            
00013726                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013726 7000                       		moveq	#0,d0
00013728 343C FF00                  		move.w	#-$100,d2
0001372C 3028 0008                  		move.w	8(a0),d0
00013730 9068 0034                  		sub.w	$34(a0),d0
00013734 6400                       		bcc.s	loc_12584
00013736 4440                       		neg.w	d0
00013738 4442                       		neg.w	d2
0001373A                            
0001373A                            loc_12584:
0001373A 7200                       		moveq	#0,d1
0001373C 363C FF00                  		move.w	#-$100,d3
00013740 3228 000C                  		move.w	$C(a0),d1
00013744 9268 0036                  		sub.w	$36(a0),d1
00013748 6400                       		bcc.s	loc_12598
0001374A 4441                       		neg.w	d1
0001374C 4443                       		neg.w	d3
0001374E                            
0001374E                            loc_12598:
0001374E B240                       		cmp.w	d0,d1
00013750 6500                       		bcs.s	loc_125C2
00013752 3028 0008                  		move.w	8(a0),d0
00013756 9068 0034                  		sub.w	$34(a0),d0
0001375A 6700                       		beq.s	loc_125AE
0001375C 48C0                       		ext.l	d0
0001375E E180                       		asl.l	#8,d0
00013760 81C1                       		divs.w	d1,d0
00013762 4440                       		neg.w	d0
00013764                            
00013764                            loc_125AE:
00013764 3140 0010                  		move.w	d0,$10(a0)
00013768 3143 0012                  		move.w	d3,$12(a0)
0001376C 4840                       		swap	d0
0001376E 3140 000A                  		move.w	d0,$A(a0)
00013772 4268 000E                  		clr.w	$E(a0)
00013776 4E75                       		rts	
00013778                            ; ===========================================================================
00013778                            
00013778                            loc_125C2:				; XREF: Obj63_ChangeDir
00013778 3228 000C                  		move.w	$C(a0),d1
0001377C 9268 0036                  		sub.w	$36(a0),d1
00013780 6700                       		beq.s	loc_125D4
00013782 48C1                       		ext.l	d1
00013784 E181                       		asl.l	#8,d1
00013786 83C0                       		divs.w	d0,d1
00013788 4441                       		neg.w	d1
0001378A                            
0001378A                            loc_125D4:
0001378A 3141 0012                  		move.w	d1,$12(a0)
0001378E 3142 0010                  		move.w	d2,$10(a0)
00013792 4841                       		swap	d1
00013794 3141 000E                  		move.w	d1,$E(a0)
00013798 4268 000A                  		clr.w	$A(a0)
0001379C 4E75                       		rts	
0001379E                            ; End of function Obj63_ChangeDir
0001379E                            
0001379E                            ; ===========================================================================
0001379E 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000137A0 0000                       		dc.w word_12610-Obj63_Data
000137A2 0000                       		dc.w word_12628-Obj63_Data
000137A4 0000                       		dc.w word_1263C-Obj63_Data
000137A6 0000                       		dc.w word_12650-Obj63_Data
000137A8 0000                       		dc.w word_12668-Obj63_Data
000137AA 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000137BA 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000137C6 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000137D6 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000137DE 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000137F2 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013806 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001381E 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013832                            
00013832                            ; ---------------------------------------------------------------------------
00013832                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013832                            ; ---------------------------------------------------------------------------
00013832                            Map_obj63:
00013832                            	include "_maps\obj63.asm"
00013832                            ; ---------------------------------------------------------------------------
00013832                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013832                            ; ---------------------------------------------------------------------------
00013832 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013836 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001383A 0000                       		dc.w byte_1269E-Map_obj63
0001383C 01                         byte_12686:	dc.b 1
0001383D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013842 01                         byte_1268C:	dc.b 1
00013843 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013848 01                         byte_12692:	dc.b 1
00013849 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001384E 01                         byte_12698:	dc.b 1
0001384F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013854 01                         byte_1269E:	dc.b 1
00013855 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001385A                            		even
0001385A                            		even
0001385A                            
0001385A                            ; ===========================================================================
0001385A                            ; ---------------------------------------------------------------------------
0001385A                            ; Object 64 - bubbles (LZ)
0001385A                            ; ---------------------------------------------------------------------------
0001385A                            
0001385A                            Obj64:					; XREF: Obj_Index
0001385A 7000                       		moveq	#0,d0
0001385C 1028 0024                  		move.b	$24(a0),d0
00013860 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013864 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013868                            ; ===========================================================================
00013868 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001386A 0000                       		dc.w Obj64_Animate-Obj64_Index
0001386C 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001386E 0000                       		dc.w Obj64_Display2-Obj64_Index
00013870 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013872 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013874                            ; ===========================================================================
00013874                            
00013874                            Obj64_Main:				; XREF: Obj64_Index
00013874 5428 0024                  		addq.b	#2,$24(a0)
00013878 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013880 317C 8348 0002             		move.w	#$8348,2(a0)
00013886 117C 0084 0001             		move.b	#$84,1(a0)
0001388C 117C 0010 0019             		move.b	#$10,$19(a0)
00013892 117C 0001 0018             		move.b	#1,$18(a0)
00013898 1028 0028                  		move.b	$28(a0),d0	; get object type
0001389C 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001389E 5028 0024                  		addq.b	#8,$24(a0)
000138A2 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000138A6 1140 0032                  		move.b	d0,$32(a0)
000138AA 1140 0033                  		move.b	d0,$33(a0)
000138AE 117C 0006 001C             		move.b	#6,$1C(a0)
000138B4 6000 0000                  		bra.w	Obj64_BblMaker
000138B8                            ; ===========================================================================
000138B8                            
000138B8                            Obj64_Bubble:				; XREF: Obj64_Main
000138B8 1140 001C                  		move.b	d0,$1C(a0)
000138BC 3168 0008 0030             		move.w	8(a0),$30(a0)
000138C2 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000138C8 4EB9 0000 3492             		jsr	(RandomNumber).l
000138CE 1140 0026                  		move.b	d0,$26(a0)
000138D2                            
000138D2                            Obj64_Animate:				; XREF: Obj64_Index
000138D2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000138D8 4EB9 0000 B832             		jsr	AnimateSprite
000138DE 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000138E4 6600                       		bne.s	Obj64_ChkWater
000138E6 117C 0001 002E             		move.b	#1,$2E(a0)
000138EC                            
000138EC                            Obj64_ChkWater:				; XREF: Obj64_Index
000138EC 3038 F646                  		move.w	($FFFFF646).w,d0
000138F0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000138F4 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000138F6                            
000138F6                            Obj64_Burst:				; XREF: Obj64_Wobble
000138F6 117C 0006 0024             		move.b	#6,$24(a0)
000138FC 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013900 6000 0000                  		bra.w	Obj64_Display2
00013904                            ; ===========================================================================
00013904                            
00013904                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013904 1028 0026                  		move.b	$26(a0),d0
00013908 5228 0026                  		addq.b	#1,$26(a0)
0001390C 0240 007F                  		andi.w	#$7F,d0
00013910 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013916 1031 0000                  		move.b	(a1,d0.w),d0
0001391A 4880                       		ext.w	d0
0001391C D068 0030                  		add.w	$30(a0),d0
00013920 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013924 4A28 002E                  		tst.b	$2E(a0)
00013928 6700                       		beq.s	Obj64_Display
0001392A 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001392E 6700                       		beq.s	Obj64_Display	; if not, branch
00013930                            
00013930 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013934 303C 00AD                  		move.w	#$AD,d0
00013938 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001393E 43F8 D000                  		lea	($FFFFD000).w,a1
00013942 4269 0010                  		clr.w	$10(a1)
00013946 4269 0012                  		clr.w	$12(a1)
0001394A 4269 0014                  		clr.w	$14(a1)
0001394E 137C 0015 001C             		move.b	#$15,$1C(a1)
00013954 337C 0023 003E             		move.w	#$23,$3E(a1)
0001395A 137C 0000 003C             		move.b	#0,$3C(a1)
00013960 08A9 0005 0022             		bclr	#5,$22(a1)
00013966 08A9 0004 0022             		bclr	#4,$22(a1)
0001396C 0829 0002 0022             		btst	#2,$22(a1)
00013972 6700 FF82                  		beq.w	Obj64_Burst
00013976 08A9 0002 0022             		bclr	#2,$22(a1)
0001397C 137C 0013 0016             		move.b	#$13,$16(a1)
00013982 137C 0009 0017             		move.b	#9,$17(a1)
00013988 5B69 000C                  		subq.w	#5,$C(a1)
0001398C 6000 FF68                  		bra.w	Obj64_Burst
00013990                            ; ===========================================================================
00013990                            
00013990                            Obj64_Display:				; XREF: Obj64_Wobble
00013990 6100 AE2C                  		bsr.w	SpeedToPos
00013994 4A28 0001                  		tst.b	1(a0)
00013998 6A00                       		bpl.s	Obj64_Delete
0001399A 4EFA AE48                  		jmp	DisplaySprite
0001399E                            ; ===========================================================================
0001399E                            
0001399E                            Obj64_Delete:
0001399E 4EFA AE80                  		jmp	DeleteObject
000139A2                            ; ===========================================================================
000139A2                            
000139A2                            Obj64_Display2:				; XREF: Obj64_Index
000139A2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000139A8 4EB9 0000 B832             		jsr	AnimateSprite
000139AE 4A28 0001                  		tst.b	1(a0)
000139B2 6A00                       		bpl.s	Obj64_Delete2
000139B4 4EFA AE2E                  		jmp	DisplaySprite
000139B8                            ; ===========================================================================
000139B8                            
000139B8                            Obj64_Delete2:
000139B8 4EFA AE66                  		jmp	DeleteObject
000139BC                            ; ===========================================================================
000139BC                            
000139BC                            Obj64_Delete3:				; XREF: Obj64_Index
000139BC 6000 AE62                  		bra.w	DeleteObject
000139C0                            ; ===========================================================================
000139C0                            
000139C0                            Obj64_BblMaker:				; XREF: Obj64_Index
000139C0 4A68 0036                  		tst.w	$36(a0)
000139C4 6600                       		bne.s	loc_12874
000139C6 3038 F646                  		move.w	($FFFFF646).w,d0
000139CA B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000139CE 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000139D2 4A28 0001                  		tst.b	1(a0)
000139D6 6A00 0000                  		bpl.w	Obj64_ChkDel
000139DA 5368 0038                  		subq.w	#1,$38(a0)
000139DE 6A00 0000                  		bpl.w	loc_12914
000139E2 317C 0001 0036             		move.w	#1,$36(a0)
000139E8                            
000139E8                            loc_1283A:
000139E8 4EB9 0000 3492             		jsr	(RandomNumber).l
000139EE 3200                       		move.w	d0,d1
000139F0 0240 0007                  		andi.w	#7,d0
000139F4 0C40 0006                  		cmpi.w	#6,d0
000139F8 64EE                       		bcc.s	loc_1283A
000139FA                            
000139FA 1140 0034                  		move.b	d0,$34(a0)
000139FE 0241 000C                  		andi.w	#$C,d1
00013A02 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013A08 D2C1                       		adda.w	d1,a1
00013A0A 2149 003C                  		move.l	a1,$3C(a0)
00013A0E 5328 0032                  		subq.b	#1,$32(a0)
00013A12 6A00                       		bpl.s	loc_12872
00013A14 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013A1A 08E8 0007 0036             		bset	#7,$36(a0)
00013A20                            
00013A20                            loc_12872:
00013A20 6000                       		bra.s	loc_1287C
00013A22                            ; ===========================================================================
00013A22                            
00013A22                            loc_12874:				; XREF: Obj64_BblMaker
00013A22 5368 0038                  		subq.w	#1,$38(a0)
00013A26 6A00 0000                  		bpl.w	loc_12914
00013A2A                            
00013A2A                            loc_1287C:
00013A2A 4EB9 0000 3492             		jsr	(RandomNumber).l
00013A30 0240 001F                  		andi.w	#$1F,d0
00013A34 3140 0038                  		move.w	d0,$38(a0)
00013A38 6100 B230                  		bsr.w	SingleObjLoad
00013A3C 6600                       		bne.s	loc_128F8
00013A3E 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013A42 3368 0008 0008             		move.w	8(a0),8(a1)
00013A48 4EB9 0000 3492             		jsr	(RandomNumber).l
00013A4E 0240 000F                  		andi.w	#$F,d0
00013A52 5140                       		subq.w	#8,d0
00013A54 D169 0008                  		add.w	d0,8(a1)
00013A58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013A5E 7000                       		moveq	#0,d0
00013A60 1028 0034                  		move.b	$34(a0),d0
00013A64 2468 003C                  		movea.l	$3C(a0),a2
00013A68 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013A6E 0828 0007 0036             		btst	#7,$36(a0)
00013A74 6700                       		beq.s	loc_128F8
00013A76 4EB9 0000 3492             		jsr	(RandomNumber).l
00013A7C 0240 0003                  		andi.w	#3,d0
00013A80 6600                       		bne.s	loc_128E4
00013A82 08E8 0006 0036             		bset	#6,$36(a0)
00013A88 6600                       		bne.s	loc_128F8
00013A8A 137C 0002 0028             		move.b	#2,$28(a1)
00013A90                            
00013A90                            loc_128E4:
00013A90 4A28 0034                  		tst.b	$34(a0)
00013A94 6600                       		bne.s	loc_128F8
00013A96 08E8 0006 0036             		bset	#6,$36(a0)
00013A9C 6600                       		bne.s	loc_128F8
00013A9E 137C 0002 0028             		move.b	#2,$28(a1)
00013AA4                            
00013AA4                            loc_128F8:
00013AA4 5328 0034                  		subq.b	#1,$34(a0)
00013AA8 6A00                       		bpl.s	loc_12914
00013AAA 4EB9 0000 3492             		jsr	(RandomNumber).l
00013AB0 0240 007F                  		andi.w	#$7F,d0
00013AB4 0640 0080                  		addi.w	#$80,d0
00013AB8 D168 0038                  		add.w	d0,$38(a0)
00013ABC 4268 0036                  		clr.w	$36(a0)
00013AC0                            
00013AC0                            loc_12914:
00013AC0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013AC6 4EB9 0000 B832             		jsr	AnimateSprite
00013ACC                            
00013ACC                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013ACC 3028 0008                  		move.w	8(a0),d0
00013AD0 0240 FF80                  		andi.w	#$FF80,d0
00013AD4 3238 F700                  		move.w	($FFFFF700).w,d1
00013AD8 0441 0080                  		subi.w	#$80,d1
00013ADC 0241 FF80                  		andi.w	#$FF80,d1
00013AE0 9041                       		sub.w	d1,d0
00013AE2 0C40 0280                  		cmpi.w	#$280,d0
00013AE6 6200 AD38                  		bhi.w	DeleteObject
00013AEA 3038 F646                  		move.w	($FFFFF646).w,d0
00013AEE B068 000C                  		cmp.w	$C(a0),d0
00013AF2 6500 ACF0                  		bcs.w	DisplaySprite
00013AF6 4E75                       		rts	
00013AF8                            ; ===========================================================================
00013AF8                            ; bubble production sequence
00013AF8                            
00013AF8                            ; 0 = small bubble, 1 =	large bubble
00013AF8                            
00013AF8 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013B0A                            
00013B0A                            ; ===========================================================================
00013B0A                            
00013B0A                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013B0A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013B0E 6B00                       		bmi.s	loc_12998
00013B10 43F8 D000                  		lea	($FFFFD000).w,a1
00013B14 3029 0008                  		move.w	8(a1),d0
00013B18 3228 0008                  		move.w	8(a0),d1
00013B1C 0441 0010                  		subi.w	#$10,d1
00013B20 B240                       		cmp.w	d0,d1
00013B22 6400                       		bcc.s	loc_12998
00013B24 0641 0020                  		addi.w	#$20,d1
00013B28 B240                       		cmp.w	d0,d1
00013B2A 6500                       		bcs.s	loc_12998
00013B2C 3029 000C                  		move.w	$C(a1),d0
00013B30 3228 000C                  		move.w	$C(a0),d1
00013B34 B240                       		cmp.w	d0,d1
00013B36 6400                       		bcc.s	loc_12998
00013B38 0641 0010                  		addi.w	#$10,d1
00013B3C B240                       		cmp.w	d0,d1
00013B3E 6500                       		bcs.s	loc_12998
00013B40 7001                       		moveq	#1,d0
00013B42 4E75                       		rts	
00013B44                            ; ===========================================================================
00013B44                            
00013B44                            loc_12998:
00013B44 7000                       		moveq	#0,d0
00013B46 4E75                       		rts	
00013B48                            ; ===========================================================================
00013B48                            Ani_obj64:
00013B48                            	include "_anim\obj64.asm"
00013B48                            ; ---------------------------------------------------------------------------
00013B48                            ; Animation script - bubbles (LZ)
00013B48                            ; ---------------------------------------------------------------------------
00013B48 0000                       		dc.w byte_129AA-Ani_obj64
00013B4A 0000                       		dc.w byte_129B0-Ani_obj64
00013B4C 0000                       		dc.w byte_129B6-Ani_obj64
00013B4E 0000                       		dc.w byte_129BE-Ani_obj64
00013B50 0000                       		dc.w byte_129BE-Ani_obj64
00013B52 0000                       		dc.w byte_129C0-Ani_obj64
00013B54 0000                       		dc.w byte_129C6-Ani_obj64
00013B56 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013B5C 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013B62 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013B6A 04FC                       byte_129BE:	dc.b 4,	$FC
00013B6C 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013B72 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013B78 00                         		even
00013B78 00                         		even
00013B78                            
00013B78                            ; ---------------------------------------------------------------------------
00013B78                            ; Sprite mappings - bubbles (LZ)
00013B78                            ; ---------------------------------------------------------------------------
00013B78                            Map_obj64:
00013B78                            	include "_maps\obj64.asm"
00013B78                            ; ---------------------------------------------------------------------------
00013B78                            ; Sprite mappings - bubbles (LZ)
00013B78                            ; ---------------------------------------------------------------------------
00013B78 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013B7C 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013B80 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013B84 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013B88 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013B8C 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013B90 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013B94 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013B98 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013B9C 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013BA0 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013BA4 0000                       		dc.w byte_12A9C-Map_obj64
00013BA6 01                         byte_129FA:	dc.b 1
00013BA7 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013BAC 01                         byte_12A00:	dc.b 1
00013BAD FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013BB2 01                         byte_12A06:	dc.b 1
00013BB3 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013BB8 01                         byte_12A0C:	dc.b 1
00013BB9 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013BBE 01                         byte_12A12:	dc.b 1
00013BBF F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013BC4 01                         byte_12A18:	dc.b 1
00013BC5 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013BCA 01                         byte_12A1E:	dc.b 1
00013BCB F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013BD0 04                         byte_12A24:	dc.b 4
00013BD1 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013BD6 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013BDB 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013BE0 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013BE5 04                         byte_12A39:	dc.b 4
00013BE6 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013BEB F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013BF0 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013BF5 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013BFA 01                         byte_12A4E:	dc.b 1
00013BFB F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013C00 01                         byte_12A54:	dc.b 1
00013C01 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013C06 01                         byte_12A5A:	dc.b 1
00013C07 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013C0C 01                         byte_12A60:	dc.b 1
00013C0D F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013C12 01                         byte_12A66:	dc.b 1
00013C13 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013C18 01                         byte_12A6C:	dc.b 1
00013C19 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013C1E 01                         byte_12A72:	dc.b 1
00013C1F F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013C24 01                         byte_12A78:	dc.b 1
00013C25 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013C2A 01                         byte_12A7E:	dc.b 1
00013C2B F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013C30 01                         byte_12A84:	dc.b 1
00013C31 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013C36 01                         byte_12A8A:	dc.b 1
00013C37 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013C3C 01                         byte_12A90:	dc.b 1
00013C3D F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013C42 01                         byte_12A96:	dc.b 1
00013C43 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013C48 00                         byte_12A9C:	dc.b 0
00013C4A 00                         		even
00013C4A 00                         		even
00013C4A                            
00013C4A                            ; ===========================================================================
00013C4A                            ; ---------------------------------------------------------------------------
00013C4A                            ; Object 65 - waterfalls (LZ)
00013C4A                            ; ---------------------------------------------------------------------------
00013C4A                            
00013C4A                            Obj65:					; XREF: Obj_Index
00013C4A 7000                       		moveq	#0,d0
00013C4C 1028 0024                  		move.b	$24(a0),d0
00013C50 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013C54 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013C58                            ; ===========================================================================
00013C58 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013C5A 0000                       		dc.w Obj65_Animate-Obj65_Index
00013C5C 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013C5E 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013C60 0000                       		dc.w loc_12B36-Obj65_Index
00013C62                            ; ===========================================================================
00013C62                            
00013C62                            Obj65_Main:				; XREF: Obj65_Index
00013C62 5828 0024                  		addq.b	#4,$24(a0)
00013C66 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013C6E 317C 4259 0002             		move.w	#$4259,2(a0)
00013C74 0028 0004 0001             		ori.b	#4,1(a0)
00013C7A 117C 0018 0019             		move.b	#$18,$19(a0)
00013C80 117C 0001 0018             		move.b	#1,$18(a0)
00013C86 1028 0028                  		move.b	$28(a0),d0	; get object type
00013C8A 6A00                       		bpl.s	loc_12AE6
00013C8C 08E8 0007 0002             		bset	#7,2(a0)
00013C92                            
00013C92                            loc_12AE6:
00013C92 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013C96 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013C9A 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013C9E 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013CA0 4228 0018                  		clr.b	$18(a0)
00013CA4 5528 0024                  		subq.b	#2,$24(a0)
00013CA8 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013CAE 6700                       		beq.s	loc_12B0A	; if not, branch
00013CB0 117C 0006 0024             		move.b	#6,$24(a0)
00013CB6                            
00013CB6                            loc_12B0A:
00013CB6 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013CBC 6700                       		beq.s	Obj65_Animate	; if not, branch
00013CBE 117C 0008 0024             		move.b	#8,$24(a0)
00013CC4                            
00013CC4                            Obj65_Animate:				; XREF: Obj65_Index
00013CC4 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013CCA 4EB9 0000 B832             		jsr	AnimateSprite
00013CD0                            
00013CD0                            Obj65_ChkDel:				; XREF: Obj65_Index
00013CD0 6000 CBBA                  		bra.w	MarkObjGone
00013CD4                            ; ===========================================================================
00013CD4                            
00013CD4                            Obj65_FixHeight:			; XREF: Obj65_Index
00013CD4 3038 F646                  		move.w	($FFFFF646).w,d0
00013CD8 0440 0010                  		subi.w	#$10,d0
00013CDC 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013CE0 60E2                       		bra.s	Obj65_Animate
00013CE2                            ; ===========================================================================
00013CE2                            
00013CE2                            loc_12B36:				; XREF: Obj65_Index
00013CE2 08A8 0007 0002             		bclr	#7,2(a0)
00013CE8 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013CEE 6600                       		bne.s	Obj65_Animate2
00013CF0 08E8 0007 0002             		bset	#7,2(a0)
00013CF6                            
00013CF6                            Obj65_Animate2:
00013CF6 60CC                       		bra.s	Obj65_Animate
00013CF8                            ; ===========================================================================
00013CF8                            Ani_obj65:
00013CF8                            	include "_anim\obj65.asm"
00013CF8                            ; ---------------------------------------------------------------------------
00013CF8                            ; Animation script - waterfall (LZ)
00013CF8                            ; ---------------------------------------------------------------------------
00013CF8 0000                       		dc.w byte_12B4E-Ani_obj65
00013CFA 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013D00 00                         		even
00013D00 00                         		even
00013D00                            
00013D00                            ; ---------------------------------------------------------------------------
00013D00                            ; Sprite mappings - waterfalls (LZ)
00013D00                            ; ---------------------------------------------------------------------------
00013D00                            Map_obj65:
00013D00                            	include "_maps\obj65.asm"
00013D00                            ; ---------------------------------------------------------------------------
00013D00                            ; Sprite mappings - waterfalls (LZ)
00013D00                            ; ---------------------------------------------------------------------------
00013D00 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013D04 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013D08 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013D0C 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013D10 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013D14 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013D18 01                         byte_12B6C:	dc.b 1
00013D19 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013D1E 02                         byte_12B72:	dc.b 2
00013D1F F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013D24 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013D29 02                         byte_12B7D:	dc.b 2
00013D2A F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013D2F 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013D34 01                         byte_12B88:	dc.b 1
00013D35 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013D3A 02                         byte_12B8E:	dc.b 2
00013D3B F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013D40 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013D45 01                         byte_12B99:	dc.b 1
00013D46 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013D4B 01                         byte_12B9F:	dc.b 1
00013D4C F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013D51 01                         byte_12BA5:	dc.b 1
00013D52 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013D57 02                         byte_12BAB:	dc.b 2
00013D58 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013D5D 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013D62 02                         byte_12BB6:	dc.b 2
00013D63 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013D68 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013D6D 02                         byte_12BC1:	dc.b 2
00013D6E F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013D73 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013D78 02                         byte_12BCC:	dc.b 2
00013D79 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013D7E F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013D84 00                         		even
00013D84 00                         		even
00013D84                            
00013D84                            ; ===========================================================================
00013D84                            ; ---------------------------------------------------------------------------
00013D84                            ; Object 01 - Sonic
00013D84                            ; ---------------------------------------------------------------------------
00013D84                            
00013D84                            Obj01:					; XREF: Obj_Index
00013D84 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013D88 6700                       		beq.s	Obj01_Normal	; if not, branch
00013D8A 4EF9 0000 0000             		jmp	DebugMode
00013D90                            ; ===========================================================================
00013D90                            
00013D90                            Obj01_Normal:
00013D90 7000                       		moveq	#0,d0
00013D92 1028 0024                  		move.b	$24(a0),d0
00013D96 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013D9A 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013D9E                            ; ===========================================================================
00013D9E 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013DA0 0000                       		dc.w Obj01_Control-Obj01_Index
00013DA2 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013DA4 0000                       		dc.w Obj01_Death-Obj01_Index
00013DA6 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013DA8                            ; ===========================================================================
00013DA8                            
00013DA8                            Player_Maps:
00013DA8 0000 0000                  	dc.l	Map_Sonic
00013DAC 0000 0000                  	dc.l	Map_Sonic ; gronic
00013DB0 0000 0000                  	dc.l	Map_Sonic ; anakama
00013DB4 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013DB8                            	; insert player mapping here
00013DB8                            	
00013DB8                            Obj01_Main:				; XREF: Obj01_Index
00013DB8 5428 0024                  		addq.b	#2,$24(a0)
00013DBC 117C 0013 0016             		move.b	#$13,$16(a0)
00013DC2 117C 0009 0017             		move.b	#9,$17(a0)
00013DC8                            		
00013DC8 7000                       		moveq	#0,d0
00013DCA 1038 FFE8                  		move.b	(v_character),d0
00013DCE E548                       		lsl.w	#2,d0
00013DD0 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013DD4 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013DDA                            		
00013DDA 317C 0780 0002             		move.w	#$780,2(a0)
00013DE0 117C 0002 0018             		move.b	#2,$18(a0)
00013DE6 117C 0018 0019             		move.b	#$18,$19(a0)
00013DEC 117C 0004 0001             		move.b	#4,1(a0)
00013DF2 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
00013DF8 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
00013DFE 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
00013E04                            
00013E04                            Obj01_Control:				; XREF: Obj01_Index
00013E04 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013E08 6700                       		beq.s	loc_12C58	; if not, branch
00013E0A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013E10 6700                       		beq.s	loc_12C58	; if not, branch
00013E12 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013E18 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013E1C 4E75                       		rts	
00013E1E                            ; ===========================================================================
00013E1E                            
00013E1E                            loc_12C58:
00013E1E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013E22 6600                       		bne.s	loc_12C64	; if yes, branch
00013E24 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013E2A                            
00013E2A                            loc_12C64:
00013E2A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013E30 6600                       		bne.s	loc_12C7E	; if yes, branch
00013E32 7000                       		moveq	#0,d0
00013E34 1028 0022                  		move.b	$22(a0),d0
00013E38 0240 0006                  		andi.w	#6,d0
00013E3C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013E40 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013E44                            
00013E44                            loc_12C7E:
00013E44 6100                       		bsr.s	Sonic_Display
00013E46 6100 0000                  		bsr.w	Sonic_RecordPos
00013E4A 6100 0000                  		bsr.w	Sonic_Water
00013E4E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013E54 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013E5A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013E5E 6700                       		beq.s	loc_12CA6
00013E60 4A28 001C                  		tst.b	$1C(a0)
00013E64 6600                       		bne.s	loc_12CA6
00013E66 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013E6C                            
00013E6C                            loc_12CA6:
00013E6C 6100 0000                  		bsr.w	Sonic_Animate
00013E70 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013E74 6B00                       		bmi.s	loc_12CB6
00013E76 4EB9 0000 0000             		jsr	TouchResponse
00013E7C                            
00013E7C                            loc_12CB6:
00013E7C 6100 0000                  		bsr.w	Sonic_Loops
00013E80 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E84 4E75                       		rts	
00013E86                            ; ===========================================================================
00013E86 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013E88 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013E8A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013E8C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013E8E                            ; ---------------------------------------------------------------------------
00013E8E                            ; Music	to play	after invincibility wears off
00013E8E                            ; ---------------------------------------------------------------------------
00013E8E                            ; ===========================================================================
00013E8E                            
00013E8E                            Sonic_Display:				; XREF: loc_12C7E
00013E8E 3028 0030                  		move.w	$30(a0),d0
00013E92 6700                       		beq.s	Obj01_Display
00013E94 5368 0030                  		subq.w	#1,$30(a0)
00013E98 E648                       		lsr.w	#3,d0
00013E9A 6400                       		bcc.s	Obj01_ChkInvin
00013E9C                            
00013E9C                            Obj01_Display:
00013E9C 4EBA A946                  		jsr	DisplaySprite
00013EA0                            
00013EA0                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013EA0                             
00013EA0                            Obj01_ChkInvin:
00013EA0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013EA4 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013EA8 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013EAC 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013EB0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013EB4 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013EB8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013EBC 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013EC0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013EC6 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013ECA 7000                       		moveq	#0,d0
00013ECC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013ED0                             
00013ED0 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013ED6 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013ED8 43F9 0000 4516             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013EDE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013EE0                             
00013EE0                            Obj01_GetBgm2:
00013EE0 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013EE6 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013EE8 43F9 0000 451E             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013EEE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013EF0                             
00013EF0                            Obj01_GetBgm3:
00013EF0 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013EF6 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013EF8 43F9 0000 4526             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013EFE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013F00                             
00013F00                            Obj01_GetBgm4:
00013F00 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013F06 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013F08 43F9 0000 452E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013F0E                             
00013F0E                            Obj01_PlayMusic:
00013F0E 1031 0000                  		move.b	(a1,d0.w),d0
00013F12 4EB9 0000 1D10             		jsr	(PlaySound).l	; play normal music
00013F18                             
00013F18                            ; NineKode ends here.
00013F18                            
00013F18                            Obj01_RmvInvin:
00013F18 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013F1E                            
00013F1E                            Obj01_ChkShoes:
00013F1E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013F22 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013F24 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013F28 6700                       		beq.s	Obj01_ExitChk
00013F2A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013F2E 6600                       		bne.s	Obj01_ExitChk
00013F30 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013F36 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013F3C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013F42 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013F48 303C 00E3                  		move.w	#$E3,d0
00013F4C 4EF9 0000 1D10             		jmp	(PlaySound).l	; run music at normal speed
00013F52                            ; ===========================================================================
00013F52                            
00013F52                            Obj01_ExitChk:
00013F52 4E75                       		rts	
00013F54                            
00013F54                            ; ---------------------------------------------------------------------------
00013F54                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013F54                            ; ---------------------------------------------------------------------------
00013F54                            
00013F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F54                            
00013F54                            
00013F54                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013F54 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013F58 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013F5C 43F1 0000                  		lea	(a1,d0.w),a1
00013F60 32E8 0008                  		move.w	8(a0),(a1)+
00013F64 32E8 000C                  		move.w	$C(a0),(a1)+
00013F68 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013F6C 4E75                       		rts	
00013F6E                            ; End of function Sonic_RecordPos
00013F6E                            
00013F6E                            ; ---------------------------------------------------------------------------
00013F6E                            ; Subroutine for Sonic when he's underwater
00013F6E                            ; ---------------------------------------------------------------------------
00013F6E                            
00013F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F6E                            
00013F6E                            
00013F6E                            Sonic_Water:				; XREF: loc_12C7E
00013F6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013F74 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013F76                            
00013F76                            locret_12D80:
00013F76 4E75                       		rts	
00013F78                            ; ===========================================================================
00013F78                            
00013F78                            Obj01_InWater:
00013F78 3038 F646                  		move.w	($FFFFF646).w,d0
00013F7C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013F80 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013F82 08E8 0006 0022             		bset	#6,$22(a0)
00013F88 66EC                       		bne.s	locret_12D80
00013F8A 6100 0000                  		bsr.w	ResumeMusic
00013F8E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013F94 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013F9A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013FA0 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013FA6 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013FAC E0E8 0010                  		asr	$10(a0)
00013FB0 E0E8 0012                  		asr	$12(a0)
00013FB4 E0E8 0012                  		asr	$12(a0)
00013FB8 67BC                       		beq.s	locret_12D80
00013FBA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013FC0 303C 00AA                  		move.w	#$AA,d0
00013FC4 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play splash sound
00013FCA                            ; ===========================================================================
00013FCA                            
00013FCA                            Obj01_OutWater:
00013FCA 08A8 0006 0022             		bclr	#6,$22(a0)
00013FD0 67A4                       		beq.s	locret_12D80
00013FD2 6100 0000                  		bsr.w	ResumeMusic
00013FD6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013FDC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013FE2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013FE8 E1E8 0012                  		asl	$12(a0)
00013FEC 6700 FF88                  		beq.w	locret_12D80
00013FF0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013FF6 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013FFC 6E00                       		bgt.s	loc_12E0E
00013FFE 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014004                            
00014004                            loc_12E0E:
00014004 303C 00AA                  		move.w	#$AA,d0
00014008 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play splash sound
0001400E                            ; End of function Sonic_Water
0001400E                            
0001400E                            ; ===========================================================================
0001400E                            ; ---------------------------------------------------------------------------
0001400E                            ; Modes	for controlling	Sonic
0001400E                            ; ---------------------------------------------------------------------------
0001400E                            
0001400E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001400E 6100 0000                  		bsr.w	Sonic_Jump
00014012 6100 0000                  		bsr.w	Sonic_SlopeResist
00014016 6100 0000                  		bsr.w	Sonic_Move
0001401A 6100 0000                  		bsr.w	Sonic_Roll
0001401E 6100 0000                  		bsr.w	Sonic_LevelBound
00014022 4EBA A79A                  		jsr	SpeedToPos
00014026 6100 0000                  		bsr.w	Sonic_AnglePos
0001402A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001402E 4E75                       		rts	
00014030                            ; ===========================================================================
00014030                            
00014030                            Obj01_MdJump:				; XREF: Obj01_Modes
00014030 6100 0000                  		bsr.w	Sonic_JumpHeight
00014034 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014038 6100 0000                  		bsr.w	Sonic_LevelBound
0001403C 4EBA A70E                  		jsr	ObjectFall
00014040 0828 0006 0022             		btst	#6,$22(a0)
00014046 6700                       		beq.s	loc_12E5C
00014048 0468 0028 0012             		subi.w	#$28,$12(a0)
0001404E                            
0001404E                            loc_12E5C:
0001404E 6100 0000                  		bsr.w	Sonic_JumpAngle
00014052 6100 0000                  		bsr.w	Sonic_Floor
00014056 4E75                       		rts	
00014058                            ; ===========================================================================
00014058                            
00014058                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014058 6100 0000                  		bsr.w	Sonic_Jump
0001405C 6100 0000                  		bsr.w	Sonic_RollRepel
00014060 6100 0000                  		bsr.w	Sonic_RollSpeed
00014064 6100 0000                  		bsr.w	Sonic_LevelBound
00014068 4EBA A754                  		jsr	SpeedToPos
0001406C 6100 0000                  		bsr.w	Sonic_AnglePos
00014070 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014074 4E75                       		rts	
00014076                            ; ===========================================================================
00014076                            
00014076                            Obj01_MdJump2:				; XREF: Obj01_Modes
00014076 6100 0000                  		bsr.w	Sonic_JumpHeight
0001407A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001407E 6100 0000                  		bsr.w	Sonic_LevelBound
00014082 6100 0000                  		bsr.w	Sonic_AirUnroll
00014086 4EBA A6C4                  		jsr	ObjectFall
0001408A 0828 0006 0022             		btst	#6,$22(a0)
00014090 6700                       		beq.s	loc_12EA6
00014092 0468 0028 0012             		subi.w	#$28,$12(a0)
00014098                            
00014098                            loc_12EA6:
00014098 6100 0000                  		bsr.w	Sonic_JumpAngle
0001409C 6100 0000                  		bsr.w	Sonic_Floor
000140A0 4E75                       		rts	
000140A2                            ; ---------------------------------------------------------------------------
000140A2                            ; Subroutine to	make Sonic walk/run
000140A2                            ; ---------------------------------------------------------------------------
000140A2                            
000140A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140A2                            
000140A2                            
000140A2                            Sonic_Move:				; XREF: Obj01_MdNormal
000140A2 3C38 F760                  		move.w	($FFFFF760).w,d6
000140A6 3A38 F762                  		move.w	($FFFFF762).w,d5
000140AA 3838 F764                  		move.w	($FFFFF764).w,d4
000140AE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000140B2 6600 0000                  		bne.w	loc_12FEE
000140B6 4A68 003E                  		tst.w	$3E(a0)
000140BA 6600 0000                  		bne.w	Obj01_ResetScr
000140BE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000140C4 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000140C6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000140CC 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000140CE 6100 0000                  		bsr.w	Sonic_MoveLeft
000140D2                            
000140D2                            Obj01_NotLeft:
000140D2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000140D8 6700                       		beq.s	Obj01_NotRight	; if not, branch
000140DA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000140E0 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000140E2 6100 0000                  		bsr.w	Sonic_MoveLeft
000140E6 6000                       		bra.s	Obj01_NotRight
000140E8                            
000140E8                            Obj01_MoveRight:
000140E8 6100 0000                  		bsr.w	Sonic_MoveRight
000140EC                            
000140EC                            Obj01_NotRight:
000140EC 1028 0026                  		move.b	$26(a0),d0
000140F0 0600 0020                  		addi.b	#$20,d0
000140F4 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000140F8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000140FC 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014100 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014104 08A8 0005 0022             		bclr	#5,$22(a0)
0001410A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014110 0828 0003 0022             		btst	#3,$22(a0)
00014116 6700                       		beq.s	Sonic_Balance
00014118 7000                       		moveq	#0,d0
0001411A 1028 003D                  		move.b	$3D(a0),d0
0001411E ED48                       		lsl.w	#6,d0
00014120 43F8 D000                  		lea	($FFFFD000).w,a1
00014124 43F1 0000                  		lea	(a1,d0.w),a1
00014128 4A29 0022                  		tst.b	$22(a1)
0001412C 6B00                       		bmi.s	Sonic_LookUp
0001412E 7200                       		moveq	#0,d1
00014130 1229 0019                  		move.b	$19(a1),d1
00014134 3401                       		move.w	d1,d2
00014136 D442                       		add.w	d2,d2
00014138 5942                       		subq.w	#4,d2
0001413A D268 0008                  		add.w	8(a0),d1
0001413E 9269 0008                  		sub.w	8(a1),d1
00014142 0C41 0004                  		cmpi.w	#4,d1
00014146 6D00                       		blt.s	loc_12F6A
00014148 B242                       		cmp.w	d2,d1
0001414A 6C00                       		bge.s	loc_12F5A
0001414C 6000                       		bra.s	Sonic_LookUp
0001414E                            ; ===========================================================================
0001414E                            
0001414E                            Sonic_Balance:
0001414E 4EB9 0000 0000             		jsr	ObjHitFloor
00014154 0C41 000C                  		cmpi.w	#$C,d1
00014158 6D00                       		blt.s	Sonic_LookUp
0001415A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014160 6600                       		bne.s	loc_12F62
00014162                            
00014162                            loc_12F5A:
00014162 08A8 0000 0022             		bclr	#0,$22(a0)
00014168 6000                       		bra.s	loc_12F70
0001416A                            ; ===========================================================================
0001416A                            
0001416A                            loc_12F62:
0001416A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014170 6600                       		bne.s	Sonic_LookUp
00014172                            
00014172                            loc_12F6A:
00014172 08E8 0000 0022             		bset	#0,$22(a0)
00014178                            
00014178                            loc_12F70:
00014178 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001417E 6000                       		bra.s	Obj01_ResetScr
00014180                            ; ===========================================================================
00014180                            
00014180                            Sonic_LookUp:
00014180 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014186 6700                       		beq.s	Sonic_Duck	; if not, branch
00014188 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001418E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014194 6700                       		beq.s	loc_12FC2
00014196 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001419A 6000                       		bra.s	loc_12FC2
0001419C                            ; ===========================================================================
0001419C                            
0001419C                            Sonic_Duck:
0001419C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000141A2 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000141A4 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000141AA 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000141B0 6700                       		beq.s	loc_12FC2
000141B2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000141B6 6000                       		bra.s	loc_12FC2
000141B8                            ; ===========================================================================
000141B8                            
000141B8                            Obj01_ResetScr:
000141B8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000141BE 6700                       		beq.s	loc_12FC2	; if yes, branch
000141C0 6400                       		bcc.s	loc_12FBE
000141C2 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000141C6                            
000141C6                            loc_12FBE:
000141C6 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000141CA                            
000141CA                            loc_12FC2:
000141CA 1038 F602                  		move.b	($FFFFF602).w,d0
000141CE 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000141D2 6600                       		bne.s	loc_12FEE	; if yes, branch
000141D4 3028 0014                  		move.w	$14(a0),d0
000141D8 6700                       		beq.s	loc_12FEE
000141DA 6B00                       		bmi.s	loc_12FE2
000141DC 9045                       		sub.w	d5,d0
000141DE 6400                       		bcc.s	loc_12FDC
000141E0 303C 0000                  		move.w	#0,d0
000141E4                            
000141E4                            loc_12FDC:
000141E4 3140 0014                  		move.w	d0,$14(a0)
000141E8 6000                       		bra.s	loc_12FEE
000141EA                            ; ===========================================================================
000141EA                            
000141EA                            loc_12FE2:
000141EA D045                       		add.w	d5,d0
000141EC 6400                       		bcc.s	loc_12FEA
000141EE 303C 0000                  		move.w	#0,d0
000141F2                            
000141F2                            loc_12FEA:
000141F2 3140 0014                  		move.w	d0,$14(a0)
000141F6                            
000141F6                            loc_12FEE:
000141F6 1028 0026                  		move.b	$26(a0),d0
000141FA 4EB9 0000 34B8             		jsr	(CalcSine).l
00014200 C3E8 0014                  		muls.w	$14(a0),d1
00014204 E081                       		asr.l	#8,d1
00014206 3141 0010                  		move.w	d1,$10(a0)
0001420A C1E8 0014                  		muls.w	$14(a0),d0
0001420E E080                       		asr.l	#8,d0
00014210 3140 0012                  		move.w	d0,$12(a0)
00014214                            
00014214                            loc_1300C:
00014214 1028 0026                  		move.b	$26(a0),d0
00014218 0600 0040                  		addi.b	#$40,d0
0001421C 6B00                       		bmi.s	locret_1307C
0001421E 123C 0040                  		move.b	#$40,d1
00014222 4A68 0014                  		tst.w	$14(a0)
00014226 6700                       		beq.s	locret_1307C
00014228 6B00                       		bmi.s	loc_13024
0001422A 4441                       		neg.w	d1
0001422C                            
0001422C                            loc_13024:
0001422C 1028 0026                  		move.b	$26(a0),d0
00014230 D001                       		add.b	d1,d0
00014232 3F00                       		move.w	d0,-(sp)
00014234 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014238 301F                       		move.w	(sp)+,d0
0001423A 4A41                       		tst.w	d1
0001423C 6A00                       		bpl.s	locret_1307C
0001423E E141                       		asl.w	#8,d1
00014240 0600 0020                  		addi.b	#$20,d0
00014244 0200 00C0                  		andi.b	#$C0,d0
00014248 6700                       		beq.s	loc_13078
0001424A 0C00 0040                  		cmpi.b	#$40,d0
0001424E 6700                       		beq.s	loc_13066
00014250 0C00 0080                  		cmpi.b	#$80,d0
00014254 6700                       		beq.s	loc_13060
00014256 D368 0010                  		add.w	d1,$10(a0)
0001425A 08E8 0005 0022             		bset	#5,$22(a0)
00014260 317C 0000 0014             		move.w	#0,$14(a0)
00014266 4E75                       		rts	
00014268                            ; ===========================================================================
00014268                            
00014268                            loc_13060:
00014268 9368 0012                  		sub.w	d1,$12(a0)
0001426C 4E75                       		rts	
0001426E                            ; ===========================================================================
0001426E                            
0001426E                            loc_13066:
0001426E 9368 0010                  		sub.w	d1,$10(a0)
00014272 08E8 0005 0022             		bset	#5,$22(a0)
00014278 317C 0000 0014             		move.w	#0,$14(a0)
0001427E 4E75                       		rts	
00014280                            ; ===========================================================================
00014280                            
00014280                            loc_13078:
00014280 D368 0012                  		add.w	d1,$12(a0)
00014284                            
00014284                            locret_1307C:
00014284 4E75                       		rts	
00014286                            ; End of function Sonic_Move
00014286                            
00014286                            
00014286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014286                            
00014286                            
00014286                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014286 3028 0014                  		move.w	$14(a0),d0
0001428A 6700                       		beq.s	loc_13086
0001428C 6A00                       		bpl.s	loc_130B2
0001428E                            
0001428E                            loc_13086:
0001428E 08E8 0000 0022             		bset	#0,$22(a0)
00014294 6600                       		bne.s	loc_1309A
00014296 08A8 0005 0022             		bclr	#5,$22(a0)
0001429C 117C 0001 001D             		move.b	#1,$1D(a0)
000142A2                            
000142A2                            loc_1309A:
000142A2 9045                       		sub.w	d5,d0
000142A4 3206                       		move.w	d6,d1
000142A6 4441                       		neg.w	d1
000142A8 B041                       		cmp.w	d1,d0
000142AA 6E00                       		bgt.s	loc_130A6
000142AC 3001                       		move.w	d1,d0
000142AE                            
000142AE                            loc_130A6:
000142AE 3140 0014                  		move.w	d0,$14(a0)
000142B2 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000142B8 4E75                       		rts	
000142BA                            ; ===========================================================================
000142BA                            
000142BA                            loc_130B2:				; XREF: Sonic_MoveLeft
000142BA 9044                       		sub.w	d4,d0
000142BC 6400                       		bcc.s	loc_130BA
000142BE 303C FF80                  		move.w	#-$80,d0
000142C2                            
000142C2                            loc_130BA:
000142C2 3140 0014                  		move.w	d0,$14(a0)
000142C6 1028 0026                  		move.b	$26(a0),d0
000142CA 0600 0020                  		addi.b	#$20,d0
000142CE 0200 00C0                  		andi.b	#$C0,d0
000142D2 6600                       		bne.s	locret_130E8
000142D4 0C40 0400                  		cmpi.w	#$400,d0
000142D8 6D00                       		blt.s	locret_130E8
000142DA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000142E0 08A8 0000 0022             		bclr	#0,$22(a0)
000142E6 303C 00A4                  		move.w	#$A4,d0
000142EA 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play stopping sound
000142F0                            
000142F0                            locret_130E8:
000142F0 4E75                       		rts	
000142F2                            ; End of function Sonic_MoveLeft
000142F2                            
000142F2                            
000142F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142F2                            
000142F2                            
000142F2                            Sonic_MoveRight:			; XREF: Sonic_Move
000142F2 3028 0014                  		move.w	$14(a0),d0
000142F6 6B00                       		bmi.s	loc_13118
000142F8 08A8 0000 0022             		bclr	#0,$22(a0)
000142FE 6700                       		beq.s	loc_13104
00014300 08A8 0005 0022             		bclr	#5,$22(a0)
00014306 117C 0001 001D             		move.b	#1,$1D(a0)
0001430C                            
0001430C                            loc_13104:
0001430C D045                       		add.w	d5,d0
0001430E B046                       		cmp.w	d6,d0
00014310 6D00                       		blt.s	loc_1310C
00014312 3006                       		move.w	d6,d0
00014314                            
00014314                            loc_1310C:
00014314 3140 0014                  		move.w	d0,$14(a0)
00014318 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001431E 4E75                       		rts	
00014320                            ; ===========================================================================
00014320                            
00014320                            loc_13118:				; XREF: Sonic_MoveRight
00014320 D044                       		add.w	d4,d0
00014322 6400                       		bcc.s	loc_13120
00014324 303C 0080                  		move.w	#$80,d0
00014328                            
00014328                            loc_13120:
00014328 3140 0014                  		move.w	d0,$14(a0)
0001432C 1028 0026                  		move.b	$26(a0),d0
00014330 0600 0020                  		addi.b	#$20,d0
00014334 0200 00C0                  		andi.b	#$C0,d0
00014338 6600                       		bne.s	locret_1314E
0001433A 0C40 FC00                  		cmpi.w	#-$400,d0
0001433E 6E00                       		bgt.s	locret_1314E
00014340 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014346 08E8 0000 0022             		bset	#0,$22(a0)
0001434C 303C 00A4                  		move.w	#$A4,d0
00014350 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play stopping sound
00014356                            
00014356                            locret_1314E:
00014356 4E75                       		rts	
00014358                            ; End of function Sonic_MoveRight
00014358                            
00014358                            ; ---------------------------------------------------------------------------
00014358                            ; Subroutine to	change Sonic's speed as he rolls
00014358                            ; ---------------------------------------------------------------------------
00014358                            
00014358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014358                            
00014358                            
00014358                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014358 3C38 F760                  		move.w	($FFFFF760).w,d6
0001435C E346                       		asl.w	#1,d6
0001435E 3A38 F762                  		move.w	($FFFFF762).w,d5
00014362 E245                       		asr.w	#1,d5
00014364 3838 F764                  		move.w	($FFFFF764).w,d4
00014368 E444                       		asr.w	#2,d4
0001436A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001436E 6600 0000                  		bne.w	loc_131CC
00014372 4A68 003E                  		tst.w	$3E(a0)
00014376 6600                       		bne.s	loc_13188
00014378 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001437E 6700                       		beq.s	loc_1317C	; if not, branch
00014380 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014386 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00014388 6100 0000                  		bsr.w	Sonic_RollLeft
0001438C                            
0001438C                            loc_1317C:
0001438C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014392 6700                       		beq.s	loc_13188	; if not, branch
00014394 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001439A 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001439C 6100 0000                  		bsr.w	Sonic_RollLeft
000143A0 6000                       		bra.s	loc_13188
000143A2                            
000143A2                            SonicRS_RollRight:
000143A2 6100 0000                  		bsr.w	Sonic_RollRight
000143A6                            
000143A6                            loc_13188:
000143A6 3028 0014                  		move.w	$14(a0),d0
000143AA 6700                       		beq.s	loc_131AA
000143AC 6B00                       		bmi.s	loc_1319E
000143AE 9045                       		sub.w	d5,d0
000143B0 6400                       		bcc.s	loc_13198
000143B2 303C 0000                  		move.w	#0,d0
000143B6                            
000143B6                            loc_13198:
000143B6 3140 0014                  		move.w	d0,$14(a0)
000143BA 6000                       		bra.s	loc_131AA
000143BC                            ; ===========================================================================
000143BC                            
000143BC                            loc_1319E:				; XREF: Sonic_RollSpeed
000143BC D045                       		add.w	d5,d0
000143BE 6400                       		bcc.s	loc_131A6
000143C0 303C 0000                  		move.w	#0,d0
000143C4                            
000143C4                            loc_131A6:
000143C4 3140 0014                  		move.w	d0,$14(a0)
000143C8                            
000143C8                            loc_131AA:
000143C8 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000143CC 6600                       		bne.s	loc_131CC	; if yes, branch
000143CE 08A8 0002 0022             		bclr	#2,$22(a0)
000143D4 117C 0013 0016             		move.b	#$13,$16(a0)
000143DA 117C 0009 0017             		move.b	#9,$17(a0)
000143E0 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000143E6 5B68 000C                  		subq.w	#5,$C(a0)
000143EA                            
000143EA                            loc_131CC:
000143EA 1028 0026                  		move.b	$26(a0),d0
000143EE 4EB9 0000 34B8             		jsr	(CalcSine).l
000143F4 C1E8 0014                  		muls.w	$14(a0),d0
000143F8 E080                       		asr.l	#8,d0
000143FA 3140 0012                  		move.w	d0,$12(a0)
000143FE C3E8 0014                  		muls.w	$14(a0),d1
00014402 E081                       		asr.l	#8,d1
00014404 0C41 1000                  		cmpi.w	#$1000,d1
00014408 6F00                       		ble.s	loc_131F0
0001440A 323C 1000                  		move.w	#$1000,d1
0001440E                            
0001440E                            loc_131F0:
0001440E 0C41 F000                  		cmpi.w	#-$1000,d1
00014412 6C00                       		bge.s	loc_131FA
00014414 323C F000                  		move.w	#-$1000,d1
00014418                            
00014418                            loc_131FA:
00014418 3141 0010                  		move.w	d1,$10(a0)
0001441C 6000 FDF6                  		bra.w	loc_1300C
00014420                            ; End of function Sonic_RollSpeed
00014420                            
00014420                            
00014420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014420                            
00014420                            
00014420                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014420 3028 0014                  		move.w	$14(a0),d0
00014424 6700                       		beq.s	loc_1320A
00014426 6A00                       		bpl.s	loc_13218
00014428                            
00014428                            loc_1320A:
00014428 08E8 0000 0022             		bset	#0,$22(a0)
0001442E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014434 4E75                       		rts	
00014436                            ; ===========================================================================
00014436                            
00014436                            loc_13218:
00014436 9044                       		sub.w	d4,d0
00014438 6400                       		bcc.s	loc_13220
0001443A 303C FF80                  		move.w	#-$80,d0
0001443E                            
0001443E                            loc_13220:
0001443E 3140 0014                  		move.w	d0,$14(a0)
00014442 4E75                       		rts	
00014444                            ; End of function Sonic_RollLeft
00014444                            
00014444                            
00014444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014444                            
00014444                            
00014444                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014444 3028 0014                  		move.w	$14(a0),d0
00014448 6B00                       		bmi.s	loc_1323A
0001444A 08A8 0000 0022             		bclr	#0,$22(a0)
00014450 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014456 4E75                       		rts	
00014458                            ; ===========================================================================
00014458                            
00014458                            loc_1323A:
00014458 D044                       		add.w	d4,d0
0001445A 6400                       		bcc.s	loc_13242
0001445C 303C 0080                  		move.w	#$80,d0
00014460                            
00014460                            loc_13242:
00014460 3140 0014                  		move.w	d0,$14(a0)
00014464 4E75                       		rts	
00014466                            ; End of function Sonic_RollRight
00014466                            
00014466                            Sonic_AirUnroll:
00014466                            		
00014466 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
0001446A 6600                       		bne.s	@timer
0001446C 1038 F605                  		move.b	($FFFFF605).w,d0
00014470 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00014474 6700                       		beq.s	@end	; if not, branch
00014476 08A8 0002 0022             		bclr	#2,$22(a0)
0001447C 117C 0013 0016             		move.b	#$13,$16(a0)
00014482 117C 0009 0017             		move.b	#9,$17(a0)
00014488 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
0001448E 303C 00A5                  		move.w	#$A5,d0
00014492 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play fart sound
00014498 2028 0010                  		move.l	$10(a0),d0
0001449C D080                       		add.l	d0,d0
0001449E 2140 0010                  		move.l	d0,$10(a0)
000144A2 5B68 000C                  		subq.w	#5,$C(a0)
000144A6                            	@end:
000144A6 4E75                       		rts
000144A8                            	@timer:
000144A8 5328 003A                  		subq.b	#1,$3A(a0)
000144AC 4E75                       		rts
000144AE                            
000144AE                            ; ---------------------------------------------------------------------------
000144AE                            ; Subroutine to	change Sonic's direction while jumping
000144AE                            ; ---------------------------------------------------------------------------
000144AE                            
000144AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144AE                            
000144AE                            
000144AE                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000144AE 3C38 F760                  		move.w	($FFFFF760).w,d6
000144B2 3A38 F762                  		move.w	($FFFFF762).w,d5
000144B6 E345                       		asl.w	#1,d5
000144B8 0828 0004 0022             		btst	#4,$22(a0)
000144BE 6600                       		bne.s	Obj01_ResetScr2
000144C0 3028 0010                  		move.w	$10(a0),d0
000144C4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000144CA 6700                       		beq.s	loc_13278	; if not, branch
000144CC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000144D2 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000144D4 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000144D8 6E00                       		bgt.s	loc_13278
000144DA 3001                       		move.w	d1,d0
000144DC                            
000144DC                            loc_13278:
000144DC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000144E2 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000144E4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000144EA 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000144EC 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000144F0 6E00                       		bgt.s	Obj01_JumpMove
000144F2 3001                       		move.w	d1,d0
000144F4 6000                       		bra.s	Obj01_JumpMove
000144F6                            
000144F6                            SonicCJD_JumpLeft:
000144F6 08E8 0000 0022             		bset	#0,$22(a0)
000144FC 9045                       		sub.w	d5,d0
000144FE 3206                       		move.w	d6,d1
00014500 4441                       		neg.w	d1
00014502 B041                       		cmp.w	d1,d0
00014504                            		; bgt.s	loc_13278
00014504                            		; move.w	d1,d0
00014504 4E75                       		rts
00014506                            
00014506                            SonicCJD_JumpRight:
00014506 08A8 0000 0022             		bclr	#0,$22(a0)
0001450C D045                       		add.w	d5,d0
0001450E B046                       		cmp.w	d6,d0
00014510 6D00                       		blt.s	Obj01_JumpMove
00014512 3006                       		move.w	d6,d0
00014514                            
00014514                            Obj01_JumpMove:
00014514 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014518                            
00014518                            Obj01_ResetScr2:
00014518 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001451E 6700                       		beq.s	loc_132A4	; if yes, branch
00014520 6400                       		bcc.s	loc_132A0
00014522 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014526                            
00014526                            loc_132A0:
00014526 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001452A                            
0001452A                            loc_132A4:
0001452A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014530 6500                       		bcs.s	locret_132D2	; if yes, branch
00014532 3028 0010                  		move.w	$10(a0),d0
00014536 3200                       		move.w	d0,d1
00014538 EA41                       		asr.w	#5,d1
0001453A 6700                       		beq.s	locret_132D2
0001453C 6B00                       		bmi.s	loc_132C6
0001453E 9041                       		sub.w	d1,d0
00014540 6400                       		bcc.s	loc_132C0
00014542 303C 0000                  		move.w	#0,d0
00014546                            
00014546                            loc_132C0:
00014546 3140 0010                  		move.w	d0,$10(a0)
0001454A 4E75                       		rts	
0001454C                            ; ===========================================================================
0001454C                            
0001454C                            loc_132C6:
0001454C 9041                       		sub.w	d1,d0
0001454E 6500                       		bcs.s	loc_132CE
00014550 303C 0000                  		move.w	#0,d0
00014554                            
00014554                            loc_132CE:
00014554 3140 0010                  		move.w	d0,$10(a0)
00014558                            
00014558                            locret_132D2:
00014558 4E75                       		rts	
0001455A                            ; End of function Sonic_ChgJumpDir
0001455A                            
0001455A                            ; ===========================================================================
0001455A                            ; ---------------------------------------------------------------------------
0001455A                            ; Unused subroutine to squash Sonic
0001455A                            ; ---------------------------------------------------------------------------
0001455A 1028 0026                  		move.b	$26(a0),d0
0001455E 0600 0020                  		addi.b	#$20,d0
00014562 0200 00C0                  		andi.b	#$C0,d0
00014566 6600                       		bne.s	locret_13302
00014568 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001456C 4A41                       		tst.w	d1
0001456E 6A00                       		bpl.s	locret_13302
00014570 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00014576 317C 0000 0010             		move.w	#0,$10(a0)
0001457C 317C 0000 0012             		move.w	#0,$12(a0)
00014582 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014588                            
00014588                            locret_13302:
00014588 4E75                       		rts	
0001458A                            ; ---------------------------------------------------------------------------
0001458A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001458A                            ; ---------------------------------------------------------------------------
0001458A                            
0001458A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001458A                            
0001458A                            
0001458A                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001458A 2228 0008                  		move.l	8(a0),d1
0001458E 3028 0010                  		move.w	$10(a0),d0
00014592 48C0                       		ext.l	d0
00014594 E180                       		asl.l	#8,d0
00014596 D280                       		add.l	d0,d1
00014598 4841                       		swap	d1
0001459A 3038 F728                  		move.w	($FFFFF728).w,d0
0001459E 0640 0010                  		addi.w	#$10,d0
000145A2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000145A4 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000145A6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000145AA 0640 0128                  		addi.w	#$128,d0
000145AE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000145B2 6600                       		bne.s	loc_13332
000145B4 0640 0040                  		addi.w	#$40,d0
000145B8                            
000145B8                            loc_13332:
000145B8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000145BA 6300                       		bls.s	Boundary_Sides	; if yes, branch
000145BC                            
000145BC                            loc_13336:
000145BC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000145C0 0640 00E0                  		addi.w	#$E0,d0
000145C4 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000145C8 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000145CA 4E75                       		rts	
000145CC                            ; ===========================================================================
000145CC                            
000145CC                            Boundary_Bottom:
000145CC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000145D2                            		; bne.w	KillSonic	; if not, kill Sonic
000145D2 6600 0000                  		bne.w	CallKillSonic	; GMZ
000145D6 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000145DC                            		; bcs.w	KillSonic
000145DC 6500 0000                  		bcs.w	CallKillSonic	; GMZ
000145E0 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000145E4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000145EA 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000145F0 4E75                       		rts	
000145F2                            
000145F2                            CallKillSonic:
000145F2 4EF9 0000 0000             		jmp	KillSonic	; GMZ
000145F8                            ; ===========================================================================
000145F8                            
000145F8                            Boundary_Sides:
000145F8 3140 0008                  		move.w	d0,8(a0)
000145FC 317C 0000 000A             		move.w	#0,$A(a0)
00014602 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014608 317C 0000 0014             		move.w	#0,$14(a0)
0001460E 60AC                       		bra.s	loc_13336
00014610                            ; End of function Sonic_LevelBound
00014610                            
00014610                            ; ---------------------------------------------------------------------------
00014610                            ; Subroutine allowing Sonic to roll when he's moving
00014610                            ; ---------------------------------------------------------------------------
00014610                            
00014610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014610                            
00014610                            
00014610                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014610 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014614 6600                       		bne.s	Obj01_NoRoll
00014616 3028 0014                  		move.w	$14(a0),d0
0001461A 6A00                       		bpl.s	loc_13392
0001461C 4440                       		neg.w	d0
0001461E                            
0001461E                            loc_13392:
0001461E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014622 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014624 1038 F602                  		move.b	($FFFFF602).w,d0
00014628 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001462C 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001462E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014634 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014636                            
00014636                            Obj01_NoRoll:
00014636 4E75                       		rts	
00014638                            ; ===========================================================================
00014638                            
00014638                            Obj01_ChkRoll:
00014638 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001463E 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014640 4E75                       		rts	
00014642                            ; ===========================================================================
00014642                            
00014642                            Obj01_DoRoll:
00014642 08E8 0002 0022             		bset	#2,$22(a0)
00014648 117C 000E 0016             		move.b	#$E,$16(a0)
0001464E 117C 0007 0017             		move.b	#7,$17(a0)
00014654 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001465A 5A68 000C                  		addq.w	#5,$C(a0)
0001465E 303C 00BE                  		move.w	#$BE,d0
00014662 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play rolling sound
00014668 4A68 0014                  		tst.w	$14(a0)
0001466C 6600                       		bne.s	locret_133E8
0001466E 317C 0200 0014             		move.w	#$200,$14(a0)
00014674                            
00014674                            locret_133E8:
00014674 4E75                       		rts	
00014676                            ; End of function Sonic_Roll
00014676                            
00014676                            ; ---------------------------------------------------------------------------
00014676                            ; Subroutine allowing Sonic to jump
00014676                            ; ---------------------------------------------------------------------------
00014676                            
00014676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014676                            
00014676                            
00014676                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014676 1038 F603                  		move.b	($FFFFF603).w,d0
0001467A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001467E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014682 7000                       		moveq	#0,d0
00014684 1028 0026                  		move.b	$26(a0),d0
00014688 0600 0080                  		addi.b	#$80,d0
0001468C 6100 0000                  		bsr.w	sub_14D48
00014690 0C41 0006                  		cmpi.w	#6,d1
00014694 6D00 0000                  		blt.w	locret_1348E
00014698 343C 0680                  		move.w	#$680,d2
0001469C 0828 0006 0022             		btst	#6,$22(a0)
000146A2 6700                       		beq.s	loc_1341C
000146A4 343C 0380                  		move.w	#$380,d2
000146A8                            
000146A8                            loc_1341C:
000146A8 7000                       		moveq	#0,d0
000146AA 1028 0026                  		move.b	$26(a0),d0
000146AE 0400 0040                  		subi.b	#$40,d0
000146B2 4EB9 0000 34B8             		jsr	(CalcSine).l
000146B8 C3C2                       		muls.w	d2,d1
000146BA E081                       		asr.l	#8,d1
000146BC D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000146C0 C1C2                       		muls.w	d2,d0
000146C2 E080                       		asr.l	#8,d0
000146C4 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000146C8 08E8 0001 0022             		bset	#1,$22(a0)
000146CE 08A8 0005 0022             		bclr	#5,$22(a0)
000146D4 588F                       		addq.l	#4,sp
000146D6 117C 0001 003C             		move.b	#1,$3C(a0)
000146DC 4228 0038                  		clr.b	$38(a0)
000146E0 303C 00A0                  		move.w	#$A0,d0
000146E4 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play jumping sound
000146EA 117C 0013 0016             		move.b	#$13,$16(a0)
000146F0 117C 0009 0017             		move.b	#9,$17(a0)
000146F6 0828 0002 0022             		btst	#2,$22(a0)
000146FC 6600                       		bne.s	loc_13490
000146FE 117C 000E 0016             		move.b	#$E,$16(a0)
00014704 117C 0007 0017             		move.b	#7,$17(a0)
0001470A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014710 08E8 0002 0022             		bset	#2,$22(a0)
00014716 5A68 000C                  		addq.w	#5,$C(a0)
0001471A 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00014720                            
00014720                            locret_1348E:
00014720 4E75                       		rts	
00014722                            ; ===========================================================================
00014722                            
00014722                            loc_13490:
00014722 08E8 0004 0022             		bset	#4,$22(a0)
00014728 4E75                       		rts	
0001472A                            ; End of function Sonic_Jump
0001472A                            
0001472A                            
0001472A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001472A                            
0001472A                            
0001472A                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001472A 4A28 003C                  		tst.b	$3C(a0)
0001472E 6700                       		beq.s	loc_134C4
00014730 323C FC00                  		move.w	#-$400,d1
00014734 0828 0006 0022             		btst	#6,$22(a0)
0001473A 6700                       		beq.s	loc_134AE
0001473C 323C FE00                  		move.w	#-$200,d1
00014740                            
00014740                            loc_134AE:
00014740 B268 0012                  		cmp.w	$12(a0),d1
00014744 6F00                       		ble.s	locret_134C2
00014746 1038 F602                  		move.b	($FFFFF602).w,d0
0001474A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001474E 6600                       		bne.s	locret_134C2	; if yes, branch
00014750 3141 0012                  		move.w	d1,$12(a0)
00014754                            
00014754                            locret_134C2:
00014754 4E75                       		rts	
00014756                            ; ===========================================================================
00014756                            
00014756                            loc_134C4:
00014756 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
0001475C 6C00                       		bge.s	locret_134D2
0001475E 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014764                            
00014764                            locret_134D2:
00014764 4E75                       		rts	
00014766                            ; End of function Sonic_JumpHeight
00014766                            
00014766                            ; ---------------------------------------------------------------------------
00014766                            ; Subroutine to	slow Sonic walking up a	slope
00014766                            ; ---------------------------------------------------------------------------
00014766                            
00014766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014766                            
00014766                            
00014766                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014766 1028 0026                  		move.b	$26(a0),d0
0001476A 0600 0060                  		addi.b	#$60,d0
0001476E 0C00 00C0                  		cmpi.b	#$C0,d0
00014772 6400                       		bcc.s	locret_13508
00014774 1028 0026                  		move.b	$26(a0),d0
00014778 4EB9 0000 34B8             		jsr	(CalcSine).l
0001477E C1FC 0020                  		muls.w	#$20,d0
00014782 E080                       		asr.l	#8,d0
00014784 4A68 0014                  		tst.w	$14(a0)
00014788 6700                       		beq.s	locret_13508
0001478A 6B00                       		bmi.s	loc_13504
0001478C 4A40                       		tst.w	d0
0001478E 6700                       		beq.s	locret_13502
00014790 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00014794                            
00014794                            locret_13502:
00014794 4E75                       		rts	
00014796                            ; ===========================================================================
00014796                            
00014796                            loc_13504:
00014796 D168 0014                  		add.w	d0,$14(a0)
0001479A                            
0001479A                            locret_13508:
0001479A 4E75                       		rts	
0001479C                            ; End of function Sonic_SlopeResist
0001479C                            
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            
0001479C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001479C                            
0001479C                            
0001479C                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001479C 1028 0026                  		move.b	$26(a0),d0
000147A0 0600 0060                  		addi.b	#$60,d0
000147A4 0C00 00C0                  		cmpi.b	#-$40,d0
000147A8 6400                       		bcc.s	locret_13544
000147AA 1028 0026                  		move.b	$26(a0),d0
000147AE 4EB9 0000 34B8             		jsr	(CalcSine).l
000147B4 C1FC 0050                  		muls.w	#$50,d0
000147B8 E080                       		asr.l	#8,d0
000147BA 4A68 0014                  		tst.w	$14(a0)
000147BE 6B00                       		bmi.s	loc_1353A
000147C0 4A40                       		tst.w	d0
000147C2 6A00                       		bpl.s	loc_13534
000147C4 E480                       		asr.l	#2,d0
000147C6                            
000147C6                            loc_13534:
000147C6 D168 0014                  		add.w	d0,$14(a0)
000147CA 4E75                       		rts	
000147CC                            ; ===========================================================================
000147CC                            
000147CC                            loc_1353A:
000147CC 4A40                       		tst.w	d0
000147CE 6B00                       		bmi.s	loc_13540
000147D0 E480                       		asr.l	#2,d0
000147D2                            
000147D2                            loc_13540:
000147D2 D168 0014                  		add.w	d0,$14(a0)
000147D6                            
000147D6                            locret_13544:
000147D6 4E75                       		rts	
000147D8                            ; End of function Sonic_RollRepel
000147D8                            
000147D8                            ; ---------------------------------------------------------------------------
000147D8                            ; Subroutine to	push Sonic down	a slope
000147D8                            ; ---------------------------------------------------------------------------
000147D8                            
000147D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147D8                            
000147D8                            
000147D8                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000147D8 4E71                       		nop	
000147DA 4A28 0038                  		tst.b	$38(a0)
000147DE 6600                       		bne.s	locret_13580
000147E0 4A68 003E                  		tst.w	$3E(a0)
000147E4 6600                       		bne.s	loc_13582
000147E6 1028 0026                  		move.b	$26(a0),d0
000147EA 0600 0020                  		addi.b	#$20,d0
000147EE 0200 00C0                  		andi.b	#$C0,d0
000147F2 6700                       		beq.s	locret_13580
000147F4 3028 0014                  		move.w	$14(a0),d0
000147F8 6A00                       		bpl.s	loc_1356A
000147FA 4440                       		neg.w	d0
000147FC                            
000147FC                            loc_1356A:
000147FC 0C40 0280                  		cmpi.w	#$280,d0
00014800 6400                       		bcc.s	locret_13580
00014802 4268 0014                  		clr.w	$14(a0)
00014806 08E8 0001 0022             		bset	#1,$22(a0)
0001480C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014812                            
00014812                            locret_13580:
00014812 4E75                       		rts	
00014814                            ; ===========================================================================
00014814                            
00014814                            loc_13582:
00014814 5368 003E                  		subq.w	#1,$3E(a0)
00014818 4E75                       		rts	
0001481A                            ; End of function Sonic_SlopeRepel
0001481A                            
0001481A                            ; ---------------------------------------------------------------------------
0001481A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001481A                            ; ---------------------------------------------------------------------------
0001481A                            
0001481A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001481A                            
0001481A                            
0001481A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001481A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001481E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014820 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014822                            
00014822 5400                       		addq.b	#2,d0		; increase angle
00014824 6400                       		bcc.s	loc_13596
00014826 7000                       		moveq	#0,d0
00014828                            
00014828                            loc_13596:
00014828 6000                       		bra.s	loc_1359E
0001482A                            ; ===========================================================================
0001482A                            
0001482A                            loc_13598:
0001482A 5500                       		subq.b	#2,d0		; decrease angle
0001482C 6400                       		bcc.s	loc_1359E
0001482E 7000                       		moveq	#0,d0
00014830                            
00014830                            loc_1359E:
00014830 1140 0026                  		move.b	d0,$26(a0)
00014834                            
00014834                            locret_135A2:
00014834 4E75                       		rts	
00014836                            ; End of function Sonic_JumpAngle
00014836                            
00014836                            ; ---------------------------------------------------------------------------
00014836                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014836                            ; ---------------------------------------------------------------------------
00014836                            
00014836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014836                            
00014836                            
00014836                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014836 3228 0010                  		move.w	$10(a0),d1
0001483A 3428 0012                  		move.w	$12(a0),d2
0001483E 4EB9 0000 3786             		jsr	(CalcAngle).l
00014844 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014848 0400 0020                  		subi.b	#$20,d0
0001484C 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014850 0200 00C0                  		andi.b	#$C0,d0
00014854 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014858 0C00 0040                  		cmpi.b	#$40,d0
0001485C 6700 0000                  		beq.w	loc_13680
00014860 0C00 0080                  		cmpi.b	#$80,d0
00014864 6700 0000                  		beq.w	loc_136E2
00014868 0C00 00C0                  		cmpi.b	#-$40,d0
0001486C 6700 0000                  		beq.w	loc_1373E
00014870 6100 0000                  		bsr.w	Sonic_HitWall
00014874 4A41                       		tst.w	d1
00014876 6A00                       		bpl.s	loc_135F0
00014878 9368 0008                  		sub.w	d1,8(a0)
0001487C 317C 0000 0010             		move.w	#0,$10(a0)
00014882                            
00014882                            loc_135F0:
00014882 6100 0000                  		bsr.w	sub_14EB4
00014886 4A41                       		tst.w	d1
00014888 6A00                       		bpl.s	loc_13602
0001488A D368 0008                  		add.w	d1,8(a0)
0001488E 317C 0000 0010             		move.w	#0,$10(a0)
00014894                            
00014894                            loc_13602:
00014894 6100 0000                  		bsr.w	Sonic_HitFloor
00014898 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001489C 4A41                       		tst.w	d1
0001489E 6A00                       		bpl.s	locret_1367E
000148A0 1428 0012                  		move.b	$12(a0),d2
000148A4 5002                       		addq.b	#8,d2
000148A6 4402                       		neg.b	d2
000148A8 B202                       		cmp.b	d2,d1
000148AA 6C00                       		bge.s	loc_1361E
000148AC B002                       		cmp.b	d2,d0
000148AE 6D00                       		blt.s	locret_1367E
000148B0                            
000148B0                            loc_1361E:
000148B0 D368 000C                  		add.w	d1,$C(a0)
000148B4 1143 0026                  		move.b	d3,$26(a0)
000148B8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148BC 117C 0000 001C             		move.b	#0,$1C(a0)
000148C2 1003                       		move.b	d3,d0
000148C4 0600 0020                  		addi.b	#$20,d0
000148C8 0200 0040                  		andi.b	#$40,d0
000148CC 6600                       		bne.s	loc_1365C
000148CE 1003                       		move.b	d3,d0
000148D0 0600 0010                  		addi.b	#$10,d0
000148D4 0200 0020                  		andi.b	#$20,d0
000148D8 6700                       		beq.s	loc_1364E
000148DA E0E8 0012                  		asr	$12(a0)
000148DE 6000                       		bra.s	loc_13670
000148E0                            ; ===========================================================================
000148E0                            
000148E0                            loc_1364E:
000148E0 317C 0000 0012             		move.w	#0,$12(a0)
000148E6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148EC 4E75                       		rts	
000148EE                            ; ===========================================================================
000148EE                            
000148EE                            loc_1365C:
000148EE 317C 0000 0010             		move.w	#0,$10(a0)
000148F4 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000148FA 6F00                       		ble.s	loc_13670
000148FC 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014902                            
00014902                            loc_13670:
00014902 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014908 4A03                       		tst.b	d3
0001490A 6A00                       		bpl.s	locret_1367E
0001490C 4468 0014                  		neg.w	$14(a0)
00014910                            
00014910                            locret_1367E:
00014910 4E75                       		rts	
00014912                            ; ===========================================================================
00014912                            
00014912                            loc_13680:
00014912 6100 0000                  		bsr.w	Sonic_HitWall
00014916 4A41                       		tst.w	d1
00014918 6A00                       		bpl.s	loc_1369A
0001491A 9368 0008                  		sub.w	d1,8(a0)
0001491E 317C 0000 0010             		move.w	#0,$10(a0)
00014924 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001492A 4E75                       		rts	
0001492C                            ; ===========================================================================
0001492C                            
0001492C                            loc_1369A:
0001492C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014930 4A41                       		tst.w	d1
00014932 6A00                       		bpl.s	loc_136B4
00014934 9368 000C                  		sub.w	d1,$C(a0)
00014938 4A68 0012                  		tst.w	$12(a0)
0001493C 6A00                       		bpl.s	locret_136B2
0001493E 317C 0000 0012             		move.w	#0,$12(a0)
00014944                            
00014944                            locret_136B2:
00014944 4E75                       		rts	
00014946                            ; ===========================================================================
00014946                            
00014946                            loc_136B4:
00014946 4A68 0012                  		tst.w	$12(a0)
0001494A 6B00                       		bmi.s	locret_136E0
0001494C 6100 0000                  		bsr.w	Sonic_HitFloor
00014950 4A41                       		tst.w	d1
00014952 6A00                       		bpl.s	locret_136E0
00014954 D368 000C                  		add.w	d1,$C(a0)
00014958 1143 0026                  		move.b	d3,$26(a0)
0001495C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014960 117C 0000 001C             		move.b	#0,$1C(a0)
00014966 317C 0000 0012             		move.w	#0,$12(a0)
0001496C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014972                            
00014972                            locret_136E0:
00014972 4E75                       		rts	
00014974                            ; ===========================================================================
00014974                            
00014974                            loc_136E2:
00014974 6100 0000                  		bsr.w	Sonic_HitWall
00014978 4A41                       		tst.w	d1
0001497A 6A00                       		bpl.s	loc_136F4
0001497C 9368 0008                  		sub.w	d1,8(a0)
00014980 317C 0000 0010             		move.w	#0,$10(a0)
00014986                            
00014986                            loc_136F4:
00014986 6100 0000                  		bsr.w	sub_14EB4
0001498A 4A41                       		tst.w	d1
0001498C 6A00                       		bpl.s	loc_13706
0001498E D368 0008                  		add.w	d1,8(a0)
00014992 317C 0000 0010             		move.w	#0,$10(a0)
00014998                            
00014998                            loc_13706:
00014998 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001499C 4A41                       		tst.w	d1
0001499E 6A00                       		bpl.s	locret_1373C
000149A0 9368 000C                  		sub.w	d1,$C(a0)
000149A4 1003                       		move.b	d3,d0
000149A6 0600 0020                  		addi.b	#$20,d0
000149AA 0200 0040                  		andi.b	#$40,d0
000149AE 6600                       		bne.s	loc_13726
000149B0 317C 0000 0012             		move.w	#0,$12(a0)
000149B6 4E75                       		rts	
000149B8                            ; ===========================================================================
000149B8                            
000149B8                            loc_13726:
000149B8 1143 0026                  		move.b	d3,$26(a0)
000149BC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000149C0 3168 0012 0014             		move.w	$12(a0),$14(a0)
000149C6 4A03                       		tst.b	d3
000149C8 6A00                       		bpl.s	locret_1373C
000149CA 4468 0014                  		neg.w	$14(a0)
000149CE                            
000149CE                            locret_1373C:
000149CE 4E75                       		rts	
000149D0                            ; ===========================================================================
000149D0                            
000149D0                            loc_1373E:
000149D0 6100 0000                  		bsr.w	sub_14EB4
000149D4 4A41                       		tst.w	d1
000149D6 6A00                       		bpl.s	loc_13758
000149D8 D368 0008                  		add.w	d1,8(a0)
000149DC 317C 0000 0010             		move.w	#0,$10(a0)
000149E2 3168 0012 0014             		move.w	$12(a0),$14(a0)
000149E8 4E75                       		rts	
000149EA                            ; ===========================================================================
000149EA                            
000149EA                            loc_13758:
000149EA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000149EE 4A41                       		tst.w	d1
000149F0 6A00                       		bpl.s	loc_13772
000149F2 9368 000C                  		sub.w	d1,$C(a0)
000149F6 4A68 0012                  		tst.w	$12(a0)
000149FA 6A00                       		bpl.s	locret_13770
000149FC 317C 0000 0012             		move.w	#0,$12(a0)
00014A02                            
00014A02                            locret_13770:
00014A02 4E75                       		rts	
00014A04                            ; ===========================================================================
00014A04                            
00014A04                            loc_13772:
00014A04 4A68 0012                  		tst.w	$12(a0)
00014A08 6B00                       		bmi.s	locret_1379E
00014A0A 6100 0000                  		bsr.w	Sonic_HitFloor
00014A0E 4A41                       		tst.w	d1
00014A10 6A00                       		bpl.s	locret_1379E
00014A12 D368 000C                  		add.w	d1,$C(a0)
00014A16 1143 0026                  		move.b	d3,$26(a0)
00014A1A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014A1E 117C 0000 001C             		move.b	#0,$1C(a0)
00014A24 317C 0000 0012             		move.w	#0,$12(a0)
00014A2A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014A30                            
00014A30                            locret_1379E:
00014A30 4E75                       		rts	
00014A32                            ; End of function Sonic_Floor
00014A32                            
00014A32                            ; ---------------------------------------------------------------------------
00014A32                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014A32                            ; ---------------------------------------------------------------------------
00014A32                            
00014A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A32                            
00014A32                            
00014A32                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014A32 0828 0004 0022             		btst	#4,$22(a0)
00014A38 6700                       		beq.s	loc_137AE
00014A3A 4E71                       		nop	
00014A3C 4E71                       		nop	
00014A3E 4E71                       		nop	
00014A40                            
00014A40                            loc_137AE:
00014A40 08A8 0005 0022             		bclr	#5,$22(a0)
00014A46 08A8 0001 0022             		bclr	#1,$22(a0)
00014A4C 08A8 0004 0022             		bclr	#4,$22(a0)
00014A52 0828 0002 0022             		btst	#2,$22(a0)
00014A58 6700                       		beq.s	loc_137E4
00014A5A 08A8 0002 0022             		bclr	#2,$22(a0)
00014A60 117C 0013 0016             		move.b	#$13,$16(a0)
00014A66 117C 0009 0017             		move.b	#9,$17(a0)
00014A6C 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014A72 5B68 000C                  		subq.w	#5,$C(a0)
00014A76                            
00014A76                            loc_137E4:
00014A76 117C 0000 003C             		move.b	#0,$3C(a0)
00014A7C 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014A82 4E75                       		rts	
00014A84                            ; End of function Sonic_ResetOnFloor
00014A84                            
00014A84                            ; ===========================================================================
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            ; Sonic	when he	gets hurt
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            
00014A84                            Obj01_Hurt:				; XREF: Obj01_Index
00014A84 4EBA 9D38                  		jsr	SpeedToPos
00014A88 0668 0030 0012             		addi.w	#$30,$12(a0)
00014A8E 0828 0006 0022             		btst	#6,$22(a0)
00014A94 6700                       		beq.s	loc_1380C
00014A96 0468 0020 0012             		subi.w	#$20,$12(a0)
00014A9C                            
00014A9C                            loc_1380C:
00014A9C 6100 0000                  		bsr.w	Sonic_HurtStop
00014AA0 6100 FAE8                  		bsr.w	Sonic_LevelBound
00014AA4 6100 F4AE                  		bsr.w	Sonic_RecordPos
00014AA8 6100 0000                  		bsr.w	Sonic_Animate
00014AAC 6100 0000                  		bsr.w	LoadSonicDynPLC
00014AB0 4EFA 9D32                  		jmp	DisplaySprite
00014AB4                            
00014AB4                            ; ---------------------------------------------------------------------------
00014AB4                            ; Subroutine to	stop Sonic falling after he's been hurt
00014AB4                            ; ---------------------------------------------------------------------------
00014AB4                            
00014AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AB4                            
00014AB4                            
00014AB4                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014AB4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014AB8 0640 00E0                  		addi.w	#$E0,d0
00014ABC B068 000C                  		cmp.w	$C(a0),d0
00014AC0 6500 0000                  		bcs.w	KillSonic
00014AC4 6100 FD70                  		bsr.w	Sonic_Floor
00014AC8 0828 0001 0022             		btst	#1,$22(a0)
00014ACE 6600                       		bne.s	locret_13860
00014AD0 7000                       		moveq	#0,d0
00014AD2 3140 0012                  		move.w	d0,$12(a0)
00014AD6 3140 0010                  		move.w	d0,$10(a0)
00014ADA 3140 0014                  		move.w	d0,$14(a0)
00014ADE 117C 0000 001C             		move.b	#0,$1C(a0)
00014AE4 5528 0024                  		subq.b	#2,$24(a0)
00014AE8 317C 0078 0030             		move.w	#$78,$30(a0)
00014AEE                            
00014AEE                            locret_13860:
00014AEE 4E75                       		rts	
00014AF0                            ; End of function Sonic_HurtStop
00014AF0                            
00014AF0                            ; ===========================================================================
00014AF0                            ; ---------------------------------------------------------------------------
00014AF0                            ; Sonic	when he	dies
00014AF0                            ; ---------------------------------------------------------------------------
00014AF0                            
00014AF0                            Obj01_Death:				; XREF: Obj01_Index
00014AF0 6100 0000                  		bsr.w	GameOver
00014AF4 4EBA 9C56                  		jsr	ObjectFall
00014AF8 6100 F45A                  		bsr.w	Sonic_RecordPos
00014AFC 6100 0000                  		bsr.w	Sonic_Animate
00014B00 6100 0000                  		bsr.w	LoadSonicDynPLC
00014B04 4EFA 9CDE                  		jmp	DisplaySprite
00014B08                            
00014B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B08                            
00014B08                            
00014B08                            GameOver:				; XREF: Obj01_Death
00014B08 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014B0C 0640 0100                  		addi.w	#$100,d0
00014B10 B068 000C                  		cmp.w	$C(a0),d0
00014B14 6400 0000                  		bcc.w	locret_13900
00014B18 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014B1E 5428 0024                  		addq.b	#2,$24(a0)
00014B22 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014B26 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014B2A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014B2E 6600                       		bne.s	loc_138D4
00014B30 317C 0000 003A             		move.w	#0,$3A(a0)
00014B36 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014B3C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014B42 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014B48 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014B4C                            
00014B4C                            loc_138C2:
00014B4C 303C 008F                  		move.w	#$8F,d0
00014B50 4EB9 0000 1D10             		jsr	(PlaySound).l	; play game over music
00014B56 7003                       		moveq	#3,d0
00014B58 4EF9 0000 1EFA             		jmp	(LoadPLC).l	; load game over patterns
00014B5E                            ; ===========================================================================
00014B5E                            
00014B5E                            loc_138D4:
00014B5E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014B64 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014B68 6700                       		beq.s	locret_13900	; if not, branch
00014B6A 317C 0000 003A             		move.w	#0,$3A(a0)
00014B70 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014B76 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014B7C 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014B82 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014B88 60C2                       		bra.s	loc_138C2
00014B8A                            ; ===========================================================================
00014B8A                            
00014B8A                            locret_13900:
00014B8A 4E75                       		rts	
00014B8C                            ; End of function GameOver
00014B8C                            
00014B8C                            ; ===========================================================================
00014B8C                            ; ---------------------------------------------------------------------------
00014B8C                            ; Sonic	when the level is restarted
00014B8C                            ; ---------------------------------------------------------------------------
00014B8C                            
00014B8C                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014B8C 4A68 003A                  		tst.w	$3A(a0)
00014B90 6700                       		beq.s	locret_13914
00014B92 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014B96 6600                       		bne.s	locret_13914
00014B98 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014B9E                            
00014B9E                            locret_13914:
00014B9E 4E75                       		rts	
00014BA0                            
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014BA0                            ; ---------------------------------------------------------------------------
00014BA0                            
00014BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BA0                            
00014BA0                            
00014BA0                            Sonic_Loops:				; XREF: Obj01_Control
00014BA0                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014BA0                            ;		beq.s	loc_13926	; if yes, branch
00014BA0                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014BA0                            ;		bne.w	locret_139C2	; if not, branch
00014BA0                            ;		this is commented out, please do more plane messups id love that
00014BA0                            ;loc_13926:
00014BA0 3028 000C                  		move.w	$C(a0),d0
00014BA4 E248                       		lsr.w	#1,d0
00014BA6 0240 0380                  		andi.w	#$380,d0
00014BAA 1228 0008                  		move.b	8(a0),d1
00014BAE 0241 007F                  		andi.w	#$7F,d1
00014BB2 D041                       		add.w	d1,d0
00014BB4 43F8 A400                  		lea	($FFFFA400).w,a1
00014BB8 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014BBC B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014BC0 6700 FA76                  		beq.w	Obj01_ChkRoll
00014BC4 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014BC8 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014BCC B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014BD0 6700                       		beq.s	loc_13976
00014BD2 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014BD6 6700                       		beq.s	loc_13966
00014BD8 08A8 0006 0001             		bclr	#6,1(a0)
00014BDE 4E75                       		rts	
00014BE0                            ; ===========================================================================
00014BE0                            
00014BE0                            loc_13966:
00014BE0 0828 0001 0022             		btst	#1,$22(a0)
00014BE6 6700                       		beq.s	loc_13976
00014BE8 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BEE 4E75                       		rts	
00014BF0                            ; ===========================================================================
00014BF0                            
00014BF0                            loc_13976:
00014BF0 3428 0008                  		move.w	8(a0),d2
00014BF4 0C02 002C                  		cmpi.b	#$2C,d2
00014BF8 6400                       		bcc.s	loc_13988
00014BFA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014C00 4E75                       		rts	
00014C02                            ; ===========================================================================
00014C02                            
00014C02                            loc_13988:
00014C02 0C02 00E0                  		cmpi.b	#-$20,d2
00014C06 6500                       		bcs.s	loc_13996
00014C08 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014C0E 4E75                       		rts	
00014C10                            ; ===========================================================================
00014C10                            
00014C10                            loc_13996:
00014C10 0828 0006 0001             		btst	#6,1(a0)
00014C16 6600                       		bne.s	loc_139B2
00014C18 1228 0026                  		move.b	$26(a0),d1
00014C1C 6700                       		beq.s	locret_139C2
00014C1E 0C01 0080                  		cmpi.b	#-$80,d1
00014C22 6200                       		bhi.s	locret_139C2
00014C24 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014C2A 4E75                       		rts	
00014C2C                            ; ===========================================================================
00014C2C                            
00014C2C                            loc_139B2:
00014C2C 1228 0026                  		move.b	$26(a0),d1
00014C30 0C01 0080                  		cmpi.b	#-$80,d1
00014C34 6300                       		bls.s	locret_139C2
00014C36 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014C3C                            
00014C3C                            locret_139C2:
00014C3C 4E75                       		rts	
00014C3E                            ; End of function Sonic_Loops
00014C3E                            
00014C3E                            ; ---------------------------------------------------------------------------
00014C3E                            ; Subroutine to	animate	Sonic's sprites
00014C3E                            ; ---------------------------------------------------------------------------
00014C3E                            
00014C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C3E                            
00014C3E                            Player_Anim:
00014C3E 0000 0000                  	dc.l	SonicAniData
00014C42 0000 0000                  	dc.l	SonicAniData ; gronic
00014C46 0000 0000                  	dc.l	SonicAniData ; anakama
00014C4A 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014C4E                            
00014C4E                            	; Insert more animation data for other characters here
00014C4E                            	
00014C4E                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014C4E 7000                       			moveq	#0,d0
00014C50 1038 FFE8                  		move.b	(v_character),d0
00014C54 E548                       		lsl.w	#2,d0
00014C56 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014C5A                            		
00014C5A 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014C5E                            	
00014C5E 7000                       		moveq	#0,d0
00014C60 1028 001C                  		move.b	$1C(a0),d0
00014C64 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014C68 6700                       		beq.s	SAnim_Do	; if not, branch
00014C6A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014C6E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014C74 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014C7A                            
00014C7A                            SAnim_Do:
00014C7A D040                       		add.w	d0,d0
00014C7C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014C80 1011                       		move.b	(a1),d0
00014C82 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014C84 1228 0022                  		move.b	$22(a0),d1
00014C88 0201 0001                  		andi.b	#1,d1
00014C8C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014C92 8328 0001                  		or.b	d1,1(a0)
00014C96 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014C9A 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014C9C 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014CA0                            
00014CA0                            SAnim_Do2:
00014CA0 7200                       		moveq	#0,d1
00014CA2 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014CA6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014CAA 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014CAC                            
00014CAC                            SAnim_Next:
00014CAC 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014CB0 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014CB4                            
00014CB4                            SAnim_Delay:
00014CB4 4E75                       		rts	
00014CB6                            ; ===========================================================================
00014CB6                            
00014CB6                            SAnim_End_FF:
00014CB6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014CB8 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014CBA 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014CC0 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014CC4 60E6                       		bra.s	SAnim_Next
00014CC6                            ; ===========================================================================
00014CC6                            
00014CC6                            SAnim_End_FE:
00014CC6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014CC8 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014CCA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014CCE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014CD2 9200                       		sub.b	d0,d1
00014CD4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014CD8 60D2                       		bra.s	SAnim_Next
00014CDA                            ; ===========================================================================
00014CDA                            
00014CDA                            SAnim_End_FD:
00014CDA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014CDC 6600                       		bne.s	SAnim_End	; if not, branch
00014CDE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014CE4                            
00014CE4                            SAnim_End:
00014CE4 4E75                       		rts	
00014CE6                            ; ===========================================================================
00014CE6                            
00014CE6                            SAnim_WalkRun:				; XREF: SAnim_Do
00014CE6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014CEA 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014CEC 5200                       		addq.b	#1,d0		; is animation walking/running?
00014CEE 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014CF2 7200                       		moveq	#0,d1
00014CF4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014CF8 1428 0022                  		move.b	$22(a0),d2
00014CFC 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014D00 6600                       		bne.s	loc_13A70	; if yes, branch
00014D02 4600                       		not.b	d0		; reverse angle
00014D04                            
00014D04                            loc_13A70:
00014D04 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014D08 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014D0A 7203                       		moveq	#3,d1
00014D0C                            
00014D0C                            loc_13A78:
00014D0C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D12 B302                       		eor.b	d1,d2
00014D14 8528 0001                  		or.b	d2,1(a0)
00014D18 0828 0005 0022             		btst	#5,$22(a0)
00014D1E 6600 0000                  		bne.w	SAnim_Push
00014D22 E808                       		lsr.b	#4,d0		; divide angle by $10
00014D24 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014D28 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014D2C 6A00                       		bpl.s	loc_13A9C
00014D2E 4442                       		neg.w	d2
00014D30                            
00014D30                            loc_13A9C:
00014D30 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014D36 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014D3A 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014D3C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014D42 1200                       		move.b	d0,d1
00014D44 E209                       		lsr.b	#1,d1
00014D46 D001                       		add.b	d1,d0
00014D48                            
00014D48                            loc_13AB4:
00014D48 D000                       		add.b	d0,d0
00014D4A 1600                       		move.b	d0,d3
00014D4C 4442                       		neg.w	d2
00014D4E 0642 0800                  		addi.w	#$800,d2
00014D52 6A00                       		bpl.s	loc_13AC2
00014D54 7400                       		moveq	#0,d2
00014D56                            
00014D56                            loc_13AC2:
00014D56 E04A                       		lsr.w	#8,d2
00014D58 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D5C 6100 FF42                  		bsr.w	SAnim_Do2
00014D60 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014D64 4E75                       		rts	
00014D66                            ; ===========================================================================
00014D66                            
00014D66                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014D66 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014D68 6600                       		bne.s	SAnim_Push	; if not, branch
00014D6A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014D6E 6A00                       		bpl.s	loc_13ADE
00014D70 4442                       		neg.w	d2
00014D72                            
00014D72                            loc_13ADE:
00014D72 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014D78 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014D7C 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014D7E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014D84                            
00014D84                            loc_13AF0:
00014D84 4442                       		neg.w	d2
00014D86 0642 0400                  		addi.w	#$400,d2
00014D8A 6A00                       		bpl.s	loc_13AFA
00014D8C 7400                       		moveq	#0,d2
00014D8E                            
00014D8E                            loc_13AFA:
00014D8E E04A                       		lsr.w	#8,d2
00014D90 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D94 1228 0022                  		move.b	$22(a0),d1
00014D98 0201 0001                  		andi.b	#1,d1
00014D9C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014DA2 8328 0001                  		or.b	d1,1(a0)
00014DA6 6000 FEF8                  		bra.w	SAnim_Do2
00014DAA                            ; ===========================================================================
00014DAA                            
00014DAA                            SAnim_Push:				; XREF: SAnim_RollJump
00014DAA 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014DAE 6B00                       		bmi.s	loc_13B1E
00014DB0 4442                       		neg.w	d2
00014DB2                            
00014DB2                            loc_13B1E:
00014DB2 0642 0800                  		addi.w	#$800,d2
00014DB6 6A00                       		bpl.s	loc_13B26
00014DB8 7400                       		moveq	#0,d2
00014DBA                            
00014DBA                            loc_13B26:
00014DBA EC4A                       		lsr.w	#6,d2
00014DBC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014DC0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014DC6 1228 0022                  		move.b	$22(a0),d1
00014DCA 0201 0001                  		andi.b	#1,d1
00014DCE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014DD4 8328 0001                  		or.b	d1,1(a0)
00014DD8 6000 FEC6                  		bra.w	SAnim_Do2
00014DDC                            ; End of function Sonic_Animate
00014DDC                            
00014DDC                            ; ===========================================================================
00014DDC                            SonicAniData:
00014DDC                            	include "_anim\Sonic.asm"
00014DDC                            ; ---------------------------------------------------------------------------
00014DDC                            ; Animation script - Sonic
00014DDC                            ; ---------------------------------------------------------------------------
00014DDC 0000                       		dc.w SonAni_Walk-SonicAniData
00014DDE 0000                       		dc.w SonAni_Run-SonicAniData
00014DE0 0000                       		dc.w SonAni_Roll-SonicAniData
00014DE2 0000                       		dc.w SonAni_Roll2-SonicAniData
00014DE4 0000                       		dc.w SonAni_Push-SonicAniData
00014DE6 0000                       		dc.w SonAni_Wait-SonicAniData
00014DE8 0000                       		dc.w SonAni_Balance-SonicAniData
00014DEA 0000                       		dc.w SonAni_LookUp-SonicAniData
00014DEC 0000                       		dc.w SonAni_Duck-SonicAniData
00014DEE 0000                       		dc.w SonAni_Warp1-SonicAniData
00014DF0 0000                       		dc.w SonAni_Warp2-SonicAniData
00014DF2 0000                       		dc.w SonAni_Warp3-SonicAniData
00014DF4 0000                       		dc.w SonAni_Warp4-SonicAniData
00014DF6 0000                       		dc.w SonAni_Stop-SonicAniData
00014DF8 0000                       		dc.w SonAni_Float1-SonicAniData
00014DFA 0000                       		dc.w SonAni_Float2-SonicAniData
00014DFC 0000                       		dc.w SonAni_Spring-SonicAniData
00014DFE 0000                       		dc.w SonAni_LZHang-SonicAniData
00014E00 0000                       		dc.w SonAni_Leap1-SonicAniData
00014E02 0000                       		dc.w SonAni_Leap2-SonicAniData
00014E04 0000                       		dc.w SonAni_Surf-SonicAniData
00014E06 0000                       		dc.w SonAni_Bubble-SonicAniData
00014E08 0000                       		dc.w SonAni_Death1-SonicAniData
00014E0A 0000                       		dc.w SonAni_Drown-SonicAniData
00014E0C 0000                       		dc.w SonAni_Death2-SonicAniData
00014E0E 0000                       		dc.w SonAni_Shrink-SonicAniData
00014E10 0000                       		dc.w SonAni_Hurt-SonicAniData
00014E12 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014E14 0000                       		dc.w SonAni_Blank-SonicAniData
00014E16 0000                       		dc.w SonAni_Float3-SonicAniData
00014E18 0000                       		dc.w SonAni_Float4-SonicAniData
00014E1A FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014E24 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014E2C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014E34 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014E3C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014E44 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014E5A 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014E5E 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014E62 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014E66 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014E6A 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014E6E 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014E72 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014E76 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014E7A 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014E7E 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014E86 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014E8A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014E8E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014E94 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014E9A 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014E9E 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014EA6 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014EAA 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014EAE 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014EB2 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014EBC 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014EC0 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014EC4 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014EC8 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014ED0 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014ED4                            		even
00014ED4                            		even
00014ED4                            
00014ED4                            ; ---------------------------------------------------------------------------
00014ED4                            ; Sonic	pattern	loading	subroutine
00014ED4                            ; ---------------------------------------------------------------------------
00014ED4                            
00014ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ED4                            Player_DPLC:
00014ED4 0000 0000                  	dc.l	SonicDynPLC
00014ED8 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014EDC 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014EE0 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014EE4                            	; add pointers for player dplc here
00014EE4                            Player_Art:
00014EE4 0000 0000                  	dc.l	Art_Sonic
00014EE8 0000 0000                  	dc.l	Art_Sonic ; gronic
00014EEC 0000 0000                  	dc.l	Art_Sonic ; anakama
00014EF0 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014EF4                            	; add pointers for player art here
00014EF4                            
00014EF4                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014EF4 7000                       		moveq	#0,d0
00014EF6 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014EFA B038 F766                  		cmp.b	($FFFFF766).w,d0
00014EFE 6700                       		beq.s	locret_13C96
00014F00 11C0 F766                  		move.b	d0,($FFFFF766).w
00014F04                            		
00014F04 323C 0000                  		move.w	#0,d1
00014F08 1238 FFE8                  		move.b	(v_character),d1
00014F0C E549                       		lsl.w	#2,d1
00014F0E 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014F12                            
00014F12 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014F16                            		
00014F16 D040                       		add.w	d0,d0
00014F18 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014F1C 7200                       		moveq	#0,d1
00014F1E 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014F20 5301                       		subq.b	#1,d1
00014F22 6B00                       		bmi.s	locret_13C96
00014F24 47F8 C800                  		lea	($FFFFC800).w,a3
00014F28 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014F2E                            
00014F2E                            SPLC_ReadEntry:
00014F2E 303C 0000                  		move.w	#0,d0
00014F32 1038 FFE8                  		move.b	(v_character),d0
00014F36 E548                       		lsl.w	#2,d0
00014F38 43FA FFAA                  		lea 	Player_Art(pc),a1
00014F3C                            
00014F3C 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014F40                            
00014F40 7400                       		moveq	#0,d2
00014F42 141A                       		move.b	(a2)+,d2
00014F44 3002                       		move.w	d2,d0
00014F46 E808                       		lsr.b	#4,d0
00014F48 E14A                       		lsl.w	#8,d2
00014F4A 141A                       		move.b	(a2)+,d2
00014F4C EB4A                       		lsl.w	#5,d2
00014F4E D3C2                       		adda.l	d2,a1
00014F50                            
00014F50                            SPLC_LoadTile:
00014F50 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014F54 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014F58 47EB 0020                  		lea	$20(a3),a3	; next tile
00014F5C 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014F60                            
00014F60 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014F64                            
00014F64                            locret_13C96:
00014F64 4E75                       		rts	
00014F66                            ; End of function LoadSonicDynPLC
00014F66                            
00014F66                            ; ===========================================================================
00014F66                            ; ---------------------------------------------------------------------------
00014F66                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014F66                            ; ---------------------------------------------------------------------------
00014F66                            
00014F66                            Obj0A:					; XREF: Obj_Index
00014F66 7000                       		moveq	#0,d0
00014F68 1028 0024                  		move.b	$24(a0),d0
00014F6C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014F70 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014F74                            ; ===========================================================================
00014F74 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014F78 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014F7C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014F80 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014F84 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014F86                            ; ===========================================================================
00014F86                            
00014F86                            Obj0A_Main:				; XREF: Obj0A_Index
00014F86 5428 0024                  		addq.b	#2,$24(a0)
00014F8A 217C 0001 3B78 0004        		move.l	#Map_obj64,4(a0)
00014F92 317C 8348 0002             		move.w	#$8348,2(a0)
00014F98 117C 0084 0001             		move.b	#$84,1(a0)
00014F9E 117C 0010 0019             		move.b	#$10,$19(a0)
00014FA4 117C 0001 0018             		move.b	#1,$18(a0)
00014FAA 1028 0028                  		move.b	$28(a0),d0
00014FAE 6A00                       		bpl.s	loc_13D00
00014FB0 5028 0024                  		addq.b	#8,$24(a0)
00014FB4 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014FBC 317C 0440 0002             		move.w	#$440,2(a0)
00014FC2 0240 007F                  		andi.w	#$7F,d0
00014FC6 1140 0033                  		move.b	d0,$33(a0)
00014FCA 6000 0000                  		bra.w	Obj0A_Countdown
00014FCE                            ; ===========================================================================
00014FCE                            
00014FCE                            loc_13D00:
00014FCE 1140 001C                  		move.b	d0,$1C(a0)
00014FD2 3168 0008 0030             		move.w	8(a0),$30(a0)
00014FD8 317C FF78 0012             		move.w	#-$88,$12(a0)
00014FDE                            
00014FDE                            Obj0A_Animate:				; XREF: Obj0A_Index
00014FDE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014FE4 4EB9 0000 B832             		jsr	AnimateSprite
00014FEA                            
00014FEA                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014FEA 3038 F646                  		move.w	($FFFFF646).w,d0
00014FEE B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014FF2 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014FF4 117C 0006 0024             		move.b	#6,$24(a0)
00014FFA 5E28 001C                  		addq.b	#7,$1C(a0)
00014FFE 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015004 6700                       		beq.s	Obj0A_Display
00015006 6000                       		bra.s	Obj0A_Display
00015008                            ; ===========================================================================
00015008                            
00015008                            Obj0A_Wobble:
00015008 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001500C 6700                       		beq.s	loc_13D44
0001500E 5868 0030                  		addq.w	#4,$30(a0)
00015012                            
00015012                            loc_13D44:
00015012 1028 0026                  		move.b	$26(a0),d0
00015016 5228 0026                  		addq.b	#1,$26(a0)
0001501A 0240 007F                  		andi.w	#$7F,d0
0001501E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015024 1031 0000                  		move.b	(a1,d0.w),d0
00015028 4880                       		ext.w	d0
0001502A D068 0030                  		add.w	$30(a0),d0
0001502E 3140 0008                  		move.w	d0,8(a0)
00015032 6100                       		bsr.s	Obj0A_ShowNumber
00015034 4EBA 9788                  		jsr	SpeedToPos
00015038 4A28 0001                  		tst.b	1(a0)
0001503C 6A00                       		bpl.s	Obj0A_Delete
0001503E 4EFA 97A4                  		jmp	DisplaySprite
00015042                            ; ===========================================================================
00015042                            
00015042                            Obj0A_Delete:
00015042 4EFA 97DC                  		jmp	DeleteObject
00015046                            ; ===========================================================================
00015046                            
00015046                            Obj0A_Display:				; XREF: Obj0A_Index
00015046 6100                       		bsr.s	Obj0A_ShowNumber
00015048 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001504E 4EB9 0000 B832             		jsr	AnimateSprite
00015054 4EFA 978E                  		jmp	DisplaySprite
00015058                            ; ===========================================================================
00015058                            
00015058                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015058 4EFA 97C6                  		jmp	DeleteObject
0001505C                            ; ===========================================================================
0001505C                            
0001505C                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001505C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015062 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015064 5368 0038                  		subq.w	#1,$38(a0)
00015068 6600                       		bne.s	Obj0A_Display2
0001506A 117C 000E 0024             		move.b	#$E,$24(a0)
00015070 5E28 001C                  		addq.b	#7,$1C(a0)
00015074 60D0                       		bra.s	Obj0A_Display
00015076                            ; ===========================================================================
00015076                            
00015076                            Obj0A_Display2:
00015076 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001507C 4EB9 0000 B832             		jsr	AnimateSprite
00015082 4A28 0001                  		tst.b	1(a0)
00015086 6A00                       		bpl.s	Obj0A_Delete3
00015088 4EFA 975A                  		jmp	DisplaySprite
0001508C                            ; ===========================================================================
0001508C                            
0001508C                            Obj0A_Delete3:
0001508C 4EFA 9792                  		jmp	DeleteObject
00015090                            ; ===========================================================================
00015090                            
00015090                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015090 4A68 0038                  		tst.w	$38(a0)
00015094 6700                       		beq.s	locret_13E1A
00015096 5368 0038                  		subq.w	#1,$38(a0)
0001509A 6600                       		bne.s	locret_13E1A
0001509C 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000150A2 6400                       		bcc.s	locret_13E1A
000150A4 317C 000F 0038             		move.w	#$F,$38(a0)
000150AA 4268 0012                  		clr.w	$12(a0)
000150AE 117C 0080 0001             		move.b	#$80,1(a0)
000150B4 3028 0008                  		move.w	8(a0),d0
000150B8 9078 F700                  		sub.w	($FFFFF700).w,d0
000150BC 0640 0080                  		addi.w	#$80,d0
000150C0 3140 0008                  		move.w	d0,8(a0)
000150C4 3028 000C                  		move.w	$C(a0),d0
000150C8 9078 F704                  		sub.w	($FFFFF704).w,d0
000150CC 0640 0080                  		addi.w	#$80,d0
000150D0 3140 000A                  		move.w	d0,$A(a0)
000150D4 117C 000C 0024             		move.b	#$C,$24(a0)
000150DA                            
000150DA                            locret_13E1A:
000150DA 4E75                       		rts	
000150DC                            ; ===========================================================================
000150DC                            Obj0A_WobbleData:
000150DC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000150ED 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000150FE 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001510F 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001511F FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001512C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015139 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015146 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015153 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001515C                            ; ===========================================================================
0001515C                            
0001515C                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001515C 4A68 002C                  		tst.w	$2C(a0)
00015160 6600 0000                  		bne.w	loc_13F86
00015164 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001516A 6400 0000                  		bcc.w	locret_1408C
0001516E 0838 0006 D022             		btst	#6,($FFFFD022).w
00015174 6700 0000                  		beq.w	locret_1408C
00015178 5368 0038                  		subq.w	#1,$38(a0)
0001517C 6A00 0000                  		bpl.w	loc_13FAC
00015180 317C 003B 0038             		move.w	#59,$38(a0)
00015186 317C 0001 0036             		move.w	#1,$36(a0)
0001518C 4EB9 0000 3492             		jsr	(RandomNumber).l
00015192 0240 0001                  		andi.w	#1,d0
00015196 1140 0034                  		move.b	d0,$34(a0)
0001519A 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001519E 0C40 0019                  		cmpi.w	#$19,d0
000151A2 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000151A4 0C40 0014                  		cmpi.w	#$14,d0
000151A8 6700                       		beq.s	Obj0A_WarnSound
000151AA 0C40 000F                  		cmpi.w	#$F,d0
000151AE 6700                       		beq.s	Obj0A_WarnSound
000151B0 0C40 000C                  		cmpi.w	#$C,d0
000151B4 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000151B6 6600                       		bne.s	loc_13F02
000151B8 303C 0092                  		move.w	#$92,d0
000151BC 4EB9 0000 1D10             		jsr	(PlaySound).l	; play countdown music
000151C2                            
000151C2                            loc_13F02:
000151C2 5328 0032                  		subq.b	#1,$32(a0)
000151C6 6A00                       		bpl.s	Obj0A_ReduceAir
000151C8 1168 0033 0032             		move.b	$33(a0),$32(a0)
000151CE 08E8 0007 0036             		bset	#7,$36(a0)
000151D4 6000                       		bra.s	Obj0A_ReduceAir
000151D6                            ; ===========================================================================
000151D6                            
000151D6                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000151D6 303C 00C2                  		move.w	#$C2,d0
000151DA 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000151E0                            
000151E0                            Obj0A_ReduceAir:
000151E0 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000151E4 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000151E8 6100 0000                  		bsr.w	ResumeMusic
000151EC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000151F2 303C 00B2                  		move.w	#$B2,d0
000151F6 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play drowning sound
000151FC 117C 000A 0034             		move.b	#$A,$34(a0)
00015202 317C 0001 0036             		move.w	#1,$36(a0)
00015208 317C 0078 002C             		move.w	#$78,$2C(a0)
0001520E 2F08                       		move.l	a0,-(sp)
00015210 41F8 D000                  		lea	($FFFFD000).w,a0
00015214 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00015218 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001521E 08E8 0001 0022             		bset	#1,$22(a0)
00015224 08E8 0007 0002             		bset	#7,2(a0)
0001522A 317C 0000 0012             		move.w	#0,$12(a0)
00015230 317C 0000 0010             		move.w	#0,$10(a0)
00015236 317C 0000 0014             		move.w	#0,$14(a0)
0001523C 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015242 205F                       		movea.l	(sp)+,a0
00015244 4E75                       		rts	
00015246                            ; ===========================================================================
00015246                            
00015246                            loc_13F86:
00015246 5368 002C                  		subq.w	#1,$2C(a0)
0001524A 6600                       		bne.s	loc_13F94
0001524C 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00015252 4E75                       		rts	
00015254                            ; ===========================================================================
00015254                            
00015254                            loc_13F94:
00015254 2F08                       		move.l	a0,-(sp)
00015256 41F8 D000                  		lea	($FFFFD000).w,a0
0001525A 4EBA 9562                  		jsr	SpeedToPos
0001525E 0668 0010 0012             		addi.w	#$10,$12(a0)
00015264 205F                       		movea.l	(sp)+,a0
00015266 6000                       		bra.s	loc_13FAC
00015268                            ; ===========================================================================
00015268                            
00015268                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015268 6000                       		bra.s	Obj0A_MakeItem
0001526A                            ; ===========================================================================
0001526A                            
0001526A                            loc_13FAC:
0001526A 4A68 0036                  		tst.w	$36(a0)
0001526E 6700 0000                  		beq.w	locret_1408C
00015272 5368 003A                  		subq.w	#1,$3A(a0)
00015276 6A00 0000                  		bpl.w	locret_1408C
0001527A                            
0001527A                            Obj0A_MakeItem:
0001527A 4EB9 0000 3492             		jsr	(RandomNumber).l
00015280 0240 000F                  		andi.w	#$F,d0
00015284 3140 003A                  		move.w	d0,$3A(a0)
00015288 4EBA 99E0                  		jsr	SingleObjLoad
0001528C 6600 0000                  		bne.w	locret_1408C
00015290 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015294 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001529A 7006                       		moveq	#6,d0
0001529C 0838 0000 D022             		btst	#0,($FFFFD022).w
000152A2 6700                       		beq.s	loc_13FF2
000152A4 4440                       		neg.w	d0
000152A6 137C 0040 0026             		move.b	#$40,$26(a1)
000152AC                            
000152AC                            loc_13FF2:
000152AC D169 0008                  		add.w	d0,8(a1)
000152B0 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000152B6 137C 0006 0028             		move.b	#6,$28(a1)
000152BC 4A68 002C                  		tst.w	$2C(a0)
000152C0 6700 0000                  		beq.w	loc_1403E
000152C4 0268 0007 003A             		andi.w	#7,$3A(a0)
000152CA 0668 0000 003A             		addi.w	#0,$3A(a0)
000152D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000152D4 0440 000C                  		subi.w	#$C,d0
000152D8 3340 000C                  		move.w	d0,$C(a1)
000152DC 4EB9 0000 3492             		jsr	(RandomNumber).l
000152E2 1340 0026                  		move.b	d0,$26(a1)
000152E6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000152EA 0200 0003                  		andi.b	#3,d0
000152EE 6600                       		bne.s	loc_14082
000152F0 137C 000E 0028             		move.b	#$E,$28(a1)
000152F6 6000                       		bra.s	loc_14082
000152F8                            ; ===========================================================================
000152F8                            
000152F8                            loc_1403E:
000152F8 0828 0007 0036             		btst	#7,$36(a0)
000152FE 6700                       		beq.s	loc_14082
00015300 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015304 E24A                       		lsr.w	#1,d2
00015306 4EB9 0000 3492             		jsr	(RandomNumber).l
0001530C 0240 0003                  		andi.w	#3,d0
00015310 6600                       		bne.s	loc_1406A
00015312 08E8 0006 0036             		bset	#6,$36(a0)
00015318 6600                       		bne.s	loc_14082
0001531A 1342 0028                  		move.b	d2,$28(a1)
0001531E 337C 001C 0038             		move.w	#$1C,$38(a1)
00015324                            
00015324                            loc_1406A:
00015324 4A28 0034                  		tst.b	$34(a0)
00015328 6600                       		bne.s	loc_14082
0001532A 08E8 0006 0036             		bset	#6,$36(a0)
00015330 6600                       		bne.s	loc_14082
00015332 1342 0028                  		move.b	d2,$28(a1)
00015336 337C 001C 0038             		move.w	#$1C,$38(a1)
0001533C                            
0001533C                            loc_14082:
0001533C 5328 0034                  		subq.b	#1,$34(a0)
00015340 6A00                       		bpl.s	locret_1408C
00015342 4268 0036                  		clr.w	$36(a0)
00015346                            
00015346                            locret_1408C:
00015346 4E75                       		rts	
00015348                            
00015348                            ; ---------------------------------------------------------------------------
00015348                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015348                            ; ---------------------------------------------------------------------------
00015348                            
00015348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015348                            
00015348                            
00015348                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015348 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001534E                             
0001534E                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001534E                             
0001534E 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00015352                             
00015352 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00015358 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001535A 43F9 0000 4516             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00015360 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015362                             
00015362                            Air_GetBgm2:
00015362 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00015368 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001536A 43F9 0000 451E             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00015370 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015372                             
00015372                            Air_GetBgm3:
00015372 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00015378 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001537A 43F9 0000 4526             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00015380 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015382                             
00015382                            Air_GetBgm4:
00015382 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00015388 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001538A 43F9 0000 452E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00015390                             
00015390                            Air_PlayMusic:
00015390 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00015394                             
00015394                            loc_140A6:
00015394 4EB9 0000 1D10             		jsr	(PlaySound).l
0001539A                             
0001539A                            ; NineKode ends here
0001539A                            
0001539A                            loc_140AC:
0001539A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000153A0 4238 D372                  		clr.b	($FFFFD372).w
000153A4 4E75                       		rts	
000153A6                            ; End of function ResumeMusic
000153A6                            
000153A6                            ; ===========================================================================
000153A6                            Ani_obj0A:
000153A6                            	include "_anim\obj0A.asm"
000153A6                            ; ---------------------------------------------------------------------------
000153A6                            ; Animation script - countdown numbers and bubbles (LZ)
000153A6                            ; ---------------------------------------------------------------------------
000153A6 0000                       		dc.w byte_140D6-Ani_obj0A
000153A8 0000                       		dc.w byte_140E0-Ani_obj0A
000153AA 0000                       		dc.w byte_140EA-Ani_obj0A
000153AC 0000                       		dc.w byte_140F4-Ani_obj0A
000153AE 0000                       		dc.w byte_140FE-Ani_obj0A
000153B0 0000                       		dc.w byte_14108-Ani_obj0A
000153B2 0000                       		dc.w byte_14112-Ani_obj0A
000153B4 0000                       		dc.w byte_14118-Ani_obj0A
000153B6 0000                       		dc.w byte_14120-Ani_obj0A
000153B8 0000                       		dc.w byte_14128-Ani_obj0A
000153BA 0000                       		dc.w byte_14130-Ani_obj0A
000153BC 0000                       		dc.w byte_14138-Ani_obj0A
000153BE 0000                       		dc.w byte_14140-Ani_obj0A
000153C0 0000                       		dc.w byte_14148-Ani_obj0A
000153C2 0000                       		dc.w byte_1414A-Ani_obj0A
000153C4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000153CE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000153D8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000153E2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000153EC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000153F6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015400 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015406 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001540E 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015416 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001541E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015426 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001542E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015436 0EFC                       byte_14148:	dc.b $E, $FC
00015438 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001543E                            		even
0001543E                            		even
0001543E                            
0001543E                            ; ---------------------------------------------------------------------------
0001543E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001543E                            ; ---------------------------------------------------------------------------
0001543E                            Map_obj0A:
0001543E                            	include "_maps\obj0A.asm"
0001543E                            ; ---------------------------------------------------------------------------
0001543E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001543E                            ; ---------------------------------------------------------------------------
0001543E 0000                       		dc.w byte_14152-Map_obj0A
00015440 01                         byte_14152:	dc.b 1
00015441 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015446                            		even
00015446                            		even
00015446                            
00015446                            ; ===========================================================================
00015446                            ; ---------------------------------------------------------------------------
00015446                            ; Object 38 - shield and invincibility stars
00015446                            ; ---------------------------------------------------------------------------
00015446                            
00015446                            Obj38:					; XREF: Obj_Index
00015446 7000                       		moveq	#0,d0
00015448 1028 0024                  		move.b	$24(a0),d0
0001544C 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015450 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015454                            ; ===========================================================================
00015454 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015456 0000                       		dc.w Obj38_Shield-Obj38_Index
00015458 0000                       		dc.w Obj38_Stars-Obj38_Index
0001545A                            ; ===========================================================================
0001545A                            
0001545A                            Obj38_Main:				; XREF: Obj38_Index
0001545A 5428 0024                  		addq.b	#2,$24(a0)
0001545E 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015466 117C 0004 0001             		move.b	#4,1(a0)
0001546C 117C 0001 0018             		move.b	#1,$18(a0)
00015472 117C 0010 0019             		move.b	#$10,$19(a0)
00015478 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001547C 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001547E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015484 4E75                       		rts	
00015486                            ; ===========================================================================
00015486                            
00015486                            Obj38_DoStars:
00015486 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001548A 317C 055C 0002             		move.w	#$55C,2(a0)
00015490 4E75                       		rts	
00015492                            ; ===========================================================================
00015492                            
00015492                            Obj38_Shield:				; XREF: Obj38_Index
00015492 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015496 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015498 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001549C 6700                       		beq.s	Obj38_Delete	; if not, branch
0001549E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000154A4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000154AA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000154B0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000154B6 4EB9 0000 B832             		jsr	AnimateSprite
000154BC 4EFA 9326                  		jmp	DisplaySprite
000154C0                            ; ===========================================================================
000154C0                            
000154C0                            Obj38_RmvShield:
000154C0 4E75                       		rts	
000154C2                            ; ===========================================================================
000154C2                            
000154C2                            Obj38_Delete:
000154C2 4EFA 935C                  		jmp	DeleteObject
000154C6                            ; ===========================================================================
000154C6                            
000154C6                            Obj38_Stars:				; XREF: Obj38_Index
000154C6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000154CA 6700                       		beq.s	Obj38_Delete2	; if not, branch
000154CC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000154D0 1228 001C                  		move.b	$1C(a0),d1
000154D4 5301                       		subq.b	#1,d1
000154D6 6000                       		bra.s	Obj38_StarTrail
000154D8                            ; ===========================================================================
000154D8 E909                       		lsl.b	#4,d1
000154DA 5801                       		addq.b	#4,d1
000154DC 9001                       		sub.b	d1,d0
000154DE 1228 0030                  		move.b	$30(a0),d1
000154E2 9001                       		sub.b	d1,d0
000154E4 5801                       		addq.b	#4,d1
000154E6 0201 000F                  		andi.b	#$F,d1
000154EA 1141 0030                  		move.b	d1,$30(a0)
000154EE 6000                       		bra.s	Obj38_StarTrail2a
000154F0                            ; ===========================================================================
000154F0                            
000154F0                            Obj38_StarTrail:			; XREF: Obj38_Stars
000154F0 E709                       		lsl.b	#3,d1
000154F2 1401                       		move.b	d1,d2
000154F4 D201                       		add.b	d1,d1
000154F6 D202                       		add.b	d2,d1
000154F8 5801                       		addq.b	#4,d1
000154FA 9001                       		sub.b	d1,d0
000154FC 1228 0030                  		move.b	$30(a0),d1
00015500 9001                       		sub.b	d1,d0
00015502 5801                       		addq.b	#4,d1
00015504 0C01 0018                  		cmpi.b	#$18,d1
00015508 6500                       		bcs.s	Obj38_StarTrail2
0001550A 7200                       		moveq	#0,d1
0001550C                            
0001550C                            Obj38_StarTrail2:
0001550C 1141 0030                  		move.b	d1,$30(a0)
00015510                            
00015510                            Obj38_StarTrail2a:
00015510 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015514 43F1 0000                  		lea	(a1,d0.w),a1
00015518 3159 0008                  		move.w	(a1)+,8(a0)
0001551C 3159 000C                  		move.w	(a1)+,$C(a0)
00015520 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015526 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001552C 4EB9 0000 B832             		jsr	AnimateSprite
00015532 4EFA 92B0                  		jmp	DisplaySprite
00015536                            ; ===========================================================================
00015536                            
00015536                            Obj38_Delete2:				; XREF: Obj38_Stars
00015536 4EFA 92E8                  		jmp	DeleteObject
0001553A                            ; ===========================================================================
0001553A                            ; ---------------------------------------------------------------------------
0001553A                            ; Object 4A - special stage entry from beta
0001553A                            ; ---------------------------------------------------------------------------
0001553A                            
0001553A                            Obj4A:					; XREF: Obj_Index
0001553A 7000                       		moveq	#0,d0
0001553C 1028 0024                  		move.b	$24(a0),d0
00015540 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00015544 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00015548                            ; ===========================================================================
00015548 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001554A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001554C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001554E                            ; ===========================================================================
0001554E                            
0001554E                            Obj4A_Main:				; XREF: Obj4A_Index
0001554E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00015552 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00015554 4E75                       		rts	
00015556                            ; ===========================================================================
00015556                            
00015556                            Obj4A_Main2:
00015556 5428 0024                  		addq.b	#2,$24(a0)
0001555A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00015562 117C 0004 0001             		move.b	#4,1(a0)
00015568 117C 0001 0018             		move.b	#1,$18(a0)
0001556E 117C 0038 0019             		move.b	#$38,$19(a0)
00015574 317C 0541 0002             		move.w	#$541,2(a0)
0001557A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00015580                            
00015580                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00015580 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015586 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001558C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015592 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015598 4EB9 0000 B832             		jsr	AnimateSprite
0001559E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000155A4 6600                       		bne.s	Obj4A_Display
000155A6 4A38 D000                  		tst.b	($FFFFD000).w
000155AA 6700                       		beq.s	Obj4A_Display
000155AC 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000155B2 303C 00A8                  		move.w	#$A8,d0
000155B6 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000155BC                            
000155BC                            Obj4A_Display:
000155BC 4EFA 9226                  		jmp	DisplaySprite
000155C0                            ; ===========================================================================
000155C0                            
000155C0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000155C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000155C4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000155C6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000155CC 4EFA 9252                  		jmp	DeleteObject
000155D0                            ; ===========================================================================
000155D0                            
000155D0                            Obj4A_Wait:
000155D0 4E75                       		rts	
000155D2                            ; ===========================================================================
000155D2                            ; ---------------------------------------------------------------------------
000155D2                            ; Object 08 - water splash (LZ)
000155D2                            ; ---------------------------------------------------------------------------
000155D2                            
000155D2                            Obj08:					; XREF: Obj_Index
000155D2 7000                       		moveq	#0,d0
000155D4 1028 0024                  		move.b	$24(a0),d0
000155D8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000155DC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000155E0                            ; ===========================================================================
000155E0 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000155E2 0000                       		dc.w Obj08_Display-Obj08_Index
000155E4 0000                       		dc.w Obj08_Delete-Obj08_Index
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            Obj08_Main:				; XREF: Obj08_Index
000155E6 5428 0024                  		addq.b	#2,$24(a0)
000155EA 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000155F2 0028 0004 0001             		ori.b	#4,1(a0)
000155F8 117C 0001 0018             		move.b	#1,$18(a0)
000155FE 117C 0010 0019             		move.b	#$10,$19(a0)
00015604 317C 4259 0002             		move.w	#$4259,2(a0)
0001560A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015610                            
00015610                            Obj08_Display:				; XREF: Obj08_Index
00015610 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015616 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001561C 4EB9 0000 B832             		jsr	AnimateSprite
00015622 4EFA 91C0                  		jmp	DisplaySprite
00015626                            ; ===========================================================================
00015626                            
00015626                            Obj08_Delete:				; XREF: Obj08_Index
00015626 4EFA 91F8                  		jmp	DeleteObject	; delete when animation	is complete
0001562A                            ; ===========================================================================
0001562A                            Ani_obj38:
0001562A                            	include "_anim\obj38.asm"
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            ; Animation script - shield and invincibility stars
0001562A                            ; ---------------------------------------------------------------------------
0001562A 0000                       		dc.w byte_14356-Ani_obj38
0001562C 0000                       		dc.w byte_1435E-Ani_obj38
0001562E 0000                       		dc.w byte_14364-Ani_obj38
00015630 0000                       		dc.w byte_1437E-Ani_obj38
00015632 0000                       		dc.w byte_14398-Ani_obj38
00015634 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001563C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015642 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015653 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001565C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001566D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015676 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015687 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015690                            		even
00015690                            		even
00015690                            
00015690                            ; ---------------------------------------------------------------------------
00015690                            ; Sprite mappings - shield and invincibility stars
00015690                            ; ---------------------------------------------------------------------------
00015690                            Map_obj38:
00015690                            	include "_maps\obj38.asm"
00015690                            ; ---------------------------------------------------------------------------
00015690                            ; Sprite mappings - shield and invincibility stars
00015690                            ; ---------------------------------------------------------------------------
00015690 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015694 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015698 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001569C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000156A0 04                         byte_143C2:	dc.b 4
000156A1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000156A6 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000156AB 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000156B0 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000156B5 04                         byte_143D7:	dc.b 4
000156B6 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000156BB E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000156C0 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000156C5 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000156CA 04                         byte_143EC:	dc.b 4
000156CB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000156D0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000156D5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000156DA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000156DF 04                         byte_14401:	dc.b 4
000156E0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000156E5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000156EA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000156EF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000156F4 04                         byte_14416:	dc.b 4
000156F5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000156FA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000156FF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015704 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015709 04                         byte_1442B:	dc.b 4
0001570A E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001570F E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015714 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015719 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001571E 04                         byte_14440:	dc.b 4
0001571F E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015724 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015729 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001572E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015734 00                         		even
00015734 00                         		even
00015734                            
00015734                            Ani_obj4A:
00015734                            	include "_anim\obj4A.asm"
00015734                            ; ---------------------------------------------------------------------------
00015734                            ; Animation script - special stage entry effect from beta
00015734                            ; ---------------------------------------------------------------------------
00015734 0000                       		dc.w byte_14458-Ani_obj4A
00015736 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001574A                            		even
0001574A                            		even
0001574A                            
0001574A                            ; ---------------------------------------------------------------------------
0001574A                            ; Sprite mappings - special stage entry	from beta
0001574A                            ; ---------------------------------------------------------------------------
0001574A                            Map_obj4A:
0001574A                            	include "_maps\obj4A.asm"
0001574A                            ; ---------------------------------------------------------------------------
0001574A                            ; Sprite mappings - special stage entry	from beta
0001574A                            ; ---------------------------------------------------------------------------
0001574A 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001574E 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015752 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015756 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001575A 03                         byte_1447C:	dc.b 3
0001575B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015760 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015765 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001576A 03                         byte_1448C:	dc.b 3
0001576B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015770 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015775 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001577A 05                         byte_1449C:	dc.b 5
0001577B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015780 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015785 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001578A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001578F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015794 09                         byte_144B6:	dc.b 9
00015795 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001579A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001579F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000157A4 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000157A9 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000157AE F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000157B3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000157B8 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000157BD F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000157C2 12                         byte_144E4:	dc.b $12
000157C3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000157C8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000157CD F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000157D2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000157D7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000157DC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000157E1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000157E6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000157EB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000157F0 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000157F5 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000157FA 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000157FF F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015804 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015809 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001580E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015813 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015818 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001581D 11                         byte_1453F:	dc.b $11
0001581E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015823 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015828 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001582D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015832 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015837 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001583C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015841 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015846 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001584B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015850 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015855 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001585A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001585F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015864 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015869 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001586E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015873 09                         byte_14595:	dc.b 9
00015874 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015879 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001587E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015883 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015888 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001588D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015892 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015897 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001589C 04                         		dc.b 4
0001589D 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000158A2                            		even
000158A2                            		even
000158A2                            
000158A2                            Ani_obj08:
000158A2                            	include "_anim\obj08.asm"
000158A2                            ; ---------------------------------------------------------------------------
000158A2                            ; Animation script - water splash (LZ)
000158A2                            ; ---------------------------------------------------------------------------
000158A2 0000                       		dc.w byte_145C6-Ani_obj08
000158A4 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000158AA                            		even
000158AA                            		even
000158AA                            
000158AA                            ; ---------------------------------------------------------------------------
000158AA                            ; Sprite mappings - water splash (LZ)
000158AA                            ; ---------------------------------------------------------------------------
000158AA                            Map_obj08:
000158AA                            	include "_maps\obj08.asm"
000158AA                            ; ---------------------------------------------------------------------------
000158AA                            ; Sprite mappings - water splash (LZ)
000158AA                            ; ---------------------------------------------------------------------------
000158AA 0000                       		dc.w byte_145D2-Map_obj08
000158AC 0000                       		dc.w byte_145DD-Map_obj08
000158AE 0000                       		dc.w byte_145E8-Map_obj08
000158B0 02                         byte_145D2:	dc.b 2
000158B1 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000158B6 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000158BB 02                         byte_145DD:	dc.b 2
000158BC E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000158C1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000158C6 01                         byte_145E8:	dc.b 1
000158C7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000158CC                            		even
000158CC                            		even
000158CC                            
000158CC                            ; ---------------------------------------------------------------------------
000158CC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000158CC                            ; ---------------------------------------------------------------------------
000158CC                            
000158CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158CC                            
000158CC                            
000158CC                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000158CC 0828 0003 0022             		btst	#3,$22(a0)
000158D2 6700                       		beq.s	loc_14602
000158D4 7000                       		moveq	#0,d0
000158D6 11C0 F768                  		move.b	d0,($FFFFF768).w
000158DA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000158DE 4E75                       		rts	
000158E0                            ; ===========================================================================
000158E0                            
000158E0                            loc_14602:
000158E0 7003                       		moveq	#3,d0
000158E2 11C0 F768                  		move.b	d0,($FFFFF768).w
000158E6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000158EA 1028 0026                  		move.b	$26(a0),d0
000158EE 0600 0020                  		addi.b	#$20,d0
000158F2 6A00                       		bpl.s	loc_14624
000158F4 1028 0026                  		move.b	$26(a0),d0
000158F8 6A00                       		bpl.s	loc_1461E
000158FA 5300                       		subq.b	#1,d0
000158FC                            
000158FC                            loc_1461E:
000158FC 0600 0020                  		addi.b	#$20,d0
00015900 6000                       		bra.s	loc_14630
00015902                            ; ===========================================================================
00015902                            
00015902                            loc_14624:
00015902 1028 0026                  		move.b	$26(a0),d0
00015906 6A00                       		bpl.s	loc_1462C
00015908 5200                       		addq.b	#1,d0
0001590A                            
0001590A                            loc_1462C:
0001590A 0600 001F                  		addi.b	#$1F,d0
0001590E                            
0001590E                            loc_14630:
0001590E 0200 00C0                  		andi.b	#$C0,d0
00015912 0C00 0040                  		cmpi.b	#$40,d0
00015916 6700 0000                  		beq.w	Sonic_WalkVertL
0001591A 0C00 0080                  		cmpi.b	#$80,d0
0001591E 6700 0000                  		beq.w	Sonic_WalkCeiling
00015922 0C00 00C0                  		cmpi.b	#$C0,d0
00015926 6700 0000                  		beq.w	Sonic_WalkVertR
0001592A 3428 000C                  		move.w	$C(a0),d2
0001592E 3628 0008                  		move.w	8(a0),d3
00015932 7000                       		moveq	#0,d0
00015934 1028 0016                  		move.b	$16(a0),d0
00015938 4880                       		ext.w	d0
0001593A D440                       		add.w	d0,d2
0001593C 1028 0017                  		move.b	$17(a0),d0
00015940 4880                       		ext.w	d0
00015942 D640                       		add.w	d0,d3
00015944 49F8 F768                  		lea	($FFFFF768).w,a4
00015948 367C 0010                  		movea.w	#$10,a3
0001594C 3C3C 0000                  		move.w	#0,d6
00015950 7A0D                       		moveq	#$D,d5
00015952 6100 0000                  		bsr.w	FindFloor
00015956 3F01                       		move.w	d1,-(sp)
00015958 3428 000C                  		move.w	$C(a0),d2
0001595C 3628 0008                  		move.w	8(a0),d3
00015960 7000                       		moveq	#0,d0
00015962 1028 0016                  		move.b	$16(a0),d0
00015966 4880                       		ext.w	d0
00015968 D440                       		add.w	d0,d2
0001596A 1028 0017                  		move.b	$17(a0),d0
0001596E 4880                       		ext.w	d0
00015970 4440                       		neg.w	d0
00015972 D640                       		add.w	d0,d3
00015974 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015978 367C 0010                  		movea.w	#$10,a3
0001597C 3C3C 0000                  		move.w	#0,d6
00015980 7A0D                       		moveq	#$D,d5
00015982 6100 0000                  		bsr.w	FindFloor
00015986 301F                       		move.w	(sp)+,d0
00015988 6100 0000                  		bsr.w	Sonic_Angle
0001598C 4A41                       		tst.w	d1
0001598E 6700                       		beq.s	locret_146BE
00015990 6A00                       		bpl.s	loc_146C0
00015992 0C41 FFF2                  		cmpi.w	#-$E,d1
00015996 6D00                       		blt.s	locret_146E6
00015998 D368 000C                  		add.w	d1,$C(a0)
0001599C                            
0001599C                            locret_146BE:
0001599C 4E75                       		rts	
0001599E                            ; ===========================================================================
0001599E                            
0001599E                            loc_146C0:
0001599E 0C41 000E                  		cmpi.w	#$E,d1
000159A2 6E00                       		bgt.s	loc_146CC
000159A4                            
000159A4                            loc_146C6:
000159A4 D368 000C                  		add.w	d1,$C(a0)
000159A8 4E75                       		rts	
000159AA                            ; ===========================================================================
000159AA                            
000159AA                            loc_146CC:
000159AA 4A28 0038                  		tst.b	$38(a0)
000159AE 66F4                       		bne.s	loc_146C6
000159B0 08E8 0001 0022             		bset	#1,$22(a0)
000159B6 08A8 0005 0022             		bclr	#5,$22(a0)
000159BC 117C 0001 001D             		move.b	#1,$1D(a0)
000159C2 4E75                       		rts	
000159C4                            ; ===========================================================================
000159C4                            
000159C4                            locret_146E6:
000159C4 4E75                       		rts	
000159C6                            ; End of function Sonic_AnglePos
000159C6                            
000159C6                            ; ===========================================================================
000159C6 2428 0008                  		move.l	8(a0),d2
000159CA 3028 0010                  		move.w	$10(a0),d0
000159CE 48C0                       		ext.l	d0
000159D0 E180                       		asl.l	#8,d0
000159D2 9480                       		sub.l	d0,d2
000159D4 2142 0008                  		move.l	d2,8(a0)
000159D8 303C 0038                  		move.w	#$38,d0
000159DC 48C0                       		ext.l	d0
000159DE E180                       		asl.l	#8,d0
000159E0 9680                       		sub.l	d0,d3
000159E2 2143 000C                  		move.l	d3,$C(a0)
000159E6 4E75                       		rts	
000159E8                            ; ===========================================================================
000159E8                            
000159E8                            locret_1470A:
000159E8 4E75                       		rts	
000159EA                            ; ===========================================================================
000159EA 2628 000C                  		move.l	$C(a0),d3
000159EE 3028 0012                  		move.w	$12(a0),d0
000159F2 0440 0038                  		subi.w	#$38,d0
000159F6 3140 0012                  		move.w	d0,$12(a0)
000159FA 48C0                       		ext.l	d0
000159FC E180                       		asl.l	#8,d0
000159FE 9680                       		sub.l	d0,d3
00015A00 2143 000C                  		move.l	d3,$C(a0)
00015A04 4E75                       		rts	
00015A06 4E75                       		rts	
00015A08                            ; ===========================================================================
00015A08 2428 0008                  		move.l	8(a0),d2
00015A0C 2628 000C                  		move.l	$C(a0),d3
00015A10 3028 0010                  		move.w	$10(a0),d0
00015A14 48C0                       		ext.l	d0
00015A16 E180                       		asl.l	#8,d0
00015A18 9480                       		sub.l	d0,d2
00015A1A 3028 0012                  		move.w	$12(a0),d0
00015A1E 48C0                       		ext.l	d0
00015A20 E180                       		asl.l	#8,d0
00015A22 9680                       		sub.l	d0,d3
00015A24 2142 0008                  		move.l	d2,8(a0)
00015A28 2143 000C                  		move.l	d3,$C(a0)
00015A2C 4E75                       		rts	
00015A2E                            
00015A2E                            ; ---------------------------------------------------------------------------
00015A2E                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015A2E                            ; ---------------------------------------------------------------------------
00015A2E                            
00015A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A2E                            
00015A2E                            
00015A2E                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015A2E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015A32 B240                       		cmp.w	d0,d1
00015A34 6F00                       		ble.s	loc_1475E
00015A36 1438 F768                  		move.b	($FFFFF768).w,d2
00015A3A 3200                       		move.w	d0,d1
00015A3C                            
00015A3C                            loc_1475E:
00015A3C 0802 0000                  		btst	#0,d2
00015A40 6600                       		bne.s	loc_1476A
00015A42 1142 0026                  		move.b	d2,$26(a0)
00015A46 4E75                       		rts	
00015A48                            ; ===========================================================================
00015A48                            
00015A48                            loc_1476A:
00015A48 1428 0026                  		move.b	$26(a0),d2
00015A4C 0602 0020                  		addi.b	#$20,d2
00015A50 0202 00C0                  		andi.b	#$C0,d2
00015A54 1142 0026                  		move.b	d2,$26(a0)
00015A58 4E75                       		rts	
00015A5A                            ; End of function Sonic_Angle
00015A5A                            
00015A5A                            ; ---------------------------------------------------------------------------
00015A5A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015A5A                            ; ---------------------------------------------------------------------------
00015A5A                            
00015A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A5A                            
00015A5A                            
00015A5A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015A5A 3428 000C                  		move.w	$C(a0),d2
00015A5E 3628 0008                  		move.w	8(a0),d3
00015A62 7000                       		moveq	#0,d0
00015A64 1028 0017                  		move.b	$17(a0),d0
00015A68 4880                       		ext.w	d0
00015A6A 4440                       		neg.w	d0
00015A6C D440                       		add.w	d0,d2
00015A6E 1028 0016                  		move.b	$16(a0),d0
00015A72 4880                       		ext.w	d0
00015A74 D640                       		add.w	d0,d3
00015A76 49F8 F768                  		lea	($FFFFF768).w,a4
00015A7A 367C 0010                  		movea.w	#$10,a3
00015A7E 3C3C 0000                  		move.w	#0,d6
00015A82 7A0D                       		moveq	#$D,d5
00015A84 6100 0000                  		bsr.w	FindWall
00015A88 3F01                       		move.w	d1,-(sp)
00015A8A 3428 000C                  		move.w	$C(a0),d2
00015A8E 3628 0008                  		move.w	8(a0),d3
00015A92 7000                       		moveq	#0,d0
00015A94 1028 0017                  		move.b	$17(a0),d0
00015A98 4880                       		ext.w	d0
00015A9A D440                       		add.w	d0,d2
00015A9C 1028 0016                  		move.b	$16(a0),d0
00015AA0 4880                       		ext.w	d0
00015AA2 D640                       		add.w	d0,d3
00015AA4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015AA8 367C 0010                  		movea.w	#$10,a3
00015AAC 3C3C 0000                  		move.w	#0,d6
00015AB0 7A0D                       		moveq	#$D,d5
00015AB2 6100 0000                  		bsr.w	FindWall
00015AB6 301F                       		move.w	(sp)+,d0
00015AB8 6100 FF74                  		bsr.w	Sonic_Angle
00015ABC 4A41                       		tst.w	d1
00015ABE 6700                       		beq.s	locret_147F0
00015AC0 6A00                       		bpl.s	loc_147F2
00015AC2 0C41 FFF2                  		cmpi.w	#-$E,d1
00015AC6 6D00 FF20                  		blt.w	locret_1470A
00015ACA D368 0008                  		add.w	d1,8(a0)
00015ACE                            
00015ACE                            locret_147F0:
00015ACE 4E75                       		rts	
00015AD0                            ; ===========================================================================
00015AD0                            
00015AD0                            loc_147F2:
00015AD0 0C41 000E                  		cmpi.w	#$E,d1
00015AD4 6E00                       		bgt.s	loc_147FE
00015AD6                            
00015AD6                            loc_147F8:
00015AD6 D368 0008                  		add.w	d1,8(a0)
00015ADA 4E75                       		rts	
00015ADC                            ; ===========================================================================
00015ADC                            
00015ADC                            loc_147FE:
00015ADC 4A28 0038                  		tst.b	$38(a0)
00015AE0 66F4                       		bne.s	loc_147F8
00015AE2 08E8 0001 0022             		bset	#1,$22(a0)
00015AE8 08A8 0005 0022             		bclr	#5,$22(a0)
00015AEE 117C 0001 001D             		move.b	#1,$1D(a0)
00015AF4 4E75                       		rts	
00015AF6                            ; End of function Sonic_WalkVertR
00015AF6                            
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            ; Subroutine allowing Sonic to walk upside-down
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            
00015AF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF6                            
00015AF6                            
00015AF6                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015AF6 3428 000C                  		move.w	$C(a0),d2
00015AFA 3628 0008                  		move.w	8(a0),d3
00015AFE 7000                       		moveq	#0,d0
00015B00 1028 0016                  		move.b	$16(a0),d0
00015B04 4880                       		ext.w	d0
00015B06 9440                       		sub.w	d0,d2
00015B08 0A42 000F                  		eori.w	#$F,d2
00015B0C 1028 0017                  		move.b	$17(a0),d0
00015B10 4880                       		ext.w	d0
00015B12 D640                       		add.w	d0,d3
00015B14 49F8 F768                  		lea	($FFFFF768).w,a4
00015B18 367C FFF0                  		movea.w	#-$10,a3
00015B1C 3C3C 1000                  		move.w	#$1000,d6
00015B20 7A0D                       		moveq	#$D,d5
00015B22 6100 0000                  		bsr.w	FindFloor
00015B26 3F01                       		move.w	d1,-(sp)
00015B28 3428 000C                  		move.w	$C(a0),d2
00015B2C 3628 0008                  		move.w	8(a0),d3
00015B30 7000                       		moveq	#0,d0
00015B32 1028 0016                  		move.b	$16(a0),d0
00015B36 4880                       		ext.w	d0
00015B38 9440                       		sub.w	d0,d2
00015B3A 0A42 000F                  		eori.w	#$F,d2
00015B3E 1028 0017                  		move.b	$17(a0),d0
00015B42 4880                       		ext.w	d0
00015B44 9640                       		sub.w	d0,d3
00015B46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B4A 367C FFF0                  		movea.w	#-$10,a3
00015B4E 3C3C 1000                  		move.w	#$1000,d6
00015B52 7A0D                       		moveq	#$D,d5
00015B54 6100 0000                  		bsr.w	FindFloor
00015B58 301F                       		move.w	(sp)+,d0
00015B5A 6100 FED2                  		bsr.w	Sonic_Angle
00015B5E 4A41                       		tst.w	d1
00015B60 6700                       		beq.s	locret_14892
00015B62 6A00                       		bpl.s	loc_14894
00015B64 0C41 FFF2                  		cmpi.w	#-$E,d1
00015B68 6D00 FE5A                  		blt.w	locret_146E6
00015B6C 9368 000C                  		sub.w	d1,$C(a0)
00015B70                            
00015B70                            locret_14892:
00015B70 4E75                       		rts	
00015B72                            ; ===========================================================================
00015B72                            
00015B72                            loc_14894:
00015B72 0C41 000E                  		cmpi.w	#$E,d1
00015B76 6E00                       		bgt.s	loc_148A0
00015B78                            
00015B78                            loc_1489A:
00015B78 9368 000C                  		sub.w	d1,$C(a0)
00015B7C 4E75                       		rts	
00015B7E                            ; ===========================================================================
00015B7E                            
00015B7E                            loc_148A0:
00015B7E 4A28 0038                  		tst.b	$38(a0)
00015B82 66F4                       		bne.s	loc_1489A
00015B84 08E8 0001 0022             		bset	#1,$22(a0)
00015B8A 08A8 0005 0022             		bclr	#5,$22(a0)
00015B90 117C 0001 001D             		move.b	#1,$1D(a0)
00015B96 4E75                       		rts	
00015B98                            ; End of function Sonic_WalkCeiling
00015B98                            
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            
00015B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B98                            
00015B98                            
00015B98                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015B98 3428 000C                  		move.w	$C(a0),d2
00015B9C 3628 0008                  		move.w	8(a0),d3
00015BA0 7000                       		moveq	#0,d0
00015BA2 1028 0017                  		move.b	$17(a0),d0
00015BA6 4880                       		ext.w	d0
00015BA8 9440                       		sub.w	d0,d2
00015BAA 1028 0016                  		move.b	$16(a0),d0
00015BAE 4880                       		ext.w	d0
00015BB0 9640                       		sub.w	d0,d3
00015BB2 0A43 000F                  		eori.w	#$F,d3
00015BB6 49F8 F768                  		lea	($FFFFF768).w,a4
00015BBA 367C FFF0                  		movea.w	#-$10,a3
00015BBE 3C3C 0800                  		move.w	#$800,d6
00015BC2 7A0D                       		moveq	#$D,d5
00015BC4 6100 0000                  		bsr.w	FindWall
00015BC8 3F01                       		move.w	d1,-(sp)
00015BCA 3428 000C                  		move.w	$C(a0),d2
00015BCE 3628 0008                  		move.w	8(a0),d3
00015BD2 7000                       		moveq	#0,d0
00015BD4 1028 0017                  		move.b	$17(a0),d0
00015BD8 4880                       		ext.w	d0
00015BDA D440                       		add.w	d0,d2
00015BDC 1028 0016                  		move.b	$16(a0),d0
00015BE0 4880                       		ext.w	d0
00015BE2 9640                       		sub.w	d0,d3
00015BE4 0A43 000F                  		eori.w	#$F,d3
00015BE8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015BEC 367C FFF0                  		movea.w	#-$10,a3
00015BF0 3C3C 0800                  		move.w	#$800,d6
00015BF4 7A0D                       		moveq	#$D,d5
00015BF6 6100 0000                  		bsr.w	FindWall
00015BFA 301F                       		move.w	(sp)+,d0
00015BFC 6100 FE30                  		bsr.w	Sonic_Angle
00015C00 4A41                       		tst.w	d1
00015C02 6700                       		beq.s	locret_14934
00015C04 6A00                       		bpl.s	loc_14936
00015C06 0C41 FFF2                  		cmpi.w	#-$E,d1
00015C0A 6D00 FDDC                  		blt.w	locret_1470A
00015C0E 9368 0008                  		sub.w	d1,8(a0)
00015C12                            
00015C12                            locret_14934:
00015C12 4E75                       		rts	
00015C14                            ; ===========================================================================
00015C14                            
00015C14                            loc_14936:
00015C14 0C41 000E                  		cmpi.w	#$E,d1
00015C18 6E00                       		bgt.s	loc_14942
00015C1A                            
00015C1A                            loc_1493C:
00015C1A 9368 0008                  		sub.w	d1,8(a0)
00015C1E 4E75                       		rts	
00015C20                            ; ===========================================================================
00015C20                            
00015C20                            loc_14942:
00015C20 4A28 0038                  		tst.b	$38(a0)
00015C24 66F4                       		bne.s	loc_1493C
00015C26 08E8 0001 0022             		bset	#1,$22(a0)
00015C2C 08A8 0005 0022             		bclr	#5,$22(a0)
00015C32 117C 0001 001D             		move.b	#1,$1D(a0)
00015C38 4E75                       		rts	
00015C3A                            ; End of function Sonic_WalkVertL
00015C3A                            
00015C3A                            ; ---------------------------------------------------------------------------
00015C3A                            ; Subroutine to	find which tile	the object is standing on
00015C3A                            ; ---------------------------------------------------------------------------
00015C3A                            
00015C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C3A                            
00015C3A                            
00015C3A                            Floor_ChkTile:				; XREF: FindFloor; et al
00015C3A 3002                       		move.w	d2,d0
00015C3C E248                       		lsr.w	#1,d0
00015C3E 0240 0380                  		andi.w	#$380,d0
00015C42 3203                       		move.w	d3,d1
00015C44 E049                       		lsr.w	#8,d1
00015C46 0241 007F                  		andi.w	#$7F,d1
00015C4A D041                       		add.w	d1,d0
00015C4C 72FF                       		moveq	#-1,d1
00015C4E 43F8 A400                  		lea	($FFFFA400).w,a1
00015C52 1231 0000                  		move.b	(a1,d0.w),d1
00015C56 6700                       		beq.s	loc_14996
00015C58 6B00                       		bmi.s	loc_1499A
00015C5A 5301                       		subq.b	#1,d1
00015C5C 4881                       		ext.w	d1
00015C5E EE59                       		ror.w	#7,d1
00015C60 3002                       		move.w	d2,d0
00015C62 D040                       		add.w	d0,d0
00015C64 0240 01E0                  		andi.w	#$1E0,d0
00015C68 D240                       		add.w	d0,d1
00015C6A 3003                       		move.w	d3,d0
00015C6C E648                       		lsr.w	#3,d0
00015C6E 0240 001E                  		andi.w	#$1E,d0
00015C72 D240                       		add.w	d0,d1
00015C74                            
00015C74                            loc_14996:
00015C74 2241                       		movea.l	d1,a1
00015C76 4E75                       		rts	
00015C78                            ; ===========================================================================
00015C78                            
00015C78                            loc_1499A:
00015C78 0241 007F                  		andi.w	#$7F,d1
00015C7C 0828 0006 0001             		btst	#6,1(a0)
00015C82 6700                       		beq.s	loc_149B2
00015C84 5241                       		addq.w	#1,d1
00015C86 0C41 0029                  		cmpi.w	#$29,d1
00015C8A 6600                       		bne.s	loc_149B2
00015C8C 323C 0051                  		move.w	#$51,d1
00015C90                            
00015C90                            loc_149B2:
00015C90 5301                       		subq.b	#1,d1
00015C92 EE59                       		ror.w	#7,d1
00015C94 3002                       		move.w	d2,d0
00015C96 D040                       		add.w	d0,d0
00015C98 0240 01E0                  		andi.w	#$1E0,d0
00015C9C D240                       		add.w	d0,d1
00015C9E 3003                       		move.w	d3,d0
00015CA0 E648                       		lsr.w	#3,d0
00015CA2 0240 001E                  		andi.w	#$1E,d0
00015CA6 D240                       		add.w	d0,d1
00015CA8 2241                       		movea.l	d1,a1
00015CAA 4E75                       		rts	
00015CAC                            ; End of function Floor_ChkTile
00015CAC                            
00015CAC                            
00015CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CAC                            
00015CAC                            
00015CAC                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015CAC 618C                       		bsr.s	Floor_ChkTile
00015CAE 3011                       		move.w	(a1),d0
00015CB0 3800                       		move.w	d0,d4
00015CB2 0240 07FF                  		andi.w	#$7FF,d0
00015CB6 6700                       		beq.s	loc_149DE
00015CB8 0B04                       		btst	d5,d4
00015CBA 6600                       		bne.s	loc_149EC
00015CBC                            
00015CBC                            loc_149DE:
00015CBC D44B                       		add.w	a3,d2
00015CBE 6100 0000                  		bsr.w	FindFloor2
00015CC2 944B                       		sub.w	a3,d2
00015CC4 0641 0010                  		addi.w	#$10,d1
00015CC8 4E75                       		rts	
00015CCA                            ; ===========================================================================
00015CCA                            
00015CCA                            loc_149EC:
00015CCA 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015CCE 1032 0000                  		move.b	(a2,d0.w),d0
00015CD2 0240 00FF                  		andi.w	#$FF,d0
00015CD6 67E4                       		beq.s	loc_149DE
00015CD8 45F9 0000 0000             		lea	(AngleMap).l,a2
00015CDE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015CE2 E948                       		lsl.w	#4,d0
00015CE4 3203                       		move.w	d3,d1
00015CE6 0804 000B                  		btst	#$B,d4
00015CEA 6700                       		beq.s	loc_14A12
00015CEC 4641                       		not.w	d1
00015CEE 4414                       		neg.b	(a4)
00015CF0                            
00015CF0                            loc_14A12:
00015CF0 0804 000C                  		btst	#$C,d4
00015CF4 6700                       		beq.s	loc_14A22
00015CF6 0614 0040                  		addi.b	#$40,(a4)
00015CFA 4414                       		neg.b	(a4)
00015CFC 0414 0040                  		subi.b	#$40,(a4)
00015D00                            
00015D00                            loc_14A22:
00015D00 0241 000F                  		andi.w	#$F,d1
00015D04 D240                       		add.w	d0,d1
00015D06 45F9 0000 0000             		lea	(CollArray1).l,a2
00015D0C 1032 1000                  		move.b	(a2,d1.w),d0
00015D10 4880                       		ext.w	d0
00015D12 BD44                       		eor.w	d6,d4
00015D14 0804 000C                  		btst	#$C,d4
00015D18 6700                       		beq.s	loc_14A3E
00015D1A 4440                       		neg.w	d0
00015D1C                            
00015D1C                            loc_14A3E:
00015D1C 4A40                       		tst.w	d0
00015D1E 679C                       		beq.s	loc_149DE
00015D20 6B00                       		bmi.s	loc_14A5A
00015D22 0C00 0010                  		cmpi.b	#$10,d0
00015D26 6700                       		beq.s	loc_14A66
00015D28 3202                       		move.w	d2,d1
00015D2A 0241 000F                  		andi.w	#$F,d1
00015D2E D041                       		add.w	d1,d0
00015D30 323C 000F                  		move.w	#$F,d1
00015D34 9240                       		sub.w	d0,d1
00015D36 4E75                       		rts	
00015D38                            ; ===========================================================================
00015D38                            
00015D38                            loc_14A5A:
00015D38 3202                       		move.w	d2,d1
00015D3A 0241 000F                  		andi.w	#$F,d1
00015D3E D041                       		add.w	d1,d0
00015D40 6A00 FF7A                  		bpl.w	loc_149DE
00015D44                            
00015D44                            loc_14A66:
00015D44 944B                       		sub.w	a3,d2
00015D46 6100 0000                  		bsr.w	FindFloor2
00015D4A D44B                       		add.w	a3,d2
00015D4C 0441 0010                  		subi.w	#$10,d1
00015D50 4E75                       		rts	
00015D52                            ; End of function FindFloor
00015D52                            
00015D52                            
00015D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D52                            
00015D52                            
00015D52                            FindFloor2:				; XREF: FindFloor
00015D52 6100 FEE6                  		bsr.w	Floor_ChkTile
00015D56 3011                       		move.w	(a1),d0
00015D58 3800                       		move.w	d0,d4
00015D5A 0240 07FF                  		andi.w	#$7FF,d0
00015D5E 6700                       		beq.s	loc_14A86
00015D60 0B04                       		btst	d5,d4
00015D62 6600                       		bne.s	loc_14A94
00015D64                            
00015D64                            loc_14A86:
00015D64 323C 000F                  		move.w	#$F,d1
00015D68 3002                       		move.w	d2,d0
00015D6A 0240 000F                  		andi.w	#$F,d0
00015D6E 9240                       		sub.w	d0,d1
00015D70 4E75                       		rts	
00015D72                            ; ===========================================================================
00015D72                            
00015D72                            loc_14A94:
00015D72 2478 F796                  		movea.l	($FFFFF796).w,a2
00015D76 1032 0000                  		move.b	(a2,d0.w),d0
00015D7A 0240 00FF                  		andi.w	#$FF,d0
00015D7E 67E4                       		beq.s	loc_14A86
00015D80 45F9 0000 0000             		lea	(AngleMap).l,a2
00015D86 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015D8A E948                       		lsl.w	#4,d0
00015D8C 3203                       		move.w	d3,d1
00015D8E 0804 000B                  		btst	#$B,d4
00015D92 6700                       		beq.s	loc_14ABA
00015D94 4641                       		not.w	d1
00015D96 4414                       		neg.b	(a4)
00015D98                            
00015D98                            loc_14ABA:
00015D98 0804 000C                  		btst	#$C,d4
00015D9C 6700                       		beq.s	loc_14ACA
00015D9E 0614 0040                  		addi.b	#$40,(a4)
00015DA2 4414                       		neg.b	(a4)
00015DA4 0414 0040                  		subi.b	#$40,(a4)
00015DA8                            
00015DA8                            loc_14ACA:
00015DA8 0241 000F                  		andi.w	#$F,d1
00015DAC D240                       		add.w	d0,d1
00015DAE 45F9 0000 0000             		lea	(CollArray1).l,a2
00015DB4 1032 1000                  		move.b	(a2,d1.w),d0
00015DB8 4880                       		ext.w	d0
00015DBA BD44                       		eor.w	d6,d4
00015DBC 0804 000C                  		btst	#$C,d4
00015DC0 6700                       		beq.s	loc_14AE6
00015DC2 4440                       		neg.w	d0
00015DC4                            
00015DC4                            loc_14AE6:
00015DC4 4A40                       		tst.w	d0
00015DC6 679C                       		beq.s	loc_14A86
00015DC8 6B00                       		bmi.s	loc_14AFC
00015DCA 3202                       		move.w	d2,d1
00015DCC 0241 000F                  		andi.w	#$F,d1
00015DD0 D041                       		add.w	d1,d0
00015DD2 323C 000F                  		move.w	#$F,d1
00015DD6 9240                       		sub.w	d0,d1
00015DD8 4E75                       		rts	
00015DDA                            ; ===========================================================================
00015DDA                            
00015DDA                            loc_14AFC:
00015DDA 3202                       		move.w	d2,d1
00015DDC 0241 000F                  		andi.w	#$F,d1
00015DE0 D041                       		add.w	d1,d0
00015DE2 6A00 FF80                  		bpl.w	loc_14A86
00015DE6 4641                       		not.w	d1
00015DE8 4E75                       		rts	
00015DEA                            ; End of function FindFloor2
00015DEA                            
00015DEA                            
00015DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DEA                            
00015DEA                            
00015DEA                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015DEA 6100 FE4E                  		bsr.w	Floor_ChkTile
00015DEE 3011                       		move.w	(a1),d0
00015DF0 3800                       		move.w	d0,d4
00015DF2 0240 07FF                  		andi.w	#$7FF,d0
00015DF6 6700                       		beq.s	loc_14B1E
00015DF8 0B04                       		btst	d5,d4
00015DFA 6600                       		bne.s	loc_14B2C
00015DFC                            
00015DFC                            loc_14B1E:
00015DFC D64B                       		add.w	a3,d3
00015DFE 6100 0000                  		bsr.w	FindWall2
00015E02 964B                       		sub.w	a3,d3
00015E04 0641 0010                  		addi.w	#$10,d1
00015E08 4E75                       		rts	
00015E0A                            ; ===========================================================================
00015E0A                            
00015E0A                            loc_14B2C:
00015E0A 2478 F796                  		movea.l	($FFFFF796).w,a2
00015E0E 1032 0000                  		move.b	(a2,d0.w),d0
00015E12 0240 00FF                  		andi.w	#$FF,d0
00015E16 67E4                       		beq.s	loc_14B1E
00015E18 45F9 0000 0000             		lea	(AngleMap).l,a2
00015E1E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015E22 E948                       		lsl.w	#4,d0
00015E24 3202                       		move.w	d2,d1
00015E26 0804 000C                  		btst	#$C,d4
00015E2A 6700                       		beq.s	loc_14B5A
00015E2C 4641                       		not.w	d1
00015E2E 0614 0040                  		addi.b	#$40,(a4)
00015E32 4414                       		neg.b	(a4)
00015E34 0414 0040                  		subi.b	#$40,(a4)
00015E38                            
00015E38                            loc_14B5A:
00015E38 0804 000B                  		btst	#$B,d4
00015E3C 6700                       		beq.s	loc_14B62
00015E3E 4414                       		neg.b	(a4)
00015E40                            
00015E40                            loc_14B62:
00015E40 0241 000F                  		andi.w	#$F,d1
00015E44 D240                       		add.w	d0,d1
00015E46 45F9 0000 0000             		lea	(CollArray2).l,a2
00015E4C 1032 1000                  		move.b	(a2,d1.w),d0
00015E50 4880                       		ext.w	d0
00015E52 BD44                       		eor.w	d6,d4
00015E54 0804 000B                  		btst	#$B,d4
00015E58 6700                       		beq.s	loc_14B7E
00015E5A 4440                       		neg.w	d0
00015E5C                            
00015E5C                            loc_14B7E:
00015E5C 4A40                       		tst.w	d0
00015E5E 679C                       		beq.s	loc_14B1E
00015E60 6B00                       		bmi.s	loc_14B9A
00015E62 0C00 0010                  		cmpi.b	#$10,d0
00015E66 6700                       		beq.s	loc_14BA6
00015E68 3203                       		move.w	d3,d1
00015E6A 0241 000F                  		andi.w	#$F,d1
00015E6E D041                       		add.w	d1,d0
00015E70 323C 000F                  		move.w	#$F,d1
00015E74 9240                       		sub.w	d0,d1
00015E76 4E75                       		rts	
00015E78                            ; ===========================================================================
00015E78                            
00015E78                            loc_14B9A:
00015E78 3203                       		move.w	d3,d1
00015E7A 0241 000F                  		andi.w	#$F,d1
00015E7E D041                       		add.w	d1,d0
00015E80 6A00 FF7A                  		bpl.w	loc_14B1E
00015E84                            
00015E84                            loc_14BA6:
00015E84 964B                       		sub.w	a3,d3
00015E86 6100 0000                  		bsr.w	FindWall2
00015E8A D64B                       		add.w	a3,d3
00015E8C 0441 0010                  		subi.w	#$10,d1
00015E90 4E75                       		rts	
00015E92                            ; End of function FindWall
00015E92                            
00015E92                            
00015E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E92                            
00015E92                            
00015E92                            FindWall2:				; XREF: FindWall
00015E92 6100 FDA6                  		bsr.w	Floor_ChkTile
00015E96 3011                       		move.w	(a1),d0
00015E98 3800                       		move.w	d0,d4
00015E9A 0240 07FF                  		andi.w	#$7FF,d0
00015E9E 6700                       		beq.s	loc_14BC6
00015EA0 0B04                       		btst	d5,d4
00015EA2 6600                       		bne.s	loc_14BD4
00015EA4                            
00015EA4                            loc_14BC6:
00015EA4 323C 000F                  		move.w	#$F,d1
00015EA8 3003                       		move.w	d3,d0
00015EAA 0240 000F                  		andi.w	#$F,d0
00015EAE 9240                       		sub.w	d0,d1
00015EB0 4E75                       		rts	
00015EB2                            ; ===========================================================================
00015EB2                            
00015EB2                            loc_14BD4:
00015EB2 2478 F796                  		movea.l	($FFFFF796).w,a2
00015EB6 1032 0000                  		move.b	(a2,d0.w),d0
00015EBA 0240 00FF                  		andi.w	#$FF,d0
00015EBE 67E4                       		beq.s	loc_14BC6
00015EC0 45F9 0000 0000             		lea	(AngleMap).l,a2
00015EC6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015ECA E948                       		lsl.w	#4,d0
00015ECC 3202                       		move.w	d2,d1
00015ECE 0804 000C                  		btst	#$C,d4
00015ED2 6700                       		beq.s	loc_14C02
00015ED4 4641                       		not.w	d1
00015ED6 0614 0040                  		addi.b	#$40,(a4)
00015EDA 4414                       		neg.b	(a4)
00015EDC 0414 0040                  		subi.b	#$40,(a4)
00015EE0                            
00015EE0                            loc_14C02:
00015EE0 0804 000B                  		btst	#$B,d4
00015EE4 6700                       		beq.s	loc_14C0A
00015EE6 4414                       		neg.b	(a4)
00015EE8                            
00015EE8                            loc_14C0A:
00015EE8 0241 000F                  		andi.w	#$F,d1
00015EEC D240                       		add.w	d0,d1
00015EEE 45F9 0000 0000             		lea	(CollArray2).l,a2
00015EF4 1032 1000                  		move.b	(a2,d1.w),d0
00015EF8 4880                       		ext.w	d0
00015EFA BD44                       		eor.w	d6,d4
00015EFC 0804 000B                  		btst	#$B,d4
00015F00 6700                       		beq.s	loc_14C26
00015F02 4440                       		neg.w	d0
00015F04                            
00015F04                            loc_14C26:
00015F04 4A40                       		tst.w	d0
00015F06 679C                       		beq.s	loc_14BC6
00015F08 6B00                       		bmi.s	loc_14C3C
00015F0A 3203                       		move.w	d3,d1
00015F0C 0241 000F                  		andi.w	#$F,d1
00015F10 D041                       		add.w	d1,d0
00015F12 323C 000F                  		move.w	#$F,d1
00015F16 9240                       		sub.w	d0,d1
00015F18 4E75                       		rts	
00015F1A                            ; ===========================================================================
00015F1A                            
00015F1A                            loc_14C3C:
00015F1A 3203                       		move.w	d3,d1
00015F1C 0241 000F                  		andi.w	#$F,d1
00015F20 D041                       		add.w	d1,d0
00015F22 6A00 FF80                  		bpl.w	loc_14BC6
00015F26 4641                       		not.w	d1
00015F28 4E75                       		rts	
00015F2A                            ; End of function FindWall2
00015F2A                            
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            ; Unused floor/wall subroutine - logs something	to do with collision
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            
00015F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F2A                            
00015F2A                            
00015F2A                            FloorLog_Unk:				; XREF: Level
00015F2A 4E75                       		rts	
00015F2C                            
00015F2C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015F32 45F9 0000 0000             		lea	(CollArray1).l,a2
00015F38 363C 00FF                  		move.w	#$FF,d3
00015F3C                            
00015F3C                            loc_14C5E:
00015F3C 7A10                       		moveq	#$10,d5
00015F3E 343C 000F                  		move.w	#$F,d2
00015F42                            
00015F42                            loc_14C64:
00015F42 7800                       		moveq	#0,d4
00015F44 323C 000F                  		move.w	#$F,d1
00015F48                            
00015F48                            loc_14C6A:
00015F48 3019                       		move.w	(a1)+,d0
00015F4A EAA8                       		lsr.l	d5,d0
00015F4C D944                       		addx.w	d4,d4
00015F4E 51C9 FFF8                  		dbf	d1,loc_14C6A
00015F52                            
00015F52 34C4                       		move.w	d4,(a2)+
00015F54 92FC 0020                  		suba.w	#$20,a1
00015F58 5345                       		subq.w	#1,d5
00015F5A 51CA FFE6                  		dbf	d2,loc_14C64
00015F5E                            
00015F5E D2FC 0020                  		adda.w	#$20,a1
00015F62 51CB FFD8                  		dbf	d3,loc_14C5E
00015F66                            
00015F66 43F9 0000 0000             		lea	(CollArray1).l,a1
00015F6C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015F72 6100                       		bsr.s	FloorLog_Unk2
00015F74 43F9 0000 0000             		lea	(CollArray1).l,a1
00015F7A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015F80                            
00015F80                            ; End of function FloorLog_Unk
00015F80                            
00015F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F80                            
00015F80                            
00015F80                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015F80 363C 0FFF                  		move.w	#$FFF,d3
00015F84                            
00015F84                            loc_14CA6:
00015F84 7400                       		moveq	#0,d2
00015F86 323C 000F                  		move.w	#$F,d1
00015F8A 3019                       		move.w	(a1)+,d0
00015F8C 6700                       		beq.s	loc_14CD4
00015F8E 6B00                       		bmi.s	loc_14CBE
00015F90                            
00015F90                            loc_14CB2:
00015F90 E248                       		lsr.w	#1,d0
00015F92 6400                       		bcc.s	loc_14CB8
00015F94 5202                       		addq.b	#1,d2
00015F96                            
00015F96                            loc_14CB8:
00015F96 51C9 FFF8                  		dbf	d1,loc_14CB2
00015F9A                            
00015F9A 6000                       		bra.s	loc_14CD6
00015F9C                            ; ===========================================================================
00015F9C                            
00015F9C                            loc_14CBE:
00015F9C 0C40 FFFF                  		cmpi.w	#-1,d0
00015FA0 6700                       		beq.s	loc_14CD0
00015FA2                            
00015FA2                            loc_14CC4:
00015FA2 E348                       		lsl.w	#1,d0
00015FA4 6400                       		bcc.s	loc_14CCA
00015FA6 5302                       		subq.b	#1,d2
00015FA8                            
00015FA8                            loc_14CCA:
00015FA8 51C9 FFF8                  		dbf	d1,loc_14CC4
00015FAC                            
00015FAC 6000                       		bra.s	loc_14CD6
00015FAE                            ; ===========================================================================
00015FAE                            
00015FAE                            loc_14CD0:
00015FAE 303C 0010                  		move.w	#$10,d0
00015FB2                            
00015FB2                            loc_14CD4:
00015FB2 3400                       		move.w	d0,d2
00015FB4                            
00015FB4                            loc_14CD6:
00015FB4 14C2                       		move.b	d2,(a2)+
00015FB6 51CB FFCC                  		dbf	d3,loc_14CA6
00015FBA                            
00015FBA 4E75                       		rts	
00015FBC                            
00015FBC                            ; End of function FloorLog_Unk2
00015FBC                            
00015FBC                            
00015FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBC                            
00015FBC                            
00015FBC                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015FBC 2628 0008                  		move.l	8(a0),d3
00015FC0 2428 000C                  		move.l	$C(a0),d2
00015FC4 3228 0010                  		move.w	$10(a0),d1
00015FC8 48C1                       		ext.l	d1
00015FCA E181                       		asl.l	#8,d1
00015FCC D681                       		add.l	d1,d3
00015FCE 3228 0012                  		move.w	$12(a0),d1
00015FD2 48C1                       		ext.l	d1
00015FD4 E181                       		asl.l	#8,d1
00015FD6 D481                       		add.l	d1,d2
00015FD8 4842                       		swap	d2
00015FDA 4843                       		swap	d3
00015FDC 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FE0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FE4 1200                       		move.b	d0,d1
00015FE6 0600 0020                  		addi.b	#$20,d0
00015FEA 6A00                       		bpl.s	loc_14D1A
00015FEC 1001                       		move.b	d1,d0
00015FEE 6A00                       		bpl.s	loc_14D14
00015FF0 5300                       		subq.b	#1,d0
00015FF2                            
00015FF2                            loc_14D14:
00015FF2 0600 0020                  		addi.b	#$20,d0
00015FF6 6000                       		bra.s	loc_14D24
00015FF8                            ; ===========================================================================
00015FF8                            
00015FF8                            loc_14D1A:
00015FF8 1001                       		move.b	d1,d0
00015FFA 6A00                       		bpl.s	loc_14D20
00015FFC 5200                       		addq.b	#1,d0
00015FFE                            
00015FFE                            loc_14D20:
00015FFE 0600 001F                  		addi.b	#$1F,d0
00016002                            
00016002                            loc_14D24:
00016002 0200 00C0                  		andi.b	#$C0,d0
00016006 6700 0000                  		beq.w	loc_14DF0
0001600A 0C00 0080                  		cmpi.b	#$80,d0
0001600E 6700 0000                  		beq.w	loc_14F7C
00016012 0201 0038                  		andi.b	#$38,d1
00016016 6600                       		bne.s	loc_14D3C
00016018 5042                       		addq.w	#8,d2
0001601A                            
0001601A                            loc_14D3C:
0001601A 0C00 0040                  		cmpi.b	#$40,d0
0001601E 6700 0000                  		beq.w	loc_1504A
00016022 6000 0000                  		bra.w	loc_14EBC
00016026                            
00016026                            ; End of function Sonic_WalkSpeed
00016026                            
00016026                            
00016026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016026                            
00016026                            
00016026                            sub_14D48:				; XREF: Sonic_Jump
00016026 11C0 F768                  		move.b	d0,($FFFFF768).w
0001602A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001602E 0600 0020                  		addi.b	#$20,d0
00016032 0200 00C0                  		andi.b	#$C0,d0
00016036 0C00 0040                  		cmpi.b	#$40,d0
0001603A 6700 0000                  		beq.w	loc_14FD6
0001603E 0C00 0080                  		cmpi.b	#$80,d0
00016042 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016046 0C00 00C0                  		cmpi.b	#$C0,d0
0001604A 6700 0000                  		beq.w	sub_14E50
0001604E                            
0001604E                            ; End of function sub_14D48
0001604E                            
0001604E                            ; ---------------------------------------------------------------------------
0001604E                            ; Subroutine to	make Sonic land	on the floor after jumping
0001604E                            ; ---------------------------------------------------------------------------
0001604E                            
0001604E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001604E                            
0001604E                            
0001604E                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001604E 3428 000C                  		move.w	$C(a0),d2
00016052 3628 0008                  		move.w	8(a0),d3
00016056 7000                       		moveq	#0,d0
00016058 1028 0016                  		move.b	$16(a0),d0
0001605C 4880                       		ext.w	d0
0001605E D440                       		add.w	d0,d2
00016060 1028 0017                  		move.b	$17(a0),d0
00016064 4880                       		ext.w	d0
00016066 D640                       		add.w	d0,d3
00016068 49F8 F768                  		lea	($FFFFF768).w,a4
0001606C 367C 0010                  		movea.w	#$10,a3
00016070 3C3C 0000                  		move.w	#0,d6
00016074 7A0D                       		moveq	#$D,d5
00016076 6100 FC34                  		bsr.w	FindFloor
0001607A 3F01                       		move.w	d1,-(sp)
0001607C 3428 000C                  		move.w	$C(a0),d2
00016080 3628 0008                  		move.w	8(a0),d3
00016084 7000                       		moveq	#0,d0
00016086 1028 0016                  		move.b	$16(a0),d0
0001608A 4880                       		ext.w	d0
0001608C D440                       		add.w	d0,d2
0001608E 1028 0017                  		move.b	$17(a0),d0
00016092 4880                       		ext.w	d0
00016094 9640                       		sub.w	d0,d3
00016096 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001609A 367C 0010                  		movea.w	#$10,a3
0001609E 3C3C 0000                  		move.w	#0,d6
000160A2 7A0D                       		moveq	#$D,d5
000160A4 6100 FC06                  		bsr.w	FindFloor
000160A8 301F                       		move.w	(sp)+,d0
000160AA 143C 0000                  		move.b	#0,d2
000160AE                            
000160AE                            loc_14DD0:
000160AE 1638 F76A                  		move.b	($FFFFF76A).w,d3
000160B2 B240                       		cmp.w	d0,d1
000160B4 6F00                       		ble.s	loc_14DDE
000160B6 1638 F768                  		move.b	($FFFFF768).w,d3
000160BA C141                       		exg	d0,d1
000160BC                            
000160BC                            loc_14DDE:
000160BC 0803 0000                  		btst	#0,d3
000160C0 6700                       		beq.s	locret_14DE6
000160C2 1602                       		move.b	d2,d3
000160C4                            
000160C4                            locret_14DE6:
000160C4 4E75                       		rts	
000160C6                            
000160C6                            ; End of function Sonic_HitFloor
000160C6                            
000160C6                            ; ===========================================================================
000160C6 3428 000C                  		move.w	$C(a0),d2
000160CA 3628 0008                  		move.w	8(a0),d3
000160CE                            
000160CE                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000160CE 0642 000A                  		addi.w	#$A,d2
000160D2 49F8 F768                  		lea	($FFFFF768).w,a4
000160D6 367C 0010                  		movea.w	#$10,a3
000160DA 3C3C 0000                  		move.w	#0,d6
000160DE 7A0E                       		moveq	#$E,d5
000160E0 6100 FBCA                  		bsr.w	FindFloor
000160E4 143C 0000                  		move.b	#0,d2
000160E8                            
000160E8                            loc_14E0A:				; XREF: sub_14EB4
000160E8 1638 F768                  		move.b	($FFFFF768).w,d3
000160EC 0803 0000                  		btst	#0,d3
000160F0 6700                       		beq.s	locret_14E16
000160F2 1602                       		move.b	d2,d3
000160F4                            
000160F4                            locret_14E16:
000160F4 4E75                       		rts	
000160F6                            
000160F6                            ; ---------------------------------------------------------------------------
000160F6                            ; Subroutine allowing objects to interact with the floor
000160F6                            ; ---------------------------------------------------------------------------
000160F6                            
000160F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160F6                            
000160F6                            
000160F6                            ObjHitFloor:
000160F6 3628 0008                  		move.w	8(a0),d3
000160FA                            
000160FA                            ; End of function ObjHitFloor
000160FA                            
000160FA                            
000160FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160FA                            
000160FA                            
000160FA                            ObjHitFloor2:
000160FA 3428 000C                  		move.w	$C(a0),d2
000160FE 7000                       		moveq	#0,d0
00016100 1028 0016                  		move.b	$16(a0),d0
00016104 4880                       		ext.w	d0
00016106 D440                       		add.w	d0,d2
00016108 49F8 F768                  		lea	($FFFFF768).w,a4
0001610C 18BC 0000                  		move.b	#0,(a4)
00016110 367C 0010                  		movea.w	#$10,a3
00016114 3C3C 0000                  		move.w	#0,d6
00016118 7A0D                       		moveq	#$D,d5
0001611A 6100 FB90                  		bsr.w	FindFloor
0001611E 1638 F768                  		move.b	($FFFFF768).w,d3
00016122 0803 0000                  		btst	#0,d3
00016126 6700                       		beq.s	locret_14E4E
00016128 163C 0000                  		move.b	#0,d3
0001612C                            
0001612C                            locret_14E4E:
0001612C 4E75                       		rts	
0001612E                            ; End of function ObjHitFloor2
0001612E                            
0001612E                            
0001612E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001612E                            
0001612E                            
0001612E                            sub_14E50:				; XREF: sub_14D48
0001612E 3428 000C                  		move.w	$C(a0),d2
00016132 3628 0008                  		move.w	8(a0),d3
00016136 7000                       		moveq	#0,d0
00016138 1028 0017                  		move.b	$17(a0),d0
0001613C 4880                       		ext.w	d0
0001613E 9440                       		sub.w	d0,d2
00016140 1028 0016                  		move.b	$16(a0),d0
00016144 4880                       		ext.w	d0
00016146 D640                       		add.w	d0,d3
00016148 49F8 F768                  		lea	($FFFFF768).w,a4
0001614C 367C 0010                  		movea.w	#$10,a3
00016150 3C3C 0000                  		move.w	#0,d6
00016154 7A0E                       		moveq	#$E,d5
00016156 6100 FC92                  		bsr.w	FindWall
0001615A 3F01                       		move.w	d1,-(sp)
0001615C 3428 000C                  		move.w	$C(a0),d2
00016160 3628 0008                  		move.w	8(a0),d3
00016164 7000                       		moveq	#0,d0
00016166 1028 0017                  		move.b	$17(a0),d0
0001616A 4880                       		ext.w	d0
0001616C D440                       		add.w	d0,d2
0001616E 1028 0016                  		move.b	$16(a0),d0
00016172 4880                       		ext.w	d0
00016174 D640                       		add.w	d0,d3
00016176 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001617A 367C 0010                  		movea.w	#$10,a3
0001617E 3C3C 0000                  		move.w	#0,d6
00016182 7A0E                       		moveq	#$E,d5
00016184 6100 FC64                  		bsr.w	FindWall
00016188 301F                       		move.w	(sp)+,d0
0001618A 143C 00C0                  		move.b	#-$40,d2
0001618E 6000 FF1E                  		bra.w	loc_14DD0
00016192                            
00016192                            ; End of function sub_14E50
00016192                            
00016192                            
00016192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016192                            
00016192                            
00016192                            sub_14EB4:				; XREF: Sonic_Floor
00016192 3428 000C                  		move.w	$C(a0),d2
00016196 3628 0008                  		move.w	8(a0),d3
0001619A                            
0001619A                            loc_14EBC:
0001619A 0643 000A                  		addi.w	#$A,d3
0001619E 49F8 F768                  		lea	($FFFFF768).w,a4
000161A2 367C 0010                  		movea.w	#$10,a3
000161A6 3C3C 0000                  		move.w	#0,d6
000161AA 7A0E                       		moveq	#$E,d5
000161AC 6100 FC3C                  		bsr.w	FindWall
000161B0 143C 00C0                  		move.b	#-$40,d2
000161B4 6000 FF32                  		bra.w	loc_14E0A
000161B8                            
000161B8                            ; End of function sub_14EB4
000161B8                            
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            ; Subroutine to	detect when an object hits a wall to its right
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            
000161B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161B8                            
000161B8                            
000161B8                            ObjHitWallRight:
000161B8 D668 0008                  		add.w	8(a0),d3
000161BC 3428 000C                  		move.w	$C(a0),d2
000161C0 49F8 F768                  		lea	($FFFFF768).w,a4
000161C4 18BC 0000                  		move.b	#0,(a4)
000161C8 367C 0010                  		movea.w	#$10,a3
000161CC 3C3C 0000                  		move.w	#0,d6
000161D0 7A0E                       		moveq	#$E,d5
000161D2 6100 FC16                  		bsr.w	FindWall
000161D6 1638 F768                  		move.b	($FFFFF768).w,d3
000161DA 0803 0000                  		btst	#0,d3
000161DE 6700                       		beq.s	locret_14F06
000161E0 163C 00C0                  		move.b	#-$40,d3
000161E4                            
000161E4                            locret_14F06:
000161E4 4E75                       		rts	
000161E6                            
000161E6                            ; End of function ObjHitWallRight
000161E6                            
000161E6                            ; ---------------------------------------------------------------------------
000161E6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000161E6                            ; touches them
000161E6                            ; ---------------------------------------------------------------------------
000161E6                            
000161E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161E6                            
000161E6                            
000161E6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000161E6 3428 000C                  		move.w	$C(a0),d2
000161EA 3628 0008                  		move.w	8(a0),d3
000161EE 7000                       		moveq	#0,d0
000161F0 1028 0016                  		move.b	$16(a0),d0
000161F4 4880                       		ext.w	d0
000161F6 9440                       		sub.w	d0,d2
000161F8 0A42 000F                  		eori.w	#$F,d2
000161FC 1028 0017                  		move.b	$17(a0),d0
00016200 4880                       		ext.w	d0
00016202 D640                       		add.w	d0,d3
00016204 49F8 F768                  		lea	($FFFFF768).w,a4
00016208 367C FFF0                  		movea.w	#-$10,a3
0001620C 3C3C 1000                  		move.w	#$1000,d6
00016210 7A0E                       		moveq	#$E,d5
00016212 6100 FA98                  		bsr.w	FindFloor
00016216 3F01                       		move.w	d1,-(sp)
00016218 3428 000C                  		move.w	$C(a0),d2
0001621C 3628 0008                  		move.w	8(a0),d3
00016220 7000                       		moveq	#0,d0
00016222 1028 0016                  		move.b	$16(a0),d0
00016226 4880                       		ext.w	d0
00016228 9440                       		sub.w	d0,d2
0001622A 0A42 000F                  		eori.w	#$F,d2
0001622E 1028 0017                  		move.b	$17(a0),d0
00016232 4880                       		ext.w	d0
00016234 9640                       		sub.w	d0,d3
00016236 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001623A 367C FFF0                  		movea.w	#-$10,a3
0001623E 3C3C 1000                  		move.w	#$1000,d6
00016242 7A0E                       		moveq	#$E,d5
00016244 6100 FA66                  		bsr.w	FindFloor
00016248 301F                       		move.w	(sp)+,d0
0001624A 143C 0080                  		move.b	#-$80,d2
0001624E 6000 FE5E                  		bra.w	loc_14DD0
00016252                            ; End of function Sonic_DontRunOnWalls
00016252                            
00016252                            ; ===========================================================================
00016252 3428 000C                  		move.w	$C(a0),d2
00016256 3628 0008                  		move.w	8(a0),d3
0001625A                            
0001625A                            loc_14F7C:
0001625A 0442 000A                  		subi.w	#$A,d2
0001625E 0A42 000F                  		eori.w	#$F,d2
00016262 49F8 F768                  		lea	($FFFFF768).w,a4
00016266 367C FFF0                  		movea.w	#-$10,a3
0001626A 3C3C 1000                  		move.w	#$1000,d6
0001626E 7A0E                       		moveq	#$E,d5
00016270 6100 FA3A                  		bsr.w	FindFloor
00016274 143C 0080                  		move.b	#-$80,d2
00016278 6000 FE6E                  		bra.w	loc_14E0A
0001627C                            
0001627C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001627C                            
0001627C                            
0001627C                            ObjHitCeiling:
0001627C 3428 000C                  		move.w	$C(a0),d2
00016280 3628 0008                  		move.w	8(a0),d3
00016284 7000                       		moveq	#0,d0
00016286 1028 0016                  		move.b	$16(a0),d0
0001628A 4880                       		ext.w	d0
0001628C 9440                       		sub.w	d0,d2
0001628E 0A42 000F                  		eori.w	#$F,d2
00016292 49F8 F768                  		lea	($FFFFF768).w,a4
00016296 367C FFF0                  		movea.w	#-$10,a3
0001629A 3C3C 1000                  		move.w	#$1000,d6
0001629E 7A0E                       		moveq	#$E,d5
000162A0 6100 FA0A                  		bsr.w	FindFloor
000162A4 1638 F768                  		move.b	($FFFFF768).w,d3
000162A8 0803 0000                  		btst	#0,d3
000162AC 6700                       		beq.s	locret_14FD4
000162AE 163C 0080                  		move.b	#-$80,d3
000162B2                            
000162B2                            locret_14FD4:
000162B2 4E75                       		rts	
000162B4                            ; End of function ObjHitCeiling
000162B4                            
000162B4                            ; ===========================================================================
000162B4                            
000162B4                            loc_14FD6:				; XREF: sub_14D48
000162B4 3428 000C                  		move.w	$C(a0),d2
000162B8 3628 0008                  		move.w	8(a0),d3
000162BC 7000                       		moveq	#0,d0
000162BE 1028 0017                  		move.b	$17(a0),d0
000162C2 4880                       		ext.w	d0
000162C4 9440                       		sub.w	d0,d2
000162C6 1028 0016                  		move.b	$16(a0),d0
000162CA 4880                       		ext.w	d0
000162CC 9640                       		sub.w	d0,d3
000162CE 0A43 000F                  		eori.w	#$F,d3
000162D2 49F8 F768                  		lea	($FFFFF768).w,a4
000162D6 367C FFF0                  		movea.w	#-$10,a3
000162DA 3C3C 0800                  		move.w	#$800,d6
000162DE 7A0E                       		moveq	#$E,d5
000162E0 6100 FB08                  		bsr.w	FindWall
000162E4 3F01                       		move.w	d1,-(sp)
000162E6 3428 000C                  		move.w	$C(a0),d2
000162EA 3628 0008                  		move.w	8(a0),d3
000162EE 7000                       		moveq	#0,d0
000162F0 1028 0017                  		move.b	$17(a0),d0
000162F4 4880                       		ext.w	d0
000162F6 D440                       		add.w	d0,d2
000162F8 1028 0016                  		move.b	$16(a0),d0
000162FC 4880                       		ext.w	d0
000162FE 9640                       		sub.w	d0,d3
00016300 0A43 000F                  		eori.w	#$F,d3
00016304 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016308 367C FFF0                  		movea.w	#-$10,a3
0001630C 3C3C 0800                  		move.w	#$800,d6
00016310 7A0E                       		moveq	#$E,d5
00016312 6100 FAD6                  		bsr.w	FindWall
00016316 301F                       		move.w	(sp)+,d0
00016318 143C 0040                  		move.b	#$40,d2
0001631C 6000 FD90                  		bra.w	loc_14DD0
00016320                            
00016320                            ; ---------------------------------------------------------------------------
00016320                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016320                            ; ---------------------------------------------------------------------------
00016320                            
00016320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016320                            
00016320                            
00016320                            Sonic_HitWall:				; XREF: Sonic_Floor
00016320 3428 000C                  		move.w	$C(a0),d2
00016324 3628 0008                  		move.w	8(a0),d3
00016328                            
00016328                            loc_1504A:
00016328 0443 000A                  		subi.w	#$A,d3
0001632C 0A43 000F                  		eori.w	#$F,d3
00016330 49F8 F768                  		lea	($FFFFF768).w,a4
00016334 367C FFF0                  		movea.w	#-$10,a3
00016338 3C3C 0800                  		move.w	#$800,d6
0001633C 7A0E                       		moveq	#$E,d5
0001633E 6100 FAAA                  		bsr.w	FindWall
00016342 143C 0040                  		move.b	#$40,d2
00016346 6000 FDA0                  		bra.w	loc_14E0A
0001634A                            ; End of function Sonic_HitWall
0001634A                            
0001634A                            ; ---------------------------------------------------------------------------
0001634A                            ; Subroutine to	detect when an object hits a wall to its left
0001634A                            ; ---------------------------------------------------------------------------
0001634A                            
0001634A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001634A                            
0001634A                            
0001634A                            ObjHitWallLeft:
0001634A D668 0008                  		add.w	8(a0),d3
0001634E 3428 000C                  		move.w	$C(a0),d2
00016352 49F8 F768                  		lea	($FFFFF768).w,a4
00016356 18BC 0000                  		move.b	#0,(a4)
0001635A 367C FFF0                  		movea.w	#-$10,a3
0001635E 3C3C 0800                  		move.w	#$800,d6
00016362 7A0E                       		moveq	#$E,d5
00016364 6100 FA84                  		bsr.w	FindWall
00016368 1638 F768                  		move.b	($FFFFF768).w,d3
0001636C 0803 0000                  		btst	#0,d3
00016370 6700                       		beq.s	locret_15098
00016372 163C 0040                  		move.b	#$40,d3
00016376                            
00016376                            locret_15098:
00016376 4E75                       		rts	
00016378                            ; End of function ObjHitWallLeft
00016378                            
00016378                            ; ===========================================================================
00016378                            ; ---------------------------------------------------------------------------
00016378                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016378                            ; ---------------------------------------------------------------------------
00016378                            
00016378                            Obj66:					; XREF: Obj_Index
00016378 7000                       		moveq	#0,d0
0001637A 1028 0024                  		move.b	$24(a0),d0
0001637E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016382 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016386                            ; ===========================================================================
00016386 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016388 0000                       		dc.w Obj66_Action-Obj66_Index
0001638A 0000                       		dc.w Obj66_Display-Obj66_Index
0001638C 0000                       		dc.w Obj66_Release-Obj66_Index
0001638E                            ; ===========================================================================
0001638E                            
0001638E                            Obj66_Main:				; XREF: Obj66_Index
0001638E 5428 0024                  		addq.b	#2,$24(a0)
00016392 323C 0001                  		move.w	#1,d1
00016396 2248                       		movea.l	a0,a1
00016398 6000                       		bra.s	Obj66_MakeItem
0001639A                            ; ===========================================================================
0001639A                            
0001639A                            Obj66_Loop:
0001639A 6100 88CE                  		bsr.w	SingleObjLoad
0001639E 6600                       		bne.s	loc_150FE
000163A0 12BC 0066                  		move.b	#$66,0(a1)
000163A4 5829 0024                  		addq.b	#4,$24(a1)
000163A8 3368 0008 0008             		move.w	8(a0),8(a1)
000163AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000163B4 137C 0003 0018             		move.b	#3,$18(a1)
000163BA 137C 0010 001A             		move.b	#$10,$1A(a1)
000163C0                            
000163C0                            Obj66_MakeItem:				; XREF: Obj66_Main
000163C0 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000163C8 337C 4348 0002             		move.w	#$4348,2(a1)
000163CE 0029 0004 0001             		ori.b	#4,1(a1)
000163D4 137C 0038 0019             		move.b	#$38,$19(a1)
000163DA                            
000163DA                            loc_150FE:
000163DA 51C9 FFBE                  		dbf	d1,Obj66_Loop
000163DE                            
000163DE 117C 0030 0019             		move.b	#$30,$19(a0)
000163E4 117C 0004 0018             		move.b	#4,$18(a0)
000163EA 317C 003C 0030             		move.w	#$3C,$30(a0)
000163F0 117C 0001 0034             		move.b	#1,$34(a0)
000163F6 1168 0028 0038             		move.b	$28(a0),$38(a0)
000163FC                            
000163FC                            Obj66_Action:				; XREF: Obj66_Index
000163FC 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016400 4A28 0001                  		tst.b	1(a0)
00016404 6A00 0000                  		bpl.w	Obj66_Display
00016408 323C 0030                  		move.w	#$30,d1
0001640C 3401                       		move.w	d1,d2
0001640E 3602                       		move.w	d2,d3
00016410 5243                       		addq.w	#1,d3
00016412 3828 0008                  		move.w	8(a0),d4
00016416 6100 A79C                  		bsr.w	SolidObject
0001641A 0828 0005 0022             		btst	#5,$22(a0)
00016420 6700 0000                  		beq.w	Obj66_Display
00016424 43F8 D000                  		lea	($FFFFD000).w,a1
00016428 720E                       		moveq	#$E,d1
0001642A 3029 0008                  		move.w	8(a1),d0
0001642E B068 0008                  		cmp.w	8(a0),d0
00016432 6500                       		bcs.s	Obj66_GrabSonic
00016434 7207                       		moveq	#7,d1
00016436                            
00016436                            Obj66_GrabSonic:
00016436 B228 001A                  		cmp.b	$1A(a0),d1
0001643A 6600                       		bne.s	Obj66_Display
0001643C 1141 0032                  		move.b	d1,$32(a0)
00016440 5828 0024                  		addq.b	#4,$24(a0)
00016444 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001644A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016450 337C 0800 0014             		move.w	#$800,$14(a1)
00016456 337C 0000 0010             		move.w	#0,$10(a1)
0001645C 337C 0000 0012             		move.w	#0,$12(a1)
00016462 08A8 0005 0022             		bclr	#5,$22(a0)
00016468 08A9 0005 0022             		bclr	#5,$22(a1)
0001646E 08E9 0001 0022             		bset	#1,$22(a1)
00016474 3429 0008                  		move.w	8(a1),d2
00016478 3629 000C                  		move.w	$C(a1),d3
0001647C 6100 0000                  		bsr.w	Obj66_ChgPos
00016480 D569 0008                  		add.w	d2,8(a1)
00016484 D769 000C                  		add.w	d3,$C(a1)
00016488 E0E9 0008                  		asr	8(a1)
0001648C E0E9 000C                  		asr	$C(a1)
00016490                            
00016490                            Obj66_Display:				; XREF: Obj66_Index
00016490 6000 A3FA                  		bra.w	MarkObjGone
00016494                            ; ===========================================================================
00016494                            
00016494                            Obj66_Release:				; XREF: Obj66_Index
00016494 1028 001A                  		move.b	$1A(a0),d0
00016498 0C00 0004                  		cmpi.b	#4,d0
0001649C 6700                       		beq.s	loc_151C8
0001649E 0C00 0007                  		cmpi.b	#7,d0
000164A2 6600                       		bne.s	loc_151F8
000164A4                            
000164A4                            loc_151C8:
000164A4 B028 0032                  		cmp.b	$32(a0),d0
000164A8 6700                       		beq.s	loc_151F8
000164AA 43F8 D000                  		lea	($FFFFD000).w,a1
000164AE 337C 0000 0010             		move.w	#0,$10(a1)
000164B4 337C 0800 0012             		move.w	#$800,$12(a1)
000164BA 0C00 0004                  		cmpi.b	#4,d0
000164BE 6700                       		beq.s	loc_151F0
000164C0 337C 0800 0010             		move.w	#$800,$10(a1)
000164C6 337C 0800 0012             		move.w	#$800,$12(a1)
000164CC                            
000164CC                            loc_151F0:
000164CC 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000164D0 5928 0024                  		subq.b	#4,$24(a0)
000164D4                            
000164D4                            loc_151F8:
000164D4 6100                       		bsr.s	Obj66_ChkSwitch
000164D6 6100                       		bsr.s	Obj66_ChgPos
000164D8 6000 A3B2                  		bra.w	MarkObjGone
000164DC                            
000164DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164DC                            
000164DC                            
000164DC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000164DC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000164E0 7000                       		moveq	#0,d0
000164E2 1028 0038                  		move.b	$38(a0),d0
000164E6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000164EC 6700                       		beq.s	loc_15224	; if not, branch
000164EE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000164F2 6600                       		bne.s	Obj66_Animate	; if yes, branch
000164F4 4428 0034                  		neg.b	$34(a0)
000164F8 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000164FE 6000                       		bra.s	Obj66_Animate
00016500                            ; ===========================================================================
00016500                            
00016500                            loc_15224:
00016500 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016504                            
00016504                            Obj66_Animate:
00016504 5328 001E                  		subq.b	#1,$1E(a0)
00016508 6A00                       		bpl.s	locret_15246
0001650A 117C 0007 001E             		move.b	#7,$1E(a0)
00016510 1228 0034                  		move.b	$34(a0),d1
00016514 1028 001A                  		move.b	$1A(a0),d0
00016518 D001                       		add.b	d1,d0
0001651A 0200 000F                  		andi.b	#$F,d0
0001651E 1140 001A                  		move.b	d0,$1A(a0)
00016522                            
00016522                            locret_15246:
00016522 4E75                       		rts	
00016524                            ; End of function Obj66_ChkSwitch
00016524                            
00016524                            
00016524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016524                            
00016524                            
00016524                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016524 43F8 D000                  		lea	($FFFFD000).w,a1
00016528 7000                       		moveq	#0,d0
0001652A 1028 001A                  		move.b	$1A(a0),d0
0001652E D040                       		add.w	d0,d0
00016530 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016534 101A                       		move.b	(a2)+,d0
00016536 4880                       		ext.w	d0
00016538 D068 0008                  		add.w	8(a0),d0
0001653C 3340 0008                  		move.w	d0,8(a1)
00016540 101A                       		move.b	(a2)+,d0
00016542 4880                       		ext.w	d0
00016544 D068 000C                  		add.w	$C(a0),d0
00016548 3340 000C                  		move.w	d0,$C(a1)
0001654C 4E75                       		rts	
0001654E                            ; End of function Obj66_ChgPos
0001654E                            
0001654E                            ; ===========================================================================
0001654E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016552 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016556 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001655A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001655E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016562 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016566 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001656A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001656E                            ; ---------------------------------------------------------------------------
0001656E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001656E                            ; ---------------------------------------------------------------------------
0001656E                            Map_obj66:
0001656E                            	include "_maps\obj66.asm"
0001656E                            ; ---------------------------------------------------------------------------
0001656E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001656E                            ; ---------------------------------------------------------------------------
0001656E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016572 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016576 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001657A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001657E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016582 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016586 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001658A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001658E 0000                       		dc.w byte_154A4-Map_obj66
00016590 06                         byte_152B4:	dc.b 6
00016591 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016596 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001659B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000165A0 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000165A5 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000165AA 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000165AF 06                         byte_152D3:	dc.b 6
000165B0 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000165B5 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000165BA F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000165BF F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000165C4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000165C9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000165CE 06                         byte_152F2:	dc.b 6
000165CF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000165D4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000165D9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000165DE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000165E3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000165E8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000165ED 06                         byte_15311:	dc.b 6
000165EE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000165F3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000165F8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000165FD 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016602 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016607 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001660C 06                         byte_15330:	dc.b 6
0001660D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016612 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016617 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001661C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016621 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016626 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001662B 06                         byte_1534F:	dc.b 6
0001662C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016631 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016636 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001663B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016640 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016645 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001664A 06                         byte_1536E:	dc.b 6
0001664B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016650 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016655 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001665A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001665F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016664 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016669 06                         byte_1538D:	dc.b 6
0001666A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001666F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016674 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016679 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001667E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016683 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016688 06                         byte_153AC:	dc.b 6
00016689 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001668E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016693 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016698 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001669D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000166A2 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000166A7 06                         byte_153CB:	dc.b 6
000166A8 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000166AD E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000166B2 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000166B7 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000166BC F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000166C1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000166C6 06                         byte_153EA:	dc.b 6
000166C7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000166CC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000166D1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000166D6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000166DB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000166E0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000166E5 06                         byte_15409:	dc.b 6
000166E6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000166EB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000166F0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000166F5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000166FA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000166FF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016704 06                         byte_15428:	dc.b 6
00016705 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001670A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001670F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016714 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016719 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001671E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016723 06                         byte_15447:	dc.b 6
00016724 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016729 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001672E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016733 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016738 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001673D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016742 06                         byte_15466:	dc.b 6
00016743 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016748 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001674D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016752 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016757 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001675C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016761 06                         byte_15485:	dc.b 6
00016762 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016767 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001676C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016771 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016776 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001677B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016780 0C                         byte_154A4:	dc.b $C
00016781 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016786 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001678B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016790 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016795 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001679A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001679F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000167A4 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000167A9 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000167AE 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000167B3 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000167B8 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000167BE 00                         		even
000167BE 00                         		even
000167BE                            
000167BE                            ; ===========================================================================
000167BE                            ; ---------------------------------------------------------------------------
000167BE                            ; Object 67 - disc that	you run	around (SBZ)
000167BE                            ; ---------------------------------------------------------------------------
000167BE                            
000167BE                            Obj67:					; XREF: Obj_Index
000167BE 7000                       		moveq	#0,d0
000167C0 1028 0024                  		move.b	$24(a0),d0
000167C4 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000167C8 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000167CC                            ; ===========================================================================
000167CC 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000167CE 0000                       		dc.w Obj67_Action-Obj67_Index
000167D0                            ; ===========================================================================
000167D0                            
000167D0                            Obj67_Main:				; XREF: Obj67_Index
000167D0 5428 0024                  		addq.b	#2,$24(a0)
000167D4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000167DC 317C C344 0002             		move.w	#$C344,2(a0)
000167E2 117C 0004 0001             		move.b	#4,1(a0)
000167E8 117C 0004 0018             		move.b	#4,$18(a0)
000167EE 117C 0008 0019             		move.b	#8,$19(a0)
000167F4 3168 0008 0032             		move.w	8(a0),$32(a0)
000167FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016800 117C 0018 0034             		move.b	#$18,$34(a0)
00016806 117C 0048 0038             		move.b	#$48,$38(a0)
0001680C 1228 0028                  		move.b	$28(a0),d1	; get object type
00016810 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016814 6700                       		beq.s	loc_15546
00016816 117C 0010 0034             		move.b	#$10,$34(a0)
0001681C 117C 0038 0038             		move.b	#$38,$38(a0)
00016822                            
00016822                            loc_15546:
00016822 1228 0028                  		move.b	$28(a0),d1	; get object type
00016826 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001682A 4881                       		ext.w	d1
0001682C E741                       		asl.w	#3,d1
0001682E 3141 0036                  		move.w	d1,$36(a0)
00016832 1028 0022                  		move.b	$22(a0),d0
00016836 E418                       		ror.b	#2,d0
00016838 0200 00C0                  		andi.b	#-$40,d0
0001683C 1140 0026                  		move.b	d0,$26(a0)
00016840                            
00016840                            Obj67_Action:				; XREF: Obj67_Index
00016840 6100 0000                  		bsr.w	Obj67_MoveSonic
00016844 6100 0000                  		bsr.w	Obj67_MoveSpot
00016848 6000 0000                  		bra.w	Obj67_ChkDel
0001684C                            ; ===========================================================================
0001684C                            
0001684C                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001684C 7400                       		moveq	#0,d2
0001684E 1428 0038                  		move.b	$38(a0),d2
00016852 3602                       		move.w	d2,d3
00016854 D643                       		add.w	d3,d3
00016856 43F8 D000                  		lea	($FFFFD000).w,a1
0001685A 3029 0008                  		move.w	8(a1),d0
0001685E 9068 0032                  		sub.w	$32(a0),d0
00016862 D042                       		add.w	d2,d0
00016864 B043                       		cmp.w	d3,d0
00016866 6400                       		bcc.s	loc_155A8
00016868 3229 000C                  		move.w	$C(a1),d1
0001686C 9268 0030                  		sub.w	$30(a0),d1
00016870 D242                       		add.w	d2,d1
00016872 B243                       		cmp.w	d3,d1
00016874 6400                       		bcc.s	loc_155A8
00016876 0829 0001 0022             		btst	#1,$22(a1)
0001687C 6700                       		beq.s	loc_155B8
0001687E 4228 003A                  		clr.b	$3A(a0)
00016882 4E75                       		rts	
00016884                            ; ===========================================================================
00016884                            
00016884                            loc_155A8:
00016884 4A28 003A                  		tst.b	$3A(a0)
00016888 6700                       		beq.s	locret_155B6
0001688A 4229 0038                  		clr.b	$38(a1)
0001688E 4228 003A                  		clr.b	$3A(a0)
00016892                            
00016892                            locret_155B6:
00016892 4E75                       		rts	
00016894                            ; ===========================================================================
00016894                            
00016894                            loc_155B8:
00016894 4A28 003A                  		tst.b	$3A(a0)
00016898 6600                       		bne.s	loc_155E2
0001689A 117C 0001 003A             		move.b	#1,$3A(a0)
000168A0 0829 0002 0022             		btst	#2,$22(a1)
000168A6 6600                       		bne.s	loc_155D0
000168A8 4229 001C                  		clr.b	$1C(a1)
000168AC                            
000168AC                            loc_155D0:
000168AC 08A9 0005 0022             		bclr	#5,$22(a1)
000168B2 137C 0001 001D             		move.b	#1,$1D(a1)
000168B8 137C 0001 0038             		move.b	#1,$38(a1)
000168BE                            
000168BE                            loc_155E2:
000168BE 3029 0014                  		move.w	$14(a1),d0
000168C2 4A68 0036                  		tst.w	$36(a0)
000168C6 6A00                       		bpl.s	loc_15608
000168C8 0C40 FC00                  		cmpi.w	#-$400,d0
000168CC 6F00                       		ble.s	loc_155FA
000168CE 337C FC00 0014             		move.w	#-$400,$14(a1)
000168D4 4E75                       		rts	
000168D6                            ; ===========================================================================
000168D6                            
000168D6                            loc_155FA:
000168D6 0C40 F100                  		cmpi.w	#-$F00,d0
000168DA 6C00                       		bge.s	locret_15606
000168DC 337C F100 0014             		move.w	#-$F00,$14(a1)
000168E2                            
000168E2                            locret_15606:
000168E2 4E75                       		rts	
000168E4                            ; ===========================================================================
000168E4                            
000168E4                            loc_15608:
000168E4 0C40 0400                  		cmpi.w	#$400,d0
000168E8 6C00                       		bge.s	loc_15616
000168EA 337C 0400 0014             		move.w	#$400,$14(a1)
000168F0 4E75                       		rts	
000168F2                            ; ===========================================================================
000168F2                            
000168F2                            loc_15616:
000168F2 0C40 0F00                  		cmpi.w	#$F00,d0
000168F6 6F00                       		ble.s	locret_15622
000168F8 337C 0F00 0014             		move.w	#$F00,$14(a1)
000168FE                            
000168FE                            locret_15622:
000168FE 4E75                       		rts	
00016900                            ; ===========================================================================
00016900                            
00016900                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016900 3028 0036                  		move.w	$36(a0),d0
00016904 D168 0026                  		add.w	d0,$26(a0)
00016908 1028 0026                  		move.b	$26(a0),d0
0001690C 4EB9 0000 34B8             		jsr	(CalcSine).l
00016912 3428 0030                  		move.w	$30(a0),d2
00016916 3628 0032                  		move.w	$32(a0),d3
0001691A 7800                       		moveq	#0,d4
0001691C 1828 0034                  		move.b	$34(a0),d4
00016920 E14C                       		lsl.w	#8,d4
00016922 2A04                       		move.l	d4,d5
00016924 C9C0                       		muls.w	d0,d4
00016926 4844                       		swap	d4
00016928 CBC1                       		muls.w	d1,d5
0001692A 4845                       		swap	d5
0001692C D842                       		add.w	d2,d4
0001692E DA43                       		add.w	d3,d5
00016930 3144 000C                  		move.w	d4,$C(a0)
00016934 3145 0008                  		move.w	d5,8(a0)
00016938 4E75                       		rts	
0001693A                            ; ===========================================================================
0001693A                            
0001693A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001693A 3028 0032                  		move.w	$32(a0),d0
0001693E 0240 FF80                  		andi.w	#-$80,d0
00016942 3238 F700                  		move.w	($FFFFF700).w,d1
00016946 0441 0080                  		subi.w	#$80,d1
0001694A 0241 FF80                  		andi.w	#-$80,d1
0001694E 9041                       		sub.w	d1,d0
00016950 0C40 0280                  		cmpi.w	#$280,d0
00016954 6200                       		bhi.s	Obj67_Delete
00016956 4EF9 0000 E7E4             		jmp	DisplaySprite
0001695C                            ; ===========================================================================
0001695C                            
0001695C                            Obj67_Delete:
0001695C 4EF9 0000 E820             		jmp	DeleteObject
00016962                            ; ===========================================================================
00016962                            ; ---------------------------------------------------------------------------
00016962                            ; Sprite mappings - disc that you run around (SBZ)
00016962                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016962                            ; part of the level tiles.)
00016962                            ; ---------------------------------------------------------------------------
00016962                            Map_obj67:
00016962                            	include "_maps\obj67.asm"
00016962                            ; ---------------------------------------------------------------------------
00016962                            ; Sprite mappings - disc that you run around (SBZ)
00016962                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016962                            ; part of the level tiles.)
00016962                            ; ---------------------------------------------------------------------------
00016962 0000                       		dc.w byte_15688-Map_obj67
00016964 01                         byte_15688:	dc.b 1
00016965 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001696A                            		even
0001696A                            		even
0001696A                            
0001696A                            ; ===========================================================================
0001696A                            ; ---------------------------------------------------------------------------
0001696A                            ; Object 68 - conveyor belts (SBZ)
0001696A                            ; ---------------------------------------------------------------------------
0001696A                            
0001696A                            Obj68:					; XREF: Obj_Index
0001696A 7000                       		moveq	#0,d0
0001696C 1028 0024                  		move.b	$24(a0),d0
00016970 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016974 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016978                            ; ===========================================================================
00016978 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001697A 0000                       		dc.w Obj68_Action-Obj68_Index
0001697C                            ; ===========================================================================
0001697C                            
0001697C                            Obj68_Main:				; XREF: Obj68_Index
0001697C 5428 0024                  		addq.b	#2,$24(a0)
00016980 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016986 1228 0028                  		move.b	$28(a0),d1	; get object type
0001698A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001698E 6700                       		beq.s	loc_156BA	; if zero, branch
00016990 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016996                            
00016996                            loc_156BA:
00016996 1228 0028                  		move.b	$28(a0),d1	; get object type
0001699A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001699E 4881                       		ext.w	d1
000169A0 E841                       		asr.w	#4,d1
000169A2 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000169A6                            
000169A6                            Obj68_Action:				; XREF: Obj68_Index
000169A6 6100                       		bsr.s	Obj68_MoveSonic
000169A8 3028 0008                  		move.w	8(a0),d0
000169AC 0240 FF80                  		andi.w	#$FF80,d0
000169B0 3238 F700                  		move.w	($FFFFF700).w,d1
000169B4 0441 0080                  		subi.w	#$80,d1
000169B8 0241 FF80                  		andi.w	#$FF80,d1
000169BC 9041                       		sub.w	d1,d0
000169BE 0C40 0280                  		cmpi.w	#$280,d0
000169C2 6200                       		bhi.s	Obj68_Delete
000169C4 4E75                       		rts	
000169C6                            ; ===========================================================================
000169C6                            
000169C6                            Obj68_Delete:
000169C6 4EF9 0000 E820             		jmp	DeleteObject
000169CC                            ; ===========================================================================
000169CC                            
000169CC                            Obj68_MoveSonic:			; XREF: Obj68_Action
000169CC 7400                       		moveq	#0,d2
000169CE 1428 0038                  		move.b	$38(a0),d2
000169D2 3602                       		move.w	d2,d3
000169D4 D643                       		add.w	d3,d3
000169D6 43F8 D000                  		lea	($FFFFD000).w,a1
000169DA 3029 0008                  		move.w	8(a1),d0
000169DE 9068 0008                  		sub.w	8(a0),d0
000169E2 D042                       		add.w	d2,d0
000169E4 B043                       		cmp.w	d3,d0
000169E6 6400                       		bcc.s	locret_1572E
000169E8 3229 000C                  		move.w	$C(a1),d1
000169EC 9268 000C                  		sub.w	$C(a0),d1
000169F0 0641 0030                  		addi.w	#$30,d1
000169F4 0C41 0030                  		cmpi.w	#$30,d1
000169F8 6400                       		bcc.s	locret_1572E
000169FA 0829 0001 0022             		btst	#1,$22(a1)
00016A00 6600                       		bne.s	locret_1572E
00016A02 3028 0036                  		move.w	$36(a0),d0
00016A06 D169 0008                  		add.w	d0,8(a1)
00016A0A                            
00016A0A                            locret_1572E:
00016A0A 4E75                       		rts	
00016A0C                            
00016A0C                            ; ===========================================================================
00016A0C                            ; ---------------------------------------------------------------------------
00016A0C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016A0C                            ; ---------------------------------------------------------------------------
00016A0C                            
00016A0C                            Obj69:					; XREF: Obj_Index
00016A0C 7000                       		moveq	#0,d0
00016A0E 1028 0024                  		move.b	$24(a0),d0
00016A12 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016A16 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016A1A                            ; ===========================================================================
00016A1A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016A1C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016A1E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016A20                            ; ===========================================================================
00016A20                            
00016A20                            Obj69_Main:				; XREF: Obj69_Index
00016A20 5428 0024                  		addq.b	#2,$24(a0)
00016A24 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016A2C 317C 4492 0002             		move.w	#$4492,2(a0)
00016A32 0028 0004 0001             		ori.b	#4,1(a0)
00016A38 117C 0080 0019             		move.b	#$80,$19(a0)
00016A3E 7000                       		moveq	#0,d0
00016A40 1028 0028                  		move.b	$28(a0),d0
00016A44 0240 000F                  		andi.w	#$F,d0
00016A48 C0FC 003C                  		mulu.w	#$3C,d0
00016A4C 3140 0032                  		move.w	d0,$32(a0)
00016A50 4A28 0028                  		tst.b	$28(a0)
00016A54 6A00                       		bpl.s	Obj69_Trapdoor
00016A56 5428 0024                  		addq.b	#2,$24(a0)
00016A5A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016A62 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016A68 117C 0010 0019             		move.b	#$10,$19(a0)
00016A6E 117C 0002 001C             		move.b	#2,$1C(a0)
00016A74 7000                       		moveq	#0,d0
00016A76 1028 0028                  		move.b	$28(a0),d0	; get object type
00016A7A 3200                       		move.w	d0,d1
00016A7C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016A80 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016A84 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016A88 3140 0032                  		move.w	d0,$32(a0)
00016A8C 0241 0070                  		andi.w	#$70,d1
00016A90 0641 0010                  		addi.w	#$10,d1
00016A94 E549                       		lsl.w	#2,d1
00016A96 5341                       		subq.w	#1,d1
00016A98 3141 0036                  		move.w	d1,$36(a0)
00016A9C 6000                       		bra.s	Obj69_Spinner
00016A9E                            ; ===========================================================================
00016A9E                            
00016A9E                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016A9E 5368 0030                  		subq.w	#1,$30(a0)
00016AA2 6A00                       		bpl.s	Obj69_Animate
00016AA4 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016AAA 0868 0000 001C             		bchg	#0,$1C(a0)
00016AB0 4A28 0001                  		tst.b	1(a0)
00016AB4 6A00                       		bpl.s	Obj69_Animate
00016AB6 303C 00BB                  		move.w	#$BB,d0
00016ABA 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play door sound
00016AC0                            
00016AC0                            Obj69_Animate:
00016AC0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016AC6 4EB9 0000 B832             		jsr	AnimateSprite
00016ACC 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016AD0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016AD2 323C 004B                  		move.w	#$4B,d1
00016AD6 343C 000C                  		move.w	#$C,d2
00016ADA 3602                       		move.w	d2,d3
00016ADC 5243                       		addq.w	#1,d3
00016ADE 3828 0008                  		move.w	8(a0),d4
00016AE2 6100 A0D0                  		bsr.w	SolidObject
00016AE6 6000 9DA4                  		bra.w	MarkObjGone
00016AEA                            ; ===========================================================================
00016AEA                            
00016AEA                            Obj69_NotSolid:
00016AEA 0828 0003 0022             		btst	#3,$22(a0)
00016AF0 6700                       		beq.s	Obj69_Display
00016AF2 43F8 D000                  		lea	($FFFFD000).w,a1
00016AF6 08A9 0003 0022             		bclr	#3,$22(a1)
00016AFC 08A8 0003 0022             		bclr	#3,$22(a0)
00016B02 4228 0025                  		clr.b	$25(a0)
00016B06                            
00016B06                            Obj69_Display:
00016B06 6000 9D84                  		bra.w	MarkObjGone
00016B0A                            ; ===========================================================================
00016B0A                            
00016B0A                            Obj69_Spinner:				; XREF: Obj69_Index
00016B0A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B0E C068 0036                  		and.w	$36(a0),d0
00016B12 6600                       		bne.s	Obj69_Delay
00016B14 117C 0001 0034             		move.b	#1,$34(a0)
00016B1A                            
00016B1A                            Obj69_Delay:
00016B1A 4A28 0034                  		tst.b	$34(a0)
00016B1E 6700                       		beq.s	Obj69_Animate2
00016B20 5368 0030                  		subq.w	#1,$30(a0)
00016B24 6A00                       		bpl.s	Obj69_Animate2
00016B26 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016B2C 4228 0034                  		clr.b	$34(a0)
00016B30 0868 0000 001C             		bchg	#0,$1C(a0)
00016B36                            
00016B36                            Obj69_Animate2:
00016B36 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016B3C 4EB9 0000 B832             		jsr	AnimateSprite
00016B42 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016B46 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016B48 323C 001B                  		move.w	#$1B,d1
00016B4C 343C 0007                  		move.w	#7,d2
00016B50 3602                       		move.w	d2,d3
00016B52 5243                       		addq.w	#1,d3
00016B54 3828 0008                  		move.w	8(a0),d4
00016B58 6100 A05A                  		bsr.w	SolidObject
00016B5C 6000 9D2E                  		bra.w	MarkObjGone
00016B60                            ; ===========================================================================
00016B60                            
00016B60                            Obj69_NotSolid2:
00016B60 0828 0003 0022             		btst	#3,$22(a0)
00016B66 6700                       		beq.s	Obj69_Display2
00016B68 43F8 D000                  		lea	($FFFFD000).w,a1
00016B6C 08A9 0003 0022             		bclr	#3,$22(a1)
00016B72 08A8 0003 0022             		bclr	#3,$22(a0)
00016B78 4228 0025                  		clr.b	$25(a0)
00016B7C                            
00016B7C                            Obj69_Display2:
00016B7C 6000 9D0E                  		bra.w	MarkObjGone
00016B80                            ; ===========================================================================
00016B80                            Ani_obj69:
00016B80                            	include "_anim\obj69.asm"
00016B80                            ; ---------------------------------------------------------------------------
00016B80                            ; Animation script - trapdoor (SBZ)
00016B80                            ; ---------------------------------------------------------------------------
00016B80 0000                       		dc.w byte_158AC-Ani_obj69
00016B82 0000                       		dc.w byte_158B2-Ani_obj69
00016B84 0000                       		dc.w byte_158B8-Ani_obj69
00016B86 0000                       		dc.w byte_158CC-Ani_obj69
00016B88 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016B8E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016B94 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016BA1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016BA8 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016BB5 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016BBC                            		even
00016BBC                            		even
00016BBC                            
00016BBC                            ; ---------------------------------------------------------------------------
00016BBC                            ; Sprite mappings - trapdoor (SBZ)
00016BBC                            ; ---------------------------------------------------------------------------
00016BBC                            Map_obj69:
00016BBC                            	include "_maps\obj69.asm"
00016BBC                            ; ---------------------------------------------------------------------------
00016BBC                            ; Sprite mappings - trapdoor (SBZ)
00016BBC                            ; ---------------------------------------------------------------------------
00016BBC 0000                       		dc.w byte_158E6-Map_obj69
00016BBE 0000                       		dc.w byte_158FB-Map_obj69
00016BC0 0000                       		dc.w byte_15924-Map_obj69
00016BC2 04                         byte_158E6:	dc.b 4
00016BC3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016BC8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016BCD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016BD2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016BD7 08                         byte_158FB:	dc.b 8
00016BD8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016BDD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016BE2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016BE7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016BEC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016BF1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016BF6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016BFB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016C00 04                         byte_15924:	dc.b 4
00016C01 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016C06 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016C0B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016C10 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016C16 00                         		even
00016C16 00                         		even
00016C16                            
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            ; Sprite mappings - spinning platforms (SBZ)
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            Map_obj69a:
00016C16                            	include "_maps\obj69a.asm"
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            ; Sprite mappings - spinning platforms (SBZ)
00016C16                            ; ---------------------------------------------------------------------------
00016C16 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016C1A 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016C1E 0000                       		dc.w byte_15970-Map_obj69a
00016C20 02                         byte_15944:	dc.b 2
00016C21 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016C26 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016C2B 02                         byte_1594F:	dc.b 2
00016C2C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016C31 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016C36 02                         byte_1595A:	dc.b 2
00016C37 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016C3C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016C41 02                         byte_15965:	dc.b 2
00016C42 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016C47 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016C4C 02                         byte_15970:	dc.b 2
00016C4D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016C52 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016C58 00                         		even
00016C58 00                         		even
00016C58                            
00016C58                            ; ===========================================================================
00016C58                            ; ---------------------------------------------------------------------------
00016C58                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016C58                            ; ---------------------------------------------------------------------------
00016C58                            
00016C58                            Obj6A:					; XREF: Obj_Index
00016C58 7000                       		moveq	#0,d0
00016C5A 1028 0024                  		move.b	$24(a0),d0
00016C5E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016C62 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016C66                            ; ===========================================================================
00016C66 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016C68 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016C6A                            ; ===========================================================================
00016C6A                            
00016C6A                            Obj6A_Main:				; XREF: Obj6A_Index
00016C6A 5428 0024                  		addq.b	#2,$24(a0)
00016C6E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016C76 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016C7C 117C 0004 0001             		move.b	#4,1(a0)
00016C82 117C 0004 0018             		move.b	#4,$18(a0)
00016C88 117C 0020 0019             		move.b	#$20,$19(a0)
00016C8E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016C94 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016C9A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016CA0 6400                       		bcc.s	Obj6A_Action
00016CA2 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016CA8                            
00016CA8                            Obj6A_Action:				; XREF: Obj6A_Index
00016CA8 7000                       		moveq	#0,d0
00016CAA 1028 0028                  		move.b	$28(a0),d0
00016CAE 0240 0007                  		andi.w	#7,d0
00016CB2 D040                       		add.w	d0,d0
00016CB4 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016CB8 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016CBC 3028 003A                  		move.w	$3A(a0),d0
00016CC0 0240 FF80                  		andi.w	#$FF80,d0
00016CC4 3238 F700                  		move.w	($FFFFF700).w,d1
00016CC8 0441 0080                  		subi.w	#$80,d1
00016CCC 0241 FF80                  		andi.w	#$FF80,d1
00016CD0 9041                       		sub.w	d1,d0
00016CD2 0C40 0280                  		cmpi.w	#$280,d0
00016CD6 6200                       		bhi.s	Obj6A_Delete
00016CD8 4EF9 0000 E7E4             		jmp	DisplaySprite
00016CDE                            ; ===========================================================================
00016CDE                            
00016CDE                            Obj6A_Delete:
00016CDE 4EF9 0000 E820             		jmp	DeleteObject
00016CE4                            ; ===========================================================================
00016CE4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016CE8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016CEC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016CEE                            ; ===========================================================================
00016CEE                            
00016CEE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016CEE 4E75                       		rts	
00016CF0                            ; ===========================================================================
00016CF0                            
00016CF0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016CF0 323C 0060                  		move.w	#$60,d1
00016CF4 7000                       		moveq	#0,d0
00016CF6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016CFA 0828 0000 0022             		btst	#0,$22(a0)
00016D00 6700                       		beq.s	Obj6A_Animate01
00016D02 4440                       		neg.w	d0
00016D04 D041                       		add.w	d1,d0
00016D06                            
00016D06                            Obj6A_Animate01:
00016D06 3228 003A                  		move.w	$3A(a0),d1
00016D0A 9240                       		sub.w	d0,d1
00016D0C 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016D10 5328 001E                  		subq.b	#1,$1E(a0)
00016D14 6A00                       		bpl.s	loc_15A46
00016D16 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016D1C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016D22                            
00016D22                            loc_15A46:
00016D22 4A28 0001                  		tst.b	1(a0)
00016D26 6A00                       		bpl.s	locret_15A60
00016D28 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016D2C 0240 000F                  		andi.w	#$F,d0
00016D30 6600                       		bne.s	locret_15A60
00016D32 303C 00B0                  		move.w	#$B0,d0
00016D36 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play saw sound
00016D3C                            
00016D3C                            locret_15A60:
00016D3C 4E75                       		rts	
00016D3E                            ; ===========================================================================
00016D3E                            
00016D3E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016D3E 323C 0030                  		move.w	#$30,d1
00016D42 7000                       		moveq	#0,d0
00016D44 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016D48 0828 0000 0022             		btst	#0,$22(a0)
00016D4E 6700                       		beq.s	Obj6A_Animate02
00016D50 4440                       		neg.w	d0
00016D52 0640 0080                  		addi.w	#$80,d0
00016D56                            
00016D56                            Obj6A_Animate02:
00016D56 3228 0038                  		move.w	$38(a0),d1
00016D5A 9240                       		sub.w	d0,d1
00016D5C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016D60 5328 001E                  		subq.b	#1,$1E(a0)
00016D64 6A00                       		bpl.s	loc_15A96
00016D66 117C 0002 001E             		move.b	#2,$1E(a0)
00016D6C 0868 0000 001A             		bchg	#0,$1A(a0)
00016D72                            
00016D72                            loc_15A96:
00016D72 4A28 0001                  		tst.b	1(a0)
00016D76 6A00                       		bpl.s	locret_15AB0
00016D78 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016D7C 0C00 0018                  		cmpi.b	#$18,d0
00016D80 6600                       		bne.s	locret_15AB0
00016D82 303C 00B0                  		move.w	#$B0,d0
00016D86 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play saw sound
00016D8C                            
00016D8C                            locret_15AB0:
00016D8C 4E75                       		rts	
00016D8E                            ; ===========================================================================
00016D8E                            
00016D8E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016D8E 4A28 003D                  		tst.b	$3D(a0)
00016D92 6600                       		bne.s	Obj6A_Animate03
00016D94 3038 D008                  		move.w	($FFFFD008).w,d0
00016D98 0440 00C0                  		subi.w	#$C0,d0
00016D9C 6500                       		bcs.s	loc_15B02
00016D9E 9068 0008                  		sub.w	8(a0),d0
00016DA2 6500                       		bcs.s	loc_15B02
00016DA4 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016DA8 0440 0080                  		subi.w	#$80,d0
00016DAC B068 000C                  		cmp.w	$C(a0),d0
00016DB0 6400                       		bcc.s	locret_15B04
00016DB2 0640 0100                  		addi.w	#$100,d0
00016DB6 B068 000C                  		cmp.w	$C(a0),d0
00016DBA 6500                       		bcs.s	locret_15B04
00016DBC 117C 0001 003D             		move.b	#1,$3D(a0)
00016DC2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016DC8 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016DCE 117C 0002 001A             		move.b	#2,$1A(a0)
00016DD4 303C 00B0                  		move.w	#$B0,d0
00016DD8 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play saw sound
00016DDE                            
00016DDE                            loc_15B02:
00016DDE 588F                       		addq.l	#4,sp
00016DE0                            
00016DE0                            locret_15B04:
00016DE0 4E75                       		rts	
00016DE2                            ; ===========================================================================
00016DE2                            
00016DE2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016DE2 4EB9 0000 E7BE             		jsr	SpeedToPos
00016DE8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016DEE 5328 001E                  		subq.b	#1,$1E(a0)
00016DF2 6A00                       		bpl.s	locret_15B24
00016DF4 117C 0002 001E             		move.b	#2,$1E(a0)
00016DFA 0868 0000 001A             		bchg	#0,$1A(a0)
00016E00                            
00016E00                            locret_15B24:
00016E00 4E75                       		rts	
00016E02                            ; ===========================================================================
00016E02                            
00016E02                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016E02 4A28 003D                  		tst.b	$3D(a0)
00016E06 6600                       		bne.s	Obj6A_Animate04
00016E08 3038 D008                  		move.w	($FFFFD008).w,d0
00016E0C 0640 00E0                  		addi.w	#$E0,d0
00016E10 9068 0008                  		sub.w	8(a0),d0
00016E14 6400                       		bcc.s	loc_15B74
00016E16 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016E1A 0440 0080                  		subi.w	#$80,d0
00016E1E B068 000C                  		cmp.w	$C(a0),d0
00016E22 6400                       		bcc.s	locret_15B76
00016E24 0640 0100                  		addi.w	#$100,d0
00016E28 B068 000C                  		cmp.w	$C(a0),d0
00016E2C 6500                       		bcs.s	locret_15B76
00016E2E 117C 0001 003D             		move.b	#1,$3D(a0)
00016E34 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016E3A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016E40 117C 0002 001A             		move.b	#2,$1A(a0)
00016E46 303C 00B0                  		move.w	#$B0,d0
00016E4A 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play saw sound
00016E50                            
00016E50                            loc_15B74:
00016E50 588F                       		addq.l	#4,sp
00016E52                            
00016E52                            locret_15B76:
00016E52 4E75                       		rts	
00016E54                            ; ===========================================================================
00016E54                            
00016E54                            Obj6A_Animate04:
00016E54 4EB9 0000 E7BE             		jsr	SpeedToPos
00016E5A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016E60 5328 001E                  		subq.b	#1,$1E(a0)
00016E64 6A00                       		bpl.s	locret_15B96
00016E66 117C 0002 001E             		move.b	#2,$1E(a0)
00016E6C 0868 0000 001A             		bchg	#0,$1A(a0)
00016E72                            
00016E72                            locret_15B96:
00016E72 4E75                       		rts	
00016E74                            ; ===========================================================================
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            Map_obj6A:
00016E74                            	include "_maps\obj6A.asm"
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016E74                            ; ---------------------------------------------------------------------------
00016E74 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016E78 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016E7C 07                         byte_15BA0:	dc.b 7
00016E7D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016E82 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016E87 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016E8C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016E91 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016E96 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016E9B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016EA0 07                         byte_15BC4:	dc.b 7
00016EA1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016EA6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016EAB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016EB0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016EB5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016EBA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016EBF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016EC4 04                         byte_15BE8:	dc.b 4
00016EC5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016ECA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016ECF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016ED4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016ED9 04                         byte_15BFD:	dc.b 4
00016EDA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016EDF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016EE4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016EE9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016EEE                            		even
00016EEE                            		even
00016EEE                            
00016EEE                            ; ===========================================================================
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            ; Object 6B - stomper (SBZ)
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            
00016EEE                            Obj6B:					; XREF: Obj_Index
00016EEE 7000                       		moveq	#0,d0
00016EF0 1028 0024                  		move.b	$24(a0),d0
00016EF4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016EF8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016EFC                            ; ===========================================================================
00016EFC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016EFE 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016F00                            
00016F00 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016F04 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016F08 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016F0C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016F10 8040 0005                  		dc.b  $80, $40,	  0,   5
00016F14                            ; ===========================================================================
00016F14                            
00016F14                            Obj6B_Main:				; XREF: Obj6B_Index
00016F14 5428 0024                  		addq.b	#2,$24(a0)
00016F18 7000                       		moveq	#0,d0
00016F1A 1028 0028                  		move.b	$28(a0),d0
00016F1E E448                       		lsr.w	#2,d0
00016F20 0240 001C                  		andi.w	#$1C,d0
00016F24 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016F28 115B 0019                  		move.b	(a3)+,$19(a0)
00016F2C 115B 0016                  		move.b	(a3)+,$16(a0)
00016F30 E448                       		lsr.w	#2,d0
00016F32 1140 001A                  		move.b	d0,$1A(a0)
00016F36 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016F3E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016F44 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016F4A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016F4C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016F52 6700                       		beq.s	Obj6B_SBZ3
00016F54                            
00016F54                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016F54 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F58 7000                       		moveq	#0,d0
00016F5A 1028 0023                  		move.b	$23(a0),d0
00016F5E 6700                       		beq.s	Obj6B_Delete
00016F60 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F66                            
00016F66                            Obj6B_Delete:
00016F66 4EF9 0000 E820             		jmp	DeleteObject
00016F6C                            ; ===========================================================================
00016F6C                            
00016F6C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016F6C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016F72 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016F78 6600                       		bne.s	Obj6B_SBZ12
00016F7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F7E 7000                       		moveq	#0,d0
00016F80 1028 0023                  		move.b	$23(a0),d0
00016F84 6700                       		beq.s	Obj6B_SBZ12
00016F86 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016F8C 6700                       		beq.s	Obj6B_SBZ12
00016F8E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016F92 60C0                       		bra.s	Obj6B_ChkGone
00016F94                            ; ===========================================================================
00016F94                            
00016F94                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016F94 0028 0004 0001             		ori.b	#4,1(a0)
00016F9A 117C 0004 0018             		move.b	#4,$18(a0)
00016FA0 3168 0008 0034             		move.w	8(a0),$34(a0)
00016FA6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016FAC 7000                       		moveq	#0,d0
00016FAE 101B                       		move.b	(a3)+,d0
00016FB0 3140 003C                  		move.w	d0,$3C(a0)
00016FB4 7000                       		moveq	#0,d0
00016FB6 1028 0028                  		move.b	$28(a0),d0
00016FBA 6A00                       		bpl.s	Obj6B_Action
00016FBC 0200 000F                  		andi.b	#$F,d0
00016FC0 1140 003E                  		move.b	d0,$3E(a0)
00016FC4 1153 0028                  		move.b	(a3),$28(a0)
00016FC8 0C13 0005                  		cmpi.b	#5,(a3)
00016FCC 6600                       		bne.s	Obj6B_ChkGone2
00016FCE 08E8 0004 0001             		bset	#4,1(a0)
00016FD4                            
00016FD4                            Obj6B_ChkGone2:
00016FD4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FD8 7000                       		moveq	#0,d0
00016FDA 1028 0023                  		move.b	$23(a0),d0
00016FDE 6700                       		beq.s	Obj6B_Action
00016FE0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016FE6                            
00016FE6                            Obj6B_Action:				; XREF: Obj6B_Index
00016FE6 3F28 0008                  		move.w	8(a0),-(sp)
00016FEA 7000                       		moveq	#0,d0
00016FEC 1028 0028                  		move.b	$28(a0),d0
00016FF0 0240 000F                  		andi.w	#$F,d0
00016FF4 D040                       		add.w	d0,d0
00016FF6 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016FFA 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016FFE 381F                       		move.w	(sp)+,d4
00017000 4A28 0001                  		tst.b	1(a0)
00017004 6A00                       		bpl.s	Obj6B_ChkDel
00017006 7200                       		moveq	#0,d1
00017008 1228 0019                  		move.b	$19(a0),d1
0001700C 0641 000B                  		addi.w	#$B,d1
00017010 7400                       		moveq	#0,d2
00017012 1428 0016                  		move.b	$16(a0),d2
00017016 3602                       		move.w	d2,d3
00017018 5243                       		addq.w	#1,d3
0001701A 6100 9B98                  		bsr.w	SolidObject
0001701E                            
0001701E                            Obj6B_ChkDel:
0001701E 3028 0034                  		move.w	$34(a0),d0
00017022 0240 FF80                  		andi.w	#$FF80,d0
00017026 3238 F700                  		move.w	($FFFFF700).w,d1
0001702A 0441 0080                  		subi.w	#$80,d1
0001702E 0241 FF80                  		andi.w	#$FF80,d1
00017032 9041                       		sub.w	d1,d0
00017034 0C40 0280                  		cmpi.w	#$280,d0
00017038 6200                       		bhi.s	loc_15D64
0001703A 4EF9 0000 E7E4             		jmp	DisplaySprite
00017040                            ; ===========================================================================
00017040                            
00017040                            loc_15D64:
00017040 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017046 6600                       		bne.s	Obj6B_Delete2
00017048 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001704C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017050 7000                       		moveq	#0,d0
00017052 1028 0023                  		move.b	$23(a0),d0
00017056 6700                       		beq.s	Obj6B_Delete2
00017058 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001705E                            
0001705E                            Obj6B_Delete2:
0001705E 4EF9 0000 E820             		jmp	DeleteObject
00017064                            ; ===========================================================================
00017064 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017068 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001706C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017070                            ; ===========================================================================
00017070                            
00017070                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017070 4E75                       		rts	
00017072                            ; ===========================================================================
00017072                            
00017072                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017072 4A28 0038                  		tst.b	$38(a0)
00017076 6600                       		bne.s	loc_15DB4
00017078 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001707C 7000                       		moveq	#0,d0
0001707E 1028 003E                  		move.b	$3E(a0),d0
00017082 0832 0000 0000             		btst	#0,(a2,d0.w)
00017088 6700                       		beq.s	loc_15DC2
0001708A 117C 0001 0038             		move.b	#1,$38(a0)
00017090                            
00017090                            loc_15DB4:
00017090 3028 003C                  		move.w	$3C(a0),d0
00017094 B068 003A                  		cmp.w	$3A(a0),d0
00017098 6700                       		beq.s	loc_15DE0
0001709A 5468 003A                  		addq.w	#2,$3A(a0)
0001709E                            
0001709E                            loc_15DC2:
0001709E 3028 003A                  		move.w	$3A(a0),d0
000170A2 0828 0000 0022             		btst	#0,$22(a0)
000170A8 6700                       		beq.s	loc_15DD4
000170AA 4440                       		neg.w	d0
000170AC 0640 0080                  		addi.w	#$80,d0
000170B0                            
000170B0                            loc_15DD4:
000170B0 3228 0034                  		move.w	$34(a0),d1
000170B4 9240                       		sub.w	d0,d1
000170B6 3141 0008                  		move.w	d1,8(a0)
000170BA 4E75                       		rts	
000170BC                            ; ===========================================================================
000170BC                            
000170BC                            loc_15DE0:
000170BC 5228 0028                  		addq.b	#1,$28(a0)
000170C0 317C 00B4 0036             		move.w	#$B4,$36(a0)
000170C6 4228 0038                  		clr.b	$38(a0)
000170CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170CE 7000                       		moveq	#0,d0
000170D0 1028 0023                  		move.b	$23(a0),d0
000170D4 67C8                       		beq.s	loc_15DC2
000170D6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000170DC 60C0                       		bra.s	loc_15DC2
000170DE                            ; ===========================================================================
000170DE                            
000170DE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000170DE 4A28 0038                  		tst.b	$38(a0)
000170E2 6600                       		bne.s	loc_15E14
000170E4 5368 0036                  		subq.w	#1,$36(a0)
000170E8 6600                       		bne.s	loc_15E1E
000170EA 117C 0001 0038             		move.b	#1,$38(a0)
000170F0                            
000170F0                            loc_15E14:
000170F0 4A68 003A                  		tst.w	$3A(a0)
000170F4 6700                       		beq.s	loc_15E3C
000170F6 5568 003A                  		subq.w	#2,$3A(a0)
000170FA                            
000170FA                            loc_15E1E:
000170FA 3028 003A                  		move.w	$3A(a0),d0
000170FE 0828 0000 0022             		btst	#0,$22(a0)
00017104 6700                       		beq.s	loc_15E30
00017106 4440                       		neg.w	d0
00017108 0640 0080                  		addi.w	#$80,d0
0001710C                            
0001710C                            loc_15E30:
0001710C 3228 0034                  		move.w	$34(a0),d1
00017110 9240                       		sub.w	d0,d1
00017112 3141 0008                  		move.w	d1,8(a0)
00017116 4E75                       		rts	
00017118                            ; ===========================================================================
00017118                            
00017118                            loc_15E3C:
00017118 5328 0028                  		subq.b	#1,$28(a0)
0001711C 4228 0038                  		clr.b	$38(a0)
00017120 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017124 7000                       		moveq	#0,d0
00017126 1028 0023                  		move.b	$23(a0),d0
0001712A 67CE                       		beq.s	loc_15E1E
0001712C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017132 60C6                       		bra.s	loc_15E1E
00017134                            ; ===========================================================================
00017134                            
00017134                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017134 4A28 0038                  		tst.b	$38(a0)
00017138 6600                       		bne.s	loc_15E7C
0001713A 4A68 003A                  		tst.w	$3A(a0)
0001713E 6700                       		beq.s	loc_15E6A
00017140 5368 003A                  		subq.w	#1,$3A(a0)
00017144 6000                       		bra.s	loc_15E8E
00017146                            ; ===========================================================================
00017146                            
00017146                            loc_15E6A:
00017146 5368 0036                  		subq.w	#1,$36(a0)
0001714A 6A00                       		bpl.s	loc_15E8E
0001714C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017152 117C 0001 0038             		move.b	#1,$38(a0)
00017158                            
00017158                            loc_15E7C:
00017158 5068 003A                  		addq.w	#8,$3A(a0)
0001715C 3028 003A                  		move.w	$3A(a0),d0
00017160 B068 003C                  		cmp.w	$3C(a0),d0
00017164 6600                       		bne.s	loc_15E8E
00017166 4228 0038                  		clr.b	$38(a0)
0001716A                            
0001716A                            loc_15E8E:
0001716A 3028 003A                  		move.w	$3A(a0),d0
0001716E 0828 0000 0022             		btst	#0,$22(a0)
00017174 6700                       		beq.s	loc_15EA0
00017176 4440                       		neg.w	d0
00017178 0640 0038                  		addi.w	#$38,d0
0001717C                            
0001717C                            loc_15EA0:
0001717C 3228 0030                  		move.w	$30(a0),d1
00017180 D240                       		add.w	d0,d1
00017182 3141 000C                  		move.w	d1,$C(a0)
00017186 4E75                       		rts	
00017188                            ; ===========================================================================
00017188                            
00017188                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017188 4A28 0038                  		tst.b	$38(a0)
0001718C 6600                       		bne.s	loc_15ED0
0001718E 4A68 003A                  		tst.w	$3A(a0)
00017192 6700                       		beq.s	loc_15EBE
00017194 5168 003A                  		subq.w	#8,$3A(a0)
00017198 6000                       		bra.s	loc_15EF0
0001719A                            ; ===========================================================================
0001719A                            
0001719A                            loc_15EBE:
0001719A 5368 0036                  		subq.w	#1,$36(a0)
0001719E 6A00                       		bpl.s	loc_15EF0
000171A0 317C 003C 0036             		move.w	#$3C,$36(a0)
000171A6 117C 0001 0038             		move.b	#1,$38(a0)
000171AC                            
000171AC                            loc_15ED0:
000171AC 3028 003A                  		move.w	$3A(a0),d0
000171B0 B068 003C                  		cmp.w	$3C(a0),d0
000171B4 6700                       		beq.s	loc_15EE0
000171B6 5068 003A                  		addq.w	#8,$3A(a0)
000171BA 6000                       		bra.s	loc_15EF0
000171BC                            ; ===========================================================================
000171BC                            
000171BC                            loc_15EE0:
000171BC 5368 0036                  		subq.w	#1,$36(a0)
000171C0 6A00                       		bpl.s	loc_15EF0
000171C2 317C 003C 0036             		move.w	#$3C,$36(a0)
000171C8 4228 0038                  		clr.b	$38(a0)
000171CC                            
000171CC                            loc_15EF0:
000171CC 3028 003A                  		move.w	$3A(a0),d0
000171D0 0828 0000 0022             		btst	#0,$22(a0)
000171D6 6700                       		beq.s	loc_15F02
000171D8 4440                       		neg.w	d0
000171DA 0640 0038                  		addi.w	#$38,d0
000171DE                            
000171DE                            loc_15F02:
000171DE 3228 0030                  		move.w	$30(a0),d1
000171E2 D240                       		add.w	d0,d1
000171E4 3141 000C                  		move.w	d1,$C(a0)
000171E8 4E75                       		rts	
000171EA                            ; ===========================================================================
000171EA                            
000171EA                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000171EA 4A28 0038                  		tst.b	$38(a0)
000171EE 6600                       		bne.s	loc_15F3E
000171F0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000171F4 7000                       		moveq	#0,d0
000171F6 1028 003E                  		move.b	$3E(a0),d0
000171FA 0832 0000 0000             		btst	#0,(a2,d0.w)
00017200 6700                       		beq.s	locret_15F5C
00017202 117C 0001 0038             		move.b	#1,$38(a0)
00017208 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001720C 7000                       		moveq	#0,d0
0001720E 1028 0023                  		move.b	$23(a0),d0
00017212 6700                       		beq.s	loc_15F3E
00017214 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001721A                            
0001721A                            loc_15F3E:
0001721A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017222 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001722A 3168 0008 0034             		move.w	8(a0),$34(a0)
00017230 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017236 6700                       		beq.s	loc_15F5E
00017238                            
00017238                            locret_15F5C:
00017238 4E75                       		rts	
0001723A                            ; ===========================================================================
0001723A                            
0001723A                            loc_15F5E:
0001723A 4228 0028                  		clr.b	$28(a0)
0001723E 4228 0038                  		clr.b	$38(a0)
00017242 4E75                       		rts	
00017244                            ; ===========================================================================
00017244                            ; ---------------------------------------------------------------------------
00017244                            ; Sprite mappings - stomper and	platforms (SBZ)
00017244                            ; ---------------------------------------------------------------------------
00017244                            Map_obj6B:
00017244                            	include "_maps\obj6B.asm"
00017244                            ; ---------------------------------------------------------------------------
00017244                            ; Sprite mappings - stomper and	platforms (SBZ)
00017244                            ; ---------------------------------------------------------------------------
00017244 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017248 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001724C 0000                       		dc.w byte_15FB0-Map_obj6B
0001724E 04                         byte_15F72:	dc.b 4
0001724F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017254 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017259 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001725E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017263 08                         byte_15F87:	dc.b 8
00017264 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017269 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001726E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017273 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017278 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001727D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017282 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017287 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001728C 0E                         byte_15FB0:	dc.b $E
0001728D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017292 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017297 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001729C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000172A1 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000172A6 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000172AB C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000172B0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000172B5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000172BA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000172BF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000172C4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000172C9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000172CE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000172D4 00                         		even
000172D4 00                         		even
000172D4                            
000172D4                            ; ===========================================================================
000172D4                            ; ---------------------------------------------------------------------------
000172D4                            ; Object 6C - vanishing	platforms (SBZ)
000172D4                            ; ---------------------------------------------------------------------------
000172D4                            
000172D4                            Obj6C:					; XREF: Obj_Index
000172D4 7000                       		moveq	#0,d0
000172D6 1028 0024                  		move.b	$24(a0),d0
000172DA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000172DE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000172E2                            ; ===========================================================================
000172E2 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000172E4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000172E6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000172E8 0000                       		dc.w loc_16068-Obj6C_Index
000172EA                            ; ===========================================================================
000172EA                            
000172EA                            Obj6C_Main:				; XREF: Obj6C_Index
000172EA 5C28 0024                  		addq.b	#6,$24(a0)
000172EE 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000172F6 317C 44C3 0002             		move.w	#$44C3,2(a0)
000172FC 0028 0004 0001             		ori.b	#4,1(a0)
00017302 117C 0010 0019             		move.b	#$10,$19(a0)
00017308 117C 0004 0018             		move.b	#4,$18(a0)
0001730E 7000                       		moveq	#0,d0
00017310 1028 0028                  		move.b	$28(a0),d0	; get object type
00017314 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017318 5240                       		addq.w	#1,d0		; add 1
0001731A EF48                       		lsl.w	#7,d0		; multiply by $80
0001731C 3200                       		move.w	d0,d1
0001731E 5340                       		subq.w	#1,d0
00017320 3140 0030                  		move.w	d0,$30(a0)
00017324 3140 0032                  		move.w	d0,$32(a0)
00017328 7000                       		moveq	#0,d0
0001732A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001732E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017332 0641 0080                  		addi.w	#$80,d1
00017336 C0C1                       		mulu.w	d1,d0
00017338 E088                       		lsr.l	#8,d0
0001733A 3140 0036                  		move.w	d0,$36(a0)
0001733E 5341                       		subq.w	#1,d1
00017340 3141 0038                  		move.w	d1,$38(a0)
00017344                            
00017344                            loc_16068:				; XREF: Obj6C_Index
00017344 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017348 9068 0036                  		sub.w	$36(a0),d0
0001734C C068 0038                  		and.w	$38(a0),d0
00017350 6600                       		bne.s	Obj6C_Animate
00017352 5928 0024                  		subq.b	#4,$24(a0)
00017356 6000                       		bra.s	Obj6C_Vanish
00017358                            ; ===========================================================================
00017358                            
00017358                            Obj6C_Animate:
00017358 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001735E 4EB9 0000 B832             		jsr	AnimateSprite
00017364 6000 9526                  		bra.w	MarkObjGone
00017368                            ; ===========================================================================
00017368                            
00017368                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017368 5368 0030                  		subq.w	#1,$30(a0)
0001736C 6A00                       		bpl.s	loc_160AA
0001736E 317C 007F 0030             		move.w	#127,$30(a0)
00017374 4A28 001C                  		tst.b	$1C(a0)
00017378 6700                       		beq.s	loc_160A4
0001737A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017380                            
00017380                            loc_160A4:
00017380 0868 0000 001C             		bchg	#0,$1C(a0)
00017386                            
00017386                            loc_160AA:
00017386 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001738C 4EB9 0000 B832             		jsr	AnimateSprite
00017392 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017398 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001739A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000173A0 6600                       		bne.s	loc_160D6
000173A2 7200                       		moveq	#0,d1
000173A4 1228 0019                  		move.b	$19(a0),d1
000173A8 4EB9 0000 83EE             		jsr	(PlatformObject).l
000173AE 6000 94DC                  		bra.w	MarkObjGone
000173B2                            ; ===========================================================================
000173B2                            
000173B2                            loc_160D6:
000173B2 7200                       		moveq	#0,d1
000173B4 1228 0019                  		move.b	$19(a0),d1
000173B8 4EB9 0000 8562             		jsr	(ExitPlatform).l
000173BE 3428 0008                  		move.w	8(a0),d2
000173C2 4EB9 0000 8ACC             		jsr	(MvSonicOnPtfm2).l
000173C8 6000 94C2                  		bra.w	MarkObjGone
000173CC                            ; ===========================================================================
000173CC                            
000173CC                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000173CC 0828 0003 0022             		btst	#3,$22(a0)
000173D2 6700                       		beq.s	Obj6C_Display
000173D4 43F8 D000                  		lea	($FFFFD000).w,a1
000173D8 08A9 0003 0022             		bclr	#3,$22(a1)
000173DE 08A8 0003 0022             		bclr	#3,$22(a0)
000173E4 117C 0002 0024             		move.b	#2,$24(a0)
000173EA 4228 0025                  		clr.b	$25(a0)
000173EE                            
000173EE                            Obj6C_Display:
000173EE 6000 949C                  		bra.w	MarkObjGone
000173F2                            ; ===========================================================================
000173F2                            Ani_obj6C:
000173F2                            	include "_anim\obj6C.asm"
000173F2                            ; ---------------------------------------------------------------------------
000173F2                            ; Animation script - vanishing platforms (SBZ)
000173F2                            ; ---------------------------------------------------------------------------
000173F2 0000                       		dc.w byte_1611A-Ani_obj6C
000173F4 0000                       		dc.w byte_16122-Ani_obj6C
000173F6 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000173FE 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017406                            		even
00017406                            		even
00017406                            
00017406                            ; ---------------------------------------------------------------------------
00017406                            ; Sprite mappings - vanishing platforms	(SBZ)
00017406                            ; ---------------------------------------------------------------------------
00017406                            Map_obj6C:
00017406                            	include "_maps\obj6C.asm"
00017406                            ; ---------------------------------------------------------------------------
00017406                            ; Sprite mappings - vanishing platforms	(SBZ)
00017406                            ; ---------------------------------------------------------------------------
00017406 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001740A 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001740E 01                         byte_16132:	dc.b 1
0001740F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017414 01                         byte_16138:	dc.b 1
00017415 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001741A 01                         byte_1613E:	dc.b 1
0001741B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017420 00                         byte_16144:	dc.b 0
00017422 00                         		even
00017422 00                         		even
00017422                            
00017422                            ; ===========================================================================
00017422                            ; ---------------------------------------------------------------------------
00017422                            ; Object 6E - electrocution orbs (SBZ)
00017422                            ; ---------------------------------------------------------------------------
00017422                            
00017422                            Obj6E:					; XREF: Obj_Index
00017422 7000                       		moveq	#0,d0
00017424 1028 0024                  		move.b	$24(a0),d0
00017428 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001742C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017430                            ; ===========================================================================
00017430 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017432 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017434                            ; ===========================================================================
00017434                            
00017434                            Obj6E_Main:				; XREF: Obj6E_Index
00017434 5428 0024                  		addq.b	#2,$24(a0)
00017438 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017440 317C 047E 0002             		move.w	#$47E,2(a0)
00017446 0028 0004 0001             		ori.b	#4,1(a0)
0001744C 117C 0028 0019             		move.b	#$28,$19(a0)
00017452 7000                       		moveq	#0,d0
00017454 1028 0028                  		move.b	$28(a0),d0	; read object type
00017458 E948                       		lsl.w	#4,d0		; multiply by $10
0001745A 5340                       		subq.w	#1,d0
0001745C 3140 0034                  		move.w	d0,$34(a0)
00017460                            
00017460                            Obj6E_Shock:				; XREF: Obj6E_Index
00017460 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017464 C068 0034                  		and.w	$34(a0),d0
00017468 6600                       		bne.s	Obj6E_Animate
0001746A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017470 4A28 0001                  		tst.b	1(a0)
00017474 6A00                       		bpl.s	Obj6E_Animate
00017476 303C 00B1                  		move.w	#$B1,d0
0001747A 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play electricity sound
00017480                            
00017480                            Obj6E_Animate:
00017480 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017486 4EB9 0000 B832             		jsr	AnimateSprite
0001748C 117C 0000 0020             		move.b	#0,$20(a0)
00017492 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017498 6600                       		bne.s	Obj6E_Display	; if not, branch
0001749A 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000174A0                            
000174A0                            Obj6E_Display:
000174A0 6000 93EA                  		bra.w	MarkObjGone
000174A4                            ; ===========================================================================
000174A4                            Ani_obj6E:
000174A4                            	include "_anim\obj6E.asm"
000174A4                            ; ---------------------------------------------------------------------------
000174A4                            ; Animation script - electrocution orbs (SBZ)
000174A4                            ; ---------------------------------------------------------------------------
000174A4 0000                       		dc.w byte_161CC-Ani_obj6E
000174A6 0000                       		dc.w byte_161D0-Ani_obj6E
000174A8 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000174AC 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000174BC                            		even
000174BC                            		even
000174BC                            
000174BC                            ; ---------------------------------------------------------------------------
000174BC                            ; Sprite mappings - electrocution orbs (SBZ)
000174BC                            ; ---------------------------------------------------------------------------
000174BC                            Map_obj6E:
000174BC                            	include "_maps\obj6E.asm"
000174BC                            Map_26ed:
000174BC 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000174BE 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000174C0 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000174C2 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000174C4 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000174C6 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000174C8 01                         Map_26ed_C: 	dc.b $1
000174C9 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000174CE 02                         Map_26ed_12: 	dc.b $2
000174CF F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174D4 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174D9 06                         Map_26ed_1D: 	dc.b $6
000174DA F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174DF 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174E4 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000174E9 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000174EE F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000174F3 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000174F8 08                         Map_26ed_3C: 	dc.b $8
000174F9 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174FE 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017503 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00017508 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001750D F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00017512 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017517 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001751C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00017521 06                         Map_26ed_65: 	dc.b $6
00017522 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017527 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001752C F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00017531 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017536 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001753B F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00017540 04                         Map_26ed_84: 	dc.b $4
00017541 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017546 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001754B F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017550 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00017556 00                         	even
00017556 00                         	even
00017556                            
00017556                            ; ===========================================================================
00017556                            ; ---------------------------------------------------------------------------
00017556                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017556                            ; ---------------------------------------------------------------------------
00017556                            
00017556                            Obj6F:					; XREF: Obj_Index
00017556 7000                       		moveq	#0,d0
00017558 1028 0024                  		move.b	$24(a0),d0
0001755C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017560 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017564 3028 0030                  		move.w	$30(a0),d0
00017568 0240 FF80                  		andi.w	#$FF80,d0
0001756C 3238 F700                  		move.w	($FFFFF700).w,d1
00017570 0441 0080                  		subi.w	#$80,d1
00017574 0241 FF80                  		andi.w	#$FF80,d1
00017578 9041                       		sub.w	d1,d0
0001757A 0C40 0280                  		cmpi.w	#$280,d0
0001757E 6200                       		bhi.s	loc_1629A
00017580                            
00017580                            Obj6F_Display:
00017580 4EF9 0000 E7E4             		jmp	DisplaySprite
00017586                            ; ===========================================================================
00017586                            
00017586                            loc_1629A:
00017586 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001758C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001758E 0C40 FF80                  		cmpi.w	#-$80,d0
00017592 64EC                       		bcc.s	Obj6F_Display
00017594                            
00017594                            Obj6F_Act1or2:
00017594 1028 002F                  		move.b	$2F(a0),d0
00017598 6A00                       		bpl.s	Obj6F_Delete
0001759A 0240 007F                  		andi.w	#$7F,d0
0001759E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000175A2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000175A8                            
000175A8                            Obj6F_Delete:
000175A8 4EF9 0000 E820             		jmp	DeleteObject
000175AE                            ; ===========================================================================
000175AE 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000175B0 0000                       		dc.w loc_163D8-Obj6F_Index
000175B2                            ; ===========================================================================
000175B2                            
000175B2                            Obj6F_Main:				; XREF: Obj6F_Index
000175B2 1028 0028                  		move.b	$28(a0),d0
000175B6 6B00 0000                  		bmi.w	loc_16380
000175BA 5428 0024                  		addq.b	#2,$24(a0)
000175BE 217C 0001 6C16 0004        		move.l	#Map_obj69a,4(a0)
000175C6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000175CC 117C 0010 0019             		move.b	#$10,$19(a0)
000175D2 0028 0004 0001             		ori.b	#4,1(a0)
000175D8 117C 0004 0018             		move.b	#4,$18(a0)
000175DE 7000                       		moveq	#0,d0
000175E0 1028 0028                  		move.b	$28(a0),d0
000175E4 3200                       		move.w	d0,d1
000175E6 E648                       		lsr.w	#3,d0
000175E8 0240 001E                  		andi.w	#$1E,d0
000175EC 45FA 0000                  		lea	off_164A6(pc),a2
000175F0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000175F4 315A 0038                  		move.w	(a2)+,$38(a0)
000175F8 315A 0030                  		move.w	(a2)+,$30(a0)
000175FC 214A 003C                  		move.l	a2,$3C(a0)
00017600 0241 000F                  		andi.w	#$F,d1
00017604 E549                       		lsl.w	#2,d1
00017606 1141 0038                  		move.b	d1,$38(a0)
0001760A 117C 0004 003A             		move.b	#4,$3A(a0)
00017610 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017614 6700                       		beq.s	loc_16356
00017616 117C 0001 003B             		move.b	#1,$3B(a0)
0001761C 4428 003A                  		neg.b	$3A(a0)
00017620 7200                       		moveq	#0,d1
00017622 1228 0038                  		move.b	$38(a0),d1
00017626 D228 003A                  		add.b	$3A(a0),d1
0001762A B228 0039                  		cmp.b	$39(a0),d1
0001762E 6500                       		bcs.s	loc_16352
00017630 1001                       		move.b	d1,d0
00017632 7200                       		moveq	#0,d1
00017634 4A00                       		tst.b	d0
00017636 6A00                       		bpl.s	loc_16352
00017638 1228 0039                  		move.b	$39(a0),d1
0001763C 5901                       		subq.b	#4,d1
0001763E                            
0001763E                            loc_16352:
0001763E 1141 0038                  		move.b	d1,$38(a0)
00017642                            
00017642                            loc_16356:
00017642 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017648 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001764E 4A41                       		tst.w	d1
00017650 6600                       		bne.s	loc_1636C
00017652 117C 0001 001C             		move.b	#1,$1C(a0)
00017658                            
00017658                            loc_1636C:
00017658 0C41 0008                  		cmpi.w	#8,d1
0001765C 6600                       		bne.s	loc_16378
0001765E 117C 0000 001C             		move.b	#0,$1C(a0)
00017664                            
00017664                            loc_16378:
00017664 6100 C0C0                  		bsr.w	Obj63_ChangeDir
00017668 6000 0000                  		bra.w	loc_163D8
0001766C                            ; ===========================================================================
0001766C                            
0001766C                            loc_16380:				; XREF: Obj6F_Main
0001766C 1140 002F                  		move.b	d0,$2F(a0)
00017670 0240 007F                  		andi.w	#$7F,d0
00017674 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017678 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001767E 6700                       		beq.s	loc_1639A
00017680 4EF9 0000 E820             		jmp	DeleteObject
00017686                            ; ===========================================================================
00017686                            
00017686                            loc_1639A:
00017686 D040                       		add.w	d0,d0
00017688 0240 001E                  		andi.w	#$1E,d0
0001768C 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00017692 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017696 321A                       		move.w	(a2)+,d1
00017698 2248                       		movea.l	a0,a1
0001769A 6000                       		bra.s	Obj6F_LoadPform
0001769C                            ; ===========================================================================
0001769C                            
0001769C                            Obj6F_Loop:
0001769C 4EB9 0000 EC6A             		jsr	SingleObjLoad
000176A2 6600                       		bne.s	loc_163D0
000176A4                            
000176A4                            Obj6F_LoadPform:			; XREF: loc_1639A
000176A4 12BC 006F                  		move.b	#$6F,0(a1)
000176A8 335A 0008                  		move.w	(a2)+,8(a1)
000176AC 335A 000C                  		move.w	(a2)+,$C(a1)
000176B0 301A                       		move.w	(a2)+,d0
000176B2 1340 0028                  		move.b	d0,$28(a1)
000176B6                            
000176B6                            loc_163D0:
000176B6 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000176BA                            
000176BA 588F                       		addq.l	#4,sp
000176BC 4E75                       		rts	
000176BE                            ; ===========================================================================
000176BE                            
000176BE                            loc_163D8:				; XREF: Obj6F_Index
000176BE 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000176C4 4EB9 0000 B832             		jsr	AnimateSprite
000176CA 4A28 001A                  		tst.b	$1A(a0)
000176CE 6600                       		bne.s	loc_16404
000176D0 3F28 0008                  		move.w	8(a0),-(sp)
000176D4 6100 0000                  		bsr.w	loc_16424
000176D8 323C 001B                  		move.w	#$1B,d1
000176DC 343C 0007                  		move.w	#7,d2
000176E0 3602                       		move.w	d2,d3
000176E2 5243                       		addq.w	#1,d3
000176E4 381F                       		move.w	(sp)+,d4
000176E6 6000 94CC                  		bra.w	SolidObject
000176EA                            ; ===========================================================================
000176EA                            
000176EA                            loc_16404:
000176EA 0828 0003 0022             		btst	#3,$22(a0)
000176F0 6700                       		beq.s	loc_16420
000176F2 43F8 D000                  		lea	($FFFFD000).w,a1
000176F6 08A9 0003 0022             		bclr	#3,$22(a1)
000176FC 08A8 0003 0022             		bclr	#3,$22(a0)
00017702 4228 0025                  		clr.b	$25(a0)
00017706                            
00017706                            loc_16420:
00017706 6000 0002                  		bra.w	*+4
0001770A                            
0001770A                            loc_16424:
0001770A 3028 0008                  		move.w	8(a0),d0
0001770E B068 0034                  		cmp.w	$34(a0),d0
00017712 6600                       		bne.s	loc_16484
00017714 3028 000C                  		move.w	$C(a0),d0
00017718 B068 0036                  		cmp.w	$36(a0),d0
0001771C 6600                       		bne.s	loc_16484
0001771E 7200                       		moveq	#0,d1
00017720 1228 0038                  		move.b	$38(a0),d1
00017724 D228 003A                  		add.b	$3A(a0),d1
00017728 B228 0039                  		cmp.b	$39(a0),d1
0001772C 6500                       		bcs.s	loc_16456
0001772E 1001                       		move.b	d1,d0
00017730 7200                       		moveq	#0,d1
00017732 4A00                       		tst.b	d0
00017734 6A00                       		bpl.s	loc_16456
00017736 1228 0039                  		move.b	$39(a0),d1
0001773A 5901                       		subq.b	#4,d1
0001773C                            
0001773C                            loc_16456:
0001773C 1141 0038                  		move.b	d1,$38(a0)
00017740 2268 003C                  		movea.l	$3C(a0),a1
00017744 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001774A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017750 4A41                       		tst.w	d1
00017752 6600                       		bne.s	loc_16474
00017754 117C 0001 001C             		move.b	#1,$1C(a0)
0001775A                            
0001775A                            loc_16474:
0001775A 0C41 0008                  		cmpi.w	#8,d1
0001775E 6600                       		bne.s	loc_16480
00017760 117C 0000 001C             		move.b	#0,$1C(a0)
00017766                            
00017766                            loc_16480:
00017766 6100 BFBE                  		bsr.w	Obj63_ChangeDir
0001776A                            
0001776A                            loc_16484:
0001776A 4EF9 0000 E7BE             		jmp	SpeedToPos
00017770                            ; ===========================================================================
00017770                            Ani_obj6F:
00017770                            	include "_anim\obj6F.asm"
00017770                            ; ---------------------------------------------------------------------------
00017770                            ; Animation script - platform on conveyor belt (SBZ)
00017770                            ; ---------------------------------------------------------------------------
00017770 0000                       		dc.w byte_1648E-Ani_obj6F
00017772 0000                       		dc.w byte_164A2-Ani_obj6F
00017774 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017781 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017788 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001778C 00                         		even
0001778C 00                         		even
0001778C                            
0001778C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017792 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017798 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000177AC 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000177C0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000177D4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000177E8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000177FC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017810                            ; ===========================================================================
00017810                            ; ---------------------------------------------------------------------------
00017810                            ; Object 70 - large girder block (SBZ)
00017810                            ; ---------------------------------------------------------------------------
00017810                            
00017810                            Obj70:					; XREF: Obj_Index
00017810 7000                       		moveq	#0,d0
00017812 1028 0024                  		move.b	$24(a0),d0
00017816 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001781A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001781E                            ; ===========================================================================
0001781E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017820 0000                       		dc.w Obj70_Action-Obj70_Index
00017822                            ; ===========================================================================
00017822                            
00017822                            Obj70_Main:				; XREF: Obj70_Index
00017822 5428 0024                  		addq.b	#2,$24(a0)
00017826 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001782E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017834 0028 0004 0001             		ori.b	#4,1(a0)
0001783A 117C 0004 0018             		move.b	#4,$18(a0)
00017840 117C 0060 0019             		move.b	#$60,$19(a0)
00017846 117C 0018 0016             		move.b	#$18,$16(a0)
0001784C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017852 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017858 6100 0000                  		bsr.w	Obj70_Move2
0001785C                            
0001785C                            Obj70_Action:				; XREF: Obj70_Index
0001785C 3F28 0008                  		move.w	8(a0),-(sp)
00017860 4A68 003A                  		tst.w	$3A(a0)
00017864 6700                       		beq.s	Obj70_Move
00017866 5368 003A                  		subq.w	#1,$3A(a0)
0001786A 6600                       		bne.s	Obj70_Solid
0001786C                            
0001786C                            Obj70_Move:
0001786C 4EB9 0000 E7BE             		jsr	SpeedToPos
00017872 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017876 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017878 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
0001787C                            
0001787C                            Obj70_Solid:
0001787C 381F                       		move.w	(sp)+,d4
0001787E 4A28 0001                  		tst.b	1(a0)
00017882 6A00                       		bpl.s	Obj70_ChkDel
00017884 7200                       		moveq	#0,d1
00017886 1228 0019                  		move.b	$19(a0),d1
0001788A 0641 000B                  		addi.w	#$B,d1
0001788E 7400                       		moveq	#0,d2
00017890 1428 0016                  		move.b	$16(a0),d2
00017894 3602                       		move.w	d2,d3
00017896 5243                       		addq.w	#1,d3
00017898 6100 931A                  		bsr.w	SolidObject
0001789C                            
0001789C                            Obj70_ChkDel:
0001789C 3028 0032                  		move.w	$32(a0),d0
000178A0 0240 FF80                  		andi.w	#$FF80,d0
000178A4 3238 F700                  		move.w	($FFFFF700).w,d1
000178A8 0441 0080                  		subi.w	#$80,d1
000178AC 0241 FF80                  		andi.w	#$FF80,d1
000178B0 9041                       		sub.w	d1,d0
000178B2 0C40 0280                  		cmpi.w	#$280,d0
000178B6 6200                       		bhi.s	Obj70_Delete
000178B8 4EF9 0000 E7E4             		jmp	DisplaySprite
000178BE                            ; ===========================================================================
000178BE                            
000178BE                            Obj70_Delete:
000178BE 4EF9 0000 E820             		jmp	DeleteObject
000178C4                            ; ===========================================================================
000178C4                            
000178C4                            Obj70_Move2:				; XREF: Obj70_Main
000178C4 1028 0038                  		move.b	$38(a0),d0
000178C8 0240 0018                  		andi.w	#$18,d0
000178CC 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000178D2 43F1 0000                  		lea	(a1,d0.w),a1
000178D6 3159 0010                  		move.w	(a1)+,$10(a0)
000178DA 3159 0012                  		move.w	(a1)+,$12(a0)
000178DE 3159 0034                  		move.w	(a1)+,$34(a0)
000178E2 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000178E6 317C 0007 003A             		move.w	#7,$3A(a0)
000178EC 4E75                       		rts	
000178EE                            ; ===========================================================================
000178EE 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000178F6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000178FE FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017906 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001790E                            ; ---------------------------------------------------------------------------
0001790E                            ; Sprite mappings - large girder block (SBZ)
0001790E                            ; ---------------------------------------------------------------------------
0001790E                            Map_obj70:
0001790E                            	include "_maps\obj70.asm"
0001790E                            ; ---------------------------------------------------------------------------
0001790E                            ; Sprite mappings - large girder block (SBZ)
0001790E                            ; ---------------------------------------------------------------------------
0001790E 0000                       		dc.w byte_1662A-Map_obj70
00017910 0C                         byte_1662A:	dc.b $C
00017911 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017916 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001791B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017920 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017925 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001792A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001792F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017934 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017939 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001793E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00017943 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017948 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001794E 00                         		even
0001794E 00                         		even
0001794E                            
0001794E                            ; ===========================================================================
0001794E                            ; ---------------------------------------------------------------------------
0001794E                            ; Object 72 - teleporter (SBZ)
0001794E                            ; ---------------------------------------------------------------------------
0001794E                            
0001794E                            Obj72:					; XREF: Obj_Index
0001794E 7000                       		moveq	#0,d0
00017950 1028 0024                  		move.b	$24(a0),d0
00017954 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00017958 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001795C 3028 0008                  		move.w	8(a0),d0
00017960 0240 FF80                  		andi.w	#$FF80,d0
00017964 3238 F700                  		move.w	($FFFFF700).w,d1
00017968 0441 0080                  		subi.w	#$80,d1
0001796C 0241 FF80                  		andi.w	#$FF80,d1
00017970 9041                       		sub.w	d1,d0
00017972 0C40 0280                  		cmpi.w	#$280,d0
00017976 6200                       		bhi.s	Obj72_Delete
00017978 4E75                       		rts	
0001797A                            ; ===========================================================================
0001797A                            
0001797A                            Obj72_Delete:
0001797A 4EF9 0000 E820             		jmp	DeleteObject
00017980                            ; ===========================================================================
00017980 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017982 0000                       		dc.w loc_166C8-Obj72_Index
00017984 0000                       		dc.w loc_1675E-Obj72_Index
00017986 0000                       		dc.w loc_16798-Obj72_Index
00017988                            ; ===========================================================================
00017988                            
00017988                            Obj72_Main:				; XREF: Obj72_Index
00017988 5428 0024                  		addq.b	#2,$24(a0)
0001798C 1028 0028                  		move.b	$28(a0),d0
00017990 D040                       		add.w	d0,d0
00017992 0240 001E                  		andi.w	#$1E,d0
00017996 45FA 0000                  		lea	Obj72_Data(pc),a2
0001799A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001799E 315A 003A                  		move.w	(a2)+,$3A(a0)
000179A2 214A 003C                  		move.l	a2,$3C(a0)
000179A6 315A 0036                  		move.w	(a2)+,$36(a0)
000179AA 315A 0038                  		move.w	(a2)+,$38(a0)
000179AE                            
000179AE                            loc_166C8:				; XREF: Obj72_Index
000179AE 43F8 D000                  		lea	($FFFFD000).w,a1
000179B2 3029 0008                  		move.w	8(a1),d0
000179B6 9068 0008                  		sub.w	8(a0),d0
000179BA 0828 0000 0022             		btst	#0,$22(a0)
000179C0 6700                       		beq.s	loc_166E0
000179C2 0640 000F                  		addi.w	#$F,d0
000179C6                            
000179C6                            loc_166E0:
000179C6 0C40 0010                  		cmpi.w	#$10,d0
000179CA 6400                       		bcc.s	locret_1675C
000179CC 3229 000C                  		move.w	$C(a1),d1
000179D0 9268 000C                  		sub.w	$C(a0),d1
000179D4 0641 0020                  		addi.w	#$20,d1
000179D8 0C41 0040                  		cmpi.w	#$40,d1
000179DC 6400                       		bcc.s	locret_1675C
000179DE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179E2 6600                       		bne.s	locret_1675C
000179E4 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000179EA 6600                       		bne.s	loc_1670E
000179EC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000179F2 6500                       		bcs.s	locret_1675C
000179F4                            
000179F4                            loc_1670E:
000179F4 5428 0024                  		addq.b	#2,$24(a0)
000179F8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000179FE 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017A04 337C 0800 0014             		move.w	#$800,$14(a1)
00017A0A 337C 0000 0010             		move.w	#0,$10(a1)
00017A10 337C 0000 0012             		move.w	#0,$12(a1)
00017A16 08A8 0005 0022             		bclr	#5,$22(a0)
00017A1C 08A9 0005 0022             		bclr	#5,$22(a1)
00017A22 08E9 0001 0022             		bset	#1,$22(a1)
00017A28 3368 0008 0008             		move.w	8(a0),8(a1)
00017A2E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017A34 4228 0032                  		clr.b	$32(a0)
00017A38 303C 00BE                  		move.w	#$BE,d0
00017A3C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017A42                            
00017A42                            locret_1675C:
00017A42 4E75                       		rts	
00017A44                            ; ===========================================================================
00017A44                            
00017A44                            loc_1675E:				; XREF: Obj72_Index
00017A44 43F8 D000                  		lea	($FFFFD000).w,a1
00017A48 1028 0032                  		move.b	$32(a0),d0
00017A4C 5428 0032                  		addq.b	#2,$32(a0)
00017A50 4EB9 0000 34B8             		jsr	(CalcSine).l
00017A56 EA40                       		asr.w	#5,d0
00017A58 3428 000C                  		move.w	$C(a0),d2
00017A5C 9440                       		sub.w	d0,d2
00017A5E 3342 000C                  		move.w	d2,$C(a1)
00017A62 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017A68 6600                       		bne.s	locret_16796
00017A6A 6100 0000                  		bsr.w	sub_1681C
00017A6E 5428 0024                  		addq.b	#2,$24(a0)
00017A72 303C 00BC                  		move.w	#$BC,d0
00017A76 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play teleport sound
00017A7C                            
00017A7C                            locret_16796:
00017A7C 4E75                       		rts	
00017A7E                            ; ===========================================================================
00017A7E                            
00017A7E                            loc_16798:				; XREF: Obj72_Index
00017A7E 588F                       		addq.l	#4,sp
00017A80 43F8 D000                  		lea	($FFFFD000).w,a1
00017A84 5328 002E                  		subq.b	#1,$2E(a0)
00017A88 6A00                       		bpl.s	loc_167DA
00017A8A 3368 0036 0008             		move.w	$36(a0),8(a1)
00017A90 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017A96 7200                       		moveq	#0,d1
00017A98 1228 003A                  		move.b	$3A(a0),d1
00017A9C 5801                       		addq.b	#4,d1
00017A9E B228 003B                  		cmp.b	$3B(a0),d1
00017AA2 6500                       		bcs.s	loc_167C2
00017AA4 7200                       		moveq	#0,d1
00017AA6 6000                       		bra.s	loc_16800
00017AA8                            ; ===========================================================================
00017AA8                            
00017AA8                            loc_167C2:
00017AA8 1141 003A                  		move.b	d1,$3A(a0)
00017AAC 2468 003C                  		movea.l	$3C(a0),a2
00017AB0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017AB6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017ABC 6000 0000                  		bra.w	sub_1681C
00017AC0                            ; ===========================================================================
00017AC0                            
00017AC0                            loc_167DA:
00017AC0 2429 0008                  		move.l	8(a1),d2
00017AC4 2629 000C                  		move.l	$C(a1),d3
00017AC8 3029 0010                  		move.w	$10(a1),d0
00017ACC 48C0                       		ext.l	d0
00017ACE E180                       		asl.l	#8,d0
00017AD0 D480                       		add.l	d0,d2
00017AD2 3029 0012                  		move.w	$12(a1),d0
00017AD6 48C0                       		ext.l	d0
00017AD8 E180                       		asl.l	#8,d0
00017ADA D680                       		add.l	d0,d3
00017ADC 2342 0008                  		move.l	d2,8(a1)
00017AE0 2343 000C                  		move.l	d3,$C(a1)
00017AE4 4E75                       		rts	
00017AE6                            ; ===========================================================================
00017AE6                            
00017AE6                            loc_16800:
00017AE6 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017AEC 4228 0024                  		clr.b	$24(a0)
00017AF0 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017AF4 337C 0000 0010             		move.w	#0,$10(a1)
00017AFA 337C 0200 0012             		move.w	#$200,$12(a1)
00017B00 4E75                       		rts	
00017B02                            
00017B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B02                            
00017B02                            
00017B02                            sub_1681C:
00017B02 7000                       		moveq	#0,d0
00017B04 343C 1000                  		move.w	#$1000,d2
00017B08 3028 0036                  		move.w	$36(a0),d0
00017B0C 9069 0008                  		sub.w	8(a1),d0
00017B10 6C00                       		bge.s	loc_16830
00017B12 4440                       		neg.w	d0
00017B14 4442                       		neg.w	d2
00017B16                            
00017B16                            loc_16830:
00017B16 7200                       		moveq	#0,d1
00017B18 363C 1000                  		move.w	#$1000,d3
00017B1C 3228 0038                  		move.w	$38(a0),d1
00017B20 9269 000C                  		sub.w	$C(a1),d1
00017B24 6C00                       		bge.s	loc_16844
00017B26 4441                       		neg.w	d1
00017B28 4443                       		neg.w	d3
00017B2A                            
00017B2A                            loc_16844:
00017B2A B240                       		cmp.w	d0,d1
00017B2C 6500                       		bcs.s	loc_1687A
00017B2E 7200                       		moveq	#0,d1
00017B30 3228 0038                  		move.w	$38(a0),d1
00017B34 9269 000C                  		sub.w	$C(a1),d1
00017B38 4841                       		swap	d1
00017B3A 83C3                       		divs.w	d3,d1
00017B3C 7000                       		moveq	#0,d0
00017B3E 3028 0036                  		move.w	$36(a0),d0
00017B42 9069 0008                  		sub.w	8(a1),d0
00017B46 6700                       		beq.s	loc_16866
00017B48 4840                       		swap	d0
00017B4A 81C1                       		divs.w	d1,d0
00017B4C                            
00017B4C                            loc_16866:
00017B4C 3340 0010                  		move.w	d0,$10(a1)
00017B50 3343 0012                  		move.w	d3,$12(a1)
00017B54 4A41                       		tst.w	d1
00017B56 6A00                       		bpl.s	loc_16874
00017B58 4441                       		neg.w	d1
00017B5A                            
00017B5A                            loc_16874:
00017B5A 3141 002E                  		move.w	d1,$2E(a0)
00017B5E 4E75                       		rts	
00017B60                            ; ===========================================================================
00017B60                            
00017B60                            loc_1687A:
00017B60 7000                       		moveq	#0,d0
00017B62 3028 0036                  		move.w	$36(a0),d0
00017B66 9069 0008                  		sub.w	8(a1),d0
00017B6A 4840                       		swap	d0
00017B6C 81C2                       		divs.w	d2,d0
00017B6E 7200                       		moveq	#0,d1
00017B70 3228 0038                  		move.w	$38(a0),d1
00017B74 9269 000C                  		sub.w	$C(a1),d1
00017B78 6700                       		beq.s	loc_16898
00017B7A 4841                       		swap	d1
00017B7C 83C0                       		divs.w	d0,d1
00017B7E                            
00017B7E                            loc_16898:
00017B7E 3341 0012                  		move.w	d1,$12(a1)
00017B82 3342 0010                  		move.w	d2,$10(a1)
00017B86 4A40                       		tst.w	d0
00017B88 6A00                       		bpl.s	loc_168A6
00017B8A 4440                       		neg.w	d0
00017B8C                            
00017B8C                            loc_168A6:
00017B8C 3140 002E                  		move.w	d0,$2E(a0)
00017B90 4E75                       		rts	
00017B92                            ; End of function sub_1681C
00017B92                            
00017B92                            ; ===========================================================================
00017B92 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017B98 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017B9E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017BA2 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017BA8 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017BAE 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017BB4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017BBA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017BC0 0884 0298 0894             		dc.w $884, $298, $894
00017BC6 0270 0894 0190             		dc.w $270, $894, $190
00017BCC 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017BD2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017BD8 1184 0498 1158             		dc.w $1184, $498, $1158
00017BDE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017BE4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017BEA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017BF0 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017BF6 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017BFC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017C02 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017C08 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017C0E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017C14 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017C1A                            ; ===========================================================================
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            
00017C1A                            Obj78:					; XREF: Obj_Index
00017C1A 7000                       		moveq	#0,d0
00017C1C 1028 0024                  		move.b	$24(a0),d0
00017C20 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017C24 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017C28                            ; ===========================================================================
00017C28 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017C2A 0000                       		dc.w Obj78_Action-Obj78_Index
00017C2C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017C2E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017C30 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017C32 0000                       		dc.w Obj78_Delete-Obj78_Index
00017C34 0000                       		dc.w loc_16CC0-Obj78_Index
00017C36                            ; ===========================================================================
00017C36                            
00017C36                            locret_16950:
00017C36 4E75                       		rts	
00017C38                            ; ===========================================================================
00017C38                            
00017C38                            Obj78_Main:				; XREF: Obj78_Index
00017C38 117C 0007 0016             		move.b	#7,$16(a0)
00017C3E 117C 0008 0017             		move.b	#8,$17(a0)
00017C44 4EB9 0000 E74C             		jsr	ObjectFall
00017C4A 4EBA E4AA                  		jsr	ObjHitFloor
00017C4E 4A41                       		tst.w	d1
00017C50 6AE4                       		bpl.s	locret_16950
00017C52 D368 000C                  		add.w	d1,$C(a0)
00017C56 4268 0012                  		clr.w	$12(a0)
00017C5A 5428 0024                  		addq.b	#2,$24(a0)
00017C5E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017C66 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017C6C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017C72 6700                       		beq.s	loc_16996
00017C74 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017C7A                            
00017C7A                            loc_16996:
00017C7A 0228 0003 0001             		andi.b	#3,1(a0)
00017C80 0028 0004 0001             		ori.b	#4,1(a0)
00017C86 1168 0001 0022             		move.b	1(a0),$22(a0)
00017C8C 117C 0004 0018             		move.b	#4,$18(a0)
00017C92 117C 0008 0019             		move.b	#8,$19(a0)
00017C98 117C 000B 0020             		move.b	#$B,$20(a0)
00017C9E 3428 0008                  		move.w	8(a0),d2
00017CA2 7A0C                       		moveq	#$C,d5
00017CA4 0828 0000 0022             		btst	#0,$22(a0)
00017CAA 6700                       		beq.s	loc_169CA
00017CAC 4445                       		neg.w	d5
00017CAE                            
00017CAE                            loc_169CA:
00017CAE 1C3C 0004                  		move.b	#4,d6
00017CB2 7600                       		moveq	#0,d3
00017CB4 7804                       		moveq	#4,d4
00017CB6 2448                       		movea.l	a0,a2
00017CB8 7202                       		moveq	#2,d1
00017CBA                            
00017CBA                            Obj78_LoadBody:
00017CBA 4EB9 0000 EC80             		jsr	SingleObjLoad2
00017CC0 6600                       		bne.s	Obj78_QuitLoad
00017CC2 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017CC6 1346 0024                  		move.b	d6,$24(a1)
00017CCA 5406                       		addq.b	#2,d6
00017CCC 2368 0004 0004             		move.l	4(a0),4(a1)
00017CD2 3368 0002 0002             		move.w	2(a0),2(a1)
00017CD8 137C 0005 0018             		move.b	#5,$18(a1)
00017CDE 137C 0008 0019             		move.b	#8,$19(a1)
00017CE4 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017CEA D445                       		add.w	d5,d2
00017CEC 3342 0008                  		move.w	d2,8(a1)
00017CF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017CF6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017CFC 1368 0022 0001             		move.b	$22(a0),1(a1)
00017D02 137C 0008 001A             		move.b	#8,$1A(a1)
00017D08 234A 003C                  		move.l	a2,$3C(a1)
00017D0C 1344 003C                  		move.b	d4,$3C(a1)
00017D10 5804                       		addq.b	#4,d4
00017D12 2449                       		movea.l	a1,a2
00017D14                            
00017D14                            Obj78_QuitLoad:
00017D14 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017D18                            
00017D18 117C 0007 002A             		move.b	#7,$2A(a0)
00017D1E 4228 003C                  		clr.b	$3C(a0)
00017D22                            
00017D22                            Obj78_Action:				; XREF: Obj78_Index
00017D22 4A28 0022                  		tst.b	$22(a0)
00017D26 6B00 0000                  		bmi.w	loc_16C96
00017D2A 7000                       		moveq	#0,d0
00017D2C 1028 0025                  		move.b	$25(a0),d0
00017D30 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017D34 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017D38 1228 002B                  		move.b	$2B(a0),d1
00017D3C 6A00                       		bpl.s	Obj78_Display
00017D3E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017D44 1028 0026                  		move.b	$26(a0),d0
00017D48 0240 007F                  		andi.w	#$7F,d0
00017D4C 5828 0026                  		addq.b	#4,$26(a0)
00017D50 1031 0000                  		move.b	(a1,d0.w),d0
00017D54 6A00                       		bpl.s	Obj78_AniHead
00017D56 08A8 0007 002B             		bclr	#7,$2B(a0)
00017D5C 6000                       		bra.s	Obj78_Display
00017D5E                            ; ===========================================================================
00017D5E                            
00017D5E                            Obj78_AniHead:
00017D5E 0201 0010                  		andi.b	#$10,d1
00017D62 D001                       		add.b	d1,d0
00017D64 1140 001A                  		move.b	d0,$1A(a0)
00017D68                            
00017D68                            Obj78_Display:
00017D68 3028 0008                  		move.w	8(a0),d0
00017D6C 0240 FF80                  		andi.w	#$FF80,d0
00017D70 3238 F700                  		move.w	($FFFFF700).w,d1
00017D74 0441 0080                  		subi.w	#$80,d1
00017D78 0241 FF80                  		andi.w	#$FF80,d1
00017D7C 9041                       		sub.w	d1,d0
00017D7E 0C40 0280                  		cmpi.w	#$280,d0
00017D82 6200 0000                  		bhi.w	Obj78_ChkGone
00017D86 4EF9 0000 E7E4             		jmp	DisplaySprite
00017D8C                            ; ===========================================================================
00017D8C                            
00017D8C                            Obj78_ChkGone:
00017D8C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D90 7000                       		moveq	#0,d0
00017D92 1028 0023                  		move.b	$23(a0),d0
00017D96 6700                       		beq.s	loc_16ABC
00017D98 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D9E                            
00017D9E                            loc_16ABC:
00017D9E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017DA4 4E75                       		rts	
00017DA6                            ; ===========================================================================
00017DA6                            
00017DA6                            Obj78_Delete:				; XREF: Obj78_Index
00017DA6 4EF9 0000 E820             		jmp	DeleteObject
00017DAC                            ; ===========================================================================
00017DAC 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017DAE 0000                       		dc.w loc_16B02-Obj78_Index2
00017DB0                            ; ===========================================================================
00017DB0                            
00017DB0                            Obj78_Move:				; XREF: Obj78_Index2
00017DB0 5328 002A                  		subq.b	#1,$2A(a0)
00017DB4 6B00                       		bmi.s	Obj78_Move2
00017DB6 4E75                       		rts	
00017DB8                            ; ===========================================================================
00017DB8                            
00017DB8                            Obj78_Move2:
00017DB8 5428 0025                  		addq.b	#2,$25(a0)
00017DBC 117C 0010 002A             		move.b	#$10,$2A(a0)
00017DC2 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017DC8 317C 0040 0014             		move.w	#$40,$14(a0)
00017DCE 0868 0004 002B             		bchg	#4,$2B(a0)
00017DD4 6600                       		bne.s	loc_16AFC
00017DD6 4268 0010                  		clr.w	$10(a0)
00017DDA 4468 0014                  		neg.w	$14(a0)
00017DDE                            
00017DDE                            loc_16AFC:
00017DDE 08E8 0007 002B             		bset	#7,$2B(a0)
00017DE4                            
00017DE4                            loc_16B02:				; XREF: Obj78_Index2
00017DE4 5328 002A                  		subq.b	#1,$2A(a0)
00017DE8 6B00                       		bmi.s	loc_16B5E
00017DEA 2F28 0008                  		move.l	8(a0),-(sp)
00017DEE 2428 0008                  		move.l	8(a0),d2
00017DF2 3028 0010                  		move.w	$10(a0),d0
00017DF6 0828 0000 0022             		btst	#0,$22(a0)
00017DFC 6700                       		beq.s	loc_16B1E
00017DFE 4440                       		neg.w	d0
00017E00                            
00017E00                            loc_16B1E:
00017E00 48C0                       		ext.l	d0
00017E02 E180                       		asl.l	#8,d0
00017E04 D480                       		add.l	d0,d2
00017E06 2142 0008                  		move.l	d2,8(a0)
00017E0A 4EBA E2EA                  		jsr	ObjHitFloor
00017E0E 241F                       		move.l	(sp)+,d2
00017E10 0C41 FFF8                  		cmpi.w	#-8,d1
00017E14 6D00                       		blt.s	loc_16B70
00017E16 0C41 000C                  		cmpi.w	#$C,d1
00017E1A 6C00                       		bge.s	loc_16B70
00017E1C D368 000C                  		add.w	d1,$C(a0)
00017E20 4842                       		swap	d2
00017E22 B468 0008                  		cmp.w	8(a0),d2
00017E26 6700                       		beq.s	locret_16B5C
00017E28 7000                       		moveq	#0,d0
00017E2A 1028 003C                  		move.b	$3C(a0),d0
00017E2E 5228 003C                  		addq.b	#1,$3C(a0)
00017E32 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E38 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017E3C                            
00017E3C                            locret_16B5C:
00017E3C 4E75                       		rts	
00017E3E                            ; ===========================================================================
00017E3E                            
00017E3E                            loc_16B5E:
00017E3E 5528 0025                  		subq.b	#2,$25(a0)
00017E42 117C 0007 002A             		move.b	#7,$2A(a0)
00017E48 317C 0000 0010             		move.w	#0,$10(a0)
00017E4E 4E75                       		rts	
00017E50                            ; ===========================================================================
00017E50                            
00017E50                            loc_16B70:
00017E50 2142 0008                  		move.l	d2,8(a0)
00017E54 0868 0000 0022             		bchg	#0,$22(a0)
00017E5A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017E60 7000                       		moveq	#0,d0
00017E62 1028 003C                  		move.b	$3C(a0),d0
00017E66 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017E6C 5228 003C                  		addq.b	#1,$3C(a0)
00017E70 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E76 4E75                       		rts	
00017E78                            ; ===========================================================================
00017E78                            
00017E78                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017E78 2268 003C                  		movea.l	$3C(a0),a1
00017E7C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017E82 6A00                       		bpl.s	Obj78_BodySeg1
00017E84 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017E8A 1028 0026                  		move.b	$26(a0),d0
00017E8E 0240 007F                  		andi.w	#$7F,d0
00017E92 5828 0026                  		addq.b	#4,$26(a0)
00017E96 4A31 0004                  		tst.b	4(a1,d0.w)
00017E9A 6A00                       		bpl.s	Obj78_AniBody
00017E9C 5828 0026                  		addq.b	#4,$26(a0)
00017EA0                            
00017EA0                            Obj78_AniBody:
00017EA0 1031 0000                  		move.b	(a1,d0.w),d0
00017EA4 5000                       		addq.b	#8,d0
00017EA6 1140 001A                  		move.b	d0,$1A(a0)
00017EAA                            
00017EAA                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017EAA 2268 003C                  		movea.l	$3C(a0),a1
00017EAE 4A28 0022                  		tst.b	$22(a0)
00017EB2 6B00 0000                  		bmi.w	loc_16C90
00017EB6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017EBC 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017EC2 6700 0000                  		beq.w	loc_16C64
00017EC6 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017ECC 3029 0010                  		move.w	$10(a1),d0
00017ED0 D069 0014                  		add.w	$14(a1),d0
00017ED4 3140 0010                  		move.w	d0,$10(a0)
00017ED8 2428 0008                  		move.l	8(a0),d2
00017EDC 2602                       		move.l	d2,d3
00017EDE 3028 0010                  		move.w	$10(a0),d0
00017EE2 0828 0000 0022             		btst	#0,$22(a0)
00017EE8 6700                       		beq.s	loc_16C0C
00017EEA 4440                       		neg.w	d0
00017EEC                            
00017EEC                            loc_16C0C:
00017EEC 48C0                       		ext.l	d0
00017EEE E180                       		asl.l	#8,d0
00017EF0 D480                       		add.l	d0,d2
00017EF2 2142 0008                  		move.l	d2,8(a0)
00017EF6 4843                       		swap	d3
00017EF8 B668 0008                  		cmp.w	8(a0),d3
00017EFC 6700                       		beq.s	loc_16C64
00017EFE 7000                       		moveq	#0,d0
00017F00 1028 003C                  		move.b	$3C(a0),d0
00017F04 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017F08 0C01 0080                  		cmpi.b	#-$80,d1
00017F0C 6600                       		bne.s	loc_16C50
00017F0E 4843                       		swap	d3
00017F10 2143 0008                  		move.l	d3,8(a0)
00017F14 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017F18 0868 0000 0022             		bchg	#0,$22(a0)
00017F1E 1168 0022 0001             		move.b	$22(a0),1(a0)
00017F24 5228 003C                  		addq.b	#1,$3C(a0)
00017F28 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017F2E 6000                       		bra.s	loc_16C64
00017F30                            ; ===========================================================================
00017F30                            
00017F30                            loc_16C50:
00017F30 4881                       		ext.w	d1
00017F32 D368 000C                  		add.w	d1,$C(a0)
00017F36 5228 003C                  		addq.b	#1,$3C(a0)
00017F3A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017F40 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017F44                            
00017F44                            loc_16C64:
00017F44 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017F4A 6700                       		beq.s	loc_16C90
00017F4C 0C11 0027                  		cmpi.b	#$27,0(a1)
00017F50 6700                       		beq.s	loc_16C7C
00017F52 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017F58 6600                       		bne.s	loc_16C82
00017F5A                            
00017F5A                            loc_16C7C:
00017F5A 117C 000A 0024             		move.b	#$A,$24(a0)
00017F60                            
00017F60                            loc_16C82:
00017F60 4EF9 0000 E7E4             		jmp	DisplaySprite
00017F66                            
00017F66                            ; ===========================================================================
00017F66 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017F6E                            ; ===========================================================================
00017F6E                            
00017F6E                            loc_16C90:
00017F6E 08E9 0007 0022             		bset	#7,$22(a1)
00017F74                            
00017F74                            loc_16C96:
00017F74 7000                       		moveq	#0,d0
00017F76 1028 0024                  		move.b	$24(a0),d0
00017F7A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017F7E 0828 0000 0022             		btst	#0,$22(a0)
00017F84 6700                       		beq.s	loc_16CAA
00017F86 4440                       		neg.w	d0
00017F88                            
00017F88                            loc_16CAA:
00017F88 3140 0010                  		move.w	d0,$10(a0)
00017F8C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017F92 117C 000C 0024             		move.b	#$C,$24(a0)
00017F98 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017F9E                            
00017F9E                            loc_16CC0:				; XREF: Obj78_Index
00017F9E 4EB9 0000 E74C             		jsr	ObjectFall
00017FA4 4A68 0012                  		tst.w	$12(a0)
00017FA8 6B00                       		bmi.s	loc_16CE0
00017FAA 4EBA E14A                  		jsr	ObjHitFloor
00017FAE 4A41                       		tst.w	d1
00017FB0 6A00                       		bpl.s	loc_16CE0
00017FB2 D368 000C                  		add.w	d1,$C(a0)
00017FB6 317C FC00 0012             		move.w	#-$400,$12(a0)
00017FBC                            
00017FBC                            loc_16CE0:
00017FBC 4A28 0001                  		tst.b	1(a0)
00017FC0 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017FC4 4EF9 0000 E7E4             		jmp	DisplaySprite
00017FCA                            ; ===========================================================================
00017FCA                            Ani_obj78:
00017FCA                            	include "_anim\obj78.asm"
00017FCA                            ; ---------------------------------------------------------------------------
00017FCA                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017FCA                            ; ---------------------------------------------------------------------------
00017FCA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017FDA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017FEA 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017FFA 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001800A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001801A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001802A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001803A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001804A                            	even
0001804A                            	even
0001804A                            
0001804A                            ; ---------------------------------------------------------------------------
0001804A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001804A                            ; ---------------------------------------------------------------------------
0001804A                            Map_obj78:
0001804A                            	include "_maps\obj78.asm"
0001804A                            ; ---------------------------------------------------------------------------
0001804A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001804A                            ; ---------------------------------------------------------------------------
0001804A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001804E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018052 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018056 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001805A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001805E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018062 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018066 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001806A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001806E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018072 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018076 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001807A 01                         byte_16D9E:	dc.b 1
0001807B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018080 01                         byte_16DA4:	dc.b 1
00018081 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018086 01                         byte_16DAA:	dc.b 1
00018087 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001808C 01                         byte_16DB0:	dc.b 1
0001808D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018092 01                         byte_16DB6:	dc.b 1
00018093 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018098 01                         byte_16DBC:	dc.b 1
00018099 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001809E 01                         byte_16DC2:	dc.b 1
0001809F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000180A4 01                         byte_16DC8:	dc.b 1
000180A5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000180AA 01                         byte_16DCE:	dc.b 1
000180AB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000180B0 01                         byte_16DD4:	dc.b 1
000180B1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000180B6 01                         byte_16DDA:	dc.b 1
000180B7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000180BC 01                         byte_16DE0:	dc.b 1
000180BD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000180C2 01                         byte_16DE6:	dc.b 1
000180C3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000180C8 01                         byte_16DEC:	dc.b 1
000180C9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000180CE 01                         byte_16DF2:	dc.b 1
000180CF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000180D4 01                         byte_16DF8:	dc.b 1
000180D5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000180DA 01                         byte_16DFE:	dc.b 1
000180DB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000180E0 01                         byte_16E04:	dc.b 1
000180E1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000180E6 01                         byte_16E0A:	dc.b 1
000180E7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000180EC 01                         byte_16E10:	dc.b 1
000180ED EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000180F2 01                         byte_16E16:	dc.b 1
000180F3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000180F8 01                         byte_16E1C:	dc.b 1
000180F9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000180FE 01                         byte_16E22:	dc.b 1
000180FF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018104 01                         byte_16E28:	dc.b 1
00018105 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001810A                            		even
0001810A                            		even
0001810A                            
0001810A                            ; ===========================================================================
0001810A                            ; ---------------------------------------------------------------------------
0001810A                            ; Object 79 - lamppost
0001810A                            ; ---------------------------------------------------------------------------
0001810A                            
0001810A                            Obj79:					; XREF: Obj_Index
0001810A 7000                       		moveq	#0,d0
0001810C 1028 0024                  		move.b	$24(a0),d0
00018110 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018114 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018118 4EFA 8772                  		jmp	MarkObjGone
0001811C                            ; ===========================================================================
0001811C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001811E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018120 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018122 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018124                            ; ===========================================================================
00018124                            
00018124                            Obj79_Main:				; XREF: Obj79_Index
00018124 5428 0024                  		addq.b	#2,$24(a0)
00018128 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018130 317C 07A0 0002             		move.w	#$7A0,2(a0)
00018136 117C 0004 0001             		move.b	#4,1(a0)
0001813C 117C 0008 0019             		move.b	#8,$19(a0)
00018142 117C 0005 0018             		move.b	#5,$18(a0)
00018148 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001814C 7000                       		moveq	#0,d0
0001814E 1028 0023                  		move.b	$23(a0),d0
00018152 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018158 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001815E 6600                       		bne.s	Obj79_RedLamp
00018160 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018164 0201 007F                  		andi.b	#$7F,d1
00018168 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001816C 0202 007F                  		andi.b	#$7F,d2
00018170 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018172 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018174                            
00018174                            Obj79_RedLamp:
00018174 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001817A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018180 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018186 4E75                       		rts	
00018188                            ; ===========================================================================
00018188                            
00018188                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018188 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001818C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018190 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018194 6B00 0000                  		bmi.w	locret_16F90
00018198 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001819C 0201 007F                  		andi.b	#$7F,d1
000181A0 1428 0028                  		move.b	$28(a0),d2
000181A4 0202 007F                  		andi.b	#$7F,d2
000181A8 B202                       		cmp.b	d2,d1
000181AA 6500                       		bcs.s	Obj79_HitLamp
000181AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000181B0 7000                       		moveq	#0,d0
000181B2 1028 0023                  		move.b	$23(a0),d0
000181B6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000181BC 117C 0004 0024             		move.b	#4,$24(a0)
000181C2 117C 0003 001A             		move.b	#3,$1A(a0)
000181C8 6000 0000                  		bra.w	locret_16F90
000181CC                            ; ===========================================================================
000181CC                            
000181CC                            Obj79_HitLamp:
000181CC 3038 D008                  		move.w	($FFFFD008).w,d0
000181D0 9068 0008                  		sub.w	8(a0),d0
000181D4 5040                       		addq.w	#8,d0
000181D6 0C40 0010                  		cmpi.w	#$10,d0
000181DA 6400 0000                  		bcc.w	locret_16F90
000181DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000181E2 9068 000C                  		sub.w	$C(a0),d0
000181E6 0640 0040                  		addi.w	#$40,d0
000181EA 0C40 0068                  		cmpi.w	#$68,d0
000181EE 6400                       		bcc.s	locret_16F90
000181F0 303C 00A1                  		move.w	#$A1,d0
000181F4 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play lamppost sound
000181FA 5428 0024                  		addq.b	#2,$24(a0)
000181FE 4EB9 0000 EC6A             		jsr	SingleObjLoad
00018204 6600                       		bne.s	loc_16F76
00018206 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001820A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018210 3368 0008 0030             		move.w	8(a0),$30(a1)
00018216 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001821C 0469 0018 0032             		subi.w	#$18,$32(a1)
00018222 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001822A 337C 07A0 0002             		move.w	#$7A0,2(a1)
00018230 137C 0004 0001             		move.b	#4,1(a1)
00018236 137C 0008 0019             		move.b	#8,$19(a1)
0001823C 137C 0004 0018             		move.b	#4,$18(a1)
00018242 137C 0002 001A             		move.b	#2,$1A(a1)
00018248 337C 0020 0036             		move.w	#$20,$36(a1)
0001824E                            
0001824E                            loc_16F76:
0001824E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018254 6100 0000                  		bsr.w	Obj79_StoreInfo
00018258 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001825C 7000                       		moveq	#0,d0
0001825E 1028 0023                  		move.b	$23(a0),d0
00018262 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018268                            
00018268                            locret_16F90:
00018268 4E75                       		rts	
0001826A                            ; ===========================================================================
0001826A                            
0001826A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001826A 4E75                       		rts	
0001826C                            ; ===========================================================================
0001826C                            
0001826C                            Obj79_Twirl:				; XREF: Obj79_Index
0001826C 5368 0036                  		subq.w	#1,$36(a0)
00018270 6A00                       		bpl.s	loc_16FA0
00018272 117C 0004 0024             		move.b	#4,$24(a0)
00018278                            
00018278                            loc_16FA0:
00018278 1028 0026                  		move.b	$26(a0),d0
0001827C 0428 0010 0026             		subi.b	#$10,$26(a0)
00018282 0400 0040                  		subi.b	#$40,d0
00018286 4EB9 0000 34B8             		jsr	(CalcSine).l
0001828C C3FC 0C00                  		muls.w	#$C00,d1
00018290 4841                       		swap	d1
00018292 D268 0030                  		add.w	$30(a0),d1
00018296 3141 0008                  		move.w	d1,8(a0)
0001829A C1FC 0C00                  		muls.w	#$C00,d0
0001829E 4840                       		swap	d0
000182A0 D068 0032                  		add.w	$32(a0),d0
000182A4 3140 000C                  		move.w	d0,$C(a0)
000182A8 4E75                       		rts	
000182AA                            ; ===========================================================================
000182AA                            ; ---------------------------------------------------------------------------
000182AA                            ; Subroutine to	store information when you hit a lamppost
000182AA                            ; ---------------------------------------------------------------------------
000182AA                            
000182AA                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000182AA 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000182B0 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000182B6 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000182BC 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000182C2 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000182C8 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000182CE 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000182D4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000182DA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000182E0 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000182E6 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000182EC 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000182F2 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000182F8 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000182FE 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018304 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001830A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018310 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018316 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001831C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018322 4E75                       		rts	
00018324                            
00018324                            ; ---------------------------------------------------------------------------
00018324                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018324                            ; ---------------------------------------------------------------------------
00018324                            
00018324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018324                            
00018324                            
00018324                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018324 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001832A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018330 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018336 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001833C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018342 4278 FE20                  		clr.w	($FFFFFE20).w
00018346 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001834A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018350 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018356 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001835A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018360 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018366 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001836C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018372 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018378 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001837E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018384 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001838A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018390 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018396 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001839C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000183A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000183A8 6600                       		bne.s	loc_170E4
000183AA 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000183B0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000183B6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000183BC                            
000183BC                            loc_170E4:
000183BC 4A38 FE30                  		tst.b	($FFFFFE30).w
000183C0 6A00                       		bpl.s	locret_170F6
000183C2 3038 FE32                  		move.w	($FFFFFE32).w,d0
000183C6 0440 00A0                  		subi.w	#$A0,d0
000183CA 31C0 F728                  		move.w	d0,($FFFFF728).w
000183CE                            
000183CE                            locret_170F6:
000183CE 4E75                       		rts	
000183D0                            ; End of function Obj79_LoadInfo
000183D0                            
000183D0                            ; ===========================================================================
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            ; Sprite mappings - lamppost
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            Map_obj79:
000183D0                            	include "_maps\obj79.asm"
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            ; Sprite mappings - lamppost
000183D0                            ; ---------------------------------------------------------------------------
000183D0 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000183D4 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000183D8 06                         byte_17100:	dc.b 6
000183D9 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000183DE E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000183E3 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000183E8 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000183ED D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000183F2 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000183F7 04                         byte_1711F:	dc.b 4
000183F8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000183FD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018402 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018407 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001840C 02                         byte_17134:	dc.b 2
0001840D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018412 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018417 06                         byte_1713F:	dc.b 6
00018418 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001841D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018422 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018427 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001842C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018431 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018436                            		even
00018436                            		even
00018436                            
00018436                            ; ===========================================================================
00018436                            ; ---------------------------------------------------------------------------
00018436                            ; Object 7D - hidden points at the end of a level
00018436                            ; ---------------------------------------------------------------------------
00018436                            
00018436                            Obj7D:					; XREF: Obj_Index
00018436 7000                       		moveq	#0,d0
00018438 1028 0024                  		move.b	$24(a0),d0
0001843C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018440 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018444                            ; ===========================================================================
00018444 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018446 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018448                            ; ===========================================================================
00018448                            
00018448                            Obj7D_Main:				; XREF: Obj7D_Index
00018448 7410                       		moveq	#$10,d2
0001844A 3602                       		move.w	d2,d3
0001844C D643                       		add.w	d3,d3
0001844E 43F8 D000                  		lea	($FFFFD000).w,a1
00018452 3029 0008                  		move.w	8(a1),d0
00018456 9068 0008                  		sub.w	8(a0),d0
0001845A D042                       		add.w	d2,d0
0001845C B043                       		cmp.w	d3,d0
0001845E 6400                       		bcc.s	Obj7D_ChkDel
00018460 3229 000C                  		move.w	$C(a1),d1
00018464 9268 000C                  		sub.w	$C(a0),d1
00018468 D242                       		add.w	d2,d1
0001846A B243                       		cmp.w	d3,d1
0001846C 6400                       		bcc.s	Obj7D_ChkDel
0001846E 4A78 FE08                  		tst.w	($FFFFFE08).w
00018472 6600                       		bne.s	Obj7D_ChkDel
00018474 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018478 6600                       		bne.s	Obj7D_ChkDel
0001847A 5428 0024                  		addq.b	#2,$24(a0)
0001847E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018486 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001848C 0028 0004 0001             		ori.b	#4,1(a0)
00018492 117C 0000 0018             		move.b	#0,$18(a0)
00018498 117C 0010 0019             		move.b	#$10,$19(a0)
0001849E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000184A4 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000184AA 303C 00C9                  		move.w	#$C9,d0
000184AE 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play bonus sound
000184B4 7000                       		moveq	#0,d0
000184B6 1028 0028                  		move.b	$28(a0),d0
000184BA D040                       		add.w	d0,d0
000184BC 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000184C0 4EB9 0000 0000             		jsr	AddPoints
000184C6                            
000184C6                            Obj7D_ChkDel:
000184C6 3028 0008                  		move.w	8(a0),d0
000184CA 0240 FF80                  		andi.w	#$FF80,d0
000184CE 3238 F700                  		move.w	($FFFFF700).w,d1
000184D2 0441 0080                  		subi.w	#$80,d1
000184D6 0241 FF80                  		andi.w	#$FF80,d1
000184DA 9041                       		sub.w	d1,d0
000184DC 0C40 0280                  		cmpi.w	#$280,d0
000184E0 6200                       		bhi.s	Obj7D_Delete
000184E2 4E75                       		rts	
000184E4                            ; ===========================================================================
000184E4                            
000184E4                            Obj7D_Delete:
000184E4 4EF9 0000 E820             		jmp	DeleteObject
000184EA                            ; ===========================================================================
000184EA 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000184EC 03E8                       		dc.w 1000
000184EE 0064                       		dc.w 100
000184F0 0001                       		dc.w 1
000184F2                            ; ===========================================================================
000184F2                            
000184F2                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000184F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000184F6 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000184F8 3028 0008                  		move.w	8(a0),d0
000184FC 0240 FF80                  		andi.w	#-$80,d0
00018500 3238 F700                  		move.w	($FFFFF700).w,d1
00018504 0441 0080                  		subi.w	#$80,d1
00018508 0241 FF80                  		andi.w	#-$80,d1
0001850C 9041                       		sub.w	d1,d0
0001850E 0C40 0280                  		cmpi.w	#$280,d0
00018512 6200                       		bhi.s	Obj7D_Delete2
00018514 4EF9 0000 E7E4             		jmp	DisplaySprite
0001851A                            ; ===========================================================================
0001851A                            
0001851A                            Obj7D_Delete2:
0001851A 4EF9 0000 E820             		jmp	DeleteObject
00018520                            ; ===========================================================================
00018520                            ; ---------------------------------------------------------------------------
00018520                            ; Sprite mappings - hidden points at the end of	a level
00018520                            ; ---------------------------------------------------------------------------
00018520                            Map_obj7D:
00018520                            	include "_maps\obj7D.asm"
00018520                            ; ---------------------------------------------------------------------------
00018520                            ; Sprite mappings - hidden points at the end of	a level
00018520                            ; ---------------------------------------------------------------------------
00018520 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018524 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018528 00                         byte_17250:	dc.b 0
00018529 01                         byte_17251:	dc.b 1
0001852A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001852F 01                         byte_17257:	dc.b 1
00018530 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018535 01                         byte_1725D:	dc.b 1
00018536 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001853C 00                         		even
0001853C 00                         		even
0001853C                            
0001853C                            ; ===========================================================================
0001853C                            ; ---------------------------------------------------------------------------
0001853C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001853C                            ; ---------------------------------------------------------------------------
0001853C                            
0001853C                            Obj8A:					; XREF: Obj_Index
0001853C 7000                       		moveq	#0,d0
0001853E 1028 0024                  		move.b	$24(a0),d0
00018542 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018546 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001854A                            ; ===========================================================================
0001854A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001854C 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001854E                            ; ===========================================================================
0001854E                            
0001854E                            Obj8A_Main:				; XREF: Obj8A_Index
0001854E 5428 0024                  		addq.b	#2,$24(a0)
00018552 317C 0120 0008             		move.w	#$120,8(a0)
00018558 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001855E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018566 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001856C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018570 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018574 117C 0000 0001             		move.b	#0,1(a0)
0001857A 117C 0000 0018             		move.b	#0,$18(a0)
00018580 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018586 6600                       		bne.s	Obj8A_Display	; if not, branch
00018588 317C 00A6 0002             		move.w	#$A6,2(a0)
0001858E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018594 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018598 6700                       		beq.s	Obj8A_Display	; if not, branch
0001859A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000185A0 6600                       		bne.s	Obj8A_Display	; if not, branch
000185A2 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000185A8 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000185AE 4EF9 0000 E820             		jmp	DeleteObject
000185B4                            ; ===========================================================================
000185B4                            
000185B4                            Obj8A_Display:				; XREF: Obj8A_Index
000185B4 4EF9 0000 E7E4             		jmp	DisplaySprite
000185BA                            ; ===========================================================================
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            Map_obj8A:
000185BA                            	include "_maps\obj8A.asm"
000185BA                            Map_ca8f:
000185BA 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
000185BC 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
000185BE 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
000185C0 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
000185C2 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
000185C4 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
000185C6 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
000185C8 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
000185CA 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
000185CC 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
000185CE 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
000185D0 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
000185D2 08                         Map_ca8f_16: 	dc.b $8
000185D3 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
000185D8 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
000185DD F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
000185E2 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
000185E7 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
000185EC B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
000185F1 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
000185F6 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
000185FB 10                         Map_ca8f_3F: 	dc.b $10
000185FC D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00018601 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00018606 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
0001860B D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00018610 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00018615 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
0001861A D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
0001861F D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00018624 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00018629 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
0001862E 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00018633 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00018638 0805 0016 08               	dc.b $8, $5, $0, $16, $8
0001863D 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00018642 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00018647 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
0001864C 0A                         Map_ca8f_90: 	dc.b $A
0001864D D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00018652 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00018657 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
0001865C D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00018661 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00018666 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
0001866B D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00018670 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00018675 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
0001867A 0805 0036 08               	dc.b $8, $5, $0, $36, $8
0001867F 18                         Map_ca8f_C3: 	dc.b $18
00018680 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00018685 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
0001868A D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
0001868F D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00018694 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018699 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
0001869E D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
000186A3 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
000186A8 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
000186AD D805 0042 20               	dc.b $D8, $5, $0, $42, $20
000186B2 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
000186B7 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
000186BC D801 0046 50               	dc.b $D8, $1, $0, $46, $50
000186C1 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
000186C6 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
000186CB 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
000186D0 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
000186D5 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
000186DA 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
000186DF 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
000186E4 0805 0016 00               	dc.b $8, $5, $0, $16, $0
000186E9 0805 0004 10               	dc.b $8, $5, $0, $4, $10
000186EE 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
000186F3 0805 0042 30               	dc.b $8, $5, $0, $42, $30
000186F8 14                         Map_ca8f_13C: 	dc.b $14
000186F9 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
000186FE D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00018703 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00018708 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
0001870D D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00018712 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00018717 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
0001871C 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00018721 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00018726 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
0001872B 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00018730 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00018735 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
0001873A 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
0001873F 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00018744 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00018749 2005 0050 18               	dc.b $20, $5, $0, $50, $18
0001874E 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00018753 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00018758 2005 000E 48               	dc.b $20, $5, $0, $E, $48
0001875D 1A                         Map_ca8f_1A1: 	dc.b $1A
0001875E D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00018763 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00018768 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
0001876D D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00018772 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00018777 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
0001877C D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00018781 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00018786 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
0001878B D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00018790 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00018795 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
0001879A 0809 0008 88               	dc.b $8, $9, $0, $8, $88
0001879F 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
000187A4 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
000187A9 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
000187AE 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
000187B3 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
000187B8 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
000187BD 0805 0004 08               	dc.b $8, $5, $0, $4, $8
000187C2 0805 0058 18               	dc.b $8, $5, $0, $58, $18
000187C7 0805 0004 28               	dc.b $8, $5, $0, $4, $28
000187CC 0809 0008 38               	dc.b $8, $9, $0, $8, $38
000187D1 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
000187D6 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
000187DB 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
000187E0 17                         Map_ca8f_224: 	dc.b $17
000187E1 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
000187E6 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
000187EB D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
000187F0 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
000187F5 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
000187FA D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
000187FF D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018804 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018809 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
0001880E D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018813 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018818 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
0001881D 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018822 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018827 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
0001882C 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018831 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018836 0005 0004 14               	dc.b $0, $5, $0, $4, $14
0001883B 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00018840 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00018845 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
0001884A 2005 0058 04               	dc.b $20, $5, $0, $58, $4
0001884F 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00018854 1F                         Map_ca8f_298: 	dc.b $1F
00018855 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
0001885A D805 0012 90               	dc.b $D8, $5, $0, $12, $90
0001885F D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00018864 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00018869 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
0001886E D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018873 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00018878 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
0001887D D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00018882 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00018887 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
0001888C D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00018891 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00018896 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
0001889B 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000188A0 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000188A5 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000188AA 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
000188AF 0009 0008 00               	dc.b $0, $9, $0, $8, $0
000188B4 0001 0046 14               	dc.b $0, $1, $0, $46, $14
000188B9 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
000188BE 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
000188C3 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
000188C8 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
000188CD 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
000188D2 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
000188D7 0001 0046 74               	dc.b $0, $1, $0, $46, $74
000188DC 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
000188E1 2005 0004 08               	dc.b $20, $5, $0, $4, $8
000188E6 2005 0012 18               	dc.b $20, $5, $0, $12, $18
000188EB 2005 0004 28               	dc.b $20, $5, $0, $4, $28
000188F0 0F                         Map_ca8f_334: 	dc.b $F
000188F1 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
000188F6 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
000188FB F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018900 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018905 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
0001890A F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
0001890F F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018914 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018919 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
0001891E F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018923 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018928 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
0001892D F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018932 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018937 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001893C 08                         Map_ca8f_380: 	dc.b $8
0001893D 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00018942 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00018947 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
0001894C 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00018951 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00018956 3005 0004 18               	dc.b $30, $5, $0, $4, $18
0001895B 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00018960 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00018965 20                         Map_ca8f_3A9: 	dc.b $20
00018966 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
0001896B ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00018970 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018975 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
0001897A ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
0001897F ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018984 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018989 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
0001898E FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018993 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018998 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
0001899D FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000189A2 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000189A7 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
000189AC 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
000189B1 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
000189B6 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
000189BB 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
000189C0 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
000189C5 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
000189CA 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
000189CF 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
000189D4 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000189D9 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000189DE 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000189E3 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000189E8 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
000189ED 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
000189F2 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
000189F7 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
000189FC 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018A01 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018A06 1C                         Map_ca8f_tmss:	dc.b 28
00018A94 00                         	even
00018A94 00                         	even
00018A94                            
00018A94                            ; ===========================================================================
00018A94                            ; ---------------------------------------------------------------------------
00018A94                            ; Object 3D - matthew boss - modified by GK89
00018A94                            ; ---------------------------------------------------------------------------
00018A94                            
00018A94                            Obj3D:					; XREF: Obj_Index
00018A94 7000                       		moveq	#0,d0
00018A96 1028 0024                  		move.b	$24(a0),d0
00018A9A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018A9E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018AA2                            ; ===========================================================================
00018AA2 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018AA4 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018AA6 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018AA8 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018AAA                            
00018AAA 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018AAC 0401                       		dc.b 4,	1
00018AAE 0607                       		dc.b 6,	7
00018AB0                            ; ===========================================================================
00018AB0                            
00018AB0                            Obj3D_Main:				; XREF: Obj3D_Index
00018AB0 45F9 0001 8AAA             		lea	(Obj3D_ObjData).l,a2
00018AB6 2248                       		movea.l	a0,a1
00018AB8 7202                       		moveq	#2,d1
00018ABA 6000                       		bra.s	Obj3D_LoadBoss
00018ABC                            ; ===========================================================================
00018ABC                            
00018ABC                            Obj3D_Loop:
00018ABC 4EB9 0000 EC80             		jsr	SingleObjLoad2
00018AC2 6600                       		bne.s	loc_17772
00018AC4                            
00018AC4                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018AC4 135A 0024                  		move.b	(a2)+,$24(a1)
00018AC8 12BC 003D                  		move.b	#$3D,0(a1)
00018ACC 3368 0008 0008             		move.w	8(a0),8(a1)
00018AD2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018AD8 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018AE0 337C 0400 0002             		move.w	#$400,2(a1)
00018AE6 137C 0004 0001             		move.b	#4,1(a1)
00018AEC 137C 0020 0019             		move.b	#$20,$19(a1)
00018AF2 137C 0003 0018             		move.b	#3,$18(a1)
00018AF8 135A 001C                  		move.b	(a2)+,$1C(a1)
00018AFC 2348 0034                  		move.l	a0,$34(a1)
00018B00 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018B04                            
00018B04                            loc_17772:
00018B04 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B0A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B10 117C 000F 0020             		move.b	#$F,$20(a0)
00018B16 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018B1C                            
00018B1C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018B1C 7000                       		moveq	#0,d0
00018B1E 1028 0025                  		move.b	$25(a0),d0
00018B22 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018B26 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018B2A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018B30 4EB9 0000 B832             		jsr	AnimateSprite
00018B36 1028 0022                  		move.b	$22(a0),d0
00018B3A 0200 0003                  		andi.b	#3,d0
00018B3E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B44 8128 0001                  		or.b	d0,1(a0)
00018B48 4EF9 0000 E7E4             		jmp	DisplaySprite
00018B4E                            ; ===========================================================================
00018B4E 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018B50 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018B52 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018B54 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018B56 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018B58 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018B5A 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018B5C                            ; ===========================================================================
00018B5C                            
00018B5C                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018B5C 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018B62 6100 0000                  		bsr.w	BossMove
00018B66 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018B6C 6600                       		bne.s	loc_177E6
00018B6E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018B74 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018B78                            
00018B78                            loc_177E6:
00018B78 1028 003F                  		move.b	$3F(a0),d0
00018B7C 4EB9 0000 34B8             		jsr	(CalcSine).l
00018B82 EC40                       		asr.w	#6,d0
00018B84 D068 0038                  		add.w	$38(a0),d0
00018B88 3140 000C                  		move.w	d0,$C(a0)
00018B8C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B92 5428 003F                  		addq.b	#2,$3F(a0)
00018B96 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018B9C 6400                       		bcc.s	locret_1784A
00018B9E 4A28 0022                  		tst.b	$22(a0)
00018BA2 6B00                       		bmi.s	loc_1784C
00018BA4 4A28 0020                  		tst.b	$20(a0)
00018BA8 6600                       		bne.s	locret_1784A
00018BAA 4A28 003E                  		tst.b	$3E(a0)
00018BAE 6600                       		bne.s	Obj3D_ShipFlash
00018BB0 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018BB6 303C 00AC                  		move.w	#$AC,d0
00018BBA 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018BC0                            
00018BC0                            Obj3D_ShipFlash:
00018BC0 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018BC4 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018BC6 4A51                       		tst.w	(a1)
00018BC8 6600                       		bne.s	loc_1783C
00018BCA 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018BCE                            
00018BCE                            loc_1783C:
00018BCE 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018BD0 5328 003E                  		subq.b	#1,$3E(a0)
00018BD4 6600                       		bne.s	locret_1784A
00018BD6 117C 000F 0020             		move.b	#$F,$20(a0)
00018BDC                            
00018BDC                            locret_1784A:
00018BDC 4E75                       		rts	
00018BDE                            ; ===========================================================================
00018BDE                            
00018BDE                            loc_1784C:				; XREF: loc_177E6
00018BDE 7064                       		moveq	#100,d0
00018BE0 6100 0000                  		bsr.w	AddPoints
00018BE4 117C 0008 0025             		move.b	#8,$25(a0)
00018BEA 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018BF0 4E75                       		rts	
00018BF2                            
00018BF2                            ; ---------------------------------------------------------------------------
00018BF2                            ; Defeated boss	subroutine
00018BF2                            ; ---------------------------------------------------------------------------
00018BF2                            
00018BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BF2                            
00018BF2                            
00018BF2                            BossDefeated:
00018BF2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018BF6 0200 0007                  		andi.b	#7,d0
00018BFA 6600                       		bne.s	locret_178A2
00018BFC 4EB9 0000 EC6A             		jsr	SingleObjLoad
00018C02 6600                       		bne.s	locret_178A2
00018C04 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018C08 3368 0008 0008             		move.w	8(a0),8(a1)
00018C0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C14 4EB9 0000 3492             		jsr	(RandomNumber).l
00018C1A 3200                       		move.w	d0,d1
00018C1C 7200                       		moveq	#0,d1
00018C1E 1200                       		move.b	d0,d1
00018C20 E409                       		lsr.b	#2,d1
00018C22 0441 0020                  		subi.w	#$20,d1
00018C26 D369 0008                  		add.w	d1,8(a1)
00018C2A E048                       		lsr.w	#8,d0
00018C2C E608                       		lsr.b	#3,d0
00018C2E D169 000C                  		add.w	d0,$C(a1)
00018C32                            
00018C32                            locret_178A2:
00018C32 4E75                       		rts	
00018C34                            ; End of function BossDefeated
00018C34                            
00018C34                            ; ---------------------------------------------------------------------------
00018C34                            ; Subroutine to	move a boss
00018C34                            ; ---------------------------------------------------------------------------
00018C34                            
00018C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018C34                            
00018C34                            
00018C34                            BossMove:
00018C34 2428 0030                  		move.l	$30(a0),d2
00018C38 2628 0038                  		move.l	$38(a0),d3
00018C3C 3028 0010                  		move.w	$10(a0),d0
00018C40 48C0                       		ext.l	d0
00018C42 E180                       		asl.l	#8,d0
00018C44 D480                       		add.l	d0,d2
00018C46 3028 0012                  		move.w	$12(a0),d0
00018C4A 48C0                       		ext.l	d0
00018C4C E180                       		asl.l	#8,d0
00018C4E D680                       		add.l	d0,d3
00018C50 2142 0030                  		move.l	d2,$30(a0)
00018C54 2143 0038                  		move.l	d3,$38(a0)
00018C58 4E75                       		rts	
00018C5A                            ; End of function BossMove
00018C5A                            
00018C5A                            ; ===========================================================================
00018C5A                            
00018C5A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018C5A 6100 FFD8                  		bsr.w	BossMove
00018C5E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018C64 6600                       		bne.s	loc_17916
00018C66 317C 0000 0010             		move.w	#0,$10(a0)
00018C6C 317C 0000 0012             		move.w	#0,$12(a0)
00018C72 5428 0025                  		addq.b	#2,$25(a0)
00018C76 4EB9 0000 EC80             		jsr	SingleObjLoad2
00018C7C 6600                       		bne.s	loc_17910
00018C7E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018C82 3368 0030 0008             		move.w	$30(a0),8(a1)
00018C88 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018C8E 2348 0034                  		move.l	a0,$34(a1)
00018C92                            
00018C92                            loc_17910:
00018C92 317C 0077 003C             		move.w	#$77,$3C(a0)
00018C98                            
00018C98                            loc_17916:
00018C98 6000 FEDE                  		bra.w	loc_177E6
00018C9C                            ; ===========================================================================
00018C9C                            
00018C9C                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018C9C 5368 003C                  		subq.w	#1,$3C(a0)
00018CA0 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018CA6 5428 0025                  		addq.b	#2,$25(a0)
00018CAA 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018CB0 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018CB4 9068 0008                  		sub.w	8(a0),d0		 
00018CB8 6A00                       		bpl.s	Obj3D_left			 
00018CBA 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018CC0 6000                       		bra.s	Obj3D_right		 
00018CC2 08A8 0005 0022             		bclr	#5,$22(a0)
00018CC8 4EB9 0000 0000              		jsr     loc_17950
00018CCE 4E75                       		rts
00018CD0                            ; ===========================================================================
00018CD0                            
00018CD0                            Obj3D_right:
00018CD0 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018CD6 4E75                       		Rts
00018CD8                            
00018CD8                            Obj3D_left:
00018CD8 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018CDE 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018CE4 6600                       		bne.s	RTSboss  	; if not, branch
00018CE6 0868 0000 0022              		bchg	#0,$22(a0)
00018CEC                            
00018CEC                            RTSboss:	    
00018CEC 4E75                       		rts
00018CEE                             ; ===========================================================================
00018CEE                            
00018CEE                            Obj3D_UpStuff:
00018CEE 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018CF2 9068 000C                  		sub.w	$C(a0),d0		 
00018CF6 6A00                       		bpl.s	Obj3D_down			 
00018CF8 6000                        		bra.s	Obj3D_up		 
00018CFA 08A8 0005 0022             		bclr	#5,$22(a0)
00018D00                             
00018D00                            Obj3D_up:		
00018D00 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018D06 4E75                        	    rts
00018D08                            
00018D08                            Obj3D_down:
00018D08 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018D0E                            
00018D0E                            loc_17950:
00018D0E 6000 FE68                  		bra.w	loc_177E6
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            loc_17954:				; XREF: Obj3D_ShipIndex
00018D12 5368 003C                  		subq.w	#1,$3C(a0)
00018D16 6B00                       		bmi.s	loc_17960
00018D18 6100 FF1A                  		bsr.w	BossMove
00018D1C 6000                       		bra.s	loc_17976
00018D1E                            ; ===========================================================================
00018D1E                            
00018D1E                            loc_17960:
00018D1E 0868 0000 0022             		bchg	#0,$22(a0)
00018D24 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018D2A 5528 0025                  		subq.b	#2,$25(a0)
00018D2E 317C 0000 0010             		move.w	#0,$10(a0)
00018D34                            
00018D34                            loc_17976:
00018D34 6000 FE42                  		bra.w	loc_177E6
00018D38                            ; ===========================================================================
00018D38                            
00018D38                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018D38 5368 003C                  		subq.w	#1,$3C(a0)
00018D3C 6B00                       		bmi.s	loc_17984
00018D3E 6000 FEB2                  		bra.w	BossDefeated
00018D42                            ; ===========================================================================
00018D42                            
00018D42                            loc_17984:
00018D42 08E8 0000 0022             		bset	#0,$22(a0)
00018D48 08A8 0007 0022             		bclr	#7,$22(a0)
00018D4E 4268 0010                  		clr.w	$10(a0)
00018D52 5428 0025                  		addq.b	#2,$25(a0)
00018D56 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D5C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D60 6600                       		bne.s	locret_179AA
00018D62 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D68 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018D6E 6000 FE82                  		bra.w	BossDefeated
00018D72                            
00018D72                            locret_179AA:
00018D72 4E75                       		rts	
00018D74                            ; ===========================================================================
00018D74                            
00018D74                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018D74 4EB9 0000 E74C             		jsr ObjectFall		
00018D7A 5268 003C                  		addq.w	#1,$3C(a0)
00018D7E 6700                       		beq.s	loc_179BC
00018D80 6A00                       		bpl.s	loc_179C2
00018D82 6000                       		bra.s	loc_179EE
00018D84                            ; ===========================================================================
00018D84                            
00018D84                            loc_179BC:
00018D84 4268 0012                  		clr.w	$12(a0)
00018D88 6000                       		bra.s	loc_179EE
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            loc_179C2:
00018D8A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D90 6500                       		bcs.s	loc_179DA
00018D92 6700                       		beq.s	loc_179E0
00018D94 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D9A 6500                       		bcs.s	loc_179EE
00018D9C 5428 0025                  		addq.b	#2,$25(a0)
00018DA0 6000                       		bra.s	loc_179EE
00018DA2                            ; ===========================================================================
00018DA2                            
00018DA2                            loc_179DA:
00018DA2 5168 0012                  		subq.w	#8,$12(a0)
00018DA6 6000                       		bra.s	loc_179EE
00018DA8 6000 FE48                  		bra.w	BossDefeated
00018DAC                            ; ===========================================================================
00018DAC                            
00018DAC                            loc_179E0:
00018DAC 4268 0012                  		clr.w	$12(a0)
00018DB0 303C 0081                  		move.w	#$81,d0
00018DB4 4EB9 0000 1D10             		jsr	(PlaySound).l	; play GHZ music
00018DBA                            
00018DBA                            loc_179EE:
00018DBA 6100 FE78                  		bsr.w	BossMove
00018DBE 6000 FDB8                  		bra.w	loc_177E6
00018DC2                            ; ===========================================================================
00018DC2                            
00018DC2                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018DC2 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018DC8 6700                       		beq.s	loc_17A10
00018DCA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018DCE 6000                       		bra.s	loc_17A16
00018DD0                            ; ===========================================================================
00018DD0                            
00018DD0                            loc_17A10:
00018DD0 4A28 0001                  		tst.b	1(a0)
00018DD4 6A00                       		bpl.s	Obj3D_ShipDel
00018DD6                            
00018DD6                            loc_17A16:
00018DD6 6100 FE5C                  		bsr.w	BossMove
00018DDA 6000 FD9C                  		bra.w	loc_177E6
00018DDE                            ; ===========================================================================
00018DDE                            
00018DDE                            Obj3D_ShipDel:
00018DDE 4EF9 0000 E820             		jmp	DeleteObject
00018DE4                            ; ===========================================================================
00018DE4                            
00018DE4                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018DE4 7000                       		moveq	#0,d0
00018DE6 7201                       		moveq	#1,d1
00018DE8 2268 0034                  		movea.l	$34(a0),a1
00018DEC 1029 0025                  		move.b	$25(a1),d0
00018DF0 5900                       		subq.b	#4,d0
00018DF2 6600                       		bne.s	loc_17A3E
00018DF4 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018DFA 6600                       		bne.s	loc_17A46
00018DFC 7204                       		moveq	#4,d1
00018DFE                            
00018DFE                            loc_17A3E:
00018DFE 5D00                       		subq.b	#6,d0
00018E00 6B00                       		bmi.s	loc_17A46
00018E02 720A                       		moveq	#$A,d1
00018E04 6000                       		bra.s	loc_17A5A
00018E06                            ; ===========================================================================
00018E06                            
00018E06                            loc_17A46:
00018E06 4A29 0020                  		tst.b	$20(a1)
00018E0A 6600                       		bne.s	loc_17A50
00018E0C 7205                       		moveq	#5,d1
00018E0E 6000                       		bra.s	loc_17A5A
00018E10                            ; ===========================================================================
00018E10                            
00018E10                            loc_17A50:
00018E10 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018E16 6500                       		bcs.s	loc_17A5A
00018E18 7204                       		moveq	#4,d1
00018E1A                            
00018E1A                            loc_17A5A:
00018E1A 1141 001C                  		move.b	d1,$1C(a0)
00018E1E 5500                       		subq.b	#2,d0
00018E20 6600                       		bne.s	Obj3D_FaceDisp
00018E22 117C 0006 001C             		move.b	#6,$1C(a0)
00018E28 4A28 0001                  		tst.b	1(a0)
00018E2C 6A00                       		bpl.s	Obj3D_FaceDel
00018E2E                            
00018E2E                            Obj3D_FaceDisp:
00018E2E 6000                       		bra.s	Obj3D_Display
00018E30                            ; ===========================================================================
00018E30                            
00018E30                            Obj3D_FaceDel:
00018E30 4EF9 0000 E820             		jmp	DeleteObject
00018E36                            ; ===========================================================================
00018E36                            
00018E36                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018E36 117C 0007 001C             		move.b	#7,$1C(a0)
00018E3C 2268 0034                  		movea.l	$34(a0),a1
00018E40 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018E46 6600                       		bne.s	loc_17A96
00018E48 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E4E 4A28 0001                  		tst.b	1(a0)
00018E52 6A00                       		bpl.s	Obj3D_FlameDel
00018E54 6000                       		bra.s	Obj3D_FlameDisp
00018E56                            ; ===========================================================================
00018E56                            
00018E56                            loc_17A96:
00018E56 3029 0010                  		move.w	$10(a1),d0
00018E5A 6700                       		beq.s	Obj3D_FlameDisp
00018E5C 117C 0008 001C             		move.b	#8,$1C(a0)
00018E62                            
00018E62                            Obj3D_FlameDisp:
00018E62 6000                       		bra.s	Obj3D_Display
00018E64                            ; ===========================================================================
00018E64                            
00018E64                            Obj3D_FlameDel:
00018E64 4EF9 0000 E820             		jmp	DeleteObject
00018E6A                            ; ===========================================================================
00018E6A                            
00018E6A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018E6A 2268 0034                  		movea.l	$34(a0),a1
00018E6E 3169 0008 0008             		move.w	8(a1),8(a0)
00018E74 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018E7A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018E80 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018E86 4EB9 0000 B832             		jsr	AnimateSprite
00018E8C 1028 0022                  		move.b	$22(a0),d0
00018E90 0200 0003                  		andi.b	#3,d0
00018E94 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E9A 8128 0001                  		or.b	d0,1(a0)
00018E9E 4EF9 0000 E7E4             		jmp	DisplaySprite
00018EA4                            ; ===========================================================================
00018EA4                            ; ---------------------------------------------------------------------------
00018EA4                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018EA4                            ; ---------------------------------------------------------------------------
00018EA4                            
00018EA4                            Obj48:					; XREF: Obj_Index
00018EA4 7000                       		moveq	#0,d0
00018EA6 1028 0024                  		move.b	$24(a0),d0
00018EAA 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018EAE 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018EB2                            ; ===========================================================================
00018EB2 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018EB4 0000                       		dc.w Obj48_Base-Obj48_Index
00018EB6 0000                       		dc.w Obj48_Display2-Obj48_Index
00018EB8 0000                       		dc.w loc_17C68-Obj48_Index
00018EBA 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            Obj48_Main:				; XREF: Obj48_Index
00018EBC 5428 0024                  		addq.b	#2,$24(a0)
00018EC0 317C 4080 0026             		move.w	#$4080,$26(a0)
00018EC6 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018ECC 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018ED4 317C 046C 0002             		move.w	#$46C,2(a0)
00018EDA 45E8 0028                  		lea	$28(a0),a2
00018EDE 14FC 0000                  		move.b	#0,(a2)+
00018EE2 7205                       		moveq	#5,d1
00018EE4 2248                       		movea.l	a0,a1
00018EE6 6000                       		bra.s	loc_17B60
00018EE8                            ; ===========================================================================
00018EE8                            
00018EE8                            Obj48_MakeLinks:
00018EE8 4EB9 0000 EC80             		jsr	SingleObjLoad2
00018EEE 6600                       		bne.s	Obj48_MakeBall
00018EF0 3368 0008 0008             		move.w	8(a0),8(a1)
00018EF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EFC 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018F00 137C 0006 0024             		move.b	#6,$24(a1)
00018F06 237C 0000 8BE6 0004        		move.l	#Map_obj15,4(a1)
00018F0E 337C 0380 0002             		move.w	#$380,2(a1)
00018F14 137C 0001 001A             		move.b	#1,$1A(a1)
00018F1A 5228 0028                  		addq.b	#1,$28(a0)
00018F1E                            
00018F1E                            loc_17B60:				; XREF: Obj48_Main
00018F1E 3A09                       		move.w	a1,d5
00018F20 0445 D000                  		subi.w	#$D000,d5
00018F24 EC4D                       		lsr.w	#6,d5
00018F26 0245 007F                  		andi.w	#$7F,d5
00018F2A 14C5                       		move.b	d5,(a2)+
00018F2C 137C 0004 0001             		move.b	#4,1(a1)
00018F32 137C 0008 0019             		move.b	#8,$19(a1)
00018F38 137C 0006 0018             		move.b	#6,$18(a1)
00018F3E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018F44 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018F48                            
00018F48                            Obj48_MakeBall:
00018F48 137C 0008 0024             		move.b	#8,$24(a1)
00018F4E 237C 0000 91D6 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018F56 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018F5C 137C 0001 001A             		move.b	#1,$1A(a1)
00018F62 137C 0005 0018             		move.b	#5,$18(a1)
00018F68 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018F6E 4E75                       		rts	
00018F70                            ; ===========================================================================
00018F70                            
00018F70 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018F76                            
00018F76                            ; ===========================================================================
00018F76                            
00018F76                            Obj48_Base:				; XREF: Obj48_Index
00018F76 47F9 0001 8F70             		lea	(Obj48_PosData).l,a3
00018F7C 45E8 0028                  		lea	$28(a0),a2
00018F80 7C00                       		moveq	#0,d6
00018F82 1C1A                       		move.b	(a2)+,d6
00018F84                            
00018F84                            loc_17BC6:
00018F84 7800                       		moveq	#0,d4
00018F86 181A                       		move.b	(a2)+,d4
00018F88 ED4C                       		lsl.w	#6,d4
00018F8A 0684 00FF D000             		addi.l	#$FFD000,d4
00018F90 2244                       		movea.l	d4,a1
00018F92 101B                       		move.b	(a3)+,d0
00018F94 B029 003C                  		cmp.b	$3C(a1),d0
00018F98 6700                       		beq.s	loc_17BE0
00018F9A 5229 003C                  		addq.b	#1,$3C(a1)
00018F9E                            
00018F9E                            loc_17BE0:
00018F9E 51CE FFE4                  		dbf	d6,loc_17BC6
00018FA2                            
00018FA2 B029 003C                  		cmp.b	$3C(a1),d0
00018FA6 6600                       		bne.s	loc_17BFA
00018FA8 2268 0034                  		movea.l	$34(a0),a1
00018FAC 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018FB2 6600                       		bne.s	loc_17BFA
00018FB4 5428 0024                  		addq.b	#2,$24(a0)
00018FB8                            
00018FB8                            loc_17BFA:
00018FB8 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018FBE 6700                       		beq.s	Obj48_Display
00018FC0 5268 0032                  		addq.w	#1,$32(a0)
00018FC4                            
00018FC4                            Obj48_Display:
00018FC4 6100 0000                  		bsr.w	sub_17C2A
00018FC8 1028 0026                  		move.b	$26(a0),d0
00018FCC 4EB9 0000 8B58             		jsr	(Obj15_Move2).l
00018FD2 4EF9 0000 E7E4             		jmp	DisplaySprite
00018FD8                            ; ===========================================================================
00018FD8                            
00018FD8                            Obj48_Display2:				; XREF: Obj48_Index
00018FD8 6100 0000                  		bsr.w	sub_17C2A
00018FDC 4EB9 0000 8B18             		jsr	(Obj48_Move).l
00018FE2 4EF9 0000 E7E4             		jmp	DisplaySprite
00018FE8                            
00018FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018FE8                            
00018FE8                            
00018FE8                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018FE8 2268 0034                  		movea.l	$34(a0),a1
00018FEC 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018FF2 6400                       		bcc.s	loc_17C3C
00018FF4 0868 0000 001A             		bchg	#0,$1A(a0)
00018FFA                            
00018FFA                            loc_17C3C:
00018FFA 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019000 3029 000C                  		move.w	$C(a1),d0
00019004 D068 0032                  		add.w	$32(a0),d0
00019008 3140 0038                  		move.w	d0,$38(a0)
0001900C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019012 4A29 0022                  		tst.b	$22(a1)
00019016 6A00                       		bpl.s	locret_17C66
00019018 10BC 003F                  		move.b	#$3F,0(a0)
0001901C 117C 0000 0024             		move.b	#0,$24(a0)
00019022                            
00019022                            locret_17C66:
00019022 4E75                       		rts	
00019024                            ; End of function sub_17C2A
00019024                            
00019024                            ; ===========================================================================
00019024                            
00019024                            loc_17C68:				; XREF: Obj48_Index
00019024 2268 0034                  		movea.l	$34(a0),a1
00019028 4A29 0022                  		tst.b	$22(a1)
0001902C 6A00                       		bpl.s	Obj48_Display3
0001902E 10BC 003F                  		move.b	#$3F,0(a0)
00019032 117C 0000 0024             		move.b	#0,$24(a0)
00019038                            
00019038                            Obj48_Display3:
00019038 4EF9 0000 E7E4             		jmp	DisplaySprite
0001903E                            ; ===========================================================================
0001903E                            
0001903E                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001903E 7000                       		moveq	#0,d0
00019040 4A28 001A                  		tst.b	$1A(a0)
00019044 6600                       		bne.s	Obj48_Vanish
00019046 5200                       		addq.b	#1,d0
00019048                            
00019048                            Obj48_Vanish:
00019048 1140 001A                  		move.b	d0,$1A(a0)
0001904C 2268 0034                  		movea.l	$34(a0),a1
00019050 4A29 0022                  		tst.b	$22(a1)
00019054 6A00                       		bpl.s	Obj48_Display4
00019056 117C 0000 0020             		move.b	#0,$20(a0)
0001905C 6100 FB94                  		bsr.w	BossDefeated
00019060 5328 003C                  		subq.b	#1,$3C(a0)
00019064 6A00                       		bpl.s	Obj48_Display4
00019066 10BC 003F                  		move.b	#$3F,(a0)
0001906A 117C 0000 0024             		move.b	#0,$24(a0)
00019070                            
00019070                            Obj48_Display4:
00019070 4EF9 0000 E7E4             		jmp	DisplaySprite
00019076                            ; ===========================================================================
00019076                            Ani_Eggman:
00019076                            	include "_anim\Eggman.asm"
00019076                            ; ---------------------------------------------------------------------------
00019076                            ; Animation script - Eggman (bosses)
00019076                            ; ---------------------------------------------------------------------------
00019076 0000                       		dc.w byte_17CD4-Ani_Eggman
00019078 0000                       		dc.w byte_17CD8-Ani_Eggman
0001907A 0000                       		dc.w byte_17CDC-Ani_Eggman
0001907C 0000                       		dc.w byte_17CE0-Ani_Eggman
0001907E 0000                       		dc.w byte_17CE4-Ani_Eggman
00019080 0000                       		dc.w byte_17CE8-Ani_Eggman
00019082 0000                       		dc.w byte_17CEC-Ani_Eggman
00019084 0000                       		dc.w byte_17CF0-Ani_Eggman
00019086 0000                       		dc.w byte_17CF4-Ani_Eggman
00019088 0000                       		dc.w byte_17CF8-Ani_Eggman
0001908A 0000                       		dc.w byte_17CFC-Ani_Eggman
0001908C 0000                       		dc.w byte_17D00-Ani_Eggman
0001908E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019092 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019096 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001909A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001909E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000190A2 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000190A6 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000190AA 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000190AE 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000190B2 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000190B6 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000190BA 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000190C6                            		even
000190C6                            		even
000190C6                            Ani_TetoB:
000190C6                            	include "_anim\TetoB.asm"
000190C6                            ; ---------------------------------------------------------------------------
000190C6                            ; Animation script - Eggman (bosses)
000190C6                            ; ---------------------------------------------------------------------------
000190C6 0000                       		dc.w spin-Ani_TetoB
000190C8 0000                       		dc.w static-Ani_TetoB
000190CA 0000                       		dc.w static2-Ani_TetoB
000190CC 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
000190D3 0500 FF                    static:	dc.b 5,	0, $FF
000190D6 0501 FF                    static2:	dc.b 5,	1, $FF
000190DA 00                         		even
000190DA 00                         		even
000190DA                            ; ---------------------------------------------------------------------------
000190DA                            ; Sprite mappings - Eggman (boss levels)
000190DA                            ; ---------------------------------------------------------------------------
000190DA                            Map_Eggman:
000190DA                            	include "_maps\Eggman.asm"
000190DA                            Map_dc7e:
000190DA 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000190DC 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000190DE 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000190E0 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000190E2 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000190E4 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000190E6 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000190E8 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000190EA 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000190EC 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000190EE 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000190F0 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000190F2 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000190F4 06                         Map_dc7e_1A: 	dc.b $6
000190F5 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000190FA EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000190FF FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00019104 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00019109 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001910E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00019113 02                         Map_dc7e_39: 	dc.b $2
00019114 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019119 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001911E 02                         Map_dc7e_44: 	dc.b $2
0001911F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019124 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00019129 03                         Map_dc7e_4F: 	dc.b $3
0001912A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001912F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00019134 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00019139 03                         Map_dc7e_5F: 	dc.b $3
0001913A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001913F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00019144 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00019149 03                         Map_dc7e_6F: 	dc.b $3
0001914A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001914F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00019154 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00019159 03                         Map_dc7e_7F: 	dc.b $3
0001915A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001915F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019164 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00019169 04                         Map_dc7e_8F: 	dc.b $4
0001916A E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
0001916F E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00019174 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00019179 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001917E 01                         Map_dc7e_A4: 	dc.b $1
0001917F 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00019184 01                         Map_dc7e_AA: 	dc.b $1
00019185 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001918A 00                         Map_dc7e_B0: 	dc.b $0
0001918B 02                         Map_dc7e_B1: 	dc.b $2
0001918C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00019191 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00019196 02                         Map_dc7e_BC: 	dc.b $2
00019197 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001919C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000191A2 00                         	even
000191A2 00                         	even
000191A2                            
000191A2                            ; ---------------------------------------------------------------------------
000191A2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000191A2                            ; ---------------------------------------------------------------------------
000191A2                            Map_BossItems:
000191A2                            	include "_maps\Boss items.asm"
000191A2                            ; ---------------------------------------------------------------------------
000191A2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000191A2                            ; ---------------------------------------------------------------------------
000191A2 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000191A6 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000191AA 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000191AE 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000191B2 01                         byte_17DE4:	dc.b 1
000191B3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000191B8 02                         byte_17DEA:	dc.b 2
000191B9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000191BE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000191C3 00                         		dc.b 0
000191C4 01                         byte_17DF6:	dc.b 1
000191C5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000191CA 01                         byte_17DFC:	dc.b 1
000191CB 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000191D0 01                         byte_17E02:	dc.b 1
000191D1 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000191D6 04                         byte_17E08:	dc.b 4
000191D7 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000191DC F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000191E1 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000191E6 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000191EB 00                         		dc.b 0
000191EC 02                         byte_17E1E:	dc.b 2
000191ED 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000191F2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000191F7 00                         		dc.b 0
000191F8 02                         byte_17E2A:	dc.b 2
000191F9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000191FE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019204 00                         		even
00019204 00                         		even
00019204                            
00019204                            ; ===========================================================================
00019204                            ; ---------------------------------------------------------------------------
00019204                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00019204                            ; ---------------------------------------------------------------------------
00019204                            
00019204                            
00019204                            obj77:					; XREF: Obj_Index
00019204 7000                       		moveq	#0,d0
00019206 1028 0024                  		move.b	$24(a0),d0
0001920A 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001920E 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00019212                            ; ===========================================================================
00019212 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00019214 0000                       		dc.w obj77_ShipMain-obj77_Index
00019216 0000                       		dc.w obj77_FaceMain-obj77_Index
00019218 0000                       		dc.w obj77_FlameMain-obj77_Index
0001921A                            
0001921A 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
0001921C 0401                       		dc.b 4,	1
0001921E 0607                       		dc.b 6,	7
00019220                            ; ===========================================================================
00019220                            
00019220                            obj77_Main:				; XREF: obj77_Index
00019220 45F9 0001 921A             		lea	(obj77_ObjData).l,a2
00019226 2248                       		movea.l	a0,a1
00019228 7202                       		moveq	#2,d1
0001922A 6000                       		bra.s	obj77_LoadBoss
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            obj77_Loop:
0001922C 4EB9 0000 EC80             		jsr	SingleObjLoad2
00019232 6600                       		bne.s	loc2_17772
00019234                            
00019234                            obj77_LoadBoss:				; XREF: obj77_Main
00019234 135A 0024                  		move.b	(a2)+,$24(a1)
00019238 12BC 0077                  		move.b	#$77,0(a1)
0001923C 3368 0008 0008             		move.w	8(a0),8(a1)
00019242 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019248 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00019250 337C 0400 0002             		move.w	#$400,2(a1)
00019256 137C 0004 0001             		move.b	#4,1(a1)
0001925C 137C 0020 0019             		move.b	#$20,$19(a1)
00019262 137C 0003 0018             		move.b	#3,$18(a1)
00019268 135A 001C                  		move.b	(a2)+,$1C(a1)
0001926C 2348 0034                  		move.l	a0,$34(a1)
00019270 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00019274                            
00019274                            loc2_17772:
00019274 3168 0008 0030             		move.w	8(a0),$30(a0)
0001927A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019280 117C 000F 0020             		move.b	#$F,$20(a0)
00019286 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001928C                            
0001928C                            obj77_ShipMain:				; XREF: obj77_Index
0001928C 7000                       		moveq	#0,d0
0001928E 1028 0025                  		move.b	$25(a0),d0
00019292 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00019296 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001929A 43F9 0001 90C6             		lea	(Ani_TetoB).l,a1
000192A0 4EB9 0000 B832             		jsr	AnimateSprite
000192A6 1028 0022                  		move.b	$22(a0),d0
000192AA 0200 0003                  		andi.b	#3,d0
000192AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000192B4 8128 0001                  		or.b	d0,1(a0)
000192B8 4EF9 0000 E7E4             		jmp	DisplaySprite
000192BE                            ; ===========================================================================
000192BE 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
000192C0 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
000192C2 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
000192C4 0000                       		dc.w loc2_17954-obj77_ShipIndex
000192C6 0000                       		dc.w fatassruns-obj77_ShipIndex		
000192C8 0000                       		dc.w loc2_1797A-obj77_ShipIndex
000192CA 0000                       		dc.w loc2_179AC-obj77_ShipIndex
000192CC 0000                       		dc.w loc2_179F6-obj77_ShipIndex
000192CE                            ; ===========================================================================
000192CE                            
000192CE                            obj77_ShipStart:			; XREF: obj77_ShipIndex
000192CE                            	;	move.w	#$100,$12(a0)	; move ship down
000192CE 6100 F964                  		bsr.w	BossMove
000192D2 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000192D8 6600                       		bne.s	loc2_177E6
000192DA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000192E0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000192E4                            
000192E4                            loc2_177E6:
000192E4                            ;		move.b	$3F(a0),d0
000192E4                            ;		jsr	(CalcSine).l
000192E4 EC40                       		asr.w	#6,d0
000192E6 D068 0038                  		add.w	$38(a0),d0
000192EA 3140 000C                  		move.w	d0,$C(a0)
000192EE 3168 0030 0008             		move.w	$30(a0),8(a0)
000192F4 5428 003F                  		addq.b	#2,$3F(a0)
000192F8 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000192FE 6400                       		bcc.s	locret_1784A2
00019300 4A28 0022                  		tst.b	$22(a0)
00019304 6B00                       		bmi.s	loc2_1784C
00019306 4A28 0020                  		tst.b	$20(a0)
0001930A 6600                       		bne.s	locret_1784A2
0001930C 4A28 003E                  		tst.b	$3E(a0)
00019310 6600                       		bne.s	obj77_ShipFlash
00019312 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00019318 303C 00AC                  		move.w	#$AC,d0
0001931C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019322                            
00019322                            obj77_ShipFlash:
00019322 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019326 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019328 4A51                       		tst.w	(a1)
0001932A 6600                       		bne.s	loc2_1783C
0001932C 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019330                            
00019330                            loc2_1783C:
00019330 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019332 5328 003E                  		subq.b	#1,$3E(a0)
00019336 6600                       		bne.s	locret_1784A2
00019338 117C 000F 0020             		move.b	#$F,$20(a0)
0001933E                            
0001933E                            locret_1784A2:
0001933E 4E75                       		rts	
00019340                            ; ===========================================================================
00019340                            
00019340                            loc2_1784C:				; XREF: loc2_177E6
00019340 7064                       		moveq	#100,d0
00019342 6100 0000                  		bsr.w	AddPoints
00019346 117C 000A 0025             		move.b	#$A,$25(a0)
0001934C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019352 4E75                       		rts	
00019354                            ; ===========================================================================
00019354                            
00019354                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00019354 317C FF00 0010             		move.w	#-$100,$10(a0)
0001935A 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00019360 6100 F8D2                  		bsr.w	BossMove
00019364 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
0001936A 6600                       		bne.s	loc2_17916
0001936C 317C 0000 0010             		move.w	#0,$10(a0)
00019372 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00019378 317C 0000 0012             		move.w	#0,$12(a0)
0001937E 5428 0025                  		addq.b	#2,$25(a0)
00019382                            
00019382                            loc2_17910:
00019382 317C 0077 003C             		move.w	#$77,$3C(a0)
00019388                            
00019388                            loc2_17916:
00019388 6000 FF5A                  		bra.w	loc2_177E6
0001938C                            ; ===========================================================================
0001938C                            
0001938C                            obj77_ShipMove:				; XREF: obj77_ShipIndex
0001938C 6100 F8A6                  		bsr.w	BossMove
00019390 5368 003C                  		subq.w	#1,$3C(a0)
00019394 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00019396 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
0001939C 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
000193A2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
000193A8 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
000193AE 6600                       		bne.s	loc2_17950 ; if not branch
000193B0                            
000193B0                            fatass_attack:
000193B0 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
000193B6 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000193BC 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
000193C2 6600                       		bne.s	loc2_17950    ; if not you know the drill
000193C4 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000193C8 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000193CE                            
000193CE                            loc2_17950:
000193CE 6000 FF14                  		bra.w	loc2_177E6
000193D2                            ; ===========================================================================
000193D2                            
000193D2                            loc2_17954:				; XREF: obj77_ShipIndex
000193D2 6100 F860                  		bsr.w	BossMove
000193D6 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000193DC                            		; i suck at programming
000193DC 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000193E2 6600                       		bne.s	loc2_17976    ; if not blah blah
000193E4 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000193EA 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000193EE 303C 00B9                  		move.w	#$B9,d0
000193F2 4EB9 0000 1D10             		jsr	(PlaySound).l	; play the earthquake sound
000193F8                            
000193F8                            Peartobombs:	
000193F8 4EB9 0000 EC80                		jsr	SingleObjLoad2
000193FE 6600                       		bne.s	secondone
00019400 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00019404 337C 1D70 0008             		move.w	#$1D70,8(a1)
0001940A 337C 0670 000C             		move.w	#$670,$C(a1)
00019410                            secondone:		
00019410 4EB9 0000 EC80                		jsr	SingleObjLoad2
00019416 6600                       		bne.s	loc2_17976		
00019418 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
0001941C 337C 1D20 0008             		move.w	#$1D20,8(a1)
00019422 337C 0670 000C             		move.w	#$670,$C(a1)
00019428                            lastone:
00019428 4EB9 0000 EC80                		jsr	SingleObjLoad2
0001942E 6600                       		bne.s	loc2_17976		
00019430 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00019434 337C 1E00 0008             		move.w	#$1E00,8(a1)
0001943A 337C 0670 000C             		move.w	#$670,$C(a1)
00019440                            		
00019440                            loc2_17976:
00019440 6000 FEA2                  		bra.w	loc2_177E6
00019444                            		
00019444                            ; ===========================================================================
00019444                            Fatassruns:
00019444 6100 F7EE                   		bsr.w	BossMove
00019448 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
0001944E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00019454 6600                       		bne.s	processstuff ; is not go here
00019456 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
0001945C 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00019462 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00019466 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
0001946C 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00019472                            		
00019472                            		
00019472                            processstuff:
00019472 6000 FE70                  		bra.w	loc2_177E6
00019476                            ; ===========================================================================
00019476                            
00019476                            loc2_1797A:				; XREF: obj77_ShipIndex
00019476 5368 003C                  		subq.w	#1,$3C(a0)
0001947A 6B00                       		bmi.s	loc2_17984
0001947C 6000 F774                  		bra.w	BossDefeated
00019480                            ; ===========================================================================
00019480                            
00019480                            loc2_17984:
00019480 08E8 0000 0022             		bset	#0,$22(a0)
00019486 08A8 0007 0022             		bclr	#7,$22(a0)
0001948C 4268 0010                  		clr.w	$10(a0)
00019490 5428 0025                  		addq.b	#2,$25(a0)
00019494 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001949A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001949E 6600                       		bne.s	locret_179AA2
000194A0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000194A6                            
000194A6                            locret_179AA2:
000194A6 4E75                       		rts	
000194A8                            ; ===========================================================================
000194A8                            
000194A8                            loc2_179AC:				; XREF: obj77_ShipIndex
000194A8 5268 003C                  		addq.w	#1,$3C(a0)
000194AC 6700                       		beq.s	loc2_179BC
000194AE 6A00                       		bpl.s	loc2_179C2
000194B0 0668 0018 0012             		addi.w	#$18,$12(a0)
000194B6 6000                       		bra.s	loc2_179EE
000194B8                            ; ===========================================================================
000194B8                            
000194B8                            loc2_179BC:
000194B8 4268 0012                  		clr.w	$12(a0)
000194BC 6000                       		bra.s	loc2_179EE
000194BE                            ; ===========================================================================
000194BE                            
000194BE                            loc2_179C2:
000194BE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000194C4 6500                       		bcs.s	loc2_179DA
000194C6 6700                       		beq.s	loc2_179E0
000194C8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000194CE 6500                       		bcs.s	loc2_179EE
000194D0 5428 0025                  		addq.b	#2,$25(a0)
000194D4 6000                       		bra.s	loc2_179EE
000194D6                            ; ===========================================================================
000194D6                            
000194D6                            loc2_179DA:
000194D6 5168 0012                  		subq.w	#8,$12(a0)
000194DA 6000                       		bra.s	loc2_179EE
000194DC                            ; ===========================================================================
000194DC                            
000194DC                            loc2_179E0:
000194DC 4268 0012                  		clr.w	$12(a0)
000194E0 303C 0097                  		move.w	#$97,d0
000194E4 4EB9 0000 1D10             		jsr	(PlaySound).l	; play lz3 music
000194EA                            
000194EA                            loc2_179EE:
000194EA 6100 F748                  		bsr.w	BossMove
000194EE 6000 FDF4                  		bra.w	loc2_177E6
000194F2                            ; ===========================================================================
000194F2                            
000194F2                            loc2_179F6:				; XREF: obj77_ShipIndex
000194F2 317C 0400 0010             		move.w	#$400,$10(a0)
000194F8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000194FE 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00019504 6700                       		beq.s	loc2_17A10
00019506 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001950A 6000                       		bra.s	loc2_17A16
0001950C                            ; ===========================================================================
0001950C                            
0001950C                            loc2_17A10:
0001950C 4A28 0001                  		tst.b	1(a0)
00019510 6A00                       		bpl.s	obj77_ShipDel
00019512                            
00019512                            loc2_17A16:
00019512 6100 F720                  		bsr.w	BossMove
00019516 6000 FDCC                  		bra.w	loc2_177E6
0001951A                            ; ===========================================================================
0001951A                            
0001951A                            obj77_ShipDel:
0001951A 4EF9 0000 E820             		jmp	DeleteObject
00019520                            ; ===========================================================================
00019520                            
00019520                            obj77_FaceMain:				; XREF: obj77_Index
00019520 4E75                       		rts
00019522                            ; ===========================================================================
00019522                            
00019522                            obj77_FlameMain:			; XREF: obj77_Index
00019522 4E75                       		rts
00019524                            ; ===========================================================================
00019524                            
00019524                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00019524 43F9 0001 90C6             		lea	(Ani_TetoB).l,a1
0001952A 4EB9 0000 B832             		jsr	AnimateSprite
00019530 4EF9 0000 E7E4             		jmp	DisplaySprite
00019536                            ; ---------------------------------------------------------------------------
00019536                            ; Sprite mappings - Fatass teto boss
00019536                            ; ---------------------------------------------------------------------------
00019536                            Map_TetoBoss:
00019536                            	include "_maps\tetoboss.asm"
00019536                            Map_f09a:
00019536 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00019538 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
0001953A 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
0001953C 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
0001953E 03                         Map_f09a_8: 	dc.b $3
0001953F E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00019544 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00019549 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
0001954E 06                         Map_f09a_18: 	dc.b $6
0001954F EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00019554 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00019559 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
0001955E 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00019563 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00019568 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
0001956D 03                         Map_f09a_37: 	dc.b $3
0001956E E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00019573 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00019578 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
0001957D 06                         Map_f09a_47: 	dc.b $6
0001957E ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00019583 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00019588 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
0001958D DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00019592 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00019597 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
0001959C                            	even
0001959C                            	even
0001959C                            ; ===========================================================================
0001959C                            ; ---------------------------------------------------------------------------
0001959C                            ; Object 73 - Eggman (MZ)
0001959C                            ; ---------------------------------------------------------------------------
0001959C                            
0001959C                            Obj73:					; XREF: Obj_Index
0001959C 7000                       		moveq	#0,d0
0001959E 1028 0024                  		move.b	$24(a0),d0
000195A2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000195A6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000195AA                            ; ===========================================================================
000195AA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000195AC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000195AE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000195B0 0000                       		dc.w Obj73_FlameMain-Obj73_Index
000195B2 0000                       		dc.w Obj73_TubeMain-Obj73_Index
000195B4                            
000195B4 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000195B7 0401 04                    		dc.b 4,	1, 4
000195BA 0607 04                    		dc.b 6,	7, 4
000195BD 0800 03                    		dc.b 8,	0, 3
000195C0                            ; ===========================================================================
000195C0                            
000195C0                            Obj73_Main:				; XREF: Obj73_Index
000195C0 3168 0008 0030             		move.w	8(a0),$30(a0)
000195C6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000195CC 117C 000F 0020             		move.b	#$F,$20(a0)
000195D2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000195D8 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000195DC 2248                       		movea.l	a0,a1
000195DE 7203                       		moveq	#3,d1
000195E0 6000                       		bra.s	Obj73_LoadBoss
000195E2                            ; ===========================================================================
000195E2                            
000195E2                            Obj73_Loop:
000195E2 4EB9 0000 EC80             		jsr	SingleObjLoad2
000195E8 6600                       		bne.s	Obj73_ShipMain
000195EA 12BC 0073                  		move.b	#$73,0(a1)
000195EE 3368 0008 0008             		move.w	8(a0),8(a1)
000195F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000195FA                            
000195FA                            Obj73_LoadBoss:				; XREF: Obj73_Main
000195FA 08A8 0000 0022             		bclr	#0,$22(a0)
00019600 4229 0025                  		clr.b	$25(a1)
00019604 135A 0024                  		move.b	(a2)+,$24(a1)
00019608 135A 001C                  		move.b	(a2)+,$1C(a1)
0001960C 135A 0018                  		move.b	(a2)+,$18(a1)
00019610 237C 0001 90DA 0004        		move.l	#Map_Eggman,4(a1)
00019618 337C 0400 0002             		move.w	#$400,2(a1)
0001961E 137C 0004 0001             		move.b	#4,1(a1)
00019624 137C 0020 0019             		move.b	#$20,$19(a1)
0001962A 2348 0034                  		move.l	a0,$34(a1)
0001962E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019632                            
00019632                            Obj73_ShipMain:
00019632 7000                       		moveq	#0,d0
00019634 1028 0025                  		move.b	$25(a0),d0
00019638 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001963C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019640 43F9 0001 9076             		lea	(Ani_Eggman).l,a1
00019646 4EB9 0000 B832             		jsr	AnimateSprite
0001964C 7003                       		moveq	#3,d0
0001964E C028 0022                  		and.b	$22(a0),d0
00019652 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019658 8128 0001                  		or.b	d0,1(a0)
0001965C 4EF9 0000 E7E4             		jmp	DisplaySprite
00019662                            ; ===========================================================================
00019662 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019664 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019666 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019668 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001966A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001966C                            ; ===========================================================================
0001966C                            
0001966C                            loc_18302:				; XREF: Obj73_ShipIndex
0001966C 1028 003F                  		move.b	$3F(a0),d0
00019670 5428 003F                  		addq.b	#2,$3F(a0)
00019674 4EB9 0000 34B8             		jsr	(CalcSine).l
0001967A E440                       		asr.w	#2,d0
0001967C 3140 0012                  		move.w	d0,$12(a0)
00019680 317C FF00 0010             		move.w	#-$100,$10(a0)
00019686 6100 F5AC                  		bsr.w	BossMove
0001968A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019690 6600                       		bne.s	loc_18334
00019692 5428 0025                  		addq.b	#2,$25(a0)
00019696 4228 0028                  		clr.b	$28(a0)
0001969A 42A8 0010                  		clr.l	$10(a0)
0001969E                            
0001969E                            loc_18334:
0001969E 4EB9 0000 3492             		jsr	(RandomNumber).l
000196A4 1140 0034                  		move.b	d0,$34(a0)
000196A8                            
000196A8                            loc_1833E:
000196A8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000196AE 3168 0030 0008             		move.w	$30(a0),8(a0)
000196B4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
000196BA 6400                       		bcc.s	locret_18390
000196BC 4A28 0022                  		tst.b	$22(a0)
000196C0 6B00                       		bmi.s	loc_18392
000196C2 4A28 0020                  		tst.b	$20(a0)
000196C6 6600                       		bne.s	locret_18390
000196C8 4A28 003E                  		tst.b	$3E(a0)
000196CC 6600                       		bne.s	loc_18374
000196CE 117C 0028 003E             		move.b	#$28,$3E(a0)
000196D4 303C 00AC                  		move.w	#$AC,d0
000196D8 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
000196DE                            
000196DE                            loc_18374:
000196DE 43F8 FB22                  		lea	($FFFFFB22).w,a1
000196E2 7000                       		moveq	#0,d0
000196E4 4A51                       		tst.w	(a1)
000196E6 6600                       		bne.s	loc_18382
000196E8 303C 0EEE                  		move.w	#$EEE,d0
000196EC                            
000196EC                            loc_18382:
000196EC 3280                       		move.w	d0,(a1)
000196EE 5328 003E                  		subq.b	#1,$3E(a0)
000196F2 6600                       		bne.s	locret_18390
000196F4 117C 000F 0020             		move.b	#$F,$20(a0)
000196FA                            
000196FA                            locret_18390:
000196FA 4E75                       		rts	
000196FC                            ; ===========================================================================
000196FC                            
000196FC                            loc_18392:				; XREF: loc_1833E
000196FC 7064                       		moveq	#100,d0
000196FE 6100 0000                  		bsr.w	AddPoints
00019702 117C 0004 0025             		move.b	#4,$25(a0)
00019708 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001970E 4268 0010                  		clr.w	$10(a0)
00019712 4E75                       		rts	
00019714                            ; ===========================================================================
00019714                            
00019714                            loc_183AA:				; XREF: Obj73_ShipIndex
00019714 7000                       		moveq	#0,d0
00019716 1028 0028                  		move.b	$28(a0),d0
0001971A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001971E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019722 0228 0006 0028             		andi.b	#6,$28(a0)
00019728 6000 FF7E                  		bra.w	loc_1833E
0001972C                            ; ===========================================================================
0001972C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001972E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019730 0000                       		dc.w loc_183CA-off_183C2
00019732 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019734                            ; ===========================================================================
00019734                            
00019734                            loc_183CA:				; XREF: off_183C2
00019734 4A68 0010                  		tst.w	$10(a0)
00019738 6600                       		bne.s	loc_183FE
0001973A 7040                       		moveq	#$40,d0
0001973C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019742 6700                       		beq.s	loc_183E6
00019744 6500                       		bcs.s	loc_183DE
00019746 4440                       		neg.w	d0
00019748                            
00019748                            loc_183DE:
00019748 3140 0012                  		move.w	d0,$12(a0)
0001974C 6000 F4E6                  		bra.w	BossMove
00019750                            ; ===========================================================================
00019750                            
00019750                            loc_183E6:
00019750 317C 0200 0010             		move.w	#$200,$10(a0)
00019756 317C 0100 0012             		move.w	#$100,$12(a0)
0001975C 0828 0000 0022             		btst	#0,$22(a0)
00019762 6600                       		bne.s	loc_183FE
00019764 4468 0010                  		neg.w	$10(a0)
00019768                            
00019768                            loc_183FE:
00019768 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001976E 6400                       		bcc.s	Obj73_MakeLava
00019770 6100 F4C2                  		bsr.w	BossMove
00019774 5968 0012                  		subq.w	#4,$12(a0)
00019778                            
00019778                            Obj73_MakeLava:
00019778 5328 0034                  		subq.b	#1,$34(a0)
0001977C 6400                       		bcc.s	loc_1845C
0001977E 4EB9 0000 EC6A             		jsr	SingleObjLoad
00019784 6600                       		bne.s	loc_1844A
00019786 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001978A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019790 4EB9 0000 3492             		jsr	(RandomNumber).l
00019796 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001979C 80FC 0050                  		divu.w	#$50,d0
000197A0 4840                       		swap	d0
000197A2 0640 1878                  		addi.w	#$1878,d0
000197A6 3340 0008                  		move.w	d0,8(a1)
000197AA EE09                       		lsr.b	#7,d1
000197AC 337C 00FF 0028             		move.w	#$FF,$28(a1)
000197B2                            
000197B2                            loc_1844A:
000197B2 4EB9 0000 3492             		jsr	(RandomNumber).l
000197B8 0200 001F                  		andi.b	#$1F,d0
000197BC 0600 0040                  		addi.b	#$40,d0
000197C0 1140 0034                  		move.b	d0,$34(a0)
000197C4                            
000197C4                            loc_1845C:
000197C4 0828 0000 0022             		btst	#0,$22(a0)
000197CA 6700                       		beq.s	loc_18474
000197CC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000197D2 6D00                       		blt.s	locret_1849C
000197D4 317C 1910 0030             		move.w	#$1910,$30(a0)
000197DA 6000                       		bra.s	loc_18482
000197DC                            ; ===========================================================================
000197DC                            
000197DC                            loc_18474:
000197DC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000197E2 6E00                       		bgt.s	locret_1849C
000197E4 317C 1830 0030             		move.w	#$1830,$30(a0)
000197EA                            
000197EA                            loc_18482:
000197EA 4268 0010                  		clr.w	$10(a0)
000197EE 317C FE80 0012             		move.w	#-$180,$12(a0)
000197F4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000197FA 6400                       		bcc.s	loc_18498
000197FC 4468 0012                  		neg.w	$12(a0)
00019800                            
00019800                            loc_18498:
00019800 5428 0028                  		addq.b	#2,$28(a0)
00019804                            
00019804                            locret_1849C:
00019804 4E75                       		rts	
00019806                            ; ===========================================================================
00019806                            
00019806                            Obj73_MakeLava2:			; XREF: off_183C2
00019806 6100 F42C                  		bsr.w	BossMove
0001980A 3028 0038                  		move.w	$38(a0),d0
0001980E 0440 022C                  		subi.w	#$22C,d0
00019812 6E00                       		bgt.s	locret_184F4
00019814 303C 022C                  		move.w	#$22C,d0
00019818 4A68 0012                  		tst.w	$12(a0)
0001981C 6700                       		beq.s	loc_184EA
0001981E 4268 0012                  		clr.w	$12(a0)
00019822 317C 0050 003C             		move.w	#$50,$3C(a0)
00019828 0868 0000 0022             		bchg	#0,$22(a0)
0001982E 4EB9 0000 EC6A             		jsr	SingleObjLoad
00019834 6600                       		bne.s	loc_184EA
00019836 3368 0030 0008             		move.w	$30(a0),8(a1)
0001983C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019842 0669 0018 000C             		addi.w	#$18,$C(a1)
00019848 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001984C 137C 0001 0028             		move.b	#1,$28(a1)
00019852                            
00019852                            loc_184EA:
00019852 5368 003C                  		subq.w	#1,$3C(a0)
00019856 6600                       		bne.s	locret_184F4
00019858 5428 0028                  		addq.b	#2,$28(a0)
0001985C                            
0001985C                            locret_184F4:
0001985C 4E75                       		rts	
0001985E                            ; ===========================================================================
0001985E                            
0001985E                            loc_184F6:				; XREF: Obj73_ShipIndex
0001985E 5368 003C                  		subq.w	#1,$3C(a0)
00019862 6B00                       		bmi.s	loc_18500
00019864 6000 F38C                  		bra.w	BossDefeated
00019868                            ; ===========================================================================
00019868                            
00019868                            loc_18500:
00019868 08E8 0000 0022             		bset	#0,$22(a0)
0001986E 08A8 0007 0022             		bclr	#7,$22(a0)
00019874 4268 0010                  		clr.w	$10(a0)
00019878 5428 0025                  		addq.b	#2,$25(a0)
0001987C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019882 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019886 6600                       		bne.s	locret_1852A
00019888 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001988E 4268 0012                  		clr.w	$12(a0)
00019892                            
00019892                            locret_1852A:
00019892 4E75                       		rts	
00019894                            ; ===========================================================================
00019894                            
00019894                            loc_1852C:				; XREF: Obj73_ShipIndex
00019894 5268 003C                  		addq.w	#1,$3C(a0)
00019898 6700                       		beq.s	loc_18544
0001989A 6A00                       		bpl.s	loc_1854E
0001989C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
000198A2 6400                       		bcc.s	loc_18544
000198A4 0668 0018 0012             		addi.w	#$18,$12(a0)
000198AA 6000                       		bra.s	loc_1857A
000198AC                            ; ===========================================================================
000198AC                            
000198AC                            loc_18544:
000198AC 4268 0012                  		clr.w	$12(a0)
000198B0 4268 003C                  		clr.w	$3C(a0)
000198B4 6000                       		bra.s	loc_1857A
000198B6                            ; ===========================================================================
000198B6                            
000198B6                            loc_1854E:
000198B6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000198BC 6500                       		bcs.s	loc_18566
000198BE 6700                       		beq.s	loc_1856C
000198C0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000198C6 6500                       		bcs.s	loc_1857A
000198C8 5428 0025                  		addq.b	#2,$25(a0)
000198CC 6000                       		bra.s	loc_1857A
000198CE                            ; ===========================================================================
000198CE                            
000198CE                            loc_18566:
000198CE 5168 0012                  		subq.w	#8,$12(a0)
000198D2 6000                       		bra.s	loc_1857A
000198D4                            ; ===========================================================================
000198D4                            
000198D4                            loc_1856C:
000198D4 4268 0012                  		clr.w	$12(a0)
000198D8 303C 0083                  		move.w	#$83,d0
000198DC 4EB9 0000 1D10             		jsr	(PlaySound).l	; play MZ music
000198E2                            
000198E2                            loc_1857A:
000198E2 6100 F350                  		bsr.w	BossMove
000198E6 6000 FDC0                  		bra.w	loc_1833E
000198EA                            ; ===========================================================================
000198EA                            
000198EA                            loc_18582:				; XREF: Obj73_ShipIndex
000198EA 317C 0500 0010             		move.w	#$500,$10(a0)
000198F0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000198F6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000198FC 6400                       		bcc.s	loc_1859C
000198FE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019902 6000                       		bra.s	loc_185A2
00019904                            ; ===========================================================================
00019904                            
00019904                            loc_1859C:
00019904 4A28 0001                  		tst.b	1(a0)
00019908 6A00                       		bpl.s	Obj73_ShipDel
0001990A                            
0001990A                            loc_185A2:
0001990A 6100 F328                  		bsr.w	BossMove
0001990E 6000 FD98                  		bra.w	loc_1833E
00019912                            ; ===========================================================================
00019912                            
00019912                            Obj73_ShipDel:
00019912 4EF9 0000 E820             		jmp	DeleteObject
00019918                            ; ===========================================================================
00019918                            
00019918                            Obj73_FaceMain:				; XREF: Obj73_Index
00019918 7000                       		moveq	#0,d0
0001991A 7201                       		moveq	#1,d1
0001991C 2268 0034                  		movea.l	$34(a0),a1
00019920 1029 0025                  		move.b	$25(a1),d0
00019924 5540                       		subq.w	#2,d0
00019926 6600                       		bne.s	loc_185D2
00019928 0829 0001 0028             		btst	#1,$28(a1)
0001992E 6700                       		beq.s	loc_185DA
00019930 4A69 0012                  		tst.w	$12(a1)
00019934 6600                       		bne.s	loc_185DA
00019936 7204                       		moveq	#4,d1
00019938 6000                       		bra.s	loc_185EE
0001993A                            ; ===========================================================================
0001993A                            
0001993A                            loc_185D2:
0001993A 5500                       		subq.b	#2,d0
0001993C 6B00                       		bmi.s	loc_185DA
0001993E 720A                       		moveq	#$A,d1
00019940 6000                       		bra.s	loc_185EE
00019942                            ; ===========================================================================
00019942                            
00019942                            loc_185DA:
00019942 4A29 0020                  		tst.b	$20(a1)
00019946 6600                       		bne.s	loc_185E4
00019948 7205                       		moveq	#5,d1
0001994A 6000                       		bra.s	loc_185EE
0001994C                            ; ===========================================================================
0001994C                            
0001994C                            loc_185E4:
0001994C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019952 6500                       		bcs.s	loc_185EE
00019954 7204                       		moveq	#4,d1
00019956                            
00019956                            loc_185EE:
00019956 1141 001C                  		move.b	d1,$1C(a0)
0001995A 5900                       		subq.b	#4,d0
0001995C 6600                       		bne.s	loc_18602
0001995E 117C 0006 001C             		move.b	#6,$1C(a0)
00019964 4A28 0001                  		tst.b	1(a0)
00019968 6A00                       		bpl.s	Obj73_FaceDel
0001996A                            
0001996A                            loc_18602:
0001996A 6000                       		bra.s	Obj73_Display
0001996C                            ; ===========================================================================
0001996C                            
0001996C                            Obj73_FaceDel:
0001996C 4EF9 0000 E820             		jmp	DeleteObject
00019972                            ; ===========================================================================
00019972                            
00019972                            Obj73_FlameMain:			; XREF: Obj73_Index
00019972 117C 0007 001C             		move.b	#7,$1C(a0)
00019978 2268 0034                  		movea.l	$34(a0),a1
0001997C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019982 6D00                       		blt.s	loc_1862A
00019984 117C 000B 001C             		move.b	#$B,$1C(a0)
0001998A 4A28 0001                  		tst.b	1(a0)
0001998E 6A00                       		bpl.s	Obj73_FlameDel
00019990 6000                       		bra.s	loc_18636
00019992                            ; ===========================================================================
00019992                            
00019992                            loc_1862A:
00019992 4A69 0010                  		tst.w	$10(a1)
00019996 6700                       		beq.s	loc_18636
00019998 117C 0008 001C             		move.b	#8,$1C(a0)
0001999E                            
0001999E                            loc_18636:
0001999E 6000                       		bra.s	Obj73_Display
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000199A0 4EF9 0000 E820             		jmp	DeleteObject
000199A6                            ; ===========================================================================
000199A6                            
000199A6                            Obj73_Display:
000199A6 43F9 0001 9076             		lea	(Ani_Eggman).l,a1
000199AC 4EB9 0000 B832             		jsr	AnimateSprite
000199B2                            
000199B2                            loc_1864A:
000199B2 2268 0034                  		movea.l	$34(a0),a1
000199B6 3169 0008 0008             		move.w	8(a1),8(a0)
000199BC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000199C2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000199C8 7003                       		moveq	#3,d0
000199CA C028 0022                  		and.b	$22(a0),d0
000199CE 0228 00FC 0001             		andi.b	#-4,1(a0)
000199D4 8128 0001                  		or.b	d0,1(a0)
000199D8 4EF9 0000 E7E4             		jmp	DisplaySprite
000199DE                            ; ===========================================================================
000199DE                            
000199DE                            Obj73_TubeMain:				; XREF: Obj73_Index
000199DE 2268 0034                  		movea.l	$34(a0),a1
000199E2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000199E8 6600                       		bne.s	loc_18688
000199EA 4A28 0001                  		tst.b	1(a0)
000199EE 6A00                       		bpl.s	Obj73_TubeDel
000199F0                            
000199F0                            loc_18688:
000199F0 217C 0001 91A2 0004        		move.l	#Map_BossItems,4(a0)
000199F8 317C 246C 0002             		move.w	#$246C,2(a0)
000199FE 117C 0004 001A             		move.b	#4,$1A(a0)
00019A04 60AC                       		bra.s	loc_1864A
00019A06                            ; ===========================================================================
00019A06                            
00019A06                            Obj73_TubeDel:
00019A06 4EF9 0000 E820             		jmp	DeleteObject
00019A0C                            ; ===========================================================================
00019A0C                            ; ---------------------------------------------------------------------------
00019A0C                            ; Object 74 - lava that	Eggman drops (MZ)
00019A0C                            ; ---------------------------------------------------------------------------
00019A0C                            
00019A0C                            Obj74:					; XREF: Obj_Index
00019A0C 7000                       		moveq	#0,d0
00019A0E 1028 0024                  		move.b	$24(a0),d0
00019A12 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019A16 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019A1A 4EF9 0000 E7E4             		jmp	DisplaySprite
00019A20                            ; ===========================================================================
00019A20 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019A22 0000                       		dc.w Obj74_Action-Obj74_Index
00019A24 0000                       		dc.w loc_18886-Obj74_Index
00019A26 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            Obj74_Main:				; XREF: Obj74_Index
00019A28 117C 0008 0016             		move.b	#8,$16(a0)
00019A2E 117C 0008 0017             		move.b	#8,$17(a0)
00019A34 217C 0000 C430 0004        		move.l	#Map_obj14,4(a0)
00019A3C 317C 0345 0002             		move.w	#$345,2(a0)
00019A42 117C 0004 0001             		move.b	#4,1(a0)
00019A48 117C 0005 0018             		move.b	#5,$18(a0)
00019A4E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A54 117C 0008 0019             		move.b	#8,$19(a0)
00019A5A 5428 0024                  		addq.b	#2,$24(a0)
00019A5E 4A28 0028                  		tst.b	$28(a0)
00019A62 6600                       		bne.s	loc_1870A
00019A64 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A6A 5428 0024                  		addq.b	#2,$24(a0)
00019A6E 6000 0000                  		bra.w	loc_18886
00019A72                            ; ===========================================================================
00019A72                            
00019A72                            loc_1870A:
00019A72 117C 001E 0029             		move.b	#$1E,$29(a0)
00019A78 303C 00AE                  		move.w	#$AE,d0
00019A7C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play lava sound
00019A82                            
00019A82                            Obj74_Action:				; XREF: Obj74_Index
00019A82 7000                       		moveq	#0,d0
00019A84 1028 0025                  		move.b	$25(a0),d0
00019A88 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019A8C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019A90 4EB9 0000 E7BE             		jsr	SpeedToPos
00019A96 43F9 0000 F69E             		lea	(Ani_obj14).l,a1
00019A9C 4EB9 0000 B832             		jsr	AnimateSprite
00019AA2 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019AA8 6200                       		bhi.s	Obj74_Delete
00019AAA 4E75                       		rts	
00019AAC                            ; ===========================================================================
00019AAC                            
00019AAC                            Obj74_Delete:
00019AAC 4EF9 0000 E820             		jmp	DeleteObject
00019AB2                            ; ===========================================================================
00019AB2 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019AB4 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019AB6 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019AB8 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019ABA                            ; ===========================================================================
00019ABA                            
00019ABA                            Obj74_Drop:				; XREF: Obj74_Index2
00019ABA 08E8 0001 0022             		bset	#1,$22(a0)
00019AC0 5328 0029                  		subq.b	#1,$29(a0)
00019AC4 6A00                       		bpl.s	locret_18780
00019AC6 117C 008B 0020             		move.b	#$8B,$20(a0)
00019ACC 4228 0028                  		clr.b	$28(a0)
00019AD0 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AD6 08A8 0001 0022             		bclr	#1,$22(a0)
00019ADC 6100 C618                  		bsr.w	ObjHitFloor
00019AE0 4A41                       		tst.w	d1
00019AE2 6A00                       		bpl.s	locret_18780
00019AE4 5428 0025                  		addq.b	#2,$25(a0)
00019AE8                            
00019AE8                            locret_18780:
00019AE8 4E75                       		rts	
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019AEA 5568 000C                  		subq.w	#2,$C(a0)
00019AEE 08E8 0007 0002             		bset	#7,2(a0)
00019AF4 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019AFA 4268 0012                  		clr.w	$12(a0)
00019AFE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019B04 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019B0A 117C 0003 0029             		move.b	#3,$29(a0)
00019B10 4EB9 0000 EC80             		jsr	SingleObjLoad2
00019B16 6600                       		bne.s	loc_187CA
00019B18 47D1                       		lea	(a1),a3
00019B1A 45D0                       		lea	(a0),a2
00019B1C 7003                       		moveq	#3,d0
00019B1E                            
00019B1E                            Obj74_Loop:
00019B1E 26DA                       		move.l	(a2)+,(a3)+
00019B20 26DA                       		move.l	(a2)+,(a3)+
00019B22 26DA                       		move.l	(a2)+,(a3)+
00019B24 26DA                       		move.l	(a2)+,(a3)+
00019B26 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019B2A                            
00019B2A 4469 0010                  		neg.w	$10(a1)
00019B2E 5429 0025                  		addq.b	#2,$25(a1)
00019B32                            
00019B32                            loc_187CA:
00019B32 5428 0025                  		addq.b	#2,$25(a0)
00019B36 4E75                       		rts	
00019B38                            
00019B38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B38                            
00019B38                            
00019B38                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019B38 4EB9 0000 EC80             		jsr	SingleObjLoad2
00019B3E 6600                       		bne.s	locret_187EE
00019B40 3368 0008 0008             		move.w	8(a0),8(a1)
00019B46 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B4C 12BC 0074                  		move.b	#$74,(a1)
00019B50 337C 0067 0028             		move.w	#$67,$28(a1)
00019B56                            
00019B56                            locret_187EE:
00019B56 4E75                       		rts	
00019B58                            ; End of function Obj74_Duplicate2
00019B58                            
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019B58 6100 C59C                  		bsr.w	ObjHitFloor
00019B5C 4A41                       		tst.w	d1
00019B5E 6A00                       		bpl.s	loc_18826
00019B60 3028 0008                  		move.w	8(a0),d0
00019B64 0C40 1940                  		cmpi.w	#$1940,d0
00019B68 6E00                       		bgt.s	loc_1882C
00019B6A 3228 0030                  		move.w	$30(a0),d1
00019B6E B240                       		cmp.w	d0,d1
00019B70 6700                       		beq.s	loc_1881E
00019B72 0240 0010                  		andi.w	#$10,d0
00019B76 0241 0010                  		andi.w	#$10,d1
00019B7A B240                       		cmp.w	d0,d1
00019B7C 6700                       		beq.s	loc_1881E
00019B7E 61B8                       		bsr.s	Obj74_Duplicate2
00019B80 3168 0008 0032             		move.w	8(a0),$32(a0)
00019B86                            
00019B86                            loc_1881E:
00019B86 3168 0008 0030             		move.w	8(a0),$30(a0)
00019B8C 4E75                       		rts	
00019B8E                            ; ===========================================================================
00019B8E                            
00019B8E                            loc_18826:
00019B8E 5428 0025                  		addq.b	#2,$25(a0)
00019B92 4E75                       		rts	
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            loc_1882C:
00019B94 5428 0024                  		addq.b	#2,$24(a0)
00019B98 4E75                       		rts	
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019B9A 08A8 0001 0022             		bclr	#1,$22(a0)
00019BA0 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019BA6 3028 0008                  		move.w	8(a0),d0
00019BAA 9068 0032                  		sub.w	$32(a0),d0
00019BAE 6A00                       		bpl.s	loc_1884A
00019BB0 4440                       		neg.w	d0
00019BB2                            
00019BB2                            loc_1884A:
00019BB2 0C40 0012                  		cmpi.w	#$12,d0
00019BB6 6600                       		bne.s	loc_18856
00019BB8 08A8 0007 0002             		bclr	#7,2(a0)
00019BBE                            
00019BBE                            loc_18856:
00019BBE 6100 C536                  		bsr.w	ObjHitFloor
00019BC2 4A41                       		tst.w	d1
00019BC4 6A00                       		bpl.s	locret_1887E
00019BC6 5328 0029                  		subq.b	#1,$29(a0)
00019BCA 6700                       		beq.s	Obj74_Delete2
00019BCC 4268 0012                  		clr.w	$12(a0)
00019BD0 3168 0032 0008             		move.w	$32(a0),8(a0)
00019BD6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019BDC 08E8 0007 0002             		bset	#7,2(a0)
00019BE2 5528 0025                  		subq.b	#2,$25(a0)
00019BE6                            
00019BE6                            locret_1887E:
00019BE6 4E75                       		rts	
00019BE8                            ; ===========================================================================
00019BE8                            
00019BE8                            Obj74_Delete2:
00019BE8 4EF9 0000 E820             		jmp	DeleteObject
00019BEE                            ; ===========================================================================
00019BEE                            
00019BEE                            loc_18886:				; XREF: Obj74_Index
00019BEE 08E8 0007 0002             		bset	#7,2(a0)
00019BF4 5328 0029                  		subq.b	#1,$29(a0)
00019BF8 6600                       		bne.s	Obj74_Animate
00019BFA 117C 0001 001C             		move.b	#1,$1C(a0)
00019C00 5968 000C                  		subq.w	#4,$C(a0)
00019C04 4228 0020                  		clr.b	$20(a0)
00019C08                            
00019C08                            Obj74_Animate:
00019C08 43F9 0000 F69E             		lea	(Ani_obj14).l,a1
00019C0E 4EF9 0000 B832             		jmp	AnimateSprite
00019C14                            ; ===========================================================================
00019C14                            
00019C14                            Obj74_Delete3:				; XREF: Obj74_Index
00019C14 4EF9 0000 E820             		jmp	DeleteObject
00019C1A                            ; ===========================================================================
00019C1A                            
00019C1A                            Obj7A_Delete:
00019C1A 4EF9 0000 E820             		jmp	DeleteObject
00019C20                            ; ===========================================================================
00019C20                            ; ---------------------------------------------------------------------------
00019C20                            ; Object 7A - Eggman (SLZ)
00019C20                            ; ---------------------------------------------------------------------------
00019C20                            
00019C20                            Obj7A:					; XREF: Obj_Index
00019C20 7000                       		moveq	#0,d0
00019C22 1028 0024                  		move.b	$24(a0),d0
00019C26 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019C2A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019C2E                            ; ===========================================================================
00019C2E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019C30 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019C32 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019C34 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019C36 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019C38                            
00019C38 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019C3B 0401 04                    		dc.b 4,	1, 4
00019C3E 0607 04                    		dc.b 6,	7, 4
00019C41 0800 03                    		dc.b 8,	0, 3
00019C44                            ; ===========================================================================
00019C44                            
00019C44                            Obj7A_Main:				; XREF: Obj7A_Index
00019C44 317C 2188 0008             		move.w	#$2188,8(a0)
00019C4A 317C 0228 000C             		move.w	#$228,$C(a0)
00019C50 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C56 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C5C 117C 000F 0020             		move.b	#$F,$20(a0)
00019C62 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C68 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019C6C 2248                       		movea.l	a0,a1
00019C6E 7203                       		moveq	#3,d1
00019C70 6000                       		bra.s	Obj7A_LoadBoss
00019C72                            ; ===========================================================================
00019C72                            
00019C72                            Obj7A_Loop:
00019C72 4EB9 0000 EC80             		jsr	SingleObjLoad2
00019C78 6600                       		bne.s	loc_1895C
00019C7A 12BC 007A                  		move.b	#$7A,0(a1)
00019C7E 3368 0008 0008             		move.w	8(a0),8(a1)
00019C84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C8A                            
00019C8A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019C8A 08A8 0000 0022             		bclr	#0,$22(a0)
00019C90 4229 0025                  		clr.b	$25(a1)
00019C94 135A 0024                  		move.b	(a2)+,$24(a1)
00019C98 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C9C 135A 0018                  		move.b	(a2)+,$18(a1)
00019CA0 237C 0001 90DA 0004        		move.l	#Map_Eggman,4(a1)
00019CA8 337C 0400 0002             		move.w	#$400,2(a1)
00019CAE 137C 0004 0001             		move.b	#4,1(a1)
00019CB4 137C 0020 0019             		move.b	#$20,$19(a1)
00019CBA 2348 0034                  		move.l	a0,$34(a1)
00019CBE 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019CC2                            
00019CC2                            loc_1895C:
00019CC2 43F8 D040                  		lea	($FFFFD040).w,a1
00019CC6 45E8 002A                  		lea	$2A(a0),a2
00019CCA 705E                       		moveq	#$5E,d0
00019CCC 723E                       		moveq	#$3E,d1
00019CCE                            
00019CCE                            loc_18968:
00019CCE B011                       		cmp.b	(a1),d0
00019CD0 6600                       		bne.s	loc_18974
00019CD2 4A29 0028                  		tst.b	$28(a1)
00019CD6 6700                       		beq.s	loc_18974
00019CD8 34C9                       		move.w	a1,(a2)+
00019CDA                            
00019CDA                            loc_18974:
00019CDA D2FC 0040                  		adda.w	#$40,a1
00019CDE 51C9 FFEE                  		dbf	d1,loc_18968
00019CE2                            
00019CE2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019CE2 7000                       		moveq	#0,d0
00019CE4 1028 0025                  		move.b	$25(a0),d0
00019CE8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019CEC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019CF0 43F9 0001 9076             		lea	(Ani_Eggman).l,a1
00019CF6 4EB9 0000 B832             		jsr	AnimateSprite
00019CFC 7003                       		moveq	#3,d0
00019CFE C028 0022                  		and.b	$22(a0),d0
00019D02 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D08 8128 0001                  		or.b	d0,1(a0)
00019D0C 4EF9 0000 E7E4             		jmp	DisplaySprite
00019D12                            ; ===========================================================================
00019D12 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019D14 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019D16 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019D18 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019D1A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019D1C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019D1E                            ; ===========================================================================
00019D1E                            
00019D1E                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019D1E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019D24 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019D2A 6400                       		bcc.s	loc_189CA
00019D2C 5428 0025                  		addq.b	#2,$25(a0)
00019D30                            
00019D30                            loc_189CA:
00019D30 6100 EF02                  		bsr.w	BossMove
00019D34 1028 003F                  		move.b	$3F(a0),d0
00019D38 5428 003F                  		addq.b	#2,$3F(a0)
00019D3C 4EB9 0000 34B8             		jsr	(CalcSine).l
00019D42 EC40                       		asr.w	#6,d0
00019D44 D068 0038                  		add.w	$38(a0),d0
00019D48 3140 000C                  		move.w	d0,$C(a0)
00019D4C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D52 6000                       		bra.s	loc_189FE
00019D54                            ; ===========================================================================
00019D54                            
00019D54                            loc_189EE:
00019D54 6100 EEDE                  		bsr.w	BossMove
00019D58 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D5E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D64                            
00019D64                            loc_189FE:
00019D64 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019D6A 6400                       		bcc.s	locret_18A44
00019D6C 4A28 0022                  		tst.b	$22(a0)
00019D70 6B00                       		bmi.s	loc_18A46
00019D72 4A28 0020                  		tst.b	$20(a0)
00019D76 6600                       		bne.s	locret_18A44
00019D78 4A28 003E                  		tst.b	$3E(a0)
00019D7C 6600                       		bne.s	loc_18A28
00019D7E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D84 303C 00AC                  		move.w	#$AC,d0
00019D88 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D8E                            
00019D8E                            loc_18A28:
00019D8E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D92 7000                       		moveq	#0,d0
00019D94 4A51                       		tst.w	(a1)
00019D96 6600                       		bne.s	loc_18A36
00019D98 303C 0EEE                  		move.w	#$EEE,d0
00019D9C                            
00019D9C                            loc_18A36:
00019D9C 3280                       		move.w	d0,(a1)
00019D9E 5328 003E                  		subq.b	#1,$3E(a0)
00019DA2 6600                       		bne.s	locret_18A44
00019DA4 117C 000F 0020             		move.b	#$F,$20(a0)
00019DAA                            
00019DAA                            locret_18A44:
00019DAA 4E75                       		rts	
00019DAC                            ; ===========================================================================
00019DAC                            
00019DAC                            loc_18A46:
00019DAC 7064                       		moveq	#100,d0
00019DAE 6100 0000                  		bsr.w	AddPoints
00019DB2 117C 0006 0025             		move.b	#6,$25(a0)
00019DB8 117C 0078 003C             		move.b	#$78,$3C(a0)
00019DBE 4268 0010                  		clr.w	$10(a0)
00019DC2 4E75                       		rts	
00019DC4                            ; ===========================================================================
00019DC4                            
00019DC4                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019DC4 3028 0030                  		move.w	$30(a0),d0
00019DC8 317C 0200 0010             		move.w	#$200,$10(a0)
00019DCE 0828 0000 0022             		btst	#0,$22(a0)
00019DD4 6600                       		bne.s	loc_18A7C
00019DD6 4468 0010                  		neg.w	$10(a0)
00019DDA 0C40 2008                  		cmpi.w	#$2008,d0
00019DDE 6E00                       		bgt.s	loc_18A88
00019DE0 6000                       		bra.s	loc_18A82
00019DE2                            ; ===========================================================================
00019DE2                            
00019DE2                            loc_18A7C:
00019DE2 0C40 2138                  		cmpi.w	#$2138,d0
00019DE6 6D00                       		blt.s	loc_18A88
00019DE8                            
00019DE8                            loc_18A82:
00019DE8 0868 0000 0022             		bchg	#0,$22(a0)
00019DEE                            
00019DEE                            loc_18A88:
00019DEE 3028 0008                  		move.w	8(a0),d0
00019DF2 72FF                       		moveq	#-1,d1
00019DF4 7402                       		moveq	#2,d2
00019DF6 45E8 002A                  		lea	$2A(a0),a2
00019DFA 7828                       		moveq	#$28,d4
00019DFC 4A68 0010                  		tst.w	$10(a0)
00019E00 6A00                       		bpl.s	loc_18A9E
00019E02 4444                       		neg.w	d4
00019E04                            
00019E04                            loc_18A9E:
00019E04 321A                       		move.w	(a2)+,d1
00019E06 2641                       		movea.l	d1,a3
00019E08 082B 0003 0022             		btst	#3,$22(a3)
00019E0E 6600                       		bne.s	loc_18AB4
00019E10 362B 0008                  		move.w	8(a3),d3
00019E14 D644                       		add.w	d4,d3
00019E16 9640                       		sub.w	d0,d3
00019E18 6700                       		beq.s	loc_18AC0
00019E1A                            
00019E1A                            loc_18AB4:
00019E1A 51CA FFE8                  		dbf	d2,loc_18A9E
00019E1E                            
00019E1E 1142 0028                  		move.b	d2,$28(a0)
00019E22 6000 FF0C                  		bra.w	loc_189CA
00019E26                            ; ===========================================================================
00019E26                            
00019E26                            loc_18AC0:
00019E26 1142 0028                  		move.b	d2,$28(a0)
00019E2A 5428 0025                  		addq.b	#2,$25(a0)
00019E2E 117C 0028 003C             		move.b	#$28,$3C(a0)
00019E34 6000 FEFA                  		bra.w	loc_189CA
00019E38                            ; ===========================================================================
00019E38                            
00019E38                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019E38 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019E3E 6600                       		bne.s	loc_18B36
00019E40 70FF                       		moveq	#-1,d0
00019E42 1028 0028                  		move.b	$28(a0),d0
00019E46 4880                       		ext.w	d0
00019E48 6B00                       		bmi.s	loc_18B40
00019E4A 5540                       		subq.w	#2,d0
00019E4C 4440                       		neg.w	d0
00019E4E D040                       		add.w	d0,d0
00019E50 43E8 002A                  		lea	$2A(a0),a1
00019E54 3031 0000                  		move.w	(a1,d0.w),d0
00019E58 2440                       		movea.l	d0,a2
00019E5A 43F8 D040                  		lea	($FFFFD040).w,a1
00019E5E 723E                       		moveq	#$3E,d1
00019E60                            
00019E60                            loc_18AFA:
00019E60 B0A9 003C                  		cmp.l	$3C(a1),d0
00019E64 6700                       		beq.s	loc_18B40
00019E66 D2FC 0040                  		adda.w	#$40,a1
00019E6A 51C9 FFF4                  		dbf	d1,loc_18AFA
00019E6E                            
00019E6E 2F08                       		move.l	a0,-(sp)
00019E70 41D2                       		lea	(a2),a0
00019E72 4EB9 0000 EC80             		jsr	SingleObjLoad2
00019E78 205F                       		movea.l	(sp)+,a0
00019E7A 6600                       		bne.s	loc_18B40
00019E7C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019E80 3368 0008 0008             		move.w	8(a0),8(a1)
00019E86 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E8C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019E92 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019E98 234A 003C                  		move.l	a2,$3C(a1)
00019E9C                            
00019E9C                            loc_18B36:
00019E9C 5328 003C                  		subq.b	#1,$3C(a0)
00019EA0 6700                       		beq.s	loc_18B40
00019EA2 6000 FEC0                  		bra.w	loc_189FE
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            loc_18B40:
00019EA6 5528 0025                  		subq.b	#2,$25(a0)
00019EAA 6000 FE84                  		bra.w	loc_189CA
00019EAE                            ; ===========================================================================
00019EAE                            
00019EAE                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019EAE 5328 003C                  		subq.b	#1,$3C(a0)
00019EB2 6B00                       		bmi.s	loc_18B52
00019EB4 6000 ED3C                  		bra.w	BossDefeated
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            loc_18B52:
00019EB8 5428 0025                  		addq.b	#2,$25(a0)
00019EBC 4268 0012                  		clr.w	$12(a0)
00019EC0 08E8 0000 0022             		bset	#0,$22(a0)
00019EC6 08A8 0007 0022             		bclr	#7,$22(a0)
00019ECC 4268 0010                  		clr.w	$10(a0)
00019ED0 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019ED6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EDA 6600                       		bne.s	loc_18B7C
00019EDC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EE2                            
00019EE2                            loc_18B7C:
00019EE2 6000 FE80                  		bra.w	loc_189FE
00019EE6                            ; ===========================================================================
00019EE6                            
00019EE6                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019EE6 5228 003C                  		addq.b	#1,$3C(a0)
00019EEA 6700                       		beq.s	loc_18B90
00019EEC 6A00                       		bpl.s	loc_18B96
00019EEE 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EF4 6000                       		bra.s	loc_18BC2
00019EF6                            ; ===========================================================================
00019EF6                            
00019EF6                            loc_18B90:
00019EF6 4268 0012                  		clr.w	$12(a0)
00019EFA 6000                       		bra.s	loc_18BC2
00019EFC                            ; ===========================================================================
00019EFC                            
00019EFC                            loc_18B96:
00019EFC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019F02 6500                       		bcs.s	loc_18BAE
00019F04 6700                       		beq.s	loc_18BB4
00019F06 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019F0C 6500                       		bcs.s	loc_18BC2
00019F0E 5428 0025                  		addq.b	#2,$25(a0)
00019F12 6000                       		bra.s	loc_18BC2
00019F14                            ; ===========================================================================
00019F14                            
00019F14                            loc_18BAE:
00019F14 5168 0012                  		subq.w	#8,$12(a0)
00019F18 6000                       		bra.s	loc_18BC2
00019F1A                            ; ===========================================================================
00019F1A                            
00019F1A                            loc_18BB4:
00019F1A 4268 0012                  		clr.w	$12(a0)
00019F1E 303C 0084                  		move.w	#$84,d0
00019F22 4EB9 0000 1D10             		jsr	(PlaySound).l	; play SLZ music
00019F28                            
00019F28                            loc_18BC2:
00019F28 6000 FE2A                  		bra.w	loc_189EE
00019F2C                            ; ===========================================================================
00019F2C                            
00019F2C                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019F2C 317C 0400 0010             		move.w	#$400,$10(a0)
00019F32 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F38 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019F3E 6400                       		bcc.s	loc_18BE0
00019F40 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F44 6000                       		bra.s	loc_18BE8
00019F46                            ; ===========================================================================
00019F46                            
00019F46                            loc_18BE0:
00019F46 4A28 0001                  		tst.b	1(a0)
00019F4A 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019F4E                            
00019F4E                            loc_18BE8:
00019F4E 6100 ECE4                  		bsr.w	BossMove
00019F52 6000 FDDC                  		bra.w	loc_189CA
00019F56                            ; ===========================================================================
00019F56                            
00019F56                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019F56 7000                       		moveq	#0,d0
00019F58 7201                       		moveq	#1,d1
00019F5A 2268 0034                  		movea.l	$34(a0),a1
00019F5E 1029 0025                  		move.b	$25(a1),d0
00019F62 0C00 0006                  		cmpi.b	#6,d0
00019F66 6B00                       		bmi.s	loc_18C06
00019F68 720A                       		moveq	#$A,d1
00019F6A 6000                       		bra.s	loc_18C1A
00019F6C                            ; ===========================================================================
00019F6C                            
00019F6C                            loc_18C06:
00019F6C 4A29 0020                  		tst.b	$20(a1)
00019F70 6600                       		bne.s	loc_18C10
00019F72 7205                       		moveq	#5,d1
00019F74 6000                       		bra.s	loc_18C1A
00019F76                            ; ===========================================================================
00019F76                            
00019F76                            loc_18C10:
00019F76 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F7C 6500                       		bcs.s	loc_18C1A
00019F7E 7204                       		moveq	#4,d1
00019F80                            
00019F80                            loc_18C1A:
00019F80 1141 001C                  		move.b	d1,$1C(a0)
00019F84 0C00 000A                  		cmpi.b	#$A,d0
00019F88 6600                       		bne.s	loc_18C32
00019F8A 117C 0006 001C             		move.b	#6,$1C(a0)
00019F90 4A28 0001                  		tst.b	1(a0)
00019F94 6A00 FC84                  		bpl.w	Obj7A_Delete
00019F98                            
00019F98                            loc_18C32:
00019F98 6000                       		bra.s	loc_18C6C
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019F9A 117C 0008 001C             		move.b	#8,$1C(a0)
00019FA0 2268 0034                  		movea.l	$34(a0),a1
00019FA4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019FAA 6600                       		bne.s	loc_18C56
00019FAC 4A28 0001                  		tst.b	1(a0)
00019FB0 6A00 FC68                  		bpl.w	Obj7A_Delete
00019FB4 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FBA 6000                       		bra.s	loc_18C6C
00019FBC                            ; ===========================================================================
00019FBC                            
00019FBC                            loc_18C56:
00019FBC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FC2 6E00                       		bgt.s	loc_18C6C
00019FC4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019FCA 6D00                       		blt.s	loc_18C6C
00019FCC 117C 0007 001C             		move.b	#7,$1C(a0)
00019FD2                            
00019FD2                            loc_18C6C:
00019FD2 43F9 0001 9076             		lea	(Ani_Eggman).l,a1
00019FD8 4EB9 0000 B832             		jsr	AnimateSprite
00019FDE                            
00019FDE                            loc_18C78:
00019FDE 2268 0034                  		movea.l	$34(a0),a1
00019FE2 3169 0008 0008             		move.w	8(a1),8(a0)
00019FE8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FEE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FF4 7003                       		moveq	#3,d0
00019FF6 C028 0022                  		and.b	$22(a0),d0
00019FFA 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A000 8128 0001                  		or.b	d0,1(a0)
0001A004 4EF9 0000 E7E4             		jmp	DisplaySprite
0001A00A                            ; ===========================================================================
0001A00A                            
0001A00A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A00A 2268 0034                  		movea.l	$34(a0),a1
0001A00E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A014 6600                       		bne.s	loc_18CB8
0001A016 4A28 0001                  		tst.b	1(a0)
0001A01A 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A01E                            
0001A01E                            loc_18CB8:
0001A01E 217C 0001 91A2 0004        		move.l	#Map_BossItems,4(a0)
0001A026 317C 246C 0002             		move.w	#$246C,2(a0)
0001A02C 117C 0003 001A             		move.b	#3,$1A(a0)
0001A032 60AA                       		bra.s	loc_18C78
0001A034                            ; ===========================================================================
0001A034                            ; ---------------------------------------------------------------------------
0001A034                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A034                            ; ---------------------------------------------------------------------------
0001A034                            
0001A034                            Obj7B:					; XREF: Obj_Index
0001A034 7000                       		moveq	#0,d0
0001A036 1028 0024                  		move.b	$24(a0),d0
0001A03A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A03E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A042 3028 0030                  		move.w	$30(a0),d0
0001A046 0240 FF80                  		andi.w	#$FF80,d0
0001A04A 3238 F700                  		move.w	($FFFFF700).w,d1
0001A04E 0441 0080                  		subi.w	#$80,d1
0001A052 0241 FF80                  		andi.w	#$FF80,d1
0001A056 9041                       		sub.w	d1,d0
0001A058 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A05C 0C40 0280                  		cmpi.w	#$280,d0
0001A060 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A064 4EF9 0000 E7E4             		jmp	DisplaySprite
0001A06A                            ; ===========================================================================
0001A06A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A06C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A06E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A070 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A072 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A074 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A076                            ; ===========================================================================
0001A076                            
0001A076                            Obj7B_Main:				; XREF: Obj7B_Index
0001A076 217C 0001 2BB0 0004        		move.l	#Map_obj5Ea,4(a0)
0001A07E 317C 0518 0002             		move.w	#$518,2(a0)
0001A084 117C 0001 001A             		move.b	#1,$1A(a0)
0001A08A 0028 0004 0001             		ori.b	#4,1(a0)
0001A090 117C 0004 0018             		move.b	#4,$18(a0)
0001A096 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A09C 117C 000C 0019             		move.b	#$C,$19(a0)
0001A0A2 2268 003C                  		movea.l	$3C(a0),a1
0001A0A6 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A0AC 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A0B2 08E8 0000 0022             		bset	#0,$22(a0)
0001A0B8 3028 0008                  		move.w	8(a0),d0
0001A0BC B069 0008                  		cmp.w	8(a1),d0
0001A0C0 6E00                       		bgt.s	loc_18D68
0001A0C2 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0C8 117C 0002 003A             		move.b	#2,$3A(a0)
0001A0CE                            
0001A0CE                            loc_18D68:
0001A0CE 5428 0024                  		addq.b	#2,$24(a0)
0001A0D2                            
0001A0D2                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A0D2 4EB9 0000 E74C             		jsr	ObjectFall
0001A0D8 2268 003C                  		movea.l	$3C(a0),a1
0001A0DC 45F9 0000 0000             		lea	(word_19018).l,a2
0001A0E2 7000                       		moveq	#0,d0
0001A0E4 1029 001A                  		move.b	$1A(a1),d0
0001A0E8 3228 0008                  		move.w	8(a0),d1
0001A0EC 9268 0030                  		sub.w	$30(a0),d1
0001A0F0 6400                       		bcc.s	loc_18D8E
0001A0F2 5440                       		addq.w	#2,d0
0001A0F4                            
0001A0F4                            loc_18D8E:
0001A0F4 D040                       		add.w	d0,d0
0001A0F6 3228 0034                  		move.w	$34(a0),d1
0001A0FA D272 0000                  		add.w	(a2,d0.w),d1
0001A0FE B268 000C                  		cmp.w	$C(a0),d1
0001A102 6E00                       		bgt.s	locret_18DC4
0001A104 2268 003C                  		movea.l	$3C(a0),a1
0001A108 7202                       		moveq	#2,d1
0001A10A 0828 0000 0022             		btst	#0,$22(a0)
0001A110 6700                       		beq.s	loc_18DAE
0001A112 7200                       		moveq	#0,d1
0001A114                            
0001A114                            loc_18DAE:
0001A114 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A11A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A120 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A126 6000 0000                  		bra.w	loc_18FA2
0001A12A                            ; ===========================================================================
0001A12A                            
0001A12A                            locret_18DC4:
0001A12A 4E75                       		rts	
0001A12C                            ; ===========================================================================
0001A12C                            
0001A12C                            loc_18DC6:				; XREF: Obj7B_Index
0001A12C 2268 003C                  		movea.l	$3C(a0),a1
0001A130 7000                       		moveq	#0,d0
0001A132 1028 003A                  		move.b	$3A(a0),d0
0001A136 9029 003A                  		sub.b	$3A(a1),d0
0001A13A 6700                       		beq.s	loc_18E2A
0001A13C 6400                       		bcc.s	loc_18DDA
0001A13E 4400                       		neg.b	d0
0001A140                            
0001A140                            loc_18DDA:
0001A140 323C F7E8                  		move.w	#-$818,d1
0001A144 343C FEEC                  		move.w	#-$114,d2
0001A148 0C00 0001                  		cmpi.b	#1,d0
0001A14C 6700                       		beq.s	loc_18E00
0001A14E 323C F6A0                  		move.w	#-$960,d1
0001A152 343C FF0C                  		move.w	#-$F4,d2
0001A156 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A15C 6D00                       		blt.s	loc_18E00
0001A15E 323C F5E0                  		move.w	#-$A20,d1
0001A162 343C FF80                  		move.w	#-$80,d2
0001A166                            
0001A166                            loc_18E00:
0001A166 3141 0012                  		move.w	d1,$12(a0)
0001A16A 3142 0010                  		move.w	d2,$10(a0)
0001A16E 3028 0008                  		move.w	8(a0),d0
0001A172 9068 0030                  		sub.w	$30(a0),d0
0001A176 6400                       		bcc.s	loc_18E16
0001A178 4468 0010                  		neg.w	$10(a0)
0001A17C                            
0001A17C                            loc_18E16:
0001A17C 117C 0001 001A             		move.b	#1,$1A(a0)
0001A182 317C 0020 0028             		move.w	#$20,$28(a0)
0001A188 5428 0024                  		addq.b	#2,$24(a0)
0001A18C 6000 0000                  		bra.w	loc_18EAA
0001A190                            ; ===========================================================================
0001A190                            
0001A190                            loc_18E2A:				; XREF: loc_18DC6
0001A190 45F9 0000 0000             		lea	(word_19018).l,a2
0001A196 7000                       		moveq	#0,d0
0001A198 1029 001A                  		move.b	$1A(a1),d0
0001A19C 343C 0028                  		move.w	#$28,d2
0001A1A0 3228 0008                  		move.w	8(a0),d1
0001A1A4 9268 0030                  		sub.w	$30(a0),d1
0001A1A8 6400                       		bcc.s	loc_18E48
0001A1AA 4442                       		neg.w	d2
0001A1AC 5440                       		addq.w	#2,d0
0001A1AE                            
0001A1AE                            loc_18E48:
0001A1AE D040                       		add.w	d0,d0
0001A1B0 3228 0034                  		move.w	$34(a0),d1
0001A1B4 D272 0000                  		add.w	(a2,d0.w),d1
0001A1B8 3141 000C                  		move.w	d1,$C(a0)
0001A1BC D468 0030                  		add.w	$30(a0),d2
0001A1C0 3142 0008                  		move.w	d2,8(a0)
0001A1C4 4268 000E                  		clr.w	$E(a0)
0001A1C8 4268 000A                  		clr.w	$A(a0)
0001A1CC 5368 0028                  		subq.w	#1,$28(a0)
0001A1D0 6600                       		bne.s	loc_18E7A
0001A1D2 317C 0020 0028             		move.w	#$20,$28(a0)
0001A1D8 117C 0008 0024             		move.b	#8,$24(a0)
0001A1DE 4E75                       		rts	
0001A1E0                            ; ===========================================================================
0001A1E0                            
0001A1E0                            loc_18E7A:
0001A1E0 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A1E6 6600                       		bne.s	loc_18E88
0001A1E8 117C 0005 001F             		move.b	#5,$1F(a0)
0001A1EE                            
0001A1EE                            loc_18E88:
0001A1EE 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A1F4 6600                       		bne.s	loc_18E96
0001A1F6 117C 0002 001F             		move.b	#2,$1F(a0)
0001A1FC                            
0001A1FC                            loc_18E96:
0001A1FC 5328 001E                  		subq.b	#1,$1E(a0)
0001A200 6E00                       		bgt.s	locret_18EA8
0001A202 0868 0000 001A             		bchg	#0,$1A(a0)
0001A208 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A20E                            
0001A20E                            locret_18EA8:
0001A20E 4E75                       		rts	
0001A210                            ; ===========================================================================
0001A210                            
0001A210                            loc_18EAA:				; XREF: Obj7B_Index
0001A210 43F8 D040                  		lea	($FFFFD040).w,a1
0001A214 707A                       		moveq	#$7A,d0
0001A216 7240                       		moveq	#$40,d1
0001A218 743E                       		moveq	#$3E,d2
0001A21A                            
0001A21A                            loc_18EB4:
0001A21A B011                       		cmp.b	(a1),d0
0001A21C 6700                       		beq.s	loc_18EC0
0001A21E D2C1                       		adda.w	d1,a1
0001A220 51CA FFF8                  		dbf	d2,loc_18EB4
0001A224                            
0001A224 6000                       		bra.s	loc_18F38
0001A226                            ; ===========================================================================
0001A226                            
0001A226                            loc_18EC0:
0001A226 3029 0008                  		move.w	8(a1),d0
0001A22A 3229 000C                  		move.w	$C(a1),d1
0001A22E 3428 0008                  		move.w	8(a0),d2
0001A232 3628 000C                  		move.w	$C(a0),d3
0001A236 45FA 0000                  		lea	byte_19022(pc),a2
0001A23A 47FA 0000                  		lea	byte_19026(pc),a3
0001A23E 181A                       		move.b	(a2)+,d4
0001A240 4884                       		ext.w	d4
0001A242 D044                       		add.w	d4,d0
0001A244 181B                       		move.b	(a3)+,d4
0001A246 4884                       		ext.w	d4
0001A248 D444                       		add.w	d4,d2
0001A24A B440                       		cmp.w	d0,d2
0001A24C 6500                       		bcs.s	loc_18F38
0001A24E 181A                       		move.b	(a2)+,d4
0001A250 4884                       		ext.w	d4
0001A252 D044                       		add.w	d4,d0
0001A254 181B                       		move.b	(a3)+,d4
0001A256 4884                       		ext.w	d4
0001A258 D444                       		add.w	d4,d2
0001A25A B042                       		cmp.w	d2,d0
0001A25C 6500                       		bcs.s	loc_18F38
0001A25E 181A                       		move.b	(a2)+,d4
0001A260 4884                       		ext.w	d4
0001A262 D244                       		add.w	d4,d1
0001A264 181B                       		move.b	(a3)+,d4
0001A266 4884                       		ext.w	d4
0001A268 D644                       		add.w	d4,d3
0001A26A B641                       		cmp.w	d1,d3
0001A26C 6500                       		bcs.s	loc_18F38
0001A26E 181A                       		move.b	(a2)+,d4
0001A270 4884                       		ext.w	d4
0001A272 D244                       		add.w	d4,d1
0001A274 181B                       		move.b	(a3)+,d4
0001A276 4884                       		ext.w	d4
0001A278 D644                       		add.w	d4,d3
0001A27A B243                       		cmp.w	d3,d1
0001A27C 6500                       		bcs.s	loc_18F38
0001A27E 5428 0024                  		addq.b	#2,$24(a0)
0001A282 4268 0028                  		clr.w	$28(a0)
0001A286 4229 0020                  		clr.b	$20(a1)
0001A28A 5329 0021                  		subq.b	#1,$21(a1)
0001A28E 6600                       		bne.s	loc_18F38
0001A290 08E9 0007 0022             		bset	#7,$22(a1)
0001A296 4268 0010                  		clr.w	$10(a0)
0001A29A 4268 0012                  		clr.w	$12(a0)
0001A29E                            
0001A29E                            loc_18F38:
0001A29E 4A68 0012                  		tst.w	$12(a0)
0001A2A2 6A00                       		bpl.s	loc_18F5C
0001A2A4 4EB9 0000 E74C             		jsr	ObjectFall
0001A2AA 3028 0034                  		move.w	$34(a0),d0
0001A2AE 0440 002F                  		subi.w	#$2F,d0
0001A2B2 B068 000C                  		cmp.w	$C(a0),d0
0001A2B6 6E00                       		bgt.s	loc_18F58
0001A2B8 4EB9 0000 E74C             		jsr	ObjectFall
0001A2BE                            
0001A2BE                            loc_18F58:
0001A2BE 6000 FF20                  		bra.w	loc_18E7A
0001A2C2                            ; ===========================================================================
0001A2C2                            
0001A2C2                            loc_18F5C:
0001A2C2 4EB9 0000 E74C             		jsr	ObjectFall
0001A2C8 2268 003C                  		movea.l	$3C(a0),a1
0001A2CC 45F9 0000 0000             		lea	(word_19018).l,a2
0001A2D2 7000                       		moveq	#0,d0
0001A2D4 1029 001A                  		move.b	$1A(a1),d0
0001A2D8 3228 0008                  		move.w	8(a0),d1
0001A2DC 9268 0030                  		sub.w	$30(a0),d1
0001A2E0 6400                       		bcc.s	loc_18F7E
0001A2E2 5440                       		addq.w	#2,d0
0001A2E4                            
0001A2E4                            loc_18F7E:
0001A2E4 D040                       		add.w	d0,d0
0001A2E6 3228 0034                  		move.w	$34(a0),d1
0001A2EA D272 0000                  		add.w	(a2,d0.w),d1
0001A2EE B268 000C                  		cmp.w	$C(a0),d1
0001A2F2 6ECA                       		bgt.s	loc_18F58
0001A2F4 2268 003C                  		movea.l	$3C(a0),a1
0001A2F8 7202                       		moveq	#2,d1
0001A2FA 4A68 0010                  		tst.w	$10(a0)
0001A2FE 6B00                       		bmi.s	loc_18F9C
0001A300 7200                       		moveq	#0,d1
0001A302                            
0001A302                            loc_18F9C:
0001A302 317C 0000 0028             		move.w	#0,$28(a0)
0001A308                            
0001A308                            loc_18FA2:
0001A308 1341 003A                  		move.b	d1,$3A(a1)
0001A30C 1141 003A                  		move.b	d1,$3A(a0)
0001A310 B229 001A                  		cmp.b	$1A(a1),d1
0001A314 6700                       		beq.s	loc_19008
0001A316 08A9 0003 0022             		bclr	#3,$22(a1)
0001A31C 6700                       		beq.s	loc_19008
0001A31E 4229 0025                  		clr.b	$25(a1)
0001A322 137C 0002 0024             		move.b	#2,$24(a1)
0001A328 45F8 D000                  		lea	($FFFFD000).w,a2
0001A32C 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A332 446A 0012                  		neg.w	$12(a2)
0001A336 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A33C 6600                       		bne.s	loc_18FDC
0001A33E E0EA 0012                  		asr	$12(a2)
0001A342                            
0001A342                            loc_18FDC:
0001A342 08EA 0001 0022             		bset	#1,$22(a2)
0001A348 08AA 0003 0022             		bclr	#3,$22(a2)
0001A34E 422A 003C                  		clr.b	$3C(a2)
0001A352 2F08                       		move.l	a0,-(sp)
0001A354 41D2                       		lea	(a2),a0
0001A356 4EBA A2E0                  		jsr	Obj01_ChkRoll
0001A35A 205F                       		movea.l	(sp)+,a0
0001A35C 157C 0002 0024             		move.b	#2,$24(a2)
0001A362 303C 00CC                  		move.w	#$CC,d0
0001A366 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A36C                            
0001A36C                            loc_19008:
0001A36C 4268 0010                  		clr.w	$10(a0)
0001A370 4268 0012                  		clr.w	$12(a0)
0001A374 5428 0024                  		addq.b	#2,$24(a0)
0001A378 6000 FE66                  		bra.w	loc_18E7A
0001A37C                            ; ===========================================================================
0001A37C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A386                            		even
0001A386 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A38A                            		even
0001A38A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A38E                            		even
0001A38E                            ; ===========================================================================
0001A38E                            
0001A38E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A38E 10BC 003F                  		move.b	#$3F,(a0)
0001A392 4228 0024                  		clr.b	$24(a0)
0001A396 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A39C 6700                       		beq.s	Obj7B_MakeFrag
0001A39E 4E75                       		rts	
0001A3A0                            ; ===========================================================================
0001A3A0                            
0001A3A0                            Obj7B_MakeFrag:
0001A3A0 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A3A6 7203                       		moveq	#3,d1
0001A3A8 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A3AC                            
0001A3AC                            Obj7B_Loop:
0001A3AC 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001A3B2 6600                       		bne.s	loc_1909A
0001A3B4 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A3B8 137C 000A 0024             		move.b	#$A,$24(a1)
0001A3BE 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A3C6 137C 0003 0018             		move.b	#3,$18(a1)
0001A3CC 337C 0518 0002             		move.w	#$518,2(a1)
0001A3D2 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3DE 335A 0010                  		move.w	(a2)+,$10(a1)
0001A3E2 335A 0012                  		move.w	(a2)+,$12(a1)
0001A3E6 137C 0098 0020             		move.b	#$98,$20(a1)
0001A3EC 0029 0004 0001             		ori.b	#4,1(a1)
0001A3F2 08E9 0007 0001             		bset	#7,1(a1)
0001A3F8 137C 000C 0019             		move.b	#$C,$19(a1)
0001A3FE                            
0001A3FE                            loc_1909A:
0001A3FE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001A402                            
0001A402 4E75                       		rts	
0001A404                            ; ===========================================================================
0001A404 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001A408 FF60 FDC0                  		dc.w $FF60, $FDC0
0001A40C 0100 FCC0                  		dc.w $100, $FCC0
0001A410 00A0 FDC0                  		dc.w $A0, $FDC0
0001A414                            ; ===========================================================================
0001A414                            
0001A414                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001A414 4EB9 0000 E7BE             		jsr	SpeedToPos
0001A41A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A420 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001A426 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A42C 7004                       		moveq	#4,d0
0001A42E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A432 E448                       		lsr.w	#2,d0
0001A434 1140 001A                  		move.b	d0,$1A(a0)
0001A438 4A28 0001                  		tst.b	1(a0)
0001A43C 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001A440 4E75                       		rts	
0001A442                            ; ===========================================================================
0001A442                            ; ---------------------------------------------------------------------------
0001A442                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A442                            ; ---------------------------------------------------------------------------
0001A442                            Map_obj7B:
0001A442                            	include "_maps\obj7B.asm"
0001A442                            ; ---------------------------------------------------------------------------
0001A442                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A442                            ; ---------------------------------------------------------------------------
0001A442 0000                       		dc.w byte_190E2-Map_obj7B
0001A444 0000                       		dc.w byte_190E8-Map_obj7B
0001A446 01                         byte_190E2:	dc.b 1
0001A447 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001A44C 01                         byte_190E8:	dc.b 1
0001A44D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001A452                            		even
0001A452                            		even
0001A452                            
0001A452                            ; ===========================================================================
0001A452                            ; ---------------------------------------------------------------------------
0001A452                            ; Object 75 - Eggman (SYZ)
0001A452                            ; ---------------------------------------------------------------------------
0001A452                            
0001A452                            Obj75:					; XREF: Obj_Index
0001A452 7000                       		moveq	#0,d0
0001A454 1028 0024                  		move.b	$24(a0),d0
0001A458 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001A45C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001A460                            ; ===========================================================================
0001A460 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001A462 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001A464 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001A466 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001A468 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001A46A                            
0001A46A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001A46D 0401 05                    		dc.b 4,	1, 5
0001A470 0607 05                    		dc.b 6,	7, 5
0001A473 0800 05                    		dc.b 8,	0, 5
0001A476                            ; ===========================================================================
0001A476                            
0001A476                            Obj75_Main:				; XREF: Obj75_Index
0001A476 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001A47C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001A482 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A488 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A48E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A494 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A49A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001A49E 2248                       		movea.l	a0,a1
0001A4A0 7203                       		moveq	#3,d1
0001A4A2 6000                       		bra.s	Obj75_LoadBoss
0001A4A4                            ; ===========================================================================
0001A4A4                            
0001A4A4                            Obj75_Loop:
0001A4A4 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001A4AA 6600                       		bne.s	Obj75_ShipMain
0001A4AC 12BC 0075                  		move.b	#$75,(a1)
0001A4B0 3368 0008 0008             		move.w	8(a0),8(a1)
0001A4B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4BC                            
0001A4BC                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001A4BC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A4C2 4229 0025                  		clr.b	$25(a1)
0001A4C6 135A 0024                  		move.b	(a2)+,$24(a1)
0001A4CA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A4CE 135A 0018                  		move.b	(a2)+,$18(a1)
0001A4D2 237C 0001 90DA 0004        		move.l	#Map_Eggman,4(a1)
0001A4DA 337C 0400 0002             		move.w	#$400,2(a1)
0001A4E0 137C 0004 0001             		move.b	#4,1(a1)
0001A4E6 137C 0020 0019             		move.b	#$20,$19(a1)
0001A4EC 2348 0034                  		move.l	a0,$34(a1)
0001A4F0 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001A4F4                            
0001A4F4                            Obj75_ShipMain:				; XREF: Obj75_Index
0001A4F4 7000                       		moveq	#0,d0
0001A4F6 1028 0025                  		move.b	$25(a0),d0
0001A4FA 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001A4FE 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001A502 43F9 0001 9076             		lea	(Ani_Eggman).l,a1
0001A508 4EB9 0000 B832             		jsr	AnimateSprite
0001A50E 7003                       		moveq	#3,d0
0001A510 C028 0022                  		and.b	$22(a0),d0
0001A514 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A51A 8128 0001                  		or.b	d0,1(a0)
0001A51E 4EF9 0000 E7E4             		jmp	DisplaySprite
0001A524                            ; ===========================================================================
0001A524 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001A528 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001A52C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001A530                            ; ===========================================================================
0001A530                            
0001A530                            loc_191CC:				; XREF: Obj75_ShipIndex
0001A530 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A536 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001A53C 6400                       		bcc.s	loc_191DE
0001A53E 5428 0025                  		addq.b	#2,$25(a0)
0001A542                            
0001A542                            loc_191DE:
0001A542 1028 003F                  		move.b	$3F(a0),d0
0001A546 5428 003F                  		addq.b	#2,$3F(a0)
0001A54A 4EB9 0000 34B8             		jsr	(CalcSine).l
0001A550 E440                       		asr.w	#2,d0
0001A552 3140 0012                  		move.w	d0,$12(a0)
0001A556                            
0001A556                            loc_191F2:
0001A556 6100 E6DC                  		bsr.w	BossMove
0001A55A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A560 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A566                            
0001A566                            loc_19202:
0001A566 3028 0008                  		move.w	8(a0),d0
0001A56A 0440 2C00                  		subi.w	#$2C00,d0
0001A56E EA48                       		lsr.w	#5,d0
0001A570 1140 0034                  		move.b	d0,$34(a0)
0001A574 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A57A 6400                       		bcc.s	locret_19256
0001A57C 4A28 0022                  		tst.b	$22(a0)
0001A580 6B00                       		bmi.s	loc_19258
0001A582 4A28 0020                  		tst.b	$20(a0)
0001A586 6600                       		bne.s	locret_19256
0001A588 4A28 003E                  		tst.b	$3E(a0)
0001A58C 6600                       		bne.s	loc_1923A
0001A58E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A594 303C 00AC                  		move.w	#$AC,d0
0001A598 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A59E                            
0001A59E                            loc_1923A:
0001A59E 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A5A2 7000                       		moveq	#0,d0
0001A5A4 4A51                       		tst.w	(a1)
0001A5A6 6600                       		bne.s	loc_19248
0001A5A8 303C 0EEE                  		move.w	#$EEE,d0
0001A5AC                            
0001A5AC                            loc_19248:
0001A5AC 3280                       		move.w	d0,(a1)
0001A5AE 5328 003E                  		subq.b	#1,$3E(a0)
0001A5B2 6600                       		bne.s	locret_19256
0001A5B4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A5BA                            
0001A5BA                            locret_19256:
0001A5BA 4E75                       		rts	
0001A5BC                            ; ===========================================================================
0001A5BC                            
0001A5BC                            loc_19258:				; XREF: loc_19202
0001A5BC 7064                       		moveq	#100,d0
0001A5BE 6100 0000                  		bsr.w	AddPoints
0001A5C2 117C 0006 0025             		move.b	#6,$25(a0)
0001A5C8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A5CE 4268 0010                  		clr.w	$10(a0)
0001A5D2 4E75                       		rts	
0001A5D4                            ; ===========================================================================
0001A5D4                            
0001A5D4                            loc_19270:				; XREF: Obj75_ShipIndex
0001A5D4 3028 0030                  		move.w	$30(a0),d0
0001A5D8 317C 0140 0010             		move.w	#$140,$10(a0)
0001A5DE 0828 0000 0022             		btst	#0,$22(a0)
0001A5E4 6600                       		bne.s	loc_1928E
0001A5E6 4468 0010                  		neg.w	$10(a0)
0001A5EA 0C40 2C08                  		cmpi.w	#$2C08,d0
0001A5EE 6E00                       		bgt.s	loc_1929E
0001A5F0 6000                       		bra.s	loc_19294
0001A5F2                            ; ===========================================================================
0001A5F2                            
0001A5F2                            loc_1928E:
0001A5F2 0C40 2D38                  		cmpi.w	#$2D38,d0
0001A5F6 6D00                       		blt.s	loc_1929E
0001A5F8                            
0001A5F8                            loc_19294:
0001A5F8 0868 0000 0022             		bchg	#0,$22(a0)
0001A5FE 4228 003D                  		clr.b	$3D(a0)
0001A602                            
0001A602                            loc_1929E:
0001A602 0440 2C10                  		subi.w	#$2C10,d0
0001A606 0240 001F                  		andi.w	#$1F,d0
0001A60A 0440 001F                  		subi.w	#$1F,d0
0001A60E 6A00                       		bpl.s	loc_192AE
0001A610 4440                       		neg.w	d0
0001A612                            
0001A612                            loc_192AE:
0001A612 5340                       		subq.w	#1,d0
0001A614 6E00                       		bgt.s	loc_192E8
0001A616 4A28 003D                  		tst.b	$3D(a0)
0001A61A 6600                       		bne.s	loc_192E8
0001A61C 3238 D008                  		move.w	($FFFFD008).w,d1
0001A620 0441 2C00                  		subi.w	#$2C00,d1
0001A624 EA41                       		asr.w	#5,d1
0001A626 B228 0034                  		cmp.b	$34(a0),d1
0001A62A 6600                       		bne.s	loc_192E8
0001A62C 7000                       		moveq	#0,d0
0001A62E 1028 0034                  		move.b	$34(a0),d0
0001A632 EB40                       		asl.w	#5,d0
0001A634 0640 2C10                  		addi.w	#$2C10,d0
0001A638 3140 0030                  		move.w	d0,$30(a0)
0001A63C 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A640 5428 0025                  		addq.b	#2,$25(a0)
0001A644 4268 0028                  		clr.w	$28(a0)
0001A648 4268 0010                  		clr.w	$10(a0)
0001A64C                            
0001A64C                            loc_192E8:
0001A64C 6000 FEF4                  		bra.w	loc_191DE
0001A650                            ; ===========================================================================
0001A650                            
0001A650                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A650 7000                       		moveq	#0,d0
0001A652 1028 0028                  		move.b	$28(a0),d0
0001A656 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A65A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A65E                            ; ===========================================================================
0001A65E 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A660 0000                       		dc.w loc_19348-off_192FA
0001A662 0000                       		dc.w loc_1938E-off_192FA
0001A664 0000                       		dc.w loc_193D0-off_192FA
0001A666                            ; ===========================================================================
0001A666                            
0001A666                            loc_19302:				; XREF: off_192FA
0001A666 317C 0180 0012             		move.w	#$180,$12(a0)
0001A66C 3028 0038                  		move.w	$38(a0),d0
0001A670 0C40 0556                  		cmpi.w	#$556,d0
0001A674 6500                       		bcs.s	loc_19344
0001A676 317C 0556 0038             		move.w	#$556,$38(a0)
0001A67C 4268 003C                  		clr.w	$3C(a0)
0001A680 70FF                       		moveq	#-1,d0
0001A682 3028 0036                  		move.w	$36(a0),d0
0001A686 6700                       		beq.s	loc_1933C
0001A688 2240                       		movea.l	d0,a1
0001A68A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A690 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A696 2348 0034                  		move.l	a0,$34(a1)
0001A69A 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A6A0                            
0001A6A0                            loc_1933C:
0001A6A0 4268 0012                  		clr.w	$12(a0)
0001A6A4 5428 0028                  		addq.b	#2,$28(a0)
0001A6A8                            
0001A6A8                            loc_19344:
0001A6A8 6000 FEAC                  		bra.w	loc_191F2
0001A6AC                            ; ===========================================================================
0001A6AC                            
0001A6AC                            loc_19348:				; XREF: off_192FA
0001A6AC 5368 003C                  		subq.w	#1,$3C(a0)
0001A6B0 6A00                       		bpl.s	loc_19366
0001A6B2 5428 0028                  		addq.b	#2,$28(a0)
0001A6B6 317C F800 0012             		move.w	#-$800,$12(a0)
0001A6BC 4A68 0036                  		tst.w	$36(a0)
0001A6C0 6600                       		bne.s	loc_19362
0001A6C2 E0E8 0012                  		asr	$12(a0)
0001A6C6                            
0001A6C6                            loc_19362:
0001A6C6 7000                       		moveq	#0,d0
0001A6C8 6000                       		bra.s	loc_1937C
0001A6CA                            ; ===========================================================================
0001A6CA                            
0001A6CA                            loc_19366:
0001A6CA 7000                       		moveq	#0,d0
0001A6CC 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A6D2 6E00                       		bgt.s	loc_1937C
0001A6D4 7002                       		moveq	#2,d0
0001A6D6 0828 0001 003D             		btst	#1,$3D(a0)
0001A6DC 6700                       		beq.s	loc_1937C
0001A6DE 4440                       		neg.w	d0
0001A6E0                            
0001A6E0                            loc_1937C:
0001A6E0 D068 0038                  		add.w	$38(a0),d0
0001A6E4 3140 000C                  		move.w	d0,$C(a0)
0001A6E8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A6EE 6000 FE76                  		bra.w	loc_19202
0001A6F2                            ; ===========================================================================
0001A6F2                            
0001A6F2                            loc_1938E:				; XREF: off_192FA
0001A6F2 303C 04DA                  		move.w	#$4DA,d0
0001A6F6 4A68 0036                  		tst.w	$36(a0)
0001A6FA 6700                       		beq.s	loc_1939C
0001A6FC 0440 0018                  		subi.w	#$18,d0
0001A700                            
0001A700                            loc_1939C:
0001A700 B068 0038                  		cmp.w	$38(a0),d0
0001A704 6D00                       		blt.s	loc_193BE
0001A706 317C 0008 003C             		move.w	#8,$3C(a0)
0001A70C 4A68 0036                  		tst.w	$36(a0)
0001A710 6700                       		beq.s	loc_193B4
0001A712 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A718                            
0001A718                            loc_193B4:
0001A718 5428 0028                  		addq.b	#2,$28(a0)
0001A71C 4268 0012                  		clr.w	$12(a0)
0001A720 6000                       		bra.s	loc_193CC
0001A722                            ; ===========================================================================
0001A722                            
0001A722                            loc_193BE:
0001A722 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A728 6C00                       		bge.s	loc_193CC
0001A72A 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A730                            
0001A730                            loc_193CC:
0001A730 6000 FE24                  		bra.w	loc_191F2
0001A734                            ; ===========================================================================
0001A734                            
0001A734                            loc_193D0:				; XREF: off_192FA
0001A734 5368 003C                  		subq.w	#1,$3C(a0)
0001A738 6E00                       		bgt.s	loc_19406
0001A73A 6B00                       		bmi.s	loc_193EE
0001A73C 70FF                       		moveq	#-1,d0
0001A73E 3028 0036                  		move.w	$36(a0),d0
0001A742 6700                       		beq.s	loc_193E8
0001A744 2240                       		movea.l	d0,a1
0001A746 137C 000A 0029             		move.b	#$A,$29(a1)
0001A74C                            
0001A74C                            loc_193E8:
0001A74C 4268 0036                  		clr.w	$36(a0)
0001A750 6000                       		bra.s	loc_19406
0001A752                            ; ===========================================================================
0001A752                            
0001A752                            loc_193EE:
0001A752 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A758 6600                       		bne.s	loc_19406
0001A75A 4228 0029                  		clr.b	$29(a0)
0001A75E 5528 0025                  		subq.b	#2,$25(a0)
0001A762 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A768 6000                       		bra.s	loc_19446
0001A76A                            ; ===========================================================================
0001A76A                            
0001A76A                            loc_19406:
0001A76A 7001                       		moveq	#1,d0
0001A76C 4A68 0036                  		tst.w	$36(a0)
0001A770 6700                       		beq.s	loc_19410
0001A772 7002                       		moveq	#2,d0
0001A774                            
0001A774                            loc_19410:
0001A774 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A77A 6700                       		beq.s	loc_19424
0001A77C 6D00                       		blt.s	loc_1941C
0001A77E 4440                       		neg.w	d0
0001A780                            
0001A780                            loc_1941C:
0001A780 4A68 0036                  		tst.w	$36(a0)
0001A784 D168 0038                  		add.w	d0,$38(a0)
0001A788                            
0001A788                            loc_19424:
0001A788 7000                       		moveq	#0,d0
0001A78A 4A68 0036                  		tst.w	$36(a0)
0001A78E 6700                       		beq.s	loc_19438
0001A790 7002                       		moveq	#2,d0
0001A792 0828 0000 003D             		btst	#0,$3D(a0)
0001A798 6700                       		beq.s	loc_19438
0001A79A 4440                       		neg.w	d0
0001A79C                            
0001A79C                            loc_19438:
0001A79C D068 0038                  		add.w	$38(a0),d0
0001A7A0 3140 000C                  		move.w	d0,$C(a0)
0001A7A4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A7AA                            
0001A7AA                            loc_19446:
0001A7AA 6000 FDBA                  		bra.w	loc_19202
0001A7AE                            
0001A7AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A7AE                            
0001A7AE                            
0001A7AE                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A7AE 4268 0036                  		clr.w	$36(a0)
0001A7B2 43F8 D040                  		lea	($FFFFD040).w,a1
0001A7B6 703E                       		moveq	#$3E,d0
0001A7B8 7276                       		moveq	#$76,d1
0001A7BA 1428 0034                  		move.b	$34(a0),d2
0001A7BE                            
0001A7BE                            Obj75_FindLoop:
0001A7BE B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A7C0 6600                       		bne.s	loc_1946A	; if not, branch
0001A7C2 B429 0028                  		cmp.b	$28(a1),d2
0001A7C6 6600                       		bne.s	loc_1946A
0001A7C8 3149 0036                  		move.w	a1,$36(a0)
0001A7CC 6000                       		bra.s	locret_19472
0001A7CE                            ; ===========================================================================
0001A7CE                            
0001A7CE                            loc_1946A:
0001A7CE 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A7D2 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A7D6                            
0001A7D6                            locret_19472:
0001A7D6 4E75                       		rts	
0001A7D8                            ; End of function Obj75_FindBlocks
0001A7D8                            
0001A7D8                            ; ===========================================================================
0001A7D8                            
0001A7D8                            loc_19474:				; XREF: Obj75_ShipIndex
0001A7D8 5368 003C                  		subq.w	#1,$3C(a0)
0001A7DC 6B00                       		bmi.s	loc_1947E
0001A7DE 6000 E412                  		bra.w	BossDefeated
0001A7E2                            ; ===========================================================================
0001A7E2                            
0001A7E2                            loc_1947E:
0001A7E2 5428 0025                  		addq.b	#2,$25(a0)
0001A7E6 4268 0012                  		clr.w	$12(a0)
0001A7EA 08E8 0000 0022             		bset	#0,$22(a0)
0001A7F0 08A8 0007 0022             		bclr	#7,$22(a0)
0001A7F6 4268 0010                  		clr.w	$10(a0)
0001A7FA 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A800 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A804 6600                       		bne.s	loc_194A8
0001A806 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A80C                            
0001A80C                            loc_194A8:
0001A80C 6000 FD58                  		bra.w	loc_19202
0001A810                            ; ===========================================================================
0001A810                            
0001A810                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A810 5268 003C                  		addq.w	#1,$3C(a0)
0001A814 6700                       		beq.s	loc_194BC
0001A816 6A00                       		bpl.s	loc_194C2
0001A818 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A81E 6000                       		bra.s	loc_194EE
0001A820                            ; ===========================================================================
0001A820                            
0001A820                            loc_194BC:
0001A820 4268 0012                  		clr.w	$12(a0)
0001A824 6000                       		bra.s	loc_194EE
0001A826                            ; ===========================================================================
0001A826                            
0001A826                            loc_194C2:
0001A826 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A82C 6500                       		bcs.s	loc_194DA
0001A82E 6700                       		beq.s	loc_194E0
0001A830 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A836 6500                       		bcs.s	loc_194EE
0001A838 5428 0025                  		addq.b	#2,$25(a0)
0001A83C 6000                       		bra.s	loc_194EE
0001A83E                            ; ===========================================================================
0001A83E                            
0001A83E                            loc_194DA:
0001A83E 5168 0012                  		subq.w	#8,$12(a0)
0001A842 6000                       		bra.s	loc_194EE
0001A844                            ; ===========================================================================
0001A844                            
0001A844                            loc_194E0:
0001A844 4268 0012                  		clr.w	$12(a0)
0001A848 303C 0085                  		move.w	#$85,d0
0001A84C 4EB9 0000 1D10             		jsr	(PlaySound).l	; play SYZ music
0001A852                            
0001A852                            loc_194EE:
0001A852 6000 FD02                  		bra.w	loc_191F2
0001A856                            ; ===========================================================================
0001A856                            
0001A856                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A856 317C 0400 0010             		move.w	#$400,$10(a0)
0001A85C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A862 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A868 6400                       		bcc.s	loc_1950C
0001A86A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A86E 6000                       		bra.s	loc_19512
0001A870                            ; ===========================================================================
0001A870                            
0001A870                            loc_1950C:
0001A870 4A28 0001                  		tst.b	1(a0)
0001A874 6A00                       		bpl.s	Obj75_ShipDelete
0001A876                            
0001A876                            loc_19512:
0001A876 6100 E3BC                  		bsr.w	BossMove
0001A87A 6000 FCC6                  		bra.w	loc_191DE
0001A87E                            ; ===========================================================================
0001A87E                            
0001A87E                            Obj75_ShipDelete:
0001A87E 4EF9 0000 E820             		jmp	DeleteObject
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A884 7201                       		moveq	#1,d1
0001A886 2268 0034                  		movea.l	$34(a0),a1
0001A88A 7000                       		moveq	#0,d0
0001A88C 1029 0025                  		move.b	$25(a1),d0
0001A890 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A894 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A898 1141 001C                  		move.b	d1,$1C(a0)
0001A89C 1010                       		move.b	(a0),d0
0001A89E B011                       		cmp.b	(a1),d0
0001A8A0 6600                       		bne.s	Obj75_FaceDelete
0001A8A2 6000                       		bra.s	loc_195BE
0001A8A4                            ; ===========================================================================
0001A8A4                            
0001A8A4                            Obj75_FaceDelete:
0001A8A4 4EF9 0000 E820             		jmp	DeleteObject
0001A8AA                            ; ===========================================================================
0001A8AA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A8AE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A8B2 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A8B6                            ; ===========================================================================
0001A8B6                            
0001A8B6                            loc_19552:				; XREF: off_19546
0001A8B6 720A                       		moveq	#$A,d1
0001A8B8 4E75                       		rts	
0001A8BA                            ; ===========================================================================
0001A8BA                            
0001A8BA                            loc_19556:				; XREF: off_19546
0001A8BA 7206                       		moveq	#6,d1
0001A8BC 4E75                       		rts	
0001A8BE                            ; ===========================================================================
0001A8BE                            
0001A8BE                            loc_1955A:				; XREF: off_19546
0001A8BE 7000                       		moveq	#0,d0
0001A8C0 1029 0028                  		move.b	$28(a1),d0
0001A8C4 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A8C8 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A8CC                            ; ===========================================================================
0001A8CC 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A8D0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A8D4                            ; ===========================================================================
0001A8D4                            
0001A8D4                            loc_19570:				; XREF: off_19568
0001A8D4 6000                       		bra.s	loc_19574
0001A8D6                            ; ===========================================================================
0001A8D6                            
0001A8D6                            loc_19572:				; XREF: off_19568
0001A8D6 7206                       		moveq	#6,d1
0001A8D8                            
0001A8D8                            loc_19574:				; XREF: off_19546
0001A8D8 4A29 0020                  		tst.b	$20(a1)
0001A8DC 6600                       		bne.s	loc_1957E
0001A8DE 7205                       		moveq	#5,d1
0001A8E0 4E75                       		rts	
0001A8E2                            ; ===========================================================================
0001A8E2                            
0001A8E2                            loc_1957E:
0001A8E2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A8E8 6500                       		bcs.s	locret_19588
0001A8EA 7204                       		moveq	#4,d1
0001A8EC                            
0001A8EC                            locret_19588:
0001A8EC 4E75                       		rts	
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A8EE 117C 0007 001C             		move.b	#7,$1C(a0)
0001A8F4 2268 0034                  		movea.l	$34(a0),a1
0001A8F8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A8FE 6600                       		bne.s	loc_195AA
0001A900 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A906 4A28 0001                  		tst.b	1(a0)
0001A90A 6A00                       		bpl.s	Obj75_FlameDelete
0001A90C 6000                       		bra.s	loc_195B6
0001A90E                            ; ===========================================================================
0001A90E                            
0001A90E                            loc_195AA:
0001A90E 4A69 0010                  		tst.w	$10(a1)
0001A912 6700                       		beq.s	loc_195B6
0001A914 117C 0008 001C             		move.b	#8,$1C(a0)
0001A91A                            
0001A91A                            loc_195B6:
0001A91A 6000                       		bra.s	loc_195BE
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            Obj75_FlameDelete:
0001A91C 4EF9 0000 E820             		jmp	DeleteObject
0001A922                            ; ===========================================================================
0001A922                            
0001A922                            loc_195BE:
0001A922 43F9 0001 9076             		lea	(Ani_Eggman).l,a1
0001A928 4EB9 0000 B832             		jsr	AnimateSprite
0001A92E 2268 0034                  		movea.l	$34(a0),a1
0001A932 3169 0008 0008             		move.w	8(a1),8(a0)
0001A938 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A93E                            
0001A93E                            loc_195DA:
0001A93E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A944 7003                       		moveq	#3,d0
0001A946 C028 0022                  		and.b	$22(a0),d0
0001A94A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A950 8128 0001                  		or.b	d0,1(a0)
0001A954 4EF9 0000 E7E4             		jmp	DisplaySprite
0001A95A                            ; ===========================================================================
0001A95A                            
0001A95A                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A95A 217C 0001 91A2 0004        		move.l	#Map_BossItems,4(a0)
0001A962 317C 246C 0002             		move.w	#$246C,2(a0)
0001A968 117C 0005 001A             		move.b	#5,$1A(a0)
0001A96E 2268 0034                  		movea.l	$34(a0),a1
0001A972 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A978 6600                       		bne.s	loc_1961C
0001A97A 4A28 0001                  		tst.b	1(a0)
0001A97E 6A00                       		bpl.s	Obj75_SpikeDelete
0001A980                            
0001A980                            loc_1961C:
0001A980 3169 0008 0008             		move.w	8(a1),8(a0)
0001A986 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A98C 3028 003C                  		move.w	$3C(a0),d0
0001A990 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A996 6600                       		bne.s	loc_19652
0001A998 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A99E 6700                       		beq.s	loc_1964C
0001A9A0 4A29 0028                  		tst.b	$28(a1)
0001A9A4 6600                       		bne.s	loc_19658
0001A9A6 0C40 0094                  		cmpi.w	#$94,d0
0001A9AA 6C00                       		bge.s	loc_19658
0001A9AC 5E40                       		addq.w	#7,d0
0001A9AE 6000                       		bra.s	loc_19658
0001A9B0                            ; ===========================================================================
0001A9B0                            
0001A9B0                            loc_1964C:
0001A9B0 4A69 003C                  		tst.w	$3C(a1)
0001A9B4 6A00                       		bpl.s	loc_19658
0001A9B6                            
0001A9B6                            loc_19652:
0001A9B6 4A40                       		tst.w	d0
0001A9B8 6F00                       		ble.s	loc_19658
0001A9BA 5B40                       		subq.w	#5,d0
0001A9BC                            
0001A9BC                            loc_19658:
0001A9BC 3140 003C                  		move.w	d0,$3C(a0)
0001A9C0 E440                       		asr.w	#2,d0
0001A9C2 D168 000C                  		add.w	d0,$C(a0)
0001A9C6 117C 0008 0019             		move.b	#8,$19(a0)
0001A9CC 117C 000C 0016             		move.b	#$C,$16(a0)
0001A9D2 4228 0020                  		clr.b	$20(a0)
0001A9D6 2268 0034                  		movea.l	$34(a0),a1
0001A9DA 4A29 0020                  		tst.b	$20(a1)
0001A9DE 6700                       		beq.s	loc_19688
0001A9E0 4A29 0029                  		tst.b	$29(a1)
0001A9E4 6600                       		bne.s	loc_19688
0001A9E6 117C 0084 0020             		move.b	#$84,$20(a0)
0001A9EC                            
0001A9EC                            loc_19688:
0001A9EC 6000 FF50                  		bra.w	loc_195DA
0001A9F0                            ; ===========================================================================
0001A9F0                            
0001A9F0                            Obj75_SpikeDelete:
0001A9F0 4EF9 0000 E820             		jmp	DeleteObject
0001A9F6                            ; ===========================================================================
0001A9F6                            ; ---------------------------------------------------------------------------
0001A9F6                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A9F6                            ; ---------------------------------------------------------------------------
0001A9F6                            
0001A9F6                            Obj76:					; XREF: Obj_Index
0001A9F6 7000                       		moveq	#0,d0
0001A9F8 1028 0024                  		move.b	$24(a0),d0
0001A9FC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001AA00 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001AA04                            ; ===========================================================================
0001AA04 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001AA06 0000                       		dc.w Obj76_Action-Obj76_Index
0001AA08 0000                       		dc.w loc_19762-Obj76_Index
0001AA0A                            ; ===========================================================================
0001AA0A                            
0001AA0A                            Obj76_Main:				; XREF: Obj76_Index
0001AA0A 7800                       		moveq	#0,d4
0001AA0C 3A3C 2C10                  		move.w	#$2C10,d5
0001AA10 7C09                       		moveq	#9,d6
0001AA12 43D0                       		lea	(a0),a1
0001AA14 6000                       		bra.s	Obj76_MakeBlock
0001AA16                            ; ===========================================================================
0001AA16                            
0001AA16                            Obj76_Loop:
0001AA16 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001AA1C 6600                       		bne.s	Obj76_ExitLoop
0001AA1E                            
0001AA1E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001AA1E 12BC 0076                  		move.b	#$76,(a1)
0001AA22 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001AA2A 337C 4000 0002             		move.w	#$4000,2(a1)
0001AA30 137C 0004 0001             		move.b	#4,1(a1)
0001AA36 137C 0010 0019             		move.b	#$10,$19(a1)
0001AA3C 137C 0010 0016             		move.b	#$10,$16(a1)
0001AA42 137C 0003 0018             		move.b	#3,$18(a1)
0001AA48 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001AA4C 337C 0582 000C             		move.w	#$582,$C(a1)
0001AA52 3344 0028                  		move.w	d4,$28(a1)
0001AA56 0644 0101                  		addi.w	#$101,d4
0001AA5A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001AA5E 5429 0024                  		addq.b	#2,$24(a1)
0001AA62 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001AA66                            
0001AA66                            Obj76_ExitLoop:
0001AA66 4E75                       		rts	
0001AA68                            ; ===========================================================================
0001AA68                            
0001AA68                            Obj76_Action:				; XREF: Obj76_Index
0001AA68 1028 0029                  		move.b	$29(a0),d0
0001AA6C B028 0028                  		cmp.b	$28(a0),d0
0001AA70 6700                       		beq.s	Obj76_Solid
0001AA72 4A00                       		tst.b	d0
0001AA74 6B00                       		bmi.s	loc_19718
0001AA76                            
0001AA76                            loc_19712:
0001AA76 6100 0000                  		bsr.w	Obj76_Break
0001AA7A 6000                       		bra.s	Obj76_Display
0001AA7C                            ; ===========================================================================
0001AA7C                            
0001AA7C                            loc_19718:
0001AA7C 2268 0034                  		movea.l	$34(a0),a1
0001AA80 4A29 0021                  		tst.b	$21(a1)
0001AA84 67F0                       		beq.s	loc_19712
0001AA86 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA8C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA92 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001AA98 B2C8                       		cmpa.w	a0,a1
0001AA9A 6500                       		bcs.s	Obj76_Display
0001AA9C 3029 0012                  		move.w	$12(a1),d0
0001AAA0 48C0                       		ext.l	d0
0001AAA2 E080                       		asr.l	#8,d0
0001AAA4 D168 000C                  		add.w	d0,$C(a0)
0001AAA8 6000                       		bra.s	Obj76_Display
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            Obj76_Solid:				; XREF: Obj76_Action
0001AAAA 323C 001B                  		move.w	#$1B,d1
0001AAAE 343C 0010                  		move.w	#$10,d2
0001AAB2 363C 0011                  		move.w	#$11,d3
0001AAB6 3828 0008                  		move.w	8(a0),d4
0001AABA 4EB9 0001 0BB4             		jsr	SolidObject
0001AAC0                            
0001AAC0                            Obj76_Display:				; XREF: Obj76_Action
0001AAC0 4EF9 0000 E7E4             		jmp	DisplaySprite
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            loc_19762:				; XREF: Obj76_Index
0001AAC6 4A28 0001                  		tst.b	1(a0)
0001AACA 6A00                       		bpl.s	Obj76_Delete
0001AACC 4EB9 0000 E74C             		jsr	ObjectFall
0001AAD2 4EF9 0000 E7E4             		jmp	DisplaySprite
0001AAD8                            ; ===========================================================================
0001AAD8                            
0001AAD8                            Obj76_Delete:
0001AAD8 4EF9 0000 E820             		jmp	DeleteObject
0001AADE                            
0001AADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AADE                            
0001AADE                            
0001AADE                            Obj76_Break:				; XREF: Obj76_Action
0001AADE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001AAE2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001AAE6 7801                       		moveq	#1,d4
0001AAE8 7203                       		moveq	#3,d1
0001AAEA 7438                       		moveq	#$38,d2
0001AAEC 5428 0024                  		addq.b	#2,$24(a0)
0001AAF0 117C 0008 0019             		move.b	#8,$19(a0)
0001AAF6 117C 0008 0016             		move.b	#8,$16(a0)
0001AAFC 43D0                       		lea	(a0),a1
0001AAFE 6000                       		bra.s	Obj76_MakeFrag
0001AB00                            ; ===========================================================================
0001AB00                            
0001AB00                            Obj76_LoopFrag:
0001AB00 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001AB06 6600                       		bne.s	loc_197D4
0001AB08                            
0001AB08                            Obj76_MakeFrag:
0001AB08 45D0                       		lea	(a0),a2
0001AB0A 47D1                       		lea	(a1),a3
0001AB0C 7603                       		moveq	#3,d3
0001AB0E                            
0001AB0E                            loc_197AA:
0001AB0E 26DA                       		move.l	(a2)+,(a3)+
0001AB10 26DA                       		move.l	(a2)+,(a3)+
0001AB12 26DA                       		move.l	(a2)+,(a3)+
0001AB14 26DA                       		move.l	(a2)+,(a3)+
0001AB16 51CB FFF6                  		dbf	d3,loc_197AA
0001AB1A                            
0001AB1A 335C 0010                  		move.w	(a4)+,$10(a1)
0001AB1E 335C 0012                  		move.w	(a4)+,$12(a1)
0001AB22 361D                       		move.w	(a5)+,d3
0001AB24 D769 0008                  		add.w	d3,8(a1)
0001AB28 361D                       		move.w	(a5)+,d3
0001AB2A D769 000C                  		add.w	d3,$C(a1)
0001AB2E 1344 001A                  		move.b	d4,$1A(a1)
0001AB32 5244                       		addq.w	#1,d4
0001AB34 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001AB38                            
0001AB38                            loc_197D4:
0001AB38 303C 00CB                  		move.w	#$CB,d0
0001AB3C 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play smashing sound
0001AB42                            ; End of function Obj76_Break
0001AB42                            
0001AB42                            ; ===========================================================================
0001AB42 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001AB46 0180 FE00                  		dc.w $180, $FE00
0001AB4A FF00 FF00                  		dc.w $FF00, $FF00
0001AB4E 0100 FF00                  		dc.w $100, $FF00
0001AB52 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001AB56 0010 0000                  		dc.w $10, 0
0001AB5A 0000 0010                  		dc.w 0,	$10
0001AB5E 0010 0010                  		dc.w $10, $10
0001AB62                            ; ---------------------------------------------------------------------------
0001AB62                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001AB62                            ; ---------------------------------------------------------------------------
0001AB62                            Map_obj76:
0001AB62                            	include "_maps\obj76.asm"
0001AB62                            ; ---------------------------------------------------------------------------
0001AB62                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001AB62                            ; ---------------------------------------------------------------------------
0001AB62 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001AB66 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001AB6A 0000                       		dc.w byte_19826-Map_obj76
0001AB6C 02                         byte_19808:	dc.b 2
0001AB6D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001AB72 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001AB77 00                         		dc.b 0
0001AB78 01                         byte_19814:	dc.b 1
0001AB79 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001AB7E 01                         byte_1981A:	dc.b 1
0001AB7F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001AB84 01                         byte_19820:	dc.b 1
0001AB85 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001AB8A 01                         byte_19826:	dc.b 1
0001AB8B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001AB90                            		even
0001AB90                            		even
0001AB90                            
0001AB90                            ; ===========================================================================
0001AB90                            
0001AB90                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001AB90 4EF9 0000 E820             		jmp	DeleteObject
0001AB96                            ; ===========================================================================
0001AB96                            ; ---------------------------------------------------------------------------
0001AB96                            ; Object 82 - Eggman (SBZ2)
0001AB96                            ; ---------------------------------------------------------------------------
0001AB96                            
0001AB96                            Obj82:					; XREF: Obj_Index
0001AB96 7000                       		moveq	#0,d0
0001AB98 1028 0024                  		move.b	$24(a0),d0
0001AB9C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001ABA0 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001ABA4                            ; ===========================================================================
0001ABA4 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001ABA6 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001ABA8 0000                       		dc.w Obj82_Switch-Obj82_Index
0001ABAA                            
0001ABAA 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001ABAD 0400 03                    		dc.b 4,	0, 3
0001ABB0                            ; ===========================================================================
0001ABB0                            
0001ABB0                            Obj82_Main:				; XREF: Obj82_Index
0001ABB0 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001ABB4 317C 2160 0008             		move.w	#$2160,8(a0)
0001ABBA 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001ABC0 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABC6 117C 0010 0021             		move.b	#$10,$21(a0)
0001ABCC 08A8 0000 0022             		bclr	#0,$22(a0)
0001ABD2 4228 0025                  		clr.b	$25(a0)
0001ABD6 115A 0024                  		move.b	(a2)+,$24(a0)
0001ABDA 115A 001C                  		move.b	(a2)+,$1C(a0)
0001ABDE 115A 0018                  		move.b	(a2)+,$18(a0)
0001ABE2 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001ABEA 317C 0400 0002             		move.w	#$400,2(a0)
0001ABF0 117C 0004 0001             		move.b	#4,1(a0)
0001ABF6 08E8 0007 0001             		bset	#7,1(a0)
0001ABFC 117C 0020 0019             		move.b	#$20,$19(a0)
0001AC02 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001AC08 6600                       		bne.s	Obj82_Eggman
0001AC0A 2348 0034                  		move.l	a0,$34(a1)
0001AC0E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001AC12 337C 2130 0008             		move.w	#$2130,8(a1)
0001AC18 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001AC1E 4228 0025                  		clr.b	$25(a0)
0001AC22 135A 0024                  		move.b	(a2)+,$24(a1)
0001AC26 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AC2A 135A 0018                  		move.b	(a2)+,$18(a1)
0001AC2E 237C 0000 CF66 0004        		move.l	#Map_obj32,4(a1)
0001AC36 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001AC3C 137C 0004 0001             		move.b	#4,1(a1)
0001AC42 08E9 0007 0001             		bset	#7,1(a1)
0001AC48 137C 0010 0019             		move.b	#$10,$19(a1)
0001AC4E 137C 0000 001A             		move.b	#0,$1A(a1)
0001AC54                            
0001AC54                            Obj82_Eggman:				; XREF: Obj82_Index
0001AC54 7000                       		moveq	#0,d0
0001AC56 1028 0025                  		move.b	$25(a0),d0
0001AC5A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001AC5E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001AC62 43FA 0000                  		lea	Ani_obj82(pc),a1
0001AC66 4EB9 0000 B832             		jsr	AnimateSprite
0001AC6C 4EF9 0000 E7E4             		jmp	DisplaySprite
0001AC72                            ; ===========================================================================
0001AC72 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001AC74 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001AC76 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001AC78 0000                       		dc.w loc_19934-Obj82_EggIndex
0001AC7A                            ; ===========================================================================
0001AC7A                            
0001AC7A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001AC7A 3028 0008                  		move.w	8(a0),d0
0001AC7E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AC82 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001AC86 6400                       		bcc.s	loc_19934	; if not, branch
0001AC88 5428 0025                  		addq.b	#2,$25(a0)
0001AC8C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001AC92 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC98                            
0001AC98                            loc_19934:				; XREF: Obj82_EggIndex
0001AC98 4EF9 0000 E7BE             		jmp	SpeedToPos
0001AC9E                            ; ===========================================================================
0001AC9E                            
0001AC9E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001AC9E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001ACA2 6600                       		bne.s	loc_19954	; if time remains, branch
0001ACA4 5428 0025                  		addq.b	#2,$25(a0)
0001ACA8 117C 0002 001C             		move.b	#2,$1C(a0)
0001ACAE 5868 000C                  		addq.w	#4,$C(a0)
0001ACB2 317C 000F 003C             		move.w	#15,$3C(a0)
0001ACB8                            
0001ACB8                            loc_19954:
0001ACB8 60DE                       		bra.s	loc_19934
0001ACBA                            ; ===========================================================================
0001ACBA                            
0001ACBA                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001ACBA 5368 003C                  		subq.w	#1,$3C(a0)
0001ACBE 6E00                       		bgt.s	loc_199D0
0001ACC0 6600                       		bne.s	loc_1996A
0001ACC2 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001ACC8 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001ACCE                            
0001ACCE                            loc_1996A:
0001ACCE 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001ACD4 6E00                       		bgt.s	loc_19976
0001ACD6 4268 0010                  		clr.w	$10(a0)
0001ACDA                            
0001ACDA                            loc_19976:
0001ACDA 0668 0024 0012             		addi.w	#$24,$12(a0)
0001ACE0 4A68 0012                  		tst.w	$12(a0)
0001ACE4 6B00                       		bmi.s	Obj82_FindBlocks
0001ACE6 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001ACEC 6500                       		bcs.s	Obj82_FindBlocks
0001ACEE 317C 5357 0028             		move.w	#$5357,$28(a0)
0001ACF4 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001ACFA 6500                       		bcs.s	Obj82_FindBlocks
0001ACFC 317C 059B 000C             		move.w	#$59B,$C(a0)
0001AD02 4268 0012                  		clr.w	$12(a0)
0001AD06                            
0001AD06                            Obj82_FindBlocks:
0001AD06 3028 0010                  		move.w	$10(a0),d0
0001AD0A 8068 0012                  		or.w	$12(a0),d0
0001AD0E 6600                       		bne.s	loc_199D0
0001AD10 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001AD14 703E                       		moveq	#$3E,d0
0001AD16 7240                       		moveq	#$40,d1
0001AD18                            
0001AD18                            Obj82_FindLoop:	
0001AD18 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001AD1A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001AD1E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001AD22                            
0001AD22 6600                       		bne.s	loc_199D0
0001AD24 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001AD2A 5428 0025                  		addq.b	#2,$25(a0)
0001AD2E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AD34                            
0001AD34                            loc_199D0:
0001AD34 6000 FF62                  		bra.w	loc_19934
0001AD38                            ; ===========================================================================
0001AD38                            
0001AD38                            Obj82_Switch:				; XREF: Obj82_Index
0001AD38 7000                       		moveq	#0,d0
0001AD3A 1028 0025                  		move.b	$25(a0),d0
0001AD3E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001AD42 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001AD46                            ; ===========================================================================
0001AD46 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001AD48 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001AD4A                            ; ===========================================================================
0001AD4A                            
0001AD4A                            loc_199E6:				; XREF: Obj82_SwIndex
0001AD4A 2268 0034                  		movea.l	$34(a0),a1
0001AD4E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001AD54 6600                       		bne.s	Obj82_SwDisplay
0001AD56 117C 0001 001A             		move.b	#1,$1A(a0)
0001AD5C 5428 0025                  		addq.b	#2,$25(a0)
0001AD60                            
0001AD60                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001AD60 4EF9 0000 E7E4             		jmp	DisplaySprite
0001AD66                            ; ===========================================================================
0001AD66                            Ani_obj82:
0001AD66                            	include "_anim\obj82.asm"
0001AD66                            ; ---------------------------------------------------------------------------
0001AD66                            ; Animation script - Eggman (SBZ2)
0001AD66                            ; ---------------------------------------------------------------------------
0001AD66 0000                       		dc.w byte_19A10-Ani_obj82
0001AD68 0000                       		dc.w byte_19A14-Ani_obj82
0001AD6A 0000                       		dc.w byte_19A18-Ani_obj82
0001AD6C 0000                       		dc.w byte_19A20-Ani_obj82
0001AD6E 0000                       		dc.w byte_19A24-Ani_obj82
0001AD70 0000                       		dc.w byte_19A2A-Ani_obj82
0001AD72 0000                       		dc.w byte_19A30-Ani_obj82
0001AD74 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001AD78 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001AD7C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001AD84 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001AD88 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001AD8E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001AD94 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001AD98                            		even
0001AD98                            		even
0001AD98                            
0001AD98                            ; ---------------------------------------------------------------------------
0001AD98                            ; Sprite mappings - Eggman (SBZ2)
0001AD98                            ; ---------------------------------------------------------------------------
0001AD98                            Map_obj82:
0001AD98                            	include "_maps\obj82.asm"
0001AD98                            ; ================================================================================
0001AD98                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001AD98                            ; ================================================================================
0001AD98                            
0001AD98                            DATAA16Z12RYSAF:
0001AD98 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001AD9C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001ADA0 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001ADA4 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001ADA8 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001ADAC 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001ADAE 03                         DATAA16Z12RYSAF_0: dc.b $3
0001ADAF FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001ADB4 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001ADB9 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001ADBE 04                         DATAA16Z12RYSAF_1: dc.b $4
0001ADBF E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001ADC4 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001ADC9 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001ADCE FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001ADD3 04                         DATAA16Z12RYSAF_2: dc.b $4
0001ADD4 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001ADD9 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001ADDE 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001ADE3 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001ADE8 03                         DATAA16Z12RYSAF_3: dc.b $3
0001ADE9 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001ADEE 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001ADF3 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001ADF8 04                         DATAA16Z12RYSAF_4: dc.b $4
0001ADF9 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001ADFE 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001AE03 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001AE08 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001AE0D 04                         DATAA16Z12RYSAF_5: dc.b $4
0001AE0E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AE13 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AE18 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AE1D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AE22 07                         DATAA16Z12RYSAF_6: dc.b $7
0001AE23 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AE28 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AE2D 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001AE32 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001AE37 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001AE3C F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001AE41 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001AE46 04                         DATAA16Z12RYSAF_7: dc.b $4
0001AE47 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001AE4C E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001AE51 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001AE56 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001AE5B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001AE5C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001AE61 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001AE66 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001AE6B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001AE70 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001AE75 08                         DATAA16Z12RYSAF_9: dc.b $8
0001AE76 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AE7B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AE80 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AE85 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AE8A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001AE8F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001AE94 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001AE99 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001AE9E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001AE9F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001AEA4 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001AEA9 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001AEAE                            	even
0001AEAE                            	even
0001AEAE                            
0001AEAE                            ; ===========================================================================
0001AEAE                            ; ---------------------------------------------------------------------------
0001AEAE                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001AEAE                            ; ---------------------------------------------------------------------------
0001AEAE                            
0001AEAE                            Obj83:					; XREF: Obj_Index
0001AEAE 7000                       		moveq	#0,d0
0001AEB0 1028 0024                  		move.b	$24(a0),d0
0001AEB4 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001AEB8 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001AEBC                            ; ===========================================================================
0001AEBC 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001AEBE 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001AEC0 0000                       		dc.w loc_19C36-Obj83_Index
0001AEC2 0000                       		dc.w loc_19C62-Obj83_Index
0001AEC4 0000                       		dc.w loc_19C72-Obj83_Index
0001AEC6 0000                       		dc.w loc_19C80-Obj83_Index
0001AEC8                            ; ===========================================================================
0001AEC8                            
0001AEC8                            Obj83_Main:				; XREF: Obj83_Index
0001AEC8 317C 2080 0008             		move.w	#$2080,8(a0)
0001AECE 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001AED4 117C 0080 0019             		move.b	#$80,$19(a0)
0001AEDA 117C 0010 0016             		move.b	#$10,$16(a0)
0001AEE0 117C 0004 0001             		move.b	#4,1(a0)
0001AEE6 08E8 0007 0001             		bset	#7,1(a0)
0001AEEC 7800                       		moveq	#0,d4
0001AEEE 3A3C 2010                  		move.w	#$2010,d5
0001AEF2 7C07                       		moveq	#7,d6
0001AEF4 45E8 0030                  		lea	$30(a0),a2
0001AEF8                            
0001AEF8                            Obj83_MakeBlock:
0001AEF8 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001AEFE 6600                       		bne.s	Obj83_ExitMake
0001AF00 34C9                       		move.w	a1,(a2)+
0001AF02 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001AF06 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001AF0E 337C 4518 0002             		move.w	#$4518,2(a1)
0001AF14 137C 0004 0001             		move.b	#4,1(a1)
0001AF1A 137C 0010 0019             		move.b	#$10,$19(a1)
0001AF20 137C 0010 0016             		move.b	#$10,$16(a1)
0001AF26 137C 0003 0018             		move.b	#3,$18(a1)
0001AF2C 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001AF30 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001AF36 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001AF3A 137C 0008 0024             		move.b	#8,$24(a1)
0001AF40 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001AF44                            
0001AF44                            Obj83_ExitMake:
0001AF44 5428 0024                  		addq.b	#2,$24(a0)
0001AF48 4E75                       		rts	
0001AF4A                            ; ===========================================================================
0001AF4A                            
0001AF4A                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001AF4A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AF50 6600                       		bne.s	Obj83_Solid	; if not, branch
0001AF52 4228 001A                  		clr.b	$1A(a0)
0001AF56 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001AF5A                            
0001AF5A                            Obj83_Solid:
0001AF5A 7000                       		moveq	#0,d0
0001AF5C 1028 001A                  		move.b	$1A(a0),d0
0001AF60 4400                       		neg.b	d0
0001AF62 4880                       		ext.w	d0
0001AF64 5040                       		addq.w	#8,d0
0001AF66 E940                       		asl.w	#4,d0
0001AF68 383C 2100                  		move.w	#$2100,d4
0001AF6C 9840                       		sub.w	d0,d4
0001AF6E 1140 0019                  		move.b	d0,$19(a0)
0001AF72 3144 0008                  		move.w	d4,8(a0)
0001AF76 720B                       		moveq	#$B,d1
0001AF78 D240                       		add.w	d0,d1
0001AF7A 7410                       		moveq	#$10,d2
0001AF7C 7611                       		moveq	#$11,d3
0001AF7E 4EF9 0001 0BB4             		jmp	SolidObject
0001AF84                            ; ===========================================================================
0001AF84                            
0001AF84                            loc_19C36:				; XREF: Obj83_Index
0001AF84 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001AF8A 6400                       		bcc.s	Obj83_Solid2
0001AF8C 70FF                       		moveq	#-1,d0
0001AF8E 1028 001A                  		move.b	$1A(a0),d0
0001AF92 4880                       		ext.w	d0
0001AF94 D040                       		add.w	d0,d0
0001AF96 3030 0030                  		move.w	$30(a0,d0.w),d0
0001AF9A 2240                       		movea.l	d0,a1
0001AF9C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001AFA2 5228 001A                  		addq.b	#1,$1A(a0)
0001AFA6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001AFAC 6700                       		beq.s	loc_19C62
0001AFAE                            
0001AFAE                            Obj83_Solid2:
0001AFAE 60AA                       		bra.s	Obj83_Solid
0001AFB0                            ; ===========================================================================
0001AFB0                            
0001AFB0                            loc_19C62:				; XREF: Obj83_Index
0001AFB0 08A8 0003 0022             		bclr	#3,$22(a0)
0001AFB6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AFBC 6000 FBD2                  		bra.w	loc_1982C
0001AFC0                            ; ===========================================================================
0001AFC0                            
0001AFC0                            loc_19C72:				; XREF: Obj83_Index
0001AFC0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AFC6 6700                       		beq.s	Obj83_Break	; if yes, branch
0001AFC8 4EF9 0000 E7E4             		jmp	DisplaySprite
0001AFCE                            ; ===========================================================================
0001AFCE                            
0001AFCE                            loc_19C80:				; XREF: Obj83_Index
0001AFCE 4A28 0001                  		tst.b	1(a0)
0001AFD2 6A00 FBBC                  		bpl.w	loc_1982C
0001AFD6 4EB9 0000 E74C             		jsr	ObjectFall
0001AFDC 4EF9 0000 E7E4             		jmp	DisplaySprite
0001AFE2                            ; ===========================================================================
0001AFE2                            
0001AFE2                            Obj83_Break:				; XREF: loc_19C72
0001AFE2 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001AFE6 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001AFEA 7801                       		moveq	#1,d4
0001AFEC 7203                       		moveq	#3,d1
0001AFEE 7438                       		moveq	#$38,d2
0001AFF0 5428 0024                  		addq.b	#2,$24(a0)
0001AFF4 117C 0008 0019             		move.b	#8,$19(a0)
0001AFFA 117C 0008 0016             		move.b	#8,$16(a0)
0001B000 43D0                       		lea	(a0),a1
0001B002 6000                       		bra.s	Obj83_MakeFrag
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            Obj83_LoopFrag:
0001B004 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001B00A 6600                       		bne.s	Obj83_BreakSnd
0001B00C                            
0001B00C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B00C 45D0                       		lea	(a0),a2
0001B00E 47D1                       		lea	(a1),a3
0001B010 7603                       		moveq	#3,d3
0001B012                            
0001B012                            loc_19CC4:
0001B012 26DA                       		move.l	(a2)+,(a3)+
0001B014 26DA                       		move.l	(a2)+,(a3)+
0001B016 26DA                       		move.l	(a2)+,(a3)+
0001B018 26DA                       		move.l	(a2)+,(a3)+
0001B01A 51CB FFF6                  		dbf	d3,loc_19CC4
0001B01E                            
0001B01E 335C 0012                  		move.w	(a4)+,$12(a1)
0001B022 361D                       		move.w	(a5)+,d3
0001B024 D769 0008                  		add.w	d3,8(a1)
0001B028 361D                       		move.w	(a5)+,d3
0001B02A D769 000C                  		add.w	d3,$C(a1)
0001B02E 1344 001A                  		move.b	d4,$1A(a1)
0001B032 5244                       		addq.w	#1,d4
0001B034 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B038                            
0001B038                            Obj83_BreakSnd:
0001B038 303C 00CB                  		move.w	#$CB,d0
0001B03C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B042 4EF9 0000 E7E4             		jmp	DisplaySprite
0001B048                            ; ===========================================================================
0001B048 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B04C 0120 00C0                  		dc.w $120, $C0
0001B050 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B054 0010 0000                  		dc.w $10, 0
0001B058 0000 0010                  		dc.w 0,	$10
0001B05C 0010 0010                  		dc.w $10, $10
0001B060                            ; ---------------------------------------------------------------------------
0001B060                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B060                            ; ---------------------------------------------------------------------------
0001B060                            Map_obj83:
0001B060                            	include "_maps\obj83.asm"
0001B060                            ; ---------------------------------------------------------------------------
0001B060                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B060                            ; ---------------------------------------------------------------------------
0001B060 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B064 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B068 0000                       		dc.w byte_19D46-Map_obj83
0001B06A 01                         byte_19D1C:	dc.b 1
0001B06B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B070 02                         byte_19D22:	dc.b 2
0001B071 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B076 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B07B 00                         		dc.b 0
0001B07C 02                         byte_19D2E:	dc.b 2
0001B07D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B082 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B087 00                         		dc.b 0
0001B088 02                         byte_19D3A:	dc.b 2
0001B089 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B08E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B093 00                         		dc.b 0
0001B094 02                         byte_19D46:	dc.b 2
0001B095 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B09A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B0A0 00                         		even
0001B0A0 00                         		even
0001B0A0                            
0001B0A0                            ; ===========================================================================
0001B0A0                            ; ---------------------------------------------------------------------------
0001B0A0                            ; Object 85 - Eggman (FZ)
0001B0A0                            ; ---------------------------------------------------------------------------
0001B0A0                            
0001B0A0                            Obj85_Delete:
0001B0A0 4EF9 0000 E820             		jmp	DeleteObject
0001B0A6                            ; ===========================================================================
0001B0A6                            
0001B0A6                            Obj85:					; XREF: Obj_Index
0001B0A6 7000                       		moveq	#0,d0
0001B0A8 1028 0024                  		move.b	$24(a0),d0
0001B0AC 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B0B0 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B0B4                            ; ===========================================================================
0001B0B4 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B0B6 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B0B8 0000                       		dc.w loc_1A38E-Obj85_Index
0001B0BA 0000                       		dc.w loc_1A346-Obj85_Index
0001B0BC 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B0BE 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B0C0 0000                       		dc.w loc_1A264-Obj85_Index
0001B0C2                            
0001B0C2 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B0C8 0001 AD98                  		dc.l Map_obj82		; mappings pointer
0001B0CC 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B0D2 0000 0000                  		dc.l Map_obj84
0001B0D6 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B0DC 0000 0000                  		dc.l Map_FZBoss
0001B0E0 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B0E6 0001 AD98                  		dc.l Map_obj82
0001B0EA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B0F0 0001 90DA                  		dc.l Map_Eggman
0001B0F4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B0FA 0001 90DA                  		dc.l Map_Eggman
0001B0FE                            
0001B0FE 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B103 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B108 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B10D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B112 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B117 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B11C                            ; ===========================================================================
0001B11C                            
0001B11C                            Obj85_Main:				; XREF: Obj85_Index
0001B11C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B120 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B124 2248                       		movea.l	a0,a1
0001B126 7205                       		moveq	#5,d1
0001B128 6000                       		bra.s	Obj85_LoadBoss
0001B12A                            ; ===========================================================================
0001B12A                            
0001B12A                            Obj85_Loop:
0001B12A 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001B130 6600                       		bne.s	loc_19E20
0001B132                            
0001B132                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B132 12BC 0085                  		move.b	#$85,(a1)
0001B136 335A 0008                  		move.w	(a2)+,8(a1)
0001B13A 335A 000C                  		move.w	(a2)+,$C(a1)
0001B13E 335A 0002                  		move.w	(a2)+,2(a1)
0001B142 235A 0004                  		move.l	(a2)+,4(a1)
0001B146 135B 0024                  		move.b	(a3)+,$24(a1)
0001B14A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B14E 135B 0018                  		move.b	(a3)+,$18(a1)
0001B152 135B 0017                  		move.b	(a3)+,$17(a1)
0001B156 135B 0016                  		move.b	(a3)+,$16(a1)
0001B15A 137C 0004 0001             		move.b	#4,1(a1)
0001B160 08E8 0007 0001             		bset	#7,1(a0)
0001B166 2348 0034                  		move.l	a0,$34(a1)
0001B16A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B16E                            
0001B16E                            loc_19E20:
0001B16E 45E8 0036                  		lea	$36(a0),a2
0001B172 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001B178 6600                       		bne.s	loc_19E5A
0001B17A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B17E 3489                       		move.w	a1,(a2)
0001B180 2348 0034                  		move.l	a0,$34(a1)
0001B184 45E8 0038                  		lea	$38(a0),a2
0001B188 7400                       		moveq	#0,d2
0001B18A 7203                       		moveq	#3,d1
0001B18C                            
0001B18C                            loc_19E3E:
0001B18C 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001B192 6600                       		bne.s	loc_19E5A
0001B194 34C9                       		move.w	a1,(a2)+
0001B196 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B19A 2348 0034                  		move.l	a0,$34(a1)
0001B19E 1342 0028                  		move.b	d2,$28(a1)
0001B1A2 5442                       		addq.w	#2,d2
0001B1A4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B1A8                            
0001B1A8                            loc_19E5A:
0001B1A8 317C 0000 0034             		move.w	#0,$34(a0)
0001B1AE 4EB8 3492                  		jsr	RandomNumber	; get a number between 0 and 250
0001B1B2 4240                       		clr.w	d0
0001B1B4 4840                       		swap	d0
0001B1B6 80FC 00FB                  		divu.w	#251,d0
0001B1BA 4840                       		swap	d0
0001B1BC 0640 0118                  		add.w	#280,d0		; add 280
0001B1C0 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001B1C6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B1CC                            
0001B1CC                            Obj85_Eggman:				; XREF: Obj85_Index
0001B1CC 7000                       		moveq	#0,d0
0001B1CE 1028 0034                  		move.b	$34(a0),d0
0001B1D2 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B1D6 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B1DA 4EF9 0000 E7E4             		jmp	DisplaySprite
0001B1E0                            ; ===========================================================================
0001B1E0 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B1E4 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B1E8 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B1EC 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B1F0                            ; ===========================================================================
0001B1F0                            
0001B1F0                            loc_19E90:				; XREF: off_19E80
0001B1F0 4AB8 F680                  		tst.l	($FFFFF680).w
0001B1F4 6600                       		bne.s	loc_19EA2
0001B1F6 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B1FC 6500                       		bcs.s	loc_19EA2
0001B1FE 5428 0034                  		addq.b	#2,$34(a0)
0001B202                            
0001B202                            loc_19EA2:
0001B202 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B206 4E75                       		rts	
0001B208                            ; ===========================================================================
0001B208                            
0001B208                            loc_19EA8:				; XREF: off_19E80
0001B208 4A68 0030                  		tst.w	$30(a0)
0001B20C 6A00                       		bpl.s	loc_19F10
0001B20E 4268 0030                  		clr.w	$30(a0)
0001B212 4EB9 0000 3492             		jsr	(RandomNumber).l
0001B218 0240 000C                  		andi.w	#$C,d0
0001B21C 3200                       		move.w	d0,d1
0001B21E 5441                       		addq.w	#2,d1
0001B220 4A80                       		tst.l	d0
0001B222 6A00                       		bpl.s	loc_19EC6
0001B224 C141                       		exg	d1,d0
0001B226                            
0001B226                            loc_19EC6:
0001B226 43FA 0000                  		lea	word_19FD6(pc),a1
0001B22A 3031 0000                  		move.w	(a1,d0.w),d0
0001B22E 3231 1000                  		move.w	(a1,d1.w),d1
0001B232 3140 0030                  		move.w	d0,$30(a0)
0001B236 74FF                       		moveq	#-1,d2
0001B238 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B23C 2242                       		movea.l	d2,a1
0001B23E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B244 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B24A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B24E 2242                       		movea.l	d2,a1
0001B250 137C 0001 0029             		move.b	#1,$29(a1)
0001B256 337C 0000 0030             		move.w	#0,$30(a1)
0001B25C 317C 0001 0032             		move.w	#1,$32(a0)
0001B262 4228 0035                  		clr.b	$35(a0)
0001B266 303C 00B7                  		move.w	#$B7,d0
0001B26A 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B270                            
0001B270                            loc_19F10:
0001B270 4A68 0032                  		tst.w	$32(a0)
0001B274 6B00 0000                  		bmi.w	loc_19FA6
0001B278 08A8 0000 0022             		bclr	#0,$22(a0)
0001B27E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B282 9068 0008                  		sub.w	8(a0),d0
0001B286 6500                       		bcs.s	loc_19F2E
0001B288 08E8 0000 0022             		bset	#0,$22(a0)
0001B28E                            
0001B28E                            loc_19F2E:
0001B28E 323C 002B                  		move.w	#$2B,d1
0001B292 343C 0014                  		move.w	#$14,d2
0001B296 363C 0014                  		move.w	#$14,d3
0001B29A 3828 0008                  		move.w	8(a0),d4
0001B29E 4EB9 0001 0BB4             		jsr	SolidObject
0001B2A4 4A44                       		tst.w	d4
0001B2A6 6E00                       		bgt.s	loc_19F50
0001B2A8                            
0001B2A8                            loc_19F48:
0001B2A8 4A28 0035                  		tst.b	$35(a0)
0001B2AC 6600                       		bne.s	loc_19F88
0001B2AE 6000                       		bra.s	loc_19F96
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            loc_19F50:
0001B2B0 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001B2B4                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001B2B4                            ;		bne.s	loc_19F48
0001B2B4                            ;		move.w	#$300,d0		; knock player back (nah)
0001B2B4                            ;		btst	#0,$22(a0)
0001B2B4                            ;		bne.s	loc_19F6A
0001B2B4                            ;		neg.w	d0
0001B2B4                            ;
0001B2B4                            ;loc_19F6A:
0001B2B4                            ;		move.w	d0,($FFFFD010).w
0001B2B4 4A28 0035                  		tst.b	$35(a0)
0001B2B8 6600                       		bne.s	loc_19F88
0001B2BA 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001B2C0 6400                       		bcc.s	@notoverflown
0001B2C2 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001B2C8                            @notoverflown:
0001B2C8 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001B2CE 303C 00AC                  		move.w	#$AC,d0
0001B2D2 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B2D8                            
0001B2D8                            loc_19F88:
0001B2D8 5328 0035                  		subq.b	#1,$35(a0)
0001B2DC 6700                       		beq.s	loc_19F96
0001B2DE 117C 0003 001C             		move.b	#3,$1C(a0)
0001B2E4 6000                       		bra.s	loc_19F9C
0001B2E6                            ; ===========================================================================
0001B2E6                            
0001B2E6                            loc_19F96:
0001B2E6 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2EC                            
0001B2EC                            loc_19F9C:
0001B2EC 43FA FA78                  		lea	Ani_obj82(pc),a1
0001B2F0 4EF9 0000 B832             		jmp	AnimateSprite
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            loc_19FA6:
0001B2F6 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B2FC 6700                       		beq.s	loc_19FBC
0001B2FE 5428 0034                  		addq.b	#2,$34(a0)
0001B302 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B308 4268 0032                  		clr.w	$32(a0)
0001B30C 4E75                       		rts	
0001B30E                            ; ===========================================================================
0001B30E                            
0001B30E                            loc_19FBC:
0001B30E 117C 0006 0034             		move.b	#6,$34(a0)
0001B314 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B31A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B320 117C 0014 0016             		move.b	#$14,$16(a0)
0001B326 4E75                       		rts	
0001B328                            ; ===========================================================================
0001B328 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B338                            ; ===========================================================================
0001B338                            
0001B338                            loc_19FE6:				; XREF: off_19E80
0001B338 70FF                       		moveq	#-1,d0
0001B33A 3028 0036                  		move.w	$36(a0),d0
0001B33E 2240                       		movea.l	d0,a1
0001B340 4A68 0030                  		tst.w	$30(a0)
0001B344 6A00                       		bpl.s	loc_1A000
0001B346 4268 0030                  		clr.w	$30(a0)
0001B34A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B350 6100                       		bsr.s	loc_1A020
0001B352                            
0001B352                            loc_1A000:
0001B352 700F                       		moveq	#$F,d0
0001B354 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B358 6600                       		bne.s	loc_1A00A
0001B35A 6100                       		bsr.s	loc_1A020
0001B35C                            
0001B35C                            loc_1A00A:
0001B35C 4A68 0032                  		tst.w	$32(a0)
0001B360 6700                       		beq.s	locret_1A01E
0001B362 5528 0034                  		subq.b	#2,$34(a0)
0001B366 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B36C 4268 0032                  		clr.w	$32(a0)
0001B370                            
0001B370                            locret_1A01E:
0001B370 4E75                       		rts	
0001B372                            ; ===========================================================================
0001B372                            
0001B372                            loc_1A020:
0001B372 303C 00B1                  		move.w	#$B1,d0
0001B376 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B37C                            ; ===========================================================================
0001B37C                            
0001B37C                            loc_1A02A:				; XREF: off_19E80
0001B37C 117C 0030 0017             		move.b	#$30,$17(a0)
0001B382 08E8 0000 0022             		bset	#0,$22(a0)
0001B388 4EB9 0000 E7BE             		jsr	SpeedToPos
0001B38E 117C 0006 001A             		move.b	#6,$1A(a0)
0001B394 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B39A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B3A0 6500                       		bcs.s	loc_1A070
0001B3A2 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B3A8 5428 0034                  		addq.b	#2,$34(a0)
0001B3AC 117C 0020 0017             		move.b	#$20,$17(a0)
0001B3B2 317C 0100 0010             		move.w	#$100,$10(a0)
0001B3B8 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B3BE 5438 F742                  		addq.b	#2,($FFFFF742).w
0001B3C2                            
0001B3C2                            loc_1A070:
0001B3C2 6000 0000                  		bra.w	loc_1A166
0001B3C6                            ; ===========================================================================
0001B3C6                            
0001B3C6                            loc_1A074:				; XREF: off_19E80
0001B3C6 08E8 0000 0022             		bset	#0,$22(a0)
0001B3CC 117C 0004 001C             		move.b	#4,$1C(a0)
0001B3D2 4EB9 0000 E7BE             		jsr	SpeedToPos
0001B3D8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B3DE 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001B3E4 6500                       		bcs.s	loc_1A09A
0001B3E6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B3EC                            
0001B3EC                            loc_1A09A:
0001B3EC 317C 0400 0010             		move.w	#$400,$10(a0)
0001B3F2 3028 0008                  		move.w	8(a0),d0
0001B3F6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B3FA 6A00                       		bpl.s	loc_1A0B4
0001B3FC 317C 0500 0010             		move.w	#$500,$10(a0)
0001B402 6000 0000                  		bra.w	loc_1A0F2
0001B406                            ; ===========================================================================
0001B406                            
0001B406                            loc_1A0B4:
0001B406 0440 0070                  		subi.w	#$70,d0
0001B40A 6500                       		bcs.s	loc_1A0F2
0001B40C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B412 5140                       		subq.w	#8,d0
0001B414 6500                       		bcs.s	loc_1A0F2
0001B416 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B41C 5140                       		subq.w	#8,d0
0001B41E 6500                       		bcs.s	loc_1A0F2
0001B420 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B426 5140                       		subq.w	#8,d0
0001B428 6500                       		bcs.s	loc_1A0F2
0001B42A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B430 5140                       		subq.w	#8,d0
0001B432 6500                       		bcs.s	loc_1A0F2
0001B434 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B43A 0440 0038                  		subi.w	#$38,d0
0001B43E 6500                       		bcs.s	loc_1A0F2
0001B440 4268 0010                  		clr.w	$10(a0)
0001B444                            
0001B444                            loc_1A0F2:
0001B444 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001B44A 6500                       		bcs.s	loc_1A110
0001B44C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001B452 317C 0240 0010             		move.w	#$240,$10(a0)
0001B458 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001B45E 5428 0034                  		addq.b	#2,$34(a0)
0001B462                            
0001B462                            loc_1A110:
0001B462 6000                       		bra.s	loc_1A15C
0001B464                            ; ===========================================================================
0001B464                            
0001B464                            loc_1A112:				; XREF: off_19E80
0001B464 4EB9 0000 E7BE             		jsr	SpeedToPos
0001B46A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001B470 6500                       		bcs.s	loc_1A124
0001B472 4268 0010                  		clr.w	$10(a0)
0001B476                            
0001B476                            loc_1A124:
0001B476 0668 0034 0012             		addi.w	#$34,$12(a0)
0001B47C 4A68 0012                  		tst.w	$12(a0)
0001B480 6B00                       		bmi.s	loc_1A142
0001B482 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001B488 6500                       		bcs.s	loc_1A142
0001B48A 317C 0592 000C             		move.w	#$592,$C(a0)
0001B490 4268 0012                  		clr.w	$12(a0)
0001B494                            
0001B494                            loc_1A142:
0001B494 3028 0010                  		move.w	$10(a0),d0
0001B498 8068 0012                  		or.w	$12(a0),d0
0001B49C 6600                       		bne.s	loc_1A15C
0001B49E 5428 0034                  		addq.b	#2,$34(a0)
0001B4A2 317C FE80 0012             		move.w	#-$180,$12(a0)
0001B4A8 117C 0001 0021             		move.b	#1,$21(a0)
0001B4AE                            
0001B4AE                            loc_1A15C:
0001B4AE 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001B4B2 4EB9 0000 B832             		jsr	AnimateSprite
0001B4B8                            
0001B4B8                            loc_1A166:
0001B4B8 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001B4BE 6C00                       		bge.s	loc_1A172
0001B4C0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B4C4                            
0001B4C4                            loc_1A172:
0001B4C4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001B4CA 6C00                       		bge.s	locret_1A190
0001B4CC 323C 001B                  		move.w	#$1B,d1
0001B4D0 343C 0070                  		move.w	#$70,d2
0001B4D4 363C 0071                  		move.w	#$71,d3
0001B4D8 3828 0008                  		move.w	8(a0),d4
0001B4DC 4EF9 0001 0BB4             		jmp	SolidObject
0001B4E2                            ; ===========================================================================
0001B4E2                            
0001B4E2                            locret_1A190:
0001B4E2 4E75                       		rts	
0001B4E4                            ; ===========================================================================
0001B4E4                            
0001B4E4                            loc_1A192:				; XREF: off_19E80
0001B4E4 217C 0001 90DA 0004        		move.l	#Map_Eggman,4(a0)
0001B4EC 317C 0400 0002             		move.w	#$400,2(a0)
0001B4F2 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4F8 08E8 0000 0022             		bset	#0,$22(a0)
0001B4FE 4EB9 0000 E7BE             		jsr	SpeedToPos
0001B504 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001B50A 6400                       		bcc.s	loc_1A1D0
0001B50C 317C 0180 0010             		move.w	#$180,$10(a0)
0001B512 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001B518 117C 000F 0020             		move.b	#$F,$20(a0)
0001B51E 5428 0034                  		addq.b	#2,$34(a0)
0001B522                            
0001B522                            loc_1A1D0:
0001B522 6000 FF8A                  		bra.w	loc_1A15C
0001B526                            ; ===========================================================================
0001B526                            
0001B526                            loc_1A1D4:				; XREF: off_19E80
0001B526 08E8 0000 0022             		bset	#0,$22(a0)
0001B52C 4EB9 0000 E7BE             		jsr	SpeedToPos
0001B532 4A68 0030                  		tst.w	$30(a0)
0001B536 6600                       		bne.s	loc_1A1FC
0001B538 4A28 0020                  		tst.b	$20(a0)
0001B53C 6600                       		bne.s	loc_1A216
0001B53E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001B544 303C 00AC                  		move.w	#$AC,d0
0001B548 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B54E                            
0001B54E                            loc_1A1FC:
0001B54E 5368 0030                  		subq.w	#1,$30(a0)
0001B552 6600                       		bne.s	loc_1A216
0001B554 4A28 0022                  		tst.b	$22(a0)
0001B558 6A00                       		bpl.s	loc_1A210
0001B55A 317C 0060 0012             		move.w	#$60,$12(a0)
0001B560 6000                       		bra.s	loc_1A216
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            loc_1A210:
0001B562 117C 000F 0020             		move.b	#$F,$20(a0)
0001B568                            
0001B568                            loc_1A216:
0001B568 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001B56E 6D00                       		blt.s	loc_1A23A
0001B570 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001B576 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001B57C 4278 D014                  		clr.w	($FFFFD014).w
0001B580 4A68 0012                  		tst.w	$12(a0)
0001B584 6A00                       		bpl.s	loc_1A248
0001B586 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001B58C                            
0001B58C                            loc_1A23A:
0001B58C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001B592 6D00                       		blt.s	loc_1A248
0001B594 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001B59A                            
0001B59A                            loc_1A248:
0001B59A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001B5A0 6500                       		bcs.s	loc_1A260
0001B5A2 4A28 0001                  		tst.b	1(a0)
0001B5A6 6B00                       		bmi.s	loc_1A260
0001B5A8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001B5AE 6000 FAF0                  		bra.w	Obj85_Delete
0001B5B2                            ; ===========================================================================
0001B5B2                            
0001B5B2                            loc_1A260:
0001B5B2 6000 FEFA                  		bra.w	loc_1A15C
0001B5B6                            ; ===========================================================================
0001B5B6                            
0001B5B6                            loc_1A264:				; XREF: Obj85_Index
0001B5B6 2268 0034                  		movea.l	$34(a0),a1
0001B5BA 1011                       		move.b	(a1),d0
0001B5BC B010                       		cmp.b	(a0),d0
0001B5BE 6600 FAE0                  		bne.w	Obj85_Delete
0001B5C2 117C 0007 001C             		move.b	#7,$1C(a0)
0001B5C8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B5CE 6C00                       		bge.s	loc_1A280
0001B5D0 6000                       		bra.s	loc_1A2A6
0001B5D2                            ; ===========================================================================
0001B5D2                            
0001B5D2                            loc_1A280:
0001B5D2 4A69 0010                  		tst.w	$10(a1)
0001B5D6 6700                       		beq.s	loc_1A28C
0001B5D8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B5DE                            
0001B5DE                            loc_1A28C:
0001B5DE 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001B5E2 4EB9 0000 B832             		jsr	AnimateSprite
0001B5E8                            
0001B5E8                            loc_1A296:
0001B5E8 2268 0034                  		movea.l	$34(a0),a1
0001B5EC 3169 0008 0008             		move.w	8(a1),8(a0)
0001B5F2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B5F8                            
0001B5F8                            loc_1A2A6:
0001B5F8 2268 0034                  		movea.l	$34(a0),a1
0001B5FC 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B602 7003                       		moveq	#3,d0
0001B604 C028 0022                  		and.b	$22(a0),d0
0001B608 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B60E 8128 0001                  		or.b	d0,1(a0)
0001B612 4EF9 0000 E7E4             		jmp	DisplaySprite
0001B618                            ; ===========================================================================
0001B618                            
0001B618                            loc_1A2C6:				; XREF: Obj85_Index
0001B618 2268 0034                  		movea.l	$34(a0),a1
0001B61C 1011                       		move.b	(a1),d0
0001B61E B010                       		cmp.b	(a0),d0
0001B620 6600 FA7E                  		bne.w	Obj85_Delete
0001B624 0CA9 0001 90DA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B62C 6700                       		beq.s	loc_1A2E4
0001B62E 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B634 60C2                       		bra.s	loc_1A2A6
0001B636                            ; ===========================================================================
0001B636                            
0001B636                            loc_1A2E4:
0001B636 117C 0001 001C             		move.b	#1,$1C(a0)
0001B63C 4A29 0021                  		tst.b	$21(a1)
0001B640 6F00                       		ble.s	loc_1A312
0001B642 117C 0006 001C             		move.b	#6,$1C(a0)
0001B648 217C 0001 90DA 0004        		move.l	#Map_Eggman,4(a0)
0001B650 317C 0400 0002             		move.w	#$400,2(a0)
0001B656 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B65A 4EB9 0000 B832             		jsr	AnimateSprite
0001B660 6000 FF86                  		bra.w	loc_1A296
0001B664                            ; ===========================================================================
0001B664                            
0001B664                            loc_1A312:
0001B664 4A28 0001                  		tst.b	1(a0)
0001B668 6A00 FA36                  		bpl.w	Obj85_Delete
0001B66C 6100 D584                  		bsr.w	BossDefeated
0001B670 117C 0002 0018             		move.b	#2,$18(a0)
0001B676 117C 0000 001C             		move.b	#0,$1C(a0)
0001B67C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B684 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B68A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B68E 4EB9 0000 B832             		jsr	AnimateSprite
0001B694 6000 FF52                  		bra.w	loc_1A296
0001B698                            ; ===========================================================================
0001B698                            
0001B698                            loc_1A346:				; XREF: Obj85_Index
0001B698 08E8 0000 0022             		bset	#0,$22(a0)
0001B69E 2268 0034                  		movea.l	$34(a0),a1
0001B6A2 0CA9 0001 90DA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B6AA 6700                       		beq.s	loc_1A35E
0001B6AC 6000 FF4A                  		bra.w	loc_1A2A6
0001B6B0                            ; ===========================================================================
0001B6B0                            
0001B6B0                            loc_1A35E:
0001B6B0 3169 0008 0008             		move.w	8(a1),8(a0)
0001B6B6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B6BC 4A28 001E                  		tst.b	$1E(a0)
0001B6C0 6600                       		bne.s	loc_1A376
0001B6C2 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B6C8                            
0001B6C8                            loc_1A376:
0001B6C8 5328 001E                  		subq.b	#1,$1E(a0)
0001B6CC 6E00                       		bgt.s	loc_1A38A
0001B6CE 5228 001A                  		addq.b	#1,$1A(a0)
0001B6D2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B6D8 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B6DC                            
0001B6DC                            loc_1A38A:
0001B6DC 6000 FF0A                  		bra.w	loc_1A296
0001B6E0                            ; ===========================================================================
0001B6E0                            
0001B6E0                            loc_1A38E:				; XREF: Obj85_Index
0001B6E0 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B6E6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B6EA 9068 0008                  		sub.w	8(a0),d0
0001B6EE 6500                       		bcs.s	loc_1A3A6
0001B6F0 4A28 0001                  		tst.b	1(a0)
0001B6F4 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B6F8                            
0001B6F8                            loc_1A3A6:
0001B6F8 4EF9 0000 E7E4             		jmp	DisplaySprite
0001B6FE                            ; ===========================================================================
0001B6FE                            
0001B6FE                            loc_1A3AC:				; XREF: Obj85_Index
0001B6FE 117C 0000 001A             		move.b	#0,$1A(a0)
0001B704 08E8 0000 0022             		bset	#0,$22(a0)
0001B70A 2268 0034                  		movea.l	$34(a0),a1
0001B70E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B714 6600                       		bne.s	loc_1A3D0
0001B716 0CA9 0001 90DA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B71E 6700 F980                  		beq.w	Obj85_Delete
0001B722                            
0001B722                            loc_1A3D0:
0001B722 6000 FED4                  		bra.w	loc_1A2A6
0001B726                            ; ===========================================================================
0001B726                            Ani_obj85:
0001B726                            	include "_anim\obj85.asm"
0001B726                            ; ---------------------------------------------------------------------------
0001B726                            ; Animation script - Eggman (FZ)
0001B726                            ; ---------------------------------------------------------------------------
0001B726 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B728 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B72C                            		even
0001B72C                            		even
0001B72C                            
0001B72C                            Map_Eggman2:
0001B72C                            	include "_maps\Eggman2.asm"
0001B72C                            ; ---------------------------------------------------------------------------
0001B72C                            ; Sprite mappings - Eggman (FZ)
0001B72C                            ; ---------------------------------------------------------------------------
0001B72C 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B72E 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B730 06                         byte_1A3DE:	dc.b 6
0001B731 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B736 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B73B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B740 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B745 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B74A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B74F 06                         byte_1A3FD:	dc.b 6
0001B750 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B755 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B75A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B75F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B764 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B769 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B76E                            		even
0001B76E                            		even
0001B76E                            
0001B76E                            Map_FZBoss:
0001B76E                            	include "_maps\FZ boss.asm"
0001B76E                            ; ---------------------------------------------------------------------------
0001B76E                            ; Sprite mappings - boss (FZ)
0001B76E                            ; ---------------------------------------------------------------------------
0001B76E 0000                       		dc.w byte_1A422-Map_FZBoss
0001B770 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B772 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B774 02                         byte_1A422:	dc.b 2
0001B775 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B77A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B77F 03                         byte_1A42D:	dc.b 3
0001B780 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B785 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B78A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B78F 02                         byte_1A43D:	dc.b 2
0001B790 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B795 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B79A                            		even
0001B79A                            		even
0001B79A                            
0001B79A                            ; ===========================================================================
0001B79A                            
0001B79A                            Obj84_Delete:
0001B79A 4EF9 0000 E820             		jmp	DeleteObject
0001B7A0                            ; ===========================================================================
0001B7A0                            ; ---------------------------------------------------------------------------
0001B7A0                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B7A0                            ; ---------------------------------------------------------------------------
0001B7A0                            
0001B7A0                            Obj84:					; XREF: Obj_Index
0001B7A0 7000                       		moveq	#0,d0
0001B7A2 1028 0024                  		move.b	$24(a0),d0
0001B7A6 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B7AA 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B7AE                            ; ===========================================================================
0001B7AE 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B7B0 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B7B2 0000                       		dc.w loc_1A57E-Obj84_Index
0001B7B4                            
0001B7B4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B7B8 2550 0620                  		dc.w $2550, $620
0001B7BC 2490 04C0                  		dc.w $2490, $4C0
0001B7C0 2510 04C0                  		dc.w $2510, $4C0
0001B7C4                            ; ===========================================================================
0001B7C4                            
0001B7C4                            Obj84_Main:				; XREF: Obj84_Index
0001B7C4 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B7C8 7000                       		moveq	#0,d0
0001B7CA 1028 0028                  		move.b	$28(a0),d0
0001B7CE D040                       		add.w	d0,d0
0001B7D0 D2C0                       		adda.w	d0,a1
0001B7D2 117C 0004 0001             		move.b	#4,1(a0)
0001B7D8 08E8 0007 0001             		bset	#7,1(a0)
0001B7DE 08E8 0004 0001             		bset	#4,1(a0)
0001B7E4 317C 0300 0002             		move.w	#$300,2(a0)
0001B7EA 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B7F2 3159 0008                  		move.w	(a1)+,8(a0)
0001B7F6 3151 000C                  		move.w	(a1),$C(a0)
0001B7FA 3159 0038                  		move.w	(a1)+,$38(a0)
0001B7FE 117C 0020 0016             		move.b	#$20,$16(a0)
0001B804 117C 0060 0017             		move.b	#$60,$17(a0)
0001B80A 117C 0020 0019             		move.b	#$20,$19(a0)
0001B810 117C 0060 0016             		move.b	#$60,$16(a0)
0001B816 117C 0003 0018             		move.b	#3,$18(a0)
0001B81C 5428 0024                  		addq.b	#2,$24(a0)
0001B820                            
0001B820                            loc_1A4CE:				; XREF: Obj84_Index
0001B820 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B826 6F00                       		ble.s	loc_1A4DC
0001B828 08E8 0001 0001             		bset	#1,1(a0)
0001B82E                            
0001B82E                            loc_1A4DC:
0001B82E 42A8 003C                  		clr.l	$3C(a0)
0001B832 4A28 0029                  		tst.b	$29(a0)
0001B836 6700                       		beq.s	loc_1A4EA
0001B838 5428 0024                  		addq.b	#2,$24(a0)
0001B83C                            
0001B83C                            loc_1A4EA:
0001B83C 2028 003C                  		move.l	$3C(a0),d0
0001B840 2228 0038                  		move.l	$38(a0),d1
0001B844 D280                       		add.l	d0,d1
0001B846 4841                       		swap	d1
0001B848 3141 000C                  		move.w	d1,$C(a0)
0001B84C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B852 6600                       		bne.s	loc_1A524
0001B854 4A68 0030                  		tst.w	$30(a0)
0001B858 6A00                       		bpl.s	loc_1A524
0001B85A 70F6                       		moveq	#-$A,d0
0001B85C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B862 6F00                       		ble.s	loc_1A514
0001B864 700E                       		moveq	#$E,d0
0001B866                            
0001B866                            loc_1A514:
0001B866 D240                       		add.w	d0,d1
0001B868 2268 0034                  		movea.l	$34(a0),a1
0001B86C 3341 000C                  		move.w	d1,$C(a1)
0001B870 3368 0008 0008             		move.w	8(a0),8(a1)
0001B876                            
0001B876                            loc_1A524:
0001B876 323C 002B                  		move.w	#$2B,d1
0001B87A 343C 0060                  		move.w	#$60,d2
0001B87E 363C 0061                  		move.w	#$61,d3
0001B882 3828 0008                  		move.w	8(a0),d4
0001B886 4EB9 0001 0BB4             		jsr	SolidObject
0001B88C 7000                       		moveq	#0,d0
0001B88E 3228 003C                  		move.w	$3C(a0),d1
0001B892 6A00                       		bpl.s	loc_1A550
0001B894 4441                       		neg.w	d1
0001B896 5141                       		subq.w	#8,d1
0001B898 6500                       		bcs.s	loc_1A55C
0001B89A 5200                       		addq.b	#1,d0
0001B89C E841                       		asr.w	#4,d1
0001B89E D041                       		add.w	d1,d0
0001B8A0 6000                       		bra.s	loc_1A55C
0001B8A2                            ; ===========================================================================
0001B8A2                            
0001B8A2                            loc_1A550:
0001B8A2 0441 0027                  		subi.w	#$27,d1
0001B8A6 6500                       		bcs.s	loc_1A55C
0001B8A8 5200                       		addq.b	#1,d0
0001B8AA E841                       		asr.w	#4,d1
0001B8AC D041                       		add.w	d1,d0
0001B8AE                            
0001B8AE                            loc_1A55C:
0001B8AE 1140 001A                  		move.b	d0,$1A(a0)
0001B8B2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B8B6 9068 0008                  		sub.w	8(a0),d0
0001B8BA 6B00                       		bmi.s	loc_1A578
0001B8BC 0440 0140                  		subi.w	#$140,d0
0001B8C0 6B00                       		bmi.s	loc_1A578
0001B8C2 4A28 0001                  		tst.b	1(a0)
0001B8C6 6A00 FED2                  		bpl.w	Obj84_Delete
0001B8CA                            
0001B8CA                            loc_1A578:
0001B8CA 4EF9 0000 E7E4             		jmp	DisplaySprite
0001B8D0                            ; ===========================================================================
0001B8D0                            
0001B8D0                            loc_1A57E:				; XREF: Obj84_Index
0001B8D0 7000                       		moveq	#0,d0
0001B8D2 1028 0028                  		move.b	$28(a0),d0
0001B8D6 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B8DA 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B8DE 6000 FF5C                  		bra.w	loc_1A4EA
0001B8E2                            ; ===========================================================================
0001B8E2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B8E4 0000                       		dc.w loc_1A598-off_1A590
0001B8E6 0000                       		dc.w loc_1A604-off_1A590
0001B8E8 0000                       		dc.w loc_1A604-off_1A590
0001B8EA                            ; ===========================================================================
0001B8EA                            
0001B8EA                            loc_1A598:				; XREF: off_1A590
0001B8EA 4A28 0029                  		tst.b	$29(a0)
0001B8EE 6600                       		bne.s	loc_1A5D4
0001B8F0 2268 0034                  		movea.l	$34(a0),a1
0001B8F4 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B8FA 6600                       		bne.s	loc_1A5B4
0001B8FC 6100 D2F4                  		bsr.w	BossDefeated
0001B900 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B908                            
0001B908                            loc_1A5B4:
0001B908 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B910 6400                       		bcc.s	locret_1A602
0001B912 42A8 003C                  		clr.l	$3C(a0)
0001B916 2268 0034                  		movea.l	$34(a0),a1
0001B91A 5369 0032                  		subq.w	#1,$32(a1)
0001B91E 4269 0030                  		clr.w	$30(a1)
0001B922 5528 0024                  		subq.b	#2,$24(a0)
0001B926 4E75                       		rts	
0001B928                            ; ===========================================================================
0001B928                            
0001B928                            loc_1A5D4:
0001B928 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B92E 6C00                       		bge.s	loc_1A5E4
0001B930 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B938                            
0001B938                            loc_1A5E4:
0001B938 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B940 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B946 6E00                       		bgt.s	locret_1A602
0001B948 4268 003E                  		clr.w	$3E(a0)
0001B94C 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B952 4228 0029                  		clr.b	$29(a0)
0001B956                            
0001B956                            locret_1A602:
0001B956 4E75                       		rts	
0001B958                            ; ===========================================================================
0001B958                            
0001B958                            loc_1A604:				; XREF: off_1A590
0001B958 08E8 0001 0001             		bset	#1,1(a0)
0001B95E 4A28 0029                  		tst.b	$29(a0)
0001B962 6600                       		bne.s	loc_1A646
0001B964 2268 0034                  		movea.l	$34(a0),a1
0001B968 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B96E 6600                       		bne.s	loc_1A626
0001B970 6100 D280                  		bsr.w	BossDefeated
0001B974 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B97C                            
0001B97C                            loc_1A626:
0001B97C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B984 6400                       		bcc.s	locret_1A674
0001B986 42A8 003C                  		clr.l	$3C(a0)
0001B98A 2268 0034                  		movea.l	$34(a0),a1
0001B98E 5369 0032                  		subq.w	#1,$32(a1)
0001B992 4269 0030                  		clr.w	$30(a1)
0001B996 5528 0024                  		subq.b	#2,$24(a0)
0001B99A 4E75                       		rts	
0001B99C                            ; ===========================================================================
0001B99C                            
0001B99C                            loc_1A646:
0001B99C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B9A2 6D00                       		blt.s	loc_1A656
0001B9A4 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B9AC                            
0001B9AC                            loc_1A656:
0001B9AC 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B9B4 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B9BA 6D00                       		blt.s	locret_1A674
0001B9BC 4268 003E                  		clr.w	$3E(a0)
0001B9C0 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B9C6 4228 0029                  		clr.b	$29(a0)
0001B9CA                            
0001B9CA                            locret_1A674:
0001B9CA 4E75                       		rts	
0001B9CC                            ; ===========================================================================
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC                            Map_obj84:
0001B9CC                            	include "_maps\obj84.asm"
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B9D0 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B9D4 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B9D8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B9DC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B9E0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B9E4 06                         byte_1A68E:	dc.b 6
0001B9E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B9EA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B9EF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B9F4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B9F9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9FE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA03 08                         byte_1A6AD:	dc.b 8
0001BA04 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA09 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA0E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA13 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA18 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA1D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA22 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA27 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA2C 0A                         byte_1A6D6:	dc.b $A
0001BA2D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA32 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA37 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA3C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA41 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA46 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA4B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA50 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA55 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA5A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA5F 0C                         byte_1A709:	dc.b $C
0001BA60 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA65 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA6A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA6F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA74 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA79 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA7E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA83 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA88 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA8D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA92 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA97 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA9C 0D                         byte_1A746:	dc.b $D
0001BA9D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BAA2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BAA7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BAAC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BAB1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BAB6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BABB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BAC0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BAC5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BACA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BACF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BAD4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BAD9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BADE 0E                         byte_1A788:	dc.b $E
0001BADF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BAE4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BAE9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BAEE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BAF3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BAF8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BAFD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BB02 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BB07 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BB0C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BB11 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BB16 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BB1B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BB20 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001BB25 02                         byte_1A7CF:	dc.b 2
0001BB26 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001BB2B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001BB30                            		even
0001BB30                            		even
0001BB30                            
0001BB30                            ; ===========================================================================
0001BB30                            ; ---------------------------------------------------------------------------
0001BB30                            ; Object 86 - energy balls (FZ)
0001BB30                            ; ---------------------------------------------------------------------------
0001BB30                            
0001BB30                            Obj86:					; XREF: Obj_Index
0001BB30 7000                       		moveq	#0,d0
0001BB32 1028 0024                  		move.b	$24(a0),d0
0001BB36 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001BB3A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001BB3E                            ; ===========================================================================
0001BB3E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001BB40 0000                       		dc.w Obj86_Generator-Obj86_Index
0001BB42 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001BB44 0000                       		dc.w loc_1A962-Obj86_Index
0001BB46 0000                       		dc.w loc_1A982-Obj86_Index
0001BB48                            ; ===========================================================================
0001BB48                            
0001BB48                            Obj86_Main:				; XREF: Obj86_Index
0001BB48 317C 2588 0008             		move.w	#$2588,8(a0)
0001BB4E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BB54 317C 0300 0002             		move.w	#$300,2(a0)
0001BB5A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001BB62 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB68 117C 0003 0018             		move.b	#3,$18(a0)
0001BB6E 117C 0008 0017             		move.b	#8,$17(a0)
0001BB74 117C 0008 0016             		move.b	#8,$16(a0)
0001BB7A 117C 0004 0001             		move.b	#4,1(a0)
0001BB80 08E8 0007 0001             		bset	#7,1(a0)
0001BB86 5428 0024                  		addq.b	#2,$24(a0)
0001BB8A                            
0001BB8A                            Obj86_Generator:			; XREF: Obj86_Index
0001BB8A 2268 0034                  		movea.l	$34(a0),a1
0001BB8E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001BB94 6600                       		bne.s	loc_1A850
0001BB96 10BC 003F                  		move.b	#$3F,(a0)
0001BB9A 117C 0000 0024             		move.b	#0,$24(a0)
0001BBA0 4EF9 0000 E7E4             		jmp	DisplaySprite
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_1A850:
0001BBA6 117C 0000 001C             		move.b	#0,$1C(a0)
0001BBAC 4A28 0029                  		tst.b	$29(a0)
0001BBB0 6700                       		beq.s	loc_1A86C
0001BBB2 5428 0024                  		addq.b	#2,$24(a0)
0001BBB6 117C 0001 001C             		move.b	#1,$1C(a0)
0001BBBC 117C 003E 0028             		move.b	#$3E,$28(a0)
0001BBC2                            
0001BBC2                            loc_1A86C:
0001BBC2 323C 0013                  		move.w	#$13,d1
0001BBC6 343C 0008                  		move.w	#8,d2
0001BBCA 363C 0011                  		move.w	#$11,d3
0001BBCE 3828 0008                  		move.w	8(a0),d4
0001BBD2 4EB9 0001 0BB4             		jsr	SolidObject
0001BBD8 3038 D008                  		move.w	($FFFFD008).w,d0
0001BBDC 9068 0008                  		sub.w	8(a0),d0
0001BBE0 6B00                       		bmi.s	loc_1A89A
0001BBE2 0440 0140                  		subi.w	#$140,d0
0001BBE6 6B00                       		bmi.s	loc_1A89A
0001BBE8 4A28 0001                  		tst.b	1(a0)
0001BBEC 6A00 FBAC                  		bpl.w	Obj84_Delete
0001BBF0                            
0001BBF0                            loc_1A89A:
0001BBF0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001BBF4 4EB9 0000 B832             		jsr	AnimateSprite
0001BBFA 4EF9 0000 E7E4             		jmp	DisplaySprite
0001BC00                            ; ===========================================================================
0001BC00                            
0001BC00                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001BC00 4A28 0029                  		tst.b	$29(a0)
0001BC04 6700 0000                  		beq.w	loc_1A954
0001BC08 4228 0029                  		clr.b	$29(a0)
0001BC0C D068 0030                  		add.w	$30(a0),d0
0001BC10 0240 001E                  		andi.w	#$1E,d0
0001BC14 D4C0                       		adda.w	d0,a2
0001BC16 5868 0030                  		addq.w	#4,$30(a0)
0001BC1A 4268 0032                  		clr.w	$32(a0)
0001BC1E 7403                       		moveq	#3,d2
0001BC20                            
0001BC20                            Obj86_Loop:
0001BC20 4EB9 0000 EC80             		jsr	SingleObjLoad2
0001BC26 6600 0000                  		bne.w	loc_1A954
0001BC2A 12BC 0086                  		move.b	#$86,(a1)
0001BC2E 3368 0008 0008             		move.w	8(a0),8(a1)
0001BC34 337C 053C 000C             		move.w	#$53C,$C(a1)
0001BC3A 137C 0008 0024             		move.b	#8,$24(a1)
0001BC40 337C 2300 0002             		move.w	#$2300,2(a1)
0001BC46 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001BC4E 137C 000C 0016             		move.b	#$C,$16(a1)
0001BC54 137C 000C 0017             		move.b	#$C,$17(a1)
0001BC5A 137C 0000 0020             		move.b	#0,$20(a1)
0001BC60 137C 0003 0018             		move.b	#3,$18(a1)
0001BC66 337C 003E 0028             		move.w	#$3E,$28(a1)
0001BC6C 137C 0004 0001             		move.b	#4,1(a1)
0001BC72 08E9 0007 0001             		bset	#7,1(a1)
0001BC78 2348 0034                  		move.l	a0,$34(a1)
0001BC7C 4EB9 0000 3492             		jsr	(RandomNumber).l
0001BC82 3228 0032                  		move.w	$32(a0),d1
0001BC86 C3FC FFB1                  		muls.w	#-$4F,d1
0001BC8A 0641 2578                  		addi.w	#$2578,d1
0001BC8E 0240 001F                  		andi.w	#$1F,d0
0001BC92 0440 0010                  		subi.w	#$10,d0
0001BC96 D041                       		add.w	d1,d0
0001BC98 3340 0030                  		move.w	d0,$30(a1)
0001BC9C 5268 0032                  		addq.w	#1,$32(a0)
0001BCA0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001BCA6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001BCAA                            
0001BCAA                            loc_1A954:
0001BCAA 4A68 0032                  		tst.w	$32(a0)
0001BCAE 6600                       		bne.s	loc_1A95E
0001BCB0 5428 0024                  		addq.b	#2,$24(a0)
0001BCB4                            
0001BCB4                            loc_1A95E:
0001BCB4 6000 FF0C                  		bra.w	loc_1A86C
0001BCB8                            ; ===========================================================================
0001BCB8                            
0001BCB8                            loc_1A962:				; XREF: Obj86_Index
0001BCB8 117C 0002 001C             		move.b	#2,$1C(a0)
0001BCBE 4A68 0038                  		tst.w	$38(a0)
0001BCC2 6600                       		bne.s	loc_1A97E
0001BCC4 117C 0002 0024             		move.b	#2,$24(a0)
0001BCCA 2268 0034                  		movea.l	$34(a0),a1
0001BCCE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001BCD4                            
0001BCD4                            loc_1A97E:
0001BCD4 6000 FEEC                  		bra.w	loc_1A86C
0001BCD8                            ; ===========================================================================
0001BCD8                            
0001BCD8                            loc_1A982:				; XREF: Obj86_Index
0001BCD8 7000                       		moveq	#0,d0
0001BCDA 1028 0025                  		move.b	$25(a0),d0
0001BCDE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001BCE2 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001BCE6                            ; ===========================================================================
0001BCE6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001BCE8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001BCEA 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001BCEC 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001BCEE 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001BCF0 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001BCF2 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BCF4 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001BCF6 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BCF8 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001BCFA                            ; ===========================================================================
0001BCFA                            
0001BCFA                            loc_1A9A6:				; XREF: Obj86_Index2
0001BCFA 3028 0030                  		move.w	$30(a0),d0
0001BCFE 9068 0008                  		sub.w	8(a0),d0
0001BD02 E940                       		asl.w	#4,d0
0001BD04 3140 0010                  		move.w	d0,$10(a0)
0001BD08 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001BD0E 5428 0025                  		addq.b	#2,$25(a0)
0001BD12                            
0001BD12                            Obj86_Ball_Animate:
0001BD12 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001BD16 4EB9 0000 B832             		jsr	AnimateSprite
0001BD1C 4EF9 0000 E7E4             		jmp	DisplaySprite
0001BD22                            ; ===========================================================================
0001BD22                            
0001BD22                            loc_1A9C0:				; XREF: Obj86_Index2
0001BD22 4A68 0010                  		tst.w	$10(a0)
0001BD26 6700                       		beq.s	loc_1A9E6
0001BD28 4EB9 0000 E7BE             		jsr	SpeedToPos
0001BD2E 3028 0008                  		move.w	8(a0),d0
0001BD32 9068 0030                  		sub.w	$30(a0),d0
0001BD36 6400                       		bcc.s	loc_1A9E6
0001BD38 4268 0010                  		clr.w	$10(a0)
0001BD3C D168 0008                  		add.w	d0,8(a0)
0001BD40 2268 0034                  		movea.l	$34(a0),a1
0001BD44 5369 0032                  		subq.w	#1,$32(a1)
0001BD48                            
0001BD48                            loc_1A9E6:
0001BD48 117C 0000 001C             		move.b	#0,$1C(a0)
0001BD4E 5368 0028                  		subq.w	#1,$28(a0)
0001BD52 6600                       		bne.s	locret_1AA1C
0001BD54 4EB8 3492                  		jsr	RandomNumber
0001BD58 0240 000E                  		and.w	#7*2,d0
0001BD5C 5840                       		addq.w	#2*2,d0
0001BD5E 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001BD62 4840                       		swap	d0
0001BD64 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001BD68 117C 0001 001C             		move.b	#1,$1C(a0)
0001BD6E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001BD74 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD78 9068 0008                  		sub.w	8(a0),d0
0001BD7C 3140 0010                  		move.w	d0,$10(a0)
0001BD80 317C 0140 0012             		move.w	#$140,$12(a0)
0001BD86                            
0001BD86                            locret_1AA1C:
0001BD86 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            Obj86_Ball_Explode:
0001BD8A 5328 0028                  		subq.b	#1,$28(a0)
0001BD8E 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001BD92 2268 0034                  		movea.l	$34(a0),a1
0001BD96 5369 0038                  		subq.w	#1,$38(a1)
0001BD9A 2248                       		move.l	a0,a1
0001BD9C 7400                       		moveq	#0,d2	; GMZ
0001BD9E 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001BDA0 6000                       		bra.s	@start
0001BDA2                            @loop:
0001BDA2 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001BDA8 6600                       		bne.s	@exit
0001BDAA 3368 0008 0008             		move.w	8(a0),8(a1)
0001BDB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BDB6                            @start:
0001BDB6 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BDBA 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001BDC0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001BDC4 5802                       		addq.b	#4,d2
0001BDC6 51C9 FFDA                  		dbf	d1,@loop
0001BDCA                            @exit:
0001BDCA 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001BDCE                            ; ===========================================================================
0001BDCE                            
0001BDCE                            Obj86_Ball_Sine:
0001BDCE 1028 0028                  		move.b	$28(a0),d0
0001BDD2 5828 0028                  		addq.b	#4,$28(a0)
0001BDD6 4EB8 34B8                  		jsr	CalcSine
0001BDDA C1FC 0002                  		muls.w	#2,d0
0001BDDE 3140 0010                  		move.w	d0,$10(a0)
0001BDE2                            
0001BDE2 1028 0029                  		move.b	$29(a0),d0
0001BDE6 5828 0029                  		addq.b	#4,$29(a0)
0001BDEA 4EB8 34B8                  		jsr	CalcSine
0001BDEE 4A40                       		tst.w	d0
0001BDF0 6B00                       		bmi.s	@upwards
0001BDF2 E548                       		lsl.w	#2,d0		; x4 go down faster
0001BDF4                            @upwards:
0001BDF4 3140 0012                  		move.w	d0,$12(a0)
0001BDF8 6000 0000                  		bra.w	loc_1AA1E
0001BDFC                            ; ===========================================================================
0001BDFC                            
0001BDFC                            Obj86_Ball_Homing:
0001BDFC 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001BE02 6400                       		bhs.s	@homer
0001BE04 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001BE0A 6400                       		bhs.s	Obj86_Ball_Vanish
0001BE0C 5328 0028                  		subq.b	#1,$28(a0)
0001BE10 6400                       		bcc.s	@nomorehoming
0001BE12 3038 D008                  		move.w	($FFFFD008).w,d0
0001BE16 9068 0008                  		sub.w	8(a0),d0
0001BE1A D168 0010                  		add.w	d0,$10(a0)
0001BE1E D168 0010                  		add.w	d0,$10(a0)
0001BE22                            @nomorehoming:
0001BE22 6000 0000                  		bra.w	loc_1AA1E
0001BE26                            @homer:
0001BE26 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001BE2C 60F4                       		bra.s	@nomorehoming	; next frame ig
0001BE2E                            ; ===========================================================================
0001BE2E                            
0001BE2E                            Obj86_Ball_Speed:
0001BE2E 4268 0010                  		clr.w	$10(a0)
0001BE32 7000                       		moveq	#0,d0
0001BE34 1028 0028                  		move.b	$28(a0),d0
0001BE38 E448                       		lsr.w	#2,d0
0001BE3A D168 0012                  		add.w	d0,$12(a0)
0001BE3E 1028 0029                  		move.b	$29(a0),d0
0001BE42 D128 0028                  		add.b	d0,$28(a0)
0001BE46 6000 0000                  		bra.w	loc_1AA1E
0001BE4A                            ; ===========================================================================
0001BE4A                            
0001BE4A                            Obj86_Ball_Vanish:
0001BE4A 303C 00E1                  		move.w	#$E1,d0
0001BE4E 4EB9 0000 1D16             		jsr	(PlaySound_Special).l
0001BE54 6000 0000                  		bra.w	loc_1AA34
0001BE58                            ; ===========================================================================
0001BE58                            
0001BE58                            Obj86_Ball_Static:
0001BE58 4268 0010                  		clr.w	$10(a0)
0001BE5C 7000                       		moveq	#0,d0
0001BE5E 7200                       		moveq	#0,d1
0001BE60 1028 0028                  		move.b	$28(a0),d0
0001BE64 1228 0029                  		move.b	$29(a0),d1
0001BE68 D041                       		add.w	d1,d0
0001BE6A 3140 0012                  		move.w	d0,$12(a0)
0001BE6E 6000 0000                  		bra.w	loc_1AA1E
0001BE72                            ; ===========================================================================
0001BE72                            
0001BE72                            Obj86_Ball_Standard:
0001BE72                            loc_1AA1E:
0001BE72 4EB9 0000 E7BE             		jsr	SpeedToPos
0001BE78 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001BE7E 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001BE82                            loc_1AA34:
0001BE82 2268 0034                  		movea.l	$34(a0),a1
0001BE86 5369 0038                  		subq.w	#1,$38(a1)
0001BE8A 6000 F90E                  		bra.w	Obj84_Delete
0001BE8E                            ; ===========================================================================
0001BE8E                            Ani_obj86:
0001BE8E                            	include "_anim\obj86.asm"
0001BE8E                            ; ---------------------------------------------------------------------------
0001BE8E                            ; Animation script - energy ball launcher (FZ)
0001BE8E                            ; ---------------------------------------------------------------------------
0001BE8E 0000                       		dc.w byte_1AA46-Ani_obj86
0001BE90 0000                       		dc.w byte_1AA4A-Ani_obj86
0001BE92 0000                       		dc.w byte_1AA50-Ani_obj86
0001BE94 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001BE98 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001BE9E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001BEA4                            		even
0001BEA4                            		even
0001BEA4                            
0001BEA4                            ; ---------------------------------------------------------------------------
0001BEA4                            ; Sprite mappings - energy ball	launcher (FZ)
0001BEA4                            ; ---------------------------------------------------------------------------
0001BEA4                            Map_obj86:
0001BEA4                            	include "_maps\obj86.asm"
0001BEA4                            ; ---------------------------------------------------------------------------
0001BEA4                            ; Sprite mappings - energy ball	launcher (FZ)
0001BEA4                            ; ---------------------------------------------------------------------------
0001BEA4 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001BEA8 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001BEAC 01                         byte_1AA5E:	dc.b 1
0001BEAD F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001BEB2 01                         byte_1AA64:	dc.b 1
0001BEB3 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001BEB8 01                         byte_1AA6A:	dc.b 1
0001BEB9 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001BEBE 01                         byte_1AA70:	dc.b 1
0001BEBF F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001BEC4                            		even
0001BEC4                            		even
0001BEC4                            
0001BEC4                            Ani_obj86a:
0001BEC4                            	include "_anim\obj86a.asm"
0001BEC4                            ; ---------------------------------------------------------------------------
0001BEC4                            ; Animation script - energy balls (FZ)
0001BEC4                            ; ---------------------------------------------------------------------------
0001BEC4 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001BEC6 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001BEC8 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001BED7 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001BEE6 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001BEEA 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001BEF4                            		even
0001BEF4                            		even
0001BEF4                            
0001BEF4                            ; ---------------------------------------------------------------------------
0001BEF4                            ; Sprite mappings - energy balls (FZ)
0001BEF4                            ; ---------------------------------------------------------------------------
0001BEF4                            Map_obj86a:
0001BEF4                            	include "_maps\obj86a.asm"
0001BEF4                            ; ---------------------------------------------------------------------------
0001BEF4                            ; Sprite mappings - energy balls (FZ)
0001BEF4                            ; ---------------------------------------------------------------------------
0001BEF4 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001BEF8 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001BEFC 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001BF00 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001BF04 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001BF08 0000                       		dc.w byte_1AB20-Map_obj86a
0001BF0A 02                         byte_1AABC:	dc.b 2
0001BF0B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001BF10 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001BF15 02                         byte_1AAC7:	dc.b 2
0001BF16 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001BF1B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001BF20 02                         byte_1AAD2:	dc.b 2
0001BF21 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001BF26 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001BF2B 02                         byte_1AADD:	dc.b 2
0001BF2C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001BF31 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001BF36 02                         byte_1AAE8:	dc.b 2
0001BF37 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001BF3C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001BF41 02                         byte_1AAF3:	dc.b 2
0001BF42 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001BF47 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001BF4C 01                         byte_1AAFE:	dc.b 1
0001BF4D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001BF52 01                         byte_1AB04:	dc.b 1
0001BF53 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001BF58 02                         byte_1AB0A:	dc.b 2
0001BF59 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001BF5E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001BF63 02                         byte_1AB15:	dc.b 2
0001BF64 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001BF69 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001BF6E 00                         byte_1AB20:	dc.b 0
0001BF70 00                         		even
0001BF70 00                         		even
0001BF70                            
0001BF70                            ; ===========================================================================
0001BF70                            ; ---------------------------------------------------------------------------
0001BF70                            ; Object 3E - prison capsule
0001BF70                            ; ---------------------------------------------------------------------------
0001BF70                            
0001BF70                            Obj3E:					; XREF: Obj_Index
0001BF70 7000                       		moveq	#0,d0
0001BF72 1028 0024                  		move.b	$24(a0),d0
0001BF76 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001BF7A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001BF7E 3028 0008                  		move.w	8(a0),d0
0001BF82 0240 FF80                  		andi.w	#$FF80,d0
0001BF86 3238 F700                  		move.w	($FFFFF700).w,d1
0001BF8A 0441 0080                  		subi.w	#$80,d1
0001BF8E 0241 FF80                  		andi.w	#$FF80,d1
0001BF92 9041                       		sub.w	d1,d0
0001BF94 0C40 0280                  		cmpi.w	#$280,d0
0001BF98 6200                       		bhi.s	Obj3E_Delete
0001BF9A 4EF9 0000 E7E4             		jmp	DisplaySprite
0001BFA0                            ; ===========================================================================
0001BFA0                            
0001BFA0                            Obj3E_Delete:
0001BFA0 4EF9 0000 E820             		jmp	DeleteObject
0001BFA6                            ; ===========================================================================
0001BFA6 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001BFA8 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001BFAA 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001BFAC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BFAE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BFB0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BFB2 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001BFB4 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001BFB6                            
0001BFB6 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001BFBA 040C 0501                  		dc.b 4,	$C, 5, 1
0001BFBE 0610 0403                  		dc.b 6,	$10, 4,	3
0001BFC2 0810 0305                  		dc.b 8,	$10, 3,	5
0001BFC6                            ; ===========================================================================
0001BFC6                            
0001BFC6                            Obj3E_Main:				; XREF: Obj3E_Index
0001BFC6 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001BFCE 317C 049D 0002             		move.w	#$49D,2(a0)
0001BFD4 117C 0004 0001             		move.b	#4,1(a0)
0001BFDA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BFE0 7000                       		moveq	#0,d0
0001BFE2 1028 0028                  		move.b	$28(a0),d0
0001BFE6 E548                       		lsl.w	#2,d0
0001BFE8 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001BFEC 1159 0024                  		move.b	(a1)+,$24(a0)
0001BFF0 1159 0019                  		move.b	(a1)+,$19(a0)
0001BFF4 1159 0018                  		move.b	(a1)+,$18(a0)
0001BFF8 1159 001A                  		move.b	(a1)+,$1A(a0)
0001BFFC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C000 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C002 117C 0006 0020             		move.b	#6,$20(a0)
0001C008 117C 0008 0021             		move.b	#8,$21(a0)
0001C00E                            
0001C00E                            Obj3E_Not02:
0001C00E 4E75                       		rts	
0001C010                            ; ===========================================================================
0001C010                            
0001C010                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C010 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C016 6700                       		beq.s	Obj3E_ChkOpened
0001C018 323C 002B                  		move.w	#$2B,d1
0001C01C 343C 0018                  		move.w	#$18,d2
0001C020 363C 0018                  		move.w	#$18,d3
0001C024 3828 0008                  		move.w	8(a0),d4
0001C028 4EF9 0001 0BB4             		jmp	SolidObject
0001C02E                            ; ===========================================================================
0001C02E                            
0001C02E                            Obj3E_ChkOpened:
0001C02E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C032 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C034 4228 0025                  		clr.b	$25(a0)
0001C038 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C03E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C044                            
0001C044                            Obj3E_DoOpen:
0001C044 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C04A 4E75                       		rts	
0001C04C                            ; ===========================================================================
0001C04C                            
0001C04C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C04C 323C 0017                  		move.w	#$17,d1
0001C050 343C 0008                  		move.w	#8,d2
0001C054 363C 0008                  		move.w	#8,d3
0001C058 3828 0008                  		move.w	8(a0),d4
0001C05C 4EB9 0001 0BB4             		jsr	SolidObject
0001C062 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C068 4EB9 0000 B832             		jsr	AnimateSprite
0001C06E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C074 4A28 0025                  		tst.b	$25(a0)
0001C078 6700                       		beq.s	locret_1AC60
0001C07A 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C07E 6600                       		bne.s	Obj3E_SkipScrPosChk	; GMZ: If not, branch
0001C080 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w	; GMZ: Is screen X pos 2AC0?
0001C086 6600                       		bne.s	locret_1AC60	; GMZ: If not, branch
0001C088                            
0001C088                            Obj3E_SkipScrPosChk:
0001C088 5068 000C                  		addq.w	#8,$C(a0)
0001C08C 117C 000A 0024             		move.b	#$A,$24(a0)
0001C092                            		; move.w	#$3C,$1E(a0)
0001C092 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C096 6600                       		bne.s	Obj3E_SetNormalTimer	; GMZ: If not, branch
0001C098 317C 0100 001E             		move.w	#$100,$1E(a0)	; GMZ: Timer for "Sonic Got Through"
0001C09E 6000                       		bra.s	Obj3E_LockCtrl	; GMZ
0001C0A0                            
0001C0A0                            Obj3E_SetNormalTimer:	; GMZ
0001C0A0 317C 003C 001E             		move.w	#$3C,$1E(a0)	; GMZ
0001C0A6                            
0001C0A6                            Obj3E_LockCtrl:	; GMZ
0001C0A6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C0AA 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C0AE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C0B4 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C0B8 6700                       		beq.s	Obj3E_NoCtrl	; GMZ: If yes, branch
0001C0BA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001C0C0 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001C0C2 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001C0C8 6000                       		bra.s	Obj3E_ContinueCode
0001C0CA                            
0001C0CA                            Obj3E_MoveLeft:
0001C0CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C0D0                            
0001C0D0                            Obj3E_NoCtrl:	; GMZ
0001C0D0                            Obj3E_ContinueCode:
0001C0D0 4228 0025                  		clr.b	$25(a0)
0001C0D4 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C0D8 6700                       		beq.s	Obj3E_LoadTruthNuke	; GMZ: If yes, branch
0001C0DA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C0E0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C0E6                            
0001C0E6                            locret_1AC60:
0001C0E6 4E75                       		rts	
0001C0E8                            
0001C0E8                            Obj3E_LoadTruthNuke:	; GMZ
0001C0E8 2448                       		move.l	a0,a2	; GMZ
0001C0EA 207C FFFF D000             		move.l	#$FFFFD000,a0
0001C0F0 4EB9 0000 E820             		jsr	DeleteObject	; GMZ: Delete Sonic's object
0001C0F6 207C FFFF D040             		move.l	#$FFFFD040,a0
0001C0FC 4EB9 0000 E820             		jsr	DeleteObject	; GMZ: Delete the HUD object
0001C102 204A                       		move.l	a2,a0
0001C104 303C 00E4                  		move.w	#$E4,d0
0001C108 4EB8 1D16                  		jsr	PlaySound_Special	; GMZ: Stop music
0001C10C 303C 00CD                  		move.w	#$CD,d0
0001C110 4EB8 1D10                  		jsr	PlaySound	; GMZ: Play a button sound
0001C114 11FC 0001 FFF9             		move.b	#1,($FFFFFFF9).w	; GMZ: Set truth nuke flag
0001C11A 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C11E 4EB8 28CA                  		jsr	Pal_MakeFlash
0001C122 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C126 31FC 0000 FBC0             		move.w	#$0000,($FFFFFBC0).w	; GMZ: Make BG color black
0001C12C                            		; lea	(Obj3E_TNScrPos).l,a1
0001C12C                            		; moveq	#0,d2
0001C12C                            		; move.b	($FFFFFE10).w,d2
0001C12C                            		; lsl.l	#3,d2
0001C12C                            		; move.l	(a1,d2.w),d0
0001C12C                            		; move.l	4(a1,d2.w),d1
0001C12C                            		; move.l	d0,($FFFFF700).w
0001C12C                            		; move.l	d1,($FFFFF704).w
0001C12C                            		; cmpi.b	#8,d2
0001C12C                            		; ; beq.s	Obj3E_IsLZ
0001C12C                            		; ; move.l	#$00000000,($FFFFF704).w	; GMZ: Set camera to the top of the stage
0001C12C                            		; ; bra.s	Obj3E_IsntLZ
0001C12C                            		; bne.s	Obj3E_IsntLZ
0001C12C                            
0001C12C                            ; Obj3E_IsLZ:
0001C12C                            		; move.l	#$01600000,($FFFFD00C).w
0001C12C                            		; move.l	#$01000000,($FFFFF704).w
0001C12C                            		; move.l	#$20300000,($FFFFF700).w
0001C12C                            		; move.l	#0,($FFFFF646).w
0001C12C                            		; move.l	#0,($FFFFF64A).w
0001C12C                            		; move.b	#0,($FFFFF64E).w
0001C12C 21FC 2AC0 0000 F700        		move.l	#$2AC00000,($FFFFF700).w	; GMZ
0001C134 21FC 0000 0000 F704        		move.l	#$00000000,($FFFFF704).w	; GMZ
0001C13C                            
0001C13C                            Obj3E_IsntLZ:
0001C13C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C142 7000                       		moveq	#0,d0
0001C144 7200                       		moveq	#0,d1
0001C146 303C 0A40                  		move.w	#$A40,d0
0001C14A                            
0001C14A                            Obj3E_ClearChunks:
0001C14A 22C1                       		move.l	d1,(a1)+
0001C14C 22C1                       		move.l	d1,(a1)+
0001C14E 22C1                       		move.l	d1,(a1)+
0001C150 22C1                       		move.l	d1,(a1)+	; GMZ: Clear chunks to prevent garbage from appearing
0001C152 51C8 FFF6                  		dbf	d0,Obj3E_ClearChunks
0001C156 43F9 00FF A400             		lea	($FFA400).l,a1
0001C15C 303C 0100                  		move.w	#$100,d0
0001C160                            
0001C160                            Obj3E_ClearLayout:
0001C160 22C1                       		move.l	d1,(a1)+	; GMZ: Clear layout to prevent garbage from appearing
0001C162 51C8 FFFC                  		dbf	d0,Obj3E_ClearLayout
0001C166                            
0001C166 4EB8 1C3E                  		jsr	ClearScreen
0001C16A 4EB8 1F58                  		jsr	ClearPLC
0001C16E 7023                       		moveq	#$23,d0
0001C170 4EB8 1EFA                  		jsr	LoadPLC	; GMZ: Load art
0001C174 2448                       		move.l	a0,a2	; Save a0 to a2
0001C176 43F9 00FF B010             		lea	($FFB010).l,a1
0001C17C 41F9 0000 0000             		lea	(Eni_TruthNuke).l,a0
0001C182 303C 0000                  		move.w	#0,d0
0001C186 4EB8 2098                  		jsr	EniDec
0001C18A 43F9 00FF B010             		lea	($FFB010).l,a1
0001C190 203C 4000 0003             		move.l	#$40000003,d0
0001C196 7200                       		moveq	#0,d1
0001C198 3238 F700                  		move.w	($FFFFF700).w,d1
0001C19C 0241 01F8                  		andi.w	#$1F8,d1
0001C1A0 E189                       		lsl.l	#8,d1
0001C1A2 ED89                       		lsl.l	#6,d1
0001C1A4 D081                       		add.l	d1,d0	; GMZ: Get correct plane position
0001C1A6 7227                       		moveq	#$27,d1
0001C1A8 741B                       		moveq	#$1B,d2
0001C1AA 4EB8 1D9A                  		jsr	ShowVDPGraphics	; GMZ: Load plane mappings
0001C1AE 204A                       		move.l	a2,a0	; GMZ: Recover a0 from a2
0001C1B0 4E75                       		rts	
0001C1B2                            ; ===========================================================================
0001C1B2                            
0001C1B2                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C1B2 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C1B6 6700                       		beq.s	Obj3E_TNExplosion	; GMZ: If yes, branch
0001C1B8 7007                       		moveq	#7,d0
0001C1BA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C1BE 6600                       		bne.s	loc_1ACA0
0001C1C0 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001C1C6 6600                       		bne.s	loc_1ACA0
0001C1C8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C1CC 3368 0008 0008             		move.w	8(a0),8(a1)
0001C1D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C1D8 4EB9 0000 3492             		jsr	(RandomNumber).l
0001C1DE 7200                       		moveq	#0,d1
0001C1E0 1200                       		move.b	d0,d1
0001C1E2 E409                       		lsr.b	#2,d1
0001C1E4 0441 0020                  		subi.w	#$20,d1
0001C1E8 D369 0008                  		add.w	d1,8(a1)
0001C1EC E048                       		lsr.w	#8,d0
0001C1EE E608                       		lsr.b	#3,d0
0001C1F0 D169 000C                  		add.w	d0,$C(a1)
0001C1F4                            
0001C1F4                            loc_1ACA0:
0001C1F4 5368 001E                  		subq.w	#1,$1E(a0)
0001C1F8 6700                       		beq.s	Obj3E_MakeAnimal
0001C1FA 4E75                       		rts	
0001C1FC                            
0001C1FC                            Obj3E_TNExplosion:
0001C1FC 303C 00C1                  		move.w	#$C1,d0
0001C200 4EB8 1D10                  		jsr	PlaySound	; GMZ: Play multiple explosion sounds while we wait
0001C204 5368 001E                  		subq.w	#1,$1E(a0)
0001C208 6700 0000                  		beq.w	Obj3E_TNExplTimerOver	; GMZ: If timer is 0, branch
0001C20C 4E75                       		rts
0001C20E                            
0001C20E                            Obj3E_TNExplTimerOver:	; GMZ
0001C20E 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C212 4EB8 281E                  		jsr	Pal_MakeWhite	; GMZ: Fade out from black
0001C216 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C21A 317C 0080 001E             		move.w	#$80,$1E(a0)	; GMZ: Set new timer
0001C220 117C 000E 0024             		move.b	#$E,$24(a0)	; GMZ: Set routine to 0E (End Act)
0001C226 4E75                       		rts	
0001C228                            ; ===========================================================================
0001C228                            
0001C228                            Obj3E_MakeAnimal:
0001C228 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C22E 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C234 117C 0006 001A             		move.b	#6,$1A(a0)
0001C23A 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C240 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C246 7C07                       		moveq	#7,d6
0001C248 3A3C 009A                  		move.w	#$9A,d5
0001C24C 78E4                       		moveq	#-$1C,d4
0001C24E                            
0001C24E                            Obj3E_Loop:
0001C24E 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001C254 6600                       		bne.s	locret_1ACF8
0001C256 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C25A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C260 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C266 D969 0008                  		add.w	d4,8(a1)
0001C26A 5E44                       		addq.w	#7,d4
0001C26C 3345 0036                  		move.w	d5,$36(a1)
0001C270 5145                       		subq.w	#8,d5
0001C272 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C276                            
0001C276                            locret_1ACF8:
0001C276 4E75                       		rts	
0001C278                            ; ===========================================================================
0001C278                            
0001C278                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C278 7007                       		moveq	#7,d0
0001C27A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C27E 6600                       		bne.s	loc_1AD38
0001C280 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001C286 6600                       		bne.s	loc_1AD38
0001C288 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C28C 3368 0008 0008             		move.w	8(a0),8(a1)
0001C292 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C298 4EB9 0000 3492             		jsr	(RandomNumber).l
0001C29E 0240 001F                  		andi.w	#$1F,d0
0001C2A2 5D40                       		subq.w	#6,d0
0001C2A4 4A41                       		tst.w	d1
0001C2A6 6A00                       		bpl.s	loc_1AD2E
0001C2A8 4440                       		neg.w	d0
0001C2AA                            
0001C2AA                            loc_1AD2E:
0001C2AA D169 0008                  		add.w	d0,8(a1)
0001C2AE 337C 000C 0036             		move.w	#$C,$36(a1)
0001C2B4                            
0001C2B4                            loc_1AD38:
0001C2B4 5368 001E                  		subq.w	#1,$1E(a0)
0001C2B8 6600                       		bne.s	locret_1AD48
0001C2BA 5428 0024                  		addq.b	#2,$24(a0)
0001C2BE 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C2C4                            
0001C2C4                            locret_1AD48:
0001C2C4 4E75                       		rts	
0001C2C6                            ; ===========================================================================
0001C2C6                            
0001C2C6                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C2C6 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C2CA 6700                       		beq.s	Obj3E_TNEndAct	; GMZ: If yes, branch
0001C2CC 703E                       		moveq	#$3E,d0
0001C2CE 7228                       		moveq	#$28,d1
0001C2D0 7440                       		moveq	#$40,d2
0001C2D2 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C2D6                            
0001C2D6                            Obj3E_FindObj28:
0001C2D6 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C2D8 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C2DA D2C2                       		adda.w	d2,a1		; next object RAM
0001C2DC 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C2E0                            
0001C2E0 4EB9 0000 FE70             		jsr	GotThroughAct
0001C2E6 4EF9 0000 E820             		jmp	DeleteObject
0001C2EC                            
0001C2EC                            Obj3E_TNEndAct:
0001C2EC 5368 001E                  		subq.w	#1,$1E(a0)	; GMZ: Wait some frames
0001C2F0 6600                       		bne.s	Obj3E_Obj28Found	; GMZ: If timer isn't 0, branch
0001C2F2                            
0001C2F2 4EB9 0000 FE70             		jsr	GotThroughAct
0001C2F8 4EF9 0000 E820             		jmp	DeleteObject
0001C2FE                            ; ===========================================================================
0001C2FE                            
0001C2FE                            Obj3E_Obj28Found:
0001C2FE 4E75                       		rts	
0001C300                            ; ===========================================================================
0001C300                            Ani_obj3E:
0001C300                            	include "_anim\obj3E.asm"
0001C300                            ; ---------------------------------------------------------------------------
0001C300                            ; Animation script - prison capsule
0001C300                            ; ---------------------------------------------------------------------------
0001C300 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C302 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C304 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C308                            		even
0001C308                            		even
0001C308                            
0001C308                            ; ---------------------------------------------------------------------------
0001C308                            ; Sprite mappings - prison capsule
0001C308                            ; ---------------------------------------------------------------------------
0001C308                            Map_obj3E:
0001C308                            	include "_maps\obj3E.asm"
0001C308                            ; ---------------------------------------------------------------------------
0001C308                            ; Sprite mappings - prison capsule
0001C308                            ; ---------------------------------------------------------------------------
0001C308 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C30C 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C310 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C314 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C316 07                         byte_1AD82:	dc.b 7
0001C317 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C31C E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C321 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C326 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C32B F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C330 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C335 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C33A 01                         byte_1ADA6:	dc.b 1
0001C33B F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C340 06                         byte_1ADAC:	dc.b 6
0001C341 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C346 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C34B 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C350 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C355 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C35A 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C35F 01                         byte_1ADCB:	dc.b 1
0001C360 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C365 02                         byte_1ADD1:	dc.b 2
0001C366 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C36B 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C370 01                         byte_1ADDC:	dc.b 1
0001C371 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C376 00                         byte_1ADE2:	dc.b 0
0001C378 00                         		even
0001C378 00                         		even
0001C378                            
0001C378                            ; ---------------------------------------------------------------------------
0001C378                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C378                            ; ---------------------------------------------------------------------------
0001C378                            
0001C378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C378                            
0001C378                            
0001C378                            TouchResponse:				; XREF: Obj01
0001C378 4E71                       		nop	
0001C37A 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C37E 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C382 5142                       		subq.w	#8,d2
0001C384 7A00                       		moveq	#0,d5
0001C386 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C38A 5705                       		subq.b	#3,d5
0001C38C 9645                       		sub.w	d5,d3
0001C38E 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C394 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C396 0643 000C                  		addi.w	#$C,d3
0001C39A 7A0A                       		moveq	#$A,d5
0001C39C                            
0001C39C                            Touch_NoDuck:
0001C39C 383C 0010                  		move.w	#$10,d4
0001C3A0 DA45                       		add.w	d5,d5
0001C3A2 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C3A6 3C3C 005F                  		move.w	#$5F,d6
0001C3AA                            
0001C3AA                            Touch_Loop:
0001C3AA 4A29 0001                  		tst.b	1(a1)
0001C3AE 6A00                       		bpl.s	Touch_NextObj
0001C3B0 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C3B4 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C3B6                            
0001C3B6                            Touch_NextObj:
0001C3B6 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C3BA 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C3BE                            
0001C3BE 7000                       		moveq	#0,d0
0001C3C0 4E75                       		rts	
0001C3C2                            ; ===========================================================================
0001C3C2 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C3C4 0C14                       		dc.b   $C, $14
0001C3C6 140C                       		dc.b  $14,  $C
0001C3C8 0410                       		dc.b	4, $10
0001C3CA 0C12                       		dc.b   $C, $12
0001C3CC 1010                       		dc.b  $10, $10
0001C3CE 0606                       		dc.b	6,   6
0001C3D0 180C                       		dc.b  $18,  $C
0001C3D2 0C10                       		dc.b   $C, $10
0001C3D4 100C                       		dc.b  $10,  $C
0001C3D6 0808                       		dc.b	8,   8
0001C3D8 1410                       		dc.b  $14, $10
0001C3DA 1408                       		dc.b  $14,   8
0001C3DC 0E0E                       		dc.b   $E,  $E
0001C3DE 1818                       		dc.b  $18, $18
0001C3E0 2810                       		dc.b  $28, $10
0001C3E2 1018                       		dc.b  $10, $18
0001C3E4 0810                       		dc.b	8, $10
0001C3E6 2070                       		dc.b  $20, $70
0001C3E8 4020                       		dc.b  $40, $20
0001C3EA 8020                       		dc.b  $80, $20
0001C3EC 2020                       		dc.b  $20, $20
0001C3EE 0808                       		dc.b	8,   8
0001C3F0 0404                       		dc.b	4,   4
0001C3F2 2008                       		dc.b  $20,   8
0001C3F4 0C0C                       		dc.b   $C,  $C
0001C3F6 0804                       		dc.b	8,   4
0001C3F8 1804                       		dc.b  $18,   4
0001C3FA 2804                       		dc.b  $28,   4
0001C3FC 0408                       		dc.b	4,   8
0001C3FE 0418                       		dc.b	4, $18
0001C400 0428                       		dc.b	4, $28
0001C402 0420                       		dc.b	4, $20
0001C404 1818                       		dc.b  $18, $18
0001C406 0C18                       		dc.b   $C, $18
0001C408 4808                       		dc.b  $48,   8
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            Touch_Height:				; XREF: TouchResponse
0001C40A 0240 003F                  		andi.w	#$3F,d0
0001C40E D040                       		add.w	d0,d0
0001C410 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C414 7200                       		moveq	#0,d1
0001C416 121A                       		move.b	(a2)+,d1
0001C418 3029 0008                  		move.w	8(a1),d0
0001C41C 9041                       		sub.w	d1,d0
0001C41E 9042                       		sub.w	d2,d0
0001C420 6400                       		bcc.s	loc_1AE98
0001C422 D241                       		add.w	d1,d1
0001C424 D041                       		add.w	d1,d0
0001C426 6500                       		bcs.s	Touch_Width
0001C428 6000 FF8C                  		bra.w	Touch_NextObj
0001C42C                            ; ===========================================================================
0001C42C                            
0001C42C                            loc_1AE98:
0001C42C B044                       		cmp.w	d4,d0
0001C42E 6200 FF86                  		bhi.w	Touch_NextObj
0001C432                            
0001C432                            Touch_Width:
0001C432 7200                       		moveq	#0,d1
0001C434 121A                       		move.b	(a2)+,d1
0001C436 3029 000C                  		move.w	$C(a1),d0
0001C43A 9041                       		sub.w	d1,d0
0001C43C 9043                       		sub.w	d3,d0
0001C43E 6400                       		bcc.s	loc_1AEB6
0001C440 D241                       		add.w	d1,d1
0001C442 D240                       		add.w	d0,d1
0001C444 6500                       		bcs.s	Touch_ChkValue
0001C446 6000 FF6E                  		bra.w	Touch_NextObj
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            loc_1AEB6:
0001C44A B045                       		cmp.w	d5,d0
0001C44C 6200 FF68                  		bhi.w	Touch_NextObj
0001C450                            
0001C450                            Touch_ChkValue:
0001C450 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C454 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C458 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C45C 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C460 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C464 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C466 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C46A                            
0001C46A                            ; touch	response is $40-$7F
0001C46A                            
0001C46A 1029 0020                  		move.b	$20(a1),d0
0001C46E 0200 003F                  		andi.b	#$3F,d0
0001C472 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C476 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C478 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C47E 6400 0000                  		bcc.w	locret_1AEF2
0001C482 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C486                            
0001C486                            locret_1AEF2:
0001C486 4E75                       		rts	
0001C488                            ; ===========================================================================
0001C488                            
0001C488                            Touch_Monitor:
0001C488 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C48C 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C48E 3028 000C                  		move.w	$C(a0),d0
0001C492 0440 0010                  		subi.w	#$10,d0
0001C496 B069 000C                  		cmp.w	$C(a1),d0
0001C49A 6500                       		bcs.s	locret_1AF2E
0001C49C 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C4A0 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C4A6 4A29 0025                  		tst.b	$25(a1)
0001C4AA 6600                       		bne.s	locret_1AF2E
0001C4AC 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C4B0 4E75                       		rts	
0001C4B2                            ; ===========================================================================
0001C4B2                            
0001C4B2                            loc_1AF1E:
0001C4B2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C4B8 6600                       		bne.s	locret_1AF2E
0001C4BA 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C4BE 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C4C2                            
0001C4C2                            locret_1AF2E:
0001C4C2 4E75                       		rts	
0001C4C4                            ; ===========================================================================
0001C4C4                            
0001C4C4                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C4C4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C4C8 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C4CA 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C4D0 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C4D4                            
0001C4D4                            loc_1AF40:
0001C4D4 4A29 0021                  		tst.b	$21(a1)
0001C4D8 6700                       		beq.s	Touch_KillEnemy
0001C4DA 4468 0010                  		neg.w	$10(a0)
0001C4DE 4468 0012                  		neg.w	$12(a0)
0001C4E2 E0E8 0010                  		asr	$10(a0)
0001C4E6 E0E8 0012                  		asr	$12(a0)
0001C4EA 137C 0000 0020             		move.b	#0,$20(a1)
0001C4F0 5329 0021                  		subq.b	#1,$21(a1)
0001C4F4 6600                       		bne.s	locret_1AF68
0001C4F6 08E9 0007 0022             		bset	#7,$22(a1)
0001C4FC                            
0001C4FC                            locret_1AF68:
0001C4FC 4E75                       		rts	
0001C4FE                            ; ===========================================================================
0001C4FE                            
0001C4FE                            Touch_KillEnemy:
0001C4FE 08E9 0007 0022             		bset	#7,$22(a1)
0001C504 7000                       		moveq	#0,d0
0001C506 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C50A 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C50E 0C40 0006                  		cmpi.w	#6,d0
0001C512 6500                       		bcs.s	loc_1AF82
0001C514 7006                       		moveq	#6,d0
0001C516                            
0001C516                            loc_1AF82:
0001C516 3340 003E                  		move.w	d0,$3E(a1)
0001C51A 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C51E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C524 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C526 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C52A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C530                            
0001C530                            loc_1AF9C:
0001C530 6100 0000                  		bsr.w	AddPoints
0001C534 7400                       		moveq	#0,d2	; GMZ
0001C536 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001C538 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001C53A                            
0001C53A                            TouchKE_Explode:
0001C53A 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C53E 137C 0000 0024             		move.b	#0,$24(a1)
0001C544 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001C548                            
0001C548                            TouchKE_NextExplosion:
0001C548 5802                       		addq.b	#4,d2
0001C54A 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001C550 6600                       		bne.s	TouchKE_NoExplosion
0001C552 336A 0008 0008             		move.w	8(a2),8(a1)
0001C558 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001C55E 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001C562                            
0001C562                            TouchKE_NoExplosion:
0001C562 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001C564 4A68 0012                  		tst.w	$12(a0)
0001C568 6B00                       		bmi.s	loc_1AFC2
0001C56A 3028 000C                  		move.w	$C(a0),d0
0001C56E B069 000C                  		cmp.w	$C(a1),d0
0001C572 6400                       		bcc.s	loc_1AFCA
0001C574 4468 0012                  		neg.w	$12(a0)
0001C578 4E75                       		rts	
0001C57A                            ; ===========================================================================
0001C57A                            
0001C57A                            loc_1AFC2:
0001C57A 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C580 4E75                       		rts	
0001C582                            ; ===========================================================================
0001C582                            
0001C582                            loc_1AFCA:
0001C582 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C588 4E75                       		rts	
0001C58A                            ; ===========================================================================
0001C58A 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C592                            ; ===========================================================================
0001C592                            
0001C592                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C592 08E9 0007 0022             		bset	#7,$22(a1)
0001C598                            
0001C598                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C598 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C59C 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C59E                            
0001C59E                            loc_1AFE6:				; XREF: Touch_Hurt
0001C59E 70FF                       		moveq	#-1,d0
0001C5A0 4E75                       		rts	
0001C5A2                            ; ===========================================================================
0001C5A2                            
0001C5A2                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C5A2 4E71                       		nop	
0001C5A4 4A68 0030                  		tst.w	$30(a0)
0001C5A8 66F4                       		bne.s	loc_1AFE6
0001C5AA 2449                       		movea.l	a1,a2
0001C5AC                            
0001C5AC                            ; End of function TouchResponse
0001C5AC                            ; continue straight to HurtSonic
0001C5AC                            
0001C5AC                            ; ---------------------------------------------------------------------------
0001C5AC                            ; Hurting Sonic	subroutine
0001C5AC                            ; ---------------------------------------------------------------------------
0001C5AC                            
0001C5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5AC                            
0001C5AC                            
0001C5AC                            HurtSonic:
0001C5AC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C5B0 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C5B2 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C5B6 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C5BA 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001C5C0 6600                       		bne.s	Hurt_Shield
0001C5C2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C5C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001C5CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C5D2                            
0001C5D2                            Hurt_Shield:
0001C5D2 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C5D8 117C 0004 0024             		move.b	#4,$24(a0)
0001C5DE 6100 8452                  		bsr.w	Sonic_ResetOnFloor
0001C5E2 08E8 0001 0022             		bset	#1,$22(a0)
0001C5E8 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C5EE 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C5F4 0828 0006 0022             		btst	#6,$22(a0)
0001C5FA 6700                       		beq.s	Hurt_Reverse
0001C5FC 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C602 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C608                            
0001C608                            Hurt_Reverse:
0001C608 3028 0008                  		move.w	8(a0),d0
0001C60C B06A 0008                  		cmp.w	8(a2),d0
0001C610 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C612 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C616                            
0001C616                            Hurt_ChkSpikes:
0001C616 317C 0000 0014             		move.w	#0,$14(a0)
0001C61C 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001C622 317C 0078 0030             		move.w	#$78,$30(a0)
0001C628 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001C62C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001C630 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C632 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001C636 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C638 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001C63C                            
0001C63C                            Hurt_Sound:
0001C63C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l
0001C642 70FF                       		moveq	#-1,d0
0001C644 4E75                       		rts	
0001C646                            ; ===========================================================================
0001C646                            
0001C646                            Hurt_NoRings:
0001C646 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001C64A 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001C64E                            ; End of function HurtSonic
0001C64E                            
0001C64E                            ; ---------------------------------------------------------------------------
0001C64E                            ; Subroutine to	kill Sonic
0001C64E                            ; ---------------------------------------------------------------------------
0001C64E                            
0001C64E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C64E                            
0001C64E                            
0001C64E                            KillSonic:
0001C64E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001C652 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001C654 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001C65A 117C 0006 0024             		move.b	#6,$24(a0)
0001C660 6100 83D0                  		bsr.w	Sonic_ResetOnFloor
0001C664 08E8 0001 0022             		bset	#1,$22(a0)
0001C66A 317C F900 0012             		move.w	#-$700,$12(a0)
0001C670 317C 0000 0010             		move.w	#0,$10(a0)
0001C676 317C 0000 0014             		move.w	#0,$14(a0)
0001C67C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C682 117C 0018 001C             		move.b	#$18,$1C(a0)
0001C688 08E8 0007 0002             		bset	#7,2(a0)
0001C68E 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001C692 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001C696 6600                       		bne.s	Kill_Sound
0001C698 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001C69C                            
0001C69C                            Kill_Sound:
0001C69C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l
0001C6A2                            
0001C6A2                            Kill_NoDeath:
0001C6A2 70FF                       		moveq	#-1,d0
0001C6A4 4E75                       		rts	
0001C6A6                            ; End of function KillSonic
0001C6A6                            
0001C6A6                            
0001C6A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6A6                            
0001C6A6                            
0001C6A6                            Touch_Special:				; XREF: Touch_ChkValue
0001C6A6 1229 0020                  		move.b	$20(a1),d1
0001C6AA 0201 003F                  		andi.b	#$3F,d1
0001C6AE 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001C6B2 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001C6B4 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001C6B8 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001C6BA 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001C6BE 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C6C0 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001C6C4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C6C6 4E75                       		rts	
0001C6C8                            ; ===========================================================================
0001C6C8                            
0001C6C8                            Touch_CatKiller:			; XREF: Touch_Special
0001C6C8 6000 FEC8                  		bra.w	loc_1AFDA
0001C6CC                            ; ===========================================================================
0001C6CC                            
0001C6CC                            Touch_Yadrin:				; XREF: Touch_Special
0001C6CC 9A40                       		sub.w	d0,d5
0001C6CE 0C45 0008                  		cmpi.w	#8,d5
0001C6D2 6400                       		bcc.s	loc_1B144
0001C6D4 3029 0008                  		move.w	8(a1),d0
0001C6D8 5940                       		subq.w	#4,d0
0001C6DA 0829 0000 0022             		btst	#0,$22(a1)
0001C6E0 6700                       		beq.s	loc_1B130
0001C6E2 0440 0010                  		subi.w	#$10,d0
0001C6E6                            
0001C6E6                            loc_1B130:
0001C6E6 9042                       		sub.w	d2,d0
0001C6E8 6400                       		bcc.s	loc_1B13C
0001C6EA 0640 0018                  		addi.w	#$18,d0
0001C6EE 6500                       		bcs.s	loc_1B140
0001C6F0 6000                       		bra.s	loc_1B144
0001C6F2                            ; ===========================================================================
0001C6F2                            
0001C6F2                            loc_1B13C:
0001C6F2 B044                       		cmp.w	d4,d0
0001C6F4 6200                       		bhi.s	loc_1B144
0001C6F6                            
0001C6F6                            loc_1B140:
0001C6F6 6000 FEA0                  		bra.w	Touch_ChkHurt
0001C6FA                            ; ===========================================================================
0001C6FA                            
0001C6FA                            loc_1B144:
0001C6FA 6000 FDC8                  		bra.w	Touch_Enemy
0001C6FE                            ; ===========================================================================
0001C6FE                            
0001C6FE                            Touch_D7orE1:				; XREF: Touch_Special
0001C6FE 5229 0021                  		addq.b	#1,$21(a1)
0001C702 4E75                       		rts	
0001C704                            ; End of function Touch_Special
0001C704                            
0001C704                            ; ---------------------------------------------------------------------------
0001C704                            ; Subroutine to	show the special stage layout
0001C704                            ; ---------------------------------------------------------------------------
0001C704                            
0001C704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C704                            
0001C704                            
0001C704                            SS_ShowLayout:				; XREF: SpecialStage
0001C704 6100 0000                  		bsr.w	SS_AniWallsRings
0001C708 6100 0000                  		bsr.w	SS_AniItems
0001C70C 3F05                       		move.w	d5,-(sp)
0001C70E 43F8 8000                  		lea	($FFFF8000).w,a1
0001C712 1038 F780                  		move.b	($FFFFF780).w,d0
0001C716 0200 00FC                  		andi.b	#$FC,d0
0001C71A 4EB9 0000 34B8             		jsr	(CalcSine).l
0001C720 3800                       		move.w	d0,d4
0001C722 3A01                       		move.w	d1,d5
0001C724 C9FC 0018                  		muls.w	#$18,d4
0001C728 CBFC 0018                  		muls.w	#$18,d5
0001C72C 7400                       		moveq	#0,d2
0001C72E 3438 F700                  		move.w	($FFFFF700).w,d2
0001C732 84FC 0018                  		divu.w	#$18,d2
0001C736 4842                       		swap	d2
0001C738 4442                       		neg.w	d2
0001C73A 0642 FF4C                  		addi.w	#-$B4,d2
0001C73E 7600                       		moveq	#0,d3
0001C740 3638 F704                  		move.w	($FFFFF704).w,d3
0001C744 86FC 0018                  		divu.w	#$18,d3
0001C748 4843                       		swap	d3
0001C74A 4443                       		neg.w	d3
0001C74C 0643 FF4C                  		addi.w	#-$B4,d3
0001C750 3E3C 000F                  		move.w	#$F,d7
0001C754                            
0001C754                            loc_1B19E:
0001C754 48A7 E000                  		movem.w	d0-d2,-(sp)
0001C758 48A7 C000                  		movem.w	d0-d1,-(sp)
0001C75C 4440                       		neg.w	d0
0001C75E C3C2                       		muls.w	d2,d1
0001C760 C1C3                       		muls.w	d3,d0
0001C762 2C00                       		move.l	d0,d6
0001C764 DC81                       		add.l	d1,d6
0001C766 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001C76A C1C2                       		muls.w	d2,d0
0001C76C C3C3                       		muls.w	d3,d1
0001C76E D280                       		add.l	d0,d1
0001C770 2406                       		move.l	d6,d2
0001C772 3C3C 000F                  		move.w	#$F,d6
0001C776                            
0001C776                            loc_1B1C0:
0001C776 2002                       		move.l	d2,d0
0001C778 E080                       		asr.l	#8,d0
0001C77A 32C0                       		move.w	d0,(a1)+
0001C77C 2001                       		move.l	d1,d0
0001C77E E080                       		asr.l	#8,d0
0001C780 32C0                       		move.w	d0,(a1)+
0001C782 D485                       		add.l	d5,d2
0001C784 D284                       		add.l	d4,d1
0001C786 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C78A                            
0001C78A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C78E 0643 0018                  		addi.w	#$18,d3
0001C792 51CF FFC0                  		dbf	d7,loc_1B19E
0001C796                            
0001C796 3A1F                       		move.w	(sp)+,d5
0001C798 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C79E 7000                       		moveq	#0,d0
0001C7A0 3038 F704                  		move.w	($FFFFF704).w,d0
0001C7A4 80FC 0018                  		divu.w	#$18,d0
0001C7A8 C0FC 0080                  		mulu.w	#$80,d0
0001C7AC D1C0                       		adda.l	d0,a0
0001C7AE 7000                       		moveq	#0,d0
0001C7B0 3038 F700                  		move.w	($FFFFF700).w,d0
0001C7B4 80FC 0018                  		divu.w	#$18,d0
0001C7B8 D0C0                       		adda.w	d0,a0
0001C7BA 49F8 8000                  		lea	($FFFF8000).w,a4
0001C7BE 3E3C 000F                  		move.w	#$F,d7
0001C7C2                            
0001C7C2                            loc_1B20C:
0001C7C2 3C3C 000F                  		move.w	#$F,d6
0001C7C6                            
0001C7C6                            loc_1B210:
0001C7C6 7000                       		moveq	#0,d0
0001C7C8 1018                       		move.b	(a0)+,d0
0001C7CA 6700                       		beq.s	loc_1B268
0001C7CC 0C00 004E                  		cmpi.b	#$4E,d0
0001C7D0 6200                       		bhi.s	loc_1B268
0001C7D2 3614                       		move.w	(a4),d3
0001C7D4 0643 0120                  		addi.w	#$120,d3
0001C7D8 0C43 0070                  		cmpi.w	#$70,d3
0001C7DC 6500                       		bcs.s	loc_1B268
0001C7DE 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C7E2 6400                       		bcc.s	loc_1B268
0001C7E4 342C 0002                  		move.w	2(a4),d2
0001C7E8 0642 00F0                  		addi.w	#$F0,d2
0001C7EC 0C42 0070                  		cmpi.w	#$70,d2
0001C7F0 6500                       		bcs.s	loc_1B268
0001C7F2 0C42 0170                  		cmpi.w	#$170,d2
0001C7F6 6400                       		bcc.s	loc_1B268
0001C7F8 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C7FE E748                       		lsl.w	#3,d0
0001C800 4BF5 0000                  		lea	(a5,d0.w),a5
0001C804 225D                       		movea.l	(a5)+,a1
0001C806 321D                       		move.w	(a5)+,d1
0001C808 D241                       		add.w	d1,d1
0001C80A D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C80E 365D                       		movea.w	(a5)+,a3
0001C810 7200                       		moveq	#0,d1
0001C812 1219                       		move.b	(a1)+,d1
0001C814 5301                       		subq.b	#1,d1
0001C816 6B00                       		bmi.s	loc_1B268
0001C818 4EB9 0000 E942             		jsr	sub_D762
0001C81E                            
0001C81E                            loc_1B268:
0001C81E 584C                       		addq.w	#4,a4
0001C820 51CE FFA4                  		dbf	d6,loc_1B210
0001C824                            
0001C824 41E8 0070                  		lea	$70(a0),a0
0001C828 51CF FF98                  		dbf	d7,loc_1B20C
0001C82C                            
0001C82C 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C830 0C05 0050                  		cmpi.b	#$50,d5
0001C834 6700                       		beq.s	loc_1B288
0001C836 24BC 0000 0000             		move.l	#0,(a2)
0001C83C 4E75                       		rts	
0001C83E                            ; ===========================================================================
0001C83E                            
0001C83E                            loc_1B288:
0001C83E 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C844 4E75                       		rts	
0001C846                            ; End of function SS_ShowLayout
0001C846                            
0001C846                            ; ---------------------------------------------------------------------------
0001C846                            ; Subroutine to	animate	walls and rings	in the special stage
0001C846                            ; ---------------------------------------------------------------------------
0001C846                            
0001C846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C846                            
0001C846                            
0001C846                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C846 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C84C 7000                       		moveq	#0,d0
0001C84E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C852 E408                       		lsr.b	#2,d0
0001C854 0240 000F                  		andi.w	#$F,d0
0001C858 7223                       		moveq	#$23,d1
0001C85A                            
0001C85A                            loc_1B2A4:
0001C85A 3280                       		move.w	d0,(a1)
0001C85C 5049                       		addq.w	#8,a1
0001C85E 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C862                            
0001C862 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C868 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C86C 6A00                       		bpl.s	loc_1B2C8
0001C86E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C874 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C878 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C87E                            
0001C87E                            loc_1B2C8:
0001C87E 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C884 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C888 6A00                       		bpl.s	loc_1B2E4
0001C88A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C890 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C894 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C89A                            
0001C89A                            loc_1B2E4:
0001C89A 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C89E 1340 0138                  		move.b	d0,$138(a1)
0001C8A2 1340 0160                  		move.b	d0,$160(a1)
0001C8A6 1340 0148                  		move.b	d0,$148(a1)
0001C8AA 1340 0150                  		move.b	d0,$150(a1)
0001C8AE 1340 01D8                  		move.b	d0,$1D8(a1)
0001C8B2 1340 01E0                  		move.b	d0,$1E0(a1)
0001C8B6 1340 01E8                  		move.b	d0,$1E8(a1)
0001C8BA 1340 01F0                  		move.b	d0,$1F0(a1)
0001C8BE 1340 01F8                  		move.b	d0,$1F8(a1)
0001C8C2 1340 0200                  		move.b	d0,$200(a1)
0001C8C6 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C8CA 6A00                       		bpl.s	loc_1B326
0001C8CC 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C8D2 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C8D6 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C8DC                            
0001C8DC                            loc_1B326:
0001C8DC 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C8E0 1340 0168                  		move.b	d0,$168(a1)
0001C8E4 1340 0170                  		move.b	d0,$170(a1)
0001C8E8 1340 0178                  		move.b	d0,$178(a1)
0001C8EC 1340 0180                  		move.b	d0,$180(a1)
0001C8F0 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C8F4 6A00                       		bpl.s	loc_1B350
0001C8F6 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C8FC 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C900 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C906                            
0001C906                            loc_1B350:
0001C906 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C90C 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C912 7000                       		moveq	#0,d0
0001C914 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C918 D040                       		add.w	d0,d0
0001C91A 41F0 0000                  		lea	(a0,d0.w),a0
0001C91E 3290                       		move.w	(a0),(a1)
0001C920 3368 0002 0008             		move.w	2(a0),8(a1)
0001C926 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C92C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C932 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C938 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C93E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C944 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C94A D0FC 0020                  		adda.w	#$20,a0
0001C94E D2FC 0048                  		adda.w	#$48,a1
0001C952 3290                       		move.w	(a0),(a1)
0001C954 3368 0002 0008             		move.w	2(a0),8(a1)
0001C95A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C960 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C966 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C96C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C972 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C978 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C97E D0FC 0020                  		adda.w	#$20,a0
0001C982 D2FC 0048                  		adda.w	#$48,a1
0001C986 3290                       		move.w	(a0),(a1)
0001C988 3368 0002 0008             		move.w	2(a0),8(a1)
0001C98E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C994 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C99A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C9A0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C9A6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C9AC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C9B2 D0FC 0020                  		adda.w	#$20,a0
0001C9B6 D2FC 0048                  		adda.w	#$48,a1
0001C9BA 3290                       		move.w	(a0),(a1)
0001C9BC 3368 0002 0008             		move.w	2(a0),8(a1)
0001C9C2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C9C8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C9CE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C9D4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C9DA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C9E0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C9E6 D0FC 0020                  		adda.w	#$20,a0
0001C9EA D2FC 0048                  		adda.w	#$48,a1
0001C9EE 4E75                       		rts	
0001C9F0                            ; End of function SS_AniWallsRings
0001C9F0                            
0001C9F0                            ; ===========================================================================
0001C9F0 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CA00 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CA10 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CA20 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CA30 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CA40 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CA50 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CA60 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CA70                            ; ---------------------------------------------------------------------------
0001CA70                            ; Subroutine to	remove items when you collect them in the special stage
0001CA70                            ; ---------------------------------------------------------------------------
0001CA70                            
0001CA70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA70                            
0001CA70                            
0001CA70                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CA70 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CA76 303C 001F                  		move.w	#$1F,d0
0001CA7A                            
0001CA7A                            loc_1B4C4:
0001CA7A 4A12                       		tst.b	(a2)
0001CA7C 6700                       		beq.s	locret_1B4CE
0001CA7E 504A                       		addq.w	#8,a2
0001CA80 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CA84                            
0001CA84                            locret_1B4CE:
0001CA84 4E75                       		rts	
0001CA86                            ; End of function SS_RemoveCollectedItem
0001CA86                            
0001CA86                            ; ---------------------------------------------------------------------------
0001CA86                            ; Subroutine to	animate	special	stage items when you touch them
0001CA86                            ; ---------------------------------------------------------------------------
0001CA86                            
0001CA86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA86                            
0001CA86                            
0001CA86                            SS_AniItems:				; XREF: SS_ShowLayout
0001CA86 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CA8C 3E3C 001F                  		move.w	#$1F,d7
0001CA90                            
0001CA90                            loc_1B4DA:
0001CA90 7000                       		moveq	#0,d0
0001CA92 1010                       		move.b	(a0),d0
0001CA94 6700                       		beq.s	loc_1B4E8
0001CA96 E548                       		lsl.w	#2,d0
0001CA98 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CA9C 4E91                       		jsr	(a1)
0001CA9E                            
0001CA9E                            loc_1B4E8:
0001CA9E 5048                       		addq.w	#8,a0
0001CAA0                            
0001CAA0                            loc_1B4EA:
0001CAA0 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CAA4                            
0001CAA4 4E75                       		rts	
0001CAA6                            ; End of function SS_AniItems
0001CAA6                            
0001CAA6                            ; ===========================================================================
0001CAA6 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CAAA 0000 0000                  		dc.l SS_AniBumper
0001CAAE 0000 0000                  		dc.l SS_Ani1Up
0001CAB2 0000 0000                  		dc.l SS_AniReverse
0001CAB6 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CABA 0000 0000                  		dc.l SS_AniGlassBlock
0001CABE                            ; ===========================================================================
0001CABE                            
0001CABE                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CABE 5328 0002                  		subq.b	#1,2(a0)
0001CAC2 6A00                       		bpl.s	locret_1B530
0001CAC4 117C 0005 0002             		move.b	#5,2(a0)
0001CACA 7000                       		moveq	#0,d0
0001CACC 1028 0003                  		move.b	3(a0),d0
0001CAD0 5228 0003                  		addq.b	#1,3(a0)
0001CAD4 2268 0004                  		movea.l	4(a0),a1
0001CAD8 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CADC 1280                       		move.b	d0,(a1)
0001CADE 6600                       		bne.s	locret_1B530
0001CAE0 4290                       		clr.l	(a0)
0001CAE2 42A8 0004                  		clr.l	4(a0)
0001CAE6                            
0001CAE6                            locret_1B530:
0001CAE6 4E75                       		rts	
0001CAE8                            ; ===========================================================================
0001CAE8 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CAEE                            ; ===========================================================================
0001CAEE                            
0001CAEE                            SS_AniBumper:				; XREF: SS_AniIndex
0001CAEE 5328 0002                  		subq.b	#1,2(a0)
0001CAF2 6A00                       		bpl.s	locret_1B566
0001CAF4 117C 0007 0002             		move.b	#7,2(a0)
0001CAFA 7000                       		moveq	#0,d0
0001CAFC 1028 0003                  		move.b	3(a0),d0
0001CB00 5228 0003                  		addq.b	#1,3(a0)
0001CB04 2268 0004                  		movea.l	4(a0),a1
0001CB08 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CB0C 6600                       		bne.s	loc_1B564
0001CB0E 4290                       		clr.l	(a0)
0001CB10 42A8 0004                  		clr.l	4(a0)
0001CB14 12BC 0025                  		move.b	#$25,(a1)
0001CB18 4E75                       		rts	
0001CB1A                            ; ===========================================================================
0001CB1A                            
0001CB1A                            loc_1B564:
0001CB1A 1280                       		move.b	d0,(a1)
0001CB1C                            
0001CB1C                            locret_1B566:
0001CB1C 4E75                       		rts	
0001CB1E                            ; ===========================================================================
0001CB1E 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CB24                            ; ===========================================================================
0001CB24                            
0001CB24                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CB24 5328 0002                  		subq.b	#1,2(a0)
0001CB28 6A00                       		bpl.s	locret_1B596
0001CB2A 117C 0005 0002             		move.b	#5,2(a0)
0001CB30 7000                       		moveq	#0,d0
0001CB32 1028 0003                  		move.b	3(a0),d0
0001CB36 5228 0003                  		addq.b	#1,3(a0)
0001CB3A 2268 0004                  		movea.l	4(a0),a1
0001CB3E 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CB42 1280                       		move.b	d0,(a1)
0001CB44 6600                       		bne.s	locret_1B596
0001CB46 4290                       		clr.l	(a0)
0001CB48 42A8 0004                  		clr.l	4(a0)
0001CB4C                            
0001CB4C                            locret_1B596:
0001CB4C 4E75                       		rts	
0001CB4E                            ; ===========================================================================
0001CB4E 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CB54                            ; ===========================================================================
0001CB54                            
0001CB54                            SS_AniReverse:				; XREF: SS_AniIndex
0001CB54 5328 0002                  		subq.b	#1,2(a0)
0001CB58 6A00                       		bpl.s	locret_1B5CC
0001CB5A 117C 0007 0002             		move.b	#7,2(a0)
0001CB60 7000                       		moveq	#0,d0
0001CB62 1028 0003                  		move.b	3(a0),d0
0001CB66 5228 0003                  		addq.b	#1,3(a0)
0001CB6A 2268 0004                  		movea.l	4(a0),a1
0001CB6E 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CB72 6600                       		bne.s	loc_1B5CA
0001CB74 4290                       		clr.l	(a0)
0001CB76 42A8 0004                  		clr.l	4(a0)
0001CB7A 12BC 002B                  		move.b	#$2B,(a1)
0001CB7E 4E75                       		rts	
0001CB80                            ; ===========================================================================
0001CB80                            
0001CB80                            loc_1B5CA:
0001CB80 1280                       		move.b	d0,(a1)
0001CB82                            
0001CB82                            locret_1B5CC:
0001CB82 4E75                       		rts	
0001CB84                            ; ===========================================================================
0001CB84 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CB8A                            ; ===========================================================================
0001CB8A                            
0001CB8A                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CB8A 5328 0002                  		subq.b	#1,2(a0)
0001CB8E 6A00                       		bpl.s	locret_1B60C
0001CB90 117C 0005 0002             		move.b	#5,2(a0)
0001CB96 7000                       		moveq	#0,d0
0001CB98 1028 0003                  		move.b	3(a0),d0
0001CB9C 5228 0003                  		addq.b	#1,3(a0)
0001CBA0 2268 0004                  		movea.l	4(a0),a1
0001CBA4 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CBA8 1280                       		move.b	d0,(a1)
0001CBAA 6600                       		bne.s	locret_1B60C
0001CBAC 4290                       		clr.l	(a0)
0001CBAE 42A8 0004                  		clr.l	4(a0)
0001CBB2 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CBB8 303C 00A8                  		move.w	#$A8,d0
0001CBBC 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CBC2                            
0001CBC2                            locret_1B60C:
0001CBC2 4E75                       		rts	
0001CBC4                            ; ===========================================================================
0001CBC4 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CBCA                            ; ===========================================================================
0001CBCA                            
0001CBCA                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CBCA 5328 0002                  		subq.b	#1,2(a0)
0001CBCE 6A00                       		bpl.s	locret_1B640
0001CBD0 117C 0001 0002             		move.b	#1,2(a0)
0001CBD6 7000                       		moveq	#0,d0
0001CBD8 1028 0003                  		move.b	3(a0),d0
0001CBDC 5228 0003                  		addq.b	#1,3(a0)
0001CBE0 2268 0004                  		movea.l	4(a0),a1
0001CBE4 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CBE8 1280                       		move.b	d0,(a1)
0001CBEA 6600                       		bne.s	locret_1B640
0001CBEC 12A8 0004                  		move.b	4(a0),(a1)
0001CBF0 4290                       		clr.l	(a0)
0001CBF2 42A8 0004                  		clr.l	4(a0)
0001CBF6                            
0001CBF6                            locret_1B640:
0001CBF6 4E75                       		rts	
0001CBF8                            ; ===========================================================================
0001CBF8 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CC02                            ; ---------------------------------------------------------------------------
0001CC02                            ; Special stage	layout pointers
0001CC02                            ; ---------------------------------------------------------------------------
0001CC02                            SS_LayoutIndex:
0001CC02                            	include "_inc\Special stage layout pointers.asm"
0001CC02                            ; ---------------------------------------------------------------------------
0001CC02                            ; Special stage	layout pointers
0001CC02                            ; ---------------------------------------------------------------------------
0001CC02 0000 0000                  	dc.l SS_1
0001CC06 0000 0000                  	dc.l SS_2
0001CC0A 0000 0000                  	dc.l SS_3
0001CC0E 0000 0000                  	dc.l SS_4
0001CC12 0000 0000                  	dc.l SS_5
0001CC16 0000 0000                  	dc.l SS_6
0001CC1A                            	even
0001CC1A                            	even
0001CC1A                            
0001CC1A                            ; ---------------------------------------------------------------------------
0001CC1A                            ; Special stage	start locations
0001CC1A                            ; ---------------------------------------------------------------------------
0001CC1A                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001CC32                            		even
0001CC32                            
0001CC32                            ; ---------------------------------------------------------------------------
0001CC32                            ; Subroutine to	load special stage layout
0001CC32                            ; ---------------------------------------------------------------------------
0001CC32                            
0001CC32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC32                            
0001CC32                            
0001CC32                            SS_Load:				; XREF: SpecialStage
0001CC32 7000                       		moveq	#0,d0
0001CC34 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001CC38 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001CC3C 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001CC42 6500                       		bcs.s	SS_ChkEmldNum
0001CC44 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001CC4A                            
0001CC4A                            SS_ChkEmldNum:
0001CC4A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001CC50 6700                       		beq.s	SS_LoadData	; if yes, branch
0001CC52 7200                       		moveq	#0,d1
0001CC54 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001CC58 5301                       		subq.b	#1,d1
0001CC5A 6500                       		bcs.s	SS_LoadData
0001CC5C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001CC60                            
0001CC60                            SS_ChkEmldLoop:	
0001CC60 B033 1000                  		cmp.b	(a3,d1.w),d0
0001CC64 6600                       		bne.s	SS_ChkEmldRepeat
0001CC66 60CA                       		bra.s	SS_Load
0001CC68                            ; ===========================================================================
0001CC68                            
0001CC68                            SS_ChkEmldRepeat:
0001CC68 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001CC6C                            
0001CC6C                            SS_LoadData:
0001CC6C E548                       		lsl.w	#2,d0
0001CC6E 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001CC72 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001CC76 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001CC7A 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001CC7E 43F9 00FF 4000             		lea	($FF4000).l,a1
0001CC84 303C 0000                  		move.w	#0,d0
0001CC88 4EB9 0000 2098             		jsr	(EniDec).l
0001CC8E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC94 303C 0FFF                  		move.w	#$FFF,d0
0001CC98                            
0001CC98                            SS_ClrRAM3:
0001CC98 4299                       		clr.l	(a1)+
0001CC9A 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001CC9E                            
0001CC9E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CCA4 41F9 00FF 4000             		lea	($FF4000).l,a0
0001CCAA 723F                       		moveq	#$3F,d1
0001CCAC                            
0001CCAC                            loc_1B6F6:
0001CCAC 743F                       		moveq	#$3F,d2
0001CCAE                            
0001CCAE                            loc_1B6F8:
0001CCAE 12D8                       		move.b	(a0)+,(a1)+
0001CCB0 51CA FFFC                  		dbf	d2,loc_1B6F8
0001CCB4                            
0001CCB4 43E9 0040                  		lea	$40(a1),a1
0001CCB8 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001CCBC                            
0001CCBC 43F9 00FF 4008             		lea	($FF4008).l,a1
0001CCC2 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001CCC8 724D                       		moveq	#$4D,d1
0001CCCA                            
0001CCCA                            loc_1B714:
0001CCCA 22D8                       		move.l	(a0)+,(a1)+
0001CCCC 32FC 0000                  		move.w	#0,(a1)+
0001CCD0 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001CCD6 32D8                       		move.w	(a0)+,(a1)+
0001CCD8 51C9 FFF0                  		dbf	d1,loc_1B714
0001CCDC                            
0001CCDC 43F9 00FF 4400             		lea	($FF4400).l,a1
0001CCE2 323C 003F                  		move.w	#$3F,d1
0001CCE6                            
0001CCE6                            loc_1B730:
0001CCE6                            
0001CCE6 4299                       		clr.l	(a1)+
0001CCE8 51C9 FFFC                  		dbf	d1,loc_1B730
0001CCEC                            
0001CCEC 4E75                       		rts	
0001CCEE                            ; End of function SS_Load
0001CCEE                            
0001CCEE                            ; ===========================================================================
0001CCEE                            ; ---------------------------------------------------------------------------
0001CCEE                            ; Special stage	mappings and VRAM pointers
0001CCEE                            ; ---------------------------------------------------------------------------
0001CCEE                            SS_MapIndex:
0001CCEE                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001CCEE                            ; ---------------------------------------------------------------------------
0001CCEE                            ; Special stage	mappings and VRAM pointers
0001CCEE                            ; ---------------------------------------------------------------------------
0001CCEE 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001CCF2 0142                       	dc.w $142		; VRAM setting
0001CCF4 0000 0000                  	dc.l Map_SSWalls
0001CCF8 0142                       	dc.w $142
0001CCFA 0000 0000                  	dc.l Map_SSWalls
0001CCFE 0142                       	dc.w $142
0001CD00 0000 0000                  	dc.l Map_SSWalls
0001CD04 0142                       	dc.w $142
0001CD06 0000 0000                  	dc.l Map_SSWalls
0001CD0A 0142                       	dc.w $142
0001CD0C 0000 0000                  	dc.l Map_SSWalls
0001CD10 0142                       	dc.w $142
0001CD12 0000 0000                  	dc.l Map_SSWalls
0001CD16 0142                       	dc.w $142
0001CD18 0000 0000                  	dc.l Map_SSWalls
0001CD1C 0142                       	dc.w $142
0001CD1E 0000 0000                  	dc.l Map_SSWalls
0001CD22 0142                       	dc.w $142
0001CD24 0000 0000                  	dc.l Map_SSWalls
0001CD28 2142                       	dc.w $2142
0001CD2A 0000 0000                  	dc.l Map_SSWalls
0001CD2E 2142                       	dc.w $2142
0001CD30 0000 0000                  	dc.l Map_SSWalls
0001CD34 2142                       	dc.w $2142
0001CD36 0000 0000                  	dc.l Map_SSWalls
0001CD3A 2142                       	dc.w $2142
0001CD3C 0000 0000                  	dc.l Map_SSWalls
0001CD40 2142                       	dc.w $2142
0001CD42 0000 0000                  	dc.l Map_SSWalls
0001CD46 2142                       	dc.w $2142
0001CD48 0000 0000                  	dc.l Map_SSWalls
0001CD4C 2142                       	dc.w $2142
0001CD4E 0000 0000                  	dc.l Map_SSWalls
0001CD52 2142                       	dc.w $2142
0001CD54 0000 0000                  	dc.l Map_SSWalls
0001CD58 2142                       	dc.w $2142
0001CD5A 0000 0000                  	dc.l Map_SSWalls
0001CD5E 4142                       	dc.w $4142
0001CD60 0000 0000                  	dc.l Map_SSWalls
0001CD64 4142                       	dc.w $4142
0001CD66 0000 0000                  	dc.l Map_SSWalls
0001CD6A 4142                       	dc.w $4142
0001CD6C 0000 0000                  	dc.l Map_SSWalls
0001CD70 4142                       	dc.w $4142
0001CD72 0000 0000                  	dc.l Map_SSWalls
0001CD76 4142                       	dc.w $4142
0001CD78 0000 0000                  	dc.l Map_SSWalls
0001CD7C 4142                       	dc.w $4142
0001CD7E 0000 0000                  	dc.l Map_SSWalls
0001CD82 4142                       	dc.w $4142
0001CD84 0000 0000                  	dc.l Map_SSWalls
0001CD88 4142                       	dc.w $4142
0001CD8A 0000 0000                  	dc.l Map_SSWalls
0001CD8E 4142                       	dc.w $4142
0001CD90 0000 0000                  	dc.l Map_SSWalls
0001CD94 6142                       	dc.w $6142
0001CD96 0000 0000                  	dc.l Map_SSWalls
0001CD9A 6142                       	dc.w $6142
0001CD9C 0000 0000                  	dc.l Map_SSWalls
0001CDA0 6142                       	dc.w $6142
0001CDA2 0000 0000                  	dc.l Map_SSWalls
0001CDA6 6142                       	dc.w $6142
0001CDA8 0000 0000                  	dc.l Map_SSWalls
0001CDAC 6142                       	dc.w $6142
0001CDAE 0000 0000                  	dc.l Map_SSWalls
0001CDB2 6142                       	dc.w $6142
0001CDB4 0000 0000                  	dc.l Map_SSWalls
0001CDB8 6142                       	dc.w $6142
0001CDBA 0000 0000                  	dc.l Map_SSWalls
0001CDBE 6142                       	dc.w $6142
0001CDC0 0000 0000                  	dc.l Map_SSWalls
0001CDC4 6142                       	dc.w $6142
0001CDC6 0000 FCD8                  	dc.l Map_obj47
0001CDCA 023B                       	dc.w $23B
0001CDCC 0000 0000                  	dc.l Map_SS_R
0001CDD0 0570                       	dc.w $570
0001CDD2 0000 0000                  	dc.l Map_SS_R
0001CDD6 0251                       	dc.w $251
0001CDD8 0000 0000                  	dc.l Map_SS_R
0001CDDC 0370                       	dc.w $370
0001CDDE 0000 0000                  	dc.l Map_SS_Up
0001CDE2 0263                       	dc.w $263
0001CDE4 0000 0000                  	dc.l Map_SS_Down
0001CDE8 0263                       	dc.w $263
0001CDEA 0000 0000                  	dc.l Map_SS_R
0001CDEE 22F0                       	dc.w $22F0
0001CDF0 0000 0000                  	dc.l Map_SS_Glass
0001CDF4 0470                       	dc.w $470
0001CDF6 0000 0000                  	dc.l Map_SS_Glass
0001CDFA 05F0                       	dc.w $5F0
0001CDFC 0000 0000                  	dc.l Map_SS_Glass
0001CE00 65F0                       	dc.w $65F0
0001CE02 0000 0000                  	dc.l Map_SS_Glass
0001CE06 25F0                       	dc.w $25F0
0001CE08 0000 0000                  	dc.l Map_SS_Glass
0001CE0C 45F0                       	dc.w $45F0
0001CE0E 0000 0000                  	dc.l Map_SS_R
0001CE12 02F0                       	dc.w $2F0
0001CE14 0100 FCD8                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001CE18 023B                       	dc.w $23B
0001CE1A 0200 FCD8                  	dc.l Map_obj47+$2000000
0001CE1E 023B                       	dc.w $23B
0001CE20 0000 0000                  	dc.l Map_SS_R
0001CE24 0797                       	dc.w $797
0001CE26 0000 0000                  	dc.l Map_SS_R
0001CE2A 07A0                       	dc.w $7A0
0001CE2C 0000 0000                  	dc.l Map_SS_R
0001CE30 07A9                       	dc.w $7A9
0001CE32 0000 0000                  	dc.l Map_SS_R
0001CE36 0797                       	dc.w $797
0001CE38 0000 0000                  	dc.l Map_SS_R
0001CE3C 07A0                       	dc.w $7A0
0001CE3E 0000 0000                  	dc.l Map_SS_R
0001CE42 07A9                       	dc.w $7A9
0001CE44 0000 AFD0                  	dc.l Map_obj25
0001CE48 27B2                       	dc.w $27B2
0001CE4A 0000 0000                  	dc.l Map_SS_Chaos3
0001CE4E 0770                       	dc.w $770
0001CE50 0000 0000                  	dc.l Map_SS_Chaos3
0001CE54 2770                       	dc.w $2770
0001CE56 0000 0000                  	dc.l Map_SS_Chaos3
0001CE5A 4770                       	dc.w $4770
0001CE5C 0000 0000                  	dc.l Map_SS_Chaos3
0001CE60 6770                       	dc.w $6770
0001CE62 0000 0000                  	dc.l Map_SS_Chaos1
0001CE66 0770                       	dc.w $770
0001CE68 0000 0000                  	dc.l Map_SS_Chaos2
0001CE6C 0770                       	dc.w $770
0001CE6E 0000 0000                  	dc.l Map_SS_R
0001CE72 04F0                       	dc.w $4F0
0001CE74 0400 AFD0                  	dc.l Map_obj25+$4000000
0001CE78 27B2                       	dc.w $27B2
0001CE7A 0500 AFD0                  	dc.l Map_obj25+$5000000
0001CE7E 27B2                       	dc.w $27B2
0001CE80 0600 AFD0                  	dc.l Map_obj25+$6000000
0001CE84 27B2                       	dc.w $27B2
0001CE86 0700 AFD0                  	dc.l Map_obj25+$7000000
0001CE8A 27B2                       	dc.w $27B2
0001CE8C 0000 0000                  	dc.l Map_SS_Glass
0001CE90 23F0                       	dc.w $23F0
0001CE92 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001CE96 23F0                       	dc.w $23F0
0001CE98 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001CE9C 23F0                       	dc.w $23F0
0001CE9E 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001CEA2 23F0                       	dc.w $23F0
0001CEA4 0000 0000                  	dc.l Map_SS_R+$2000000
0001CEA8 04F0                       	dc.w $4F0
0001CEAA 0000 0000                  	dc.l Map_SS_Glass
0001CEAE 05F0                       	dc.w $5F0
0001CEB0 0000 0000                  	dc.l Map_SS_Glass
0001CEB4 65F0                       	dc.w $65F0
0001CEB6 0000 0000                  	dc.l Map_SS_Glass
0001CEBA 25F0                       	dc.w $25F0
0001CEBC 0000 0000                  	dc.l Map_SS_Glass
0001CEC0 45F0                       	dc.w $45F0
0001CEC0 45F0                       	dc.w $45F0
0001CEC2                            
0001CEC2                            ; ---------------------------------------------------------------------------
0001CEC2                            ; Sprite mappings - special stage "R" block
0001CEC2                            ; ---------------------------------------------------------------------------
0001CEC2                            Map_SS_R:
0001CEC2                            	include "_maps\SSRblock.asm"
0001CEC2                            ; ---------------------------------------------------------------------------
0001CEC2                            ; Sprite mappings - special stage "R" block
0001CEC2                            ; ---------------------------------------------------------------------------
0001CEC2 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001CEC6 0000                       		dc.w byte_1B91E-Map_SS_R
0001CEC8 01                         byte_1B912:	dc.b 1
0001CEC9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CECE 01                         byte_1B918:	dc.b 1
0001CECF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CED4 00                         byte_1B91E:	dc.b 0
0001CED6 00                         		even
0001CED6 00                         		even
0001CED6                            
0001CED6                            ; ---------------------------------------------------------------------------
0001CED6                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CED6                            ; ---------------------------------------------------------------------------
0001CED6                            Map_SS_Glass:
0001CED6                            	include "_maps\SSglassblock.asm"
0001CED6                            ; ---------------------------------------------------------------------------
0001CED6                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CED6                            ; ---------------------------------------------------------------------------
0001CED6 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001CEDA 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001CEDE 01                         byte_1B928:	dc.b 1
0001CEDF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CEE4 01                         byte_1B92E:	dc.b 1
0001CEE5 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001CEEA 01                         byte_1B934:	dc.b 1
0001CEEB F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001CEF0 01                         byte_1B93A:	dc.b 1
0001CEF1 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001CEF6                            		even
0001CEF6                            		even
0001CEF6                            
0001CEF6                            ; ---------------------------------------------------------------------------
0001CEF6                            ; Sprite mappings - special stage "UP" block
0001CEF6                            ; ---------------------------------------------------------------------------
0001CEF6                            Map_SS_Up:
0001CEF6                            	include "_maps\SSUPblock.asm"
0001CEF6                            ; ---------------------------------------------------------------------------
0001CEF6                            ; Sprite mappings - special stage "UP" block
0001CEF6                            ; ---------------------------------------------------------------------------
0001CEF6 0000                       		dc.w byte_1B944-Map_SS_Up
0001CEF8 0000                       		dc.w byte_1B94A-Map_SS_Up
0001CEFA 01                         byte_1B944:	dc.b 1
0001CEFB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CF00 01                         byte_1B94A:	dc.b 1
0001CF01 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CF06                            		even
0001CF06                            		even
0001CF06                            
0001CF06                            ; ---------------------------------------------------------------------------
0001CF06                            ; Sprite mappings - special stage "DOWN" block
0001CF06                            ; ---------------------------------------------------------------------------
0001CF06                            Map_SS_Down:
0001CF06                            	include "_maps\SSDOWNblock.asm"
0001CF06                            ; ---------------------------------------------------------------------------
0001CF06                            ; Sprite mappings - special stage "DOWN" block
0001CF06                            ; ---------------------------------------------------------------------------
0001CF06 0000                       		dc.w byte_1B954-Map_SS_Down
0001CF08 0000                       		dc.w byte_1B95A-Map_SS_Down
0001CF0A 01                         byte_1B954:	dc.b 1
0001CF0B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CF10 01                         byte_1B95A:	dc.b 1
0001CF11 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CF16                            		even
0001CF16                            		even
0001CF16                            
0001CF16                            ; ---------------------------------------------------------------------------
0001CF16                            ; Sprite mappings - special stage chaos	emeralds
0001CF16                            ; ---------------------------------------------------------------------------
0001CF16 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001CF18 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001CF1A 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001CF1C 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001CF1E 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001CF20 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001CF22 01                         byte_1B96C:	dc.b 1
0001CF23 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001CF28 01                         byte_1B972:	dc.b 1
0001CF29 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001CF2E 01                         byte_1B978:	dc.b 1
0001CF2F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001CF34 01                         byte_1B97E:	dc.b 1
0001CF35 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001CF3A                            		even
0001CF3A                            ; ===========================================================================
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            ; Object 09 - Sonic (special stage)
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            
0001CF3A                            Obj09:					; XREF: Obj_Index
0001CF3A                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001CF3A                            ;		beq.s	Obj09_Normal	; if not, branch
0001CF3A 6100 0000                  		bsr.w	SS_FixCamera
0001CF3E                            ;		bra.w	DebugMode
0001CF3E                            ; ===========================================================================
0001CF3E                            
0001CF3E                            Obj09_Normal:
0001CF3E 7000                       		moveq	#0,d0
0001CF40 1028 0024                  		move.b	$24(a0),d0
0001CF44 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001CF48 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001CF4C                            ; ===========================================================================
0001CF4C 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001CF4E 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001CF50 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001CF52 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001CF54                            ; ===========================================================================
0001CF54                            
0001CF54                            Obj09_Main:				; XREF: Obj09_Index
0001CF54 5428 0024                  		addq.b	#2,$24(a0)
0001CF58 117C 000E 0016             		move.b	#$E,$16(a0)
0001CF5E 117C 0007 0017             		move.b	#7,$17(a0)
0001CF64 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001CF6C 317C 0780 0002             		move.w	#$780,2(a0)
0001CF72 117C 0004 0001             		move.b	#4,1(a0)
0001CF78 117C 0000 0018             		move.b	#0,$18(a0)
0001CF7E 117C 0002 001C             		move.b	#2,$1C(a0)
0001CF84 08E8 0002 0022             		bset	#2,$22(a0)
0001CF8A 08E8 0001 0022             		bset	#1,$22(a0)
0001CF90                            
0001CF90                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001CF90                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001CF90                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CF90                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001CF90                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CF90                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001CF90                            
0001CF90                            Obj09_NoDebug:
0001CF90 117C 0000 0030             		move.b	#0,$30(a0)
0001CF96 7000                       		moveq	#0,d0
0001CF98 1028 0022                  		move.b	$22(a0),d0
0001CF9C 0240 0002                  		andi.w	#2,d0
0001CFA0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001CFA4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001CFA8 4EB9 0001 4EF4             		jsr	LoadSonicDynPLC
0001CFAE 4EF9 0000 E7E4             		jmp	DisplaySprite
0001CFB4                            ; ===========================================================================
0001CFB4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001CFB6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001CFB8                            ; ===========================================================================
0001CFB8                            
0001CFB8                            Obj09_OnWall:				; XREF: Obj09_Modes
0001CFB8 6100 0000                  		bsr.w	Obj09_Rise
0001CFBC 6100 0000                  		bsr.w	Obj09_Move
0001CFC0 6100 0000                  		bsr.w	Obj09_Fall
0001CFC4 6000                       		bra.s	Obj09_Display
0001CFC6                            ; ===========================================================================
0001CFC6                            
0001CFC6                            Obj09_InAir:				; XREF: Obj09_Modes
0001CFC6 6100 0000                  		bsr.w	Obj09_Rise
0001CFCA 6100 0000                  		bsr.w	Obj09_Move
0001CFCE 6100 0000                  		bsr.w	Obj09_Fall
0001CFD2                            
0001CFD2                            Obj09_Display:				; XREF: Obj09_OnWall
0001CFD2 6100 0000                  		bsr.w	Obj09_ChkItems
0001CFD6 6100 0000                  		bsr.w	Obj09_ChkItems2
0001CFDA 4EB9 0000 E7BE             		jsr	SpeedToPos
0001CFE0 6100 0000                  		bsr.w	SS_FixCamera
0001CFE4 3038 F780                  		move.w	($FFFFF780).w,d0
0001CFE8 D078 F782                  		add.w	($FFFFF782).w,d0
0001CFEC 31C0 F780                  		move.w	d0,($FFFFF780).w
0001CFF0 4EB9 0001 4C4E             		jsr	Sonic_Animate
0001CFF6 4E75                       		rts	
0001CFF8                            
0001CFF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF8                            
0001CFF8                            
0001CFF8                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001CFF8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CFFE 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D000 4A78 F784                          tst.w   ($FFFFF784).w
0001D004 6600                               bne.s   @corereverse1
0001D006 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D00A 6000                               bra.s   Obj09_ChkRight          
0001D00C                            
0001D00C                            @corereverse1:
0001D00C 6100 0000                          bsr.w	Obj09_MoveRight
0001D010                            
0001D010                            Obj09_ChkRight:
0001D010 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D016 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001D018 4A78 F784                          tst.w   ($FFFFF784).w
0001D01C 6600                               bne.s   @corereverse2
0001D01E 6100 0000                  		bsr.w	Obj09_MoveRight
0001D022 6000                               bra.s   Obj09_MoveSpeed 
0001D024                            
0001D024                            @corereverse2:
0001D024 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001D028                            
0001D028                            Obj09_MoveSpeed:
0001D028 1038 F602                  		move.b	($FFFFF602).w,d0
0001D02C 0200 000C                  		andi.b	#$C,d0
0001D030 6600                       		bne.s	Obj09_MoveCollision
0001D032 3028 0010                  		move.w	$10(a0),d0
0001D036 6700                       		beq.s	Obj09_MoveCollision
0001D038 317C 0000 0010             		move.w	#0,$10(a0)
0001D03E                            
0001D03E                            Obj09_MoveCollision:
0001D03E 1038 F780                  		move.b	($FFFFF780).w,d0
0001D042 0600 0020                  		addi.b	#$20,d0
0001D046 0200 00C0                  		andi.b	#$C0,d0
0001D04A 4400                       		neg.b	d0
0001D04C 4EB9 0000 34B8             		jsr	(CalcSine).l
0001D052 C3E8 0010                  		muls.w	$10(a0),d1
0001D056 D3A8 0008                  		add.l	d1,8(a0)
0001D05A C1E8 0012                  		muls.w	$12(a0),d0
0001D05E D1A8 000C                  		add.l	d0,$C(a0)
0001D062 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D066 2428 000C                  		move.l	$C(a0),d2
0001D06A 2628 0008                  		move.l	8(a0),d3
0001D06E 6100 0000                  		bsr.w	sub_1BCE8
0001D072 6700                       		beq.s	loc_1BAF2
0001D074 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D078 93A8 0008                  		sub.l	d1,8(a0)
0001D07C 91A8 000C                  		sub.l	d0,$C(a0)
0001D080 317C 0000 0010             		move.w	#0,$10(a0)
0001D086 4E75                       		rts	
0001D088                            ; ===========================================================================
0001D088                            
0001D088                            loc_1BAF2:
0001D088 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D08C 4E75                       		rts	
0001D08E                            ; End of function Obj09_Move
0001D08E                            
0001D08E                            
0001D08E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D08E                            
0001D08E                            
0001D08E                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D08E 08E8 0000 0022             		bset	#0,$22(a0)
0001D094 4240                               clr.w   d0
0001D096 3038 F786                          move.w  ($FFFFF786).w,d0
0001D09A D040                               add.w   d0,d0
0001D09C 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D0A2 4468 0010                          neg.w   $10(a0)
0001D0A6 4E75                               rts
0001D0A8                            
0001D0A8                            ; End of function Obj09_MoveLeft
0001D0A8                            
0001D0A8                            
0001D0A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0A8                            
0001D0A8                            
0001D0A8                            Obj09_MoveRight:
0001D0A8 08A8 0000 0022             		bclr	#0,$22(a0)
0001D0AE 4240                               clr.w   d0
0001D0B0 3038 F786                          move.w  ($FFFFF786).w,d0
0001D0B4 D040                               add.w   d0,d0
0001D0B6 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D0BC 4E75                       		rts
0001D0BE                            
0001D0BE                            ; End of function Obj09_MoveRight
0001D0BE                            
0001D0BE                            ; ---------------------------------------------------------------------------
0001D0BE                            
0001D0BE                            SS_XSpdIndex:
0001D0BE 0032                       		dc.w 50
0001D0C0 0064                       		dc.w 100
0001D0C2 0096                       		dc.w 150
0001D0C4 00C8                       		dc.w 200
0001D0C6 00FA                       		dc.w 250
0001D0C8                            
0001D0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0C8                            
0001D0C8                            
0001D0C8                            Obj09_Rise:				; XREF: Obj09_OnWall
0001D0C8 0838 0000 F602             		btst	#0,($FFFFF602).w
0001D0CE 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001D0D0 4A78 F784                          tst.w   ($FFFFF784).w
0001D0D4 6600 0000                          bne.w   @corereverse1
0001D0D8 6100 0000                  		bsr.w	Obj09_MoveUp
0001D0DC 6000                               bra.s   Obj09_NoRise
0001D0DE                            
0001D0DE                            @corereverse1:
0001D0DE 6100 0000                  		bsr.w	Obj09_Falling 
0001D0E2                                    
0001D0E2                            Obj09_NoRise:
0001D0E2 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001D0E8 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001D0EA 4A78 F784                          tst.w   ($FFFFF784).w
0001D0EE 6600 0000                          bne.w   @corereverse2
0001D0F2 6100 0000                  		bsr.w	Obj09_Falling			;	
0001D0F6 6000                               bra.s   Obj09_MoveYSpeed
0001D0F8                            
0001D0F8                            @corereverse2:
0001D0F8 6100 0000                  		bsr.w	Obj09_MoveUp
0001D0FC                            		
0001D0FC                            Obj09_MoveYSpeed:
0001D0FC 1038 F602                  		move.b	($FFFFF602).w,d0
0001D100 0200 0003                  		andi.b	#3,d0
0001D104 6600                       		bne.s	Obj09_MoveYCollision
0001D106 3028 0012                  		move.w	$12(a0),d0
0001D10A 6700                       		beq.s	Obj09_MoveYCollision
0001D10C 317C 0000 0012             		move.w	#0,$12(a0)
0001D112                            
0001D112                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001D112 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001D116 0600 0020                  		addi.b	#$20,d0					;	?
0001D11A 0200 00C0                  		andi.b	#$C0,d0					;	
0001D11E 4400                       		neg.b	d0						;	?
0001D120 4EB9 0000 34B8             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001D126 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001D12A D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001D12E C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001D132 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001D136 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001D13A 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001D13E 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001D142 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001D146 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001D14A 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001D14E 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001D152 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001D156 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001D15C 4E75                       		rts								;	end routine
0001D15E                            
0001D15E                            Obj09_MoveUp:
0001D15E 4240                               clr.w   d0
0001D160 3038 F786                          move.w  ($FFFFF786).w,d0
0001D164 D040                               add.w   d0,d0
0001D166 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D16C 4468 0012                          neg.w   $12(a0)
0001D170 4E75                               rts
0001D172                            
0001D172                            Obj09_Falling:
0001D172 4240                               clr.w   d0
0001D174 3038 F786                          move.w  ($FFFFF786).w,d0
0001D178 D040                               add.w   d0,d0
0001D17A 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D180 4E75                       		rts
0001D182                            ; End of function Obj09_Jump
0001D182                            
0001D182                            ; ---------------------------------------------------------------------------
0001D182                            SS_YSpdIndex:
0001D182 0080                       		dc.w $80
0001D184 0100                       		dc.w $100
0001D186 0180                       		dc.w $180
0001D188 0200                       		dc.w $200
0001D18A 0280                       		dc.w $280
0001D18C                            
0001D18C                            
0001D18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D18C                            
0001D18C                            
0001D18C                            nullsub_2:				; XREF: Obj09_InAir
0001D18C 4E75                       		rts	
0001D18E                            ; End of function nullsub_2
0001D18E                            
0001D18E                            ; ===========================================================================
0001D18E                            ; ---------------------------------------------------------------------------
0001D18E                            ; unused subroutine to limit Sonic's upward vertical speed
0001D18E                            ; ---------------------------------------------------------------------------
0001D18E 323C FC00                  		move.w	#-$400,d1
0001D192 B268 0012                  		cmp.w	$12(a0),d1
0001D196 6F00                       		ble.s	locret_1BBB4
0001D198 1038 F602                  		move.b	($FFFFF602).w,d0
0001D19C 0200 0070                  		andi.b	#$70,d0
0001D1A0 6600                       		bne.s	locret_1BBB4
0001D1A2 3141 0012                  		move.w	d1,$12(a0)
0001D1A6                            
0001D1A6                            locret_1BBB4:
0001D1A6 4E75                       		rts	
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            
0001D1A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A8                            
0001D1A8                            
0001D1A8                            SS_FixCamera:				; XREF: Obj09
0001D1A8 3428 000C                  		move.w	$C(a0),d2
0001D1AC 3628 0008                  		move.w	8(a0),d3
0001D1B0 3038 F700                  		move.w	($FFFFF700).w,d0
0001D1B4 0443 00A0                  		subi.w	#$A0,d3
0001D1B8 6500                       		bcs.s	loc_1BBCE
0001D1BA 9043                       		sub.w	d3,d0
0001D1BC 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D1C0                            
0001D1C0                            loc_1BBCE:
0001D1C0 3038 F704                  		move.w	($FFFFF704).w,d0
0001D1C4 0442 0070                  		subi.w	#$70,d2
0001D1C8 6500                       		bcs.s	locret_1BBDE
0001D1CA 9042                       		sub.w	d2,d0
0001D1CC 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D1D0                            
0001D1D0                            locret_1BBDE:
0001D1D0 4E75                       		rts	
0001D1D2                            ; End of function SS_FixCamera
0001D1D2                            
0001D1D2                            ; ===========================================================================
0001D1D2                            
0001D1D2                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D1D2 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D1D8 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D1DE 6600                       		bne.s	loc_1BBF4
0001D1E0 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D1E6                            
0001D1E6                            loc_1BBF4:
0001D1E6 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D1EC 6D00                       		blt.s	loc_1BC12
0001D1EE 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D1F4                            ;		move.w	#$4000,($FFFFF780).w
0001D1F4 5428 0024                  		addq.b	#2,$24(a0)
0001D1F8 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D1FE                            
0001D1FE                            loc_1BC12:
0001D1FE                            ;		move.w	($FFFFF780).w,d0
0001D1FE                            ;		add.w	($FFFFF782).w,d0
0001D1FE                            ;		move.w	d0,($FFFFF780).w
0001D1FE 4EB9 0001 4C4E             		jsr	Sonic_Animate
0001D204 4EB9 0001 4EF4             		jsr	LoadSonicDynPLC
0001D20A 6100 FF9C                  		bsr.w	SS_FixCamera
0001D20E 4EF9 0000 E7E4             		jmp	DisplaySprite
0001D214                            ; ===========================================================================
0001D214                            
0001D214                            Obj09_Exit2:				; XREF: Obj09_Index
0001D214 5368 0038                  		subq.w	#1,$38(a0)
0001D218 6600                       		bne.s	loc_1BC40
0001D21A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D220                            
0001D220                            loc_1BC40:
0001D220 4EB9 0001 4C4E             		jsr	Sonic_Animate
0001D226 4EB9 0001 4EF4             		jsr	LoadSonicDynPLC
0001D22C 6100 FF7A                  		bsr.w	SS_FixCamera
0001D230 4EF9 0000 E7E4             		jmp	DisplaySprite
0001D236                            
0001D236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D236                            
0001D236                            
0001D236                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D236 2428 000C                  		move.l	$C(a0),d2
0001D23A 2628 0008                  		move.l	8(a0),d3
0001D23E 1038 F780                  		move.b	($FFFFF780).w,d0
0001D242 0200 00FC                  		andi.b	#$FC,d0
0001D246 4EB9 0000 34B8             		jsr	(CalcSine).l
0001D24C 3828 0010                  		move.w	$10(a0),d4
0001D250 48C4                       		ext.l	d4
0001D252 E184                       		asl.l	#8,d4
0001D254 C1FC 002A                  		muls.w	#$2A,d0
0001D258 D084                       		add.l	d4,d0
0001D25A 3828 0012                  		move.w	$12(a0),d4
0001D25E 48C4                       		ext.l	d4
0001D260 E184                       		asl.l	#8,d4
0001D262 C3FC 002A                  		muls.w	#$2A,d1
0001D266 D284                       		add.l	d4,d1
0001D268 7A00                       		moveq	#0,d5
0001D26A 3A28 0010                  		move.w	$10(a0),d5
0001D26E 6700                       		beq.s	Obj09_NoXFall
0001D270 D680                       		add.l	d0,d3
0001D272 6100 0000                  		bsr.w	sub_1BCE8
0001D276 6700                       		beq.s	loc_1BCB0
0001D278 9680                       		sub.l	d0,d3
0001D27A 7000                       		moveq	#0,d0
0001D27C 3140 0010                  		move.w	d0,$10(a0)
0001D280 08A8 0001 0022             		bclr	#1,$22(a0)
0001D286                            
0001D286                            Obj09_NoXFall
0001D286 7C00                       		moveq	#0,d6
0001D288 3C28 0012                  		move.w	$12(a0),d6
0001D28C 6700                       		beq.s	Obj09_NoYFall
0001D28E D481                       		add.l	d1,d2
0001D290 6100 0000                  		bsr.w	sub_1BCE8
0001D294 6700                       		beq.s	loc_1BCC6
0001D296 9481                       		sub.l	d1,d2
0001D298 7200                       		moveq	#0,d1
0001D29A 3141 0012                  		move.w	d1,$12(a0)
0001D29E 4E75                       		rts	
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            loc_1BCB0:
0001D2A0 7C00                       		moveq	#0,d6
0001D2A2 3C28 0012                  		move.w	$12(a0),d6
0001D2A6 6700                       		beq.s	Obj09_NoYFall
0001D2A8 D481                       		add.l	d1,d2
0001D2AA 6100 0000                  		bsr.w	sub_1BCE8
0001D2AE 6700                       		beq.s	loc_1BCD4
0001D2B0 9481                       		sub.l	d1,d2
0001D2B2 7200                       		moveq	#0,d1
0001D2B4 3141 0012                  		move.w	d1,$12(a0)
0001D2B8 08A8 0001 0022             		bclr	#1,$22(a0)
0001D2BE                            
0001D2BE                            loc_1BCC6:
0001D2BE E080                       		asr.l	#8,d0
0001D2C0 E081                       		asr.l	#8,d1
0001D2C2 3140 0010                  		move.w	d0,$10(a0)
0001D2C6 3141 0012                  		move.w	d1,$12(a0)
0001D2CA 4E75                       		rts	
0001D2CC                            ; ===========================================================================
0001D2CC                            
0001D2CC                            loc_1BCD4:
0001D2CC E080                       		asr.l	#8,d0
0001D2CE E081                       		asr.l	#8,d1
0001D2D0 3140 0010                  		move.w	d0,$10(a0)
0001D2D4 3141 0012                  		move.w	d1,$12(a0)
0001D2D8 08E8 0001 0022             		bset	#1,$22(a0)
0001D2DE 4E75                       		rts	
0001D2E0                            
0001D2E0                            Obj09_NoYFall:
0001D2E0 4E75                       		rts
0001D2E2                            ; End of function Obj09_Fall
0001D2E2                            
0001D2E2                            
0001D2E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2E2                            
0001D2E2                            
0001D2E2                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D2E2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D2E8 7800                       		moveq	#0,d4
0001D2EA 4842                       		swap	d2
0001D2EC 3802                       		move.w	d2,d4
0001D2EE 4842                       		swap	d2
0001D2F0 0644 0044                  		addi.w	#$44,d4
0001D2F4 88FC 0018                  		divu.w	#$18,d4
0001D2F8 C8FC 0080                  		mulu.w	#$80,d4
0001D2FC D3C4                       		adda.l	d4,a1
0001D2FE 7800                       		moveq	#0,d4
0001D300 4843                       		swap	d3
0001D302 3803                       		move.w	d3,d4
0001D304 4843                       		swap	d3
0001D306 0644 0014                  		addi.w	#$14,d4
0001D30A 88FC 0018                  		divu.w	#$18,d4
0001D30E D2C4                       		adda.w	d4,a1
0001D310 7A00                       		moveq	#0,d5
0001D312 1819                       		move.b	(a1)+,d4
0001D314 6100                       		bsr.s	sub_1BD30
0001D316 1819                       		move.b	(a1)+,d4
0001D318 6100                       		bsr.s	sub_1BD30
0001D31A D2FC 007E                  		adda.w	#$7E,a1
0001D31E 1819                       		move.b	(a1)+,d4
0001D320 6100                       		bsr.s	sub_1BD30
0001D322 1819                       		move.b	(a1)+,d4
0001D324 6100                       		bsr.s	sub_1BD30
0001D326 4A05                       		tst.b	d5
0001D328 4E75                       		rts	
0001D32A                            ; End of function sub_1BCE8
0001D32A                            
0001D32A                            
0001D32A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D32A                            
0001D32A                            
0001D32A                            sub_1BD30:				; XREF: sub_1BCE8
0001D32A 6700                       		beq.s	locret_1BD44
0001D32C 0C04 0028                  		cmpi.b	#$28,d4
0001D330 6500                       		blo.s	loc_1BD46
0001D332 0C04 004B                  		cmpi.b	#$4B,d4
0001D336 6400                       		bhs.s	loc_1BD46
0001D338 0C04 003A                  		cmpi.b	#$3A,d4
0001D33C 6400                       		bhs.s	locret_1BD44
0001D33E 0C04 002C                  		cmpi.b	#$2C,d4
0001D342 6400                       		bhs.s	loc_1BD46
0001D344                            
0001D344                            locret_1BD44:
0001D344 4E75                       		rts	
0001D346                            ; ===========================================================================
0001D346                            
0001D346                            loc_1BD46:
0001D346 1144 0030                  		move.b	d4,$30(a0)
0001D34A 2149 0032                  		move.l	a1,$32(a0)
0001D34E 7AFF                       		moveq	#-1,d5
0001D350 4E75                       		rts	
0001D352                            ; End of function sub_1BD30
0001D352                            
0001D352                            
0001D352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D352                            
0001D352                            
0001D352                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D352 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D358 7800                       		moveq	#0,d4
0001D35A 3828 000C                  		move.w	$C(a0),d4
0001D35E 0644 0050                  		addi.w	#$50,d4
0001D362 88FC 0018                  		divu.w	#$18,d4
0001D366 C8FC 0080                  		mulu.w	#$80,d4
0001D36A D3C4                       		adda.l	d4,a1
0001D36C 7800                       		moveq	#0,d4
0001D36E 3828 0008                  		move.w	8(a0),d4
0001D372 0644 0020                  		addi.w	#$20,d4
0001D376 88FC 0018                  		divu.w	#$18,d4
0001D37A D2C4                       		adda.w	d4,a1
0001D37C 1811                       		move.b	(a1),d4
0001D37E 6600                       		bne.s	Obj09_ChkCont
0001D380 4A28 003A                  		tst.b	$3A(a0)
0001D384 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D388 7800                       		moveq	#0,d4
0001D38A 4E75                       		rts	
0001D38C                            ; ===========================================================================
0001D38C                            
0001D38C                            Obj09_ChkCont:
0001D38C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D390 6600                       		bne.s	Obj09_Chk1Up
0001D392 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001D396 6600                       		bne.s	Obj09_GetCont
0001D398 14BC 0001                  		move.b	#1,(a2)
0001D39C 2549 0004                  		move.l	a1,4(a2)
0001D3A0                            
0001D3A0                            Obj09_GetCont:
0001D3A0 4EB9 0000 ACB8             		jsr	CollectRing
0001D3A6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D3AC 6500                       		bcs.s	Obj09_NoCont
0001D3AE 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D3B4 6600                       		bne.s	Obj09_NoCont
0001D3B6 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D3BA 303C 00BF                  		move.w	#$BF,d0
0001D3BE 4EB9 0000 1D10             		jsr	(PlaySound).l	; play extra continue sound
0001D3C4                            
0001D3C4                            Obj09_NoCont:
0001D3C4 7800                       		moveq	#0,d4
0001D3C6 4E75                       		rts	
0001D3C8                            ; ===========================================================================
0001D3C8                            
0001D3C8                            Obj09_Chk1Up:
0001D3C8 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D3CC 6600                       		bne.s	Obj09_ChkEmer
0001D3CE 6100 F6A0                  		bsr.w	SS_RemoveCollectedItem
0001D3D2 6600                       		bne.s	Obj09_Get1Up
0001D3D4 14BC 0003                  		move.b	#3,(a2)
0001D3D8 2549 0004                  		move.l	a1,4(a2)
0001D3DC                            
0001D3DC                            Obj09_Get1Up:
0001D3DC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D3E0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D3E4 303C 0088                  		move.w	#$88,d0
0001D3E8 4EB9 0000 1D10             		jsr	(PlaySound).l	; play extra life music
0001D3EE 7800                       		moveq	#0,d4
0001D3F0 4E75                       		rts	
0001D3F2                            ; ===========================================================================
0001D3F2                            
0001D3F2                            Obj09_ChkEmer:
0001D3F2 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D3F6 6500                       		bcs.s	Obj09_UPblock
0001D3F8 0C04 0040                  		cmpi.b	#$40,d4
0001D3FC 6200                       		bhi.s	Obj09_UPblock
0001D3FE 6100 F670                  		bsr.w	SS_RemoveCollectedItem
0001D402 6600                       		bne.s	Obj09_GetEmer
0001D404 14BC 0005                  		move.b	#5,(a2)
0001D408 2549 0004                  		move.l	a1,4(a2)
0001D40C                            
0001D40C                            Obj09_GetEmer:
0001D40C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D412 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D414 0404 003B                  		subi.b	#$3B,d4
0001D418 7000                       		moveq	#0,d0
0001D41A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D41E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D422 1584 0000                  		move.b	d4,(a2,d0.w)
0001D426 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D42A                            
0001D42A                            Obj09_NoEmer:
0001D42A 303C 0093                  		move.w	#$93,d0
0001D42E 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play emerald music
0001D434 7800                       		moveq	#0,d4
0001D436 4E75                       		rts	
0001D438                            
0001D438                            ; ===========================================================================
0001D438                            
0001D438                            Obj09_UPblock:
0001D438 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001D43C 6600                       		bne.s	Obj09_DOWNblock
0001D43E 6100 F630                  		bsr.w	SS_RemoveCollectedItem
0001D442 6600                       		bne.s	Obj09_SpeedUp
0001D444 14BC 0001                  		move.b	#1,(a2)
0001D448 2549 0004                  		move.l	a1,4(a2)
0001D44C                            
0001D44C                            Obj09_SpeedUp:
0001D44C 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001D452 6400                       		bhs.s	Obj09_UPsnd
0001D454 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001D458                            
0001D458                            Obj09_UPsnd:
0001D458 303C 00A9                  		move.w	#$A9,d0
0001D45C 4EB9 0000 1D16             		jsr	(PlaySound_Special).l	; play up/down sound
0001D462 7800                       		moveq	#0,d4
0001D464 4E75                       		rts	
0001D466                            ; ===========================================================================
0001D466                            
0001D466                            Obj09_DOWNblock:
0001D466 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001D46A 6600                       		bne.s	Obj09_Rblock
0001D46C 6100 F602                  		bsr.w	SS_RemoveCollectedItem
0001D470 6600                       		bne.s	Obj09_SpeedDown
0001D472 14BC 0001                  		move.b	#1,(a2)
0001D476 2549 0004                  		move.l	a1,4(a2)
0001D47A                            
0001D47A                            Obj09_SpeedDown:
0001D47A 4A78 F786                  		tst.w 	($FFFFF786).w
0001D47E 6700                       		beq.s	Obj09_DOWNsnd
0001D480 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001D484                            
0001D484                            Obj09_DOWNsnd:
0001D484 303C 00A9                  		move.w	#$A9,d0
0001D488 4EB9 0000 1D16             		jsr	(PlaySound_Special).l	; play up/down sound
0001D48E 7800                       		moveq	#0,d4
0001D490 4E75                       		rts	
0001D492                            ; ===========================================================================
0001D492                            
0001D492                            Obj09_Rblock:
0001D492 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001D496 6600                       		bne.s	Obj09_ChkGhost
0001D498 6100 F5D6                  		bsr.w	SS_RemoveCollectedItem
0001D49C 6600                       		bne.s	Obj09_RevStage
0001D49E 14BC 0001                  		move.b	#1,(a2)
0001D4A2 2549 0004                  		move.l	a1,4(a2)
0001D4A6                            
0001D4A6                            Obj09_RevStage:
0001D4A6 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001D4AC 103C 00A9                  		move.b	#$A9,d0
0001D4B0 4EB9 0000 1D16             		jsr	(PlaySound_Special).l	; play sound
0001D4B6 7800                       		moveq	#0,d4
0001D4B8 4E75                       		rts	
0001D4BA                            
0001D4BA                            ; ===========================================================================
0001D4BA                            
0001D4BA                            Obj09_ChkGhost:
0001D4BA 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D4BE 6600                       		bne.s	Obj09_ChkGhostTag
0001D4C0 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D4C6                            
0001D4C6                            Obj09_ChkGhostTag:
0001D4C6 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D4CA 6600                       		bne.s	Obj09_NoGhost
0001D4CC 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D4D2 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D4D4 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D4DA                            
0001D4DA                            Obj09_NoGhost:
0001D4DA 78FF                       		moveq	#-1,d4
0001D4DC 4E75                       		rts	
0001D4DE                            ; ===========================================================================
0001D4DE                            
0001D4DE                            Obj09_MakeGhostSolid:
0001D4DE 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D4E4 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D4E6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D4EC 723F                       		moveq	#$3F,d1
0001D4EE                            
0001D4EE                            Obj09_GhostLoop2:
0001D4EE 743F                       		moveq	#$3F,d2
0001D4F0                            
0001D4F0                            Obj09_GhostLoop:
0001D4F0 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D4F4 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D4F6 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D4FA                            
0001D4FA                            Obj09_NoReplace:
0001D4FA 5249                       		addq.w	#1,a1
0001D4FC 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D500 43E9 0040                  		lea	$40(a1),a1
0001D504 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D508                            
0001D508                            Obj09_GhostNotSolid:
0001D508 4228 003A                  		clr.b	$3A(a0)
0001D50C 7800                       		moveq	#0,d4
0001D50E 4E75                       		rts	
0001D510                            ; End of function Obj09_ChkItems
0001D510                            
0001D510                            
0001D510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D510                            
0001D510                            
0001D510                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D510 1028 0030                  		move.b	$30(a0),d0
0001D514 6600                       		bne.s	Obj09_GOAL
0001D516 5328 0036                  		subq.b	#1,$36(a0)
0001D51A 6A00                       		bpl.s	loc_1BEA0
0001D51C 117C 0000 0036             		move.b	#0,$36(a0)
0001D522                            
0001D522                            loc_1BEA0:
0001D522 5328 0037                  		subq.b	#1,$37(a0)
0001D526 6A00                       		bpl.s	locret_1BEAC
0001D528 117C 0000 0037             		move.b	#0,$37(a0)
0001D52E                            
0001D52E                            locret_1BEAC:
0001D52E 4E75                       		rts	
0001D530                            ; ===========================================================================
0001D530                            
0001D530                            ; ===========================================================================
0001D530                            
0001D530                            Obj09_GOAL:
0001D530 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D534 6600                       		bne.s	Obj09_ChkGlass
0001D536 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D53A 303C 00A8                  		move.w	#$A8,d0		; change item
0001D53E 4EB9 0000 1D16             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D544 4E75                       		rts	
0001D546                            ; ===========================================================================
0001D546                            
0001D546                            ; ===========================================================================
0001D546                            
0001D546                            Obj09_ChkGlass:
0001D546 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D54A 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D54C 0C00 002E                  		cmpi.b	#$2E,d0
0001D550 6700                       		beq.s	Obj09_Glass
0001D552 0C00 002F                  		cmpi.b	#$2F,d0
0001D556 6700                       		beq.s	Obj09_Glass
0001D558 0C00 0030                  		cmpi.b	#$30,d0
0001D55C 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D55E                            
0001D55E                            Obj09_Glass:
0001D55E 6100 F510                  		bsr.w	SS_RemoveCollectedItem
0001D562 6600                       		bne.s	Obj09_GlassSnd
0001D564 14BC 0006                  		move.b	#6,(a2)
0001D568 2268 0032                  		movea.l	$32(a0),a1
0001D56C 5389                       		subq.l	#1,a1
0001D56E 2549 0004                  		move.l	a1,4(a2)
0001D572 1011                       		move.b	(a1),d0
0001D574 5200                       		addq.b	#1,d0		; change glass type when touched
0001D576 0C00 0030                  		cmpi.b	#$30,d0
0001D57A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D57C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D57E                            
0001D57E                            Obj09_GlassUpdate:
0001D57E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D582                            
0001D582                            Obj09_GlassSnd:
0001D582 303C 00BA                  		move.w	#$BA,d0
0001D586 4EF9 0000 1D16             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D58C                            ; ===========================================================================
0001D58C                            
0001D58C                            Obj09_NoGlass:
0001D58C 4E75                       		rts	
0001D58E                            ; End of function Obj09_ChkItems2
0001D58E                            
0001D58E                            ; ===========================================================================
0001D58E                            ; ---------------------------------------------------------------------------
0001D58E                            ; Object 10 - blank
0001D58E                            ; ---------------------------------------------------------------------------
0001D58E                            
0001D58E                            Obj10:					; XREF: Obj_Index
0001D58E 4E75                       		rts	
0001D590                            ; ---------------------------------------------------------------------------
0001D590                            ; Subroutine to	animate	level graphics
0001D590                            ; ---------------------------------------------------------------------------
0001D590                            
0001D590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D590                            
0001D590                            
0001D590                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D590 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag enabled?
0001D594 6600                       		bne.s	AniArt_Pause	; GMZ: If yes, branch
0001D596 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D59A 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D59C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D5A2 6100 0000                  		bsr.w	AniArt_GiantRing
0001D5A6 7000                       		moveq	#0,d0
0001D5A8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5AC D040                       		add.w	d0,d0
0001D5AE 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D5B2 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D5B6                            ; ===========================================================================
0001D5B6                            
0001D5B6                            AniArt_Pause:
0001D5B6 4E75                       		rts	
0001D5B8                            ; End of function AniArt_Load
0001D5B8                            
0001D5B8                            ; ===========================================================================
0001D5B8 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D5BC 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D5C0 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D5C4 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001D5C8                            ; ===========================================================================
0001D5C8                            ; ---------------------------------------------------------------------------
0001D5C8                            ; Animated pattern routine - Green Hill
0001D5C8                            ; ---------------------------------------------------------------------------
0001D5C8                            
0001D5C8                            AniArt_GHZ:				; XREF: AniArt_Index
0001D5C8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D5CC 6A00                       		bpl.s	loc_1C08A
0001D5CE 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001D5D4 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001D5DA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D5DE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D5E2 0240 0001                  		andi.w	#1,d0
0001D5E6 6700                       		beq.s	loc_1C078
0001D5E8 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001D5EC                            
0001D5EC                            loc_1C078:
0001D5EC 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001D5F6 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001D5FA 6000 0000                  		bra.w	LoadTiles
0001D5FE                            ; ===========================================================================
0001D5FE                            
0001D5FE                            loc_1C08A:
0001D5FE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D602 6A00                       		bpl.s	loc_1C0C0
0001D604 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001D60A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D610 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D614 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D618 0240 0001                  		andi.w	#1,d0
0001D61C 6700                       		beq.s	loc_1C0AE
0001D61E 43E9 0200                  		lea	$200(a1),a1
0001D622                            
0001D622                            loc_1C0AE:
0001D622 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D62C 323C 000F                  		move.w	#$F,d1
0001D630 6000 0000                  		bra.w	LoadTiles
0001D634                            ; ===========================================================================
0001D634                            
0001D634                            loc_1C0C0:
0001D634 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D638 6A00                       		bpl.s	locret_1C10C
0001D63A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D640 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D644 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D648 0240 0003                  		andi.w	#3,d0
0001D64C 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001D650 0800 0000                  		btst	#0,d0
0001D654 6600                       		bne.s	loc_1C0E8
0001D656 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001D65C                            
0001D65C                            loc_1C0E8:
0001D65C EF48                       		lsl.w	#7,d0
0001D65E 3200                       		move.w	d0,d1
0001D660 D040                       		add.w	d0,d0
0001D662 D041                       		add.w	d1,d0
0001D664 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D66E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D674 43F1 0000                  		lea	(a1,d0.w),a1
0001D678 323C 000B                  		move.w	#$B,d1
0001D67C 6100 0000                  		bsr.w	LoadTiles
0001D680                            
0001D680                            locret_1C10C:
0001D680 4E75                       		rts	
0001D682                            ; ===========================================================================
0001D682 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001D686                            ; ===========================================================================
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            ; Animated pattern routine - Marble
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            
0001D686                            AniArt_MZ:				; XREF: AniArt_Index
0001D686 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D68A 6A00                       		bpl.s	loc_1C150
0001D68C 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001D692 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001D698 7000                       		moveq	#0,d0
0001D69A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D69E 5200                       		addq.b	#1,d0
0001D6A0 0C00 0003                  		cmpi.b	#3,d0
0001D6A4 6600                       		bne.s	loc_1C134
0001D6A6 7000                       		moveq	#0,d0
0001D6A8                            
0001D6A8                            loc_1C134:
0001D6A8 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001D6AC C0FC 0100                  		mulu.w	#$100,d0
0001D6B0 D2C0                       		adda.w	d0,a1
0001D6B2 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001D6BC 323C 0007                  		move.w	#7,d1
0001D6C0 6100 0000                  		bsr.w	LoadTiles
0001D6C4                            
0001D6C4                            loc_1C150:
0001D6C4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D6C8 6A00                       		bpl.s	loc_1C1AE
0001D6CA 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D6D0 7000                       		moveq	#0,d0
0001D6D2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D6D6 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D6DC EE58                       		ror.w	#7,d0
0001D6DE D8C0                       		adda.w	d0,a4
0001D6E0 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D6EA 7600                       		moveq	#0,d3
0001D6EC 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D6F0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D6F4 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D6F8 343C 0003                  		move.w	#3,d2
0001D6FC                            
0001D6FC                            loc_1C188:
0001D6FC 3003                       		move.w	d3,d0
0001D6FE D040                       		add.w	d0,d0
0001D700 0240 001E                  		andi.w	#$1E,d0
0001D704 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D70A 3033 0000                  		move.w	(a3,d0.w),d0
0001D70E 47F3 0000                  		lea	(a3,d0.w),a3
0001D712 224C                       		movea.l	a4,a1
0001D714 323C 001F                  		move.w	#$1F,d1
0001D718 4E93                       		jsr	(a3)
0001D71A 5843                       		addq.w	#4,d3
0001D71C 51CA FFDE                  		dbf	d2,loc_1C188
0001D720 4E75                       		rts	
0001D722                            ; ===========================================================================
0001D722                            
0001D722                            loc_1C1AE:
0001D722 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D726 6A00 0000                  		bpl.w	locret_1C1EA
0001D72A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D730 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D736 7000                       		moveq	#0,d0
0001D738 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D73C 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D740 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D746 C0FC 00C0                  		mulu.w	#$C0,d0
0001D74A D2C0                       		adda.w	d0,a1
0001D74C 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D756 323C 0005                  		move.w	#5,d1
0001D75A 6000 0000                  		bra.w	LoadTiles
0001D75E                            ; ===========================================================================
0001D75E                            
0001D75E                            locret_1C1EA:
0001D75E 4E75                       		rts	
0001D760                            ; ===========================================================================
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ; Animated pattern routine - Scrap Brain
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            
0001D760                            AniArt_SBZ:				; XREF: AniArt_Index
0001D760 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D764 6700                       		beq.s	loc_1C1F8
0001D766 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D76A 6000                       		bra.s	loc_1C250
0001D76C                            ; ===========================================================================
0001D76C                            
0001D76C                            loc_1C1F8:
0001D76C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D770 6A00                       		bpl.s	loc_1C250
0001D772 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D778 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D77E 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D788 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D78C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D790 0240 0007                  		andi.w	#7,d0
0001D794 6700                       		beq.s	loc_1C234
0001D796 5340                       		subq.w	#1,d0
0001D798 C0FC 0180                  		mulu.w	#$180,d0
0001D79C 43F1 0000                  		lea	(a1,d0.w),a1
0001D7A0 323C 000B                  		move.w	#$B,d1
0001D7A4 6000 0000                  		bra.w	LoadTiles
0001D7A8                            ; ===========================================================================
0001D7A8                            
0001D7A8                            loc_1C234:
0001D7A8 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D7AE                            
0001D7AE                            loc_1C23A:
0001D7AE 323C 0005                  		move.w	#5,d1
0001D7B2 6100 0000                  		bsr.w	LoadTiles
0001D7B6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D7BC 323C 0005                  		move.w	#5,d1
0001D7C0 6000 0000                  		bra.w	LoadTiles
0001D7C4                            ; ===========================================================================
0001D7C4                            
0001D7C4                            loc_1C250:
0001D7C4 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D7C8 6700                       		beq.s	loc_1C25C
0001D7CA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D7CE 6000                       		bra.s	locret_1C2A0
0001D7D0                            ; ===========================================================================
0001D7D0                            
0001D7D0                            loc_1C25C:
0001D7D0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D7D4 6A00                       		bpl.s	locret_1C2A0
0001D7D6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D7DC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D7E2 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D7EC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D7F0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D7F4 0240 0007                  		andi.w	#7,d0
0001D7F8 6700                       		beq.s	loc_1C298
0001D7FA 5340                       		subq.w	#1,d0
0001D7FC C0FC 0180                  		mulu.w	#$180,d0
0001D800 43F1 0000                  		lea	(a1,d0.w),a1
0001D804 323C 000B                  		move.w	#$B,d1
0001D808 6000 0000                  		bra.w	LoadTiles
0001D80C                            ; ===========================================================================
0001D80C                            
0001D80C                            loc_1C298:
0001D80C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D812 609A                       		bra.s	loc_1C23A
0001D814                            ; ===========================================================================
0001D814                            
0001D814                            locret_1C2A0:
0001D814 4E75                       		rts	
0001D816                            ; ===========================================================================
0001D816                            ; ---------------------------------------------------------------------------
0001D816                            ; Animated pattern routine - ending sequence
0001D816                            ; ---------------------------------------------------------------------------
0001D816                            
0001D816                            AniArt_Ending:				; XREF: AniArt_Index
0001D816 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D81A 6A00                       		bpl.s	loc_1C2F4
0001D81C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D822 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D828 45F8 9400                  		lea	($FFFF9400).w,a2
0001D82C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D830 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D834 0240 0001                  		andi.w	#1,d0
0001D838 6700                       		beq.s	loc_1C2CE
0001D83A 43E9 0200                  		lea	$200(a1),a1
0001D83E 45EA 0200                  		lea	$200(a2),a2
0001D842                            
0001D842                            loc_1C2CE:
0001D842 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D84C 323C 000F                  		move.w	#$F,d1
0001D850 6100 0000                  		bsr.w	LoadTiles
0001D854 224A                       		movea.l	a2,a1
0001D856 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D860 323C 000F                  		move.w	#$F,d1
0001D864 6000 0000                  		bra.w	LoadTiles
0001D868                            ; ===========================================================================
0001D868                            
0001D868                            loc_1C2F4:
0001D868 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D86C 6A00                       		bpl.s	loc_1C33C
0001D86E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D874 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D878 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D87C 0240 0007                  		andi.w	#7,d0
0001D880 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D884 EF48                       		lsl.w	#7,d0
0001D886 3200                       		move.w	d0,d1
0001D888 D040                       		add.w	d0,d0
0001D88A D041                       		add.w	d1,d0
0001D88C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D896 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D89C 43F1 0000                  		lea	(a1,d0.w),a1
0001D8A0 323C 000B                  		move.w	#$B,d1
0001D8A4 6000 0000                  		bra.w	LoadTiles
0001D8A8                            ; ===========================================================================
0001D8A8 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D8B0                            ; ===========================================================================
0001D8B0                            
0001D8B0                            loc_1C33C:
0001D8B0 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D8B4 6A00                       		bpl.s	loc_1C37A
0001D8B6 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D8BC 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D8C0 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D8C4 0240 0003                  		andi.w	#3,d0
0001D8C8 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D8CC E148                       		lsl.w	#8,d0
0001D8CE D040                       		add.w	d0,d0
0001D8D0 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D8DA 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D8DE 43F1 0000                  		lea	(a1,d0.w),a1
0001D8E2 323C 000F                  		move.w	#$F,d1
0001D8E6 6000 0000                  		bra.w	LoadTiles
0001D8EA                            ; ===========================================================================
0001D8EA 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D8EE                            ; ===========================================================================
0001D8EE                            
0001D8EE                            loc_1C37A:
0001D8EE 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D8F2 6A00                       		bpl.s	locret_1C3B4
0001D8F4 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D8FA 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D8FE 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D902 0240 0003                  		andi.w	#3,d0
0001D906 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D90A E148                       		lsl.w	#8,d0
0001D90C D040                       		add.w	d0,d0
0001D90E 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D918 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D91C 43F1 0000                  		lea	(a1,d0.w),a1
0001D920 323C 000F                  		move.w	#$F,d1
0001D924 6000 0000                  		bra.w	LoadTiles
0001D928                            ; ===========================================================================
0001D928                            
0001D928                            locret_1C3B4:
0001D928 4E75                       		rts	
0001D92A                            ; ===========================================================================
0001D92A                            
0001D92A                            AniArt_none:				; XREF: AniArt_Index
0001D92A 4E75                       		rts	
0001D92C                            
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            
0001D92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D92C                            
0001D92C                            
0001D92C                            LoadTiles:
0001D92C 2C99                       		move.l	(a1)+,(a6)
0001D92E 2C99                       		move.l	(a1)+,(a6)
0001D930 2C99                       		move.l	(a1)+,(a6)
0001D932 2C99                       		move.l	(a1)+,(a6)
0001D934 2C99                       		move.l	(a1)+,(a6)
0001D936 2C99                       		move.l	(a1)+,(a6)
0001D938 2C99                       		move.l	(a1)+,(a6)
0001D93A 2C99                       		move.l	(a1)+,(a6)
0001D93C 51C9 FFEE                  		dbf	d1,LoadTiles
0001D940 4E75                       		rts	
0001D942                            ; End of function LoadTiles
0001D942                            
0001D942                            ; ===========================================================================
0001D942                            ; ---------------------------------------------------------------------------
0001D942                            ; Animated pattern routine - more Marble Zone
0001D942                            ; ---------------------------------------------------------------------------
0001D942 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D946 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D94A 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D94E 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D952 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D956 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D95A 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D95E 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D962                            ; ===========================================================================
0001D962                            
0001D962                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D962 2C91                       		move.l	(a1),(a6)
0001D964 43E9 0010                  		lea	$10(a1),a1
0001D968 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D96C 4E75                       		rts	
0001D96E                            ; ===========================================================================
0001D96E                            
0001D96E                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D96E 2029 0002                  		move.l	2(a1),d0
0001D972 1029 0001                  		move.b	1(a1),d0
0001D976 E098                       		ror.l	#8,d0
0001D978 2C80                       		move.l	d0,(a6)
0001D97A 43E9 0010                  		lea	$10(a1),a1
0001D97E 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D982 4E75                       		rts	
0001D984                            ; ===========================================================================
0001D984                            
0001D984                            loc_1C410:				; XREF: AniArt_MZextra
0001D984 2CA9 0002                  		move.l	2(a1),(a6)
0001D988 43E9 0010                  		lea	$10(a1),a1
0001D98C 51C9 FFF6                  		dbf	d1,loc_1C410
0001D990 4E75                       		rts	
0001D992                            ; ===========================================================================
0001D992                            
0001D992                            loc_1C41E:				; XREF: AniArt_MZextra
0001D992 2029 0004                  		move.l	4(a1),d0
0001D996 1029 0003                  		move.b	3(a1),d0
0001D99A E098                       		ror.l	#8,d0
0001D99C 2C80                       		move.l	d0,(a6)
0001D99E 43E9 0010                  		lea	$10(a1),a1
0001D9A2 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D9A6 4E75                       		rts	
0001D9A8                            ; ===========================================================================
0001D9A8                            
0001D9A8                            loc_1C434:				; XREF: AniArt_MZextra
0001D9A8 2CA9 0004                  		move.l	4(a1),(a6)
0001D9AC 43E9 0010                  		lea	$10(a1),a1
0001D9B0 51C9 FFF6                  		dbf	d1,loc_1C434
0001D9B4 4E75                       		rts	
0001D9B6                            ; ===========================================================================
0001D9B6                            
0001D9B6                            loc_1C442:				; XREF: AniArt_MZextra
0001D9B6 2029 0006                  		move.l	6(a1),d0
0001D9BA 1029 0005                  		move.b	5(a1),d0
0001D9BE E098                       		ror.l	#8,d0
0001D9C0 2C80                       		move.l	d0,(a6)
0001D9C2 43E9 0010                  		lea	$10(a1),a1
0001D9C6 51C9 FFEE                  		dbf	d1,loc_1C442
0001D9CA 4E75                       		rts	
0001D9CC                            ; ===========================================================================
0001D9CC                            
0001D9CC                            loc_1C458:				; XREF: AniArt_MZextra
0001D9CC 2CA9 0006                  		move.l	6(a1),(a6)
0001D9D0 43E9 0010                  		lea	$10(a1),a1
0001D9D4 51C9 FFF6                  		dbf	d1,loc_1C458
0001D9D8 4E75                       		rts	
0001D9DA                            ; ===========================================================================
0001D9DA                            
0001D9DA                            loc_1C466:				; XREF: AniArt_MZextra
0001D9DA 2029 0008                  		move.l	8(a1),d0
0001D9DE 1029 0007                  		move.b	7(a1),d0
0001D9E2 E098                       		ror.l	#8,d0
0001D9E4 2C80                       		move.l	d0,(a6)
0001D9E6 43E9 0010                  		lea	$10(a1),a1
0001D9EA 51C9 FFEE                  		dbf	d1,loc_1C466
0001D9EE 4E75                       		rts	
0001D9F0                            ; ===========================================================================
0001D9F0                            
0001D9F0                            loc_1C47C:				; XREF: AniArt_MZextra
0001D9F0 2CA9 0008                  		move.l	8(a1),(a6)
0001D9F4 43E9 0010                  		lea	$10(a1),a1
0001D9F8 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D9FC 4E75                       		rts	
0001D9FE                            ; ===========================================================================
0001D9FE                            
0001D9FE                            loc_1C48A:				; XREF: AniArt_MZextra
0001D9FE 2029 000A                  		move.l	$A(a1),d0
0001DA02 1029 0009                  		move.b	9(a1),d0
0001DA06 E098                       		ror.l	#8,d0
0001DA08 2C80                       		move.l	d0,(a6)
0001DA0A 43E9 0010                  		lea	$10(a1),a1
0001DA0E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DA12 4E75                       		rts	
0001DA14                            ; ===========================================================================
0001DA14                            
0001DA14                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DA14 2CA9 000A                  		move.l	$A(a1),(a6)
0001DA18 43E9 0010                  		lea	$10(a1),a1
0001DA1C 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DA20 4E75                       		rts	
0001DA22                            ; ===========================================================================
0001DA22                            
0001DA22                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DA22 2029 000C                  		move.l	$C(a1),d0
0001DA26 1029 000B                  		move.b	$B(a1),d0
0001DA2A E098                       		ror.l	#8,d0
0001DA2C 2C80                       		move.l	d0,(a6)
0001DA2E 43E9 0010                  		lea	$10(a1),a1
0001DA32 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DA36 4E75                       		rts	
0001DA38                            ; ===========================================================================
0001DA38                            
0001DA38                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DA38 2CA9 000C                  		move.l	$C(a1),(a6)
0001DA3C 43E9 0010                  		lea	$10(a1),a1
0001DA40 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DA44 4E75                       		rts	
0001DA46                            ; ===========================================================================
0001DA46                            
0001DA46                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DA46 2029 000C                  		move.l	$C(a1),d0
0001DA4A E198                       		rol.l	#8,d0
0001DA4C 1011                       		move.b	0(a1),d0
0001DA4E 2C80                       		move.l	d0,(a6)
0001DA50 43E9 0010                  		lea	$10(a1),a1
0001DA54 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DA58 4E75                       		rts	
0001DA5A                            ; ===========================================================================
0001DA5A                            
0001DA5A                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DA5A 3CA9 000E                  		move.w	$E(a1),(a6)
0001DA5E 3C91                       		move.w	0(a1),(a6)
0001DA60 43E9 0010                  		lea	$10(a1),a1
0001DA64 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DA68 4E75                       		rts	
0001DA6A                            ; ===========================================================================
0001DA6A                            
0001DA6A                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DA6A 2011                       		move.l	0(a1),d0
0001DA6C 1029 000F                  		move.b	$F(a1),d0
0001DA70 E098                       		ror.l	#8,d0
0001DA72 2C80                       		move.l	d0,(a6)
0001DA74 43E9 0010                  		lea	$10(a1),a1
0001DA78 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DA7C 4E75                       		rts	
0001DA7E                            
0001DA7E                            ; ---------------------------------------------------------------------------
0001DA7E                            ; Animated pattern routine - giant ring
0001DA7E                            ; ---------------------------------------------------------------------------
0001DA7E                            
0001DA7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA7E                            
0001DA7E                            
0001DA7E                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DA7E 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DA82 6600                       		bne.s	loc_1C518
0001DA84 4E75                       		rts	
0001DA86                            ; ===========================================================================
0001DA86                            
0001DA86                            loc_1C518:
0001DA86 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DA8C 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DA92 7000                       		moveq	#0,d0
0001DA94 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DA98 43F1 0000                  		lea	(a1,d0.w),a1
0001DA9C 0640 8000                  		addi.w	#$8000,d0
0001DAA0 E588                       		lsl.l	#2,d0
0001DAA2 E448                       		lsr.w	#2,d0
0001DAA4 0040 4000                  		ori.w	#$4000,d0
0001DAA8 4840                       		swap	d0
0001DAAA 2D40 0004                  		move.l	d0,4(a6)
0001DAAE 323C 000D                  		move.w	#$D,d1
0001DAB2 6000 FE78                  		bra.w	LoadTiles
0001DAB6                            ; End of function AniArt_GiantRing
0001DAB6                            
0001DAB6                            ; ===========================================================================
0001DAB6                            ; ---------------------------------------------------------------------------
0001DAB6                            ; Object 21 - SCORE, TIME, RINGS
0001DAB6                            ; ---------------------------------------------------------------------------
0001DAB6                            
0001DAB6                            Obj21:					; XREF: Obj_Index
0001DAB6 7000                       		moveq	#0,d0
0001DAB8 1028 0024                  		move.b	$24(a0),d0
0001DABC 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DAC0 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DAC4                            ; ===========================================================================
0001DAC4 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DAC6 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DAC8                            ; ===========================================================================
0001DAC8                            
0001DAC8                            Obj21_Main:				; XREF: Obj21_Main
0001DAC8 5428 0024                  		addq.b	#2,$24(a0)
0001DACC 317C 0090 0008             		move.w	#$90,8(a0)
0001DAD2 317C 0108 000A             		move.w	#$108,$A(a0)
0001DAD8 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DAE0 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001DAE6 117C 0000 0001             		move.b	#0,1(a0)
0001DAEC 117C 0000 0018             		move.b	#0,$18(a0)
0001DAF2                            
0001DAF2                            Obj21_Flash:				; XREF: Obj21_Main
0001DAF2 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DAF6 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001DAF8 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001DAFC 4EF9 0000 E7E4             		jmp	DisplaySprite
0001DB02                            ; ===========================================================================
0001DB02                            
0001DB02                            Obj21_Flash2:
0001DB02 7000                       		moveq	#0,d0
0001DB04 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DB0A 6600                       		bne.s	Obj21_Display
0001DB0C 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DB0E 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DB14 6600                       		bne.s	Obj21_Display	; if not, branch
0001DB16 5440                       		addq.w	#2,d0		; make time counter flash red
0001DB18                            
0001DB18                            Obj21_Display:
0001DB18 1140 001A                  		move.b	d0,$1A(a0)
0001DB1C 4EF9 0000 E7E4             		jmp	DisplaySprite
0001DB22                            ; ===========================================================================
0001DB22                            ; ---------------------------------------------------------------------------
0001DB22                            ; Sprite mappings - SCORE, TIME, RINGS
0001DB22                            ; ---------------------------------------------------------------------------
0001DB22                            Map_obj21:
0001DB22                            	include "_maps\obj21.asm"
0001DB22                            Map_549d:
0001DB22 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001DB24 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001DB26 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001DB28 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001DB2A 09                         Map_549d_8: 	dc.b $9
0001DB2B 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB30 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB35 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB3A 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB3F A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB44 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB49 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB4E 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB53 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB58 09                         Map_549d_36: 	dc.b $9
0001DB59 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB5E 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB63 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB68 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB6D A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB72 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB77 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB7C 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB81 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB86 09                         Map_549d_64: 	dc.b $9
0001DB87 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB8C 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB91 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB96 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB9B A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DBA0 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DBA5 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DBAA 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DBAF 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DBB4 09                         Map_549d_92: 	dc.b $9
0001DBB5 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DBBA 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DBBF 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DBC4 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DBC9 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DBCE A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DBD3 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DBD8 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DBDD 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DBE2                            	even
0001DBE2                            	even
0001DBE2                            
0001DBE2                            ; ---------------------------------------------------------------------------
0001DBE2                            ; Add points subroutine
0001DBE2                            ; ---------------------------------------------------------------------------
0001DBE2                            
0001DBE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBE2                            
0001DBE2                            
0001DBE2                            AddPoints:
0001DBE2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001DBE8 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001DBEC 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001DBF0 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001DBF2 223C 000F 423F             		move.l	#999999,d1
0001DBF8 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001DBFA 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001DBFE 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001DC00 2481                       		move.l	d1,(a2)
0001DC02                            
0001DC02                            loc_1C6AC:
0001DC02 2013                       		move.l	(a3),d0
0001DC04 B092                       		cmp.l	(a2),d0
0001DC06 6500 0000                  		bcs.w	locret_1C6B6
0001DC0A 2480                       		move.l	d0,(a2)
0001DC0C                            
0001DC0C                            locret_1C6B6:
0001DC0C 4E75                       		rts	
0001DC0E                            ; End of function AddPoints
0001DC0E                            
0001DC0E                            ; ---------------------------------------------------------------------------
0001DC0E                            ; Subroutine to	update the HUD
0001DC0E                            ; ---------------------------------------------------------------------------
0001DC0E                            
0001DC0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC0E                            
0001DC0E                            
0001DC0E                            HudUpdate:
0001DC0E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001DC12 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001DC16 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001DC1A 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001DC1C 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001DC20 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001DC26 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001DC2A 6100 0000                  		bsr.w	Hud_Score
0001DC2E                            
0001DC2E                            Hud_ChkRings:
0001DC2E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DC32 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001DC34 6A00                       		bpl.s	loc_1C6E4
0001DC36 6100 0000                  		bsr.w	Hud_LoadZero
0001DC3A                            
0001DC3A                            loc_1C6E4:
0001DC3A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DC3E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DC44 7200                       		moveq	#0,d1
0001DC46 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DC4A 6100 0000                  		bsr.w	Hud_Rings
0001DC4E                            
0001DC4E                            Hud_ChkTime:
0001DC4E 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001DC52 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001DC54 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001DC58 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001DC5A 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001DC5E 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001DC64 6700                       		beq.s	TimeOver	; if yes, branch
0001DC66 5221                       		addq.b	#1,-(a1)
0001DC68 0C11 003C                  		cmpi.b	#60,(a1)
0001DC6C 6500                       		bcs.s	Hud_ChkLives
0001DC6E 12BC 0000                  		move.b	#0,(a1)
0001DC72 5221                       		addq.b	#1,-(a1)
0001DC74 0C11 003C                  		cmpi.b	#60,(a1)
0001DC78 6500                       		bcs.s	loc_1C734
0001DC7A 12BC 0000                  		move.b	#0,(a1)
0001DC7E 5221                       		addq.b	#1,-(a1)
0001DC80 0C11 0009                  		cmpi.b	#9,(a1)
0001DC84 6500                       		bcs.s	loc_1C734
0001DC86 12BC 0009                  		move.b	#9,(a1)
0001DC8A                            
0001DC8A                            loc_1C734:
0001DC8A 203C 5E40 0003             		move.l	#$5E400003,d0
0001DC90 7200                       		moveq	#0,d1
0001DC92 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001DC96 6100 0000                  		bsr.w	Hud_Mins
0001DC9A 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001DCA0 7200                       		moveq	#0,d1
0001DCA2 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001DCA6 6100 0000                  		bsr.w	Hud_Secs
0001DCAA                            
0001DCAA                            Hud_ChkLives:
0001DCAA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DCAE 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001DCB0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DCB4 6100 0000                  		bsr.w	Hud_Lives
0001DCB8                            
0001DCB8                            Hud_ChkBonus:
0001DCB8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001DCBC 6700                       		beq.s	Hud_End		; if not, branch
0001DCBE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DCC2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001DCCC 7200                       		moveq	#0,d1
0001DCCE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DCD2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCD6 7200                       		moveq	#0,d1
0001DCD8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DCDC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCE0                            
0001DCE0                            Hud_End:
0001DCE0 4E75                       		rts	
0001DCE2                            ; ===========================================================================
0001DCE2                            
0001DCE2                            TimeOver:				; XREF: Hud_ChkTime
0001DCE2 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001DCE6 41F8 D000                  		lea	($FFFFD000).w,a0
0001DCEA 2448                       		movea.l	a0,a2
0001DCEC 6100 E960                  		bsr.w	KillSonic
0001DCF0 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001DCF6 4E75                       		rts	
0001DCF8                            ; ===========================================================================
0001DCF8                            
0001DCF8                            HudDebug:				; XREF: HudUpdate
0001DCF8 6100 0000                  		bsr.w	HudDb_XY
0001DCFC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DD00 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001DD02 6A00                       		bpl.s	HudDb_Rings
0001DD04 6100 0000                  		bsr.w	Hud_LoadZero
0001DD08                            
0001DD08                            HudDb_Rings:
0001DD08 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DD0C 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DD12 7200                       		moveq	#0,d1
0001DD14 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DD18 6100 0000                  		bsr.w	Hud_Rings
0001DD1C                            
0001DD1C                            HudDb_ObjCount:
0001DD1C 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001DD22 7200                       		moveq	#0,d1
0001DD24 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001DD28 6100 0000                  		bsr.w	Hud_Secs
0001DD2C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DD30 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001DD32 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DD36 6100 0000                  		bsr.w	Hud_Lives
0001DD3A                            
0001DD3A                            HudDb_ChkBonus:
0001DD3A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001DD3E 6700                       		beq.s	HudDb_End	; if not, branch
0001DD40 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DD44 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001DD4E 7200                       		moveq	#0,d1
0001DD50 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DD54 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DD58 7200                       		moveq	#0,d1
0001DD5A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DD5E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DD62                            
0001DD62                            HudDb_End:
0001DD62 4E75                       		rts	
0001DD64                            ; End of function HudUpdate
0001DD64                            
0001DD64                            ; ---------------------------------------------------------------------------
0001DD64                            ; Subroutine to	load "0" on the	HUD
0001DD64                            ; ---------------------------------------------------------------------------
0001DD64                            
0001DD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD64                            
0001DD64                            
0001DD64                            Hud_LoadZero:				; XREF: HudUpdate
0001DD64 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001DD6E 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001DD72 343C 0002                  		move.w	#2,d2
0001DD76 6000                       		bra.s	loc_1C83E
0001DD78                            ; End of function Hud_LoadZero
0001DD78                            
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78                            
0001DD78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD78                            
0001DD78                            
0001DD78                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001DD78 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DD7E 6100 0000                  		bsr.w	Hud_Lives
0001DD82 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001DD8C 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001DD90 343C 000E                  		move.w	#$E,d2
0001DD94                            
0001DD94                            loc_1C83E:				; XREF: Hud_LoadZero
0001DD94 43FA 0000                  		lea	Art_Hud(pc),a1
0001DD98                            
0001DD98                            loc_1C842:
0001DD98 323C 000F                  		move.w	#$F,d1
0001DD9C 101A                       		move.b	(a2)+,d0
0001DD9E 6B00                       		bmi.s	loc_1C85E
0001DDA0 4880                       		ext.w	d0
0001DDA2 EB48                       		lsl.w	#5,d0
0001DDA4 47F1 0000                  		lea	(a1,d0.w),a3
0001DDA8                            
0001DDA8                            loc_1C852:
0001DDA8 2C9B                       		move.l	(a3)+,(a6)
0001DDAA 51C9 FFFC                  		dbf	d1,loc_1C852
0001DDAE                            
0001DDAE                            loc_1C858:
0001DDAE 51CA FFE8                  		dbf	d2,loc_1C842
0001DDB2                            
0001DDB2 4E75                       		rts	
0001DDB4                            ; ===========================================================================
0001DDB4                            
0001DDB4                            loc_1C85E:
0001DDB4 2CBC 0000 0000             		move.l	#0,(a6)
0001DDBA 51C9 FFF8                  		dbf	d1,loc_1C85E
0001DDBE                            
0001DDBE 60EE                       		bra.s	loc_1C858
0001DDC0                            ; End of function Hud_Base
0001DDC0                            
0001DDC0                            ; ===========================================================================
0001DDC0 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001DDCC FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001DDD0                            ; ---------------------------------------------------------------------------
0001DDD0                            ; Subroutine to	load debug mode	numbers	patterns
0001DDD0                            ; ---------------------------------------------------------------------------
0001DDD0                            
0001DDD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDD0                            
0001DDD0                            
0001DDD0                            HudDb_XY:				; XREF: HudDebug
0001DDD0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001DDDA 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001DDDE 4841                       		swap	d1
0001DDE0 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001DDE4 6100                       		bsr.s	HudDb_XY2
0001DDE6 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001DDEA 4841                       		swap	d1
0001DDEC 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001DDF0                            ; End of function HudDb_XY
0001DDF0                            
0001DDF0                            
0001DDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDF0                            
0001DDF0                            
0001DDF0                            HudDb_XY2:
0001DDF0 7C07                       		moveq	#7,d6
0001DDF2 43F9 0000 0D4E             		lea	(Art_Text).l,a1
0001DDF8                            
0001DDF8                            HudDb_XYLoop:
0001DDF8 E959                       		rol.w	#4,d1
0001DDFA 3401                       		move.w	d1,d2
0001DDFC 0242 000F                  		andi.w	#$F,d2
0001DE00 0C42 000A                  		cmpi.w	#$A,d2
0001DE04 6500                       		bcs.s	loc_1C8B2
0001DE06 5E42                       		addq.w	#7,d2
0001DE08                            
0001DE08                            loc_1C8B2:
0001DE08 EB4A                       		lsl.w	#5,d2
0001DE0A 47F1 2000                  		lea	(a1,d2.w),a3
0001DE0E 2C9B                       		move.l	(a3)+,(a6)
0001DE10 2C9B                       		move.l	(a3)+,(a6)
0001DE12 2C9B                       		move.l	(a3)+,(a6)
0001DE14 2C9B                       		move.l	(a3)+,(a6)
0001DE16 2C9B                       		move.l	(a3)+,(a6)
0001DE18 2C9B                       		move.l	(a3)+,(a6)
0001DE1A 2C9B                       		move.l	(a3)+,(a6)
0001DE1C 2C9B                       		move.l	(a3)+,(a6)
0001DE1E 4841                       		swap	d1
0001DE20 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001DE24                            
0001DE24 4E75                       		rts	
0001DE26                            ; End of function HudDb_XY2
0001DE26                            
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26                            ; Subroutine to	load rings numbers patterns
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26                            
0001DE26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE26                            
0001DE26                            
0001DE26                            Hud_Rings:				; XREF: HudUpdate
0001DE26 45F9 0000 0000             		lea	(Hud_100).l,a2
0001DE2C 7C02                       		moveq	#2,d6
0001DE2E 6000                       		bra.s	Hud_LoadArt
0001DE30                            ; End of function Hud_Rings
0001DE30                            
0001DE30                            ; ---------------------------------------------------------------------------
0001DE30                            ; Subroutine to	load score numbers patterns
0001DE30                            ; ---------------------------------------------------------------------------
0001DE30                            
0001DE30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE30                            
0001DE30                            
0001DE30                            Hud_Score:				; XREF: HudUpdate
0001DE30 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001DE36 7C05                       		moveq	#5,d6
0001DE38                            
0001DE38                            Hud_LoadArt:
0001DE38 7800                       		moveq	#0,d4
0001DE3A 43FA 0000                  		lea	Art_Hud(pc),a1
0001DE3E                            
0001DE3E                            Hud_ScoreLoop:
0001DE3E 7400                       		moveq	#0,d2
0001DE40 261A                       		move.l	(a2)+,d3
0001DE42                            
0001DE42                            loc_1C8EC:
0001DE42 9283                       		sub.l	d3,d1
0001DE44 6500                       		bcs.s	loc_1C8F4
0001DE46 5242                       		addq.w	#1,d2
0001DE48 60F8                       		bra.s	loc_1C8EC
0001DE4A                            ; ===========================================================================
0001DE4A                            
0001DE4A                            loc_1C8F4:
0001DE4A D283                       		add.l	d3,d1
0001DE4C 4A42                       		tst.w	d2
0001DE4E 6700                       		beq.s	loc_1C8FE
0001DE50 383C 0001                  		move.w	#1,d4
0001DE54                            
0001DE54                            loc_1C8FE:
0001DE54 4A44                       		tst.w	d4
0001DE56 6700                       		beq.s	loc_1C92C
0001DE58 ED4A                       		lsl.w	#6,d2
0001DE5A 2D40 0004                  		move.l	d0,4(a6)
0001DE5E 47F1 2000                  		lea	(a1,d2.w),a3
0001DE62 2C9B                       		move.l	(a3)+,(a6)
0001DE64 2C9B                       		move.l	(a3)+,(a6)
0001DE66 2C9B                       		move.l	(a3)+,(a6)
0001DE68 2C9B                       		move.l	(a3)+,(a6)
0001DE6A 2C9B                       		move.l	(a3)+,(a6)
0001DE6C 2C9B                       		move.l	(a3)+,(a6)
0001DE6E 2C9B                       		move.l	(a3)+,(a6)
0001DE70 2C9B                       		move.l	(a3)+,(a6)
0001DE72 2C9B                       		move.l	(a3)+,(a6)
0001DE74 2C9B                       		move.l	(a3)+,(a6)
0001DE76 2C9B                       		move.l	(a3)+,(a6)
0001DE78 2C9B                       		move.l	(a3)+,(a6)
0001DE7A 2C9B                       		move.l	(a3)+,(a6)
0001DE7C 2C9B                       		move.l	(a3)+,(a6)
0001DE7E 2C9B                       		move.l	(a3)+,(a6)
0001DE80 2C9B                       		move.l	(a3)+,(a6)
0001DE82                            
0001DE82                            loc_1C92C:
0001DE82 0680 0040 0000             		addi.l	#$400000,d0
0001DE88 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001DE8C                            
0001DE8C 4E75                       		rts	
0001DE8E                            ; End of function Hud_Score
0001DE8E                            
0001DE8E                            ; ---------------------------------------------------------------------------
0001DE8E                            ; Subroutine to	load countdown numbers on the continue screen
0001DE8E                            ; ---------------------------------------------------------------------------
0001DE8E                            
0001DE8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE8E                            
0001DE8E                            
0001DE8E                            ContScrCounter:				; XREF: ContinueScreen
0001DE8E 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001DE98 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DE9E 45F9 0000 0000             		lea	(Hud_10).l,a2
0001DEA4 7C01                       		moveq	#1,d6
0001DEA6 7800                       		moveq	#0,d4
0001DEA8 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001DEAC                            
0001DEAC                            ContScr_Loop:
0001DEAC 7400                       		moveq	#0,d2
0001DEAE 261A                       		move.l	(a2)+,d3
0001DEB0                            
0001DEB0                            loc_1C95A:
0001DEB0 9283                       		sub.l	d3,d1
0001DEB2 6500                       		bcs.s	loc_1C962
0001DEB4 5242                       		addq.w	#1,d2
0001DEB6 60F8                       		bra.s	loc_1C95A
0001DEB8                            ; ===========================================================================
0001DEB8                            
0001DEB8                            loc_1C962:
0001DEB8 D283                       		add.l	d3,d1
0001DEBA ED4A                       		lsl.w	#6,d2
0001DEBC 47F1 2000                  		lea	(a1,d2.w),a3
0001DEC0 2C9B                       		move.l	(a3)+,(a6)
0001DEC2 2C9B                       		move.l	(a3)+,(a6)
0001DEC4 2C9B                       		move.l	(a3)+,(a6)
0001DEC6 2C9B                       		move.l	(a3)+,(a6)
0001DEC8 2C9B                       		move.l	(a3)+,(a6)
0001DECA 2C9B                       		move.l	(a3)+,(a6)
0001DECC 2C9B                       		move.l	(a3)+,(a6)
0001DECE 2C9B                       		move.l	(a3)+,(a6)
0001DED0 2C9B                       		move.l	(a3)+,(a6)
0001DED2 2C9B                       		move.l	(a3)+,(a6)
0001DED4 2C9B                       		move.l	(a3)+,(a6)
0001DED6 2C9B                       		move.l	(a3)+,(a6)
0001DED8 2C9B                       		move.l	(a3)+,(a6)
0001DEDA 2C9B                       		move.l	(a3)+,(a6)
0001DEDC 2C9B                       		move.l	(a3)+,(a6)
0001DEDE 2C9B                       		move.l	(a3)+,(a6)
0001DEE0 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001DEE4                            
0001DEE4 4E75                       		rts	
0001DEE6                            ; End of function ContScrCounter
0001DEE6                            
0001DEE6                            ; ===========================================================================
0001DEE6                            ; ---------------------------------------------------------------------------
0001DEE6                            ; HUD counter sizes
0001DEE6                            ; ---------------------------------------------------------------------------
0001DEE6 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001DEEA 0000 2710                  Hud_10000:	dc.l 10000
0001DEEE 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001DEF2 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001DEF6 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001DEFA 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001DEFE                            
0001DEFE                            ; ---------------------------------------------------------------------------
0001DEFE                            ; Subroutine to	load time numbers patterns
0001DEFE                            ; ---------------------------------------------------------------------------
0001DEFE                            
0001DEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEFE                            
0001DEFE                            
0001DEFE                            Hud_Mins:				; XREF: Hud_ChkTime
0001DEFE 45F9 0001 DEFA             		lea	(Hud_1).l,a2
0001DF04 7C00                       		moveq	#0,d6
0001DF06 6000                       		bra.s	loc_1C9BA
0001DF08                            ; End of function Hud_Mins
0001DF08                            
0001DF08                            
0001DF08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF08                            
0001DF08                            
0001DF08                            Hud_Secs:				; XREF: Hud_ChkTime
0001DF08 45F9 0001 DEF6             		lea	(Hud_10).l,a2
0001DF0E 7C01                       		moveq	#1,d6
0001DF10                            
0001DF10                            loc_1C9BA:
0001DF10 7800                       		moveq	#0,d4
0001DF12 43FA 0000                  		lea	Art_Hud(pc),a1
0001DF16                            
0001DF16                            Hud_TimeLoop:
0001DF16 7400                       		moveq	#0,d2
0001DF18 261A                       		move.l	(a2)+,d3
0001DF1A                            
0001DF1A                            loc_1C9C4:
0001DF1A 9283                       		sub.l	d3,d1
0001DF1C 6500                       		bcs.s	loc_1C9CC
0001DF1E 5242                       		addq.w	#1,d2
0001DF20 60F8                       		bra.s	loc_1C9C4
0001DF22                            ; ===========================================================================
0001DF22                            
0001DF22                            loc_1C9CC:
0001DF22 D283                       		add.l	d3,d1
0001DF24 4A42                       		tst.w	d2
0001DF26 6700                       		beq.s	loc_1C9D6
0001DF28 383C 0001                  		move.w	#1,d4
0001DF2C                            
0001DF2C                            loc_1C9D6:
0001DF2C ED4A                       		lsl.w	#6,d2
0001DF2E 2D40 0004                  		move.l	d0,4(a6)
0001DF32 47F1 2000                  		lea	(a1,d2.w),a3
0001DF36 2C9B                       		move.l	(a3)+,(a6)
0001DF38 2C9B                       		move.l	(a3)+,(a6)
0001DF3A 2C9B                       		move.l	(a3)+,(a6)
0001DF3C 2C9B                       		move.l	(a3)+,(a6)
0001DF3E 2C9B                       		move.l	(a3)+,(a6)
0001DF40 2C9B                       		move.l	(a3)+,(a6)
0001DF42 2C9B                       		move.l	(a3)+,(a6)
0001DF44 2C9B                       		move.l	(a3)+,(a6)
0001DF46 2C9B                       		move.l	(a3)+,(a6)
0001DF48 2C9B                       		move.l	(a3)+,(a6)
0001DF4A 2C9B                       		move.l	(a3)+,(a6)
0001DF4C 2C9B                       		move.l	(a3)+,(a6)
0001DF4E 2C9B                       		move.l	(a3)+,(a6)
0001DF50 2C9B                       		move.l	(a3)+,(a6)
0001DF52 2C9B                       		move.l	(a3)+,(a6)
0001DF54 2C9B                       		move.l	(a3)+,(a6)
0001DF56 0680 0040 0000             		addi.l	#$400000,d0
0001DF5C 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001DF60                            
0001DF60 4E75                       		rts	
0001DF62                            ; End of function Hud_Secs
0001DF62                            
0001DF62                            ; ---------------------------------------------------------------------------
0001DF62                            ; Subroutine to	load time/ring bonus numbers patterns
0001DF62                            ; ---------------------------------------------------------------------------
0001DF62                            
0001DF62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF62                            
0001DF62                            
0001DF62                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001DF62 45F9 0001 DEEE             		lea	(Hud_1000).l,a2
0001DF68 7C03                       		moveq	#3,d6
0001DF6A 7800                       		moveq	#0,d4
0001DF6C 43FA 0000                  		lea	Art_Hud(pc),a1
0001DF70                            
0001DF70                            Hud_BonusLoop:
0001DF70 7400                       		moveq	#0,d2
0001DF72 261A                       		move.l	(a2)+,d3
0001DF74                            
0001DF74                            loc_1CA1E:
0001DF74 9283                       		sub.l	d3,d1
0001DF76 6500                       		bcs.s	loc_1CA26
0001DF78 5242                       		addq.w	#1,d2
0001DF7A 60F8                       		bra.s	loc_1CA1E
0001DF7C                            ; ===========================================================================
0001DF7C                            
0001DF7C                            loc_1CA26:
0001DF7C D283                       		add.l	d3,d1
0001DF7E 4A42                       		tst.w	d2
0001DF80 6700                       		beq.s	loc_1CA30
0001DF82 383C 0001                  		move.w	#1,d4
0001DF86                            
0001DF86                            loc_1CA30:
0001DF86 4A44                       		tst.w	d4
0001DF88 6700                       		beq.s	Hud_ClrBonus
0001DF8A ED4A                       		lsl.w	#6,d2
0001DF8C 47F1 2000                  		lea	(a1,d2.w),a3
0001DF90 2C9B                       		move.l	(a3)+,(a6)
0001DF92 2C9B                       		move.l	(a3)+,(a6)
0001DF94 2C9B                       		move.l	(a3)+,(a6)
0001DF96 2C9B                       		move.l	(a3)+,(a6)
0001DF98 2C9B                       		move.l	(a3)+,(a6)
0001DF9A 2C9B                       		move.l	(a3)+,(a6)
0001DF9C 2C9B                       		move.l	(a3)+,(a6)
0001DF9E 2C9B                       		move.l	(a3)+,(a6)
0001DFA0 2C9B                       		move.l	(a3)+,(a6)
0001DFA2 2C9B                       		move.l	(a3)+,(a6)
0001DFA4 2C9B                       		move.l	(a3)+,(a6)
0001DFA6 2C9B                       		move.l	(a3)+,(a6)
0001DFA8 2C9B                       		move.l	(a3)+,(a6)
0001DFAA 2C9B                       		move.l	(a3)+,(a6)
0001DFAC 2C9B                       		move.l	(a3)+,(a6)
0001DFAE 2C9B                       		move.l	(a3)+,(a6)
0001DFB0                            
0001DFB0                            loc_1CA5A:
0001DFB0 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001DFB4                            
0001DFB4 4E75                       		rts	
0001DFB6                            ; ===========================================================================
0001DFB6                            
0001DFB6                            Hud_ClrBonus:
0001DFB6 7A0F                       		moveq	#$F,d5
0001DFB8                            
0001DFB8                            Hud_ClrBonusLoop:
0001DFB8 2CBC 0000 0000             		move.l	#0,(a6)
0001DFBE 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001DFC2                            
0001DFC2 60EC                       		bra.s	loc_1CA5A
0001DFC4                            ; End of function Hud_TimeRingBonus
0001DFC4                            
0001DFC4                            ; ---------------------------------------------------------------------------
0001DFC4                            ; Subroutine to	load uncompressed lives	counter	patterns
0001DFC4                            ; ---------------------------------------------------------------------------
0001DFC4                            
0001DFC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFC4                            
0001DFC4                            
0001DFC4                            Hud_Lives:				; XREF: Hud_ChkLives
0001DFC4 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001DFCA 7200                       		moveq	#0,d1
0001DFCC 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001DFD0 45F9 0001 DEF6             		lea	(Hud_10).l,a2
0001DFD6 7C01                       		moveq	#1,d6
0001DFD8 7800                       		moveq	#0,d4
0001DFDA 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001DFDE                            
0001DFDE                            Hud_LivesLoop:
0001DFDE 2D40 0004                  		move.l	d0,4(a6)
0001DFE2 7400                       		moveq	#0,d2
0001DFE4 261A                       		move.l	(a2)+,d3
0001DFE6                            
0001DFE6                            loc_1CA90:
0001DFE6 9283                       		sub.l	d3,d1
0001DFE8 6500                       		bcs.s	loc_1CA98
0001DFEA 5242                       		addq.w	#1,d2
0001DFEC 60F8                       		bra.s	loc_1CA90
0001DFEE                            ; ===========================================================================
0001DFEE                            
0001DFEE                            loc_1CA98:
0001DFEE D283                       		add.l	d3,d1
0001DFF0 4A42                       		tst.w	d2
0001DFF2 6700                       		beq.s	loc_1CAA2
0001DFF4 383C 0001                  		move.w	#1,d4
0001DFF8                            
0001DFF8                            loc_1CAA2:
0001DFF8 4A44                       		tst.w	d4
0001DFFA 6700                       		beq.s	Hud_ClrLives
0001DFFC                            
0001DFFC                            loc_1CAA6:
0001DFFC EB4A                       		lsl.w	#5,d2
0001DFFE 47F1 2000                  		lea	(a1,d2.w),a3
0001E002 2C9B                       		move.l	(a3)+,(a6)
0001E004 2C9B                       		move.l	(a3)+,(a6)
0001E006 2C9B                       		move.l	(a3)+,(a6)
0001E008 2C9B                       		move.l	(a3)+,(a6)
0001E00A 2C9B                       		move.l	(a3)+,(a6)
0001E00C 2C9B                       		move.l	(a3)+,(a6)
0001E00E 2C9B                       		move.l	(a3)+,(a6)
0001E010 2C9B                       		move.l	(a3)+,(a6)
0001E012                            
0001E012                            loc_1CABC:
0001E012 0680 0040 0000             		addi.l	#$400000,d0
0001E018 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E01C                            
0001E01C 4E75                       		rts	
0001E01E                            ; ===========================================================================
0001E01E                            
0001E01E                            Hud_ClrLives:
0001E01E 4A46                       		tst.w	d6
0001E020 67DA                       		beq.s	loc_1CAA6
0001E022 7A07                       		moveq	#7,d5
0001E024                            
0001E024                            Hud_ClrLivesLoop:
0001E024 2CBC 0000 0000             		move.l	#0,(a6)
0001E02A 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E02E 60E2                       		bra.s	loc_1CABC
0001E030                            ; End of function Hud_Lives
0001E030                            
0001E030                            ; ===========================================================================
0001E030                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E330                            		even
0001E330                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E470                            		even
0001E470                            ; ===========================================================================
0001E470                            ; ---------------------------------------------------------------------------
0001E470                            ; When debug mode is currently in use
0001E470                            ; ---------------------------------------------------------------------------
0001E470                            
0001E470                            DebugMode:				; XREF: Obj01; Obj09
0001E470 7000                       		moveq	#0,d0
0001E472 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E476 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E47A 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E47E                            ; ===========================================================================
0001E47E 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E480 0000                       		dc.w Debug_Skip-Debug_Index
0001E482                            ; ===========================================================================
0001E482                            
0001E482                            Debug_Main:				; XREF: Debug_Index
0001E482 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E486 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E48C 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E492 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E498 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E49E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E4A4 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E4AA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E4B0 117C 0000 001A             		move.b	#0,$1A(a0)
0001E4B6 117C 0000 001C             		move.b	#0,$1C(a0)
0001E4BC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E4C2 6600                       		bne.s	Debug_Zone	; if not, branch
0001E4C4 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E4CA 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E4D0 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E4D2 6000                       		bra.s	Debug_UseList
0001E4D4                            ; ===========================================================================
0001E4D4                            
0001E4D4                            Debug_Zone:
0001E4D4 7000                       		moveq	#0,d0
0001E4D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E4DA                            
0001E4DA                            Debug_UseList:
0001E4DA 45F9 0000 0000             		lea	(DebugList).l,a2
0001E4E0 D040                       		add.w	d0,d0
0001E4E2 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E4E6 3C1A                       		move.w	(a2)+,d6
0001E4E8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E4EC 6200                       		bhi.s	loc_1CF9E
0001E4EE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001E4F4                            
0001E4F4                            loc_1CF9E:
0001E4F4 6100 0000                  		bsr.w	Debug_ShowItem
0001E4F8 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E4FE 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001E504                            
0001E504                            Debug_Skip:				; XREF: Debug_Index
0001E504 7006                       		moveq	#6,d0
0001E506 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001E50C 6700                       		beq.s	loc_1CFBE
0001E50E 7000                       		moveq	#0,d0
0001E510 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E514                            
0001E514                            loc_1CFBE:
0001E514 45F9 0000 0000             		lea	(DebugList).l,a2
0001E51A D040                       		add.w	d0,d0
0001E51C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E520 3C1A                       		move.w	(a2)+,d6
0001E522 6100 0000                  		bsr.w	Debug_Control
0001E526 4EF9 0000 E7E4             		jmp	DisplaySprite
0001E52C                            
0001E52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E52C                            
0001E52C                            
0001E52C                            Debug_Control:
0001E52C 7800                       		moveq	#0,d4
0001E52E 323C 0001                  		move.w	#1,d1
0001E532 1838 F605                  		move.b	($FFFFF605).w,d4
0001E536 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001E53A 6600                       		bne.s	loc_1D018	; if yes, branch
0001E53C 1038 F604                  		move.b	($FFFFF604).w,d0
0001E540 0240 000F                  		andi.w	#$F,d0
0001E544 6600                       		bne.s	loc_1D000
0001E546 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E54C 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001E552 6000 0000                  		bra.w	Debug_BackItem
0001E556                            ; ===========================================================================
0001E556                            
0001E556                            loc_1D000:
0001E556 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001E55A 6600                       		bne.s	loc_1D01C
0001E55C 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001E562 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001E566 6600                       		bne.s	loc_1D018
0001E568 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001E56E                            
0001E56E                            loc_1D018:
0001E56E 1838 F604                  		move.b	($FFFFF604).w,d4
0001E572                            
0001E572                            loc_1D01C:
0001E572 7200                       		moveq	#0,d1
0001E574 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001E578 5241                       		addq.w	#1,d1
0001E57A 4841                       		swap	d1
0001E57C E881                       		asr.l	#4,d1
0001E57E 2428 000C                  		move.l	$C(a0),d2
0001E582 2628 0008                  		move.l	8(a0),d3
0001E586 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001E58A 6700                       		beq.s	loc_1D03C	; if not, branch
0001E58C 9481                       		sub.l	d1,d2
0001E58E 6400                       		bcc.s	loc_1D03C
0001E590 7400                       		moveq	#0,d2
0001E592                            
0001E592                            loc_1D03C:
0001E592 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001E596 6700                       		beq.s	loc_1D052	; if not, branch
0001E598 D481                       		add.l	d1,d2
0001E59A 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001E5A0 6500                       		bcs.s	loc_1D052
0001E5A2 243C 07FF 0000             		move.l	#$7FF0000,d2
0001E5A8                            
0001E5A8                            loc_1D052:
0001E5A8 0804 0002                  		btst	#2,d4
0001E5AC 6700                       		beq.s	loc_1D05E
0001E5AE 9681                       		sub.l	d1,d3
0001E5B0 6400                       		bcc.s	loc_1D05E
0001E5B2 7600                       		moveq	#0,d3
0001E5B4                            
0001E5B4                            loc_1D05E:
0001E5B4 0804 0003                  		btst	#3,d4
0001E5B8 6700                       		beq.s	loc_1D066
0001E5BA D681                       		add.l	d1,d3
0001E5BC                            
0001E5BC                            loc_1D066:
0001E5BC 2142 000C                  		move.l	d2,$C(a0)
0001E5C0 2143 0008                  		move.l	d3,8(a0)
0001E5C4                            
0001E5C4                            Debug_BackItem:
0001E5C4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001E5CA 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E5CC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E5D2 6700                       		beq.s	Debug_NextItem	; if not, branch
0001E5D4 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001E5D8 6400                       		bcc.s	Debug_NoLoop
0001E5DA DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001E5DE 6000                       		bra.s	Debug_NoLoop
0001E5E0                            ; ===========================================================================
0001E5E0                            
0001E5E0                            Debug_NextItem:
0001E5E0 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001E5E6 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E5E8 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001E5EC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E5F0 6200                       		bhi.s	Debug_NoLoop
0001E5F2 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001E5F8                            
0001E5F8                            Debug_NoLoop:
0001E5F8 6000 0000                  		bra.w	Debug_ShowItem
0001E5FC                            ; ===========================================================================
0001E5FC                            
0001E5FC                            Debug_MakeItem:
0001E5FC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E602 6700                       		beq.s	Debug_Exit	; if not, branch
0001E604 4EB9 0000 EC6A             		jsr	SingleObjLoad
0001E60A 6600                       		bne.s	Debug_Exit
0001E60C 3368 0008 0008             		move.w	8(a0),8(a1)
0001E612 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E618 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001E61C 1368 0001 0001             		move.b	1(a0),1(a1)
0001E622 1368 0001 0022             		move.b	1(a0),$22(a1)
0001E628 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001E62E 7000                       		moveq	#0,d0
0001E630 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E634 E748                       		lsl.w	#3,d0
0001E636 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001E63C 4E75                       		rts	
0001E63E                            ; ===========================================================================
0001E63E                            
0001E63E                            Debug_Exit:
0001E63E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001E644 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001E646 7000                       		moveq	#0,d0
0001E648 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001E64C 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E654 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E65A 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001E65E 3140 000A                  		move.w	d0,$A(a0)
0001E662 3140 000E                  		move.w	d0,$E(a0)
0001E666 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001E66C 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001E672 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001E678 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001E67A 4278 F780                  		clr.w	($FFFFF780).w
0001E67E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001E684 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E68C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E692 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001E698 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001E69E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E6A4                            
0001E6A4                            Debug_DoNothing:
0001E6A4 4E75                       		rts	
0001E6A6                            ; End of function Debug_Control
0001E6A6                            
0001E6A6                            
0001E6A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6A6                            
0001E6A6                            
0001E6A6                            Debug_ShowItem:				; XREF: Debug_Main
0001E6A6 7000                       		moveq	#0,d0
0001E6A8 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E6AC E748                       		lsl.w	#3,d0
0001E6AE 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001E6B4 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001E6BA 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001E6C0 4E75                       		rts	
0001E6C2                            ; End of function Debug_ShowItem
0001E6C2                            
0001E6C2                            ; ===========================================================================
0001E6C2                            ; ---------------------------------------------------------------------------
0001E6C2                            ; Debug	list pointers
0001E6C2                            ; ---------------------------------------------------------------------------
0001E6C2                            DebugList:
0001E6C2                            	include "_inc\Debug list pointers.asm"
0001E6C2                            ; ---------------------------------------------------------------------------
0001E6C2                            ; Debug	list pointers
0001E6C2                            ; ---------------------------------------------------------------------------
0001E6C2 0000                       	dc.w Debug_GHZ-DebugList
0001E6C4 0000                       	dc.w Debug_LZ-DebugList
0001E6C6 0000                       	dc.w Debug_MZ-DebugList
0001E6C8 0000                       	dc.w Debug_SLZ-DebugList
0001E6CA 0000                       	dc.w Debug_SYZ-DebugList
0001E6CC 0000                       	dc.w Debug_SBZ-DebugList
0001E6CE 0000                       	dc.w Debug_Ending-DebugList
0001E6D0 0000                       	dc.w Debug_GHZ-DebugList
0001E6D0 0000                       	dc.w Debug_GHZ-DebugList
0001E6D2                            
0001E6D2                            ; ---------------------------------------------------------------------------
0001E6D2                            ; Debug	list - Green Hill
0001E6D2                            ; ---------------------------------------------------------------------------
0001E6D2                            Debug_GHZ:
0001E6D2                            	include "_inc\Debug list - GHZ.asm"
0001E6D2                            ; ---------------------------------------------------------------------------
0001E6D2                            ; Debug	list - Green Hill
0001E6D2                            ; ---------------------------------------------------------------------------
0001E6D2 0010                       	dc.w $10			; number of items in list
0001E6D4 2500 AFD0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E6D8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E6DC 2600 B5D6                  	dc.l Map_obj26+$26000000
0001E6E0 0000 0680                  	dc.b 0,	0, 6, $80
0001E6E4 1F00 A7C8                  	dc.l Map_obj1F+$1F000000
0001E6E8 0000 0400                  	dc.b 0,	0, 4, 0
0001E6EC 2200 AA84                  	dc.l Map_obj22+$22000000
0001E6F0 0000 0444                  	dc.b 0,	0, 4, $44
0001E6F4 2B00 BC4A                  	dc.l Map_obj2B+$2B000000
0001E6F8 0000 047B                  	dc.b 0,	0, 4, $7B
0001E6FC 3600 E186                  	dc.l Map_obj36+$36000000
0001E700 0000 051B                  	dc.b 0,	0, 5, $1B
0001E704 1800 90D6                  	dc.l Map_obj18+$18000000
0001E708 0000 4000                  	dc.b 0,	0, $40,	0
0001E70C 3B00 E2AC                  	dc.l Map_obj3B+$3B000000
0001E710 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E714 4001 097E                  	dc.l Map_obj40+$40000000
0001E718 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E71C 4100 EEF8                  	dc.l Map_obj41+$41000000
0001E720 0000 0523                  	dc.b 0,	0, 5, $23
0001E724 4200 F11E                  	dc.l Map_obj42+$42000000
0001E728 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E72C 4400 F42C                  	dc.l Map_obj44+$44000000
0001E730 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E734 1900 91D6                  	dc.l Map_obj48+$19000000
0001E738 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E73C 7901 83D0                  	dc.l Map_obj79+$79000000
0001E740 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E744 4B00 B010                  	dc.l Map_obj4B+$4B000000
0001E748 0000 2400                  	dc.b 0,	0, $24,	0
0001E74C 7D01 8520                  	dc.l Map_obj7D+$7D000000
0001E750 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E754                            	even
0001E754                            	even
0001E754                            
0001E754                            ; ---------------------------------------------------------------------------
0001E754                            ; Debug	list - Labyrinth
0001E754                            ; ---------------------------------------------------------------------------
0001E754                            Debug_LZ:
0001E754                            	include "_inc\Debug list - LZ.asm"
0001E754                            ; ---------------------------------------------------------------------------
0001E754                            ; Debug	list - Labyrinth
0001E754                            ; ---------------------------------------------------------------------------
0001E754 0019                       	dc.w $19
0001E756 2500 AFD0                  	dc.l Map_obj25+$25000000
0001E75A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E75E 2600 B5D6                  	dc.l Map_obj26+$26000000
0001E762 0000 0680                  	dc.b 0,	0, 6, $80
0001E766 4100 EEF8                  	dc.l Map_obj41+$41000000
0001E76A 0000 0523                  	dc.b 0,	0, 5, $23
0001E76E 2C00 BCFA                  	dc.l Map_obj2C+$2C000000
0001E772 0800 2486                  	dc.b 8,	0, $24,	$86
0001E776 2D00 BEEE                  	dc.l Map_obj2D+$2D000000
0001E77A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E77E 1601 3158                  	dc.l Map_obj16+$16000000
0001E782 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E786 1601 3158                  	dc.l Map_obj16+$16000000
0001E78A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E78E 3300 D3A6                  	dc.l Map_obj33+$33000000
0001E792 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E796 3200 CF66                  	dc.l Map_obj32+$32000000
0001E79A 0000 0513                  	dc.b 0,	0, 5, $13
0001E79E 3600 E186                  	dc.l Map_obj36+$36000000
0001E7A2 0000 051B                  	dc.b 0,	0, 5, $1B
0001E7A6 5201 127A                  	dc.l Map_obj52a+$52000000
0001E7AA 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E7AE 6101 3380                  	dc.l Map_obj61+$61000000
0001E7B2 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E7B6 6101 3380                  	dc.l Map_obj61+$61000000
0001E7BA 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E7BE 6101 3380                  	dc.l Map_obj61+$61000000
0001E7C2 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E7C6 6201 34D4                  	dc.l Map_obj62+$62000000
0001E7CA 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E7CE 6101 3380                  	dc.l Map_obj61+$61000000
0001E7D2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E7D6 6101 3380                  	dc.l Map_obj61+$61000000
0001E7DA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E7DE 6301 3832                  	dc.l Map_obj63+$63000000
0001E7E2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E7E6 6001 30A2                  	dc.l Map_obj60+$60000000
0001E7EA 0000 0467                  	dc.b 0,	0, 4, $67
0001E7EE 6401 3B78                  	dc.l Map_obj64+$64000000
0001E7F2 8413 8348                  	dc.b $84, $13, $83, $48
0001E7F6 6501 3D00                  	dc.l Map_obj65+$65000000
0001E7FA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E7FE 6501 3D00                  	dc.l Map_obj65+$65000000
0001E802 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E806 0B01 24F2                  	dc.l Map_obj0B+$B000000
0001E80A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E80E 0C01 25C2                  	dc.l Map_obj0C+$C000000
0001E812 0200 4328                  	dc.b 2,	0, $43,	$28
0001E816 7901 83D0                  	dc.l Map_obj79+$79000000
0001E81A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E81E                            	even
0001E81E                            	even
0001E81E                            
0001E81E                            ; ---------------------------------------------------------------------------
0001E81E                            ; Debug	list - Marble
0001E81E                            ; ---------------------------------------------------------------------------
0001E81E                            Debug_MZ:
0001E81E                            	include "_inc\Debug list - MZ.asm"
0001E81E                            ; ---------------------------------------------------------------------------
0001E81E                            ; Debug	list - Marble
0001E81E                            ; ---------------------------------------------------------------------------
0001E81E 0012                       	dc.w $12
0001E820 2500 AFD0                  	dc.l Map_obj25+$25000000
0001E824 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E828 2600 B5D6                  	dc.l Map_obj26+$26000000
0001E82C 0000 0680                  	dc.b 0,	0, 6, $80
0001E830 2200 AA84                  	dc.l Map_obj22+$22000000
0001E834 0000 0444                  	dc.b 0,	0, 4, $44
0001E838 3600 E186                  	dc.l Map_obj36+$36000000
0001E83C 0000 051B                  	dc.b 0,	0, 5, $1B
0001E840 4100 EEF8                  	dc.l Map_obj41+$41000000
0001E844 0000 0523                  	dc.b 0,	0, 5, $23
0001E848 1300 C430                  	dc.l Map_obj14+$13000000
0001E84C 0000 0345                  	dc.b 0,	0, 3, $45
0001E850 4600 FADE                  	dc.l Map_obj46+$46000000
0001E854 0000 4000                  	dc.b 0,	0, $40,	0
0001E858 4C01 042A                  	dc.l Map_obj4C+$4C000000
0001E85C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E860 4E01 070E                  	dc.l Map_obj4E+$4E000000
0001E864 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E868 3300 D3A6                  	dc.l Map_obj33+$33000000
0001E86C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E870 5001 0B0C                  	dc.l Map_obj50+$50000000
0001E874 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E878 5101 0FAE                  	dc.l Map_obj51+$51000000
0001E87C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E880 5201 1224                  	dc.l Map_obj52+$52000000
0001E884 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E888 5300 976E                  	dc.l Map_obj53+$53000000
0001E88C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E890 5401 03F0                  	dc.l Map_obj54+$54000000
0001E894 0000 8680                  	dc.b 0,	0, $86,	$80
0001E898 5501 1418                  	dc.l Map_obj55+$55000000
0001E89C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E8A0 7801 804A                  	dc.l Map_obj78+$78000000
0001E8A4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E8A8 7901 83D0                  	dc.l Map_obj79+$79000000
0001E8AC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E8B0                            	even
0001E8B0                            	even
0001E8B0                            
0001E8B0                            ; ---------------------------------------------------------------------------
0001E8B0                            ; Debug	list - Star Light
0001E8B0                            ; ---------------------------------------------------------------------------
0001E8B0                            Debug_SLZ:
0001E8B0                            	include "_inc\Debug list - SLZ.asm"
0001E8B0                            ; ---------------------------------------------------------------------------
0001E8B0                            ; Debug	list - Star Light
0001E8B0                            ; ---------------------------------------------------------------------------
0001E8B0 000F                       	dc.w $F
0001E8B2 2500 AFD0                  	dc.l Map_obj25+$25000000
0001E8B6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E8BA 2600 B5D6                  	dc.l Map_obj26+$26000000
0001E8BE 0000 0680                  	dc.b 0,	0, 6, $80
0001E8C2 5901 1F1A                  	dc.l Map_obj59+$59000000
0001E8C6 0000 4000                  	dc.b 0,	0, $40,	0
0001E8CA 5300 976E                  	dc.l Map_obj53+$53000000
0001E8CE 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E8D2 1800 9134                  	dc.l Map_obj18b+$18000000
0001E8D6 0000 4000                  	dc.b 0,	0, $40,	0
0001E8DA 5A01 2054                  	dc.l Map_obj5A+$5A000000
0001E8DE 0000 4000                  	dc.b 0,	0, $40,	0
0001E8E2 5B01 220C                  	dc.l Map_obj5B+$5B000000
0001E8E6 0000 4000                  	dc.b 0,	0, $40,	0
0001E8EA 5D01 27DC                  	dc.l Map_obj5D+$5D000000
0001E8EE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E8F2 5E01 2B6E                  	dc.l Map_obj5E+$5E000000
0001E8F6 0000 0374                  	dc.b 0,	0, 3, $74
0001E8FA 4100 EEF8                  	dc.l Map_obj41+$41000000
0001E8FE 0000 0523                  	dc.b 0,	0, 5, $23
0001E902 1300 C430                  	dc.l Map_obj14+$13000000
0001E906 0000 0480                  	dc.b 0,	0, 4, $80
0001E90A 1C00 987E                  	dc.l Map_obj1C+$1C000000
0001E90E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E912 5F01 2DEC                  	dc.l Map_obj5F+$5F000000
0001E916 0000 0400                  	dc.b 0,	0, 4, 0
0001E91A 6001 30A2                  	dc.l Map_obj60+$60000000
0001E91E 0000 2429                  	dc.b 0,	0, $24,	$29
0001E922 7901 83D0                  	dc.l Map_obj79+$79000000
0001E926 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E92A                            	even
0001E92A                            	even
0001E92A                            
0001E92A                            ; ---------------------------------------------------------------------------
0001E92A                            ; Debug	list - Spring Yard
0001E92A                            ; ---------------------------------------------------------------------------
0001E92A                            Debug_SYZ:
0001E92A                            	include "_inc\Debug list - SYZ.asm"
0001E92A                            ; ---------------------------------------------------------------------------
0001E92A                            ; Debug	list - Spring Yard
0001E92A                            ; ---------------------------------------------------------------------------
0001E92A 000F                       	dc.w $F
0001E92C 2500 AFD0                  	dc.l Map_obj25+$25000000
0001E930 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E934 2600 B5D6                  	dc.l Map_obj26+$26000000
0001E938 0000 0680                  	dc.b 0,	0, 6, $80
0001E93C 3600 E186                  	dc.l Map_obj36+$36000000
0001E940 0000 051B                  	dc.b 0,	0, 5, $1B
0001E944 4100 EEF8                  	dc.l Map_obj41+$41000000
0001E948 0000 0523                  	dc.b 0,	0, 5, $23
0001E94C 4300 F37E                  	dc.l Map_obj43+$43000000
0001E950 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E954 1200 FB5C                  	dc.l Map_obj12+$12000000
0001E958 0000 0000                  	dc.b 0,	0, 0, 0
0001E95C 4700 FCD8                  	dc.l Map_obj47+$47000000
0001E960 0000 0380                  	dc.b 0,	0, 3, $80
0001E964 1F00 A7C8                  	dc.l Map_obj1F+$1F000000
0001E968 0000 0400                  	dc.b 0,	0, 4, 0
0001E96C 2200 AA84                  	dc.l Map_obj22+$22000000
0001E970 0000 0444                  	dc.b 0,	0, 4, $44
0001E974 5001 0B0C                  	dc.l Map_obj50+$50000000
0001E978 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E97C 1800 9122                  	dc.l Map_obj18a+$18000000
0001E980 0000 4000                  	dc.b 0,	0, $40,	0
0001E984 5601 18DA                  	dc.l Map_obj56+$56000000
0001E988 0000 4000                  	dc.b 0,	0, $40,	0
0001E98C 3200 CF66                  	dc.l Map_obj32+$32000000
0001E990 0000 0513                  	dc.b 0,	0, 5, $13
0001E994 7801 804A                  	dc.l Map_obj78+$78000000
0001E998 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E99C 7901 83D0                  	dc.l Map_obj79+$79000000
0001E9A0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E9A4                            	even
0001E9A4                            	even
0001E9A4                            
0001E9A4                            ; ---------------------------------------------------------------------------
0001E9A4                            ; Debug	list - Scrap Brain
0001E9A4                            ; ---------------------------------------------------------------------------
0001E9A4                            Debug_SBZ:
0001E9A4                            	include "_inc\Debug list - SBZ.asm"
0001E9A4                            ; ---------------------------------------------------------------------------
0001E9A4                            ; Debug	list - Scrap Brain
0001E9A4                            ; ---------------------------------------------------------------------------
0001E9A4 001D                       	dc.w $1D
0001E9A6 2500 AFD0                  	dc.l Map_obj25+$25000000
0001E9AA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E9AE 2600 B5D6                  	dc.l Map_obj26+$26000000
0001E9B2 0000 0680                  	dc.b 0,	0, 6, $80
0001E9B6 5F01 2DEC                  	dc.l Map_obj5F+$5F000000
0001E9BA 0000 0400                  	dc.b 0,	0, 4, 0
0001E9BE 6001 30A2                  	dc.l Map_obj60+$60000000
0001E9C2 0000 0429                  	dc.b 0,	0, 4, $29
0001E9C6 7801 804A                  	dc.l Map_obj78+$78000000
0001E9CA 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E9CE 1501 1C76                  	dc.l Map_obj15b+$15000000
0001E9D2 0702 4391                  	dc.b 7,	2, $43,	$91
0001E9D6 6701 6962                  	dc.l Map_obj67+$67000000
0001E9DA E000 C344                  	dc.b $E0, 0, $C3, $44
0001E9DE 5201 1224                  	dc.l Map_obj52+$52000000
0001E9E2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E9E6 3200 CF66                  	dc.l Map_obj32+$32000000
0001E9EA 0000 0513                  	dc.b 0,	0, 5, $13
0001E9EE 6901 6BBC                  	dc.l Map_obj69+$69000000
0001E9F2 0300 4492                  	dc.b 3,	0, $44,	$92
0001E9F6 6901 6C16                  	dc.l Map_obj69a+$69000000
0001E9FA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E9FE 6A01 6E74                  	dc.l Map_obj6A+$6A000000
0001EA02 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EA06 5300 976E                  	dc.l Map_obj53+$53000000
0001EA0A 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EA0E 5201 1224                  	dc.l Map_obj52+$52000000
0001EA12 3903 4460                  	dc.b $39, 3, $44, $60
0001EA16 6B01 7244                  	dc.l Map_obj6B+$6B000000
0001EA1A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EA1E 2A00 9A14                  	dc.l Map_obj2A+$2A000000
0001EA22 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EA26 6B01 7244                  	dc.l Map_obj6B+$6B000000
0001EA2A 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EA2E 6A01 6E74                  	dc.l Map_obj6A+$6A000000
0001EA32 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EA36 6B01 7244                  	dc.l Map_obj6B+$6B000000
0001EA3A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EA3E 6A01 6E74                  	dc.l Map_obj6A+$6A000000
0001EA42 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EA46 6B01 7244                  	dc.l Map_obj6B+$6B000000
0001EA4A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EA4E 6C01 7406                  	dc.l Map_obj6C+$6C000000
0001EA52 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EA56 6D00 F7CE                  	dc.l Map_obj6D+$6D000000
0001EA5A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EA5E 6D00 F7CE                  	dc.l Map_obj6D+$6D000000
0001EA62 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EA66 6E01 74BC                  	dc.l Map_obj6E+$6E000000
0001EA6A 0400 047E                  	dc.b 4,	0, 4, $7E
0001EA6E 7001 790E                  	dc.l Map_obj70+$70000000
0001EA72 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EA76 7101 2682                  	dc.l Map_obj71+$71000000
0001EA7A 1100 8680                  	dc.b $11, 0, $86, $80
0001EA7E 1E00 9ED2                  	dc.l Map_obj1E+$1E000000
0001EA82 0400 2302                  	dc.b 4,	0, $23,	2
0001EA86 7901 83D0                  	dc.l Map_obj79+$79000000
0001EA8A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EA8E                            	even
0001EA8E                            	even
0001EA8E                            
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            ; Debug	list - ending sequence / special stage
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            Debug_Ending:
0001EA8E                            	include "_inc\Debug list - Ending and SS.asm"
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            ; Debug	list - ending sequence / special stage
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E 000D                       	dc.w $D
0001EA90 2500 AFD0                  	dc.l Map_obj25+$25000000
0001EA94 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EA98 4700 FCD8                  	dc.l Map_obj47+$47000000
0001EA9C 0000 0380                  	dc.b 0,	0, 3, $80
0001EAA0 2800 A4FA                  	dc.l Map_obj28a+$28000000
0001EAA4 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EAA8 2800 A4FA                  	dc.l Map_obj28a+$28000000
0001EAAC 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EAB0 2800 A4FA                  	dc.l Map_obj28a+$28000000
0001EAB4 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EAB8 2800 A4E2                  	dc.l Map_obj28+$28000000
0001EABC 0D00 0553                  	dc.b $D, 0, 5, $53
0001EAC0 2800 A4E2                  	dc.l Map_obj28+$28000000
0001EAC4 0E00 0553                  	dc.b $E, 0, 5, $53
0001EAC8 2800 A4E2                  	dc.l Map_obj28+$28000000
0001EACC 0F00 0573                  	dc.b $F, 0, 5, $73
0001EAD0 2800 A4E2                  	dc.l Map_obj28+$28000000
0001EAD4 1000 0573                  	dc.b $10, 0, 5,	$73
0001EAD8 2800 A4FA                  	dc.l Map_obj28a+$28000000
0001EADC 1100 0585                  	dc.b $11, 0, 5,	$85
0001EAE0 2800 A512                  	dc.l Map_obj28b+$28000000
0001EAE4 1200 0593                  	dc.b $12, 0, 5,	$93
0001EAE8 2800 A4FA                  	dc.l Map_obj28a+$28000000
0001EAEC 1300 0565                  	dc.b $13, 0, 5,	$65
0001EAF0 2800 A512                  	dc.l Map_obj28b+$28000000
0001EAF4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001EAF8                            	even
0001EAF8                            	even
0001EAF8                            
0001EAF8                            ; ---------------------------------------------------------------------------
0001EAF8                            ; Main level load blocks
0001EAF8                            ; ---------------------------------------------------------------------------
0001EAF8                            MainLoadBlocks:
0001EAF8                            	include "_inc\Main level load blocks.asm"
0001EAF8                            ; ---------------------------------------------------------------------------
0001EAF8                            ; Main level load blocks
0001EAF8                            ;
0001EAF8                            ; ===FORMAT===
0001EAF8                            ; level	patterns + (1st	PLC num	* 10^6)
0001EAF8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001EAF8                            ; 256x256 mappings
0001EAF8                            ; blank, music (unused), pal index (unused), pal index
0001EAF8                            ; ---------------------------------------------------------------------------
0001EAF8 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001EAFC 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001EB00 0000 0000                  	dc.l Blk256_GHZ
0001EB04 0081 0404                  	dc.b 0,	$81, 4,	4
0001EB08 0000 0000                  	dc.l Nem_LZ|6<<24
0001EB0C 0000 0000                  	dc.l Blk16_LZ|7<<24
0001EB10 0000 0000                  	dc.l Blk256_LZ
0001EB14 0082 0505                  	dc.b 0,	$82, 5,	5
0001EB18 0000 0000                  	dc.l Nem_MZ|8<<24
0001EB1C 0000 0000                  	dc.l Blk16_MZ|9<<24
0001EB20 0000 0000                  	dc.l Blk256_MZ
0001EB24 0083 0606                  	dc.b 0,	$83, 6,	6
0001EB28 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001EB2C 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001EB30 0000 0000                  	dc.l Blk256_SLZ
0001EB34 0084 0707                  	dc.b 0,	$84, 7,	7
0001EB38 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001EB3C 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001EB40 0000 0000                  	dc.l Blk256_SYZ
0001EB44 0085 0808                  	dc.b 0,	$85, 8,	8
0001EB48 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001EB4C 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001EB50 0000 0000                  	dc.l Blk256_SBZ
0001EB54 0086 0909                  	dc.b 0,	$86, 9,	9
0001EB58 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001EB5C 0000 0000                  	dc.l Blk16_GHZ
0001EB60 0000 0000                  	dc.l Blk256_GHZ
0001EB64 0086 1313                  	dc.b 0,	$86, $13, $13
0001EB68                            ; there you go lol
0001EB68 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001EB6C 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001EB70 0000 0000                  	dc.l Blk256_BHZ
0001EB74 009E 1515                  	dc.b 0,	$9E, $15, $15
0001EB78                            	even
0001EB78                            	even
0001EB78                            
0001EB78                            ; ---------------------------------------------------------------------------
0001EB78                            ; Pattern load cues
0001EB78                            ; ---------------------------------------------------------------------------
0001EB78                            ArtLoadCues:
0001EB78                            	include "_inc\Pattern load cues.asm"
0001EB78                            ; ---------------------------------------------------------------------------
0001EB78                            ; Pattern load cues - index
0001EB78                            ; ---------------------------------------------------------------------------
0001EB78 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001EB7C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001EB80 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001EB84 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001EB88 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001EB8C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001EB90 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001EB94 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001EB98 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001EB9C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001EBA0 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001EBA4 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001EBA8 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001EBAC 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001EBB0 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001EBB4 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001EBB8                            
0001EBB8 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001EBBC 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001EBBE 0000                       	dc.w PLC_TruthNuke-ArtLoadCues	; GMZ
0001EBC0                            ; ---------------------------------------------------------------------------
0001EBC0                            ; Pattern load cues - standard block 1
0001EBC0                            ; ---------------------------------------------------------------------------
0001EBC0 0004                       PLC_Main:	dc.w 4
0001EBC2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001EBC6 F400                       		dc.w $F400
0001EBC8 0000 0000                  		dc.l Nem_Hud		; HUD
0001EBCC D940                       		dc.w $D940
0001EBCE 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001EBD2 FA80                       		dc.w $FA80
0001EBD4 0000 0000                  		dc.l Nem_Ring		; rings
0001EBD8 F640                       		dc.w $F640
0001EBDA 0000 0000                  		dc.l Nem_Points		; points from enemy
0001EBDE F2E0                       		dc.w $F2E0
0001EBE0                            ; ---------------------------------------------------------------------------
0001EBE0                            ; Pattern load cues - standard block 2
0001EBE0                            ; ---------------------------------------------------------------------------
0001EBE0 0002                       PLC_Main2:	dc.w 2
0001EBE2 0000 0000                  		dc.l Nem_Monitors	; monitors
0001EBE6 D000                       		dc.w $D000
0001EBE8 0000 0000                  		dc.l Nem_Shield		; shield
0001EBEC A820                       		dc.w $A820
0001EBEE 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001EBF2 AB80                       		dc.w $AB80
0001EBF4                            ; ---------------------------------------------------------------------------
0001EBF4                            ; Pattern load cues - explosion
0001EBF4                            ; ---------------------------------------------------------------------------
0001EBF4 0000                       PLC_Explode:	dc.w 0
0001EBF6 0000 0000                  		dc.l Nem_Explode	; explosion
0001EBFA B400                       		dc.w $B400
0001EBFC                            ; ---------------------------------------------------------------------------
0001EBFC                            ; Pattern load cues - game/time	over
0001EBFC                            ; ---------------------------------------------------------------------------
0001EBFC 0000                       PLC_GameOver:	dc.w 0
0001EBFE 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001EC02 ABC0                       		dc.w $ABC0
0001EC04                            ; ---------------------------------------------------------------------------
0001EC04                            ; Pattern load cues - Green Hill
0001EC04                            ; ---------------------------------------------------------------------------
0001EC04 000B                       PLC_GHZ:	dc.w $B
0001EC06 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001EC0A 0000                       		dc.w 0
0001EC0C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001EC10 39A0                       		dc.w $39A0
0001EC12 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EC16 6B00                       		dc.w $6B00
0001EC18 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EC1C 7A00                       		dc.w $7A00
0001EC1E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EC22 8000                       		dc.w $8000
0001EC24 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EC28 8880                       		dc.w $8880
0001EC2A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EC2E 8F60                       		dc.w $8F60
0001EC30 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EC34 9360                       		dc.w $9360
0001EC36 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EC3A 9E00                       		dc.w $9E00
0001EC3C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EC40 A360                       		dc.w $A360
0001EC42 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EC46 A460                       		dc.w $A460
0001EC48 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EC4C A660                       		dc.w $A660
0001EC4E 0005                       PLC_GHZ2:	dc.w 5
0001EC50 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EC54 7000                       		dc.w $7000
0001EC56 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EC5A 71C0                       		dc.w $71C0
0001EC5C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EC60 7300                       		dc.w $7300
0001EC62 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EC66 7540                       		dc.w $7540
0001EC68 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EC6C A1E0                       		dc.w $A1E0
0001EC6E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EC72 6980                       		dc.w $6980
0001EC74                            ; ---------------------------------------------------------------------------
0001EC74                            ; Pattern load cues - Labyrinth
0001EC74                            ; ---------------------------------------------------------------------------
0001EC74 000B                       PLC_LZ:		dc.w $B
0001EC76 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001EC7A 0000                       		dc.w 0
0001EC7C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001EC80 3C00                       		dc.w $3C00
0001EC82 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001EC86 3E00                       		dc.w $3E00
0001EC88 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001EC8C 4B20                       		dc.w $4B20
0001EC8E 0000 0000                  		dc.l Nem_Water		; water	surface
0001EC92 6000                       		dc.w $6000
0001EC94 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001EC98 6200                       		dc.w $6200
0001EC9A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001EC9E 6500                       		dc.w $6500
0001ECA0 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001ECA4 6900                       		dc.w $6900
0001ECA6 0000 0000                  		dc.l Nem_LzBlock3	; block
0001ECAA 7780                       		dc.w $7780
0001ECAC 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001ECB0 7880                       		dc.w $7880
0001ECB2 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001ECB6 7980                       		dc.w $7980
0001ECB8 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001ECBC 94C0                       		dc.w $94C0
0001ECBE 000C                       PLC_LZ2:	dc.w $C
0001ECC0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001ECC4 7BC0                       		dc.w $7BC0
0001ECC6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001ECCA 7CC0                       		dc.w $7CC0
0001ECCC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001ECD0 7EC0                       		dc.w $7EC0
0001ECD2 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001ECD6 5D20                       		dc.w $5D20
0001ECD8 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001ECDC 8800                       		dc.w $8800
0001ECDE 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001ECE2 89E0                       		dc.w $89E0
0001ECE4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001ECE8 8CE0                       		dc.w $8CE0
0001ECEA 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001ECEE 90C0                       		dc.w $90C0
0001ECF0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001ECF4 A1E0                       		dc.w $A1E0
0001ECF6 0000 0000                  		dc.l Nem_Cork		; cork block
0001ECFA A000                       		dc.w $A000
0001ECFC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED00 A360                       		dc.w $A360
0001ED02 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED06 A460                       		dc.w $A460
0001ED08 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED0C A660                       		dc.w $A660
0001ED0E                            ; ---------------------------------------------------------------------------
0001ED0E                            ; Pattern load cues - Marble
0001ED0E                            ; ---------------------------------------------------------------------------
0001ED0E 0009                       PLC_MZ:		dc.w 9
0001ED10 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001ED14 0000                       		dc.w 0
0001ED16 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001ED1A 6000                       		dc.w $6000
0001ED1C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001ED20 68A0                       		dc.w $68A0
0001ED22 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001ED26 7000                       		dc.w $7000
0001ED28 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001ED2C 71C0                       		dc.w $71C0
0001ED2E 0000 0000                  		dc.l Nem_Lava		; lava
0001ED32 7500                       		dc.w $7500
0001ED34 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001ED38 8880                       		dc.w $8880
0001ED3A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001ED3E 8F60                       		dc.w $8F60
0001ED40 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001ED44 9700                       		dc.w $9700
0001ED46 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001ED4A 9FE0                       		dc.w $9FE0
0001ED4C 0004                       PLC_MZ2:	dc.w 4
0001ED4E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001ED52 A260                       		dc.w $A260
0001ED54 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED58 A360                       		dc.w $A360
0001ED5A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED5E A460                       		dc.w $A460
0001ED60 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED64 A660                       		dc.w $A660
0001ED66 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001ED6A 5700                       		dc.w $5700
0001ED6C                            ; ---------------------------------------------------------------------------
0001ED6C                            ; Pattern load cues - Star Light
0001ED6C                            ; ---------------------------------------------------------------------------
0001ED6C 0008                       PLC_SLZ:	dc.w 8
0001ED6E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001ED72 0000                       		dc.w 0
0001ED74 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001ED78 8000                       		dc.w $8000
0001ED7A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001ED7E 8520                       		dc.w $8520
0001ED80 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001ED84 9000                       		dc.w $9000
0001ED86 0000 0000                  		dc.l Nem_SlzBlock	; block
0001ED8A 9C00                       		dc.w $9C00
0001ED8C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001ED90 A260                       		dc.w $A260
0001ED92 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED96 A360                       		dc.w $A360
0001ED98 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED9C A460                       		dc.w $A460
0001ED9E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EDA2 A660                       		dc.w $A660
0001EDA4 0005                       PLC_SLZ2:	dc.w 5
0001EDA6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001EDAA 6E80                       		dc.w $6E80
0001EDAC 0000 0000                  		dc.l Nem_Fan		; fan
0001EDB0 7400                       		dc.w $7400
0001EDB2 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001EDB6 7980                       		dc.w $7980
0001EDB8 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001EDBC 7B80                       		dc.w $7B80
0001EDBE 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001EDC2 9B00                       		dc.w $9B00
0001EDC4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001EDC8 9E00                       		dc.w $9E00
0001EDCA                            ; ---------------------------------------------------------------------------
0001EDCA                            ; Pattern load cues - Spring Yard
0001EDCA                            ; ---------------------------------------------------------------------------
0001EDCA 0004                       PLC_SYZ:	dc.w 4
0001EDCC 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001EDD0 0000                       		dc.w 0
0001EDD2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EDD6 8000                       		dc.w $8000
0001EDD8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EDDC 8880                       		dc.w $8880
0001EDDE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001EDE2 8F60                       		dc.w $8F60
0001EDE4 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001EDE8 9700                       		dc.w $9700
0001EDEA 0007                       PLC_SYZ2:	dc.w 7
0001EDEC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EDF0 7000                       		dc.w $7000
0001EDF2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001EDF6 72C0                       		dc.w $72C0
0001EDF8 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001EDFC 7740                       		dc.w $7740
0001EDFE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EE02 9FE0                       		dc.w $9FE0
0001EE04 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EE08 A1E0                       		dc.w $A1E0
0001EE0A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EE0E A360                       		dc.w $A360
0001EE10 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EE14 A460                       		dc.w $A460
0001EE16 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EE1A A660                       		dc.w $A660
0001EE1C                            ; ---------------------------------------------------------------------------
0001EE1C                            ; Pattern load cues - Scrap Brain
0001EE1C                            ; ---------------------------------------------------------------------------
0001EE1C 000B                       PLC_SBZ:	dc.w $B
0001EE1E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001EE22 0000                       		dc.w 0
0001EE24 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001EE28 5800                       		dc.w $5800
0001EE2A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001EE2E 5D00                       		dc.w $5D00
0001EE30 0000 0000                  		dc.l Nem_Girder		; girder
0001EE34 5E00                       		dc.w $5E00
0001EE36 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001EE3A 6040                       		dc.w $6040
0001EE3C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001EE40 6880                       		dc.w $6880
0001EE42 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001EE46 6900                       		dc.w $6900
0001EE48 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001EE4C 7220                       		dc.w $7220
0001EE4E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001EE52 76A0                       		dc.w $76A0
0001EE54 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001EE58 7B20                       		dc.w $7B20
0001EE5A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EE5E 7EA0                       		dc.w $7EA0
0001EE60 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001EE64 9860                       		dc.w $9860
0001EE66 000C                       PLC_SBZ2:	dc.w $C
0001EE68 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EE6C 5600                       		dc.w $5600
0001EE6E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001EE72 8000                       		dc.w $8000
0001EE74 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EE78 8520                       		dc.w $8520
0001EE7A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001EE7E 8C00                       		dc.w $8C00
0001EE80 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001EE84 8DE0                       		dc.w $8DE0
0001EE86 0000 0000                  		dc.l Nem_Electric	; electric orb
0001EE8A 8FC0                       		dc.w $8FC0
0001EE8C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001EE90 9240                       		dc.w $9240
0001EE92 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EE96 7F20                       		dc.w $7F20
0001EE98 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001EE9C 9BE0                       		dc.w $9BE0
0001EE9E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EEA2 A1E0                       		dc.w $A1E0
0001EEA4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EEA8 A360                       		dc.w $A360
0001EEAA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EEAE A460                       		dc.w $A460
0001EEB0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EEB4 A660                       		dc.w $A660
0001EEB6                            ; ---------------------------------------------------------------------------
0001EEB6                            ; Pattern load cues - DR. Breen Hill
0001EEB6                            ; ---------------------------------------------------------------------------
0001EEB6 000A                       PLC_BHZ:	dc.w $A
0001EEB8 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001EEBC 0000                       		dc.w 0
0001EEBE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EEC2 6B00                       		dc.w $6B00
0001EEC4 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EEC8 7A00                       		dc.w $7A00
0001EECA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EECE 8000                       		dc.w $8000
0001EED0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EED4 8880                       		dc.w $8880
0001EED6 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EEDA 8F60                       		dc.w $8F60
0001EEDC 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EEE0 9360                       		dc.w $9360
0001EEE2 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EEE6 9E00                       		dc.w $9E00
0001EEE8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EEEC A360                       		dc.w $A360
0001EEEE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EEF2 A460                       		dc.w $A460
0001EEF4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EEF8 A660                       		dc.w $A660
0001EEFA 0005                       PLC_BHZ2:	dc.w 5
0001EEFC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EF00 7000                       		dc.w $7000
0001EF02 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EF06 71C0                       		dc.w $71C0
0001EF08 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EF0C 7300                       		dc.w $7300
0001EF0E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EF12 7540                       		dc.w $7540
0001EF14 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EF18 A1E0                       		dc.w $A1E0
0001EF1A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EF1E 6980                       		dc.w $6980
0001EF20                            ; ---------------------------------------------------------------------------
0001EF20                            ; Pattern load cues - title card
0001EF20                            ; ---------------------------------------------------------------------------
0001EF20 0000                       PLC_TitleCard:	dc.w 0
0001EF22 0000 0000                  		dc.l Nem_TitleCard
0001EF26 B000                       		dc.w $B000
0001EF28                            ; ---------------------------------------------------------------------------
0001EF28                            ; Pattern load cues - act 3 boss
0001EF28                            ; ---------------------------------------------------------------------------
0001EF28 0005                       PLC_Boss:	dc.w 5
0001EF2A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EF2E 8000                       		dc.w $8000
0001EF30 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001EF34 8D80                       		dc.w $8D80
0001EF36 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001EF3A 93A0                       		dc.w $93A0
0001EF3C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001EF40 A300                       		dc.w $A300
0001EF42 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001EF46 A300                       		dc.w $A300
0001EF48 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EF4C A540                       		dc.w $A540
0001EF4E                            ; ---------------------------------------------------------------------------
0001EF4E                            ; Pattern load cues - act 1/2 signpost
0001EF4E                            ; ---------------------------------------------------------------------------
0001EF4E 0002                       PLC_Signpost:	dc.w 2
0001EF50 0000 0000                  		dc.l Nem_SignPost	; signpost
0001EF54 D000                       		dc.w $D000
0001EF56 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001EF5A 96C0                       		dc.w $96C0
0001EF5C 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001EF60 8C40                       		dc.w $8C40
0001EF62                            ; ---------------------------------------------------------------------------
0001EF62                            ; Pattern load cues - beta special stage warp effect
0001EF62                            ; ---------------------------------------------------------------------------
0001EF62 0000                       PLC_Warp:	dc.w 0
0001EF64 0000 0000                  		dc.l Nem_Warp
0001EF68 A820                       		dc.w $A820
0001EF6A                            ; ---------------------------------------------------------------------------
0001EF6A                            ; Pattern load cues - special stage
0001EF6A                            ; ---------------------------------------------------------------------------
0001EF6A 0010                       PLC_SpeStage:	dc.w $10
0001EF6C 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001EF70 0000                       		dc.w 0
0001EF72 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001EF76 0A20                       		dc.w $A20
0001EF78 0000 0000                  		dc.l Nem_SSWalls	; walls
0001EF7C 2840                       		dc.w $2840
0001EF7E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EF82 4760                       		dc.w $4760
0001EF84 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001EF88 4A20                       		dc.w $4A20
0001EF8A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001EF8E 4C60                       		dc.w $4C60
0001EF90 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001EF94 5E00                       		dc.w $5E00
0001EF96 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001EF9A 6E00                       		dc.w $6E00
0001EF9C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001EFA0 7E00                       		dc.w $7E00
0001EFA2 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001EFA6 8E00                       		dc.w $8E00
0001EFA8 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001EFAC 9E00                       		dc.w $9E00
0001EFAE 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001EFB2 AE00                       		dc.w $AE00
0001EFB4 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001EFB8 BE00                       		dc.w $BE00
0001EFBA 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001EFBE EE00                       		dc.w $EE00
0001EFC0 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001EFC4 F2E0                       		dc.w $F2E0
0001EFC6 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001EFCA F400                       		dc.w $F400
0001EFCC 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001EFD0 F520                       		dc.w $F520
0001EFD2 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001EFD6 F2E0                       		dc.w $F2E0
0001EFD8 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001EFDC F400                       		dc.w $F400
0001EFDE 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001EFE2 F520                       		dc.w $F520
0001EFE4                            ; ---------------------------------------------------------------------------
0001EFE4                            ; Pattern load cues - GHZ animals
0001EFE4                            ; ---------------------------------------------------------------------------
0001EFE4 0001                       PLC_GHZAnimals:	dc.w 1
0001EFE6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EFEA B000                       		dc.w $B000
0001EFEC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EFF0 B240                       		dc.w $B240
0001EFF2                            ; ---------------------------------------------------------------------------
0001EFF2                            ; Pattern load cues - LZ animals
0001EFF2                            ; ---------------------------------------------------------------------------
0001EFF2 0001                       PLC_LZAnimals:	dc.w 1
0001EFF4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001EFF8 B000                       		dc.w $B000
0001EFFA 0000 0000                  		dc.l Nem_Seal		; seal
0001EFFE B240                       		dc.w $B240
0001F000                            ; ---------------------------------------------------------------------------
0001F000                            ; Pattern load cues - MZ animals
0001F000                            ; ---------------------------------------------------------------------------
0001F000 0001                       PLC_MZAnimals:	dc.w 1
0001F002 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F006 B000                       		dc.w $B000
0001F008 0000 0000                  		dc.l Nem_Seal		; seal
0001F00C B240                       		dc.w $B240
0001F00E                            ; ---------------------------------------------------------------------------
0001F00E                            ; Pattern load cues - SLZ animals
0001F00E                            ; ---------------------------------------------------------------------------
0001F00E 0001                       PLC_SLZAnimals:	dc.w 1
0001F010 0000 0000                  		dc.l Nem_Pig		; pig
0001F014 B000                       		dc.w $B000
0001F016 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F01A B240                       		dc.w $B240
0001F01C                            ; ---------------------------------------------------------------------------
0001F01C                            ; Pattern load cues - SYZ animals
0001F01C                            ; ---------------------------------------------------------------------------
0001F01C 0001                       PLC_SYZAnimals:	dc.w 1
0001F01E 0000 0000                  		dc.l Nem_Pig		; pig
0001F022 B000                       		dc.w $B000
0001F024 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F028 B240                       		dc.w $B240
0001F02A                            ; ---------------------------------------------------------------------------
0001F02A                            ; Pattern load cues - SBZ animals
0001F02A                            ; ---------------------------------------------------------------------------
0001F02A 0001                       PLC_SBZAnimals:	dc.w 1
0001F02C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F030 B000                       		dc.w $B000
0001F032 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F036 B240                       		dc.w $B240
0001F038                            ; ---------------------------------------------------------------------------
0001F038                            ; Pattern load cues - special stage results screen
0001F038                            ; ---------------------------------------------------------------------------
0001F038 0001                       PLC_SpeStResult:dc.w 1
0001F03A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F03E A820                       		dc.w $A820
0001F040 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F044 AA20                       		dc.w $AA20
0001F046                            ; ---------------------------------------------------------------------------
0001F046                            ; Pattern load cues - ending sequence
0001F046                            ; ---------------------------------------------------------------------------
0001F046 000E                       PLC_Ending:	dc.w $E
0001F048 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F04C 0000                       		dc.w 0
0001F04E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F052 39A0                       		dc.w $39A0
0001F054 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F058 6B00                       		dc.w $6B00
0001F05A 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F05E 7400                       		dc.w $7400
0001F060 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F064 78A0                       		dc.w $78A0
0001F066 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F06A 7C20                       		dc.w $7C20
0001F06C 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F070 A480                       		dc.w $A480
0001F072 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F076 AA60                       		dc.w $AA60
0001F078 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F07C ACA0                       		dc.w $ACA0
0001F07E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F082 AE60                       		dc.w $AE60
0001F084 0000 0000                  		dc.l Nem_Seal		; seal
0001F088 B0A0                       		dc.w $B0A0
0001F08A 0000 0000                  		dc.l Nem_Pig		; pig
0001F08E B260                       		dc.w $B260
0001F090 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F094 B4A0                       		dc.w $B4A0
0001F096 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F09A B660                       		dc.w $B660
0001F09C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F0A0 B8A0                       		dc.w $B8A0
0001F0A2                            ; ---------------------------------------------------------------------------
0001F0A2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F0A2                            ; ---------------------------------------------------------------------------
0001F0A2 0002                       PLC_TryAgain:	dc.w 2
0001F0A4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F0A8 78A0                       		dc.w $78A0
0001F0AA 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F0AE 7C20                       		dc.w $7C20
0001F0B0 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F0B4 B400                       		dc.w $B400
0001F0B6                            ; ---------------------------------------------------------------------------
0001F0B6                            ; Pattern load cues - Eggman on SBZ 2
0001F0B6                            ; ---------------------------------------------------------------------------
0001F0B6 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F0B8 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F0BC A300                       		dc.w $A300
0001F0BE 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F0C2 8000                       		dc.w $8000
0001F0C4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F0C8 9400                       		dc.w $9400
0001F0CA                            ; ---------------------------------------------------------------------------
0001F0CA                            ; Pattern load cues - final boss
0001F0CA                            ; ---------------------------------------------------------------------------
0001F0CA 0004                       PLC_FZBoss:	dc.w 4
0001F0CC 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F0D0 7400                       		dc.w $7400
0001F0D2 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F0D6 6000                       		dc.w $6000
0001F0D8 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F0DC 8000                       		dc.w $8000
0001F0DE 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F0E2 8E00                       		dc.w $8E00
0001F0E4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F0E8 A540                       		dc.w $A540
0001F0EA                            ; ---------------------------------------------------------------------------
0001F0EA                            ; Pattern load cues - Teto boss
0001F0EA                            ; ---------------------------------------------------------------------------
0001F0EA 0002                       PLC_TetoBoss:	dc.w 2
0001F0EC 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001F0F0 8000                       		dc.w $8000
0001F0F2 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F0F6 93A0                       		dc.w $93A0
0001F0F8 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001F0FC 9000                       		dc.w $9000
0001F0FE                            		; even
0001F0FE                            ; ---------------------------------------------------------------------------
0001F0FE                            ; Pattern load cues - Truth Nuke
0001F0FE                            ; ---------------------------------------------------------------------------
0001F0FE 0000                       PLC_TruthNuke:	dc.w 0
0001F100 0000 0000                  		dc.l Nem_TruthNuke	; GMZ
0001F104 0000                       		dc.w 0
0001F106                            		even
0001F106                            		even
0001F106                            
0001F106                            		incbin	misc\padding.bin
0001F1F4                            		even
0001F1F4                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001F64A                            		even
0001F64A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F6E2                            		even
0001F6E2                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F824                            		even
0001F824                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F872                            		even
0001F872                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F986                            		even
0001F986                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020850                            		even
00020850                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00024956                            		even
00024956                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002498A                            		even
0002498A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00024A48                            		even
00024A48                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024EF0                            		even
00024EF0                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024F4E                            		even
00024F4E                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025B54                            		even
00025B54                            Eni_TruthNuke:	incbin	mapeni\truthnuke.bin	; GMZ
00025C32                            		even
00025C32                            Nem_TruthNuke:	incbin	artnem\truthnuke.bin	; GMZ: TRVTH NVKE
000290FC                            		even
000290FC                            ; ---------------------------------------------------------------------------
000290FC                            ; Sprite mappings - Sonic
000290FC                            ; ---------------------------------------------------------------------------
000290FC                            Map_Sonic:
000290FC                            	include "_maps\Sonic.asm"
000290FC                            Map_a933:
000290FC 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000290FE 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
00029100 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
00029102 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00029104 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00029106 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
00029108 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
0002910A 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
0002910C 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
0002910E 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
00029110 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
00029112 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00029114 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00029116 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
00029118 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
0002911A 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
0002911C 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
0002911E 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
00029120 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
00029122 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00029124 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00029126 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00029128 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
0002912A 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
0002912C 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
0002912E 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
00029130 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
00029132 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
00029134 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
00029136 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
00029138 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
0002913A 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
0002913C 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
0002913E 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
00029140 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
00029142 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
00029144 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
00029146 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
00029148 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
0002914A 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
0002914C 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
0002914E 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
00029150 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
00029152 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00029154 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00029156 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00029158 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
0002915A 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
0002915C 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
0002915E 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00029160 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00029162 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00029164 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00029166 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00029168 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
0002916A 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
0002916C 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002916E 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00029170 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00029172 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00029174 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00029176 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00029178 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
0002917A 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
0002917C 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002917E 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00029180 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00029182 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00029184 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00029186 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00029188 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002918A 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
0002918C 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002918E 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00029190 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00029192 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00029194 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00029196 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00029198 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002919A 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
0002919C 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002919E 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
000291A0 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
000291A2 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
000291A4 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
000291A6 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
000291A8 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
000291AA 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
000291AC 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
000291AE 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
000291B0 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
000291B2 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
000291B4 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
000291B6 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
000291B8 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
000291BA 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
000291BC 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
000291BE 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
000291C0 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
000291C2 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
000291C4 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
000291C6 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
000291C8 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
000291CA 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
000291CC 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
000291CE 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
000291D0 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
000291D2 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
000291D4 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
000291D6 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
000291D8 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
000291DA 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
000291DC 00                         Map_a933_E0: 	dc.b $0
000291DD 02                         Map_a933_E1: 	dc.b $2
000291DE ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000291E3 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000291E8 03                         Map_a933_EC: 	dc.b $3
000291E9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000291EE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000291F3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000291F8 03                         Map_a933_FC: 	dc.b $3
000291F9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000291FE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00029203 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029208 03                         Map_a933_10C: 	dc.b $3
00029209 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002920E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00029213 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029218 03                         Map_a933_11C: 	dc.b $3
00029219 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002921E 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00029223 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029228 04                         Map_a933_12C: 	dc.b $4
00029229 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002922E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00029233 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00029238 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
0002923D 02                         Map_a933_141: 	dc.b $2
0002923E EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00029243 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00029248 02                         Map_a933_14C: 	dc.b $2
00029249 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002924E FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00029253 04                         Map_a933_157: 	dc.b $4
00029254 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00029259 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002925E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00029263 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00029268 02                         Map_a933_16C: 	dc.b $2
00029269 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002926E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00029273 03                         Map_a933_177: 	dc.b $3
00029274 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00029279 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002927E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00029283 05                         Map_a933_187: 	dc.b $5
00029284 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00029289 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002928E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00029293 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00029298 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002929D 06                         Map_a933_1A1: 	dc.b $6
0002929E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000292A3 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000292A8 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
000292AD 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
000292B2 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
000292B7 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000292BC 04                         Map_a933_1C0: 	dc.b $4
000292BD ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000292C2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000292C7 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000292CC 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000292D1 05                         Map_a933_1D5: 	dc.b $5
000292D2 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000292D7 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000292DC FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000292E1 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000292E6 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000292EB 04                         Map_a933_1EF: 	dc.b $4
000292EC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000292F1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000292F6 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000292FB 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00029300 05                         Map_a933_204: 	dc.b $5
00029301 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00029306 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002930B FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00029310 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00029315 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002931A 04                         Map_a933_21E: 	dc.b $4
0002931B F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00029320 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00029325 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002932A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002932F 02                         Map_a933_233: 	dc.b $2
00029330 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00029335 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002933A 02                         Map_a933_23E: 	dc.b $2
0002933B F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00029340 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00029345 04                         Map_a933_249: 	dc.b $4
00029346 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002934B EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00029350 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00029355 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002935A 02                         Map_a933_25E: 	dc.b $2
0002935B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00029360 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00029365 03                         Map_a933_269: 	dc.b $3
00029366 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002936B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00029370 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00029375 06                         Map_a933_279: 	dc.b $6
00029376 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002937B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00029380 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00029385 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002938A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002938F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00029394 06                         Map_a933_298: 	dc.b $6
00029395 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002939A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002939F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000293A4 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000293A9 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000293AE 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
000293B3 04                         Map_a933_2B7: 	dc.b $4
000293B4 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000293B9 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000293BE EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000293C3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000293C8 05                         Map_a933_2CC: 	dc.b $5
000293C9 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000293CE ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000293D3 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000293D8 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000293DD 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000293E2 04                         Map_a933_2E6: 	dc.b $4
000293E3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000293E8 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000293ED EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000293F2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000293F7 05                         Map_a933_2FB: 	dc.b $5
000293F8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000293FD EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00029402 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00029407 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002940C 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00029411 02                         Map_a933_315: 	dc.b $2
00029412 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029417 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002941C 02                         Map_a933_320: 	dc.b $2
0002941D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029422 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029427 02                         Map_a933_32B: 	dc.b $2
00029428 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002942D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029432 02                         Map_a933_336: 	dc.b $2
00029433 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029438 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002943D 04                         Map_a933_341: 	dc.b $4
0002943E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00029443 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00029448 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002944D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00029452 03                         Map_a933_356: 	dc.b $3
00029453 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00029458 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002945D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00029462 04                         Map_a933_366: 	dc.b $4
00029463 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00029468 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002946D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00029472 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00029477 03                         Map_a933_37B: 	dc.b $3
00029478 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002947D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00029482 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00029487 02                         Map_a933_38B: 	dc.b $2
00029488 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002948D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029492 02                         Map_a933_396: 	dc.b $2
00029493 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00029498 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002949D 02                         Map_a933_3A1: 	dc.b $2
0002949E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000294A3 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000294A8 02                         Map_a933_3AC: 	dc.b $2
000294A9 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000294AE F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000294B3 04                         Map_a933_3B7: 	dc.b $4
000294B4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000294B9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000294BE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000294C3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000294C8 02                         Map_a933_3CC: 	dc.b $2
000294C9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000294CE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000294D3 04                         Map_a933_3D7: 	dc.b $4
000294D4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000294D9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000294DE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000294E3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000294E8 02                         Map_a933_3EC: 	dc.b $2
000294E9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000294EE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000294F3 01                         Map_a933_3F7: 	dc.b $1
000294F4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294F9 01                         Map_a933_3FD: 	dc.b $1
000294FA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294FF 01                         Map_a933_403: 	dc.b $1
00029500 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029505 01                         Map_a933_409: 	dc.b $1
00029506 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002950B 01                         Map_a933_40F: 	dc.b $1
0002950C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029511 02                         Map_a933_415: 	dc.b $2
00029512 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00029517 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002951C 01                         Map_a933_420: 	dc.b $1
0002951D F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029522 02                         Map_a933_426: 	dc.b $2
00029523 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00029528 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002952D 01                         Map_a933_431: 	dc.b $1
0002952E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029533 02                         Map_a933_437: 	dc.b $2
00029534 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00029539 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002953E 04                         Map_a933_442: 	dc.b $4
0002953F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00029544 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00029549 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002954E 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00029553 06                         Map_a933_457: 	dc.b $6
00029554 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00029559 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002955E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00029563 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00029568 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002956D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00029572 02                         Map_a933_476: 	dc.b $2
00029573 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00029578 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002957D 02                         Map_a933_481: 	dc.b $2
0002957E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00029583 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00029588 04                         Map_a933_48C: 	dc.b $4
00029589 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002958E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00029593 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00029598 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002959D 02                         Map_a933_4A1: 	dc.b $2
0002959E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000295A3 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000295A8 03                         Map_a933_4AC: 	dc.b $3
000295A9 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
000295AE FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
000295B3 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000295B8 04                         Map_a933_4BC: 	dc.b $4
000295B9 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000295BE F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000295C3 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000295C8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000295CD 02                         Map_a933_4D1: 	dc.b $2
000295CE EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000295D3 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000295D8 04                         Map_a933_4DC: 	dc.b $4
000295D9 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000295DE 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000295E3 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000295E8 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000295ED 04                         Map_a933_4F1: 	dc.b $4
000295EE F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000295F3 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000295F8 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000295FD F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00029602 05                         Map_a933_506: 	dc.b $5
00029603 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00029608 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002960D 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00029612 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00029617 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002961C 05                         Map_a933_520: 	dc.b $5
0002961D E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00029622 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00029627 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002962C 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00029631 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00029636 02                         Map_a933_53A: 	dc.b $2
00029637 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002963C 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00029641 03                         Map_a933_545: 	dc.b $3
00029642 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00029647 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002964C 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00029651 02                         Map_a933_555: 	dc.b $2
00029652 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00029657 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002965C 03                         Map_a933_560: 	dc.b $3
0002965D EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00029662 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00029667 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002966C 02                         Map_a933_570: 	dc.b $2
0002966D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00029672 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00029677 03                         Map_a933_57B: 	dc.b $3
00029678 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002967D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00029682 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00029687 03                         Map_a933_58B: 	dc.b $3
00029688 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002968D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00029692 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00029697 05                         Map_a933_59B: 	dc.b $5
00029698 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002969D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000296A2 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000296A7 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000296AC 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000296B1 05                         Map_a933_5B5: 	dc.b $5
000296B2 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000296B7 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000296BC F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000296C1 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000296C6 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000296CB 02                         Map_a933_5CF: 	dc.b $2
000296CC EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000296D1 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000296D6 03                         Map_a933_5DA: 	dc.b $3
000296D7 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000296DC F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000296E1 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000296E6 01                         Map_a933_5EA: 	dc.b $1
000296E7 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000296EC 01                         Map_a933_5F0: 	dc.b $1
000296ED F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000296F2 01                         Map_a933_5F6: 	dc.b $1
000296F3 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000296F8 04                         Map_a933_5FC: 	dc.b $4
000296F9 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000296FE F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00029703 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00029708 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002970D 03                         Map_a933_611: 	dc.b $3
0002970E F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00029713 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00029718 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002971D 03                         Map_a933_621: 	dc.b $3
0002971E F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00029723 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00029728 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002972D 03                         Map_a933_631: 	dc.b $3
0002972E EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00029733 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00029738 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002973D 02                         Map_a933_641: 	dc.b $2
0002973E F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00029743 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00029748 02                         Map_a933_64C: 	dc.b $2
00029749 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002974E EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029753 03                         Map_a933_657: 	dc.b $3
00029754 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00029759 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002975E 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00029763 02                         Map_a933_667: 	dc.b $2
00029764 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00029769 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002976E 04                         Map_a933_672: 	dc.b $4
0002976F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00029774 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00029779 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002977E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00029783 00                         Map_a933_687: 	dc.b $0
00029784 00                         Map_a933_688: 	dc.b $0
00029785 00                         Map_a933_689: 	dc.b $0
00029786 00                         Map_a933_68A: 	dc.b $0
00029787 02                         Map_a933_68B: 	dc.b $2
00029788 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002978D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029792 00                         Map_a933_696: 	dc.b $0
00029793 02                         Map_a933_697: 	dc.b $2
00029794 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029799 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002979E 00                         Map_a933_6A2: 	dc.b $0
0002979F 00                         Map_a933_6A3: 	dc.b $0
000297A0 00                         Map_a933_6A4: 	dc.b $0
000297A1 02                         Map_a933_6A5: 	dc.b $2
000297A2 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000297A7 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000297AC 00                         Map_a933_6B0: 	dc.b $0
000297AD 02                         Map_a933_6B1: 	dc.b $2
000297AE F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000297B3 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000297B8 00                         Map_a933_6BC: 	dc.b $0
000297B9 00                         Map_a933_6BD: 	dc.b $0
000297BA 00                         Map_a933_6BE: 	dc.b $0
000297BB 02                         Map_a933_6BF: 	dc.b $2
000297BC F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000297C1 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000297C6 00                         Map_a933_6CA: 	dc.b $0
000297C7 02                         Map_a933_6CB: 	dc.b $2
000297C8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000297CD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000297D2 00                         Map_a933_6D6: 	dc.b $0
000297D4 00                         	even
000297D4 00                         	even
000297D4                            
000297D4                            ; ---------------------------------------------------------------------------
000297D4                            ; Uncompressed graphics	loading	array for Sonic
000297D4                            ; ---------------------------------------------------------------------------
000297D4                            SonicDynPLC:
000297D4                            	include "_inc\Sonic dynamic pattern load cues.asm"
000297D4                            DPLC_33c5:
000297D4 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
000297D6 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
000297D8 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
000297DA 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
000297DC 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
000297DE 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
000297E0 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
000297E2 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
000297E4 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
000297E6 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
000297E8 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
000297EA 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
000297EC 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
000297EE 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
000297F0 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
000297F2 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
000297F4 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000297F6 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000297F8 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000297FA 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000297FC 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000297FE 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00029800 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00029802 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00029804 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00029806 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00029808 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
0002980A 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
0002980C 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
0002980E 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00029810 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00029812 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00029814 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00029816 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00029818 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
0002981A 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
0002981C 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
0002981E 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00029820 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00029822 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00029824 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00029826 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00029828 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
0002982A 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
0002982C 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
0002982E 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00029830 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00029832 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00029834 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00029836 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00029838 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
0002983A 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
0002983C 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
0002983E 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00029840 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00029842 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00029844 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00029846 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00029848 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
0002984A 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
0002984C 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
0002984E 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00029850 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00029852 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00029854 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00029856 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00029858 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
0002985A 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
0002985C 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
0002985E 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00029860 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00029862 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00029864 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00029866 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00029868 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
0002986A 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
0002986C 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
0002986E 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00029870 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00029872 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00029874 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00029876 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00029878 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
0002987A 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
0002987C 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
0002987E 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00029880 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00029882 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00029884 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00029886 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00029888 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
0002988A 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
0002988C 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
0002988E 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00029890 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00029892 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00029894 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00029896 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00029898 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
0002989A 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
0002989C 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002989E 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
000298A0 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
000298A2 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
000298A4 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
000298A6 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
000298A8 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
000298AA 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
000298AC 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
000298AE 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
000298B0 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
000298B2 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
000298B4 00                         DPLC_33c5_E0: 	dc.b $0
000298B5 02                         DPLC_33c5_E1: 	dc.b $2
000298B6 F000                       	dc.b $F0, $0
000298B8 1010                       	dc.b $10, $10
000298BA 03                         DPLC_33c5_E6: 	dc.b $3
000298BB 5012                       	dc.b $50, $12
000298BD 5018                       	dc.b $50, $18
000298BF 201E                       	dc.b $20, $1E
000298C1 03                         DPLC_33c5_ED: 	dc.b $3
000298C2 5021                       	dc.b $50, $21
000298C4 5018                       	dc.b $50, $18
000298C6 201E                       	dc.b $20, $1E
000298C8 03                         DPLC_33c5_F4: 	dc.b $3
000298C9 5021                       	dc.b $50, $21
000298CB 5018                       	dc.b $50, $18
000298CD 2027                       	dc.b $20, $27
000298CF 03                         DPLC_33c5_FB: 	dc.b $3
000298D0 802A                       	dc.b $80, $2A
000298D2 2033                       	dc.b $20, $33
000298D4 2036                       	dc.b $20, $36
000298D6 04                         DPLC_33c5_102: 	dc.b $4
000298D7 7039                       	dc.b $70, $39
000298D9 5041                       	dc.b $50, $41
000298DB 5047                       	dc.b $50, $47
000298DD 104D                       	dc.b $10, $4D
000298DF 02                         DPLC_33c5_10B: 	dc.b $2
000298E0 7039                       	dc.b $70, $39
000298E2 B04F                       	dc.b $B0, $4F
000298E4 02                         DPLC_33c5_110: 	dc.b $2
000298E5 505B                       	dc.b $50, $5B
000298E7 8061                       	dc.b $80, $61
000298E9 04                         DPLC_33c5_115: 	dc.b $4
000298EA 505B                       	dc.b $50, $5B
000298EC 506A                       	dc.b $50, $6A
000298EE 5070                       	dc.b $50, $70
000298F0 1076                       	dc.b $10, $76
000298F2 02                         DPLC_33c5_11E: 	dc.b $2
000298F3 F4F0                       	dc.b $F4, $F0
000298F5 1500                       	dc.b $15, $0
000298F7 03                         DPLC_33c5_123: 	dc.b $3
000298F8 7039                       	dc.b $70, $39
000298FA 3078                       	dc.b $30, $78
000298FC 507C                       	dc.b $50, $7C
000298FE 05                         DPLC_33c5_12A: 	dc.b $5
000298FF 5082                       	dc.b $50, $82
00029901 5088                       	dc.b $50, $88
00029903 208E                       	dc.b $20, $8E
00029905 5091                       	dc.b $50, $91
00029907 0097                       	dc.b $0, $97
00029909 06                         DPLC_33c5_135: 	dc.b $6
0002990A 5082                       	dc.b $50, $82
0002990C 1098                       	dc.b $10, $98
0002990E 309A                       	dc.b $30, $9A
00029910 509E                       	dc.b $50, $9E
00029912 30A4                       	dc.b $30, $A4
00029914 00A8                       	dc.b $0, $A8
00029916 04                         DPLC_33c5_142: 	dc.b $4
00029917 50A9                       	dc.b $50, $A9
00029919 10AF                       	dc.b $10, $AF
0002991B 70B1                       	dc.b $70, $B1
0002991D 20B9                       	dc.b $20, $B9
0002991F 05                         DPLC_33c5_14B: 	dc.b $5
00029920 50BC                       	dc.b $50, $BC
00029922 30C2                       	dc.b $30, $C2
00029924 70C6                       	dc.b $70, $C6
00029926 20CE                       	dc.b $20, $CE
00029928 10D1                       	dc.b $10, $D1
0002992A 04                         DPLC_33c5_156: 	dc.b $4
0002992B 50BC                       	dc.b $50, $BC
0002992D 10D3                       	dc.b $10, $D3
0002992F 70D5                       	dc.b $70, $D5
00029931 20DD                       	dc.b $20, $DD
00029933 05                         DPLC_33c5_15F: 	dc.b $5
00029934 5082                       	dc.b $50, $82
00029936 1098                       	dc.b $10, $98
00029938 008E                       	dc.b $0, $8E
0002993A 70E0                       	dc.b $70, $E0
0002993C 20E8                       	dc.b $20, $E8
0002993E 04                         DPLC_33c5_16A: 	dc.b $4
0002993F 70EB                       	dc.b $70, $EB
00029941 50F3                       	dc.b $50, $F3
00029943 10F9                       	dc.b $10, $F9
00029945 50FB                       	dc.b $50, $FB
00029947 02                         DPLC_33c5_173: 	dc.b $2
00029948 70EB                       	dc.b $70, $EB
0002994A B101                       	dc.b $B1, $1
0002994C 02                         DPLC_33c5_178: 	dc.b $2
0002994D 510D                       	dc.b $51, $D
0002994F 8113                       	dc.b $81, $13
00029951 04                         DPLC_33c5_17D: 	dc.b $4
00029952 510D                       	dc.b $51, $D
00029954 511C                       	dc.b $51, $1C
00029956 1122                       	dc.b $11, $22
00029958 5124                       	dc.b $51, $24
0002995A 02                         DPLC_33c5_186: 	dc.b $2
0002995B 510D                       	dc.b $51, $D
0002995D B12A                       	dc.b $B1, $2A
0002995F 03                         DPLC_33c5_18B: 	dc.b $3
00029960 70EB                       	dc.b $70, $EB
00029962 0101                       	dc.b $1, $1
00029964 8136                       	dc.b $81, $36
00029966 06                         DPLC_33c5_192: 	dc.b $6
00029967 513F                       	dc.b $51, $3F
00029969 1145                       	dc.b $11, $45
0002996B 1147                       	dc.b $11, $47
0002996D 8149                       	dc.b $81, $49
0002996F 0152                       	dc.b $1, $52
00029971 0153                       	dc.b $1, $53
00029973 06                         DPLC_33c5_19F: 	dc.b $6
00029974 513F                       	dc.b $51, $3F
00029976 2154                       	dc.b $21, $54
00029978 1157                       	dc.b $11, $57
0002997A 1159                       	dc.b $11, $59
0002997C 815B                       	dc.b $81, $5B
0002997E 0152                       	dc.b $1, $52
00029980 04                         DPLC_33c5_1AC: 	dc.b $4
00029981 5164                       	dc.b $51, $64
00029983 116A                       	dc.b $11, $6A
00029985 816C                       	dc.b $81, $6C
00029987 1175                       	dc.b $11, $75
00029989 05                         DPLC_33c5_1B5: 	dc.b $5
0002998A 5177                       	dc.b $51, $77
0002998C 217D                       	dc.b $21, $7D
0002998E 1180                       	dc.b $11, $80
00029990 7182                       	dc.b $71, $82
00029992 218A                       	dc.b $21, $8A
00029994 04                         DPLC_33c5_1C0: 	dc.b $4
00029995 5177                       	dc.b $51, $77
00029997 118D                       	dc.b $11, $8D
00029999 818F                       	dc.b $81, $8F
0002999B 1198                       	dc.b $11, $98
0002999D 05                         DPLC_33c5_1C9: 	dc.b $5
0002999E 513F                       	dc.b $51, $3F
000299A0 819A                       	dc.b $81, $9A
000299A2 1159                       	dc.b $11, $59
000299A4 11A3                       	dc.b $11, $A3
000299A6 0152                       	dc.b $1, $52
000299A8 02                         DPLC_33c5_1D4: 	dc.b $2
000299A9 51A5                       	dc.b $51, $A5
000299AB B1AB                       	dc.b $B1, $AB
000299AD 02                         DPLC_33c5_1D9: 	dc.b $2
000299AE 505B                       	dc.b $50, $5B
000299B0 B1B7                       	dc.b $B1, $B7
000299B2 02                         DPLC_33c5_1DE: 	dc.b $2
000299B3 51A5                       	dc.b $51, $A5
000299B5 B1C3                       	dc.b $B1, $C3
000299B7 02                         DPLC_33c5_1E3: 	dc.b $2
000299B8 505B                       	dc.b $50, $5B
000299BA B1CF                       	dc.b $B1, $CF
000299BC 04                         DPLC_33c5_1E8: 	dc.b $4
000299BD 51DB                       	dc.b $51, $DB
000299BF 11E1                       	dc.b $11, $E1
000299C1 B1E3                       	dc.b $B1, $E3
000299C3 01EF                       	dc.b $1, $EF
000299C5 03                         DPLC_33c5_1F1: 	dc.b $3
000299C6 51F0                       	dc.b $51, $F0
000299C8 11F6                       	dc.b $11, $F6
000299CA B1F8                       	dc.b $B1, $F8
000299CC 04                         DPLC_33c5_1F8: 	dc.b $4
000299CD 51DB                       	dc.b $51, $DB
000299CF 1204                       	dc.b $12, $4
000299D1 B206                       	dc.b $B2, $6
000299D3 01EF                       	dc.b $1, $EF
000299D5 03                         DPLC_33c5_201: 	dc.b $3
000299D6 51F0                       	dc.b $51, $F0
000299D8 11F6                       	dc.b $11, $F6
000299DA B212                       	dc.b $B2, $12
000299DC 02                         DPLC_33c5_208: 	dc.b $2
000299DD 521E                       	dc.b $52, $1E
000299DF B224                       	dc.b $B2, $24
000299E1 02                         DPLC_33c5_20D: 	dc.b $2
000299E2 510D                       	dc.b $51, $D
000299E4 B230                       	dc.b $B2, $30
000299E6 02                         DPLC_33c5_212: 	dc.b $2
000299E7 521E                       	dc.b $52, $1E
000299E9 B23C                       	dc.b $B2, $3C
000299EB 02                         DPLC_33c5_217: 	dc.b $2
000299EC 510D                       	dc.b $51, $D
000299EE B248                       	dc.b $B2, $48
000299F0 04                         DPLC_33c5_21C: 	dc.b $4
000299F1 5254                       	dc.b $52, $54
000299F3 125A                       	dc.b $12, $5A
000299F5 B25C                       	dc.b $B2, $5C
000299F7 0268                       	dc.b $2, $68
000299F9 02                         DPLC_33c5_225: 	dc.b $2
000299FA 7269                       	dc.b $72, $69
000299FC B271                       	dc.b $B2, $71
000299FE 04                         DPLC_33c5_22A: 	dc.b $4
000299FF 5254                       	dc.b $52, $54
00029A01 127D                       	dc.b $12, $7D
00029A03 B27F                       	dc.b $B2, $7F
00029A05 0268                       	dc.b $2, $68
00029A07 02                         DPLC_33c5_233: 	dc.b $2
00029A08 7269                       	dc.b $72, $69
00029A0A B28B                       	dc.b $B2, $8B
00029A0C 01                         DPLC_33c5_238: 	dc.b $1
00029A0D F297                       	dc.b $F2, $97
00029A0F 01                         DPLC_33c5_23B: 	dc.b $1
00029A10 F2A7                       	dc.b $F2, $A7
00029A12 01                         DPLC_33c5_23E: 	dc.b $1
00029A13 F2B7                       	dc.b $F2, $B7
00029A15 01                         DPLC_33c5_241: 	dc.b $1
00029A16 F2C7                       	dc.b $F2, $C7
00029A18 01                         DPLC_33c5_244: 	dc.b $1
00029A19 F2D7                       	dc.b $F2, $D7
00029A1B 02                         DPLC_33c5_247: 	dc.b $2
00029A1C B2E7                       	dc.b $B2, $E7
00029A1E 22F3                       	dc.b $22, $F3
00029A20 01                         DPLC_33c5_24C: 	dc.b $1
00029A21 F2F6                       	dc.b $F2, $F6
00029A23 02                         DPLC_33c5_24F: 	dc.b $2
00029A24 B306                       	dc.b $B3, $6
00029A26 2312                       	dc.b $23, $12
00029A28 01                         DPLC_33c5_254: 	dc.b $1
00029A29 F315                       	dc.b $F3, $15
00029A2B 02                         DPLC_33c5_257: 	dc.b $2
00029A2C 5325                       	dc.b $53, $25
00029A2E B32B                       	dc.b $B3, $2B
00029A30 04                         DPLC_33c5_25C: 	dc.b $4
00029A31 5337                       	dc.b $53, $37
00029A33 733D                       	dc.b $73, $3D
00029A35 1345                       	dc.b $13, $45
00029A37 0347                       	dc.b $3, $47
00029A39 02                         DPLC_33c5_265: 	dc.b $2
00029A3A D348                       	dc.b $D3, $48
00029A3C 34EC                       	dc.b $34, $EC
00029A3E 02                         DPLC_33c5_26A: 	dc.b $2
00029A3F F528                       	dc.b $F5, $28
00029A41 0538                       	dc.b $5, $38
00029A43 02                         DPLC_33c5_26F: 	dc.b $2
00029A44 F539                       	dc.b $F5, $39
00029A46 0549                       	dc.b $5, $49
00029A48 02                         DPLC_33c5_274: 	dc.b $2
00029A49 E356                       	dc.b $E3, $56
00029A4B 054A                       	dc.b $5, $4A
00029A4D 01                         DPLC_33c5_279: 	dc.b $1
00029A4E 8365                       	dc.b $83, $65
00029A50 03                         DPLC_33c5_27C: 	dc.b $3
00029A51 736E                       	dc.b $73, $6E
00029A53 0376                       	dc.b $3, $76
00029A55 3377                       	dc.b $33, $77
00029A57 02                         DPLC_33c5_283: 	dc.b $2
00029A58 E37B                       	dc.b $E3, $7B
00029A5A 054A                       	dc.b $5, $4A
00029A5C 01                         DPLC_33c5_288: 	dc.b $1
00029A5D D561                       	dc.b $D5, $61
00029A5F 04                         DPLC_33c5_28B: 	dc.b $4
00029A60 B399                       	dc.b $B3, $99
00029A62 33A5                       	dc.b $33, $A5
00029A64 03A9                       	dc.b $3, $A9
00029A66 03AA                       	dc.b $3, $AA
00029A68 04                         DPLC_33c5_294: 	dc.b $4
00029A69 B3AB                       	dc.b $B3, $AB
00029A6B 33B7                       	dc.b $33, $B7
00029A6D 03BB                       	dc.b $3, $BB
00029A6F 03BC                       	dc.b $3, $BC
00029A71 05                         DPLC_33c5_29D: 	dc.b $5
00029A72 83BD                       	dc.b $83, $BD
00029A74 13C6                       	dc.b $13, $C6
00029A76 53C8                       	dc.b $53, $C8
00029A78 13CE                       	dc.b $13, $CE
00029A7A 03D0                       	dc.b $3, $D0
00029A7C 05                         DPLC_33c5_2A8: 	dc.b $5
00029A7D 83D1                       	dc.b $83, $D1
00029A7F 13DA                       	dc.b $13, $DA
00029A81 53C8                       	dc.b $53, $C8
00029A83 13CE                       	dc.b $13, $CE
00029A85 03D0                       	dc.b $3, $D0
00029A87 02                         DPLC_33c5_2B3: 	dc.b $2
00029A88 83DC                       	dc.b $83, $DC
00029A8A 73E5                       	dc.b $73, $E5
00029A8C 03                         DPLC_33c5_2B8: 	dc.b $3
00029A8D 83ED                       	dc.b $83, $ED
00029A8F 23F6                       	dc.b $23, $F6
00029A91 13F9                       	dc.b $13, $F9
00029A93 02                         DPLC_33c5_2BF: 	dc.b $2
00029A94 83FB                       	dc.b $83, $FB
00029A96 7404                       	dc.b $74, $4
00029A98 03                         DPLC_33c5_2C4: 	dc.b $3
00029A99 83ED                       	dc.b $83, $ED
00029A9B 240C                       	dc.b $24, $C
00029A9D 140F                       	dc.b $14, $F
00029A9F 02                         DPLC_33c5_2CB: 	dc.b $2
00029AA0 5411                       	dc.b $54, $11
00029AA2 B417                       	dc.b $B4, $17
00029AA4 03                         DPLC_33c5_2D0: 	dc.b $3
00029AA5 8423                       	dc.b $84, $23
00029AA7 342C                       	dc.b $34, $2C
00029AA9 0430                       	dc.b $4, $30
00029AAB 03                         DPLC_33c5_2D7: 	dc.b $3
00029AAC 7431                       	dc.b $74, $31
00029AAE 1439                       	dc.b $14, $39
00029AB0 B43B                       	dc.b $B4, $3B
00029AB2 05                         DPLC_33c5_2DE: 	dc.b $5
00029AB3 7447                       	dc.b $74, $47
00029AB5 144F                       	dc.b $14, $4F
00029AB7 5451                       	dc.b $54, $51
00029AB9 3457                       	dc.b $34, $57
00029ABB 045B                       	dc.b $4, $5B
00029ABD 05                         DPLC_33c5_2E9: 	dc.b $5
00029ABE 745C                       	dc.b $74, $5C
00029AC0 144F                       	dc.b $14, $4F
00029AC2 5464                       	dc.b $54, $64
00029AC4 3457                       	dc.b $34, $57
00029AC6 045B                       	dc.b $4, $5B
00029AC8 02                         DPLC_33c5_2F4: 	dc.b $2
00029AC9 246A                       	dc.b $24, $6A
00029ACB F46D                       	dc.b $F4, $6D
00029ACD 03                         DPLC_33c5_2F9: 	dc.b $3
00029ACE 247D                       	dc.b $24, $7D
00029AD0 B480                       	dc.b $B4, $80
00029AD2 248C                       	dc.b $24, $8C
00029AD4 01                         DPLC_33c5_300: 	dc.b $1
00029AD5 B48F                       	dc.b $B4, $8F
00029AD7 01                         DPLC_33c5_303: 	dc.b $1
00029AD8 549B                       	dc.b $54, $9B
00029ADA 01                         DPLC_33c5_306: 	dc.b $1
00029ADB 14A1                       	dc.b $14, $A1
00029ADD 02                         DPLC_33c5_309: 	dc.b $2
00029ADE E356                       	dc.b $E3, $56
00029AE0 054A                       	dc.b $5, $4A
00029AE2 03                         DPLC_33c5_30E: 	dc.b $3
00029AE3 736E                       	dc.b $73, $6E
00029AE5 0376                       	dc.b $3, $76
00029AE7 3377                       	dc.b $33, $77
00029AE9 03                         DPLC_33c5_315: 	dc.b $3
00029AEA B4A3                       	dc.b $B4, $A3
00029AEC 14AF                       	dc.b $14, $AF
00029AEE 34B1                       	dc.b $34, $B1
00029AF0 03                         DPLC_33c5_31C: 	dc.b $3
00029AF1 54B5                       	dc.b $54, $B5
00029AF3 B4BB                       	dc.b $B4, $BB
00029AF5 1074                       	dc.b $10, $74
00029AF7 02                         DPLC_33c5_323: 	dc.b $2
00029AF8 F4C7                       	dc.b $F4, $C7
00029AFA 24D7                       	dc.b $24, $D7
00029AFC 02                         DPLC_33c5_328: 	dc.b $2
00029AFD F4DA                       	dc.b $F4, $DA
00029AFF 14EA                       	dc.b $14, $EA
00029B01 02                         DPLC_33c5_32D: 	dc.b $2
00029B02 F502                       	dc.b $F5, $2
00029B04 2512                       	dc.b $25, $12
00029B06 02                         DPLC_33c5_332: 	dc.b $2
00029B07 F515                       	dc.b $F5, $15
00029B09 2525                       	dc.b $25, $25
00029B0B 02                         DPLC_33c5_337: 	dc.b $2
00029B0C F54B                       	dc.b $F5, $4B
00029B0E 755B                       	dc.b $75, $5B
00029B10 00                         DPLC_33c5_33C: 	dc.b $0
00029B11 00                         DPLC_33c5_33D: 	dc.b $0
00029B12 00                         DPLC_33c5_33E: 	dc.b $0
00029B13 00                         DPLC_33c5_33F: 	dc.b $0
00029B14 02                         DPLC_33c5_340: 	dc.b $2
00029B15 F4DA                       	dc.b $F4, $DA
00029B17 14EA                       	dc.b $14, $EA
00029B19 00                         DPLC_33c5_345: 	dc.b $0
00029B1A 02                         DPLC_33c5_346: 	dc.b $2
00029B1B F4DA                       	dc.b $F4, $DA
00029B1D 14EA                       	dc.b $14, $EA
00029B1F 00                         DPLC_33c5_34B: 	dc.b $0
00029B20 00                         DPLC_33c5_34C: 	dc.b $0
00029B21 00                         DPLC_33c5_34D: 	dc.b $0
00029B22 02                         DPLC_33c5_34E: 	dc.b $2
00029B23 F4DA                       	dc.b $F4, $DA
00029B25 14EA                       	dc.b $14, $EA
00029B27 00                         DPLC_33c5_353: 	dc.b $0
00029B28 02                         DPLC_33c5_354: 	dc.b $2
00029B29 F4DA                       	dc.b $F4, $DA
00029B2B 14EA                       	dc.b $14, $EA
00029B2D 00                         DPLC_33c5_359: 	dc.b $0
00029B2E 00                         DPLC_33c5_35A: 	dc.b $0
00029B2F 00                         DPLC_33c5_35B: 	dc.b $0
00029B30 02                         DPLC_33c5_35C: 	dc.b $2
00029B31 F4DA                       	dc.b $F4, $DA
00029B33 14EA                       	dc.b $14, $EA
00029B35 00                         DPLC_33c5_361: 	dc.b $0
00029B36 02                         DPLC_33c5_362: 	dc.b $2
00029B37 F4DA                       	dc.b $F4, $DA
00029B39 14EA                       	dc.b $14, $EA
00029B3B 00                         DPLC_33c5_367: 	dc.b $0
00029B3C                            	even
00029B3C                            	even
00029B3C                            
00029B3C                            ; ---------------------------------------------------------------------------
00029B3C                            ; Uncompressed graphics	- Sonic
00029B3C                            ; ---------------------------------------------------------------------------
00029B3C                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003491C                            		even
0003491C                            ; ---------------------------------------------------------------------------
0003491C                            ; Compressed graphics - various
0003491C                            ; ---------------------------------------------------------------------------
0003491C                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00034A20                            		even
00034A20                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00034A5A                            		even
00034A5A                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00034BF0                            		even
00034BF0                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00034D38                            		even
00034D38                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00034E42                            		even
00034E42                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00034E94                            		even
00034E94                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000350DC                            		even
000350DC                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00035262                            		even
00035262                            ; ---------------------------------------------------------------------------
00035262                            ; Sprite mappings - walls of the special stage
00035262                            ; ---------------------------------------------------------------------------
00035262                            Map_SSWalls:
00035262                            	include "_maps\SSwalls.asm"
00035262                            ; ---------------------------------------------------------------------------
00035262                            ; Sprite mappings - walls of the special stage
00035262                            ; ---------------------------------------------------------------------------
00035262 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00035266 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003526A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003526E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00035272 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00035276 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003527A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003527E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00035282 01                         byte_2C584:	dc.b 1
00035283 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00035288 01                         byte_2C58A:	dc.b 1
00035289 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003528E 01                         byte_2C590:	dc.b 1
0003528F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00035294 01                         byte_2C596:	dc.b 1
00035295 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003529A 01                         byte_2C59C:	dc.b 1
0003529B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000352A0 01                         byte_2C5A2:	dc.b 1
000352A1 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000352A6 01                         byte_2C5A8:	dc.b 1
000352A7 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000352AC 01                         byte_2C5AE:	dc.b 1
000352AD F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000352B2 01                         byte_2C5B4:	dc.b 1
000352B3 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000352B8 01                         byte_2C5BA:	dc.b 1
000352B9 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000352BE 01                         byte_2C5C0:	dc.b 1
000352BF F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000352C4 01                         byte_2C5C6:	dc.b 1
000352C5 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000352CA 01                         byte_2C5CC:	dc.b 1
000352CB F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
000352D0 01                         byte_2C5D2:	dc.b 1
000352D1 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
000352D6 01                         byte_2C5D8:	dc.b 1
000352D7 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000352DC 01                         byte_2C5DE:	dc.b 1
000352DD F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000352E2                            		even
000352E2                            		even
000352E2                            ; ---------------------------------------------------------------------------
000352E2                            ; Compressed graphics - special stage
000352E2                            ; ---------------------------------------------------------------------------
000352E2                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00035C1A                            		even
00035C1A                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00035D68                            		even
00035D68                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000371FA                            		even
000371FA                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000374FA                            		even
000374FA                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000379EE                            		even
000379EE                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00037ADC                            		even
00037ADC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00037BAC                            		even
00037BAC                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00037CA2                            		even
00037CA2                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00037D00                            		even
00037D00                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00037D92                            		even
00037D92                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00037E54                            		even
00037E54                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00037F22                            		even
00037F22                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00037FEE                            		even
00037FEE                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000380B6                            		even
000380B6                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00038180                            		even
00038180                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00038250                            		even
00038250                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00038444                            		even
00038444                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000385AC                            		even
000385AC                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003865C                            		even
0003865C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00038736                            		even
00038736                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000387BA                            		even
000387BA                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00038938                            		even
00038938                            ; ---------------------------------------------------------------------------
00038938                            ; Compressed graphics - GHZ stuff
00038938                            ; ---------------------------------------------------------------------------
00038938                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00038982                            		even
00038982                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00038A9C                            		even
00038A9C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00038B88                            		even
00038B88                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00038BD0                            		even
00038BD0                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00038D6E                            		even
00038D6E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00038E2A                            		even
00038E2A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003903E                            		even
0003903E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003916A                            		even
0003916A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00039298                            		even
00039298                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00039336                            		even
00039336                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00039396                            		even
00039396                            ; ---------------------------------------------------------------------------
00039396                            ; Compressed graphics - LZ stuff
00039396                            ; ---------------------------------------------------------------------------
00039396                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000394BA                            		even
000394BA                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00039CAE                            		even
00039CAE                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00039E2E                            		even
00039E2E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00039F98                            		even
00039F98                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003A5EE                            		even
0003A5EE                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003A6A4                            		even
0003A6A4                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003A746                            		even
0003A746                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003A8A2                            		even
0003A8A2                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003A906                            		even
0003A906                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003AA58                            		even
0003AA58                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003AF3A                            		even
0003AF3A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003B0AA                            		even
0003B0AA                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003B362                            		even
0003B362                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003B49A                            		even
0003B49A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003B5C4                            		even
0003B5C4                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003B6D4                            		even
0003B6D4                            ; ---------------------------------------------------------------------------
0003B6D4                            ; Compressed graphics - MZ stuff
0003B6D4                            ; ---------------------------------------------------------------------------
0003B6D4                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003B962                            		even
0003B962                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003BA20                            		even
0003BA20                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003BAD8                            		even
0003BAD8                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003BB2C                            		even
0003BB2C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003BDFE 00                         		even
0003BDFE                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003C714                            		even
0003C714                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003C878                            		even
0003C878                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003C900                            		even
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            ; Compressed graphics - SLZ stuff
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003CB3C                            		even
0003CB3C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003CC82                            		even
0003CC82                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003CEC6                            		even
0003CEC6                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003CF28                            		even
0003CF28                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003D00A                            		even
0003D00A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003D1EC                            		even
0003D1EC                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003D2F8                            		even
0003D2F8                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003D39C                            		even
0003D39C                            ; ---------------------------------------------------------------------------
0003D39C                            ; Compressed graphics - SYZ stuff
0003D39C                            ; ---------------------------------------------------------------------------
0003D39C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003D506                            		even
0003D506                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003D568                            		even
0003D568                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003D64A                            		even
0003D64A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003D8D8                            		even
0003D8D8                            ; ---------------------------------------------------------------------------
0003D8D8                            ; Compressed graphics - SBZ stuff
0003D8D8                            ; ---------------------------------------------------------------------------
0003D8D8                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003D92C                            		even
0003D92C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003DBC8                            		even
0003DBC8                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003DDCC                            		even
0003DDCC                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003DF6A                            		even
0003DF6A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003E29A                            		even
0003E29A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003E478                            		even
0003E478                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003E4D0                            		even
0003E4D0                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003E69A 00                         		even
0003E69A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003E798                            		even
0003E798                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003E924                            		even
0003E924                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003E974                            		even
0003E974                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003E9CC                            		even
0003E9CC                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003EAC8                            		even
0003EAC8                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003EBDE                            		even
0003EBDE                            ; ---------------------------------------------------------------------------
0003EBDE                            ; Compressed graphics - enemies
0003EBDE                            ; ---------------------------------------------------------------------------
0003EBDE                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003F04C 00                         		even
0003F04C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003F1F6 00                         		even
0003F1F6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003F5B8 00                         		even
0003F5B8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003F7A0                            		even
0003F7A0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003F958 00                         		even
0003F958                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003FAA2                            		even
0003FAA2                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003FD2C                            		even
0003FD2C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00040350                            		even
00040350                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00040546                            		even
00040546                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00040B64                            		even
00040B64                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00040F64 00                         		even
00040F64                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00041260                            		even
00041260                            Nem_Splats:	incbin	artnem\splats.bin	; splats
000414A8                            		even
000414A8                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00041740                            		even
00041740                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0004191E                            		even
0004191E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00041AAC                            		even
00041AAC                            ; ---------------------------------------------------------------------------
00041AAC                            ; Compressed graphics - various
00041AAC                            ; ---------------------------------------------------------------------------
00041AAC                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00041FDC                            		even
00041FDC                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
000420D2                            		even
000420D2                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
000421D8                            		even
000421D8                            Nem_Ring:	incbin	artnem\rings.bin	; rings
000422CC                            		even
000422CC                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00042810                            		even
00042810                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00042E76                            		even
00042E76                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00042F26                            		even
00042F26                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
000430B8                            		even
000430B8                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
000431CC                            		even
000431CC                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0004329E                            		even
0004329E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0004371A                            		even
0004371A                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
000437DA                            		even
000437DA                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0004394E                            		even
0004394E                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00043C50                            		even
00043C50                            ; ---------------------------------------------------------------------------
00043C50                            ; Compressed graphics - continue screen
00043C50                            ; ---------------------------------------------------------------------------
00043C50                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00043F00                            		even
00043F00                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0004413A                            		even
0004413A                            ; ---------------------------------------------------------------------------
0004413A                            ; Compressed graphics - animals
0004413A                            ; ---------------------------------------------------------------------------
0004413A                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00044292                            		even
00044292                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000443EE                            		even
000443EE                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004456A                            		even
0004456A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00044686                            		even
00044686                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000447BC                            		even
000447BC                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000448F6                            		even
000448F6                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00044A52                            		even
00044A52                            ; ---------------------------------------------------------------------------
00044A52                            ; Compressed graphics - primary patterns and block mappings
00044A52                            ; ---------------------------------------------------------------------------
00044A52                            Blk16_GHZ:	incbin	map16\ghz.bin
00045366                            		even
00045366                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00046C74                            		even
00046C74                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00047FF4                            		even
00047FF4                            Blk256_GHZ:	incbin	map256\ghz.bin
0004A42E                            		even
0004A42E                            Blk16_LZ:	incbin	map16\lz.bin
0004AB68                            		even
0004AB68                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004CFBC                            		even
0004CFBC                            Blk256_LZ:	incbin	map256\lz.bin
0004F93C                            		even
0004F93C                            Blk16_MZ:	incbin	map16\mz.bin
000500A4                            		even
000500A4                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
000529E0                            		even
000529E0                            Blk256_MZ:	incbin	map256\mz.bin
000541F6                            		even
000541F6                            Blk16_SLZ:	incbin	map16\slz.bin
000548C0                            		even
000548C0                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00056814                            		even
00056814                            Blk256_SLZ:	incbin	map256\slz.bin
00056E8E                            		even
00056E8E                            Blk16_SYZ:	incbin	map16\syz.bin
00057AB4                            		even
00057AB4                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005C046                            		even
0005C046                            Blk256_SYZ:	incbin	map256\syz.bin
0005E0A2                            		even
0005E0A2                            Blk16_SBZ:	incbin	map16\sbz.bin
0005EFEA                            		even
0005EFEA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
000619AE                            		even
000619AE                            Blk256_SBZ:	incbin	map256\sbz.bin
000644A4                            		even
000644A4                            Blk16_BHZ:	incbin	map16\bhz.bin
00064D32                            		even
00064D32                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
00067B30                            		even
00067B30                            Blk256_BHZ:	incbin	map256\bhz.bin
0006975E                            		even
0006975E                            ; ---------------------------------------------------------------------------
0006975E                            ; Compressed graphics - bosses and ending sequence
0006975E                            ; ---------------------------------------------------------------------------
0006975E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00069F78 00                         		even
00069F78                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
0006A5C6                            		even
0006A5C6                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
0006A640                            		even
0006A640                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006A92A                            		even
0006A92A                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006B1AE                            		even
0006B1AE                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006BF04 00                         		even
0006BF04                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006C66C                            		even
0006C66C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006CBEC                            		even
0006CBEC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006CD0C                            		even
0006CD0C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006CF0A                            		even
0006CF0A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006E0E8                            		even
0006E0E8                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006EA2C                            		even
0006EA2C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006EE02                            		even
0006EE02                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006F392                            		even
0006F392                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006F61A                            		even
0006F61A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006FC08 00                         		even
0006FC08                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006FE90                            		even
0006FE90                            		incbin	misc\padding2.bin
0006FF94                            		even
0006FF94                            ; ---------------------------------------------------------------------------
0006FF94                            ; Collision data
0006FF94                            ; ---------------------------------------------------------------------------
0006FF94                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00070094                            		even
00070094                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00071094                            		even
00071094                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00072094                            		even
00072094                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0007224C 00                         		even
0007224C                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000723B4                            		even
000723B4                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00072544 00                         		even
00072544                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00072738                            		even
00072738                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0007293E                            		even
0007293E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00072BDC                            		even
00072BDC                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
00072D68                            		even
00072D68                            ; ---------------------------------------------------------------------------
00072D68                            ; Special layouts
00072D68                            ; ---------------------------------------------------------------------------
00072D68                            SS_1:		incbin	sslayout\1.bin
00072FB0                            		even
00072FB0                            SS_2:		incbin	sslayout\2.bin
00073368                            		even
00073368                            SS_3:		incbin	sslayout\3.bin
000736C4                            		even
000736C4                            SS_4:		incbin	sslayout\4.bin
00073B9E                            		even
00073B9E                            SS_5:		incbin	sslayout\5.bin
0007404E                            		even
0007404E                            SS_6:		incbin	sslayout\6.bin
00074340                            		even
00074340                            ; ---------------------------------------------------------------------------
00074340                            ; Animated uncompressed graphics
00074340                            ; ---------------------------------------------------------------------------
00074340                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00074540                            		even
00074540                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00074940                            		even
00074940                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00074DC0                            		even
00074DC0                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000750C0                            		even
000750C0                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000756C0                            		even
000756C0                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000759C0                            		even
000759C0                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00076440                            		even
00076440                            
00076440                            ; ---------------------------------------------------------------------------
00076440                            ; Level	layout index
00076440                            ; ---------------------------------------------------------------------------
00076440 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00076446 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007644C 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00076452 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00076458 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007645E 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00076464 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007646A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00076470 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00076476 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007647C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00076482 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00076488 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007648E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00076494 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007649A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000764A0 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000764A6 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000764AC 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000764B2 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000764B8 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000764BE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000764C4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000764CA 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000764D0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000764D6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000764DC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000764E2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000764E8 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000764EE 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000764F4 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000764FA 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00076500                            
00076500                            Level_GHZ1:	incbin	levels\ghz1.bin
000765F2                            		even
000765F2 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000765F6                            Level_GHZ2:	incbin	levels\ghz2.bin
000766BE                            		even
000766BE 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000766C2                            Level_GHZ3:	incbin	levels\ghz3.bin
000767E4                            		even
000767E4                            Level_GHZbg:	incbin	levels\ghzbg.bin
00076806                            		even
00076806 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007680A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007680E                            
0007680E                            Level_LZ1:	incbin	levels\lz1.bin
00076910                            		even
00076910                            Level_LZbg:	incbin	levels\lzbg.bin
00076A12                            		even
00076A12 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00076A16                            Level_LZ2:	incbin	levels\lz2.bin
00076AB0                            		even
00076AB0 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00076AB4                            Level_LZ3:	incbin	levels\lz3.bin
00076BCE                            		even
00076BCE 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076BD2                            Level_SBZ3:	incbin	levels\sbz3.bin
00076C8C                            		even
00076C8C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00076C90                            
00076C90                            Level_MZ1:	incbin	levels\mz1.bin
00076D2E                            		even
00076D2E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00076DA8                            		even
00076DA8                            Level_MZ2:	incbin	levels\mz2.bin
00076E4C                            		even
00076E4C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00076EDE                            		even
00076EDE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00076EE2                            Level_MZ3:	incbin	levels\mz3.bin
00076FC4                            		even
00076FC4                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00077068 00                         		even
00077068 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007706C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00077070                            
00077070                            Level_SLZ1:	incbin	levels\slz1.bin
00077182                            		even
00077182                            Level_SLZbg:	incbin	levels\slzbg.bin
0007719C                            		even
0007719C                            Level_SLZ2:	incbin	levels\slz2.bin
0007728C                            		even
0007728C                            Level_SLZ3:	incbin	levels\slz3.bin
000773A6                            		even
000773A6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000773AA                            
000773AA                            Level_SYZ1:	incbin	levels\syz1.bin
00077466 00                         		even
00077466                            Level_SYZbg:	incbin	levels\syzbg.bin
000774A0                            		even
000774A0 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000774A4                            Level_SYZ2:	incbin	levels\syz2.bin
000775A8                            		even
000775A8 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000775AC                            Level_SYZ3:	incbin	levels\syz3.bin
00077706 00                         		even
00077706 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007770A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007770E                            
0007770E                            Level_SBZ1:	incbin	levels\sbz1.bin
00077830                            		even
00077830                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007786E                            		even
0007786E                            Level_SBZ2:	incbin	levels\sbz2.bin
000779B0                            		even
000779B0                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00077B1A                            		even
00077B1A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00077B1E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00077B22                            Level_End:	incbin	levels\ending.bin
00077B52 00                         		even
00077B52 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00077B56                            Level_BHZ1:	incbin	levels\bhz1.bin
00077C48                            		even
00077C48                            
00077C48                            Level_BHZ2:	incbin	levels\bhz2.bin
00077D10                            		even
00077D10                            
00077D10                            Level_BHZ3:	incbin	levels\bhz3.bin
00077E32                            		even
00077E32                            Level_BHZbg:	incbin	levels\bhzbg.bin
00077F34                            		even
00077F34                            ; ---------------------------------------------------------------------------
00077F34                            ; Animated uncompressed giant ring graphics
00077F34                            ; ---------------------------------------------------------------------------
00077F34                            Art_BigRing:	incbin	artunc\bigring.bin
00078B74                            		even
00078B74                            
00078B74                            		incbin	misc\padding3.bin
00078C10                            		even
00078C10                            
00078C10                            ; ---------------------------------------------------------------------------
00078C10                            ; Sprite locations index
00078C10                            ; ---------------------------------------------------------------------------
00078C10 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C14 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C18 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C1C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C20 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C24 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C28 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C2C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C30 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C34 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C38 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C3C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C40 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C44 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C48 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C4C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C50 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C54 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C58 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C5C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C60 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C64 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C68 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C6C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C70 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C74 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C78 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C7C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C80 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C84 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C88 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C8C 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C90                            ObjPos_LZxpf_Index:
00078C90 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078C94 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00078C98 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00078C9C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078CA0                            
00078CA0                            ObjPos_SBZ1pf_Index:
00078CA0 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078CA4 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00078CA8 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00078CAC 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078CB0 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00078CB6                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00079526                            		even
00079526                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000797F6                            		even
000797F6                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007A1DA                            		even
0007A1DA                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007A582                            		even
0007A582                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007A8B8                            		even
0007A8B8                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007ADCE                            		even
0007ADCE                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007B266                            		even
0007B266                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007B298                            		even
0007B298                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007B2CA                            		even
0007B2CA                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007B2FC                            		even
0007B2FC                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007B32E                            		even
0007B32E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007B378                            		even
0007B378                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007B3B6                            		even
0007B3B6                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007B6C2                            		even
0007B6C2                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007BB84                            		even
0007BB84                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007C10C                            		even
0007C10C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007C136                            		even
0007C136                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007C59E                            		even
0007C59E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007CB80                            		even
0007CB80                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007D1F2                            		even
0007D1F2                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007D75C                            		even
0007D75C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007DD62                            		even
0007DD62                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007E4A0                            		even
0007E4A0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007EB7E                            		even
0007EB7E                            ObjPos_FZ:	incbin	objpos\fz.bin
0007EBC6                            		even
0007EBC6                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007EBF8                            		even
0007EBF8                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007EC2A                            		even
0007EC2A                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007EC5C                            		even
0007EC5C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007EC8E                            		even
0007EC8E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007ECC0                            		even
0007ECC0                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007ECF8                            		even
0007ECF8                            ObjPos_End:	incbin	objpos\ending.bin
0007EE54                            		even
0007EE54                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007F466                            		even
0007F466                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007FA2A                            		even
0007FA2A                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
000800E4                            		even
000800E4 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000800EA                            ; ---------------------------------------------------------------------------
000800EA                            		incbin	misc\padding4.bin
00080714                            		even
00080714                            
00080714 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00080718 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
0008071C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
00080720 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
00080724 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
00080728 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
0008072C 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00080730                            ; ---------------------------------------------------------------------------
00080730                            ; PSG instruments used in music
00080730                            ; ---------------------------------------------------------------------------
00080730 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0008073C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00080748 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00080754                            
00080754 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
00080764 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0008076B                            
0008076B 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
00080772                            
00080772 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
00080782 80                                     dc.b    $80
00080783                            
00080783 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0008078E                            
0008078E 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0008079E 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
000807AE 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
000807B8                            
000807B8 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
000807C7                            
000807C7 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000807D7 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
000807E3                            
000807E3 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
000807F3 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
00080803 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0008080B                            
0008080B 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0008081B 80                                     dc.b    $80
0008081C                            
0008081C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00080824                            ; ---------------------------------------------------------------------------
00080824                            ; Music	Pointers
00080824                            ; ---------------------------------------------------------------------------
00080824                            MusicIndex:	
00080824 0000 0000                  		dc.l Music9F ; test
00080828 0000 0000                  		dc.l Music92 ; test
0008082C                            
0008082C                            MusicIndex80:
0008082C 0000 0000 0000 0000        		dc.l Music81, Music82
00080834 0000 0000 0000 0000        		dc.l Music83, Music84
0008083C 0000 0000 0000 0000        		dc.l Music85, Music86
00080844 0000 0000 0000 0000        		dc.l Music87, Music88
0008084C 0000 0000 0000 0000        		dc.l Music89, Music8A
00080854 0000 0000 0000 0000        		dc.l Music8B, Music8C
0008085C 0000 0000 0000 0000        		dc.l Music8D, Music8E
00080864 0000 0000 0000 0000        		dc.l Music8F, Music90
0008086C 0000 0000 0000 0000        		dc.l Music91, Music92
00080874 0000 0000 0000 0000        		dc.l Music93, Music94
0008087C 0000 0000 0000 0000        		dc.l Music95, Music96
00080884 0000 0000 0000 0000        		dc.l Music97, Music98
0008088C 0000 0000 0000 0000        		dc.l Music99, Music9A
00080894 0000 0000 0000 0000        		dc.l Music9B, Music9C
0008089C 0000 0000 0000 0000        		dc.l Music9D, Music9E
000808A4 0000 0000                  		dc.l Music9F
000808A8                            ; ---------------------------------------------------------------------------
000808A8                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
000808A8                            ; ---------------------------------------------------------------------------
000808A8                            SoundTypes:			
000808A8 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
000808B7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
000808C7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
000808D7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
000808E7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
000808F7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
00080907 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
00080917 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
00080927 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
00080937 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00080947 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00080957 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00080967 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00080977 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
00080987 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
00080997 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
000809A6                            		even
000809A6                            
000809A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000809A6                            
000809A6                            
000809A6                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000809A6                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
000809A6 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
000809AC 6700                       		beq.s	@main
000809AE 7000                       		moveq	#0,d0			; PAL song timer "optimization"
000809B0 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
000809B4 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
000809B8 4840                       		swap	d0
000809BA 4A40                       		tst.w	d0
000809BC 6600                       		bne.s	@main
000809BE 6100 0000                  		bsr.w	@main
000809C2                            @main:
000809C2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000809CA 4E71                       		nop
000809CC 4E71                       		nop
000809CE 4E71                       		nop
000809D0                            ; loc_71B5A:
000809D0                            @wait:
000809D0 0839 0000 00A1 1100        		btst	#0,($A11100).l
000809D8 66F6                       		bne.s	@wait
000809DA                            
000809DA 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000809E2 6700                       		beq.s	loc_71B82
000809E4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000809EC 4E71                       		nop
000809EE 4E71                       		nop
000809F0 4E71                       		nop
000809F2 4E71                       		nop
000809F4 4E71                       		nop
000809F6 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
000809F8                            ; ===========================================================================
000809F8                            
000809F8                            loc_71B82:
000809F8 4DF9 00FF F000             		lea	($FFF000).l,a6
000809FE 422E 000E                  		clr.b	$E(a6)
00080A02 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00080A06 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00080A0A 532E 0001                  		subq.b	#1,1(a6)
00080A0E 6600                       		bne.s	loc_71B9E
00080A10 4EBA 0000                  		jsr	sub_7260C(pc)
00080A14                            
00080A14                            loc_71B9E:
00080A14 102E 0004                  		move.b	4(a6),d0
00080A18 6700                       		beq.s	loc_71BA8
00080A1A 4EBA 0000                  		jsr	sub_72504(pc)
00080A1E                            
00080A1E                            loc_71BA8:
00080A1E 4A2E 0024                  		tst.b	$24(a6)
00080A22 6700                       		beq.s	loc_71BB2
00080A24 4EBA 0000                  		jsr	sub_7267C(pc)
00080A28                            
00080A28                            loc_71BB2:
00080A28 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00080A2C 6700                       		beq.s	loc_71BBC	; if not, branch
00080A2E 4EBA 0000                  		jsr	Sound_Play(pc)
00080A32                            
00080A32                            loc_71BBC:
00080A32 4BEE 0040                  		lea	$40(a6),a5
00080A36 4A15                       		tst.b	(a5)
00080A38 6A00                       		bpl.s	loc_71BD4
00080A3A 4EBA 0000                  		jsr	sub_71C4E(pc)
00080A3E                            
00080A3E                            loc_71BD4:
00080A3E 422E 0008                  		clr.b	8(a6)
00080A42 7E05                       		moveq	#5,d7
00080A44                            
00080A44                            loc_71BDA:
00080A44 DAFC 0030                  		adda.w	#$30,a5
00080A48 4A15                       		tst.b	(a5)
00080A4A 6A00                       		bpl.s	loc_71BE6
00080A4C 4EBA 0000                  		jsr	sub_71CCA(pc)
00080A50                            
00080A50                            loc_71BE6:
00080A50 51CF FFF2                  		dbf	d7,loc_71BDA
00080A54                            
00080A54 7E02                       		moveq	#2,d7
00080A56                            
00080A56                            loc_71BEC:
00080A56 DAFC 0030                  		adda.w	#$30,a5
00080A5A 4A15                       		tst.b	(a5)
00080A5C 6A00                       		bpl.s	loc_71BF8
00080A5E 4EBA 0000                  		jsr	sub_72850(pc)
00080A62                            
00080A62                            loc_71BF8:
00080A62 51CF FFF2                  		dbf	d7,loc_71BEC
00080A66                            
00080A66 1D7C 0080 000E             		move.b	#$80,$E(a6)
00080A6C 7E02                       		moveq	#2,d7
00080A6E                            
00080A6E                            loc_71C04:
00080A6E DAFC 0030                  		adda.w	#$30,a5
00080A72 4A15                       		tst.b	(a5)
00080A74 6A00                       		bpl.s	loc_71C10
00080A76 4EBA 0000                  		jsr	sub_71CCA(pc)
00080A7A                            
00080A7A                            loc_71C10:
00080A7A 51CF FFF2                  		dbf	d7,loc_71C04
00080A7E                            
00080A7E 7E02                       		moveq	#2,d7
00080A80                            
00080A80                            loc_71C16:
00080A80 DAFC 0030                  		adda.w	#$30,a5
00080A84 4A15                       		tst.b	(a5)
00080A86 6A00                       		bpl.s	loc_71C22
00080A88 4EBA 0000                  		jsr	sub_72850(pc)
00080A8C                            
00080A8C                            loc_71C22:
00080A8C 51CF FFF2                  		dbf	d7,loc_71C16
00080A90 1D7C 0040 000E             		move.b	#$40,$E(a6)
00080A96 DAFC 0030                  		adda.w	#$30,a5
00080A9A 4A15                       		tst.b	(a5)
00080A9C 6A00                       		bpl.s	loc_71C38
00080A9E 4EBA 0000                  		jsr	sub_71CCA(pc)
00080AA2                            
00080AA2                            loc_71C38:
00080AA2 DAFC 0030                  		adda.w	#$30,a5
00080AA6 4A15                       		tst.b	(a5)
00080AA8 6A00                       		bpl.s	loc_71C44
00080AAA 4EBA 0000                  		jsr	sub_72850(pc)
00080AAE                            
00080AAE                            loc_71C44:
00080AAE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00080AB6 4E75                       		rts	
00080AB8                            ; End of function sub_71B4C
00080AB8                            
00080AB8                            
00080AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080AB8                            
00080AB8                            
00080AB8                            sub_71C4E:				; XREF: sub_71B4C
00080AB8 532D 000E                  		subq.b	#1,$E(a5)
00080ABC 6600                       		bne.s	locret_71CAA
00080ABE 1D7C 0080 0008             		move.b	#$80,8(a6)
00080AC4 286D 0004                  		movea.l	4(a5),a4
00080AC8                            
00080AC8                            loc_71C5E:
00080AC8 7A00                       		moveq	#0,d5
00080ACA 1A1C                       		move.b	(a4)+,d5
00080ACC 0C05 00E0                  		cmpi.b	#-$20,d5
00080AD0 6500                       		bcs.s	loc_71C6E
00080AD2 4EBA 0000                  		jsr	sub_72A5A(pc)
00080AD6 60F0                       		bra.s	loc_71C5E
00080AD8                            ; ===========================================================================
00080AD8                            
00080AD8                            loc_71C6E:
00080AD8 4A05                       		tst.b	d5
00080ADA 6A00                       		bpl.s	loc_71C84
00080ADC 1B45 0010                  		move.b	d5,$10(a5)
00080AE0 1A1C                       		move.b	(a4)+,d5
00080AE2 6A00                       		bpl.s	loc_71C84
00080AE4 534C                       		subq.w	#1,a4
00080AE6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00080AEC 6000                       		bra.s	loc_71C88
00080AEE                            ; ===========================================================================
00080AEE                            
00080AEE                            loc_71C84:
00080AEE 4EBA 0000                  		jsr	sub_71D40(pc)
00080AF2                            
00080AF2                            loc_71C88:
00080AF2 2B4C 0004                  		move.l	a4,4(a5)
00080AF6 0815 0002                  		btst	#2,(a5)
00080AFA 6600                       		bne.s	locret_71CAA
00080AFC 7000                       		moveq	#0,d0
00080AFE 102D 0010                  		move.b	$10(a5),d0
00080B02 0C00 0080                  		cmpi.b	#$80,d0
00080B06 6700                       		beq.s	locret_71CAA
00080B08 0800 0003                  		btst	#3,d0
00080B0C 6600                       		bne.s	loc_71CAC
00080B0E 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00080B14                            
00080B14                            locret_71CAA:
00080B14 4E75                       		rts	
00080B16                            ; ===========================================================================
00080B16                            
00080B16                            loc_71CAC:
00080B16 0400 0088                  		subi.b	#$88,d0
00080B1A 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00080B1E 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00080B24 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00080B2C 4E75                       		rts	
00080B2E                            ; End of function sub_71C4E
00080B2E                            
00080B2E                            ; ===========================================================================
00080B2E 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00080B34                            
00080B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080B34                            
00080B34                            
00080B34                            sub_71CCA:				; XREF: sub_71B4C
00080B34 532D 000E                  		subq.b	#1,$E(a5)
00080B38 6600                       		bne.s	loc_71CE0
00080B3A 0895 0004                  		bclr	#4,(a5)
00080B3E 4EBA 0000                  		jsr	sub_71CEC(pc)
00080B42 4EBA 0000                  		jsr	sub_71E18(pc)
00080B46 6000 0000                  		bra.w	loc_726E2
00080B4A                            ; ===========================================================================
00080B4A                            
00080B4A                            loc_71CE0:
00080B4A 4EBA 0000                  		jsr	sub_71D9E(pc)
00080B4E 4EBA 0000                  		jsr	sub_71DC6(pc)
00080B52 6000 0000                  		bra.w	loc_71E24
00080B56                            ; End of function sub_71CCA
00080B56                            
00080B56                            
00080B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080B56                            
00080B56                            
00080B56                            sub_71CEC:				; XREF: sub_71CCA
00080B56 286D 0004                  		movea.l	4(a5),a4
00080B5A 0895 0001                  		bclr	#1,(a5)
00080B5E                            
00080B5E                            loc_71CF4:
00080B5E 7A00                       		moveq	#0,d5
00080B60 1A1C                       		move.b	(a4)+,d5
00080B62 0C05 00E0                  		cmpi.b	#-$20,d5
00080B66 6500                       		bcs.s	loc_71D04
00080B68 4EBA 0000                  		jsr	sub_72A5A(pc)
00080B6C 60F0                       		bra.s	loc_71CF4
00080B6E                            ; ===========================================================================
00080B6E                            
00080B6E                            loc_71D04:
00080B6E 4EBA 0000                  		jsr	sub_726FE(pc)
00080B72 4A05                       		tst.b	d5
00080B74 6A00                       		bpl.s	loc_71D1A
00080B76 4EBA 0000                  		jsr	sub_71D22(pc)
00080B7A 1A1C                       		move.b	(a4)+,d5
00080B7C 6A00                       		bpl.s	loc_71D1A
00080B7E 534C                       		subq.w	#1,a4
00080B80 6000 0000                  		bra.w	sub_71D60
00080B84                            ; ===========================================================================
00080B84                            
00080B84                            loc_71D1A:
00080B84 4EBA 0000                  		jsr	sub_71D40(pc)
00080B88 6000 0000                  		bra.w	sub_71D60
00080B8C                            ; End of function sub_71CEC
00080B8C                            
00080B8C                            
00080B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080B8C                            
00080B8C                            
00080B8C                            sub_71D22:				; XREF: sub_71CEC
00080B8C 0405 0080                  		subi.b	#$80,d5
00080B90 6700                       		beq.s	loc_71D58
00080B92 DA2D 0008                  		add.b	8(a5),d5
00080B96 0245 007F                  		andi.w	#$7F,d5
00080B9A E34D                       		lsl.w	#1,d5
00080B9C 41FA 0000                  		lea	word_72790(pc),a0
00080BA0 3C30 5000                  		move.w	(a0,d5.w),d6
00080BA4 3B46 0010                  		move.w	d6,$10(a5)
00080BA8 4E75                       		rts	
00080BAA                            ; End of function sub_71D22
00080BAA                            
00080BAA                            
00080BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080BAA                            
00080BAA                            
00080BAA                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00080BAA 1005                       		move.b	d5,d0
00080BAC 122D 0002                  		move.b	2(a5),d1
00080BB0                            
00080BB0                            loc_71D46:
00080BB0 5301                       		subq.b	#1,d1
00080BB2 6700                       		beq.s	loc_71D4E
00080BB4 D005                       		add.b	d5,d0
00080BB6 60F8                       		bra.s	loc_71D46
00080BB8                            ; ===========================================================================
00080BB8                            
00080BB8                            loc_71D4E:
00080BB8 1B40 000F                  		move.b	d0,$F(a5)
00080BBC 1B40 000E                  		move.b	d0,$E(a5)
00080BC0 4E75                       		rts	
00080BC2                            ; End of function sub_71D40
00080BC2                            
00080BC2                            ; ===========================================================================
00080BC2                            
00080BC2                            loc_71D58:				; XREF: sub_71D22
00080BC2 08D5 0001                  		bset	#1,(a5)
00080BC6 426D 0010                  		clr.w	$10(a5)
00080BCA                            
00080BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080BCA                            
00080BCA                            
00080BCA                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00080BCA 2B4C 0004                  		move.l	a4,4(a5)
00080BCE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00080BD4 0815 0004                  		btst	#4,(a5)
00080BD8 6600                       		bne.s	locret_71D9C
00080BDA 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00080BE0 422D 000C                  		clr.b	$C(a5)
00080BE4 0815 0003                  		btst	#3,(a5)
00080BE8 6700                       		beq.s	locret_71D9C
00080BEA 206D 0014                  		movea.l	$14(a5),a0
00080BEE 1B58 0018                  		move.b	(a0)+,$18(a5)
00080BF2 1B58 0019                  		move.b	(a0)+,$19(a5)
00080BF6 1B58 001A                  		move.b	(a0)+,$1A(a5)
00080BFA 1018                       		move.b	(a0)+,d0
00080BFC E208                       		lsr.b	#1,d0
00080BFE 1B40 001B                  		move.b	d0,$1B(a5)
00080C02 426D 001C                  		clr.w	$1C(a5)
00080C06                            
00080C06                            locret_71D9C:
00080C06 4E75                       		rts	
00080C08                            ; End of function sub_71D60
00080C08                            
00080C08                            
00080C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080C08                            
00080C08                            
00080C08                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00080C08 4A2D 0012                  		tst.b	$12(a5)
00080C0C 6700                       		beq.s	locret_71DC4
00080C0E 532D 0012                  		subq.b	#1,$12(a5)
00080C12 6600                       		bne.s	locret_71DC4
00080C14 08D5 0001                  		bset	#1,(a5)
00080C18 4A2D 0001                  		tst.b	1(a5)
00080C1C 6B00 0000                  		bmi.w	loc_71DBE
00080C20 4EBA 0000                  		jsr	sub_726FE(pc)
00080C24 584F                       		addq.w	#4,sp
00080C26 4E75                       		rts	
00080C28                            ; ===========================================================================
00080C28                            
00080C28                            loc_71DBE:
00080C28 4EBA 0000                  		jsr	sub_729A0(pc)
00080C2C 584F                       		addq.w	#4,sp
00080C2E                            
00080C2E                            locret_71DC4:
00080C2E 4E75                       		rts	
00080C30                            ; End of function sub_71D9E
00080C30                            
00080C30                            
00080C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080C30                            
00080C30                            
00080C30                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00080C30 584F                       		addq.w	#4,sp
00080C32 0815 0003                  		btst	#3,(a5)
00080C36 6700                       		beq.s	locret_71E16
00080C38 4A2D 0018                  		tst.b	$18(a5)
00080C3C 6700                       		beq.s	loc_71DDA
00080C3E 532D 0018                  		subq.b	#1,$18(a5)
00080C42 4E75                       		rts	
00080C44                            ; ===========================================================================
00080C44                            
00080C44                            loc_71DDA:
00080C44 532D 0019                  		subq.b	#1,$19(a5)
00080C48 6700                       		beq.s	loc_71DE2
00080C4A 4E75                       		rts	
00080C4C                            ; ===========================================================================
00080C4C                            
00080C4C                            loc_71DE2:
00080C4C 206D 0014                  		movea.l	$14(a5),a0
00080C50 1B68 0001 0019             		move.b	1(a0),$19(a5)
00080C56 4A2D 001B                  		tst.b	$1B(a5)
00080C5A 6600                       		bne.s	loc_71DFE
00080C5C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00080C62 442D 001A                  		neg.b	$1A(a5)
00080C66 4E75                       		rts	
00080C68                            ; ===========================================================================
00080C68                            
00080C68                            loc_71DFE:
00080C68 532D 001B                  		subq.b	#1,$1B(a5)
00080C6C 1C2D 001A                  		move.b	$1A(a5),d6
00080C70 4886                       		ext.w	d6
00080C72 DC6D 001C                  		add.w	$1C(a5),d6
00080C76 3B46 001C                  		move.w	d6,$1C(a5)
00080C7A DC6D 0010                  		add.w	$10(a5),d6
00080C7E 594F                       		subq.w	#4,sp
00080C80                            
00080C80                            locret_71E16:
00080C80 4E75                       		rts	
00080C82                            ; End of function sub_71DC6
00080C82                            
00080C82                            
00080C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080C82                            
00080C82                            
00080C82                            sub_71E18:				; XREF: sub_71CCA
00080C82 0815 0001                  		btst	#1,(a5)
00080C86 6600                       		bne.s	locret_71E48
00080C88 3C2D 0010                  		move.w	$10(a5),d6
00080C8C 6700                       		beq.s	loc_71E4A
00080C8E                            
00080C8E                            loc_71E24:				; XREF: sub_71CCA
00080C8E 102D 001E                  		move.b	$1E(a5),d0
00080C92 4880                       		ext.w	d0
00080C94 DC40                       		add.w	d0,d6
00080C96 0815 0002                  		btst	#2,(a5)
00080C9A 6600                       		bne.s	locret_71E48
00080C9C 3206                       		move.w	d6,d1
00080C9E E049                       		lsr.w	#8,d1
00080CA0 103C 00A4                  		move.b	#-$5C,d0
00080CA4 4EBA 0000                  		jsr	sub_72722(pc)
00080CA8 1206                       		move.b	d6,d1
00080CAA 103C 00A0                  		move.b	#-$60,d0
00080CAE 4EBA 0000                  		jsr	sub_72722(pc)
00080CB2                            
00080CB2                            locret_71E48:
00080CB2 4E75                       		rts	
00080CB4                            ; ===========================================================================
00080CB4                            
00080CB4                            loc_71E4A:
00080CB4 08D5 0001                  		bset	#1,(a5)
00080CB8 4E75                       		rts	
00080CBA                            ; End of function sub_71E18
00080CBA                            
00080CBA                            ; ===========================================================================
00080CBA                            
00080CBA                            loc_71E50:				; XREF: sub_71B4C
00080CBA 6B00                       		bmi.s	loc_71E94
00080CBC 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00080CC2 6700 0000                  		beq.w	loc_71EFE
00080CC6 1D7C 0002 0003             		move.b	#2,3(a6)
00080CCC 7602                       		moveq	#2,d3
00080CCE 103C 00B4                  		move.b	#-$4C,d0
00080CD2 7200                       		moveq	#0,d1
00080CD4                            
00080CD4                            loc_71E6A:
00080CD4 4EBA 0000                  		jsr	sub_7272E(pc)
00080CD8 4EBA 0000                  		jsr	sub_72764(pc)
00080CDC 5200                       		addq.b	#1,d0
00080CDE 51CB FFF4                  		dbf	d3,loc_71E6A
00080CE2                            
00080CE2 7602                       		moveq	#2,d3
00080CE4 7028                       		moveq	#$28,d0
00080CE6                            
00080CE6                            loc_71E7C:
00080CE6 1203                       		move.b	d3,d1
00080CE8 4EBA 0000                  		jsr	sub_7272E(pc)
00080CEC 5801                       		addq.b	#4,d1
00080CEE 4EBA 0000                  		jsr	sub_7272E(pc)
00080CF2 51CB FFF2                  		dbf	d3,loc_71E7C
00080CF6                            
00080CF6 4EBA 0000                  		jsr	sub_729B6(pc)
00080CFA 6000 FDB2                  		bra.w	loc_71C44
00080CFE                            ; ===========================================================================
00080CFE                            
00080CFE                            loc_71E94:				; XREF: loc_71E50
00080CFE 422E 0003                  		clr.b	3(a6)
00080D02 7630                       		moveq	#$30,d3
00080D04 4BEE 0040                  		lea	$40(a6),a5
00080D08 7806                       		moveq	#6,d4
00080D0A                            
00080D0A                            loc_71EA0:
00080D0A 0815 0007                  		btst	#7,(a5)
00080D0E 6700                       		beq.s	loc_71EB8
00080D10 0815 0002                  		btst	#2,(a5)
00080D14 6600                       		bne.s	loc_71EB8
00080D16 103C 00B4                  		move.b	#-$4C,d0
00080D1A 122D 000A                  		move.b	$A(a5),d1
00080D1E 4EBA 0000                  		jsr	sub_72722(pc)
00080D22                            
00080D22                            loc_71EB8:
00080D22 DAC3                       		adda.w	d3,a5
00080D24 51CC FFE4                  		dbf	d4,loc_71EA0
00080D28                            
00080D28 4BEE 0220                  		lea	$220(a6),a5
00080D2C 7802                       		moveq	#2,d4
00080D2E                            
00080D2E                            loc_71EC4:
00080D2E 0815 0007                  		btst	#7,(a5)
00080D32 6700                       		beq.s	loc_71EDC
00080D34 0815 0002                  		btst	#2,(a5)
00080D38 6600                       		bne.s	loc_71EDC
00080D3A 103C 00B4                  		move.b	#-$4C,d0
00080D3E 122D 000A                  		move.b	$A(a5),d1
00080D42 4EBA 0000                  		jsr	sub_72722(pc)
00080D46                            
00080D46                            loc_71EDC:
00080D46 DAC3                       		adda.w	d3,a5
00080D48 51CC FFE4                  		dbf	d4,loc_71EC4
00080D4C                            
00080D4C 4BEE 0340                  		lea	$340(a6),a5
00080D50 0815 0007                  		btst	#7,(a5)
00080D54 6700                       		beq.s	loc_71EFE
00080D56 0815 0002                  		btst	#2,(a5)
00080D5A 6600                       		bne.s	loc_71EFE
00080D5C 103C 00B4                  		move.b	#-$4C,d0
00080D60 122D 000A                  		move.b	$A(a5),d1
00080D64 4EBA 0000                  		jsr	sub_72722(pc)
00080D68                            
00080D68                            loc_71EFE:
00080D68 6000 FD44                  		bra.w	loc_71C44
00080D6C                            
00080D6C                            ; ---------------------------------------------------------------------------
00080D6C                            ; Subroutine to	play a sound or	music track
00080D6C                            ; ---------------------------------------------------------------------------
00080D6C                            
00080D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D6C                            
00080D6C                            
00080D6C                            Sound_Play:				; XREF: sub_71B4C
00080D6C 2079 0008 0714             		movea.l	(Go_SoundTypes).l,a0
00080D72 43EE 000A                  		lea	$A(a6),a1	; load music track number
00080D76 1616                       		move.b	0(a6),d3
00080D78 7802                       		moveq	#2,d4
00080D7A                            
00080D7A                            loc_71F12:
00080D7A 1011                       		move.b	(a1),d0		; move track number to d0
00080D7C 1200                       		move.b	d0,d1
00080D7E 4219                       		clr.b	(a1)+
00080D80 0400 0081                  		subi.b	#$81,d0
00080D84 6500                       		bcs.s	loc_71F3E
00080D86                            ; ===========================================================================
00080D86                            
00080D86                            loc_71F2C:
00080D86 1430 0000                  		move.b	(a0,d0.w),d2
00080D8A B403                       		cmp.b	d3,d2
00080D8C 6500                       		bcs.s	loc_71F3E
00080D8E 1602                       		move.b	d2,d3
00080D90 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00080D94                            
00080D94                            loc_71F3E:
00080D94 51CC FFE4                  		dbf	d4,loc_71F12
00080D98                            
00080D98 4A03                       		tst.b	d3
00080D9A 6B00                       		bmi.s	Sound_ChkValue
00080D9C 1C83                       		move.b	d3,0(a6)
00080D9E                            ; End of function Sound_Play
00080D9E                            
00080D9E                            
00080D9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D9E                            
00080D9E                            ; no checks if you play something fucked up it's your fault
00080D9E                            Sound_ChkValue:				; XREF: sub_71B4C
00080D9E 7E00                       		moveq	#0,d7
00080DA0 1E2E 0009                  		move.b	9(a6),d7
00080DA4                            		
00080DA4 6700 0000                  		beq.w	Sound_E4
00080DA8 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00080DAE 0C07 00A0                  		cmpi.b	#$A0,d7
00080DB2 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
00080DB6                            		
00080DB6 0C07 00D0                  		cmpi.b	#$D0,d7
00080DBA 6700 0000                  		beq.w	Sound_D0
00080DBE 0C07 00E0                  		cmpi.b	#$E0,d7
00080DC2 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
00080DC6                            		
00080DC6                            		; falls to command
00080DC6                            ; ===========================================================================
00080DC6                            
00080DC6                            Sound_Command				; XREF: Sound_ChkValue
00080DC6 0407 00E0                  		subi.b	#$E0,d7
00080DCA E54F                       		lsl.w	#2,d7
00080DCC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00080DD0                            ; ===========================================================================
00080DD0                            
00080DD0                            Sound_ExIndex:
00080DD0 6000 0000                  		bra.w	Sound_E0
00080DD4                            ; ===========================================================================
00080DD4 6000 0000                  		bra.w	Sound_E1
00080DD8                            ; ===========================================================================
00080DD8 6000 0000                  		bra.w	Sound_E2
00080DDC                            ; ===========================================================================
00080DDC 6000 0000                  		bra.w	Sound_E3
00080DE0                            ; ===========================================================================
00080DE0 6000 0000                  		bra.w	Sound_E4
00080DE4                            ; ===========================================================================
00080DE4 6000 0000                  		bra.w	Sound_E5
00080DE8                            ; ===========================================================================
00080DE8                            ; ---------------------------------------------------------------------------
00080DE8                            ; Play "Say-gaa" PCM sound
00080DE8                            ; ---------------------------------------------------------------------------
00080DE8                            
00080DE8                            Sound_E1:				  
00080DE8 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
00080DF0 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
00080DF8 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
00080DFC 51C8 FFFE                  		dbf	d0,*
00080E00 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00080E06 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00080E0C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00080E14                            PlayPCM_Loop:	  
00080E14 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00080E1A 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00080E1E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00080E22 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00080E24 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00080E26 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00080E2A 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00080E30 4EB8 1B62                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00080E34 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00080E3A 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00080E3C 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00080E3E                            return_PlayPCM: 
00080E3E 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
00080E46 584F                       		addq.w	#4,sp 
00080E48 4E75                       		rts
00080E4A                            		
00080E4A                            ; ---------------------------------------------------------------------------
00080E4A                            ; Play you are an idiot pcm sound
00080E4A                            ; since the sfx already crashes the game forever load it here :V
00080E4A                            ; ---------------------------------------------------------------------------
00080E4A                            
00080E4A                            Sound_E5: 
00080E4A 4EB8 1C3E                  		jsr	ClearScreen
00080E4E 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
00080E56 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
00080E5E                            
00080E5E                            		;control port on a5
00080E5E 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00080E64 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00080E6A 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00080E6E 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00080E72 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00080E76                            		
00080E76 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00080E7A                            		
00080E7A 2ABC 4000 0000             		move.l	#$40000000,(a5)
00080E80 41F9 0002 4F4E             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00080E86 4EB8 1DBA                  		jsr	NemDec
00080E8A 43F9 00FF 0000             		lea	($FF0000).l,a1
00080E90 41F9 0002 4EF0             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00080E96 303C 0000                  		move.w	#0,d0
00080E9A 4EB8 2098                  		jsr	EniDec
00080E9E 43F9 00FF 0000             		lea	($FF0000).l,a1
00080EA4 203C 4304 0003             		move.l	#$43040003,d0
00080EAA 7223                       		moveq	#35,d1
00080EAC 740D                       		moveq	#13,d2
00080EAE 4EB8 1D9A                  		jsr	ShowVDPGraphics
00080EB2 7014                       		moveq	#20,d0
00080EB4 4EB8 2A66                  		jsr	PalLoad2	; load pallet
00080EB8                            
00080EB8                            
00080EB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00080EBE 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
00080EC2 7600                       		moveq	#0,d3				; make @palett jump to @start when done
00080EC4 6000                       		bra.s	@palett
00080EC6                            @start:
00080EC6 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00080ECC 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
00080ED2 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
00080EDA                            @loop:
00080EDA 44D5                       		move.w	(a5),ccr
00080EDC 6B00                       		bmi.s	@vblank
00080EDE                            
00080EDE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00080EE4 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00080EE8 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00080EEC 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
00080EEE 66EA                       		bne.s	@loop				; if not zero, loop
00080EF0 60D4                       		bra.s	@start
00080EF2                            @vblank:
00080EF2 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
00080EF8 6700                       		beq.s	@palett
00080EFA 5238 FE24                  		addq.b	#1,($FFFFFE24).w
00080EFE                            @loop_vblank:
00080EFE 44D5                       		move.w	(a5),ccr
00080F00 6AD8                       		bpl.s	@loop
00080F02                            
00080F02 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00080F08 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00080F0C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00080F10 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
00080F12 66EA                       		bne.s	@loop_vblank			; if not zero, loop
00080F14 60B0                       		bra.s	@start
00080F16                            @palett:
00080F16 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00080F1C                            
00080F1C 4238 FE24                  		clr.b	($FFFFFE24).w
00080F20 4638 FE25                  		not.b	($FFFFFE25).w
00080F24 6700                       		beq.s	@not_black
00080F26 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00080F2C 6000                       		bra.s	@merge
00080F2E                            	@not_black:
00080F2E 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00080F34                            	@merge:
00080F34 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00080F38 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00080F3C 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
00080F40 3A9F                       		move.w	(sp)+,(a5)
00080F42                            		
00080F42 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00080F46 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00080F4A 4A83                       		tst.l	d3
00080F4C 66B0                       		bne.s	@loop_vblank
00080F4E 6000 FF76                  		bra.w	@start
00080F52                            ; ===========================================================================
00080F52                            ; ---------------------------------------------------------------------------
00080F52                            ; Play music track $81-$9F
00080F52                            ; ---------------------------------------------------------------------------
00080F52                            
00080F52                            Sound_Music:				; XREF: Sound_ChkValue
00080F52 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00080F56 6600                       		bne.s	loc_72024	; if not, branch
00080F58 4A2E 0027                  		tst.b	$27(a6)
00080F5C 6600 0000                  		bne.w	loc_721B6
00080F60 4BEE 0040                  		lea	$40(a6),a5
00080F64 7009                       		moveq	#9,d0
00080F66                            
00080F66                            loc_71FE6:
00080F66 0895 0002                  		bclr	#2,(a5)
00080F6A DAFC 0030                  		adda.w	#$30,a5
00080F6E 51C8 FFF6                  		dbf	d0,loc_71FE6
00080F72                            
00080F72 4BEE 0220                  		lea	$220(a6),a5
00080F76 7005                       		moveq	#5,d0
00080F78                            
00080F78                            loc_71FF8:
00080F78 0895 0007                  		bclr	#7,(a5)
00080F7C DAFC 0030                  		adda.w	#$30,a5
00080F80 51C8 FFF6                  		dbf	d0,loc_71FF8
00080F84 4216                       		clr.b	0(a6)
00080F86 204E                       		movea.l	a6,a0
00080F88 43EE 03A0                  		lea	$3A0(a6),a1
00080F8C 303C 0087                  		move.w	#$87,d0
00080F90                            
00080F90                            loc_72012:
00080F90 22D8                       		move.l	(a0)+,(a1)+
00080F92 51C8 FFFC                  		dbf	d0,loc_72012
00080F96                            
00080F96 1D7C 0080 0027             		move.b	#$80,$27(a6)
00080F9C 4216                       		clr.b	0(a6)
00080F9E 6000                       		bra.s	loc_7202C
00080FA0                            ; ===========================================================================
00080FA0                            
00080FA0                            loc_72024:
00080FA0 422E 0027                  		clr.b	$27(a6)
00080FA4 422E 0026                  		clr.b	$26(a6)
00080FA8                            
00080FA8                            loc_7202C:
00080FA8 4EBA 0000                  		jsr	sub_725CA(pc)
00080FAC 2879 0008 0728             		movea.l	(off_719A0).l,a4
00080FB2 0C07 0080                  		cmpi.b	#$80,d7
00080FB6 6500                       		blo.s	@zeroindex
00080FB8                            		
00080FB8 0407 0080                  		subi.b	#$80,d7
00080FBC 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00080FC2 2879 0008 0720             		movea.l	(Go_MusicIndex80).l,a4
00080FC8 6000                       		bra.s @continue
00080FCA                            	@zeroindex:
00080FCA 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00080FD0 2879 0008 071C             		movea.l	(Go_MusicIndex).l,a4
00080FD6                            	@continue:
00080FD6 E54F                       		lsl.w	#2,d7
00080FD8 2874 7000                  		movea.l	(a4,d7.w),a4
00080FDC 7000                       		moveq	#0,d0
00080FDE 3014                       		move.w	(a4),d0
00080FE0 D08C                       		add.l	a4,d0
00080FE2 2D40 0018                  		move.l	d0,$18(a6)
00080FE6 102C 0005                  		move.b	5(a4),d0
00080FEA 1D40 0028                  		move.b	d0,$28(a6)
00080FEE 4A2E 002A                  		tst.b	$2A(a6)
00080FF2 6700                       		beq.s	loc_72068
00080FF4 102E 0029                  		move.b	$29(a6),d0
00080FF8                            
00080FF8                            loc_72068:
00080FF8 1D40 0002                  		move.b	d0,2(a6)
00080FFC 1D40 0001                  		move.b	d0,1(a6)
00081000 7200                       		moveq	#0,d1
00081002 264C                       		movea.l	a4,a3
00081004 5C4C                       		addq.w	#6,a4
00081006 7E00                       		moveq	#0,d7
00081008 1E2B 0002                  		move.b	2(a3),d7
0008100C 6700 0000                  		beq.w	loc_72114
00081010 5307                       		subq.b	#1,d7
00081012 123C 00C0                  		move.b	#-$40,d1
00081016 182B 0004                  		move.b	4(a3),d4
0008101A 7C30                       		moveq	#$30,d6
0008101C 1A3C 0001                  		move.b	#1,d5
00081020 43EE 0040                  		lea	$40(a6),a1
00081024 45FA 0000                  		lea	byte_721BA(pc),a2
00081028                            
00081028                            loc_72098:
00081028 08D1 0007                  		bset	#7,(a1)
0008102C 135A 0001                  		move.b	(a2)+,1(a1)
00081030 1344 0002                  		move.b	d4,2(a1)
00081034 1346 000D                  		move.b	d6,$D(a1)
00081038 1341 000A                  		move.b	d1,$A(a1)
0008103C 1345 000E                  		move.b	d5,$E(a1)
00081040 7000                       		moveq	#0,d0
00081042 301C                       		move.w	(a4)+,d0
00081044 D08B                       		add.l	a3,d0
00081046 2340 0004                  		move.l	d0,4(a1)
0008104A 335C 0008                  		move.w	(a4)+,8(a1)
0008104E D2C6                       		adda.w	d6,a1
00081050 51CF FFD6                  		dbf	d7,loc_72098
00081054 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0008105A 6600                       		bne.s	loc_720D8
0008105C 702B                       		moveq	#$2B,d0
0008105E 7200                       		moveq	#0,d1
00081060 4EBA 0000                  		jsr	sub_7272E(pc)
00081064 6000 0000                  		bra.w	loc_72114
00081068                            ; ===========================================================================
00081068                            
00081068                            loc_720D8:
00081068 7028                       		moveq	#$28,d0
0008106A 7206                       		moveq	#6,d1
0008106C 4EBA 0000                  		jsr	sub_7272E(pc)
00081070 103C 0042                  		move.b	#$42,d0
00081074 727F                       		moveq	#$7F,d1
00081076 4EBA 0000                  		jsr	sub_72764(pc)
0008107A 103C 004A                  		move.b	#$4A,d0
0008107E 727F                       		moveq	#$7F,d1
00081080 4EBA 0000                  		jsr	sub_72764(pc)
00081084 103C 0046                  		move.b	#$46,d0
00081088 727F                       		moveq	#$7F,d1
0008108A 4EBA 0000                  		jsr	sub_72764(pc)
0008108E 103C 004E                  		move.b	#$4E,d0
00081092 727F                       		moveq	#$7F,d1
00081094 4EBA 0000                  		jsr	sub_72764(pc)
00081098 103C 00B6                  		move.b	#-$4A,d0
0008109C 123C 00C0                  		move.b	#-$40,d1
000810A0 4EBA 0000                  		jsr	sub_72764(pc)
000810A4                            
000810A4                            loc_72114:
000810A4 7E00                       		moveq	#0,d7
000810A6 1E2B 0003                  		move.b	3(a3),d7
000810AA 6700                       		beq.s	loc_72154
000810AC 5307                       		subq.b	#1,d7
000810AE 43EE 0190                  		lea	$190(a6),a1
000810B2 45FA 0000                  		lea	byte_721C2(pc),a2
000810B6                            
000810B6                            loc_72126:
000810B6 08D1 0007                  		bset	#7,(a1)
000810BA 135A 0001                  		move.b	(a2)+,1(a1)
000810BE 1344 0002                  		move.b	d4,2(a1)
000810C2 1346 000D                  		move.b	d6,$D(a1)
000810C6 1345 000E                  		move.b	d5,$E(a1)
000810CA 7000                       		moveq	#0,d0
000810CC 301C                       		move.w	(a4)+,d0
000810CE D08B                       		add.l	a3,d0
000810D0 2340 0004                  		move.l	d0,4(a1)
000810D4 335C 0008                  		move.w	(a4)+,8(a1)
000810D8 101C                       		move.b	(a4)+,d0
000810DA 135C 000B                  		move.b	(a4)+,$B(a1)
000810DE D2C6                       		adda.w	d6,a1
000810E0 51CF FFD4                  		dbf	d7,loc_72126
000810E4                            
000810E4                            loc_72154:
000810E4 43EE 0220                  		lea	$220(a6),a1
000810E8 7E05                       		moveq	#5,d7
000810EA                            
000810EA                            loc_7215A:
000810EA 4A11                       		tst.b	(a1)
000810EC 6A00 0000                  		bpl.w	loc_7217C
000810F0 7000                       		moveq	#0,d0
000810F2 1029 0001                  		move.b	1(a1),d0
000810F6 6B00                       		bmi.s	loc_7216E
000810F8 5500                       		subq.b	#2,d0
000810FA E508                       		lsl.b	#2,d0
000810FC 6000                       		bra.s	loc_72170
000810FE                            ; ===========================================================================
000810FE                            
000810FE                            loc_7216E:
000810FE E608                       		lsr.b	#3,d0
00081100                            
00081100                            loc_72170:
00081100 41FA 0000                  		lea	dword_722CC(pc),a0
00081104 2070 0000                  		movea.l	(a0,d0.w),a0
00081108 08D0 0002                  		bset	#2,(a0)
0008110C                            
0008110C                            loc_7217C:
0008110C D2C6                       		adda.w	d6,a1
0008110E 51CF FFDA                  		dbf	d7,loc_7215A
00081112                            
00081112 4A6E 0340                  		tst.w	$340(a6)
00081116 6A00                       		bpl.s	loc_7218E
00081118 08EE 0002 0100             		bset	#2,$100(a6)
0008111E                            
0008111E                            loc_7218E:
0008111E 4A6E 0370                  		tst.w	$370(a6)
00081122 6A00                       		bpl.s	loc_7219A
00081124 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008112A                            
0008112A                            loc_7219A:
0008112A 4BEE 0070                  		lea	$70(a6),a5
0008112E 7805                       		moveq	#5,d4
00081130                            
00081130                            loc_721A0:
00081130 4EBA 0000                  		jsr	sub_726FE(pc)
00081134 DAC6                       		adda.w	d6,a5
00081136 51CC FFF8                  		dbf	d4,loc_721A0
0008113A 7802                       		moveq	#2,d4
0008113C                            
0008113C                            loc_721AC:
0008113C 4EBA 0000                  		jsr	sub_729A0(pc)
00081140 DAC6                       		adda.w	d6,a5
00081142 51CC FFF8                  		dbf	d4,loc_721AC
00081146                            
00081146                            loc_721B6:
00081146 584F                       		addq.w	#4,sp
00081148 4E75                       		rts	
0008114A                            ; ===========================================================================
0008114A 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00081152                            		even
00081152 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00081156                            		even
00081156                            ; ===========================================================================
00081156                            ; ---------------------------------------------------------------------------
00081156                            ; Play normal sound effect
00081156                            ; ---------------------------------------------------------------------------
00081156                            
00081156                            Sound_SFX:				; XREF: Sound_ChkValue
00081156 4A2E 0027                  		tst.b	$27(a6)
0008115A 6600 0000                  		bne.w	loc_722C6
0008115E 4A2E 0004                  		tst.b	4(a6)
00081162 6600 0000                  		bne.w	loc_722C6
00081166 4A2E 0024                  		tst.b	$24(a6)
0008116A 6600 0000                  		bne.w	loc_722C6
0008116E 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00081172 6600                       		bne.s	Sound_notB5	; if not, branch
00081174 4A2E 002B                  		tst.b	$2B(a6)
00081178 6600                       		bne.s	loc_721EE
0008117A 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008117E                            
0008117E                            loc_721EE:
0008117E 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00081184                            
00081184                            Sound_notB5:
00081184 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00081188 6600                       		bne.s	Sound_notA7	; if not, branch
0008118A 4A2E 002C                  		tst.b	$2C(a6)
0008118E 6600 0000                  		bne.w	locret_722C4
00081192 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00081198                            
00081198                            Sound_notA7:
00081198 2079 0008 0724             		movea.l	(Go_SoundIndex).l,a0
0008119E 0407 00A0                  		subi.b	#$A0,d7
000811A2 E54F                       		lsl.w	#2,d7
000811A4 2670 7000                  		movea.l	(a0,d7.w),a3
000811A8 224B                       		movea.l	a3,a1
000811AA 7200                       		moveq	#0,d1
000811AC 3219                       		move.w	(a1)+,d1
000811AE D28B                       		add.l	a3,d1
000811B0 1A19                       		move.b	(a1)+,d5
000811B2 1E19                       		move.b	(a1)+,d7
000811B4 5307                       		subq.b	#1,d7
000811B6 7C30                       		moveq	#$30,d6
000811B8                            
000811B8                            loc_72228:
000811B8 7600                       		moveq	#0,d3
000811BA 1629 0001                  		move.b	1(a1),d3
000811BE 1803                       		move.b	d3,d4
000811C0 6B00                       		bmi.s	loc_72244
000811C2 5543                       		subq.w	#2,d3
000811C4 E54B                       		lsl.w	#2,d3
000811C6 4BFA 0000                  		lea	dword_722CC(pc),a5
000811CA 2A75 3000                  		movea.l	(a5,d3.w),a5
000811CE 08D5 0002                  		bset	#2,(a5)
000811D2 6000                       		bra.s	loc_7226E
000811D4                            ; ===========================================================================
000811D4                            
000811D4                            loc_72244:
000811D4 E64B                       		lsr.w	#3,d3
000811D6 4BFA 0000                  		lea	dword_722CC(pc),a5
000811DA 2A75 3000                  		movea.l	(a5,d3.w),a5
000811DE 08D5 0002                  		bset	#2,(a5)
000811E2 0C04 00C0                  		cmpi.b	#$C0,d4
000811E6 6600                       		bne.s	loc_7226E
000811E8 1004                       		move.b	d4,d0
000811EA 0000 001F                  		ori.b	#$1F,d0
000811EE 13C0 00C0 0011             		move.b	d0,($C00011).l
000811F4 0840 0005                  		bchg	#5,d0
000811F8 13C0 00C0 0011             		move.b	d0,($C00011).l
000811FE                            
000811FE                            loc_7226E:
000811FE 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00081202 244D                       		movea.l	a5,a2
00081204 700B                       		moveq	#$B,d0
00081206                            
00081206                            loc_72276:
00081206 429A                       		clr.l	(a2)+
00081208 51C8 FFFC                  		dbf	d0,loc_72276
0008120C                            
0008120C 3A99                       		move.w	(a1)+,(a5)
0008120E 1B45 0002                  		move.b	d5,2(a5)
00081212 7000                       		moveq	#0,d0
00081214 3019                       		move.w	(a1)+,d0
00081216 D08B                       		add.l	a3,d0
00081218 2B40 0004                  		move.l	d0,4(a5)
0008121C 3B59 0008                  		move.w	(a1)+,8(a5)
00081220 1B7C 0001 000E             		move.b	#1,$E(a5)
00081226 1B46 000D                  		move.b	d6,$D(a5)
0008122A 4A04                       		tst.b	d4
0008122C 6B00                       		bmi.s	loc_722A8
0008122E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00081234 2B41 0020                  		move.l	d1,$20(a5)
00081238                            
00081238                            loc_722A8:
00081238 51CF FF7E                  		dbf	d7,loc_72228
0008123C                            
0008123C 4A2E 0250                  		tst.b	$250(a6)
00081240 6A00                       		bpl.s	loc_722B8
00081242 08EE 0002 0340             		bset	#2,$340(a6)
00081248                            
00081248                            loc_722B8:
00081248 4A2E 0310                  		tst.b	$310(a6)
0008124C 6A00                       		bpl.s	locret_722C4
0008124E 08EE 0002 0370             		bset	#2,$370(a6)
00081254                            
00081254                            locret_722C4:
00081254 4E75                       		rts	
00081256                            ; ===========================================================================
00081256                            
00081256                            loc_722C6:
00081256 4216                       		clr.b	0(a6)
00081258 4E75                       		rts	
0008125A                            ; ===========================================================================
0008125A 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0008125E 0000 0000                  		dc.l 0
00081262 00FF F100                  		dc.l $FFF100
00081266 00FF F130                  		dc.l $FFF130
0008126A 00FF F190                  		dc.l $FFF190
0008126E 00FF F1C0                  		dc.l $FFF1C0
00081272 00FF F1F0                  		dc.l $FFF1F0
00081276 00FF F1F0                  		dc.l $FFF1F0
0008127A 00FF F220                  dword_722EC:	dc.l $FFF220
0008127E 0000 0000                  		dc.l 0
00081282 00FF F250                  		dc.l $FFF250
00081286 00FF F280                  		dc.l $FFF280
0008128A 00FF F2B0                  		dc.l $FFF2B0
0008128E 00FF F2E0                  		dc.l $FFF2E0
00081292 00FF F310                  		dc.l $FFF310
00081296 00FF F310                  		dc.l $FFF310
0008129A                            ; ===========================================================================
0008129A                            ; ---------------------------------------------------------------------------
0008129A                            ; Play GHZ waterfall sound
0008129A                            ; ---------------------------------------------------------------------------
0008129A                            
0008129A                            Sound_D0:				; XREF: Sound_ChkValue
0008129A 4A2E 0027                  		tst.b	$27(a6)
0008129E 6600 0000                  		bne.w	locret_723C6
000812A2 4A2E 0004                  		tst.b	4(a6)
000812A6 6600 0000                  		bne.w	locret_723C6
000812AA 4A2E 0024                  		tst.b	$24(a6)
000812AE 6600 0000                  		bne.w	locret_723C6
000812B2 2079 0008 0718             		movea.l	(Go_SoundD0).l,a0
000812B8 0407 00D0                  		subi.b	#$D0,d7
000812BC E54F                       		lsl.w	#2,d7
000812BE 2670 7000                  		movea.l	(a0,d7.w),a3
000812C2 224B                       		movea.l	a3,a1
000812C4 7000                       		moveq	#0,d0
000812C6 3019                       		move.w	(a1)+,d0
000812C8 D08B                       		add.l	a3,d0
000812CA 2D40 0020                  		move.l	d0,$20(a6)
000812CE 1A19                       		move.b	(a1)+,d5
000812D0 1E19                       		move.b	(a1)+,d7
000812D2 5307                       		subq.b	#1,d7
000812D4 7C30                       		moveq	#$30,d6
000812D6                            
000812D6                            loc_72348:
000812D6 1829 0001                  		move.b	1(a1),d4
000812DA 6B00                       		bmi.s	loc_7235A
000812DC 08EE 0002 0100             		bset	#2,$100(a6)
000812E2 4BEE 0340                  		lea	$340(a6),a5
000812E6 6000                       		bra.s	loc_72364
000812E8                            ; ===========================================================================
000812E8                            
000812E8                            loc_7235A:
000812E8 08EE 0002 01F0             		bset	#2,$1F0(a6)
000812EE 4BEE 0370                  		lea	$370(a6),a5
000812F2                            
000812F2                            loc_72364:
000812F2 244D                       		movea.l	a5,a2
000812F4 700B                       		moveq	#$B,d0
000812F6                            
000812F6                            loc_72368:
000812F6 429A                       		clr.l	(a2)+
000812F8 51C8 FFFC                  		dbf	d0,loc_72368
000812FC                            
000812FC 3A99                       		move.w	(a1)+,(a5)
000812FE 1B45 0002                  		move.b	d5,2(a5)
00081302 7000                       		moveq	#0,d0
00081304 3019                       		move.w	(a1)+,d0
00081306 D08B                       		add.l	a3,d0
00081308 2B40 0004                  		move.l	d0,4(a5)
0008130C 3B59 0008                  		move.w	(a1)+,8(a5)
00081310 1B7C 0001 000E             		move.b	#1,$E(a5)
00081316 1B46 000D                  		move.b	d6,$D(a5)
0008131A 4A04                       		tst.b	d4
0008131C 6B00                       		bmi.s	loc_72396
0008131E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00081324                            
00081324                            loc_72396:
00081324 51CF FFB0                  		dbf	d7,loc_72348
00081328                            
00081328 4A2E 0250                  		tst.b	$250(a6)
0008132C 6A00                       		bpl.s	loc_723A6
0008132E 08EE 0002 0340             		bset	#2,$340(a6)
00081334                            
00081334                            loc_723A6:
00081334 4A2E 0310                  		tst.b	$310(a6)
00081338 6A00                       		bpl.s	locret_723C6
0008133A 08EE 0002 0370             		bset	#2,$370(a6)
00081340 0004 001F                  		ori.b	#$1F,d4
00081344 13C4 00C0 0011             		move.b	d4,($C00011).l
0008134A 0844 0005                  		bchg	#5,d4
0008134E 13C4 00C0 0011             		move.b	d4,($C00011).l
00081354                            
00081354                            locret_723C6:
00081354 4E75                       		rts	
00081356                            ; End of function Sound_ChkValue
00081356                            
00081356                            ; ===========================================================================
00081356 00FF F100                  		dc.l $FFF100
0008135A 00FF F1F0                  		dc.l $FFF1F0
0008135E 00FF F250                  		dc.l $FFF250
00081362 00FF F310                  		dc.l $FFF310
00081366 00FF F340                  		dc.l $FFF340
0008136A 00FF F370                  		dc.l $FFF370
0008136E                            
0008136E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008136E                            
0008136E                            
0008136E                            Snd_FadeOut1:				; XREF: Sound_E0
0008136E 4216                       		clr.b	0(a6)
00081370 4BEE 0220                  		lea	$220(a6),a5
00081374 7E05                       		moveq	#5,d7
00081376                            
00081376                            loc_723EA:
00081376 4A15                       		tst.b	(a5)
00081378 6A00 0000                  		bpl.w	loc_72472
0008137C 0895 0007                  		bclr	#7,(a5)
00081380 7600                       		moveq	#0,d3
00081382 162D 0001                  		move.b	1(a5),d3
00081386 6B00                       		bmi.s	loc_7243C
00081388 4EBA 0000                  		jsr	sub_726FE(pc)
0008138C 0C03 0004                  		cmpi.b	#4,d3
00081390 6600                       		bne.s	loc_72416
00081392 4A2E 0340                  		tst.b	$340(a6)
00081396 6A00                       		bpl.s	loc_72416
00081398 4BEE 0340                  		lea	$340(a6),a5
0008139C 226E 0020                  		movea.l	$20(a6),a1
000813A0 6000                       		bra.s	loc_72428
000813A2                            ; ===========================================================================
000813A2                            
000813A2                            loc_72416:
000813A2 5503                       		subq.b	#2,d3
000813A4 E50B                       		lsl.b	#2,d3
000813A6 41FA FEB2                  		lea	dword_722CC(pc),a0
000813AA 264D                       		movea.l	a5,a3
000813AC 2A70 3000                  		movea.l	(a0,d3.w),a5
000813B0 226E 0018                  		movea.l	$18(a6),a1
000813B4                            
000813B4                            loc_72428:
000813B4 0895 0002                  		bclr	#2,(a5)
000813B8 08D5 0001                  		bset	#1,(a5)
000813BC 102D 000B                  		move.b	$B(a5),d0
000813C0 4EBA 0000                  		jsr	sub_72C4E(pc)
000813C4 2A4B                       		movea.l	a3,a5
000813C6 6000                       		bra.s	loc_72472
000813C8                            ; ===========================================================================
000813C8                            
000813C8                            loc_7243C:
000813C8 4EBA 0000                  		jsr	sub_729A0(pc)
000813CC 41EE 0370                  		lea	$370(a6),a0
000813D0 0C03 00E0                  		cmpi.b	#$E0,d3
000813D4 6700                       		beq.s	loc_7245A
000813D6 0C03 00C0                  		cmpi.b	#$C0,d3
000813DA 6700                       		beq.s	loc_7245A
000813DC E60B                       		lsr.b	#3,d3
000813DE 41FA FE7A                  		lea	dword_722CC(pc),a0
000813E2 2070 3000                  		movea.l	(a0,d3.w),a0
000813E6                            
000813E6                            loc_7245A:
000813E6 0890 0002                  		bclr	#2,(a0)
000813EA 08D0 0001                  		bset	#1,(a0)
000813EE 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000813F4 6600                       		bne.s	loc_72472
000813F6 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000813FE                            
000813FE                            loc_72472:
000813FE DAFC 0030                  		adda.w	#$30,a5
00081402 51CF FF72                  		dbf	d7,loc_723EA
00081406                            
00081406 4E75                       		rts	
00081408                            ; End of function Snd_FadeOut1
00081408                            
00081408                            
00081408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081408                            
00081408                            
00081408                            Snd_FadeOut2:				; XREF: Sound_E0
00081408 4BEE 0340                  		lea	$340(a6),a5
0008140C 4A15                       		tst.b	(a5)
0008140E 6A00                       		bpl.s	loc_724AE
00081410 0895 0007                  		bclr	#7,(a5)
00081414 0815 0002                  		btst	#2,(a5)
00081418 6600                       		bne.s	loc_724AE
0008141A 4EBA 0000                  		jsr	loc_7270A(pc)
0008141E 4BEE 0100                  		lea	$100(a6),a5
00081422 0895 0002                  		bclr	#2,(a5)
00081426 08D5 0001                  		bset	#1,(a5)
0008142A 4A15                       		tst.b	(a5)
0008142C 6A00                       		bpl.s	loc_724AE
0008142E 226E 0018                  		movea.l	$18(a6),a1
00081432 102D 000B                  		move.b	$B(a5),d0
00081436 4EBA 0000                  		jsr	sub_72C4E(pc)
0008143A                            
0008143A                            loc_724AE:
0008143A 4BEE 0370                  		lea	$370(a6),a5
0008143E 4A15                       		tst.b	(a5)
00081440 6A00                       		bpl.s	locret_724E4
00081442 0895 0007                  		bclr	#7,(a5)
00081446 0815 0002                  		btst	#2,(a5)
0008144A 6600                       		bne.s	locret_724E4
0008144C 4EBA 0000                  		jsr	loc_729A6(pc)
00081450 4BEE 01F0                  		lea	$1F0(a6),a5
00081454 0895 0002                  		bclr	#2,(a5)
00081458 08D5 0001                  		bset	#1,(a5)
0008145C 4A15                       		tst.b	(a5)
0008145E 6A00                       		bpl.s	locret_724E4
00081460 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00081466 6600                       		bne.s	locret_724E4
00081468 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00081470                            
00081470                            locret_724E4:
00081470 4E75                       		rts	
00081472                            ; End of function Snd_FadeOut2
00081472                            
00081472                            ; ===========================================================================
00081472                            ; ---------------------------------------------------------------------------
00081472                            ; Fade out music
00081472                            ; ---------------------------------------------------------------------------
00081472                            
00081472                            Sound_E0:				; XREF: Sound_ExIndex
00081472 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00081476 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008147A 1D7C 0003 0006             		move.b	#3,6(a6)
00081480 1D7C 0028 0004             		move.b	#$28,4(a6)
00081486 422E 0040                  		clr.b	$40(a6)
0008148A 422E 002A                  		clr.b	$2A(a6)
0008148E 4E75                       		rts	
00081490                            
00081490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081490                            
00081490                            
00081490                            sub_72504:				; XREF: sub_71B4C
00081490 102E 0006                  		move.b	6(a6),d0
00081494 6700                       		beq.s	loc_72510
00081496 532E 0006                  		subq.b	#1,6(a6)
0008149A 4E75                       		rts	
0008149C                            ; ===========================================================================
0008149C                            
0008149C                            loc_72510:
0008149C 532E 0004                  		subq.b	#1,4(a6)
000814A0 6700 0000                  		beq.w	Sound_E4
000814A4 1D7C 0003 0006             		move.b	#3,6(a6)
000814AA 4BEE 0070                  		lea	$70(a6),a5
000814AE 7E05                       		moveq	#5,d7
000814B0                            
000814B0                            loc_72524:
000814B0 4A15                       		tst.b	(a5)
000814B2 6A00                       		bpl.s	loc_72538
000814B4 522D 0009                  		addq.b	#1,9(a5)
000814B8 6A00                       		bpl.s	loc_72534
000814BA 0895 0007                  		bclr	#7,(a5)
000814BE 6000                       		bra.s	loc_72538
000814C0                            ; ===========================================================================
000814C0                            
000814C0                            loc_72534:
000814C0 4EBA 0000                  		jsr	sub_72CB4(pc)
000814C4                            
000814C4                            loc_72538:
000814C4 DAFC 0030                  		adda.w	#$30,a5
000814C8 51CF FFE6                  		dbf	d7,loc_72524
000814CC                            
000814CC 7E02                       		moveq	#2,d7
000814CE                            
000814CE                            loc_72542:
000814CE 4A15                       		tst.b	(a5)
000814D0 6A00                       		bpl.s	loc_72560
000814D2 522D 0009                  		addq.b	#1,9(a5)
000814D6 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000814DC 6500                       		bcs.s	loc_72558
000814DE 0895 0007                  		bclr	#7,(a5)
000814E2 6000                       		bra.s	loc_72560
000814E4                            ; ===========================================================================
000814E4                            
000814E4                            loc_72558:
000814E4 1C2D 0009                  		move.b	9(a5),d6
000814E8 4EBA 0000                  		jsr	sub_7296A(pc)
000814EC                            
000814EC                            loc_72560:
000814EC DAFC 0030                  		adda.w	#$30,a5
000814F0 51CF FFDC                  		dbf	d7,loc_72542
000814F4                            
000814F4 4E75                       		rts	
000814F6                            ; End of function sub_72504
000814F6                            
000814F6                            
000814F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000814F6                            
000814F6                            
000814F6                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000814F6 7602                       		moveq	#2,d3
000814F8 7028                       		moveq	#$28,d0
000814FA                            
000814FA                            loc_7256E:
000814FA 1203                       		move.b	d3,d1
000814FC 4EBA 0000                  		jsr	sub_7272E(pc)
00081500 5801                       		addq.b	#4,d1
00081502 4EBA 0000                  		jsr	sub_7272E(pc)
00081506 51CB FFF2                  		dbf	d3,loc_7256E
0008150A                            
0008150A 7040                       		moveq	#$40,d0
0008150C 727F                       		moveq	#$7F,d1
0008150E 7802                       		moveq	#2,d4
00081510                            
00081510                            loc_72584:
00081510 7603                       		moveq	#3,d3
00081512                            
00081512                            loc_72586:
00081512 4EBA 0000                  		jsr	sub_7272E(pc)
00081516 4EBA 0000                  		jsr	sub_72764(pc)
0008151A 5840                       		addq.w	#4,d0
0008151C 51CB FFF4                  		dbf	d3,loc_72586
00081520                            
00081520 0400 000F                  		subi.b	#$F,d0
00081524 51CC FFEA                  		dbf	d4,loc_72584
00081528                            
00081528 4E75                       		rts	
0008152A                            ; End of function sub_7256A
0008152A                            
0008152A                            ; ===========================================================================
0008152A                            ; ---------------------------------------------------------------------------
0008152A                            ; Stop music
0008152A                            ; ---------------------------------------------------------------------------
0008152A                            
0008152A                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0008152A 702B                       		moveq	#$2B,d0
0008152C 123C 0080                  		move.b	#$80,d1
00081530 4EBA 0000                  		jsr	sub_7272E(pc)
00081534 7027                       		moveq	#$27,d0
00081536 7200                       		moveq	#0,d1
00081538 4EBA 0000                  		jsr	sub_7272E(pc)
0008153C 204E                       		movea.l	a6,a0
0008153E 303C 00E3                  		move.w	#$E3,d0
00081542                            
00081542                            loc_725B6:
00081542 4298                       		clr.l	(a0)+
00081544 51C8 FFFC                  		dbf	d0,loc_725B6
00081548                            
00081548 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0008154E 4EBA FFA6                  		jsr	sub_7256A(pc)
00081552 6000 0000                  		bra.w	sub_729B6
00081556                            
00081556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081556                            
00081556                            
00081556                            sub_725CA:				; XREF: Sound_ChkValue
00081556 204E                       		movea.l	a6,a0
00081558 1216                       		move.b	0(a6),d1
0008155A 142E 0027                  		move.b	$27(a6),d2
0008155E 162E 002A                  		move.b	$2A(a6),d3
00081562 182E 0026                  		move.b	$26(a6),d4
00081566 3A2E 000A                  		move.w	$A(a6),d5
0008156A 303C 0087                  		move.w	#$87,d0
0008156E                            
0008156E                            loc_725E4:
0008156E 4298                       		clr.l	(a0)+
00081570 51C8 FFFC                  		dbf	d0,loc_725E4
00081574                            
00081574 1C81                       		move.b	d1,0(a6)
00081576 1D42 0027                  		move.b	d2,$27(a6)
0008157A 1D43 002A                  		move.b	d3,$2A(a6)
0008157E 1D44 0026                  		move.b	d4,$26(a6)
00081582 3D45 000A                  		move.w	d5,$A(a6)
00081586 1D7C 0080 0009             		move.b	#$80,9(a6)
0008158C 4EBA FF68                  		jsr	sub_7256A(pc)
00081590 6000 0000                  		bra.w	sub_729B6
00081594                            ; End of function sub_725CA
00081594                            
00081594                            
00081594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081594                            
00081594                            
00081594                            sub_7260C:				; XREF: sub_71B4C
00081594 1D6E 0002 0001             		move.b	2(a6),1(a6)
0008159A 41EE 004E                  		lea	$4E(a6),a0
0008159E 7030                       		moveq	#$30,d0
000815A0 7209                       		moveq	#9,d1
000815A2                            
000815A2                            loc_7261A:
000815A2 5210                       		addq.b	#1,(a0)
000815A4 D0C0                       		adda.w	d0,a0
000815A6 51C9 FFFA                  		dbf	d1,loc_7261A
000815AA                            
000815AA 4E75                       		rts	
000815AC                            ; End of function sub_7260C
000815AC                            
000815AC                            ; ===========================================================================
000815AC                            ; ---------------------------------------------------------------------------
000815AC                            ; Speed	up music
000815AC                            ; ---------------------------------------------------------------------------
000815AC                            
000815AC                            Sound_E2:				; XREF: Sound_ExIndex
000815AC 4A2E 0027                  		tst.b	$27(a6)
000815B0 6600                       		bne.s	loc_7263E
000815B2 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000815B8 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000815BE 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000815C4 4E75                       		rts	
000815C6                            ; ===========================================================================
000815C6                            
000815C6                            loc_7263E:
000815C6 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000815CC 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000815D2 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000815D8 4E75                       		rts	
000815DA                            ; ===========================================================================
000815DA                            ; ---------------------------------------------------------------------------
000815DA                            ; Change music back to normal speed
000815DA                            ; ---------------------------------------------------------------------------
000815DA                            
000815DA                            Sound_E3:				; XREF: Sound_ExIndex
000815DA 4A2E 0027                  		tst.b	$27(a6)
000815DE 6600                       		bne.s	loc_7266A
000815E0 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000815E6 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000815EC 422E 002A                  		clr.b	$2A(a6)
000815F0 4E75                       		rts	
000815F2                            ; ===========================================================================
000815F2                            
000815F2                            loc_7266A:
000815F2 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000815F8 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000815FE 422E 03CA                  		clr.b	$3CA(a6)
00081602 4E75                       		rts	
00081604                            
00081604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081604                            
00081604                            
00081604                            sub_7267C:				; XREF: sub_71B4C
00081604 4A2E 0025                  		tst.b	$25(a6)
00081608 6700                       		beq.s	loc_72688
0008160A 532E 0025                  		subq.b	#1,$25(a6)
0008160E 4E75                       		rts	
00081610                            ; ===========================================================================
00081610                            
00081610                            loc_72688:
00081610 4A2E 0026                  		tst.b	$26(a6)
00081614 6700                       		beq.s	loc_726D6
00081616 532E 0026                  		subq.b	#1,$26(a6)
0008161A 1D7C 0002 0025             		move.b	#2,$25(a6)
00081620 4BEE 0070                  		lea	$70(a6),a5
00081624 7E05                       		moveq	#5,d7
00081626                            
00081626                            loc_7269E:
00081626 4A15                       		tst.b	(a5)
00081628 6A00                       		bpl.s	loc_726AA
0008162A 532D 0009                  		subq.b	#1,9(a5)
0008162E 4EBA 0000                  		jsr	sub_72CB4(pc)
00081632                            
00081632                            loc_726AA:
00081632 DAFC 0030                  		adda.w	#$30,a5
00081636 51CF FFEE                  		dbf	d7,loc_7269E
0008163A 7E02                       		moveq	#2,d7
0008163C                            
0008163C                            loc_726B4:
0008163C 4A15                       		tst.b	(a5)
0008163E 6A00                       		bpl.s	loc_726CC
00081640 532D 0009                  		subq.b	#1,9(a5)
00081644 1C2D 0009                  		move.b	9(a5),d6
00081648 0C06 0010                  		cmpi.b	#$10,d6
0008164C 6500                       		bcs.s	loc_726C8
0008164E 7C0F                       		moveq	#$F,d6
00081650                            
00081650                            loc_726C8:
00081650 4EBA 0000                  		jsr	sub_7296A(pc)
00081654                            
00081654                            loc_726CC:
00081654 DAFC 0030                  		adda.w	#$30,a5
00081658 51CF FFE2                  		dbf	d7,loc_726B4
0008165C 4E75                       		rts	
0008165E                            ; ===========================================================================
0008165E                            
0008165E                            loc_726D6:
0008165E 08AE 0002 0040             		bclr	#2,$40(a6)
00081664 422E 0024                  		clr.b	$24(a6)
00081668 4E75                       		rts	
0008166A                            ; End of function sub_7267C
0008166A                            
0008166A                            ; ===========================================================================
0008166A                            
0008166A                            loc_726E2:				; XREF: sub_71CCA
0008166A 0815 0001                  		btst	#1,(a5)
0008166E 6600                       		bne.s	locret_726FC
00081670 0815 0002                  		btst	#2,(a5)
00081674 6600                       		bne.s	locret_726FC
00081676 7028                       		moveq	#$28,d0
00081678 122D 0001                  		move.b	1(a5),d1
0008167C 0001 00F0                  		ori.b	#-$10,d1
00081680 6000 0000                  		bra.w	sub_7272E
00081684                            ; ===========================================================================
00081684                            
00081684                            locret_726FC:
00081684 4E75                       		rts	
00081686                            
00081686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081686                            
00081686                            
00081686                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00081686 0815 0004                  		btst	#4,(a5)
0008168A 6600                       		bne.s	locret_72714
0008168C 0815 0002                  		btst	#2,(a5)
00081690 6600                       		bne.s	locret_72714
00081692                            
00081692                            loc_7270A:				; XREF: Snd_FadeOut2
00081692 7028                       		moveq	#$28,d0
00081694 122D 0001                  		move.b	1(a5),d1
00081698 6000 0000                  		bra.w	sub_7272E
0008169C                            ; ===========================================================================
0008169C                            
0008169C                            locret_72714:
0008169C 4E75                       		rts	
0008169E                            ; End of function sub_726FE
0008169E                            
0008169E                            ; ===========================================================================
0008169E                            
0008169E                            loc_72716:				; XREF: sub_72A5A
0008169E 0815 0002                  		btst	#2,(a5)
000816A2 6600                       		bne.s	locret_72720
000816A4 6000 0000                  		bra.w	sub_72722
000816A8                            ; ===========================================================================
000816A8                            
000816A8                            locret_72720:
000816A8 4E75                       		rts	
000816AA                            
000816AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000816AA                            
000816AA                            
000816AA                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000816AA 082D 0002 0001             		btst	#2,1(a5)
000816B0 6600                       		bne.s	loc_7275A
000816B2 D02D 0001                  		add.b	1(a5),d0
000816B6                            ; End of function sub_72722
000816B6                            
000816B6                            
000816B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000816B6                            
000816B6                            
000816B6                            sub_7272E:				; XREF: loc_71E6A
000816B6 1439 00A0 4000             		move.b	($A04000).l,d2
000816BC 0802 0007                  		btst	#7,d2
000816C0 66F4                       		bne.s	sub_7272E
000816C2 13C0 00A0 4000             		move.b	d0,($A04000).l
000816C8 4E71                       		nop	
000816CA 4E71                       		nop	
000816CC 4E71                       		nop	
000816CE                            
000816CE                            loc_72746:
000816CE 1439 00A0 4000             		move.b	($A04000).l,d2
000816D4 0802 0007                  		btst	#7,d2
000816D8 66F4                       		bne.s	loc_72746
000816DA                            
000816DA 13C1 00A0 4001             		move.b	d1,($A04001).l
000816E0 4E75                       		rts	
000816E2                            ; End of function sub_7272E
000816E2                            
000816E2                            ; ===========================================================================
000816E2                            
000816E2                            loc_7275A:				; XREF: sub_72722
000816E2 142D 0001                  		move.b	1(a5),d2
000816E6 0882 0002                  		bclr	#2,d2
000816EA D002                       		add.b	d2,d0
000816EC                            
000816EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000816EC                            
000816EC                            
000816EC                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000816EC 1439 00A0 4000             		move.b	($A04000).l,d2
000816F2 0802 0007                  		btst	#7,d2
000816F6 66F4                       		bne.s	sub_72764
000816F8 13C0 00A0 4002             		move.b	d0,($A04002).l
000816FE 4E71                       		nop	
00081700 4E71                       		nop	
00081702 4E71                       		nop	
00081704                            
00081704                            loc_7277C:
00081704 1439 00A0 4000             		move.b	($A04000).l,d2
0008170A 0802 0007                  		btst	#7,d2
0008170E 66F4                       		bne.s	loc_7277C
00081710                            
00081710 13C1 00A0 4003             		move.b	d1,($A04003).l
00081716 4E75                       		rts	
00081718                            ; End of function sub_72764
00081718                            
00081718                            ; ===========================================================================
00081718 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0008172A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0008173C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0008174C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0008175C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0008176C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0008177C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0008178C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0008179C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000817AC 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000817BC 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000817CC 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000817D8                            
000817D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000817D8                            
000817D8                            
000817D8                            sub_72850:				; XREF: sub_71B4C
000817D8 532D 000E                  		subq.b	#1,$E(a5)
000817DC 6600                       		bne.s	loc_72866
000817DE 0895 0004                  		bclr	#4,(a5)
000817E2 4EBA 0000                  		jsr	sub_72878(pc)
000817E6 4EBA 0000                  		jsr	sub_728DC(pc)
000817EA 6000 0000                  		bra.w	loc_7292E
000817EE                            ; ===========================================================================
000817EE                            
000817EE                            loc_72866:
000817EE 4EBA F418                  		jsr	sub_71D9E(pc)
000817F2 4EBA 0000                  		jsr	sub_72926(pc)
000817F6 4EBA F438                  		jsr	sub_71DC6(pc)
000817FA 4EBA 0000                  		jsr	sub_728E2(pc)
000817FE 4E75                       		rts	
00081800                            ; End of function sub_72850
00081800                            
00081800                            
00081800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081800                            
00081800                            
00081800                            sub_72878:				; XREF: sub_72850
00081800 0895 0001                  		bclr	#1,(a5)
00081804 286D 0004                  		movea.l	4(a5),a4
00081808                            
00081808                            loc_72880:
00081808 7A00                       		moveq	#0,d5
0008180A 1A1C                       		move.b	(a4)+,d5
0008180C 0C05 00E0                  		cmpi.b	#$E0,d5
00081810 6500                       		bcs.s	loc_72890
00081812 4EBA 0000                  		jsr	sub_72A5A(pc)
00081816 60F0                       		bra.s	loc_72880
00081818                            ; ===========================================================================
00081818                            
00081818                            loc_72890:
00081818 4A05                       		tst.b	d5
0008181A 6A00                       		bpl.s	loc_728A4
0008181C 4EBA 0000                  		jsr	sub_728AC(pc)
00081820 1A1C                       		move.b	(a4)+,d5
00081822 4A05                       		tst.b	d5
00081824 6A00                       		bpl.s	loc_728A4
00081826 534C                       		subq.w	#1,a4
00081828 6000 F3A0                  		bra.w	sub_71D60
0008182C                            ; ===========================================================================
0008182C                            
0008182C                            loc_728A4:
0008182C 4EBA F37C                  		jsr	sub_71D40(pc)
00081830 6000 F398                  		bra.w	sub_71D60
00081834                            ; End of function sub_72878
00081834                            
00081834                            
00081834                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081834                            
00081834                            
00081834                            sub_728AC:				; XREF: sub_72878
00081834 0405 0081                  		subi.b	#$81,d5
00081838 6500                       		bcs.s	loc_728CA
0008183A DA2D 0008                  		add.b	8(a5),d5
0008183E 0245 007F                  		andi.w	#$7F,d5
00081842 E34D                       		lsl.w	#1,d5
00081844 41FA 0000                  		lea	word_729CE(pc),a0
00081848 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0008184E 6000 F37A                  		bra.w	sub_71D60
00081852                            ; ===========================================================================
00081852                            
00081852                            loc_728CA:
00081852 08D5 0001                  		bset	#1,(a5)
00081856 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0008185C 4EBA F36C                  		jsr	sub_71D60(pc)
00081860 6000 0000                  		bra.w	sub_729A0
00081864                            ; End of function sub_728AC
00081864                            
00081864                            
00081864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081864                            
00081864                            
00081864                            sub_728DC:				; XREF: sub_72850
00081864 3C2D 0010                  		move.w	$10(a5),d6
00081868 6B00                       		bmi.s	loc_72920
0008186A                            ; End of function sub_728DC
0008186A                            
0008186A                            
0008186A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008186A                            
0008186A                            
0008186A                            sub_728E2:				; XREF: sub_72850
0008186A 102D 001E                  		move.b	$1E(a5),d0
0008186E 4880                       		ext.w	d0
00081870 DC40                       		add.w	d0,d6
00081872 0815 0002                  		btst	#2,(a5)
00081876 6600                       		bne.s	locret_7291E
00081878 0815 0001                  		btst	#1,(a5)
0008187C 6600                       		bne.s	locret_7291E
0008187E 102D 0001                  		move.b	1(a5),d0
00081882 0C00 00E0                  		cmpi.b	#$E0,d0
00081886 6600                       		bne.s	loc_72904
00081888 103C 00C0                  		move.b	#$C0,d0
0008188C                            
0008188C                            loc_72904:
0008188C 3206                       		move.w	d6,d1
0008188E 0201 000F                  		andi.b	#$F,d1
00081892 8001                       		or.b	d1,d0
00081894 E84E                       		lsr.w	#4,d6
00081896 0206 003F                  		andi.b	#$3F,d6
0008189A 13C0 00C0 0011             		move.b	d0,($C00011).l
000818A0 13C6 00C0 0011             		move.b	d6,($C00011).l
000818A6                            
000818A6                            locret_7291E:
000818A6 4E75                       		rts	
000818A8                            ; End of function sub_728E2
000818A8                            
000818A8                            ; ===========================================================================
000818A8                            
000818A8                            loc_72920:				; XREF: sub_728DC
000818A8 08D5 0001                  		bset	#1,(a5)
000818AC 4E75                       		rts	
000818AE                            
000818AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000818AE                            
000818AE                            
000818AE                            sub_72926:				; XREF: sub_72850
000818AE 4A2D 000B                  		tst.b	$B(a5)
000818B2 6700 0000                  		beq.w	locret_7298A
000818B6                            
000818B6                            loc_7292E:				; XREF: sub_72850
000818B6 1C2D 0009                  		move.b	9(a5),d6
000818BA 7000                       		moveq	#0,d0
000818BC 102D 000B                  		move.b	$B(a5),d0
000818C0 6700                       		beq.s	sub_7296A
000818C2 2079 0008 072C             		movea.l	(Go_PSGIndex).l,a0
000818C8 5340                       		subq.w	#1,d0
000818CA E548                       		lsl.w	#2,d0
000818CC 2070 0000                  		movea.l	(a0,d0.w),a0
000818D0 102D 000C                  		move.b	$C(a5),d0
000818D4 1030 0000                  		move.b	(a0,d0.w),d0
000818D8 522D 000C                  		addq.b	#1,$C(a5)
000818DC 0800 0007                  		btst	#7,d0
000818E0 6700                       		beq.s	loc_72960
000818E2 0C00 0080                  		cmpi.b	#$80,d0
000818E6 6700                       		beq.s	loc_7299A
000818E8                            
000818E8                            loc_72960:
000818E8 DC40                       		add.w	d0,d6
000818EA 0C06 0010                  		cmpi.b	#$10,d6
000818EE 6500                       		bcs.s	sub_7296A
000818F0 7C0F                       		moveq	#$F,d6
000818F2                            ; End of function sub_72926
000818F2                            
000818F2                            
000818F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000818F2                            
000818F2                            
000818F2                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000818F2 0815 0001                  		btst	#1,(a5)
000818F6 6600                       		bne.s	locret_7298A
000818F8 0815 0002                  		btst	#2,(a5)
000818FC 6600                       		bne.s	locret_7298A
000818FE 0815 0004                  		btst	#4,(a5)
00081902 6600                       		bne.s	loc_7298C
00081904                            
00081904                            loc_7297C:
00081904 8C2D 0001                  		or.b	1(a5),d6
00081908 0606 0010                  		addi.b	#$10,d6
0008190C 13C6 00C0 0011             		move.b	d6,($C00011).l
00081912                            
00081912                            locret_7298A:
00081912 4E75                       		rts	
00081914                            ; ===========================================================================
00081914                            
00081914                            loc_7298C:
00081914 4A2D 0013                  		tst.b	$13(a5)
00081918 67EA                       		beq.s	loc_7297C
0008191A 4A2D 0012                  		tst.b	$12(a5)
0008191E 66E4                       		bne.s	loc_7297C
00081920 4E75                       		rts	
00081922                            ; End of function sub_7296A
00081922                            
00081922                            ; ===========================================================================
00081922                            
00081922                            loc_7299A:				; XREF: sub_72926
00081922 532D 000C                  		subq.b	#1,$C(a5)
00081926 4E75                       		rts	
00081928                            
00081928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081928                            
00081928                            
00081928                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00081928 0815 0002                  		btst	#2,(a5)
0008192C 6600                       		bne.s	locret_729B4
0008192E                            
0008192E                            loc_729A6:				; XREF: Snd_FadeOut2
0008192E 102D 0001                  		move.b	1(a5),d0
00081932 0000 001F                  		ori.b	#$1F,d0
00081936 13C0 00C0 0011             		move.b	d0,($C00011).l
0008193C                            
0008193C                            locret_729B4:
0008193C 4E75                       		rts	
0008193E                            ; End of function sub_729A0
0008193E                            
0008193E                            
0008193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008193E                            
0008193E                            
0008193E                            sub_729B6:				; XREF: loc_71E7C
0008193E 41F9 00C0 0011             		lea	($C00011).l,a0
00081944 10BC 009F                  		move.b	#$9F,(a0)
00081948 10BC 00BF                  		move.b	#$BF,(a0)
0008194C 10BC 00DF                  		move.b	#$DF,(a0)
00081950 10BC 00FF                  		move.b	#$FF,(a0)
00081954 4E75                       		rts	
00081956                            ; End of function sub_729B6
00081956                            
00081956                            ; ===========================================================================
00081956 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00081968 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008197A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008198E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000819A2 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000819B6 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000819CA 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000819DE 0011 0000                  		dc.w $11, 0
000819E2                            
000819E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000819E2                            
000819E2                            
000819E2                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000819E2 0445 00E0                  		subi.w	#$E0,d5
000819E6 E54D                       		lsl.w	#2,d5
000819E8 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000819EC                            ; End of function sub_72A5A
000819EC                            
000819EC                            ; ===========================================================================
000819EC                            
000819EC                            loc_72A64:
000819EC 6000 0000                  		bra.w	loc_72ACC
000819F0                            ; ===========================================================================
000819F0 6000 0000                  		bra.w	loc_72AEC
000819F4                            ; ===========================================================================
000819F4 6000 0000                  		bra.w	loc_72AF2
000819F8                            ; ===========================================================================
000819F8 6000 0000                  		bra.w	loc_72AF8
000819FC                            ; ===========================================================================
000819FC 6000 0000                  		bra.w	loc_72B14
00081A00                            ; ===========================================================================
00081A00 6000 0000                  		bra.w	loc_72B9E
00081A04                            ; ===========================================================================
00081A04 6000 0000                  		bra.w	loc_72BA4
00081A08                            ; ===========================================================================
00081A08 6000 0000                  		bra.w	loc_72BAE
00081A0C                            ; ===========================================================================
00081A0C 6000 0000                  		bra.w	loc_72BB4
00081A10                            ; ===========================================================================
00081A10 6000 0000                  		bra.w	loc_72BBE
00081A14                            ; ===========================================================================
00081A14 6000 0000                  		bra.w	loc_72BC6
00081A18                            ; ===========================================================================
00081A18 6000 0000                  		bra.w	loc_72BD0
00081A1C                            ; ===========================================================================
00081A1C 6000 0000                  		bra.w	loc_72BE6
00081A20                            ; ===========================================================================
00081A20 6000 0000                  		bra.w	loc_72BEE
00081A24                            ; ===========================================================================
00081A24 6000 0000                  		bra.w	loc_72BF4
00081A28                            ; ===========================================================================
00081A28 6000 0000                  		bra.w	loc_72C26
00081A2C                            ; ===========================================================================
00081A2C 6000 0000                  		bra.w	loc_72D30
00081A30                            ; ===========================================================================
00081A30 6000 0000                  		bra.w	loc_72D52
00081A34                            ; ===========================================================================
00081A34 6000 0000                  		bra.w	loc_72D58
00081A38                            ; ===========================================================================
00081A38 6000 0000                  		bra.w	loc_72E06
00081A3C                            ; ===========================================================================
00081A3C 6000 0000                  		bra.w	loc_72E20
00081A40                            ; ===========================================================================
00081A40 6000 0000                  		bra.w	loc_72E26
00081A44                            ; ===========================================================================
00081A44 6000 0000                  		bra.w	loc_72E2C
00081A48                            ; ===========================================================================
00081A48 6000 0000                  		bra.w	loc_72E38
00081A4C                            ; ===========================================================================
00081A4C 6000 0000                  		bra.w	loc_72E52
00081A50                            ; ===========================================================================
00081A50 6000 0000                  		bra.w	loc_72E64
00081A54                            ; ===========================================================================
00081A54                            
00081A54                            loc_72ACC:				; XREF: loc_72A64
00081A54 121C                       		move.b	(a4)+,d1
00081A56 4A2D 0001                  		tst.b	1(a5)
00081A5A 6B00                       		bmi.s	locret_72AEA
00081A5C 102D 000A                  		move.b	$A(a5),d0
00081A60 0200 0037                  		andi.b	#$37,d0
00081A64 8200                       		or.b	d0,d1
00081A66 1B41 000A                  		move.b	d1,$A(a5)
00081A6A 103C 00B4                  		move.b	#$B4,d0
00081A6E 6000 FC2E                  		bra.w	loc_72716
00081A72                            ; ===========================================================================
00081A72                            
00081A72                            locret_72AEA:
00081A72 4E75                       		rts	
00081A74                            ; ===========================================================================
00081A74                            
00081A74                            loc_72AEC:				; XREF: loc_72A64
00081A74 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00081A78 4E75                       		rts	
00081A7A                            ; ===========================================================================
00081A7A                            
00081A7A                            loc_72AF2:				; XREF: loc_72A64
00081A7A 1D5C 0007                  		move.b	(a4)+,7(a6)
00081A7E 4E75                       		rts	
00081A80                            ; ===========================================================================
00081A80                            
00081A80                            loc_72AF8:				; XREF: loc_72A64
00081A80 7000                       		moveq	#0,d0
00081A82 102D 000D                  		move.b	$D(a5),d0
00081A86 2875 0000                  		movea.l	(a5,d0.w),a4
00081A8A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00081A92 544C                       		addq.w	#2,a4
00081A94 5800                       		addq.b	#4,d0
00081A96 1B40 000D                  		move.b	d0,$D(a5)
00081A9A 4E75                       		rts	
00081A9C                            ; ===========================================================================
00081A9C                            
00081A9C                            loc_72B14:				; XREF: loc_72A64
00081A9C 204E                       		movea.l	a6,a0
00081A9E 43EE 03A0                  		lea	$3A0(a6),a1
00081AA2 303C 0087                  		move.w	#$87,d0
00081AA6                            
00081AA6                            loc_72B1E:
00081AA6 20D9                       		move.l	(a1)+,(a0)+
00081AA8 51C8 FFFC                  		dbf	d0,loc_72B1E
00081AAC                            
00081AAC 08EE 0002 0040             		bset	#2,$40(a6)
00081AB2 264D                       		movea.l	a5,a3
00081AB4 1C3C 0028                  		move.b	#$28,d6
00081AB8 9C2E 0026                  		sub.b	$26(a6),d6
00081ABC 7E05                       		moveq	#5,d7
00081ABE 4BEE 0070                  		lea	$70(a6),a5
00081AC2                            
00081AC2                            loc_72B3A:
00081AC2 0815 0007                  		btst	#7,(a5)
00081AC6 6700                       		beq.s	loc_72B5C
00081AC8 08D5 0001                  		bset	#1,(a5)
00081ACC DD2D 0009                  		add.b	d6,9(a5)
00081AD0 0815 0002                  		btst	#2,(a5)
00081AD4 6600                       		bne.s	loc_72B5C
00081AD6 7000                       		moveq	#0,d0
00081AD8 102D 000B                  		move.b	$B(a5),d0
00081ADC 226E 0018                  		movea.l	$18(a6),a1
00081AE0 4EBA 0000                  		jsr	sub_72C4E(pc)
00081AE4                            
00081AE4                            loc_72B5C:
00081AE4 DAFC 0030                  		adda.w	#$30,a5
00081AE8 51CF FFD8                  		dbf	d7,loc_72B3A
00081AEC                            
00081AEC 7E02                       		moveq	#2,d7
00081AEE                            
00081AEE                            loc_72B66:
00081AEE 0815 0007                  		btst	#7,(a5)
00081AF2 6700                       		beq.s	loc_72B78
00081AF4 08D5 0001                  		bset	#1,(a5)
00081AF8 4EBA FE2E                  		jsr	sub_729A0(pc)
00081AFC DD2D 0009                  		add.b	d6,9(a5)
00081B00                            
00081B00                            loc_72B78:
00081B00 DAFC 0030                  		adda.w	#$30,a5
00081B04 51CF FFE8                  		dbf	d7,loc_72B66
00081B08 2A4B                       		movea.l	a3,a5
00081B0A 1D7C 0080 0024             		move.b	#$80,$24(a6)
00081B10 1D7C 0028 0026             		move.b	#$28,$26(a6)
00081B16 422E 0027                  		clr.b	$27(a6)
00081B1A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00081B22 504F                       		addq.w	#8,sp
00081B24 4E75                       		rts	
00081B26                            ; ===========================================================================
00081B26                            
00081B26                            loc_72B9E:				; XREF: loc_72A64
00081B26 1B5C 0002                  		move.b	(a4)+,2(a5)
00081B2A 4E75                       		rts	
00081B2C                            ; ===========================================================================
00081B2C                            
00081B2C                            loc_72BA4:				; XREF: loc_72A64
00081B2C 101C                       		move.b	(a4)+,d0
00081B2E D12D 0009                  		add.b	d0,9(a5)
00081B32 6000 0000                  		bra.w	sub_72CB4
00081B36                            ; ===========================================================================
00081B36                            
00081B36                            loc_72BAE:				; XREF: loc_72A64
00081B36 08D5 0004                  		bset	#4,(a5)
00081B3A 4E75                       		rts	
00081B3C                            ; ===========================================================================
00081B3C                            
00081B3C                            loc_72BB4:				; XREF: loc_72A64
00081B3C 1B54 0012                  		move.b	(a4),$12(a5)
00081B40 1B5C 0013                  		move.b	(a4)+,$13(a5)
00081B44 4E75                       		rts	
00081B46                            ; ===========================================================================
00081B46                            
00081B46                            loc_72BBE:				; XREF: loc_72A64
00081B46 101C                       		move.b	(a4)+,d0
00081B48 D12D 0008                  		add.b	d0,8(a5)
00081B4C 4E75                       		rts	
00081B4E                            ; ===========================================================================
00081B4E                            
00081B4E                            loc_72BC6:				; XREF: loc_72A64
00081B4E 1D54 0002                  		move.b	(a4),2(a6)
00081B52 1D5C 0001                  		move.b	(a4)+,1(a6)
00081B56 4E75                       		rts	
00081B58                            ; ===========================================================================
00081B58                            
00081B58                            loc_72BD0:				; XREF: loc_72A64
00081B58 41EE 0040                  		lea	$40(a6),a0
00081B5C 101C                       		move.b	(a4)+,d0
00081B5E 7230                       		moveq	#$30,d1
00081B60 7409                       		moveq	#9,d2
00081B62                            
00081B62                            loc_72BDA:
00081B62 1140 0002                  		move.b	d0,2(a0)
00081B66 D0C1                       		adda.w	d1,a0
00081B68 51CA FFF8                  		dbf	d2,loc_72BDA
00081B6C                            
00081B6C 4E75                       		rts	
00081B6E                            ; ===========================================================================
00081B6E                            
00081B6E                            loc_72BE6:				; XREF: loc_72A64
00081B6E 101C                       		move.b	(a4)+,d0
00081B70 D12D 0009                  		add.b	d0,9(a5)
00081B74 4E75                       		rts	
00081B76                            ; ===========================================================================
00081B76                            
00081B76                            loc_72BEE:				; XREF: loc_72A64
00081B76 422E 002C                  		clr.b	$2C(a6)
00081B7A 4E75                       		rts	
00081B7C                            ; ===========================================================================
00081B7C                            
00081B7C                            loc_72BF4:				; XREF: loc_72A64
00081B7C 0895 0007                  		bclr	#7,(a5)
00081B80 0895 0004                  		bclr	#4,(a5)
00081B84 4EBA FB00                  		jsr	sub_726FE(pc)
00081B88 4A2E 0250                  		tst.b	$250(a6)
00081B8C 6B00                       		bmi.s	loc_72C22
00081B8E 264D                       		movea.l	a5,a3
00081B90 4BEE 0100                  		lea	$100(a6),a5
00081B94 226E 0018                  		movea.l	$18(a6),a1
00081B98 0895 0002                  		bclr	#2,(a5)
00081B9C 08D5 0001                  		bset	#1,(a5)
00081BA0 102D 000B                  		move.b	$B(a5),d0
00081BA4 4EBA 0000                  		jsr	sub_72C4E(pc)
00081BA8 2A4B                       		movea.l	a3,a5
00081BAA                            
00081BAA                            loc_72C22:
00081BAA 504F                       		addq.w	#8,sp
00081BAC 4E75                       		rts	
00081BAE                            ; ===========================================================================
00081BAE                            
00081BAE                            loc_72C26:				; XREF: loc_72A64
00081BAE 7000                       		moveq	#0,d0
00081BB0 101C                       		move.b	(a4)+,d0
00081BB2 1B40 000B                  		move.b	d0,$B(a5)
00081BB6 0815 0002                  		btst	#2,(a5)
00081BBA 6600 0000                  		bne.w	locret_72CAA
00081BBE 226E 0018                  		movea.l	$18(a6),a1
00081BC2 4A2E 000E                  		tst.b	$E(a6)
00081BC6 6700                       		beq.s	sub_72C4E
00081BC8 226D 0020                  		movea.l	$20(a5),a1
00081BCC 4A2E 000E                  		tst.b	$E(a6)
00081BD0 6B00                       		bmi.s	sub_72C4E
00081BD2 226E 0020                  		movea.l	$20(a6),a1
00081BD6                            
00081BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081BD6                            
00081BD6                            
00081BD6                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00081BD6 5340                       		subq.w	#1,d0
00081BD8 6B00                       		bmi.s	loc_72C5C
00081BDA 323C 0019                  		move.w	#$19,d1
00081BDE                            
00081BDE                            loc_72C56:
00081BDE D2C1                       		adda.w	d1,a1
00081BE0 51C8 FFFC                  		dbf	d0,loc_72C56
00081BE4                            
00081BE4                            loc_72C5C:
00081BE4 1219                       		move.b	(a1)+,d1
00081BE6 1B41 001F                  		move.b	d1,$1F(a5)
00081BEA 1801                       		move.b	d1,d4
00081BEC 103C 00B0                  		move.b	#$B0,d0
00081BF0 4EBA FAB8                  		jsr	sub_72722(pc)
00081BF4 45FA 0000                  		lea	byte_72D18(pc),a2
00081BF8 7613                       		moveq	#$13,d3
00081BFA                            
00081BFA                            loc_72C72:
00081BFA 101A                       		move.b	(a2)+,d0
00081BFC 1219                       		move.b	(a1)+,d1
00081BFE 4EBA FAAA                  		jsr	sub_72722(pc)
00081C02 51CB FFF6                  		dbf	d3,loc_72C72
00081C06 7A03                       		moveq	#3,d5
00081C08 0244 0007                  		andi.w	#7,d4
00081C0C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00081C10 162D 0009                  		move.b	9(a5),d3
00081C14                            
00081C14                            loc_72C8C:
00081C14 101A                       		move.b	(a2)+,d0
00081C16 1219                       		move.b	(a1)+,d1
00081C18 E20C                       		lsr.b	#1,d4
00081C1A 6400                       		bcc.s	loc_72C96
00081C1C D203                       		add.b	d3,d1
00081C1E                            
00081C1E                            loc_72C96:
00081C1E 4EBA FA8A                  		jsr	sub_72722(pc)
00081C22 51CD FFF0                  		dbf	d5,loc_72C8C
00081C26 103C 00B4                  		move.b	#$B4,d0
00081C2A 122D 000A                  		move.b	$A(a5),d1
00081C2E 4EBA FA7A                  		jsr	sub_72722(pc)
00081C32                            
00081C32                            locret_72CAA:
00081C32 4E75                       		rts	
00081C34                            ; End of function sub_72C4E
00081C34                            
00081C34                            ; ===========================================================================
00081C34 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00081C3C                            
00081C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081C3C                            
00081C3C                            
00081C3C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00081C3C 0815 0002                  		btst	#2,(a5)
00081C40 6600                       		bne.s	locret_72D16
00081C42 7000                       		moveq	#0,d0
00081C44 102D 000B                  		move.b	$B(a5),d0
00081C48 226E 0018                  		movea.l	$18(a6),a1
00081C4C 4A2E 000E                  		tst.b	$E(a6)
00081C50 6700                       		beq.s	loc_72CD8
00081C52 226E 0020                  		movea.l	$20(a6),a1
00081C56 4A2E 000E                  		tst.b	$E(a6)
00081C5A 6B00                       		bmi.s	loc_72CD8
00081C5C 226E 0020                  		movea.l	$20(a6),a1
00081C60                            
00081C60                            loc_72CD8:
00081C60 5340                       		subq.w	#1,d0
00081C62 6B00                       		bmi.s	loc_72CE6
00081C64 323C 0019                  		move.w	#$19,d1
00081C68                            
00081C68                            loc_72CE0:
00081C68 D2C1                       		adda.w	d1,a1
00081C6A 51C8 FFFC                  		dbf	d0,loc_72CE0
00081C6E                            
00081C6E                            loc_72CE6:
00081C6E D2FC 0015                  		adda.w	#$15,a1
00081C72 45FA 0000                  		lea	byte_72D2C(pc),a2
00081C76 102D 001F                  		move.b	$1F(a5),d0
00081C7A 0240 0007                  		andi.w	#7,d0
00081C7E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00081C82 162D 0009                  		move.b	9(a5),d3
00081C86 6B00                       		bmi.s	locret_72D16
00081C88 7A03                       		moveq	#3,d5
00081C8A                            
00081C8A                            loc_72D02:
00081C8A 101A                       		move.b	(a2)+,d0
00081C8C 1219                       		move.b	(a1)+,d1
00081C8E E20C                       		lsr.b	#1,d4
00081C90 6400                       		bcc.s	loc_72D12
00081C92 D203                       		add.b	d3,d1
00081C94 6500                       		bcs.s	loc_72D12
00081C96 4EBA FA12                  		jsr	sub_72722(pc)
00081C9A                            
00081C9A                            loc_72D12:
00081C9A 51CD FFEE                  		dbf	d5,loc_72D02
00081C9E                            
00081C9E                            locret_72D16:
00081C9E 4E75                       		rts	
00081CA0                            ; End of function sub_72CB4
00081CA0                            
00081CA0                            ; ===========================================================================
00081CA0 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00081CAA 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00081CB4 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00081CB8                            ; ===========================================================================
00081CB8                            
00081CB8                            loc_72D30:				; XREF: loc_72A64
00081CB8 08D5 0003                  		bset	#3,(a5)
00081CBC 2B4C 0014                  		move.l	a4,$14(a5)
00081CC0 1B5C 0018                  		move.b	(a4)+,$18(a5)
00081CC4 1B5C 0019                  		move.b	(a4)+,$19(a5)
00081CC8 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00081CCC 101C                       		move.b	(a4)+,d0
00081CCE E208                       		lsr.b	#1,d0
00081CD0 1B40 001B                  		move.b	d0,$1B(a5)
00081CD4 426D 001C                  		clr.w	$1C(a5)
00081CD8 4E75                       		rts	
00081CDA                            ; ===========================================================================
00081CDA                            
00081CDA                            loc_72D52:				; XREF: loc_72A64
00081CDA 08D5 0003                  		bset	#3,(a5)
00081CDE 4E75                       		rts	
00081CE0                            ; ===========================================================================
00081CE0                            
00081CE0                            loc_72D58:				; XREF: loc_72A64
00081CE0 0895 0007                  		bclr	#7,(a5)
00081CE4 0895 0004                  		bclr	#4,(a5)
00081CE8 4A2D 0001                  		tst.b	1(a5)
00081CEC 6B00                       		bmi.s	loc_72D74
00081CEE 4A2E 0008                  		tst.b	8(a6)
00081CF2 6B00 0000                  		bmi.w	loc_72E02
00081CF6 4EBA F98E                  		jsr	sub_726FE(pc)
00081CFA 6000                       		bra.s	loc_72D78
00081CFC                            ; ===========================================================================
00081CFC                            
00081CFC                            loc_72D74:
00081CFC 4EBA FC2A                  		jsr	sub_729A0(pc)
00081D00                            
00081D00                            loc_72D78:
00081D00 4A2E 000E                  		tst.b	$E(a6)
00081D04 6A00 0000                  		bpl.w	loc_72E02
00081D08 4216                       		clr.b	0(a6)
00081D0A 7000                       		moveq	#0,d0
00081D0C 102D 0001                  		move.b	1(a5),d0
00081D10 6B00                       		bmi.s	loc_72DCC
00081D12 41FA F546                  		lea	dword_722CC(pc),a0
00081D16 264D                       		movea.l	a5,a3
00081D18 0C00 0004                  		cmpi.b	#4,d0
00081D1C 6600                       		bne.s	loc_72DA8
00081D1E 4A2E 0340                  		tst.b	$340(a6)
00081D22 6A00                       		bpl.s	loc_72DA8
00081D24 4BEE 0340                  		lea	$340(a6),a5
00081D28 226E 0020                  		movea.l	$20(a6),a1
00081D2C 6000                       		bra.s	loc_72DB8
00081D2E                            ; ===========================================================================
00081D2E                            
00081D2E                            loc_72DA8:
00081D2E 5500                       		subq.b	#2,d0
00081D30 E508                       		lsl.b	#2,d0
00081D32 2A70 0000                  		movea.l	(a0,d0.w),a5
00081D36 4A15                       		tst.b	(a5)
00081D38 6A00                       		bpl.s	loc_72DC8
00081D3A 226E 0018                  		movea.l	$18(a6),a1
00081D3E                            
00081D3E                            loc_72DB8:
00081D3E 0895 0002                  		bclr	#2,(a5)
00081D42 08D5 0001                  		bset	#1,(a5)
00081D46 102D 000B                  		move.b	$B(a5),d0
00081D4A 4EBA FE8A                  		jsr	sub_72C4E(pc)
00081D4E                            
00081D4E                            loc_72DC8:
00081D4E 2A4B                       		movea.l	a3,a5
00081D50 6000                       		bra.s	loc_72E02
00081D52                            ; ===========================================================================
00081D52                            
00081D52                            loc_72DCC:
00081D52 41EE 0370                  		lea	$370(a6),a0
00081D56 4A10                       		tst.b	(a0)
00081D58 6A00                       		bpl.s	loc_72DE0
00081D5A 0C00 00E0                  		cmpi.b	#$E0,d0
00081D5E 6700                       		beq.s	loc_72DEA
00081D60 0C00 00C0                  		cmpi.b	#$C0,d0
00081D64 6700                       		beq.s	loc_72DEA
00081D66                            
00081D66                            loc_72DE0:
00081D66 41FA F4F2                  		lea	dword_722CC(pc),a0
00081D6A E608                       		lsr.b	#3,d0
00081D6C 2070 0000                  		movea.l	(a0,d0.w),a0
00081D70                            
00081D70                            loc_72DEA:
00081D70 0890 0002                  		bclr	#2,(a0)
00081D74 08D0 0001                  		bset	#1,(a0)
00081D78 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00081D7E 6600                       		bne.s	loc_72E02
00081D80 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00081D88                            
00081D88                            loc_72E02:
00081D88 504F                       		addq.w	#8,sp
00081D8A 4E75                       		rts	
00081D8C                            ; ===========================================================================
00081D8C                            
00081D8C                            loc_72E06:				; XREF: loc_72A64
00081D8C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00081D92 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00081D96 0815 0002                  		btst	#2,(a5)
00081D9A 6600                       		bne.s	locret_72E1E
00081D9C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00081DA4                            
00081DA4                            locret_72E1E:
00081DA4 4E75                       		rts	
00081DA6                            ; ===========================================================================
00081DA6                            
00081DA6                            loc_72E20:				; XREF: loc_72A64
00081DA6 0895 0003                  		bclr	#3,(a5)
00081DAA 4E75                       		rts	
00081DAC                            ; ===========================================================================
00081DAC                            
00081DAC                            loc_72E26:				; XREF: loc_72A64
00081DAC 1B5C 000B                  		move.b	(a4)+,$B(a5)
00081DB0 4E75                       		rts	
00081DB2                            ; ===========================================================================
00081DB2                            
00081DB2                            loc_72E2C:				; XREF: loc_72A64
00081DB2 101C                       		move.b	(a4)+,d0
00081DB4 E148                       		lsl.w	#8,d0
00081DB6 101C                       		move.b	(a4)+,d0
00081DB8 D8C0                       		adda.w	d0,a4
00081DBA 534C                       		subq.w	#1,a4
00081DBC 4E75                       		rts	
00081DBE                            ; ===========================================================================
00081DBE                            
00081DBE                            loc_72E38:				; XREF: loc_72A64
00081DBE 7000                       		moveq	#0,d0
00081DC0 101C                       		move.b	(a4)+,d0
00081DC2 121C                       		move.b	(a4)+,d1
00081DC4 4A35 0024                  		tst.b	$24(a5,d0.w)
00081DC8 6600                       		bne.s	loc_72E48
00081DCA 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00081DCE                            
00081DCE                            loc_72E48:
00081DCE 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00081DD2 66DE                       		bne.s	loc_72E2C
00081DD4 544C                       		addq.w	#2,a4
00081DD6 4E75                       		rts	
00081DD8                            ; ===========================================================================
00081DD8                            
00081DD8                            loc_72E52:				; XREF: loc_72A64
00081DD8 7000                       		moveq	#0,d0
00081DDA 102D 000D                  		move.b	$D(a5),d0
00081DDE 5900                       		subq.b	#4,d0
00081DE0 2B8C 0000                  		move.l	a4,(a5,d0.w)
00081DE4 1B40 000D                  		move.b	d0,$D(a5)
00081DE8 60C8                       		bra.s	loc_72E2C
00081DEA                            ; ===========================================================================
00081DEA                            
00081DEA                            loc_72E64:				; XREF: loc_72A64
00081DEA 103C 0088                  		move.b	#$88,d0
00081DEE 123C 000F                  		move.b	#$F,d1
00081DF2 4EBA F8C2                  		jsr	sub_7272E(pc)
00081DF6 103C 008C                  		move.b	#$8C,d0
00081DFA 123C 000F                  		move.b	#$F,d1
00081DFE 6000 F8B6                  		bra.w	sub_7272E
00081E02                            ; ===========================================================================
00081E02                            Kos_Z80:	incbin	sound\z80_1.bin
00081EB2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00081EB4 21                         		dc.b $21
00081EB5 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00081EB7                            		incbin	sound\z80_2.bin
00083562                            		even
00083562                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00089D62                            		even
00089D62                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00093600                            		even
00093600                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00097220 00                         		even
00097220                            Music84:	include	sound\music84.asm ; Star Light Act 1
00097220                            music84_Header:
00097220 =00000001                  smpsHeaderStartSong = 1
00097220 0000                       	smpsHeaderVoice     music84_Voices
00097222 0603                       	smpsHeaderChan      $06, $03
00097224 0205                       	smpsHeaderTempo     $02, $05
00097226                            
0009722A 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0009722E 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00097232 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00097236 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0009723A 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0009723E 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00097244 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0009724A 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00097250                            
00097250                            ; FM1 Data
00097250                            music84_FM1:
00097250 E0C0                       	smpsPan             panCenter, $00
00097254 E107                       	smpsAlterNote       $07
00097256 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0009725A E106                       	smpsAlterNote       $06
0009725C 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00097260 E10B                       	smpsAlterNote       $0B
00097262 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00097268 E10C                       	smpsAlterNote       $0C
0009726A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009726D E10B                       	smpsAlterNote       $0B
0009726F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00097272 E109                       	smpsAlterNote       $09
00097274 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00097279 E108                       	smpsAlterNote       $08
0009727B 8001                       	dc.b	nRst, $01
0009727D E10B                       	smpsAlterNote       $0B
0009727F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00097285 E107                       	smpsAlterNote       $07
00097287 9B03                       	dc.b	nD2, $03
00097289                            
00097289                            music84_Jump04:
00097289 E107                       	smpsAlterNote       $07
0009728B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009728F E10B                       	smpsAlterNote       $0B
00097291 A202 8001                  	dc.b	nA2, $02, nRst, $01
00097295 E107                       	smpsAlterNote       $07
00097297 9B03                       	dc.b	nD2, $03
00097299 E11A                       	smpsAlterNote       $1A
0009729B A301                       	dc.b	nBb2, $01
0009729D E1F2                       	smpsAlterNote       $F2
0009729F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000972A2 E1FF                       	smpsAlterNote       $FF
000972A4 E701                       	dc.b	smpsNoAttack, $01
000972A6 E111                       	smpsAlterNote       $11
000972A8 E701                       	dc.b	smpsNoAttack, $01
000972AA E106                       	smpsAlterNote       $06
000972AC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000972AF E107                       	smpsAlterNote       $07
000972B1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000972B5 E108                       	smpsAlterNote       $08
000972B7 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000972BF E109                       	smpsAlterNote       $09
000972C1 A003                       	dc.b	nG2, $03
000972C3 E10C                       	smpsAlterNote       $0C
000972C5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000972C9 E1FD                       	smpsAlterNote       $FD
000972CB A401                       	dc.b	nB2, $01
000972CD E109                       	smpsAlterNote       $09
000972CF E701                       	dc.b	smpsNoAttack, $01
000972D1 E106                       	smpsAlterNote       $06
000972D3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000972D6 E109                       	smpsAlterNote       $09
000972D8 A007                       	dc.b	nG2, $07
000972DA E108                       	smpsAlterNote       $08
000972DC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000972E0 E107                       	smpsAlterNote       $07
000972E2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000972E8 E10B                       	smpsAlterNote       $0B
000972EA A203 8001                  	dc.b	nA2, $03, nRst, $01
000972EE E107                       	smpsAlterNote       $07
000972F0 9B03                       	dc.b	nD2, $03
000972F2 E11A                       	smpsAlterNote       $1A
000972F4 A301                       	dc.b	nBb2, $01
000972F6 E1F9                       	smpsAlterNote       $F9
000972F8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000972FB E107                       	smpsAlterNote       $07
000972FD E701                       	dc.b	smpsNoAttack, $01
000972FF E111                       	smpsAlterNote       $11
00097301 E701                       	dc.b	smpsNoAttack, $01
00097303 E106                       	smpsAlterNote       $06
00097305 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0009730A E107                       	smpsAlterNote       $07
0009730C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00097314 E1EC                       	smpsAlterNote       $EC
00097316 A101                       	dc.b	nAb2, $01
00097318 E108                       	smpsAlterNote       $08
0009731A E701                       	dc.b	smpsNoAttack, $01
0009731C E116                       	smpsAlterNote       $16
0009731E E701                       	dc.b	smpsNoAttack, $01
00097320 E1F5                       	smpsAlterNote       $F5
00097322 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00097325 E10B                       	smpsAlterNote       $0B
00097327 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009732B E107                       	smpsAlterNote       $07
0009732D 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00097333 E109                       	smpsAlterNote       $09
00097335 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00097339 E10B                       	smpsAlterNote       $0B
0009733B 9603                       	dc.b	nA1, $03
0009733D E107                       	smpsAlterNote       $07
0009733F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00097345 E10B                       	smpsAlterNote       $0B
00097347 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009734B E107                       	smpsAlterNote       $07
0009734D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00097351 E11A                       	smpsAlterNote       $1A
00097353 A301                       	dc.b	nBb2, $01
00097355 E1F9                       	smpsAlterNote       $F9
00097357 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009735A E107                       	smpsAlterNote       $07
0009735C E701                       	dc.b	smpsNoAttack, $01
0009735E E1FB                       	smpsAlterNote       $FB
00097360 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097363 E106                       	smpsAlterNote       $06
00097365 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097369 E107                       	smpsAlterNote       $07
0009736B 9B03                       	dc.b	nD2, $03
0009736D E108                       	smpsAlterNote       $08
0009736F 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00097375 E109                       	smpsAlterNote       $09
00097377 A002 8001                  	dc.b	nG2, $02, nRst, $01
0009737B E10C                       	smpsAlterNote       $0C
0009737D A303                       	dc.b	nBb2, $03
0009737F E1F0                       	smpsAlterNote       $F0
00097381 A401                       	dc.b	nB2, $01
00097383 E1FD                       	smpsAlterNote       $FD
00097385 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0009738A E106                       	smpsAlterNote       $06
0009738C 8001                       	dc.b	nRst, $01
0009738E E109                       	smpsAlterNote       $09
00097390 A006 8001                  	dc.b	nG2, $06, nRst, $01
00097394 E108                       	smpsAlterNote       $08
00097396 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009739A E107                       	smpsAlterNote       $07
0009739C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000973A2 E10B                       	smpsAlterNote       $0B
000973A4 A203                       	dc.b	nA2, $03
000973A6 E107                       	smpsAlterNote       $07
000973A8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000973AC E1F2                       	smpsAlterNote       $F2
000973AE A401                       	dc.b	nB2, $01
000973B0 E1FF                       	smpsAlterNote       $FF
000973B2 E701                       	dc.b	smpsNoAttack, $01
000973B4 E107                       	smpsAlterNote       $07
000973B6 E701                       	dc.b	smpsNoAttack, $01
000973B8 E1FB                       	smpsAlterNote       $FB
000973BA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000973BD E106                       	smpsAlterNote       $06
000973BF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000973C3 E107                       	smpsAlterNote       $07
000973C5 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000973CF E117                       	smpsAlterNote       $17
000973D1 A001                       	dc.b	nG2, $01
000973D3 E1FA                       	smpsAlterNote       $FA
000973D5 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000973D8 E108                       	smpsAlterNote       $08
000973DA E701                       	dc.b	smpsNoAttack, $01
000973DC E1E7                       	smpsAlterNote       $E7
000973DE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000973E1 E103                       	smpsAlterNote       $03
000973E3 E701                       	dc.b	smpsNoAttack, $01
000973E5 E10B                       	smpsAlterNote       $0B
000973E7 E702                       	dc.b	smpsNoAttack, $02
000973E9 E107                       	smpsAlterNote       $07
000973EB 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000973F3 E106                       	smpsAlterNote       $06
000973F5 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000973FB E10C                       	smpsAlterNote       $0C
000973FD 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00097403 E109                       	smpsAlterNote       $09
00097405 9E03                       	dc.b	nF2, $03
00097407 E10C                       	smpsAlterNote       $0C
00097409 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009740D E1EA                       	smpsAlterNote       $EA
0009740F A201                       	dc.b	nA2, $01
00097411 E106                       	smpsAlterNote       $06
00097413 E701                       	dc.b	smpsNoAttack, $01
00097415 E1E2                       	smpsAlterNote       $E2
00097417 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009741A E1F0                       	smpsAlterNote       $F0
0009741C E701                       	dc.b	smpsNoAttack, $01
0009741E E10C                       	smpsAlterNote       $0C
00097420 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009742C E116                       	smpsAlterNote       $16
0009742E 9C01                       	dc.b	nEb2, $01
00097430 E105                       	smpsAlterNote       $05
00097432 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00097435 E1F1                       	smpsAlterNote       $F1
00097437 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0009743A E1FF                       	smpsAlterNote       $FF
0009743C E701                       	dc.b	smpsNoAttack, $01
0009743E E109                       	smpsAlterNote       $09
00097440 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097444 E10C                       	smpsAlterNote       $0C
00097446 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00097452 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00097458 E109                       	smpsAlterNote       $09
0009745A 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009745E E10C                       	smpsAlterNote       $0C
00097460 9703                       	dc.b	nBb1, $03
00097462 E11A                       	smpsAlterNote       $1A
00097464 A101                       	dc.b	nAb2, $01
00097466 E1FB                       	smpsAlterNote       $FB
00097468 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009746B E10A                       	smpsAlterNote       $0A
0009746D E701                       	dc.b	smpsNoAttack, $01
0009746F E1E8                       	smpsAlterNote       $E8
00097471 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097474 E106                       	smpsAlterNote       $06
00097476 E701                       	dc.b	smpsNoAttack, $01
00097478 E10C                       	smpsAlterNote       $0C
0009747A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00097486 E1F9                       	smpsAlterNote       $F9
00097488 9D01                       	dc.b	nE2, $01
0009748A E108                       	smpsAlterNote       $08
0009748C E701                       	dc.b	smpsNoAttack, $01
0009748E E1F6                       	smpsAlterNote       $F6
00097490 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097493 E109                       	smpsAlterNote       $09
00097495 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00097499 E10C                       	smpsAlterNote       $0C
0009749B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000974A7 E108                       	smpsAlterNote       $08
000974A9 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000974AF E106                       	smpsAlterNote       $06
000974B1 A403 8001                  	dc.b	nB2, $03, nRst, $01
000974B5 E108                       	smpsAlterNote       $08
000974B7 9D03                       	dc.b	nE2, $03
000974B9 E1EB                       	smpsAlterNote       $EB
000974BB A801                       	dc.b	nEb3, $01
000974BD E109                       	smpsAlterNote       $09
000974BF E701                       	dc.b	smpsNoAttack, $01
000974C1 E1FA                       	smpsAlterNote       $FA
000974C3 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000974C6 E108                       	smpsAlterNote       $08
000974C8 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000974D4 E1E9                       	smpsAlterNote       $E9
000974D6 A301                       	dc.b	nBb2, $01
000974D8 E107                       	smpsAlterNote       $07
000974DA E701                       	dc.b	smpsNoAttack, $01
000974DC E1F0                       	smpsAlterNote       $F0
000974DE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000974E1 E1F7                       	smpsAlterNote       $F7
000974E3 E701                       	dc.b	smpsNoAttack, $01
000974E5 E107                       	smpsAlterNote       $07
000974E7 E701                       	dc.b	smpsNoAttack, $01
000974E9 E106                       	smpsAlterNote       $06
000974EB E701                       	dc.b	smpsNoAttack, $01
000974ED E108                       	smpsAlterNote       $08
000974EF 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000974F5 E106                       	smpsAlterNote       $06
000974F7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000974FB E108                       	smpsAlterNote       $08
000974FD 9D03                       	dc.b	nE2, $03
000974FF E10B                       	smpsAlterNote       $0B
00097501 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00097509 E108                       	smpsAlterNote       $08
0009750B 9D03                       	dc.b	nE2, $03
0009750D E10B                       	smpsAlterNote       $0B
0009750F 9603 8001                  	dc.b	nA1, $03, nRst, $01
00097513 E113                       	smpsAlterNote       $13
00097515 A001                       	dc.b	nG2, $01
00097517 E118                       	smpsAlterNote       $18
00097519 E701                       	dc.b	smpsNoAttack, $01
0009751B E1E9                       	smpsAlterNote       $E9
0009751D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00097520 E1F3                       	smpsAlterNote       $F3
00097522 E701                       	dc.b	smpsNoAttack, $01
00097524 E1FD                       	smpsAlterNote       $FD
00097526 E701                       	dc.b	smpsNoAttack, $01
00097528 E102                       	smpsAlterNote       $02
0009752A E701                       	dc.b	smpsNoAttack, $01
0009752C E107                       	smpsAlterNote       $07
0009752E 8001                       	dc.b	nRst, $01
00097530 E10B                       	smpsAlterNote       $0B
00097532 9603                       	dc.b	nA1, $03
00097534 E10C                       	smpsAlterNote       $0C
00097536 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0009753C E10B                       	smpsAlterNote       $0B
0009753E 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0009754A 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00097550 E107                       	smpsAlterNote       $07
00097552 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097558 E10B                       	smpsAlterNote       $0B
0009755A A203                       	dc.b	nA2, $03
0009755C E107                       	smpsAlterNote       $07
0009755E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097562 E1F2                       	smpsAlterNote       $F2
00097564 A401                       	dc.b	nB2, $01
00097566 E1FF                       	smpsAlterNote       $FF
00097568 E701                       	dc.b	smpsNoAttack, $01
0009756A E107                       	smpsAlterNote       $07
0009756C E701                       	dc.b	smpsNoAttack, $01
0009756E E1FB                       	smpsAlterNote       $FB
00097570 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097573 E106                       	smpsAlterNote       $06
00097575 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097579 E107                       	smpsAlterNote       $07
0009757B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009757F E108                       	smpsAlterNote       $08
00097581 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00097587 E109                       	smpsAlterNote       $09
00097589 A003 8001                  	dc.b	nG2, $03, nRst, $01
0009758D E10C                       	smpsAlterNote       $0C
0009758F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00097593 E1F0                       	smpsAlterNote       $F0
00097595 A401                       	dc.b	nB2, $01
00097597 E109                       	smpsAlterNote       $09
00097599 E701                       	dc.b	smpsNoAttack, $01
0009759B E106                       	smpsAlterNote       $06
0009759D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000975A0 E109                       	smpsAlterNote       $09
000975A2 A007                       	dc.b	nG2, $07
000975A4 E108                       	smpsAlterNote       $08
000975A6 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000975AA E107                       	smpsAlterNote       $07
000975AC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000975B2 E10B                       	smpsAlterNote       $0B
000975B4 A202 8001                  	dc.b	nA2, $02, nRst, $01
000975B8 E107                       	smpsAlterNote       $07
000975BA 9B03                       	dc.b	nD2, $03
000975BC E11A                       	smpsAlterNote       $1A
000975BE A301                       	dc.b	nBb2, $01
000975C0 E1F2                       	smpsAlterNote       $F2
000975C2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000975C5 E1FF                       	smpsAlterNote       $FF
000975C7 E701                       	dc.b	smpsNoAttack, $01
000975C9 E111                       	smpsAlterNote       $11
000975CB E701                       	dc.b	smpsNoAttack, $01
000975CD E106                       	smpsAlterNote       $06
000975CF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000975D2 E107                       	smpsAlterNote       $07
000975D4 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000975E0 E117                       	smpsAlterNote       $17
000975E2 A001                       	dc.b	nG2, $01
000975E4 E1FA                       	smpsAlterNote       $FA
000975E6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000975E9 E116                       	smpsAlterNote       $16
000975EB E701                       	dc.b	smpsNoAttack, $01
000975ED E1F5                       	smpsAlterNote       $F5
000975EF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000975F2 E103                       	smpsAlterNote       $03
000975F4 E701                       	dc.b	smpsNoAttack, $01
000975F6 E10B                       	smpsAlterNote       $0B
000975F8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000975FC E107                       	smpsAlterNote       $07
000975FE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097604 E109                       	smpsAlterNote       $09
00097606 9E03                       	dc.b	nF2, $03
00097608 E10B                       	smpsAlterNote       $0B
0009760A 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009760E E107                       	smpsAlterNote       $07
00097610 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00097616 E10B                       	smpsAlterNote       $0B
00097618 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009761C E107                       	smpsAlterNote       $07
0009761E 9B03                       	dc.b	nD2, $03
00097620 E11A                       	smpsAlterNote       $1A
00097622 A301                       	dc.b	nBb2, $01
00097624 E1F9                       	smpsAlterNote       $F9
00097626 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097629 E107                       	smpsAlterNote       $07
0009762B E701                       	dc.b	smpsNoAttack, $01
0009762D E111                       	smpsAlterNote       $11
0009762F E701                       	dc.b	smpsNoAttack, $01
00097631 E106                       	smpsAlterNote       $06
00097633 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00097638 E107                       	smpsAlterNote       $07
0009763A 9B03                       	dc.b	nD2, $03
0009763C E108                       	smpsAlterNote       $08
0009763E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00097644 E109                       	smpsAlterNote       $09
00097646 A003                       	dc.b	nG2, $03
00097648 E10C                       	smpsAlterNote       $0C
0009764A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009764E E1FD                       	smpsAlterNote       $FD
00097650 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00097655 E106                       	smpsAlterNote       $06
00097657 8001                       	dc.b	nRst, $01
00097659 E109                       	smpsAlterNote       $09
0009765B A006 8001                  	dc.b	nG2, $06, nRst, $01
0009765F E108                       	smpsAlterNote       $08
00097661 9C03                       	dc.b	nEb2, $03
00097663 E107                       	smpsAlterNote       $07
00097665 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0009766B E10B                       	smpsAlterNote       $0B
0009766D A203 8001                  	dc.b	nA2, $03, nRst, $01
00097671 E107                       	smpsAlterNote       $07
00097673 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00097677 E11A                       	smpsAlterNote       $1A
00097679 A301                       	dc.b	nBb2, $01
0009767B E1F9                       	smpsAlterNote       $F9
0009767D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097680 E107                       	smpsAlterNote       $07
00097682 E701                       	dc.b	smpsNoAttack, $01
00097684 E1FB                       	smpsAlterNote       $FB
00097686 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097689 E106                       	smpsAlterNote       $06
0009768B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009768F E107                       	smpsAlterNote       $07
00097691 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00097699 E1EC                       	smpsAlterNote       $EC
0009769B A101                       	dc.b	nAb2, $01
0009769D E108                       	smpsAlterNote       $08
0009769F E701                       	dc.b	smpsNoAttack, $01
000976A1 E1E7                       	smpsAlterNote       $E7
000976A3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000976A6 E1F5                       	smpsAlterNote       $F5
000976A8 E701                       	dc.b	smpsNoAttack, $01
000976AA E10B                       	smpsAlterNote       $0B
000976AC E702                       	dc.b	smpsNoAttack, $02
000976AE E107                       	smpsAlterNote       $07
000976B0 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000976B6 E106                       	smpsAlterNote       $06
000976B8 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000976BE E10C                       	smpsAlterNote       $0C
000976C0 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000976C8 E109                       	smpsAlterNote       $09
000976CA 9E03                       	dc.b	nF2, $03
000976CC E10C                       	smpsAlterNote       $0C
000976CE 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000976D2 E1EA                       	smpsAlterNote       $EA
000976D4 A201                       	dc.b	nA2, $01
000976D6 E106                       	smpsAlterNote       $06
000976D8 E701                       	dc.b	smpsNoAttack, $01
000976DA E114                       	smpsAlterNote       $14
000976DC E701                       	dc.b	smpsNoAttack, $01
000976DE E1F0                       	smpsAlterNote       $F0
000976E0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000976E3 E10C                       	smpsAlterNote       $0C
000976E5 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000976F1 9703                       	dc.b	nBb1, $03
000976F3 E116                       	smpsAlterNote       $16
000976F5 9C01                       	dc.b	nEb2, $01
000976F7 E105                       	smpsAlterNote       $05
000976F9 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000976FC E113                       	smpsAlterNote       $13
000976FE E701                       	dc.b	smpsNoAttack, $01
00097700 E1FF                       	smpsAlterNote       $FF
00097702 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097705 E109                       	smpsAlterNote       $09
00097707 E703                       	dc.b	smpsNoAttack, $03
00097709 E10C                       	smpsAlterNote       $0C
0009770B 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00097717 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009771F E109                       	smpsAlterNote       $09
00097721 9E03                       	dc.b	nF2, $03
00097723 E10C                       	smpsAlterNote       $0C
00097725 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097729 E1EC                       	smpsAlterNote       $EC
0009772B A201                       	dc.b	nA2, $01
0009772D E10A                       	smpsAlterNote       $0A
0009772F E701                       	dc.b	smpsNoAttack, $01
00097731 E1E8                       	smpsAlterNote       $E8
00097733 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097736 E1F7                       	smpsAlterNote       $F7
00097738 E701                       	dc.b	smpsNoAttack, $01
0009773A E10C                       	smpsAlterNote       $0C
0009773C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00097748 E1EA                       	smpsAlterNote       $EA
0009774A 9D01                       	dc.b	nE2, $01
0009774C E108                       	smpsAlterNote       $08
0009774E E701                       	dc.b	smpsNoAttack, $01
00097750 E1F6                       	smpsAlterNote       $F6
00097752 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097755 E105                       	smpsAlterNote       $05
00097757 E701                       	dc.b	smpsNoAttack, $01
00097759 E109                       	smpsAlterNote       $09
0009775B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009775F E10C                       	smpsAlterNote       $0C
00097761 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0009776D E108                       	smpsAlterNote       $08
0009776F 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00097775 E106                       	smpsAlterNote       $06
00097777 A403 8001                  	dc.b	nB2, $03, nRst, $01
0009777B E108                       	smpsAlterNote       $08
0009777D 9D03                       	dc.b	nE2, $03
0009777F E1EB                       	smpsAlterNote       $EB
00097781 A801                       	dc.b	nEb3, $01
00097783 E109                       	smpsAlterNote       $09
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 E1EB                       	smpsAlterNote       $EB
00097789 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009778C E108                       	smpsAlterNote       $08
0009778E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0009779A E1E9                       	smpsAlterNote       $E9
0009779C A301                       	dc.b	nBb2, $01
0009779E E1F8                       	smpsAlterNote       $F8
000977A0 E701                       	dc.b	smpsNoAttack, $01
000977A2 E116                       	smpsAlterNote       $16
000977A4 E701                       	dc.b	smpsNoAttack, $01
000977A6 E1F7                       	smpsAlterNote       $F7
000977A8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000977AB E107                       	smpsAlterNote       $07
000977AD E701                       	dc.b	smpsNoAttack, $01
000977AF E1EE                       	smpsAlterNote       $EE
000977B1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000977B4 E106                       	smpsAlterNote       $06
000977B6 8001                       	dc.b	nRst, $01
000977B8 E108                       	smpsAlterNote       $08
000977BA 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000977C0 E106                       	smpsAlterNote       $06
000977C2 A402 8001                  	dc.b	nB2, $02, nRst, $01
000977C6 E108                       	smpsAlterNote       $08
000977C8 9D03                       	dc.b	nE2, $03
000977CA E10B                       	smpsAlterNote       $0B
000977CC 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000977D2 E108                       	smpsAlterNote       $08
000977D4 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000977D8 E10B                       	smpsAlterNote       $0B
000977DA 9603                       	dc.b	nA1, $03
000977DC E10E                       	smpsAlterNote       $0E
000977DE A001                       	dc.b	nG2, $01
000977E0 E118                       	smpsAlterNote       $18
000977E2 E701                       	dc.b	smpsNoAttack, $01
000977E4 E1E9                       	smpsAlterNote       $E9
000977E6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000977E9 E1EE                       	smpsAlterNote       $EE
000977EB E701                       	dc.b	smpsNoAttack, $01
000977ED E1F8                       	smpsAlterNote       $F8
000977EF E701                       	dc.b	smpsNoAttack, $01
000977F1 E102                       	smpsAlterNote       $02
000977F3 E701                       	dc.b	smpsNoAttack, $01
000977F5 E107                       	smpsAlterNote       $07
000977F7 8001                       	dc.b	nRst, $01
000977F9 E10B                       	smpsAlterNote       $0B
000977FB 9603                       	dc.b	nA1, $03
000977FD E10C                       	smpsAlterNote       $0C
000977FF 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00097805 E10B                       	smpsAlterNote       $0B
00097807 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00097813 8001 9603                  	dc.b	nRst, $01, nA1, $03
00097817 E10C                       	smpsAlterNote       $0C
00097819 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00097825 8001                       	dc.b	nRst, $01
00097827 E10B                       	smpsAlterNote       $0B
00097829 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00097831 E107                       	smpsAlterNote       $07
00097833 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00097837 E10B                       	smpsAlterNote       $0B
00097839 9603                       	dc.b	nA1, $03
0009783B E109                       	smpsAlterNote       $09
0009783D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00097841 E108                       	smpsAlterNote       $08
00097843 9D06                       	dc.b	nE2, $06
00097845 E107                       	smpsAlterNote       $07
00097847 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009784B E106                       	smpsAlterNote       $06
0009784D 9903                       	dc.b	nC2, $03
0009784F E10C                       	smpsAlterNote       $0C
00097851 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097855 E10B                       	smpsAlterNote       $0B
00097857 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00097863 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009786D E10C                       	smpsAlterNote       $0C
0009786F 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0009787B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00097887 8001                       	dc.b	nRst, $01
00097889 E10B                       	smpsAlterNote       $0B
0009788B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00097897 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000978A3 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000978AF 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000978B9 E10C                       	smpsAlterNote       $0C
000978BB 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000978C7 E10B                       	smpsAlterNote       $0B
000978C9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000978D1 E107                       	smpsAlterNote       $07
000978D3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000978D7 E10B                       	smpsAlterNote       $0B
000978D9 9603                       	dc.b	nA1, $03
000978DB E109                       	smpsAlterNote       $09
000978DD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000978E1 E108                       	smpsAlterNote       $08
000978E3 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000978E7 E107                       	smpsAlterNote       $07
000978E9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000978ED E106                       	smpsAlterNote       $06
000978EF 9903                       	dc.b	nC2, $03
000978F1 E10C                       	smpsAlterNote       $0C
000978F3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000978F7 E10B                       	smpsAlterNote       $0B
000978F9 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00097905 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009790F E10C                       	smpsAlterNote       $0C
00097911 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0009791D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00097929 8001                       	dc.b	nRst, $01
0009792B E10B                       	smpsAlterNote       $0B
0009792D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00097939 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00097943 E10C                       	smpsAlterNote       $0C
00097945 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097951 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0009795D E10B                       	smpsAlterNote       $0B
0009795F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009796B 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00097975 E10C                       	smpsAlterNote       $0C
00097977 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097983 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0009798F E10B                       	smpsAlterNote       $0B
00097991 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0009799D 8001                       	dc.b	nRst, $01
0009799F E1EC                       	smpsAlterNote       $EC
000979A1 A101                       	dc.b	nAb2, $01
000979A3 E1FA                       	smpsAlterNote       $FA
000979A5 E701                       	dc.b	smpsNoAttack, $01
000979A7 E116                       	smpsAlterNote       $16
000979A9 E701                       	dc.b	smpsNoAttack, $01
000979AB E1F5                       	smpsAlterNote       $F5
000979AD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000979B0 E10B                       	smpsAlterNote       $0B
000979B2 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000979BE 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000979CA E107                       	smpsAlterNote       $07
000979CC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000979D2 E10B                       	smpsAlterNote       $0B
000979D4 A203                       	dc.b	nA2, $03
000979D6 E107                       	smpsAlterNote       $07
000979D8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000979DC E1F3                       	smpsAlterNote       $F3
000979DE A401                       	dc.b	nB2, $01
000979E0 E102                       	smpsAlterNote       $02
000979E2 E701                       	dc.b	smpsNoAttack, $01
000979E4 E109                       	smpsAlterNote       $09
000979E6 E701                       	dc.b	smpsNoAttack, $01
000979E8 E102                       	smpsAlterNote       $02
000979EA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000979ED E106                       	smpsAlterNote       $06
000979EF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000979F3 E107                       	smpsAlterNote       $07
000979F5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000979F9 E108                       	smpsAlterNote       $08
000979FB 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00097A01 E109                       	smpsAlterNote       $09
00097A03 A003 8001                  	dc.b	nG2, $03, nRst, $01
00097A07 E1F2                       	smpsAlterNote       $F2
00097A09 A401                       	dc.b	nB2, $01
00097A0B E1FF                       	smpsAlterNote       $FF
00097A0D E701                       	dc.b	smpsNoAttack, $01
00097A0F E111                       	smpsAlterNote       $11
00097A11 E701                       	dc.b	smpsNoAttack, $01
00097A13 E1FB                       	smpsAlterNote       $FB
00097A15 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097A18 E106                       	smpsAlterNote       $06
00097A1A E702                       	dc.b	smpsNoAttack, $02
00097A1C E109                       	smpsAlterNote       $09
00097A1E A007                       	dc.b	nG2, $07
00097A20 E108                       	smpsAlterNote       $08
00097A22 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00097A26 E107                       	smpsAlterNote       $07
00097A28 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097A2E E10B                       	smpsAlterNote       $0B
00097A30 A202 8001                  	dc.b	nA2, $02, nRst, $01
00097A34 E107                       	smpsAlterNote       $07
00097A36 9B03                       	dc.b	nD2, $03
00097A38 E11A                       	smpsAlterNote       $1A
00097A3A A301                       	dc.b	nBb2, $01
00097A3C E1F2                       	smpsAlterNote       $F2
00097A3E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097A41 E1FF                       	smpsAlterNote       $FF
00097A43 E701                       	dc.b	smpsNoAttack, $01
00097A45 E111                       	smpsAlterNote       $11
00097A47 E701                       	dc.b	smpsNoAttack, $01
00097A49 E106                       	smpsAlterNote       $06
00097A4B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097A4E E107                       	smpsAlterNote       $07
00097A50 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00097A5C E117                       	smpsAlterNote       $17
00097A5E A001                       	dc.b	nG2, $01
00097A60 E1FA                       	smpsAlterNote       $FA
00097A62 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00097A65 E116                       	smpsAlterNote       $16
00097A67 E701                       	dc.b	smpsNoAttack, $01
00097A69 E1F5                       	smpsAlterNote       $F5
00097A6B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00097A6E E103                       	smpsAlterNote       $03
00097A70 E701                       	dc.b	smpsNoAttack, $01
00097A72 E10B                       	smpsAlterNote       $0B
00097A74 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097A78 E107                       	smpsAlterNote       $07
00097A7A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097A80 E109                       	smpsAlterNote       $09
00097A82 9E03                       	dc.b	nF2, $03
00097A84 E10B                       	smpsAlterNote       $0B
00097A86 9603 8001                  	dc.b	nA1, $03, nRst, $01
00097A8A E107                       	smpsAlterNote       $07
00097A8C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00097A92 E10B                       	smpsAlterNote       $0B
00097A94 A203 8001                  	dc.b	nA2, $03, nRst, $01
00097A98 E107                       	smpsAlterNote       $07
00097A9A 9B03                       	dc.b	nD2, $03
00097A9C E11A                       	smpsAlterNote       $1A
00097A9E A301                       	dc.b	nBb2, $01
00097AA0 E1F9                       	smpsAlterNote       $F9
00097AA2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097AA5 E1FF                       	smpsAlterNote       $FF
00097AA7 E701                       	dc.b	smpsNoAttack, $01
00097AA9 E111                       	smpsAlterNote       $11
00097AAB E701                       	dc.b	smpsNoAttack, $01
00097AAD E106                       	smpsAlterNote       $06
00097AAF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097AB2 E107                       	smpsAlterNote       $07
00097AB4 9B03                       	dc.b	nD2, $03
00097AB6 E108                       	smpsAlterNote       $08
00097AB8 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00097ABE E109                       	smpsAlterNote       $09
00097AC0 A003                       	dc.b	nG2, $03
00097AC2 E1F0                       	smpsAlterNote       $F0
00097AC4 A501                       	dc.b	nC3, $01
00097AC6 E106                       	smpsAlterNote       $06
00097AC8 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00097ACC E109                       	smpsAlterNote       $09
00097ACE A006 8001                  	dc.b	nG2, $06, nRst, $01
00097AD2 E108                       	smpsAlterNote       $08
00097AD4 9C03                       	dc.b	nEb2, $03
00097AD6 E107                       	smpsAlterNote       $07
00097AD8 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00097ADE E10B                       	smpsAlterNote       $0B
00097AE0 A203 8001                  	dc.b	nA2, $03, nRst, $01
00097AE4 E107                       	smpsAlterNote       $07
00097AE6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00097AEA E11A                       	smpsAlterNote       $1A
00097AEC A301                       	dc.b	nBb2, $01
00097AEE E1F9                       	smpsAlterNote       $F9
00097AF0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097AF3 E107                       	smpsAlterNote       $07
00097AF5 E701                       	dc.b	smpsNoAttack, $01
00097AF7 E1FB                       	smpsAlterNote       $FB
00097AF9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097AFC E106                       	smpsAlterNote       $06
00097AFE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097B02 E107                       	smpsAlterNote       $07
00097B04 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00097B0C E1EC                       	smpsAlterNote       $EC
00097B0E A101                       	dc.b	nAb2, $01
00097B10 E108                       	smpsAlterNote       $08
00097B12 E701                       	dc.b	smpsNoAttack, $01
00097B14 E1E7                       	smpsAlterNote       $E7
00097B16 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00097B19 E1F5                       	smpsAlterNote       $F5
00097B1B E701                       	dc.b	smpsNoAttack, $01
00097B1D E10B                       	smpsAlterNote       $0B
00097B1F E702                       	dc.b	smpsNoAttack, $02
00097B21 E107                       	smpsAlterNote       $07
00097B23 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00097B29 E106                       	smpsAlterNote       $06
00097B2B 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00097B31 E10C                       	smpsAlterNote       $0C
00097B33 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00097B3B E109                       	smpsAlterNote       $09
00097B3D 9E03                       	dc.b	nF2, $03
00097B3F E10C                       	smpsAlterNote       $0C
00097B41 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097B45 E1EA                       	smpsAlterNote       $EA
00097B47 A201                       	dc.b	nA2, $01
00097B49 E106                       	smpsAlterNote       $06
00097B4B E701                       	dc.b	smpsNoAttack, $01
00097B4D E114                       	smpsAlterNote       $14
00097B4F E701                       	dc.b	smpsNoAttack, $01
00097B51 E1F0                       	smpsAlterNote       $F0
00097B53 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097B56 E10C                       	smpsAlterNote       $0C
00097B58 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00097B64 9703                       	dc.b	nBb1, $03
00097B66 E116                       	smpsAlterNote       $16
00097B68 9C01                       	dc.b	nEb2, $01
00097B6A E105                       	smpsAlterNote       $05
00097B6C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00097B6F E113                       	smpsAlterNote       $13
00097B71 E701                       	dc.b	smpsNoAttack, $01
00097B73 E1FF                       	smpsAlterNote       $FF
00097B75 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097B78 E109                       	smpsAlterNote       $09
00097B7A E703                       	dc.b	smpsNoAttack, $03
00097B7C E10C                       	smpsAlterNote       $0C
00097B7E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00097B8A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097B92 E109                       	smpsAlterNote       $09
00097B94 9E03                       	dc.b	nF2, $03
00097B96 E10C                       	smpsAlterNote       $0C
00097B98 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097B9C E1EA                       	smpsAlterNote       $EA
00097B9E A201                       	dc.b	nA2, $01
00097BA0 E106                       	smpsAlterNote       $06
00097BA2 E701                       	dc.b	smpsNoAttack, $01
00097BA4 E1E2                       	smpsAlterNote       $E2
00097BA6 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097BA9 E1F0                       	smpsAlterNote       $F0
00097BAB E701                       	dc.b	smpsNoAttack, $01
00097BAD E10C                       	smpsAlterNote       $0C
00097BAF E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00097BBB E116                       	smpsAlterNote       $16
00097BBD 9C01                       	dc.b	nEb2, $01
00097BBF E105                       	smpsAlterNote       $05
00097BC1 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00097BC4 E1F1                       	smpsAlterNote       $F1
00097BC6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097BC9 E1FF                       	smpsAlterNote       $FF
00097BCB E701                       	dc.b	smpsNoAttack, $01
00097BCD E109                       	smpsAlterNote       $09
00097BCF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097BD3 E10C                       	smpsAlterNote       $0C
00097BD5 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00097BE1 E106                       	smpsAlterNote       $06
00097BE3 9903                       	dc.b	nC2, $03
00097BE5 E107                       	smpsAlterNote       $07
00097BE7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097BEB E109                       	smpsAlterNote       $09
00097BED 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00097BF3 E107                       	smpsAlterNote       $07
00097BF5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097BF9 E108                       	smpsAlterNote       $08
00097BFB 9D03                       	dc.b	nE2, $03
00097BFD E10B                       	smpsAlterNote       $0B
00097BFF 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00097C05 E109                       	smpsAlterNote       $09
00097C07 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00097C0D E10C                       	smpsAlterNote       $0C
00097C0F 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00097C15 E106                       	smpsAlterNote       $06
00097C17 9903                       	dc.b	nC2, $03
00097C19 E11A                       	smpsAlterNote       $1A
00097C1B A301                       	dc.b	nBb2, $01
00097C1D E1F9                       	smpsAlterNote       $F9
00097C1F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097C22 E1FF                       	smpsAlterNote       $FF
00097C24 E701                       	dc.b	smpsNoAttack, $01
00097C26 E111                       	smpsAlterNote       $11
00097C28 E701                       	dc.b	smpsNoAttack, $01
00097C2A E106                       	smpsAlterNote       $06
00097C2C E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00097C33 E109                       	smpsAlterNote       $09
00097C35 A003                       	dc.b	nG2, $03
00097C37 E106                       	smpsAlterNote       $06
00097C39 9907                       	dc.b	nC2, $07
00097C3B E107                       	smpsAlterNote       $07
00097C3D 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00097C45 E10B                       	smpsAlterNote       $0B
00097C47 A203                       	dc.b	nA2, $03
00097C49 E107                       	smpsAlterNote       $07
00097C4B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097C4F E1F2                       	smpsAlterNote       $F2
00097C51 A401                       	dc.b	nB2, $01
00097C53 E1F9                       	smpsAlterNote       $F9
00097C55 E701                       	dc.b	smpsNoAttack, $01
00097C57 E107                       	smpsAlterNote       $07
00097C59 E701                       	dc.b	smpsNoAttack, $01
00097C5B E1FB                       	smpsAlterNote       $FB
00097C5D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097C60 E106                       	smpsAlterNote       $06
00097C62 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097C66 E107                       	smpsAlterNote       $07
00097C68 9B03                       	dc.b	nD2, $03
00097C6A E108                       	smpsAlterNote       $08
00097C6C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00097C72 E109                       	smpsAlterNote       $09
00097C74 A003 8001                  	dc.b	nG2, $03, nRst, $01
00097C78 E1F2                       	smpsAlterNote       $F2
00097C7A A401                       	dc.b	nB2, $01
00097C7C E1F9                       	smpsAlterNote       $F9
00097C7E E701                       	dc.b	smpsNoAttack, $01
00097C80 E107                       	smpsAlterNote       $07
00097C82 E701                       	dc.b	smpsNoAttack, $01
00097C84 E1FB                       	smpsAlterNote       $FB
00097C86 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097C89 E106                       	smpsAlterNote       $06
00097C8B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097C8F E108                       	smpsAlterNote       $08
00097C91 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00097C95 E10C                       	smpsAlterNote       $0C
00097C97 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00097C9B E107                       	smpsAlterNote       $07
00097C9D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097CA3 E10B                       	smpsAlterNote       $0B
00097CA5 A203                       	dc.b	nA2, $03
00097CA7 E107                       	smpsAlterNote       $07
00097CA9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097CAD E1F2                       	smpsAlterNote       $F2
00097CAF A401                       	dc.b	nB2, $01
00097CB1 E1FF                       	smpsAlterNote       $FF
00097CB3 E701                       	dc.b	smpsNoAttack, $01
00097CB5 E107                       	smpsAlterNote       $07
00097CB7 E701                       	dc.b	smpsNoAttack, $01
00097CB9 E1FB                       	smpsAlterNote       $FB
00097CBB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097CBE E106                       	smpsAlterNote       $06
00097CC0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097CC4 E107                       	smpsAlterNote       $07
00097CC6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00097CCA E108                       	smpsAlterNote       $08
00097CCC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00097CD2 E109                       	smpsAlterNote       $09
00097CD4 A003 8001                  	dc.b	nG2, $03, nRst, $01
00097CD8 E1F2                       	smpsAlterNote       $F2
00097CDA A401                       	dc.b	nB2, $01
00097CDC E1FF                       	smpsAlterNote       $FF
00097CDE E701                       	dc.b	smpsNoAttack, $01
00097CE0 E111                       	smpsAlterNote       $11
00097CE2 E701                       	dc.b	smpsNoAttack, $01
00097CE4 E1FB                       	smpsAlterNote       $FB
00097CE6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097CE9 E106                       	smpsAlterNote       $06
00097CEB E702                       	dc.b	smpsNoAttack, $02
00097CED E108                       	smpsAlterNote       $08
00097CEF 9C07                       	dc.b	nEb2, $07
00097CF1 E10C                       	smpsAlterNote       $0C
00097CF3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00097CF7 E107                       	smpsAlterNote       $07
00097CF9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097CFF E10B                       	smpsAlterNote       $0B
00097D01 A202 8001                  	dc.b	nA2, $02, nRst, $01
00097D05 E107                       	smpsAlterNote       $07
00097D07 9B03                       	dc.b	nD2, $03
00097D09 E11A                       	smpsAlterNote       $1A
00097D0B A301                       	dc.b	nBb2, $01
00097D0D E1F2                       	smpsAlterNote       $F2
00097D0F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097D12 E1FF                       	smpsAlterNote       $FF
00097D14 E701                       	dc.b	smpsNoAttack, $01
00097D16 E111                       	smpsAlterNote       $11
00097D18 E701                       	dc.b	smpsNoAttack, $01
00097D1A E106                       	smpsAlterNote       $06
00097D1C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097D1F E107                       	smpsAlterNote       $07
00097D21 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097D25 E108                       	smpsAlterNote       $08
00097D27 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00097D2F E109                       	smpsAlterNote       $09
00097D31 A003                       	dc.b	nG2, $03
00097D33 E11A                       	smpsAlterNote       $1A
00097D35 A301                       	dc.b	nBb2, $01
00097D37 E1F2                       	smpsAlterNote       $F2
00097D39 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097D3C E1FF                       	smpsAlterNote       $FF
00097D3E E701                       	dc.b	smpsNoAttack, $01
00097D40 E111                       	smpsAlterNote       $11
00097D42 E701                       	dc.b	smpsNoAttack, $01
00097D44 E106                       	smpsAlterNote       $06
00097D46 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097D49 E108                       	smpsAlterNote       $08
00097D4B 9C07                       	dc.b	nEb2, $07
00097D4D E10C                       	smpsAlterNote       $0C
00097D4F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00097D53 E107                       	smpsAlterNote       $07
00097D55 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00097D61 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00097D6B E108                       	smpsAlterNote       $08
00097D6D 9C06                       	dc.b	nEb2, $06
00097D6F E10C                       	smpsAlterNote       $0C
00097D71 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097D75 E108                       	smpsAlterNote       $08
00097D77 9C03                       	dc.b	nEb2, $03
00097D79 E109                       	smpsAlterNote       $09
00097D7B A003 8001                  	dc.b	nG2, $03, nRst, $01
00097D7F E10C                       	smpsAlterNote       $0C
00097D81 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00097D89 E107                       	smpsAlterNote       $07
00097D8B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097D8F F6F4 F8                    	smpsJump            music84_Jump04
00097D92                            
00097D92                            ; FM2 Data
00097D92                            music84_FM2:
00097D92 E0C0                       	smpsPan             panCenter, $00
00097D96 E10B                       	smpsAlterNote       $0B
00097D98 C603 8007                  	dc.b	nA5, $03, nRst, $07
00097D9C E109                       	smpsAlterNote       $09
00097D9E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00097DA2 E108                       	smpsAlterNote       $08
00097DA4 C103 8004                  	dc.b	nE5, $03, nRst, $04
00097DAA E080                       	smpsPan             panLeft, $00
00097DAC E10C                       	smpsAlterNote       $0C
00097DAE E6F9                       	smpsAlterVol        $F9
00097DB0 C703                       	dc.b	nBb5, $03
00097DB2 E10B                       	smpsAlterNote       $0B
00097DB4 C603 8001                  	dc.b	nA5, $03, nRst, $01
00097DB8 E109                       	smpsAlterNote       $09
00097DBA C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00097DC0 E108                       	smpsAlterNote       $08
00097DC2 C103 8001                  	dc.b	nE5, $03, nRst, $01
00097DC6 E106                       	smpsAlterNote       $06
00097DC8 BD03                       	dc.b	nC5, $03
00097DCA E10B                       	smpsAlterNote       $0B
00097DCC BA03 8001                  	dc.b	nA4, $03, nRst, $01
00097DD2 E0C0                       	smpsPan             panCenter, $00
00097DD4 E107                       	smpsAlterNote       $07
00097DD6 E606                       	smpsAlterVol        $06
00097DD8 BF03                       	dc.b	nD5, $03
00097DDA                            
00097DDA                            music84_Jump03:
00097DDA E108                       	smpsAlterNote       $08
00097DDC C103 8001                  	dc.b	nE5, $03, nRst, $01
00097DE0 E109                       	smpsAlterNote       $09
00097DE2 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00097DE8 E10B                       	smpsAlterNote       $0B
00097DEA C607                       	dc.b	nA5, $07
00097DEC E107                       	smpsAlterNote       $07
00097DEE BF03 8001                  	dc.b	nD5, $03, nRst, $01
00097DF2 E106                       	smpsAlterNote       $06
00097DF4 C90D                       	dc.b	nC6, $0D
00097DF6 E100                       	smpsAlterNote       $00
00097DF8 E701                       	dc.b	smpsNoAttack, $01
00097DFA E1FF                       	smpsAlterNote       $FF
00097DFC E701                       	dc.b	smpsNoAttack, $01
00097DFE E103                       	smpsAlterNote       $03
00097E00 E701                       	dc.b	smpsNoAttack, $01
00097E02 E109                       	smpsAlterNote       $09
00097E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E08 E106                       	smpsAlterNote       $06
00097E0A E701                       	dc.b	smpsNoAttack, $01
00097E0C E100                       	smpsAlterNote       $00
00097E0E E701                       	dc.b	smpsNoAttack, $01
00097E10 E10C                       	smpsAlterNote       $0C
00097E12 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00097E16 E10B                       	smpsAlterNote       $0B
00097E18 C603                       	dc.b	nA5, $03
00097E1A E109                       	smpsAlterNote       $09
00097E1C C403 8001                  	dc.b	nG5, $03, nRst, $01
00097E20 E10B                       	smpsAlterNote       $0B
00097E22 C60D                       	dc.b	nA5, $0D
00097E24 E105                       	smpsAlterNote       $05
00097E26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E2A E10B                       	smpsAlterNote       $0B
00097E2C E701                       	dc.b	smpsNoAttack, $01
00097E2E E10E                       	smpsAlterNote       $0E
00097E30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E34 E108                       	smpsAlterNote       $08
00097E36 E701                       	dc.b	smpsNoAttack, $01
00097E38 E104                       	smpsAlterNote       $04
00097E3A E701                       	dc.b	smpsNoAttack, $01
00097E3C E105                       	smpsAlterNote       $05
00097E3E E701                       	dc.b	smpsNoAttack, $01
00097E40 E10B                       	smpsAlterNote       $0B
00097E42 E701                       	dc.b	smpsNoAttack, $01
00097E44 E10F                       	smpsAlterNote       $0F
00097E46 E701                       	dc.b	smpsNoAttack, $01
00097E48 E10B                       	smpsAlterNote       $0B
00097E4A E701                       	dc.b	smpsNoAttack, $01
00097E4C E108                       	smpsAlterNote       $08
00097E4E E701                       	dc.b	smpsNoAttack, $01
00097E50 E104                       	smpsAlterNote       $04
00097E52 E701                       	dc.b	smpsNoAttack, $01
00097E54 E108                       	smpsAlterNote       $08
00097E56 E701                       	dc.b	smpsNoAttack, $01
00097E58 E10E                       	smpsAlterNote       $0E
00097E5A E701                       	dc.b	smpsNoAttack, $01
00097E5C E10F                       	smpsAlterNote       $0F
00097E5E E701                       	dc.b	smpsNoAttack, $01
00097E60 E10B                       	smpsAlterNote       $0B
00097E62 E701                       	dc.b	smpsNoAttack, $01
00097E64 E105                       	smpsAlterNote       $05
00097E66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E6A E108                       	smpsAlterNote       $08
00097E6C E701                       	dc.b	smpsNoAttack, $01
00097E6E E10E                       	smpsAlterNote       $0E
00097E70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E74 E108                       	smpsAlterNote       $08
00097E76 E701                       	dc.b	smpsNoAttack, $01
00097E78 E105                       	smpsAlterNote       $05
00097E7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E7E E10B                       	smpsAlterNote       $0B
00097E80 E701                       	dc.b	smpsNoAttack, $01
00097E82 E10F                       	smpsAlterNote       $0F
00097E84 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00097E88 E107                       	smpsAlterNote       $07
00097E8A BF03 8001                  	dc.b	nD5, $03, nRst, $01
00097E8E E108                       	smpsAlterNote       $08
00097E90 C103                       	dc.b	nE5, $03
00097E92 E109                       	smpsAlterNote       $09
00097E94 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00097E9C E10B                       	smpsAlterNote       $0B
00097E9E C606 8001                  	dc.b	nA5, $06, nRst, $01
00097EA2 E107                       	smpsAlterNote       $07
00097EA4 BF03                       	dc.b	nD5, $03
00097EA6 E106                       	smpsAlterNote       $06
00097EA8 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00097EAC E107                       	smpsAlterNote       $07
00097EAE CB03                       	dc.b	nD6, $03
00097EB0 E10C                       	smpsAlterNote       $0C
00097EB2 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00097EB6 E10B                       	smpsAlterNote       $0B
00097EB8 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097EBC E109                       	smpsAlterNote       $09
00097EBE C404                       	dc.b	nG5, $04
00097EC0 E10B                       	smpsAlterNote       $0B
00097EC2 C60D                       	dc.b	nA5, $0D
00097EC4 E108                       	smpsAlterNote       $08
00097EC6 E701                       	dc.b	smpsNoAttack, $01
00097EC8 E104                       	smpsAlterNote       $04
00097ECA E701                       	dc.b	smpsNoAttack, $01
00097ECC E108                       	smpsAlterNote       $08
00097ECE E701                       	dc.b	smpsNoAttack, $01
00097ED0 E10B                       	smpsAlterNote       $0B
00097ED2 E701                       	dc.b	smpsNoAttack, $01
00097ED4 E10F                       	smpsAlterNote       $0F
00097ED6 E701                       	dc.b	smpsNoAttack, $01
00097ED8 E10B                       	smpsAlterNote       $0B
00097EDA E701                       	dc.b	smpsNoAttack, $01
00097EDC E105                       	smpsAlterNote       $05
00097EDE E701                       	dc.b	smpsNoAttack, $01
00097EE0 E104                       	smpsAlterNote       $04
00097EE2 E701                       	dc.b	smpsNoAttack, $01
00097EE4 E108                       	smpsAlterNote       $08
00097EE6 E701                       	dc.b	smpsNoAttack, $01
00097EE8 E10E                       	smpsAlterNote       $0E
00097EEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097EEE E10B                       	smpsAlterNote       $0B
00097EF0 E701                       	dc.b	smpsNoAttack, $01
00097EF2 E105                       	smpsAlterNote       $05
00097EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097EF8 E10B                       	smpsAlterNote       $0B
00097EFA E701                       	dc.b	smpsNoAttack, $01
00097EFC E10E                       	smpsAlterNote       $0E
00097EFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F02 E108                       	smpsAlterNote       $08
00097F04 E701                       	dc.b	smpsNoAttack, $01
00097F06 E104                       	smpsAlterNote       $04
00097F08 E701                       	dc.b	smpsNoAttack, $01
00097F0A E105                       	smpsAlterNote       $05
00097F0C E701                       	dc.b	smpsNoAttack, $01
00097F0E E10B                       	smpsAlterNote       $0B
00097F10 E701                       	dc.b	smpsNoAttack, $01
00097F12 E10F                       	smpsAlterNote       $0F
00097F14 E701                       	dc.b	smpsNoAttack, $01
00097F16 E10B                       	smpsAlterNote       $0B
00097F18 E701                       	dc.b	smpsNoAttack, $01
00097F1A E108                       	smpsAlterNote       $08
00097F1C E701                       	dc.b	smpsNoAttack, $01
00097F1E E105                       	smpsAlterNote       $05
00097F20 8001                       	dc.b	nRst, $01
00097F22 E109                       	smpsAlterNote       $09
00097F24 C401                       	dc.b	nG5, $01
00097F26 E10B                       	smpsAlterNote       $0B
00097F28 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00097F31 E109                       	smpsAlterNote       $09
00097F33 C404 8001                  	dc.b	nG5, $04, nRst, $01
00097F37 E10B                       	smpsAlterNote       $0B
00097F39 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097F3D E107                       	smpsAlterNote       $07
00097F3F BF0D                       	dc.b	nD5, $0D
00097F41 E101                       	smpsAlterNote       $01
00097F43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F47 E104                       	smpsAlterNote       $04
00097F49 E701                       	dc.b	smpsNoAttack, $01
00097F4B E10A                       	smpsAlterNote       $0A
00097F4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F51 E104                       	smpsAlterNote       $04
00097F53 E701                       	dc.b	smpsNoAttack, $01
00097F55 E101                       	smpsAlterNote       $01
00097F57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F5B E107                       	smpsAlterNote       $07
00097F5D E701                       	dc.b	smpsNoAttack, $01
00097F5F E10B                       	smpsAlterNote       $0B
00097F61 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097F65 E108                       	smpsAlterNote       $08
00097F67 C101                       	dc.b	nE5, $01
00097F69 E109                       	smpsAlterNote       $09
00097F6B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00097F70 E10B                       	smpsAlterNote       $0B
00097F72 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00097F7A E108                       	smpsAlterNote       $08
00097F7C CD06                       	dc.b	nE6, $06
00097F7E E109                       	smpsAlterNote       $09
00097F80 CE07                       	dc.b	nF6, $07
00097F82 E108                       	smpsAlterNote       $08
00097F84 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00097F88 E106                       	smpsAlterNote       $06
00097F8A C903                       	dc.b	nC6, $03
00097F8C E109                       	smpsAlterNote       $09
00097F8E C403 8001                  	dc.b	nG5, $03, nRst, $01
00097F92 E10C                       	smpsAlterNote       $0C
00097F94 C70D                       	dc.b	nBb5, $0D
00097F96 E106                       	smpsAlterNote       $06
00097F98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F9C E109                       	smpsAlterNote       $09
00097F9E E701                       	dc.b	smpsNoAttack, $01
00097FA0 E10F                       	smpsAlterNote       $0F
00097FA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FA6 E109                       	smpsAlterNote       $09
00097FA8 E701                       	dc.b	smpsNoAttack, $01
00097FAA E106                       	smpsAlterNote       $06
00097FAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FB0 E10C                       	smpsAlterNote       $0C
00097FB2 E701                       	dc.b	smpsNoAttack, $01
00097FB4 E110                       	smpsAlterNote       $10
00097FB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097FBA E10B                       	smpsAlterNote       $0B
00097FBC C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00097FC0 E105                       	smpsAlterNote       $05
00097FC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FC6 E10B                       	smpsAlterNote       $0B
00097FC8 E701                       	dc.b	smpsNoAttack, $01
00097FCA E10E                       	smpsAlterNote       $0E
00097FCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FD0 E108                       	smpsAlterNote       $08
00097FD2 E701                       	dc.b	smpsNoAttack, $01
00097FD4 E104                       	smpsAlterNote       $04
00097FD6 E701                       	dc.b	smpsNoAttack, $01
00097FD8 E105                       	smpsAlterNote       $05
00097FDA E701                       	dc.b	smpsNoAttack, $01
00097FDC E10B                       	smpsAlterNote       $0B
00097FDE E701                       	dc.b	smpsNoAttack, $01
00097FE0 E10F                       	smpsAlterNote       $0F
00097FE2 E701                       	dc.b	smpsNoAttack, $01
00097FE4 E10B                       	smpsAlterNote       $0B
00097FE6 E701                       	dc.b	smpsNoAttack, $01
00097FE8 E108                       	smpsAlterNote       $08
00097FEA E701                       	dc.b	smpsNoAttack, $01
00097FEC E104                       	smpsAlterNote       $04
00097FEE E701                       	dc.b	smpsNoAttack, $01
00097FF0 E108                       	smpsAlterNote       $08
00097FF2 E701                       	dc.b	smpsNoAttack, $01
00097FF4 E10E                       	smpsAlterNote       $0E
00097FF6 E701                       	dc.b	smpsNoAttack, $01
00097FF8 E10F                       	smpsAlterNote       $0F
00097FFA E701                       	dc.b	smpsNoAttack, $01
00097FFC E10B                       	smpsAlterNote       $0B
00097FFE E701                       	dc.b	smpsNoAttack, $01
00098000 E105                       	smpsAlterNote       $05
00098002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098006 E108                       	smpsAlterNote       $08
00098008 E701                       	dc.b	smpsNoAttack, $01
0009800A E10E                       	smpsAlterNote       $0E
0009800C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098010 E108                       	smpsAlterNote       $08
00098012 E701                       	dc.b	smpsNoAttack, $01
00098014 E105                       	smpsAlterNote       $05
00098016 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009801A E10B                       	smpsAlterNote       $0B
0009801C E701                       	dc.b	smpsNoAttack, $01
0009801E E10F                       	smpsAlterNote       $0F
00098020 E701                       	dc.b	smpsNoAttack, $01
00098022 E10E                       	smpsAlterNote       $0E
00098024 E701                       	dc.b	smpsNoAttack, $01
00098026 E108                       	smpsAlterNote       $08
00098028 E701                       	dc.b	smpsNoAttack, $01
0009802A E104                       	smpsAlterNote       $04
0009802C E701                       	dc.b	smpsNoAttack, $01
0009802E E108                       	smpsAlterNote       $08
00098030 E701                       	dc.b	smpsNoAttack, $01
00098032 E10E                       	smpsAlterNote       $0E
00098034 E701                       	dc.b	smpsNoAttack, $01
00098036 E10F                       	smpsAlterNote       $0F
00098038 E701                       	dc.b	smpsNoAttack, $01
0009803A E10B                       	smpsAlterNote       $0B
0009803C E701                       	dc.b	smpsNoAttack, $01
0009803E E105                       	smpsAlterNote       $05
00098040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098044 E108                       	smpsAlterNote       $08
00098046 E701                       	dc.b	smpsNoAttack, $01
00098048 E10E                       	smpsAlterNote       $0E
0009804A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009804E E108                       	smpsAlterNote       $08
00098050 E701                       	dc.b	smpsNoAttack, $01
00098052 E105                       	smpsAlterNote       $05
00098054 E701                       	dc.b	smpsNoAttack, $01
00098056 E10B                       	smpsAlterNote       $0B
00098058 C60D                       	dc.b	nA5, $0D
0009805A E108                       	smpsAlterNote       $08
0009805C E701                       	dc.b	smpsNoAttack, $01
0009805E E104                       	smpsAlterNote       $04
00098060 E701                       	dc.b	smpsNoAttack, $01
00098062 E105                       	smpsAlterNote       $05
00098064 E701                       	dc.b	smpsNoAttack, $01
00098066 E10B                       	smpsAlterNote       $0B
00098068 E701                       	dc.b	smpsNoAttack, $01
0009806A E10F                       	smpsAlterNote       $0F
0009806C E701                       	dc.b	smpsNoAttack, $01
0009806E E10B                       	smpsAlterNote       $0B
00098070 E701                       	dc.b	smpsNoAttack, $01
00098072 E108                       	smpsAlterNote       $08
00098074 E701                       	dc.b	smpsNoAttack, $01
00098076 E104                       	smpsAlterNote       $04
00098078 E701                       	dc.b	smpsNoAttack, $01
0009807A E108                       	smpsAlterNote       $08
0009807C E701                       	dc.b	smpsNoAttack, $01
0009807E E10E                       	smpsAlterNote       $0E
00098080 E701                       	dc.b	smpsNoAttack, $01
00098082 E10F                       	smpsAlterNote       $0F
00098084 E701                       	dc.b	smpsNoAttack, $01
00098088 E109                       	smpsAlterNote       $09
0009808A E6FF                       	smpsAlterVol        $FF
0009808C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00098096 E108                       	smpsAlterNote       $08
00098098 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0009809E E107                       	smpsAlterNote       $07
000980A0 E601                       	smpsAlterVol        $01
000980A2 BF03                       	dc.b	nD5, $03
000980A4 E108                       	smpsAlterNote       $08
000980A6 C103 8001                  	dc.b	nE5, $03, nRst, $01
000980AA E109                       	smpsAlterNote       $09
000980AC C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000980B2 E10B                       	smpsAlterNote       $0B
000980B4 C606 8001                  	dc.b	nA5, $06, nRst, $01
000980B8 E107                       	smpsAlterNote       $07
000980BA BF02 8001                  	dc.b	nD5, $02, nRst, $01
000980BE E106                       	smpsAlterNote       $06
000980C0 C90D                       	dc.b	nC6, $0D
000980C2 E103                       	smpsAlterNote       $03
000980C4 E701                       	dc.b	smpsNoAttack, $01
000980C6 E1FF                       	smpsAlterNote       $FF
000980C8 E701                       	dc.b	smpsNoAttack, $01
000980CA E103                       	smpsAlterNote       $03
000980CC E701                       	dc.b	smpsNoAttack, $01
000980CE E109                       	smpsAlterNote       $09
000980D0 E701                       	dc.b	smpsNoAttack, $01
000980D2 E10A                       	smpsAlterNote       $0A
000980D4 E701                       	dc.b	smpsNoAttack, $01
000980D6 E106                       	smpsAlterNote       $06
000980D8 E701                       	dc.b	smpsNoAttack, $01
000980DA E100                       	smpsAlterNote       $00
000980DC E701                       	dc.b	smpsNoAttack, $01
000980DE E10C                       	smpsAlterNote       $0C
000980E0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000980E4 E10B                       	smpsAlterNote       $0B
000980E6 C603                       	dc.b	nA5, $03
000980E8 E109                       	smpsAlterNote       $09
000980EA C403 8001                  	dc.b	nG5, $03, nRst, $01
000980EE E10B                       	smpsAlterNote       $0B
000980F0 C60D                       	dc.b	nA5, $0D
000980F2 E105                       	smpsAlterNote       $05
000980F4 E701                       	dc.b	smpsNoAttack, $01
000980F6 E104                       	smpsAlterNote       $04
000980F8 E701                       	dc.b	smpsNoAttack, $01
000980FA E108                       	smpsAlterNote       $08
000980FC E701                       	dc.b	smpsNoAttack, $01
000980FE E10E                       	smpsAlterNote       $0E
00098100 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098104 E10B                       	smpsAlterNote       $0B
00098106 E701                       	dc.b	smpsNoAttack, $01
00098108 E105                       	smpsAlterNote       $05
0009810A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009810E E10B                       	smpsAlterNote       $0B
00098110 E701                       	dc.b	smpsNoAttack, $01
00098112 E10E                       	smpsAlterNote       $0E
00098114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098118 E108                       	smpsAlterNote       $08
0009811A E701                       	dc.b	smpsNoAttack, $01
0009811C E104                       	smpsAlterNote       $04
0009811E E701                       	dc.b	smpsNoAttack, $01
00098120 E105                       	smpsAlterNote       $05
00098122 E701                       	dc.b	smpsNoAttack, $01
00098124 E10B                       	smpsAlterNote       $0B
00098126 E701                       	dc.b	smpsNoAttack, $01
00098128 E10F                       	smpsAlterNote       $0F
0009812A E701                       	dc.b	smpsNoAttack, $01
0009812C E10B                       	smpsAlterNote       $0B
0009812E E701                       	dc.b	smpsNoAttack, $01
00098130 E108                       	smpsAlterNote       $08
00098132 E701                       	dc.b	smpsNoAttack, $01
00098134 E104                       	smpsAlterNote       $04
00098136 E701                       	dc.b	smpsNoAttack, $01
00098138 E108                       	smpsAlterNote       $08
0009813A E701                       	dc.b	smpsNoAttack, $01
0009813C E10E                       	smpsAlterNote       $0E
0009813E E701                       	dc.b	smpsNoAttack, $01
00098140 E10F                       	smpsAlterNote       $0F
00098142 E701                       	dc.b	smpsNoAttack, $01
00098144 E10B                       	smpsAlterNote       $0B
00098146 E701                       	dc.b	smpsNoAttack, $01
00098148 E105                       	smpsAlterNote       $05
0009814A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009814E E108                       	smpsAlterNote       $08
00098150 E701                       	dc.b	smpsNoAttack, $01
00098152 E10E                       	smpsAlterNote       $0E
00098154 E701                       	dc.b	smpsNoAttack, $01
00098156 E10F                       	smpsAlterNote       $0F
00098158 800F                       	dc.b	nRst, $0F
0009815A E107                       	smpsAlterNote       $07
0009815C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00098160 E108                       	smpsAlterNote       $08
00098162 C103                       	dc.b	nE5, $03
00098164 E109                       	smpsAlterNote       $09
00098166 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0009816C E10B                       	smpsAlterNote       $0B
0009816E C606 8001                  	dc.b	nA5, $06, nRst, $01
00098172 E107                       	smpsAlterNote       $07
00098174 BF03                       	dc.b	nD5, $03
00098176 E106                       	smpsAlterNote       $06
00098178 C90E                       	dc.b	nC6, $0E
0009817A E107                       	smpsAlterNote       $07
0009817C CB03 8001                  	dc.b	nD6, $03, nRst, $01
00098180 E10C                       	smpsAlterNote       $0C
00098182 C704                       	dc.b	nBb5, $04
00098184 E10B                       	smpsAlterNote       $0B
00098186 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009818A E109                       	smpsAlterNote       $09
0009818C C404                       	dc.b	nG5, $04
0009818E E10B                       	smpsAlterNote       $0B
00098190 C60D                       	dc.b	nA5, $0D
00098192 E108                       	smpsAlterNote       $08
00098194 E701                       	dc.b	smpsNoAttack, $01
00098196 E105                       	smpsAlterNote       $05
00098198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009819C E10B                       	smpsAlterNote       $0B
0009819E E701                       	dc.b	smpsNoAttack, $01
000981A0 E10F                       	smpsAlterNote       $0F
000981A2 E701                       	dc.b	smpsNoAttack, $01
000981A4 E10E                       	smpsAlterNote       $0E
000981A6 E701                       	dc.b	smpsNoAttack, $01
000981A8 E108                       	smpsAlterNote       $08
000981AA E701                       	dc.b	smpsNoAttack, $01
000981AC E104                       	smpsAlterNote       $04
000981AE E701                       	dc.b	smpsNoAttack, $01
000981B0 E108                       	smpsAlterNote       $08
000981B2 E701                       	dc.b	smpsNoAttack, $01
000981B4 E10B                       	smpsAlterNote       $0B
000981B6 E701                       	dc.b	smpsNoAttack, $01
000981B8 E10F                       	smpsAlterNote       $0F
000981BA E701                       	dc.b	smpsNoAttack, $01
000981BC E10B                       	smpsAlterNote       $0B
000981BE E701                       	dc.b	smpsNoAttack, $01
000981C0 E105                       	smpsAlterNote       $05
000981C2 E701                       	dc.b	smpsNoAttack, $01
000981C4 E104                       	smpsAlterNote       $04
000981C6 E701                       	dc.b	smpsNoAttack, $01
000981C8 E108                       	smpsAlterNote       $08
000981CA E701                       	dc.b	smpsNoAttack, $01
000981CC E10E                       	smpsAlterNote       $0E
000981CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981D2 E10B                       	smpsAlterNote       $0B
000981D4 E701                       	dc.b	smpsNoAttack, $01
000981D6 E105                       	smpsAlterNote       $05
000981D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981DC E10B                       	smpsAlterNote       $0B
000981DE E701                       	dc.b	smpsNoAttack, $01
000981E0 E10E                       	smpsAlterNote       $0E
000981E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981E6 E108                       	smpsAlterNote       $08
000981E8 E701                       	dc.b	smpsNoAttack, $01
000981EA E105                       	smpsAlterNote       $05
000981EC 8001                       	dc.b	nRst, $01
000981EE E109                       	smpsAlterNote       $09
000981F0 C402                       	dc.b	nG5, $02
000981F2 E10B                       	smpsAlterNote       $0B
000981F4 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000981FD E109                       	smpsAlterNote       $09
000981FF C404                       	dc.b	nG5, $04
00098201 E10B                       	smpsAlterNote       $0B
00098203 C604 8001                  	dc.b	nA5, $04, nRst, $01
00098207 E107                       	smpsAlterNote       $07
00098209 BF0D                       	dc.b	nD5, $0D
0009820B E101                       	smpsAlterNote       $01
0009820D E701                       	dc.b	smpsNoAttack, $01
0009820F E100                       	smpsAlterNote       $00
00098211 E701                       	dc.b	smpsNoAttack, $01
00098213 E104                       	smpsAlterNote       $04
00098215 E701                       	dc.b	smpsNoAttack, $01
00098217 E10A                       	smpsAlterNote       $0A
00098219 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009821D E107                       	smpsAlterNote       $07
0009821F E701                       	dc.b	smpsNoAttack, $01
00098221 E101                       	smpsAlterNote       $01
00098223 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098227 E107                       	smpsAlterNote       $07
00098229 E701                       	dc.b	smpsNoAttack, $01
0009822B E10A                       	smpsAlterNote       $0A
0009822D E701                       	dc.b	smpsNoAttack, $01
0009822F E10B                       	smpsAlterNote       $0B
00098231 8001                       	dc.b	nRst, $01
00098233 E108                       	smpsAlterNote       $08
00098235 C101                       	dc.b	nE5, $01
00098237 E109                       	smpsAlterNote       $09
00098239 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0009823E E10B                       	smpsAlterNote       $0B
00098240 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00098248 E108                       	smpsAlterNote       $08
0009824A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009824E E109                       	smpsAlterNote       $09
00098250 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00098254 E108                       	smpsAlterNote       $08
00098256 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009825A E106                       	smpsAlterNote       $06
0009825C C903                       	dc.b	nC6, $03
0009825E E109                       	smpsAlterNote       $09
00098260 C403 8001                  	dc.b	nG5, $03, nRst, $01
00098264 E10C                       	smpsAlterNote       $0C
00098266 C70D                       	dc.b	nBb5, $0D
00098268 E109                       	smpsAlterNote       $09
0009826A E701                       	dc.b	smpsNoAttack, $01
0009826C E105                       	smpsAlterNote       $05
0009826E E701                       	dc.b	smpsNoAttack, $01
00098270 E109                       	smpsAlterNote       $09
00098272 E701                       	dc.b	smpsNoAttack, $01
00098274 E10F                       	smpsAlterNote       $0F
00098276 E701                       	dc.b	smpsNoAttack, $01
00098278 E110                       	smpsAlterNote       $10
0009827A E701                       	dc.b	smpsNoAttack, $01
0009827C E10C                       	smpsAlterNote       $0C
0009827E E701                       	dc.b	smpsNoAttack, $01
00098280 E106                       	smpsAlterNote       $06
00098282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098286 E109                       	smpsAlterNote       $09
00098288 E701                       	dc.b	smpsNoAttack, $01
0009828A E10F                       	smpsAlterNote       $0F
0009828C E701                       	dc.b	smpsNoAttack, $01
0009828E E110                       	smpsAlterNote       $10
00098290 8001                       	dc.b	nRst, $01
00098292 E10B                       	smpsAlterNote       $0B
00098294 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009829A E105                       	smpsAlterNote       $05
0009829C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982A0 E108                       	smpsAlterNote       $08
000982A2 E701                       	dc.b	smpsNoAttack, $01
000982A4 E10E                       	smpsAlterNote       $0E
000982A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982AA E108                       	smpsAlterNote       $08
000982AC E701                       	dc.b	smpsNoAttack, $01
000982AE E105                       	smpsAlterNote       $05
000982B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982B4 E10B                       	smpsAlterNote       $0B
000982B6 E701                       	dc.b	smpsNoAttack, $01
000982B8 E10F                       	smpsAlterNote       $0F
000982BA E701                       	dc.b	smpsNoAttack, $01
000982BC E10E                       	smpsAlterNote       $0E
000982BE E701                       	dc.b	smpsNoAttack, $01
000982C0 E108                       	smpsAlterNote       $08
000982C2 E701                       	dc.b	smpsNoAttack, $01
000982C4 E104                       	smpsAlterNote       $04
000982C6 E701                       	dc.b	smpsNoAttack, $01
000982C8 E108                       	smpsAlterNote       $08
000982CA E701                       	dc.b	smpsNoAttack, $01
000982CC E10B                       	smpsAlterNote       $0B
000982CE E701                       	dc.b	smpsNoAttack, $01
000982D0 E10F                       	smpsAlterNote       $0F
000982D2 E701                       	dc.b	smpsNoAttack, $01
000982D4 E10B                       	smpsAlterNote       $0B
000982D6 E701                       	dc.b	smpsNoAttack, $01
000982D8 E105                       	smpsAlterNote       $05
000982DA E701                       	dc.b	smpsNoAttack, $01
000982DC E104                       	smpsAlterNote       $04
000982DE E701                       	dc.b	smpsNoAttack, $01
000982E0 E108                       	smpsAlterNote       $08
000982E2 E701                       	dc.b	smpsNoAttack, $01
000982E4 E10E                       	smpsAlterNote       $0E
000982E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982EA E10B                       	smpsAlterNote       $0B
000982EC E701                       	dc.b	smpsNoAttack, $01
000982EE E105                       	smpsAlterNote       $05
000982F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982F4 E10B                       	smpsAlterNote       $0B
000982F6 E701                       	dc.b	smpsNoAttack, $01
000982F8 E10E                       	smpsAlterNote       $0E
000982FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982FE E108                       	smpsAlterNote       $08
00098300 E701                       	dc.b	smpsNoAttack, $01
00098302 E104                       	smpsAlterNote       $04
00098304 E701                       	dc.b	smpsNoAttack, $01
00098306 E105                       	smpsAlterNote       $05
00098308 E701                       	dc.b	smpsNoAttack, $01
0009830A E10B                       	smpsAlterNote       $0B
0009830C E701                       	dc.b	smpsNoAttack, $01
0009830E E10F                       	smpsAlterNote       $0F
00098310 E701                       	dc.b	smpsNoAttack, $01
00098312 E10B                       	smpsAlterNote       $0B
00098314 E701                       	dc.b	smpsNoAttack, $01
00098316 E108                       	smpsAlterNote       $08
00098318 E701                       	dc.b	smpsNoAttack, $01
0009831A E104                       	smpsAlterNote       $04
0009831C E701                       	dc.b	smpsNoAttack, $01
0009831E E108                       	smpsAlterNote       $08
00098320 E701                       	dc.b	smpsNoAttack, $01
00098322 E10E                       	smpsAlterNote       $0E
00098324 E701                       	dc.b	smpsNoAttack, $01
00098326 E10F                       	smpsAlterNote       $0F
00098328 E701                       	dc.b	smpsNoAttack, $01
0009832A E10B                       	smpsAlterNote       $0B
0009832C E701                       	dc.b	smpsNoAttack, $01
0009832E E105                       	smpsAlterNote       $05
00098330 E701                       	dc.b	smpsNoAttack, $01
00098332 E10B                       	smpsAlterNote       $0B
00098334 C60E                       	dc.b	nA5, $0E
00098336 E105                       	smpsAlterNote       $05
00098338 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009833C E10B                       	smpsAlterNote       $0B
0009833E E701                       	dc.b	smpsNoAttack, $01
00098340 E10E                       	smpsAlterNote       $0E
00098342 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098346 E108                       	smpsAlterNote       $08
00098348 E701                       	dc.b	smpsNoAttack, $01
0009834A E104                       	smpsAlterNote       $04
0009834C E701                       	dc.b	smpsNoAttack, $01
0009834E E105                       	smpsAlterNote       $05
00098350 E701                       	dc.b	smpsNoAttack, $01
00098352 E10B                       	smpsAlterNote       $0B
00098354 E701                       	dc.b	smpsNoAttack, $01
00098356 E10F                       	smpsAlterNote       $0F
00098358 E701                       	dc.b	smpsNoAttack, $01
0009835A E10B                       	smpsAlterNote       $0B
0009835C E701                       	dc.b	smpsNoAttack, $01
0009835E E108                       	smpsAlterNote       $08
00098360 E701                       	dc.b	smpsNoAttack, $01
00098362 E104                       	smpsAlterNote       $04
00098364 E701                       	dc.b	smpsNoAttack, $01
00098366 E108                       	smpsAlterNote       $08
00098368 E701                       	dc.b	smpsNoAttack, $01
0009836A E10E                       	smpsAlterNote       $0E
0009836C E701                       	dc.b	smpsNoAttack, $01
0009836E E10F                       	smpsAlterNote       $0F
00098370 E701                       	dc.b	smpsNoAttack, $01
00098372 E10B                       	smpsAlterNote       $0B
00098374 E701                       	dc.b	smpsNoAttack, $01
00098376 E105                       	smpsAlterNote       $05
00098378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009837C E108                       	smpsAlterNote       $08
0009837E E701                       	dc.b	smpsNoAttack, $01
00098380 E10E                       	smpsAlterNote       $0E
00098382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098386 E108                       	smpsAlterNote       $08
00098388 E701                       	dc.b	smpsNoAttack, $01
0009838A E105                       	smpsAlterNote       $05
0009838C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098390 E10B                       	smpsAlterNote       $0B
00098392 E701                       	dc.b	smpsNoAttack, $01
00098394 E10F                       	smpsAlterNote       $0F
00098396 E701                       	dc.b	smpsNoAttack, $01
00098398 E10E                       	smpsAlterNote       $0E
0009839A E701                       	dc.b	smpsNoAttack, $01
0009839C E108                       	smpsAlterNote       $08
0009839E E701                       	dc.b	smpsNoAttack, $01
000983A0 E104                       	smpsAlterNote       $04
000983A2 E701                       	dc.b	smpsNoAttack, $01
000983A4 E108                       	smpsAlterNote       $08
000983A6 E701                       	dc.b	smpsNoAttack, $01
000983A8 E10E                       	smpsAlterNote       $0E
000983AA E701                       	dc.b	smpsNoAttack, $01
000983AC E10F                       	smpsAlterNote       $0F
000983AE E701                       	dc.b	smpsNoAttack, $01
000983B0 E10B                       	smpsAlterNote       $0B
000983B2 E701                       	dc.b	smpsNoAttack, $01
000983B4 E105                       	smpsAlterNote       $05
000983B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983BA E108                       	smpsAlterNote       $08
000983BC E701                       	dc.b	smpsNoAttack, $01
000983BE E10E                       	smpsAlterNote       $0E
000983C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983C4 E108                       	smpsAlterNote       $08
000983C6 E701                       	dc.b	smpsNoAttack, $01
000983C8 E105                       	smpsAlterNote       $05
000983CA E701                       	dc.b	smpsNoAttack, $01
000983CE E10B                       	smpsAlterNote       $0B
000983D0 E6FD                       	smpsAlterVol        $FD
000983D2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000983D6 E109                       	smpsAlterNote       $09
000983D8 C404                       	dc.b	nG5, $04
000983DA E10B                       	smpsAlterNote       $0B
000983DC C604 8001                  	dc.b	nA5, $04, nRst, $01
000983E0 E107                       	smpsAlterNote       $07
000983E2 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000983E8 E10B                       	smpsAlterNote       $0B
000983EA C604                       	dc.b	nA5, $04
000983EC E109                       	smpsAlterNote       $09
000983EE C404 8001                  	dc.b	nG5, $04, nRst, $01
000983F2 E10B                       	smpsAlterNote       $0B
000983F4 C604                       	dc.b	nA5, $04
000983F6 E108                       	smpsAlterNote       $08
000983F8 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00098400 E106                       	smpsAlterNote       $06
00098402 C904 8001                  	dc.b	nC6, $04, nRst, $01
00098406 E10C                       	smpsAlterNote       $0C
00098408 C704                       	dc.b	nBb5, $04
0009840A E10B                       	smpsAlterNote       $0B
0009840C C604 8001                  	dc.b	nA5, $04, nRst, $01
00098410 E109                       	smpsAlterNote       $09
00098412 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009841C E10B                       	smpsAlterNote       $0B
0009841E C60D                       	dc.b	nA5, $0D
00098420 E108                       	smpsAlterNote       $08
00098422 E701                       	dc.b	smpsNoAttack, $01
00098424 E104                       	smpsAlterNote       $04
00098426 E701                       	dc.b	smpsNoAttack, $01
00098428 E108                       	smpsAlterNote       $08
0009842A E701                       	dc.b	smpsNoAttack, $01
0009842C E10E                       	smpsAlterNote       $0E
0009842E E701                       	dc.b	smpsNoAttack, $01
00098430 E10F                       	smpsAlterNote       $0F
00098432 E701                       	dc.b	smpsNoAttack, $01
00098434 E10B                       	smpsAlterNote       $0B
00098436 E701                       	dc.b	smpsNoAttack, $01
00098438 E105                       	smpsAlterNote       $05
0009843A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009843E E108                       	smpsAlterNote       $08
00098440 E701                       	dc.b	smpsNoAttack, $01
00098442 E10E                       	smpsAlterNote       $0E
00098444 E701                       	dc.b	smpsNoAttack, $01
00098446 E10F                       	smpsAlterNote       $0F
00098448 8001                       	dc.b	nRst, $01
0009844A E109                       	smpsAlterNote       $09
0009844C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00098452 E108                       	smpsAlterNote       $08
00098454 C10D                       	dc.b	nE5, $0D
00098456 E102                       	smpsAlterNote       $02
00098458 E701                       	dc.b	smpsNoAttack, $01
0009845A E101                       	smpsAlterNote       $01
0009845C E701                       	dc.b	smpsNoAttack, $01
0009845E E105                       	smpsAlterNote       $05
00098460 E701                       	dc.b	smpsNoAttack, $01
00098462 E10B                       	smpsAlterNote       $0B
00098464 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098468 E108                       	smpsAlterNote       $08
0009846A E701                       	dc.b	smpsNoAttack, $01
0009846C E102                       	smpsAlterNote       $02
0009846E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098472 E108                       	smpsAlterNote       $08
00098474 E701                       	dc.b	smpsNoAttack, $01
00098476 E10B                       	smpsAlterNote       $0B
00098478 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009847C E105                       	smpsAlterNote       $05
0009847E E701                       	dc.b	smpsNoAttack, $01
00098480 E101                       	smpsAlterNote       $01
00098482 E701                       	dc.b	smpsNoAttack, $01
00098484 E102                       	smpsAlterNote       $02
00098486 E701                       	dc.b	smpsNoAttack, $01
00098488 E108                       	smpsAlterNote       $08
0009848A E701                       	dc.b	smpsNoAttack, $01
0009848C E10C                       	smpsAlterNote       $0C
0009848E E701                       	dc.b	smpsNoAttack, $01
00098490 E108                       	smpsAlterNote       $08
00098492 E701                       	dc.b	smpsNoAttack, $01
00098494 E105                       	smpsAlterNote       $05
00098496 E701                       	dc.b	smpsNoAttack, $01
00098498 E101                       	smpsAlterNote       $01
0009849A E701                       	dc.b	smpsNoAttack, $01
0009849C E105                       	smpsAlterNote       $05
0009849E E701                       	dc.b	smpsNoAttack, $01
000984A0 E10B                       	smpsAlterNote       $0B
000984A2 E701                       	dc.b	smpsNoAttack, $01
000984A4 E10C                       	smpsAlterNote       $0C
000984A6 E701                       	dc.b	smpsNoAttack, $01
000984A8 E108                       	smpsAlterNote       $08
000984AA E701                       	dc.b	smpsNoAttack, $01
000984AC E102                       	smpsAlterNote       $02
000984AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984B2 E105                       	smpsAlterNote       $05
000984B4 E701                       	dc.b	smpsNoAttack, $01
000984B6 E10B                       	smpsAlterNote       $0B
000984B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984BC E105                       	smpsAlterNote       $05
000984BE E701                       	dc.b	smpsNoAttack, $01
000984C0 E102                       	smpsAlterNote       $02
000984C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984C6 E108                       	smpsAlterNote       $08
000984C8 E701                       	dc.b	smpsNoAttack, $01
000984CA E10C                       	smpsAlterNote       $0C
000984CC E701                       	dc.b	smpsNoAttack, $01
000984CE E10B                       	smpsAlterNote       $0B
000984D0 E701                       	dc.b	smpsNoAttack, $01
000984D2 E105                       	smpsAlterNote       $05
000984D4 E701                       	dc.b	smpsNoAttack, $01
000984D6 E101                       	smpsAlterNote       $01
000984D8 E701                       	dc.b	smpsNoAttack, $01
000984DA E105                       	smpsAlterNote       $05
000984DC E701                       	dc.b	smpsNoAttack, $01
000984DE E108                       	smpsAlterNote       $08
000984E0 E701                       	dc.b	smpsNoAttack, $01
000984E2 E10C                       	smpsAlterNote       $0C
000984E4 E701                       	dc.b	smpsNoAttack, $01
000984E6 E108                       	smpsAlterNote       $08
000984E8 E701                       	dc.b	smpsNoAttack, $01
000984EA E102                       	smpsAlterNote       $02
000984EC E701                       	dc.b	smpsNoAttack, $01
000984EE E101                       	smpsAlterNote       $01
000984F0 E701                       	dc.b	smpsNoAttack, $01
000984F2 E105                       	smpsAlterNote       $05
000984F4 E701                       	dc.b	smpsNoAttack, $01
000984F6 E10B                       	smpsAlterNote       $0B
000984F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984FC E108                       	smpsAlterNote       $08
000984FE E701                       	dc.b	smpsNoAttack, $01
00098500 E102                       	smpsAlterNote       $02
00098502 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098506 E108                       	smpsAlterNote       $08
00098508 E701                       	dc.b	smpsNoAttack, $01
0009850A E10B                       	smpsAlterNote       $0B
0009850C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098510 E105                       	smpsAlterNote       $05
00098512 E701                       	dc.b	smpsNoAttack, $01
00098514 E101                       	smpsAlterNote       $01
00098516 E701                       	dc.b	smpsNoAttack, $01
00098518 E102                       	smpsAlterNote       $02
0009851A E701                       	dc.b	smpsNoAttack, $01
0009851C E108                       	smpsAlterNote       $08
0009851E E701                       	dc.b	smpsNoAttack, $01
00098520 E10C                       	smpsAlterNote       $0C
00098522 E701                       	dc.b	smpsNoAttack, $01
00098524 E108                       	smpsAlterNote       $08
00098526 E701                       	dc.b	smpsNoAttack, $01
00098528 E105                       	smpsAlterNote       $05
0009852A E701                       	dc.b	smpsNoAttack, $01
0009852C E101                       	smpsAlterNote       $01
0009852E E701                       	dc.b	smpsNoAttack, $01
00098530 E105                       	smpsAlterNote       $05
00098532 E701                       	dc.b	smpsNoAttack, $01
00098534 E10B                       	smpsAlterNote       $0B
00098536 E701                       	dc.b	smpsNoAttack, $01
00098538 E10C                       	smpsAlterNote       $0C
0009853A E701                       	dc.b	smpsNoAttack, $01
0009853C E108                       	smpsAlterNote       $08
0009853E E701                       	dc.b	smpsNoAttack, $01
00098540 E102                       	smpsAlterNote       $02
00098542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098546 E105                       	smpsAlterNote       $05
00098548 E701                       	dc.b	smpsNoAttack, $01
0009854A E10B                       	smpsAlterNote       $0B
0009854C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098550 E105                       	smpsAlterNote       $05
00098552 E701                       	dc.b	smpsNoAttack, $01
00098554 E101                       	smpsAlterNote       $01
00098556 E701                       	dc.b	smpsNoAttack, $01
00098558 E102                       	smpsAlterNote       $02
0009855A E701                       	dc.b	smpsNoAttack, $01
0009855C E108                       	smpsAlterNote       $08
0009855E E701                       	dc.b	smpsNoAttack, $01
00098560 E10C                       	smpsAlterNote       $0C
00098562 E701                       	dc.b	smpsNoAttack, $01
00098564 E108                       	smpsAlterNote       $08
00098566 E701                       	dc.b	smpsNoAttack, $01
00098568 E105                       	smpsAlterNote       $05
0009856A E701                       	dc.b	smpsNoAttack, $01
0009856C E101                       	smpsAlterNote       $01
0009856E E701                       	dc.b	smpsNoAttack, $01
00098570 E105                       	smpsAlterNote       $05
00098572 E701                       	dc.b	smpsNoAttack, $01
00098574 E10B                       	smpsAlterNote       $0B
00098576 E701                       	dc.b	smpsNoAttack, $01
00098578 E10C                       	smpsAlterNote       $0C
0009857A E701                       	dc.b	smpsNoAttack, $01
0009857C E108                       	smpsAlterNote       $08
0009857E E701                       	dc.b	smpsNoAttack, $01
00098580 E102                       	smpsAlterNote       $02
00098582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098586 E105                       	smpsAlterNote       $05
00098588 E701                       	dc.b	smpsNoAttack, $01
0009858A E10B                       	smpsAlterNote       $0B
0009858C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098590 E105                       	smpsAlterNote       $05
00098592 E701                       	dc.b	smpsNoAttack, $01
00098594 E102                       	smpsAlterNote       $02
00098596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009859A E108                       	smpsAlterNote       $08
0009859C E701                       	dc.b	smpsNoAttack, $01
0009859E E10C                       	smpsAlterNote       $0C
000985A0 E701                       	dc.b	smpsNoAttack, $01
000985A2 E10B                       	smpsAlterNote       $0B
000985A4 E701                       	dc.b	smpsNoAttack, $01
000985A6 E105                       	smpsAlterNote       $05
000985A8 E701                       	dc.b	smpsNoAttack, $01
000985AA E101                       	smpsAlterNote       $01
000985AC E701                       	dc.b	smpsNoAttack, $01
000985AE E105                       	smpsAlterNote       $05
000985B0 E701                       	dc.b	smpsNoAttack, $01
000985B2 E108                       	smpsAlterNote       $08
000985B4 E701                       	dc.b	smpsNoAttack, $01
000985B6 E10C                       	smpsAlterNote       $0C
000985B8 E701                       	dc.b	smpsNoAttack, $01
000985BC E10B                       	smpsAlterNote       $0B
000985BE C604 8001                  	dc.b	nA5, $04, nRst, $01
000985C2 E109                       	smpsAlterNote       $09
000985C4 C404                       	dc.b	nG5, $04
000985C6 E10B                       	smpsAlterNote       $0B
000985C8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000985CC E107                       	smpsAlterNote       $07
000985CE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000985D4 E10B                       	smpsAlterNote       $0B
000985D6 C604                       	dc.b	nA5, $04
000985D8 E109                       	smpsAlterNote       $09
000985DA C404 8001                  	dc.b	nG5, $04, nRst, $01
000985DE E10B                       	smpsAlterNote       $0B
000985E0 C604                       	dc.b	nA5, $04
000985E2 E108                       	smpsAlterNote       $08
000985E4 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000985EA E106                       	smpsAlterNote       $06
000985EC C904 8001                  	dc.b	nC6, $04, nRst, $01
000985F0 E10C                       	smpsAlterNote       $0C
000985F2 C704                       	dc.b	nBb5, $04
000985F4 E10B                       	smpsAlterNote       $0B
000985F6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000985FA E109                       	smpsAlterNote       $09
000985FC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00098606 E10B                       	smpsAlterNote       $0B
00098608 C60D                       	dc.b	nA5, $0D
0009860A E108                       	smpsAlterNote       $08
0009860C E701                       	dc.b	smpsNoAttack, $01
0009860E E104                       	smpsAlterNote       $04
00098610 E701                       	dc.b	smpsNoAttack, $01
00098612 E108                       	smpsAlterNote       $08
00098614 E701                       	dc.b	smpsNoAttack, $01
00098616 E10B                       	smpsAlterNote       $0B
00098618 E701                       	dc.b	smpsNoAttack, $01
0009861A E10F                       	smpsAlterNote       $0F
0009861C E701                       	dc.b	smpsNoAttack, $01
0009861E E10B                       	smpsAlterNote       $0B
00098620 E701                       	dc.b	smpsNoAttack, $01
00098622 E105                       	smpsAlterNote       $05
00098624 E701                       	dc.b	smpsNoAttack, $01
00098626 E104                       	smpsAlterNote       $04
00098628 E701                       	dc.b	smpsNoAttack, $01
0009862A E108                       	smpsAlterNote       $08
0009862C E701                       	dc.b	smpsNoAttack, $01
0009862E E10E                       	smpsAlterNote       $0E
00098630 E701                       	dc.b	smpsNoAttack, $01
00098632 E10F                       	smpsAlterNote       $0F
00098634 8001                       	dc.b	nRst, $01
00098636 E109                       	smpsAlterNote       $09
00098638 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009863E E108                       	smpsAlterNote       $08
00098640 C10D                       	dc.b	nE5, $0D
00098642 E105                       	smpsAlterNote       $05
00098644 E701                       	dc.b	smpsNoAttack, $01
00098646 E101                       	smpsAlterNote       $01
00098648 E701                       	dc.b	smpsNoAttack, $01
0009864A E105                       	smpsAlterNote       $05
0009864C E701                       	dc.b	smpsNoAttack, $01
0009864E E10B                       	smpsAlterNote       $0B
00098650 E701                       	dc.b	smpsNoAttack, $01
00098652 E10C                       	smpsAlterNote       $0C
00098654 E701                       	dc.b	smpsNoAttack, $01
00098656 E108                       	smpsAlterNote       $08
00098658 E701                       	dc.b	smpsNoAttack, $01
0009865A E102                       	smpsAlterNote       $02
0009865C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098660 E105                       	smpsAlterNote       $05
00098662 E701                       	dc.b	smpsNoAttack, $01
00098664 E10B                       	smpsAlterNote       $0B
00098666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009866A E105                       	smpsAlterNote       $05
0009866C E701                       	dc.b	smpsNoAttack, $01
0009866E E102                       	smpsAlterNote       $02
00098670 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098674 E108                       	smpsAlterNote       $08
00098676 E701                       	dc.b	smpsNoAttack, $01
00098678 E10C                       	smpsAlterNote       $0C
0009867A E701                       	dc.b	smpsNoAttack, $01
0009867C E10B                       	smpsAlterNote       $0B
0009867E E701                       	dc.b	smpsNoAttack, $01
00098680 E105                       	smpsAlterNote       $05
00098682 E701                       	dc.b	smpsNoAttack, $01
00098684 E101                       	smpsAlterNote       $01
00098686 E701                       	dc.b	smpsNoAttack, $01
00098688 E105                       	smpsAlterNote       $05
0009868A E701                       	dc.b	smpsNoAttack, $01
0009868C E108                       	smpsAlterNote       $08
0009868E E701                       	dc.b	smpsNoAttack, $01
00098690 E10C                       	smpsAlterNote       $0C
00098692 E701                       	dc.b	smpsNoAttack, $01
00098694 E108                       	smpsAlterNote       $08
00098696 E701                       	dc.b	smpsNoAttack, $01
00098698 E102                       	smpsAlterNote       $02
0009869A E701                       	dc.b	smpsNoAttack, $01
0009869C E101                       	smpsAlterNote       $01
0009869E E701                       	dc.b	smpsNoAttack, $01
000986A0 E105                       	smpsAlterNote       $05
000986A2 E701                       	dc.b	smpsNoAttack, $01
000986A4 E10B                       	smpsAlterNote       $0B
000986A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986AA E108                       	smpsAlterNote       $08
000986AC E701                       	dc.b	smpsNoAttack, $01
000986AE E102                       	smpsAlterNote       $02
000986B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986B4 E108                       	smpsAlterNote       $08
000986B6 E701                       	dc.b	smpsNoAttack, $01
000986B8 E10B                       	smpsAlterNote       $0B
000986BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986BE E105                       	smpsAlterNote       $05
000986C0 E701                       	dc.b	smpsNoAttack, $01
000986C2 E101                       	smpsAlterNote       $01
000986C4 E701                       	dc.b	smpsNoAttack, $01
000986C6 E102                       	smpsAlterNote       $02
000986C8 E701                       	dc.b	smpsNoAttack, $01
000986CA E108                       	smpsAlterNote       $08
000986CC E701                       	dc.b	smpsNoAttack, $01
000986CE E10C                       	smpsAlterNote       $0C
000986D0 E701                       	dc.b	smpsNoAttack, $01
000986D2 E108                       	smpsAlterNote       $08
000986D4 E701                       	dc.b	smpsNoAttack, $01
000986D6 E105                       	smpsAlterNote       $05
000986D8 E701                       	dc.b	smpsNoAttack, $01
000986DA E101                       	smpsAlterNote       $01
000986DC E701                       	dc.b	smpsNoAttack, $01
000986DE E105                       	smpsAlterNote       $05
000986E0 E701                       	dc.b	smpsNoAttack, $01
000986E2 E10B                       	smpsAlterNote       $0B
000986E4 E701                       	dc.b	smpsNoAttack, $01
000986E6 E10C                       	smpsAlterNote       $0C
000986E8 E701                       	dc.b	smpsNoAttack, $01
000986EA E108                       	smpsAlterNote       $08
000986EC E701                       	dc.b	smpsNoAttack, $01
000986EE E102                       	smpsAlterNote       $02
000986F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986F4 E108                       	smpsAlterNote       $08
000986F6 E701                       	dc.b	smpsNoAttack, $01
000986F8 E10B                       	smpsAlterNote       $0B
000986FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986FE E105                       	smpsAlterNote       $05
00098700 E701                       	dc.b	smpsNoAttack, $01
00098702 E101                       	smpsAlterNote       $01
00098704 E701                       	dc.b	smpsNoAttack, $01
00098706 E102                       	smpsAlterNote       $02
00098708 E701                       	dc.b	smpsNoAttack, $01
0009870A E108                       	smpsAlterNote       $08
0009870C E701                       	dc.b	smpsNoAttack, $01
0009870E E10C                       	smpsAlterNote       $0C
00098710 E701                       	dc.b	smpsNoAttack, $01
00098712 E108                       	smpsAlterNote       $08
00098714 E701                       	dc.b	smpsNoAttack, $01
00098716 E105                       	smpsAlterNote       $05
00098718 E701                       	dc.b	smpsNoAttack, $01
0009871A E101                       	smpsAlterNote       $01
0009871C E701                       	dc.b	smpsNoAttack, $01
0009871E E105                       	smpsAlterNote       $05
00098720 E701                       	dc.b	smpsNoAttack, $01
00098722 E10B                       	smpsAlterNote       $0B
00098724 E701                       	dc.b	smpsNoAttack, $01
00098726 E10C                       	smpsAlterNote       $0C
00098728 E701                       	dc.b	smpsNoAttack, $01
0009872A E108                       	smpsAlterNote       $08
0009872C E701                       	dc.b	smpsNoAttack, $01
0009872E E102                       	smpsAlterNote       $02
00098730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098734 E105                       	smpsAlterNote       $05
00098736 E701                       	dc.b	smpsNoAttack, $01
00098738 E10B                       	smpsAlterNote       $0B
0009873A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009873E E105                       	smpsAlterNote       $05
00098740 E701                       	dc.b	smpsNoAttack, $01
00098742 E102                       	smpsAlterNote       $02
00098744 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098748 E108                       	smpsAlterNote       $08
0009874A E701                       	dc.b	smpsNoAttack, $01
0009874C E10C                       	smpsAlterNote       $0C
0009874E E701                       	dc.b	smpsNoAttack, $01
00098750 E10B                       	smpsAlterNote       $0B
00098752 E701                       	dc.b	smpsNoAttack, $01
00098754 E105                       	smpsAlterNote       $05
00098756 E701                       	dc.b	smpsNoAttack, $01
00098758 E101                       	smpsAlterNote       $01
0009875A E701                       	dc.b	smpsNoAttack, $01
0009875C E105                       	smpsAlterNote       $05
0009875E E701                       	dc.b	smpsNoAttack, $01
00098760 E108                       	smpsAlterNote       $08
00098762 E701                       	dc.b	smpsNoAttack, $01
00098764 E10C                       	smpsAlterNote       $0C
00098766 E701                       	dc.b	smpsNoAttack, $01
00098768 E108                       	smpsAlterNote       $08
0009876A E701                       	dc.b	smpsNoAttack, $01
0009876C E102                       	smpsAlterNote       $02
0009876E E701                       	dc.b	smpsNoAttack, $01
00098770 E101                       	smpsAlterNote       $01
00098772 E701                       	dc.b	smpsNoAttack, $01
00098774 E105                       	smpsAlterNote       $05
00098776 E701                       	dc.b	smpsNoAttack, $01
00098778 E10B                       	smpsAlterNote       $0B
0009877A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009877E E108                       	smpsAlterNote       $08
00098780 E701                       	dc.b	smpsNoAttack, $01
00098782 E102                       	smpsAlterNote       $02
00098784 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098788 E108                       	smpsAlterNote       $08
0009878A E701                       	dc.b	smpsNoAttack, $01
0009878C E10B                       	smpsAlterNote       $0B
0009878E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098792 E105                       	smpsAlterNote       $05
00098794 E701                       	dc.b	smpsNoAttack, $01
00098796 E102                       	smpsAlterNote       $02
00098798 8001                       	dc.b	nRst, $01
0009879A E107                       	smpsAlterNote       $07
0009879C BF01 8001                  	dc.b	nD5, $01, nRst, $01
000987A0 E108                       	smpsAlterNote       $08
000987A2 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000987A6 E102                       	smpsAlterNote       $02
000987A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987AC E108                       	smpsAlterNote       $08
000987AE E701                       	dc.b	smpsNoAttack, $01
000987B0 E10B                       	smpsAlterNote       $0B
000987B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987B6 E105                       	smpsAlterNote       $05
000987B8 E701                       	dc.b	smpsNoAttack, $01
000987BA E101                       	smpsAlterNote       $01
000987BC E701                       	dc.b	smpsNoAttack, $01
000987BE E102                       	smpsAlterNote       $02
000987C0 E701                       	dc.b	smpsNoAttack, $01
000987C2 E108                       	smpsAlterNote       $08
000987C4 E701                       	dc.b	smpsNoAttack, $01
000987C6 E10C                       	smpsAlterNote       $0C
000987C8 E701                       	dc.b	smpsNoAttack, $01
000987CA E108                       	smpsAlterNote       $08
000987CC E701                       	dc.b	smpsNoAttack, $01
000987CE E105                       	smpsAlterNote       $05
000987D0 E701                       	dc.b	smpsNoAttack, $01
000987D2 E101                       	smpsAlterNote       $01
000987D4 E701                       	dc.b	smpsNoAttack, $01
000987D6 E105                       	smpsAlterNote       $05
000987D8 E701                       	dc.b	smpsNoAttack, $01
000987DA E10B                       	smpsAlterNote       $0B
000987DC E701                       	dc.b	smpsNoAttack, $01
000987DE E10C                       	smpsAlterNote       $0C
000987E0 E701                       	dc.b	smpsNoAttack, $01
000987E2 E108                       	smpsAlterNote       $08
000987E4 E701                       	dc.b	smpsNoAttack, $01
000987E6 E102                       	smpsAlterNote       $02
000987E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987EC E105                       	smpsAlterNote       $05
000987EE E701                       	dc.b	smpsNoAttack, $01
000987F0 E10B                       	smpsAlterNote       $0B
000987F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987F6 E105                       	smpsAlterNote       $05
000987F8 E701                       	dc.b	smpsNoAttack, $01
000987FA E102                       	smpsAlterNote       $02
000987FC E701                       	dc.b	smpsNoAttack, $01
000987FE E109                       	smpsAlterNote       $09
00098800 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00098804 E108                       	smpsAlterNote       $08
00098806 C10D                       	dc.b	nE5, $0D
00098808 E105                       	smpsAlterNote       $05
0009880A E701                       	dc.b	smpsNoAttack, $01
0009880C E101                       	smpsAlterNote       $01
0009880E E701                       	dc.b	smpsNoAttack, $01
00098810 E102                       	smpsAlterNote       $02
00098812 E701                       	dc.b	smpsNoAttack, $01
00098814 E108                       	smpsAlterNote       $08
00098816 E701                       	dc.b	smpsNoAttack, $01
00098818 E10C                       	smpsAlterNote       $0C
0009881A E701                       	dc.b	smpsNoAttack, $01
0009881C E108                       	smpsAlterNote       $08
0009881E E701                       	dc.b	smpsNoAttack, $01
00098820 E105                       	smpsAlterNote       $05
00098822 E701                       	dc.b	smpsNoAttack, $01
00098824 E101                       	smpsAlterNote       $01
00098826 E701                       	dc.b	smpsNoAttack, $01
00098828 E105                       	smpsAlterNote       $05
0009882A E701                       	dc.b	smpsNoAttack, $01
0009882C E10B                       	smpsAlterNote       $0B
0009882E E701                       	dc.b	smpsNoAttack, $01
00098830 E10C                       	smpsAlterNote       $0C
00098832 E701                       	dc.b	smpsNoAttack, $01
00098834 E108                       	smpsAlterNote       $08
00098836 E701                       	dc.b	smpsNoAttack, $01
00098838 E102                       	smpsAlterNote       $02
0009883A E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00098842 E10B                       	smpsAlterNote       $0B
00098844 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00098848 E10C                       	smpsAlterNote       $0C
0009884A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009884E E10B                       	smpsAlterNote       $0B
00098850 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00098856 E107                       	smpsAlterNote       $07
00098858 BF03                       	dc.b	nD5, $03
0009885A E108                       	smpsAlterNote       $08
0009885C C103 8001                  	dc.b	nE5, $03, nRst, $01
00098860 E109                       	smpsAlterNote       $09
00098862 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00098868 E10B                       	smpsAlterNote       $0B
0009886A C606 8001                  	dc.b	nA5, $06, nRst, $01
0009886E E107                       	smpsAlterNote       $07
00098870 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00098874 E106                       	smpsAlterNote       $06
00098876 C90D                       	dc.b	nC6, $0D
00098878 E103                       	smpsAlterNote       $03
0009887A E701                       	dc.b	smpsNoAttack, $01
0009887C E1FF                       	smpsAlterNote       $FF
0009887E E701                       	dc.b	smpsNoAttack, $01
00098880 E103                       	smpsAlterNote       $03
00098882 E701                       	dc.b	smpsNoAttack, $01
00098884 E109                       	smpsAlterNote       $09
00098886 E701                       	dc.b	smpsNoAttack, $01
00098888 E10A                       	smpsAlterNote       $0A
0009888A E701                       	dc.b	smpsNoAttack, $01
0009888C E106                       	smpsAlterNote       $06
0009888E E701                       	dc.b	smpsNoAttack, $01
00098890 E100                       	smpsAlterNote       $00
00098892 E701                       	dc.b	smpsNoAttack, $01
00098894 E10C                       	smpsAlterNote       $0C
00098896 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009889A E10B                       	smpsAlterNote       $0B
0009889C C603                       	dc.b	nA5, $03
0009889E E109                       	smpsAlterNote       $09
000988A0 C403 8001                  	dc.b	nG5, $03, nRst, $01
000988A4 E10B                       	smpsAlterNote       $0B
000988A6 C60D                       	dc.b	nA5, $0D
000988A8 E105                       	smpsAlterNote       $05
000988AA E701                       	dc.b	smpsNoAttack, $01
000988AC E104                       	smpsAlterNote       $04
000988AE E701                       	dc.b	smpsNoAttack, $01
000988B0 E108                       	smpsAlterNote       $08
000988B2 E701                       	dc.b	smpsNoAttack, $01
000988B4 E10E                       	smpsAlterNote       $0E
000988B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988BA E10B                       	smpsAlterNote       $0B
000988BC E701                       	dc.b	smpsNoAttack, $01
000988BE E105                       	smpsAlterNote       $05
000988C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988C4 E10B                       	smpsAlterNote       $0B
000988C6 E701                       	dc.b	smpsNoAttack, $01
000988C8 E10E                       	smpsAlterNote       $0E
000988CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988CE E108                       	smpsAlterNote       $08
000988D0 E701                       	dc.b	smpsNoAttack, $01
000988D2 E104                       	smpsAlterNote       $04
000988D4 E701                       	dc.b	smpsNoAttack, $01
000988D6 E105                       	smpsAlterNote       $05
000988D8 E701                       	dc.b	smpsNoAttack, $01
000988DA E10B                       	smpsAlterNote       $0B
000988DC E701                       	dc.b	smpsNoAttack, $01
000988DE E10F                       	smpsAlterNote       $0F
000988E0 E701                       	dc.b	smpsNoAttack, $01
000988E2 E10B                       	smpsAlterNote       $0B
000988E4 E701                       	dc.b	smpsNoAttack, $01
000988E6 E108                       	smpsAlterNote       $08
000988E8 E701                       	dc.b	smpsNoAttack, $01
000988EA E104                       	smpsAlterNote       $04
000988EC E701                       	dc.b	smpsNoAttack, $01
000988EE E108                       	smpsAlterNote       $08
000988F0 E701                       	dc.b	smpsNoAttack, $01
000988F2 E10E                       	smpsAlterNote       $0E
000988F4 E701                       	dc.b	smpsNoAttack, $01
000988F6 E10F                       	smpsAlterNote       $0F
000988F8 E701                       	dc.b	smpsNoAttack, $01
000988FA E10B                       	smpsAlterNote       $0B
000988FC E701                       	dc.b	smpsNoAttack, $01
000988FE E105                       	smpsAlterNote       $05
00098900 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098904 E108                       	smpsAlterNote       $08
00098906 E701                       	dc.b	smpsNoAttack, $01
00098908 E10E                       	smpsAlterNote       $0E
0009890A E701                       	dc.b	smpsNoAttack, $01
0009890C E10F                       	smpsAlterNote       $0F
0009890E 800F                       	dc.b	nRst, $0F
00098910 E107                       	smpsAlterNote       $07
00098912 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00098916 E108                       	smpsAlterNote       $08
00098918 C103                       	dc.b	nE5, $03
0009891A E109                       	smpsAlterNote       $09
0009891C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00098922 E10B                       	smpsAlterNote       $0B
00098924 C607                       	dc.b	nA5, $07
00098926 E107                       	smpsAlterNote       $07
00098928 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009892C E106                       	smpsAlterNote       $06
0009892E C90D                       	dc.b	nC6, $0D
00098930 E107                       	smpsAlterNote       $07
00098932 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00098936 E10C                       	smpsAlterNote       $0C
00098938 C704                       	dc.b	nBb5, $04
0009893A E10B                       	smpsAlterNote       $0B
0009893C C604 8001                  	dc.b	nA5, $04, nRst, $01
00098940 E109                       	smpsAlterNote       $09
00098942 C404                       	dc.b	nG5, $04
00098944 E10B                       	smpsAlterNote       $0B
00098946 C60D                       	dc.b	nA5, $0D
00098948 E108                       	smpsAlterNote       $08
0009894A E701                       	dc.b	smpsNoAttack, $01
0009894C E105                       	smpsAlterNote       $05
0009894E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098952 E10B                       	smpsAlterNote       $0B
00098954 E701                       	dc.b	smpsNoAttack, $01
00098956 E10F                       	smpsAlterNote       $0F
00098958 E701                       	dc.b	smpsNoAttack, $01
0009895A E10E                       	smpsAlterNote       $0E
0009895C E701                       	dc.b	smpsNoAttack, $01
0009895E E108                       	smpsAlterNote       $08
00098960 E701                       	dc.b	smpsNoAttack, $01
00098962 E104                       	smpsAlterNote       $04
00098964 E701                       	dc.b	smpsNoAttack, $01
00098966 E108                       	smpsAlterNote       $08
00098968 E701                       	dc.b	smpsNoAttack, $01
0009896A E10B                       	smpsAlterNote       $0B
0009896C E701                       	dc.b	smpsNoAttack, $01
0009896E E10F                       	smpsAlterNote       $0F
00098970 E701                       	dc.b	smpsNoAttack, $01
00098972 E10B                       	smpsAlterNote       $0B
00098974 E701                       	dc.b	smpsNoAttack, $01
00098976 E105                       	smpsAlterNote       $05
00098978 E701                       	dc.b	smpsNoAttack, $01
0009897A E104                       	smpsAlterNote       $04
0009897C E701                       	dc.b	smpsNoAttack, $01
0009897E E108                       	smpsAlterNote       $08
00098980 E701                       	dc.b	smpsNoAttack, $01
00098982 E10E                       	smpsAlterNote       $0E
00098984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098988 E10B                       	smpsAlterNote       $0B
0009898A E701                       	dc.b	smpsNoAttack, $01
0009898C E105                       	smpsAlterNote       $05
0009898E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098992 E10B                       	smpsAlterNote       $0B
00098994 E701                       	dc.b	smpsNoAttack, $01
00098996 E10E                       	smpsAlterNote       $0E
00098998 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009899C E108                       	smpsAlterNote       $08
0009899E E701                       	dc.b	smpsNoAttack, $01
000989A0 E105                       	smpsAlterNote       $05
000989A2 8001                       	dc.b	nRst, $01
000989A4 E109                       	smpsAlterNote       $09
000989A6 C401 8001                  	dc.b	nG5, $01, nRst, $01
000989AA E10B                       	smpsAlterNote       $0B
000989AC C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000989B4 E109                       	smpsAlterNote       $09
000989B6 C404                       	dc.b	nG5, $04
000989B8 E10B                       	smpsAlterNote       $0B
000989BA C604 8001                  	dc.b	nA5, $04, nRst, $01
000989BE E107                       	smpsAlterNote       $07
000989C0 BF0D                       	dc.b	nD5, $0D
000989C2 E101                       	smpsAlterNote       $01
000989C4 E701                       	dc.b	smpsNoAttack, $01
000989C6 E100                       	smpsAlterNote       $00
000989C8 E701                       	dc.b	smpsNoAttack, $01
000989CA E104                       	smpsAlterNote       $04
000989CC E701                       	dc.b	smpsNoAttack, $01
000989CE E10A                       	smpsAlterNote       $0A
000989D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989D4 E107                       	smpsAlterNote       $07
000989D6 E701                       	dc.b	smpsNoAttack, $01
000989D8 E101                       	smpsAlterNote       $01
000989DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989DE E107                       	smpsAlterNote       $07
000989E0 E701                       	dc.b	smpsNoAttack, $01
000989E2 E10A                       	smpsAlterNote       $0A
000989E4 E701                       	dc.b	smpsNoAttack, $01
000989E6 E10B                       	smpsAlterNote       $0B
000989E8 8001                       	dc.b	nRst, $01
000989EA E108                       	smpsAlterNote       $08
000989EC 8001                       	dc.b	nRst, $01
000989EE E109                       	smpsAlterNote       $09
000989F0 8001 C401                  	dc.b	nRst, $01, nG5, $01
000989F4 E10B                       	smpsAlterNote       $0B
000989F6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000989FE E108                       	smpsAlterNote       $08
00098A00 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00098A04 E109                       	smpsAlterNote       $09
00098A06 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00098A0A E108                       	smpsAlterNote       $08
00098A0C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00098A10 E106                       	smpsAlterNote       $06
00098A12 C903                       	dc.b	nC6, $03
00098A14 E109                       	smpsAlterNote       $09
00098A16 C403 8001                  	dc.b	nG5, $03, nRst, $01
00098A1A E10C                       	smpsAlterNote       $0C
00098A1C C70D                       	dc.b	nBb5, $0D
00098A1E E109                       	smpsAlterNote       $09
00098A20 E701                       	dc.b	smpsNoAttack, $01
00098A22 E105                       	smpsAlterNote       $05
00098A24 E701                       	dc.b	smpsNoAttack, $01
00098A26 E109                       	smpsAlterNote       $09
00098A28 E701                       	dc.b	smpsNoAttack, $01
00098A2A E10F                       	smpsAlterNote       $0F
00098A2C E701                       	dc.b	smpsNoAttack, $01
00098A2E E110                       	smpsAlterNote       $10
00098A30 E701                       	dc.b	smpsNoAttack, $01
00098A32 E10C                       	smpsAlterNote       $0C
00098A34 E701                       	dc.b	smpsNoAttack, $01
00098A36 E106                       	smpsAlterNote       $06
00098A38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A3C E109                       	smpsAlterNote       $09
00098A3E E701                       	dc.b	smpsNoAttack, $01
00098A40 E10F                       	smpsAlterNote       $0F
00098A42 E701                       	dc.b	smpsNoAttack, $01
00098A44 E110                       	smpsAlterNote       $10
00098A46 8001                       	dc.b	nRst, $01
00098A48 E10B                       	smpsAlterNote       $0B
00098A4A C606 8001                  	dc.b	nA5, $06, nRst, $01
00098A4E E109                       	smpsAlterNote       $09
00098A50 C40D                       	dc.b	nG5, $0D
00098A52 E103                       	smpsAlterNote       $03
00098A54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A58 E106                       	smpsAlterNote       $06
00098A5A E701                       	dc.b	smpsNoAttack, $01
00098A5C E10C                       	smpsAlterNote       $0C
00098A5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A62 E106                       	smpsAlterNote       $06
00098A64 E701                       	dc.b	smpsNoAttack, $01
00098A66 E103                       	smpsAlterNote       $03
00098A68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A6C E109                       	smpsAlterNote       $09
00098A6E E701                       	dc.b	smpsNoAttack, $01
00098A70 E10D                       	smpsAlterNote       $0D
00098A72 E701                       	dc.b	smpsNoAttack, $01
00098A74 E10C                       	smpsAlterNote       $0C
00098A76 E701                       	dc.b	smpsNoAttack, $01
00098A78 E106                       	smpsAlterNote       $06
00098A7A E701                       	dc.b	smpsNoAttack, $01
00098A7C E102                       	smpsAlterNote       $02
00098A7E E701                       	dc.b	smpsNoAttack, $01
00098A80 E103                       	smpsAlterNote       $03
00098A82 8001                       	dc.b	nRst, $01
00098A84 E10B                       	smpsAlterNote       $0B
00098A86 C60D                       	dc.b	nA5, $0D
00098A88 E108                       	smpsAlterNote       $08
00098A8A E701                       	dc.b	smpsNoAttack, $01
00098A8C E104                       	smpsAlterNote       $04
00098A8E E701                       	dc.b	smpsNoAttack, $01
00098A90 E108                       	smpsAlterNote       $08
00098A92 E701                       	dc.b	smpsNoAttack, $01
00098A94 E10B                       	smpsAlterNote       $0B
00098A96 E701                       	dc.b	smpsNoAttack, $01
00098A98 E10F                       	smpsAlterNote       $0F
00098A9A E701                       	dc.b	smpsNoAttack, $01
00098A9C E10B                       	smpsAlterNote       $0B
00098A9E E701                       	dc.b	smpsNoAttack, $01
00098AA0 E105                       	smpsAlterNote       $05
00098AA2 E701                       	dc.b	smpsNoAttack, $01
00098AA4 E104                       	smpsAlterNote       $04
00098AA6 E701                       	dc.b	smpsNoAttack, $01
00098AA8 E108                       	smpsAlterNote       $08
00098AAA E701                       	dc.b	smpsNoAttack, $01
00098AAC E10E                       	smpsAlterNote       $0E
00098AAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098AB2 E10B                       	smpsAlterNote       $0B
00098AB4 E701                       	dc.b	smpsNoAttack, $01
00098AB6 E105                       	smpsAlterNote       $05
00098AB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098ABC E10C                       	smpsAlterNote       $0C
00098ABE C70E                       	dc.b	nBb5, $0E
00098AC0 E106                       	smpsAlterNote       $06
00098AC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098AC6 E10C                       	smpsAlterNote       $0C
00098AC8 E701                       	dc.b	smpsNoAttack, $01
00098ACA E10F                       	smpsAlterNote       $0F
00098ACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098AD0 E109                       	smpsAlterNote       $09
00098AD2 E701                       	dc.b	smpsNoAttack, $01
00098AD4 E105                       	smpsAlterNote       $05
00098AD6 E701                       	dc.b	smpsNoAttack, $01
00098AD8 E106                       	smpsAlterNote       $06
00098ADA E701                       	dc.b	smpsNoAttack, $01
00098ADC E10C                       	smpsAlterNote       $0C
00098ADE E701                       	dc.b	smpsNoAttack, $01
00098AE0 E110                       	smpsAlterNote       $10
00098AE2 E701                       	dc.b	smpsNoAttack, $01
00098AE4 E10C                       	smpsAlterNote       $0C
00098AE6 E701                       	dc.b	smpsNoAttack, $01
00098AE8 E109                       	smpsAlterNote       $09
00098AEA E701                       	dc.b	smpsNoAttack, $01
00098AEC E105                       	smpsAlterNote       $05
00098AEE E701                       	dc.b	smpsNoAttack, $01
00098AF0 E106                       	smpsAlterNote       $06
00098AF2 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00098AF6 E107                       	smpsAlterNote       $07
00098AF8 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00098AFD E108                       	smpsAlterNote       $08
00098AFF CD0D                       	dc.b	nE6, $0D
00098B01 E107                       	smpsAlterNote       $07
00098B03 CB0D                       	dc.b	nD6, $0D
00098B05 E104                       	smpsAlterNote       $04
00098B07 E701                       	dc.b	smpsNoAttack, $01
00098B09 E100                       	smpsAlterNote       $00
00098B0B E701                       	dc.b	smpsNoAttack, $01
00098B0D E101                       	smpsAlterNote       $01
00098B0F E701                       	dc.b	smpsNoAttack, $01
00098B11 E107                       	smpsAlterNote       $07
00098B13 E701                       	dc.b	smpsNoAttack, $01
00098B15 E10B                       	smpsAlterNote       $0B
00098B17 E701                       	dc.b	smpsNoAttack, $01
00098B19 E107                       	smpsAlterNote       $07
00098B1B E701                       	dc.b	smpsNoAttack, $01
00098B1D E104                       	smpsAlterNote       $04
00098B1F E701                       	dc.b	smpsNoAttack, $01
00098B21 E100                       	smpsAlterNote       $00
00098B23 E701                       	dc.b	smpsNoAttack, $01
00098B25 E104                       	smpsAlterNote       $04
00098B27 E701                       	dc.b	smpsNoAttack, $01
00098B29 E10A                       	smpsAlterNote       $0A
00098B2B E701                       	dc.b	smpsNoAttack, $01
00098B2D E10B                       	smpsAlterNote       $0B
00098B2F E701                       	dc.b	smpsNoAttack, $01
00098B31 E108                       	smpsAlterNote       $08
00098B33 CC0D                       	dc.b	nEb6, $0D
00098B35 E105                       	smpsAlterNote       $05
00098B37 E701                       	dc.b	smpsNoAttack, $01
00098B39 E101                       	smpsAlterNote       $01
00098B3B E701                       	dc.b	smpsNoAttack, $01
00098B3D E102                       	smpsAlterNote       $02
00098B3F E701                       	dc.b	smpsNoAttack, $01
00098B41 E108                       	smpsAlterNote       $08
00098B43 E701                       	dc.b	smpsNoAttack, $01
00098B45 E106                       	smpsAlterNote       $06
00098B47 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00098B53 8001                       	dc.b	nRst, $01
00098B55 E107                       	smpsAlterNote       $07
00098B57 CB0D                       	dc.b	nD6, $0D
00098B59 E104                       	smpsAlterNote       $04
00098B5B E701                       	dc.b	smpsNoAttack, $01
00098B5D E100                       	smpsAlterNote       $00
00098B5F E701                       	dc.b	smpsNoAttack, $01
00098B61 E104                       	smpsAlterNote       $04
00098B63 E701                       	dc.b	smpsNoAttack, $01
00098B65 E107                       	smpsAlterNote       $07
00098B67 E701                       	dc.b	smpsNoAttack, $01
00098B69 E10B                       	smpsAlterNote       $0B
00098B6B E701                       	dc.b	smpsNoAttack, $01
00098B6D E107                       	smpsAlterNote       $07
00098B6F E701                       	dc.b	smpsNoAttack, $01
00098B71 E101                       	smpsAlterNote       $01
00098B73 E701                       	dc.b	smpsNoAttack, $01
00098B75 E100                       	smpsAlterNote       $00
00098B77 E701                       	dc.b	smpsNoAttack, $01
00098B79 E104                       	smpsAlterNote       $04
00098B7B E701                       	dc.b	smpsNoAttack, $01
00098B7D E10A                       	smpsAlterNote       $0A
00098B7F E701                       	dc.b	smpsNoAttack, $01
00098B81 E10B                       	smpsAlterNote       $0B
00098B83 8001                       	dc.b	nRst, $01
00098B85 E109                       	smpsAlterNote       $09
00098B87 CE0A                       	dc.b	nF6, $0A
00098B89 E108                       	smpsAlterNote       $08
00098B8B CC07                       	dc.b	nEb6, $07
00098B8D E106                       	smpsAlterNote       $06
00098B8F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00098B9B E107                       	smpsAlterNote       $07
00098B9D CB0D                       	dc.b	nD6, $0D
00098B9F E101                       	smpsAlterNote       $01
00098BA1 E701                       	dc.b	smpsNoAttack, $01
00098BA3 E100                       	smpsAlterNote       $00
00098BA5 E701                       	dc.b	smpsNoAttack, $01
00098BA7 E104                       	smpsAlterNote       $04
00098BA9 E701                       	dc.b	smpsNoAttack, $01
00098BAB E10A                       	smpsAlterNote       $0A
00098BAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BB1 E107                       	smpsAlterNote       $07
00098BB3 E701                       	dc.b	smpsNoAttack, $01
00098BB5 E101                       	smpsAlterNote       $01
00098BB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BBB E107                       	smpsAlterNote       $07
00098BBD E701                       	dc.b	smpsNoAttack, $01
00098BBF E10A                       	smpsAlterNote       $0A
00098BC1 E701                       	dc.b	smpsNoAttack, $01
00098BC3 E10B                       	smpsAlterNote       $0B
00098BC5 8001                       	dc.b	nRst, $01
00098BC7 E108                       	smpsAlterNote       $08
00098BC9 CC0D                       	dc.b	nEb6, $0D
00098BCB E102                       	smpsAlterNote       $02
00098BCD E701                       	dc.b	smpsNoAttack, $01
00098BCF E101                       	smpsAlterNote       $01
00098BD1 E701                       	dc.b	smpsNoAttack, $01
00098BD3 E105                       	smpsAlterNote       $05
00098BD5 E701                       	dc.b	smpsNoAttack, $01
00098BD7 E108                       	smpsAlterNote       $08
00098BD9 8001                       	dc.b	nRst, $01
00098BDB E106                       	smpsAlterNote       $06
00098BDD C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00098BE9 8001                       	dc.b	nRst, $01
00098BEB E107                       	smpsAlterNote       $07
00098BED CB0D                       	dc.b	nD6, $0D
00098BEF E101                       	smpsAlterNote       $01
00098BF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BF5 E104                       	smpsAlterNote       $04
00098BF7 E701                       	dc.b	smpsNoAttack, $01
00098BF9 E10A                       	smpsAlterNote       $0A
00098BFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BFF E104                       	smpsAlterNote       $04
00098C01 E701                       	dc.b	smpsNoAttack, $01
00098C03 E101                       	smpsAlterNote       $01
00098C05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C09 E107                       	smpsAlterNote       $07
00098C0B E701                       	dc.b	smpsNoAttack, $01
00098C0D E10B                       	smpsAlterNote       $0B
00098C0F E701                       	dc.b	smpsNoAttack, $01
00098C11 E10A                       	smpsAlterNote       $0A
00098C13 E701                       	dc.b	smpsNoAttack, $01
00098C15 E104                       	smpsAlterNote       $04
00098C17 E701                       	dc.b	smpsNoAttack, $01
00098C19 E100                       	smpsAlterNote       $00
00098C1B E701                       	dc.b	smpsNoAttack, $01
00098C1D E101                       	smpsAlterNote       $01
00098C1F 801C                       	dc.b	nRst, $1C
00098C23 E107                       	smpsAlterNote       $07
00098C25 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00098C29 E603                       	smpsAlterVol        $03
00098C2B F6F1 AD                    	smpsJump            music84_Jump03
00098C2E                            
00098C2E                            ; FM3 Data
00098C2E                            music84_FM3:
00098C2E E0C0                       	smpsPan             panCenter, $00
00098C32 E109                       	smpsAlterNote       $09
00098C34 C203 8007                  	dc.b	nF5, $03, nRst, $07
00098C38 E108                       	smpsAlterNote       $08
00098C3A C103 800B                  	dc.b	nE5, $03, nRst, $0B
00098C3E E10B                       	smpsAlterNote       $0B
00098C40 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00098C46 E040                       	smpsPan             panRight, $00
00098C48 E110                       	smpsAlterNote       $10
00098C4A E6F9                       	smpsAlterVol        $F9
00098C4C C702 8001                  	dc.b	nBb5, $02, nRst, $01
00098C50 E10F                       	smpsAlterNote       $0F
00098C52 C603                       	dc.b	nA5, $03
00098C54 E10D                       	smpsAlterNote       $0D
00098C56 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00098C5C E10C                       	smpsAlterNote       $0C
00098C5E C103 8001                  	dc.b	nE5, $03, nRst, $01
00098C62 E10A                       	smpsAlterNote       $0A
00098C64 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098C68 E10F                       	smpsAlterNote       $0F
00098C6A BA01 8001                  	dc.b	nA4, $01, nRst, $01
00098C6E E0C0                       	smpsPan             panCenter, $00
00098C72 E109                       	smpsAlterNote       $09
00098C74 E609                       	smpsAlterVol        $09
00098C76 B603                       	dc.b	nF4, $03
00098C78                            
00098C78                            music84_Jump02:
00098C78 E70A                       	dc.b	smpsNoAttack, $0A
00098C7A E103                       	smpsAlterNote       $03
00098C7C E701                       	dc.b	smpsNoAttack, $01
00098C7E E102                       	smpsAlterNote       $02
00098C80 E701                       	dc.b	smpsNoAttack, $01
00098C82 E106                       	smpsAlterNote       $06
00098C84 E701                       	dc.b	smpsNoAttack, $01
00098C86 E10C                       	smpsAlterNote       $0C
00098C88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C8C E109                       	smpsAlterNote       $09
00098C8E E701                       	dc.b	smpsNoAttack, $01
00098C90 E103                       	smpsAlterNote       $03
00098C92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C96 E109                       	smpsAlterNote       $09
00098C98 E701                       	dc.b	smpsNoAttack, $01
00098C9A E10C                       	smpsAlterNote       $0C
00098C9C E701                       	dc.b	smpsNoAttack, $01
00098C9E E10D                       	smpsAlterNote       $0D
00098CA0 8001                       	dc.b	nRst, $01
00098CA2 E109                       	smpsAlterNote       $09
00098CA4 B80D                       	dc.b	nG4, $0D
00098CA6 E103                       	smpsAlterNote       $03
00098CA8 E701                       	dc.b	smpsNoAttack, $01
00098CAA E102                       	smpsAlterNote       $02
00098CAC E701                       	dc.b	smpsNoAttack, $01
00098CAE E106                       	smpsAlterNote       $06
00098CB0 E701                       	dc.b	smpsNoAttack, $01
00098CB2 E10C                       	smpsAlterNote       $0C
00098CB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098CB8 E109                       	smpsAlterNote       $09
00098CBA E701                       	dc.b	smpsNoAttack, $01
00098CBC E103                       	smpsAlterNote       $03
00098CBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098CC2 E109                       	smpsAlterNote       $09
00098CC4 E701                       	dc.b	smpsNoAttack, $01
00098CC6 E10C                       	smpsAlterNote       $0C
00098CC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098CCC E106                       	smpsAlterNote       $06
00098CCE E701                       	dc.b	smpsNoAttack, $01
00098CD0 E102                       	smpsAlterNote       $02
00098CD2 E701                       	dc.b	smpsNoAttack, $01
00098CD4 E103                       	smpsAlterNote       $03
00098CD6 E701                       	dc.b	smpsNoAttack, $01
00098CD8 E109                       	smpsAlterNote       $09
00098CDA E701                       	dc.b	smpsNoAttack, $01
00098CDC E10D                       	smpsAlterNote       $0D
00098CDE E701                       	dc.b	smpsNoAttack, $01
00098CE0 E109                       	smpsAlterNote       $09
00098CE2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098CE6 E10B                       	smpsAlterNote       $0B
00098CE8 BA0D                       	dc.b	nA4, $0D
00098CEA E105                       	smpsAlterNote       $05
00098CEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098CF0 E108                       	smpsAlterNote       $08
00098CF2 E701                       	dc.b	smpsNoAttack, $01
00098CF4 E10E                       	smpsAlterNote       $0E
00098CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098CFA E108                       	smpsAlterNote       $08
00098CFC E701                       	dc.b	smpsNoAttack, $01
00098CFE E104                       	smpsAlterNote       $04
00098D00 E701                       	dc.b	smpsNoAttack, $01
00098D02 E105                       	smpsAlterNote       $05
00098D04 E701                       	dc.b	smpsNoAttack, $01
00098D06 E10B                       	smpsAlterNote       $0B
00098D08 E701                       	dc.b	smpsNoAttack, $01
00098D0A E10F                       	smpsAlterNote       $0F
00098D0C E701                       	dc.b	smpsNoAttack, $01
00098D0E E10B                       	smpsAlterNote       $0B
00098D10 E701                       	dc.b	smpsNoAttack, $01
00098D12 E108                       	smpsAlterNote       $08
00098D14 E701                       	dc.b	smpsNoAttack, $01
00098D16 E104                       	smpsAlterNote       $04
00098D18 E701                       	dc.b	smpsNoAttack, $01
00098D1A E108                       	smpsAlterNote       $08
00098D1C E701                       	dc.b	smpsNoAttack, $01
00098D1E E10E                       	smpsAlterNote       $0E
00098D20 E701                       	dc.b	smpsNoAttack, $01
00098D22 E10F                       	smpsAlterNote       $0F
00098D24 E701                       	dc.b	smpsNoAttack, $01
00098D26 E10B                       	smpsAlterNote       $0B
00098D28 E701                       	dc.b	smpsNoAttack, $01
00098D2A E105                       	smpsAlterNote       $05
00098D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D30 E108                       	smpsAlterNote       $08
00098D32 E701                       	dc.b	smpsNoAttack, $01
00098D34 E10E                       	smpsAlterNote       $0E
00098D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D3A E108                       	smpsAlterNote       $08
00098D3C E701                       	dc.b	smpsNoAttack, $01
00098D3E E105                       	smpsAlterNote       $05
00098D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D44 E10B                       	smpsAlterNote       $0B
00098D46 E701                       	dc.b	smpsNoAttack, $01
00098D48 E10F                       	smpsAlterNote       $0F
00098D4A E701                       	dc.b	smpsNoAttack, $01
00098D4C E10E                       	smpsAlterNote       $0E
00098D4E E701                       	dc.b	smpsNoAttack, $01
00098D50 E108                       	smpsAlterNote       $08
00098D52 E701                       	dc.b	smpsNoAttack, $01
00098D54 E104                       	smpsAlterNote       $04
00098D56 E701                       	dc.b	smpsNoAttack, $01
00098D58 E105                       	smpsAlterNote       $05
00098D5A 8001                       	dc.b	nRst, $01
00098D5C E108                       	smpsAlterNote       $08
00098D5E B50A                       	dc.b	nE4, $0A
00098D60 E109                       	smpsAlterNote       $09
00098D62 B60D                       	dc.b	nF4, $0D
00098D64 E106                       	smpsAlterNote       $06
00098D66 E701                       	dc.b	smpsNoAttack, $01
00098D68 E103                       	smpsAlterNote       $03
00098D6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D6E E109                       	smpsAlterNote       $09
00098D70 E701                       	dc.b	smpsNoAttack, $01
00098D72 E10D                       	smpsAlterNote       $0D
00098D74 E701                       	dc.b	smpsNoAttack, $01
00098D76 E10C                       	smpsAlterNote       $0C
00098D78 E701                       	dc.b	smpsNoAttack, $01
00098D7A E106                       	smpsAlterNote       $06
00098D7C E701                       	dc.b	smpsNoAttack, $01
00098D7E E102                       	smpsAlterNote       $02
00098D80 E701                       	dc.b	smpsNoAttack, $01
00098D82 E106                       	smpsAlterNote       $06
00098D84 E701                       	dc.b	smpsNoAttack, $01
00098D86 E109                       	smpsAlterNote       $09
00098D88 E701                       	dc.b	smpsNoAttack, $01
00098D8A E10D                       	smpsAlterNote       $0D
00098D8C E701                       	dc.b	smpsNoAttack, $01
00098D8E E109                       	smpsAlterNote       $09
00098D90 B80D                       	dc.b	nG4, $0D
00098D92 E106                       	smpsAlterNote       $06
00098D94 E701                       	dc.b	smpsNoAttack, $01
00098D96 E103                       	smpsAlterNote       $03
00098D98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D9C E109                       	smpsAlterNote       $09
00098D9E E701                       	dc.b	smpsNoAttack, $01
00098DA0 E10D                       	smpsAlterNote       $0D
00098DA2 E701                       	dc.b	smpsNoAttack, $01
00098DA4 E10C                       	smpsAlterNote       $0C
00098DA6 E701                       	dc.b	smpsNoAttack, $01
00098DA8 E106                       	smpsAlterNote       $06
00098DAA E701                       	dc.b	smpsNoAttack, $01
00098DAC E102                       	smpsAlterNote       $02
00098DAE E701                       	dc.b	smpsNoAttack, $01
00098DB0 E106                       	smpsAlterNote       $06
00098DB2 E701                       	dc.b	smpsNoAttack, $01
00098DB4 E109                       	smpsAlterNote       $09
00098DB6 E701                       	dc.b	smpsNoAttack, $01
00098DB8 E10D                       	smpsAlterNote       $0D
00098DBA E701                       	dc.b	smpsNoAttack, $01
00098DBC E109                       	smpsAlterNote       $09
00098DBE E701                       	dc.b	smpsNoAttack, $01
00098DC0 E103                       	smpsAlterNote       $03
00098DC2 E701                       	dc.b	smpsNoAttack, $01
00098DC4 E102                       	smpsAlterNote       $02
00098DC6 E701                       	dc.b	smpsNoAttack, $01
00098DC8 E106                       	smpsAlterNote       $06
00098DCA E701                       	dc.b	smpsNoAttack, $01
00098DCC E10C                       	smpsAlterNote       $0C
00098DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DD2 E109                       	smpsAlterNote       $09
00098DD4 E701                       	dc.b	smpsNoAttack, $01
00098DD6 E10B                       	smpsAlterNote       $0B
00098DD8 BA0D                       	dc.b	nA4, $0D
00098DDA E108                       	smpsAlterNote       $08
00098DDC E701                       	dc.b	smpsNoAttack, $01
00098DDE E104                       	smpsAlterNote       $04
00098DE0 E701                       	dc.b	smpsNoAttack, $01
00098DE2 E108                       	smpsAlterNote       $08
00098DE4 E701                       	dc.b	smpsNoAttack, $01
00098DE6 E10B                       	smpsAlterNote       $0B
00098DE8 E701                       	dc.b	smpsNoAttack, $01
00098DEA E10F                       	smpsAlterNote       $0F
00098DEC E701                       	dc.b	smpsNoAttack, $01
00098DEE E10B                       	smpsAlterNote       $0B
00098DF0 E701                       	dc.b	smpsNoAttack, $01
00098DF2 E105                       	smpsAlterNote       $05
00098DF4 E701                       	dc.b	smpsNoAttack, $01
00098DF6 E104                       	smpsAlterNote       $04
00098DF8 E701                       	dc.b	smpsNoAttack, $01
00098DFA E108                       	smpsAlterNote       $08
00098DFC E701                       	dc.b	smpsNoAttack, $01
00098DFE E10E                       	smpsAlterNote       $0E
00098E00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E04 E10B                       	smpsAlterNote       $0B
00098E06 E701                       	dc.b	smpsNoAttack, $01
00098E08 E105                       	smpsAlterNote       $05
00098E0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E0E E10B                       	smpsAlterNote       $0B
00098E10 E701                       	dc.b	smpsNoAttack, $01
00098E12 E10E                       	smpsAlterNote       $0E
00098E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E18 E108                       	smpsAlterNote       $08
00098E1A E701                       	dc.b	smpsNoAttack, $01
00098E1C E104                       	smpsAlterNote       $04
00098E1E E701                       	dc.b	smpsNoAttack, $01
00098E20 E105                       	smpsAlterNote       $05
00098E22 E701                       	dc.b	smpsNoAttack, $01
00098E24 E10B                       	smpsAlterNote       $0B
00098E26 E701                       	dc.b	smpsNoAttack, $01
00098E28 E10F                       	smpsAlterNote       $0F
00098E2A E701                       	dc.b	smpsNoAttack, $01
00098E2C E10B                       	smpsAlterNote       $0B
00098E2E E701                       	dc.b	smpsNoAttack, $01
00098E30 E108                       	smpsAlterNote       $08
00098E32 E701                       	dc.b	smpsNoAttack, $01
00098E34 E105                       	smpsAlterNote       $05
00098E36 8001                       	dc.b	nRst, $01
00098E38 E109                       	smpsAlterNote       $09
00098E3A B609 8001                  	dc.b	nF4, $09, nRst, $01
00098E3E E108                       	smpsAlterNote       $08
00098E40 B506 8001                  	dc.b	nE4, $06, nRst, $01
00098E44 E107                       	smpsAlterNote       $07
00098E46 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00098E4A E108                       	smpsAlterNote       $08
00098E4C B502 8001                  	dc.b	nE4, $02, nRst, $01
00098E50 E109                       	smpsAlterNote       $09
00098E52 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00098E58 E10B                       	smpsAlterNote       $0B
00098E5A BA0D                       	dc.b	nA4, $0D
00098E5C E108                       	smpsAlterNote       $08
00098E5E E701                       	dc.b	smpsNoAttack, $01
00098E60 E104                       	smpsAlterNote       $04
00098E62 E701                       	dc.b	smpsNoAttack, $01
00098E64 E108                       	smpsAlterNote       $08
00098E66 E701                       	dc.b	smpsNoAttack, $01
00098E68 E10E                       	smpsAlterNote       $0E
00098E6A E701                       	dc.b	smpsNoAttack, $01
00098E6C E10F                       	smpsAlterNote       $0F
00098E6E E701                       	dc.b	smpsNoAttack, $01
00098E70 E10B                       	smpsAlterNote       $0B
00098E72 E701                       	dc.b	smpsNoAttack, $01
00098E74 E105                       	smpsAlterNote       $05
00098E76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E7A E108                       	smpsAlterNote       $08
00098E7C E701                       	dc.b	smpsNoAttack, $01
00098E7E E10E                       	smpsAlterNote       $0E
00098E80 E701                       	dc.b	smpsNoAttack, $01
00098E82 E10F                       	smpsAlterNote       $0F
00098E84 8001                       	dc.b	nRst, $01
00098E86 E109                       	smpsAlterNote       $09
00098E88 C20D                       	dc.b	nF5, $0D
00098E8A E103                       	smpsAlterNote       $03
00098E8C E701                       	dc.b	smpsNoAttack, $01
00098E8E E102                       	smpsAlterNote       $02
00098E90 E701                       	dc.b	smpsNoAttack, $01
00098E92 E106                       	smpsAlterNote       $06
00098E94 E701                       	dc.b	smpsNoAttack, $01
00098E96 E10C                       	smpsAlterNote       $0C
00098E98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E9C E109                       	smpsAlterNote       $09
00098E9E E701                       	dc.b	smpsNoAttack, $01
00098EA0 E103                       	smpsAlterNote       $03
00098EA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EA6 E109                       	smpsAlterNote       $09
00098EA8 E701                       	dc.b	smpsNoAttack, $01
00098EAA E10C                       	smpsAlterNote       $0C
00098EAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EB0 E106                       	smpsAlterNote       $06
00098EB2 E701                       	dc.b	smpsNoAttack, $01
00098EB4 E102                       	smpsAlterNote       $02
00098EB6 E701                       	dc.b	smpsNoAttack, $01
00098EB8 E103                       	smpsAlterNote       $03
00098EBA E701                       	dc.b	smpsNoAttack, $01
00098EBC E109                       	smpsAlterNote       $09
00098EBE E701                       	dc.b	smpsNoAttack, $01
00098EC0 E10D                       	smpsAlterNote       $0D
00098EC2 E701                       	dc.b	smpsNoAttack, $01
00098EC4 E109                       	smpsAlterNote       $09
00098EC6 E701                       	dc.b	smpsNoAttack, $01
00098EC8 E106                       	smpsAlterNote       $06
00098ECA E701                       	dc.b	smpsNoAttack, $01
00098ECC E102                       	smpsAlterNote       $02
00098ECE E701                       	dc.b	smpsNoAttack, $01
00098ED0 E106                       	smpsAlterNote       $06
00098ED2 E701                       	dc.b	smpsNoAttack, $01
00098ED4 E10C                       	smpsAlterNote       $0C
00098ED6 E701                       	dc.b	smpsNoAttack, $01
00098ED8 E10D                       	smpsAlterNote       $0D
00098EDA E701                       	dc.b	smpsNoAttack, $01
00098EDC E109                       	smpsAlterNote       $09
00098EDE E701                       	dc.b	smpsNoAttack, $01
00098EE0 E103                       	smpsAlterNote       $03
00098EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EE6 E106                       	smpsAlterNote       $06
00098EE8 E701                       	dc.b	smpsNoAttack, $01
00098EEA E10C                       	smpsAlterNote       $0C
00098EEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EF0 E106                       	smpsAlterNote       $06
00098EF2 E701                       	dc.b	smpsNoAttack, $01
00098EF4 E103                       	smpsAlterNote       $03
00098EF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EFA E109                       	smpsAlterNote       $09
00098EFC E701                       	dc.b	smpsNoAttack, $01
00098EFE E10D                       	smpsAlterNote       $0D
00098F00 E701                       	dc.b	smpsNoAttack, $01
00098F02 E10C                       	smpsAlterNote       $0C
00098F04 E701                       	dc.b	smpsNoAttack, $01
00098F06 E106                       	smpsAlterNote       $06
00098F08 E701                       	dc.b	smpsNoAttack, $01
00098F0A E102                       	smpsAlterNote       $02
00098F0C E701                       	dc.b	smpsNoAttack, $01
00098F0E E106                       	smpsAlterNote       $06
00098F10 E701                       	dc.b	smpsNoAttack, $01
00098F12 E109                       	smpsAlterNote       $09
00098F14 E701                       	dc.b	smpsNoAttack, $01
00098F16 E10D                       	smpsAlterNote       $0D
00098F18 E701                       	dc.b	smpsNoAttack, $01
00098F1A E109                       	smpsAlterNote       $09
00098F1C E701                       	dc.b	smpsNoAttack, $01
00098F1E E103                       	smpsAlterNote       $03
00098F20 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098F24 E109                       	smpsAlterNote       $09
00098F26 C206                       	dc.b	nF5, $06
00098F28 E108                       	smpsAlterNote       $08
00098F2A C10E                       	dc.b	nE5, $0E
00098F2C E102                       	smpsAlterNote       $02
00098F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F32 E108                       	smpsAlterNote       $08
00098F34 E701                       	dc.b	smpsNoAttack, $01
00098F36 E10B                       	smpsAlterNote       $0B
00098F38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F3C E105                       	smpsAlterNote       $05
00098F3E E701                       	dc.b	smpsNoAttack, $01
00098F40 E101                       	smpsAlterNote       $01
00098F42 E701                       	dc.b	smpsNoAttack, $01
00098F44 E102                       	smpsAlterNote       $02
00098F46 E701                       	dc.b	smpsNoAttack, $01
00098F48 E108                       	smpsAlterNote       $08
00098F4A E701                       	dc.b	smpsNoAttack, $01
00098F4C E10C                       	smpsAlterNote       $0C
00098F4E E701                       	dc.b	smpsNoAttack, $01
00098F50 E107                       	smpsAlterNote       $07
00098F52 BF0E                       	dc.b	nD5, $0E
00098F54 E101                       	smpsAlterNote       $01
00098F56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F5A E107                       	smpsAlterNote       $07
00098F5C E701                       	dc.b	smpsNoAttack, $01
00098F5E E10A                       	smpsAlterNote       $0A
00098F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F64 E104                       	smpsAlterNote       $04
00098F66 E701                       	dc.b	smpsNoAttack, $01
00098F68 E100                       	smpsAlterNote       $00
00098F6A E701                       	dc.b	smpsNoAttack, $01
00098F6C E104                       	smpsAlterNote       $04
00098F6E E701                       	dc.b	smpsNoAttack, $01
00098F70 E107                       	smpsAlterNote       $07
00098F72 E701                       	dc.b	smpsNoAttack, $01
00098F74 E10B                       	smpsAlterNote       $0B
00098F76 E701                       	dc.b	smpsNoAttack, $01
00098F78 E107                       	smpsAlterNote       $07
00098F7A E701                       	dc.b	smpsNoAttack, $01
00098F7C E101                       	smpsAlterNote       $01
00098F7E E701                       	dc.b	smpsNoAttack, $01
00098F80 E100                       	smpsAlterNote       $00
00098F82 E701                       	dc.b	smpsNoAttack, $01
00098F84 E104                       	smpsAlterNote       $04
00098F86 E701                       	dc.b	smpsNoAttack, $01
00098F88 E10A                       	smpsAlterNote       $0A
00098F8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F8E E107                       	smpsAlterNote       $07
00098F90 E701                       	dc.b	smpsNoAttack, $01
00098F92 E101                       	smpsAlterNote       $01
00098F94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F98 E107                       	smpsAlterNote       $07
00098F9A E701                       	dc.b	smpsNoAttack, $01
00098F9C E10A                       	smpsAlterNote       $0A
00098F9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FA2 E104                       	smpsAlterNote       $04
00098FA4 E701                       	dc.b	smpsNoAttack, $01
00098FA6 E100                       	smpsAlterNote       $00
00098FA8 E701                       	dc.b	smpsNoAttack, $01
00098FAA E101                       	smpsAlterNote       $01
00098FAC E701                       	dc.b	smpsNoAttack, $01
00098FAE E107                       	smpsAlterNote       $07
00098FB0 E701                       	dc.b	smpsNoAttack, $01
00098FB2 E10B                       	smpsAlterNote       $0B
00098FB4 E701                       	dc.b	smpsNoAttack, $01
00098FB6 E107                       	smpsAlterNote       $07
00098FB8 E701                       	dc.b	smpsNoAttack, $01
00098FBA E104                       	smpsAlterNote       $04
00098FBC E701                       	dc.b	smpsNoAttack, $01
00098FBE E100                       	smpsAlterNote       $00
00098FC0 E701                       	dc.b	smpsNoAttack, $01
00098FC2 E104                       	smpsAlterNote       $04
00098FC4 E701                       	dc.b	smpsNoAttack, $01
00098FC6 E10A                       	smpsAlterNote       $0A
00098FC8 E701                       	dc.b	smpsNoAttack, $01
00098FCA E10B                       	smpsAlterNote       $0B
00098FCC E701                       	dc.b	smpsNoAttack, $01
00098FCE E107                       	smpsAlterNote       $07
00098FD0 E701                       	dc.b	smpsNoAttack, $01
00098FD2 E101                       	smpsAlterNote       $01
00098FD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FD8 E104                       	smpsAlterNote       $04
00098FDA E701                       	dc.b	smpsNoAttack, $01
00098FDC E10A                       	smpsAlterNote       $0A
00098FDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FE2 E104                       	smpsAlterNote       $04
00098FE4 E701                       	dc.b	smpsNoAttack, $01
00098FE6 E101                       	smpsAlterNote       $01
00098FE8 E701                       	dc.b	smpsNoAttack, $01
00098FEC E107                       	smpsAlterNote       $07
00098FEE E6FF                       	smpsAlterVol        $FF
00098FF0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00098FFC 8004                       	dc.b	nRst, $04
00099000 E109                       	smpsAlterNote       $09
00099002 E602                       	smpsAlterVol        $02
00099004 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0009900A E108                       	smpsAlterNote       $08
0009900C B502 8001                  	dc.b	nE4, $02, nRst, $01
00099010 E109                       	smpsAlterNote       $09
00099012 B60D                       	dc.b	nF4, $0D
00099014 E106                       	smpsAlterNote       $06
00099016 E701                       	dc.b	smpsNoAttack, $01
00099018 E102                       	smpsAlterNote       $02
0009901A E701                       	dc.b	smpsNoAttack, $01
0009901C E106                       	smpsAlterNote       $06
0009901E E701                       	dc.b	smpsNoAttack, $01
00099020 E109                       	smpsAlterNote       $09
00099022 E701                       	dc.b	smpsNoAttack, $01
00099024 E10D                       	smpsAlterNote       $0D
00099026 E701                       	dc.b	smpsNoAttack, $01
00099028 E109                       	smpsAlterNote       $09
0009902A E701                       	dc.b	smpsNoAttack, $01
0009902C E103                       	smpsAlterNote       $03
0009902E E701                       	dc.b	smpsNoAttack, $01
00099030 E102                       	smpsAlterNote       $02
00099032 E701                       	dc.b	smpsNoAttack, $01
00099034 E106                       	smpsAlterNote       $06
00099036 E701                       	dc.b	smpsNoAttack, $01
00099038 E10C                       	smpsAlterNote       $0C
0009903A E701                       	dc.b	smpsNoAttack, $01
0009903C E10D                       	smpsAlterNote       $0D
0009903E 8001                       	dc.b	nRst, $01
00099040 E109                       	smpsAlterNote       $09
00099042 B80D                       	dc.b	nG4, $0D
00099044 E106                       	smpsAlterNote       $06
00099046 E701                       	dc.b	smpsNoAttack, $01
00099048 E102                       	smpsAlterNote       $02
0009904A E701                       	dc.b	smpsNoAttack, $01
0009904C E106                       	smpsAlterNote       $06
0009904E E701                       	dc.b	smpsNoAttack, $01
00099050 E10C                       	smpsAlterNote       $0C
00099052 E701                       	dc.b	smpsNoAttack, $01
00099054 E10D                       	smpsAlterNote       $0D
00099056 E701                       	dc.b	smpsNoAttack, $01
00099058 E109                       	smpsAlterNote       $09
0009905A E701                       	dc.b	smpsNoAttack, $01
0009905C E103                       	smpsAlterNote       $03
0009905E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099062 E106                       	smpsAlterNote       $06
00099064 E701                       	dc.b	smpsNoAttack, $01
00099066 E10C                       	smpsAlterNote       $0C
00099068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009906C E106                       	smpsAlterNote       $06
0009906E E701                       	dc.b	smpsNoAttack, $01
00099070 E103                       	smpsAlterNote       $03
00099072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099076 E109                       	smpsAlterNote       $09
00099078 E701                       	dc.b	smpsNoAttack, $01
0009907A E10D                       	smpsAlterNote       $0D
0009907C E701                       	dc.b	smpsNoAttack, $01
0009907E E10C                       	smpsAlterNote       $0C
00099080 E701                       	dc.b	smpsNoAttack, $01
00099082 E109                       	smpsAlterNote       $09
00099084 8001                       	dc.b	nRst, $01
00099086 E10B                       	smpsAlterNote       $0B
00099088 BA03                       	dc.b	nA4, $03
0009908A E10C                       	smpsAlterNote       $0C
0009908C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00099090 E10B                       	smpsAlterNote       $0B
00099092 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00099098 E10C                       	smpsAlterNote       $0C
0009909A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009909E E10B                       	smpsAlterNote       $0B
000990A0 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000990A6 E10C                       	smpsAlterNote       $0C
000990A8 D303                       	dc.b	nBb6, $03
000990AA E10B                       	smpsAlterNote       $0B
000990AC D20D                       	dc.b	nA6, $0D
000990AE E108                       	smpsAlterNote       $08
000990B0 E701                       	dc.b	smpsNoAttack, $01
000990B2 E104                       	smpsAlterNote       $04
000990B4 E701                       	dc.b	smpsNoAttack, $01
000990B6 E105                       	smpsAlterNote       $05
000990B8 E701                       	dc.b	smpsNoAttack, $01
000990BA E10B                       	smpsAlterNote       $0B
000990BC E701                       	dc.b	smpsNoAttack, $01
000990BE E10F                       	smpsAlterNote       $0F
000990C0 E701                       	dc.b	smpsNoAttack, $01
000990C2 E10B                       	smpsAlterNote       $0B
000990C4 E701                       	dc.b	smpsNoAttack, $01
000990C6 E108                       	smpsAlterNote       $08
000990C8 E701                       	dc.b	smpsNoAttack, $01
000990CA E104                       	smpsAlterNote       $04
000990CC E701                       	dc.b	smpsNoAttack, $01
000990CE E108                       	smpsAlterNote       $08
000990D0 E701                       	dc.b	smpsNoAttack, $01
000990D2 E10E                       	smpsAlterNote       $0E
000990D4 E701                       	dc.b	smpsNoAttack, $01
000990D6 E10F                       	smpsAlterNote       $0F
000990D8 E701                       	dc.b	smpsNoAttack, $01
000990DA E10B                       	smpsAlterNote       $0B
000990DC E701                       	dc.b	smpsNoAttack, $01
000990DE E105                       	smpsAlterNote       $05
000990E0 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000990E6 E109                       	smpsAlterNote       $09
000990E8 CE07                       	dc.b	nF6, $07
000990EA E108                       	smpsAlterNote       $08
000990EC CD06 8001                  	dc.b	nE6, $06, nRst, $01
000990F0 E109                       	smpsAlterNote       $09
000990F2 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000990F6 E108                       	smpsAlterNote       $08
000990F8 CC0D                       	dc.b	nEb6, $0D
000990FA E102                       	smpsAlterNote       $02
000990FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099100 E108                       	smpsAlterNote       $08
00099102 E701                       	dc.b	smpsNoAttack, $01
00099104 E10B                       	smpsAlterNote       $0B
00099106 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009910A E105                       	smpsAlterNote       $05
0009910C E701                       	dc.b	smpsNoAttack, $01
0009910E E101                       	smpsAlterNote       $01
00099110 E701                       	dc.b	smpsNoAttack, $01
00099112 E102                       	smpsAlterNote       $02
00099114 E701                       	dc.b	smpsNoAttack, $01
00099116 E108                       	smpsAlterNote       $08
00099118 E701                       	dc.b	smpsNoAttack, $01
0009911A E10C                       	smpsAlterNote       $0C
0009911C E701                       	dc.b	smpsNoAttack, $01
0009911E E108                       	smpsAlterNote       $08
00099120 E701                       	dc.b	smpsNoAttack, $01
00099122 E105                       	smpsAlterNote       $05
00099124 E701                       	dc.b	smpsNoAttack, $01
00099126 E101                       	smpsAlterNote       $01
00099128 E701                       	dc.b	smpsNoAttack, $01
0009912A E105                       	smpsAlterNote       $05
0009912C E701                       	dc.b	smpsNoAttack, $01
0009912E E10B                       	smpsAlterNote       $0B
00099130 E701                       	dc.b	smpsNoAttack, $01
00099132 E10C                       	smpsAlterNote       $0C
00099134 E701                       	dc.b	smpsNoAttack, $01
00099136 E108                       	smpsAlterNote       $08
00099138 E701                       	dc.b	smpsNoAttack, $01
0009913A E107                       	smpsAlterNote       $07
0009913C CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00099146 E10B                       	smpsAlterNote       $0B
00099148 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00099152 E109                       	smpsAlterNote       $09
00099154 C203                       	dc.b	nF5, $03
00099156 E108                       	smpsAlterNote       $08
00099158 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009915C E109                       	smpsAlterNote       $09
0009915E C20D                       	dc.b	nF5, $0D
00099160 E108                       	smpsAlterNote       $08
00099162 C10E                       	dc.b	nE5, $0E
00099164 E107                       	smpsAlterNote       $07
00099166 BF0D                       	dc.b	nD5, $0D
00099168 E104                       	smpsAlterNote       $04
0009916A E701                       	dc.b	smpsNoAttack, $01
0009916C E100                       	smpsAlterNote       $00
0009916E E701                       	dc.b	smpsNoAttack, $01
00099170 E104                       	smpsAlterNote       $04
00099172 E701                       	dc.b	smpsNoAttack, $01
00099174 E107                       	smpsAlterNote       $07
00099176 E701                       	dc.b	smpsNoAttack, $01
00099178 E10B                       	smpsAlterNote       $0B
0009917A E701                       	dc.b	smpsNoAttack, $01
0009917C E107                       	smpsAlterNote       $07
0009917E E701                       	dc.b	smpsNoAttack, $01
00099180 E101                       	smpsAlterNote       $01
00099182 E701                       	dc.b	smpsNoAttack, $01
00099184 E100                       	smpsAlterNote       $00
00099186 E701                       	dc.b	smpsNoAttack, $01
00099188 E104                       	smpsAlterNote       $04
0009918A E701                       	dc.b	smpsNoAttack, $01
0009918C E10A                       	smpsAlterNote       $0A
0009918E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099192 E107                       	smpsAlterNote       $07
00099194 E701                       	dc.b	smpsNoAttack, $01
00099196 E101                       	smpsAlterNote       $01
00099198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009919C E107                       	smpsAlterNote       $07
0009919E E701                       	dc.b	smpsNoAttack, $01
000991A0 E10A                       	smpsAlterNote       $0A
000991A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000991A6 E104                       	smpsAlterNote       $04
000991A8 E701                       	dc.b	smpsNoAttack, $01
000991AA E100                       	smpsAlterNote       $00
000991AC E701                       	dc.b	smpsNoAttack, $01
000991AE E101                       	smpsAlterNote       $01
000991B0 E701                       	dc.b	smpsNoAttack, $01
000991B2 E107                       	smpsAlterNote       $07
000991B4 E701                       	dc.b	smpsNoAttack, $01
000991B6 E10B                       	smpsAlterNote       $0B
000991B8 E701                       	dc.b	smpsNoAttack, $01
000991BA E107                       	smpsAlterNote       $07
000991BC E701                       	dc.b	smpsNoAttack, $01
000991BE E104                       	smpsAlterNote       $04
000991C0 E701                       	dc.b	smpsNoAttack, $01
000991C2 E100                       	smpsAlterNote       $00
000991C4 E701                       	dc.b	smpsNoAttack, $01
000991C6 E104                       	smpsAlterNote       $04
000991C8 E701                       	dc.b	smpsNoAttack, $01
000991CA E10A                       	smpsAlterNote       $0A
000991CC E701                       	dc.b	smpsNoAttack, $01
000991CE E10B                       	smpsAlterNote       $0B
000991D0 E701                       	dc.b	smpsNoAttack, $01
000991D2 E107                       	smpsAlterNote       $07
000991D4 E701                       	dc.b	smpsNoAttack, $01
000991D6 E101                       	smpsAlterNote       $01
000991D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000991DC E104                       	smpsAlterNote       $04
000991DE E701                       	dc.b	smpsNoAttack, $01
000991E0 E10A                       	smpsAlterNote       $0A
000991E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000991E6 E104                       	smpsAlterNote       $04
000991E8 E701                       	dc.b	smpsNoAttack, $01
000991EA E101                       	smpsAlterNote       $01
000991EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000991F0 E107                       	smpsAlterNote       $07
000991F2 E701                       	dc.b	smpsNoAttack, $01
000991F4 E10B                       	smpsAlterNote       $0B
000991F6 E701                       	dc.b	smpsNoAttack, $01
000991F8 E10A                       	smpsAlterNote       $0A
000991FA E701                       	dc.b	smpsNoAttack, $01
000991FC E104                       	smpsAlterNote       $04
000991FE E701                       	dc.b	smpsNoAttack, $01
00099200 E100                       	smpsAlterNote       $00
00099202 E701                       	dc.b	smpsNoAttack, $01
00099204 E104                       	smpsAlterNote       $04
00099206 E701                       	dc.b	smpsNoAttack, $01
00099208 E107                       	smpsAlterNote       $07
0009920A E701                       	dc.b	smpsNoAttack, $01
0009920C E10B                       	smpsAlterNote       $0B
0009920E E701                       	dc.b	smpsNoAttack, $01
00099210 E107                       	smpsAlterNote       $07
00099212 E701                       	dc.b	smpsNoAttack, $01
00099214 E101                       	smpsAlterNote       $01
00099216 E701                       	dc.b	smpsNoAttack, $01
00099218 E100                       	smpsAlterNote       $00
0009921A E701                       	dc.b	smpsNoAttack, $01
0009921C E104                       	smpsAlterNote       $04
0009921E E701                       	dc.b	smpsNoAttack, $01
00099220 E10A                       	smpsAlterNote       $0A
00099222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099226 E107                       	smpsAlterNote       $07
00099228 E701                       	dc.b	smpsNoAttack, $01
0009922A E101                       	smpsAlterNote       $01
0009922C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099230 E107                       	smpsAlterNote       $07
00099232 E701                       	dc.b	smpsNoAttack, $01
00099234 E10A                       	smpsAlterNote       $0A
00099236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009923A E104                       	smpsAlterNote       $04
0009923C E701                       	dc.b	smpsNoAttack, $01
0009923E E100                       	smpsAlterNote       $00
00099240 E701                       	dc.b	smpsNoAttack, $01
00099242 E101                       	smpsAlterNote       $01
00099244 E701                       	dc.b	smpsNoAttack, $01
00099246 E107                       	smpsAlterNote       $07
00099248 E701                       	dc.b	smpsNoAttack, $01
0009924A E10B                       	smpsAlterNote       $0B
0009924C E701                       	dc.b	smpsNoAttack, $01
0009924E E107                       	smpsAlterNote       $07
00099250 E701                       	dc.b	smpsNoAttack, $01
00099252 E104                       	smpsAlterNote       $04
00099254 E701                       	dc.b	smpsNoAttack, $01
00099256 E100                       	smpsAlterNote       $00
00099258 E701                       	dc.b	smpsNoAttack, $01
0009925A E101                       	smpsAlterNote       $01
0009925C 8001                       	dc.b	nRst, $01
0009925E E109                       	smpsAlterNote       $09
00099260 C20D                       	dc.b	nF5, $0D
00099262 E106                       	smpsAlterNote       $06
00099264 E701                       	dc.b	smpsNoAttack, $01
00099266 E102                       	smpsAlterNote       $02
00099268 E701                       	dc.b	smpsNoAttack, $01
0009926A E106                       	smpsAlterNote       $06
0009926C E701                       	dc.b	smpsNoAttack, $01
0009926E E10C                       	smpsAlterNote       $0C
00099270 E701                       	dc.b	smpsNoAttack, $01
00099272 E10D                       	smpsAlterNote       $0D
00099274 E701                       	dc.b	smpsNoAttack, $01
00099276 E109                       	smpsAlterNote       $09
00099278 E701                       	dc.b	smpsNoAttack, $01
0009927A E103                       	smpsAlterNote       $03
0009927C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099280 E106                       	smpsAlterNote       $06
00099282 E701                       	dc.b	smpsNoAttack, $01
00099284 E10C                       	smpsAlterNote       $0C
00099286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009928A E106                       	smpsAlterNote       $06
0009928C E701                       	dc.b	smpsNoAttack, $01
0009928E E103                       	smpsAlterNote       $03
00099290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099294 E109                       	smpsAlterNote       $09
00099296 E701                       	dc.b	smpsNoAttack, $01
00099298 E10D                       	smpsAlterNote       $0D
0009929A E701                       	dc.b	smpsNoAttack, $01
0009929C E10C                       	smpsAlterNote       $0C
0009929E E701                       	dc.b	smpsNoAttack, $01
000992A0 E109                       	smpsAlterNote       $09
000992A2 8001                       	dc.b	nRst, $01
000992A4 E108                       	smpsAlterNote       $08
000992A6 C10D                       	dc.b	nE5, $0D
000992A8 E109                       	smpsAlterNote       $09
000992AA C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000992AE E108                       	smpsAlterNote       $08
000992B0 C10D                       	dc.b	nE5, $0D
000992B2 E102                       	smpsAlterNote       $02
000992B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992B8 E105                       	smpsAlterNote       $05
000992BA E701                       	dc.b	smpsNoAttack, $01
000992BC E108                       	smpsAlterNote       $08
000992BE 8001                       	dc.b	nRst, $01
000992C0 E107                       	smpsAlterNote       $07
000992C2 BF0D                       	dc.b	nD5, $0D
000992C4 E108                       	smpsAlterNote       $08
000992C6 C107                       	dc.b	nE5, $07
000992C8 E109                       	smpsAlterNote       $09
000992CA C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000992D0 E10B                       	smpsAlterNote       $0B
000992D2 C603                       	dc.b	nA5, $03
000992D4 E10C                       	smpsAlterNote       $0C
000992D6 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000992DC E10B                       	smpsAlterNote       $0B
000992DE C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000992E4 E109                       	smpsAlterNote       $09
000992E6 D003                       	dc.b	nG6, $03
000992E8 E108                       	smpsAlterNote       $08
000992EA CD02 8001                  	dc.b	nE6, $02, nRst, $01
000992EE E10B                       	smpsAlterNote       $0B
000992F0 C601 8001                  	dc.b	nA5, $01, nRst, $01
000992F4 E108                       	smpsAlterNote       $08
000992F6 C102                       	dc.b	nE5, $02
000992FA E10C                       	smpsAlterNote       $0C
000992FC E6FB                       	smpsAlterVol        $FB
000992FE A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0009930A 8001                       	dc.b	nRst, $01
0009930C E10B                       	smpsAlterNote       $0B
0009930E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00099316 E107                       	smpsAlterNote       $07
00099318 A706 8001                  	dc.b	nD3, $06, nRst, $01
0009931C E10B                       	smpsAlterNote       $0B
0009931E A203                       	dc.b	nA2, $03
00099320 E109                       	smpsAlterNote       $09
00099322 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00099326 E108                       	smpsAlterNote       $08
00099328 A906                       	dc.b	nE3, $06
0009932A E107                       	smpsAlterNote       $07
0009932C A703 8001                  	dc.b	nD3, $03, nRst, $01
00099330 E106                       	smpsAlterNote       $06
00099332 A503                       	dc.b	nC3, $03
00099334 E10C                       	smpsAlterNote       $0C
00099336 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009933A E10B                       	smpsAlterNote       $0B
0009933C A203 8004                  	dc.b	nA2, $03, nRst, $04
00099340 E11B                       	smpsAlterNote       $1B
00099342 C401                       	dc.b	nG5, $01
00099344 E1F4                       	smpsAlterNote       $F4
00099346 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00099349 E106                       	smpsAlterNote       $06
0009934B E701                       	dc.b	smpsNoAttack, $01
0009934D E10F                       	smpsAlterNote       $0F
0009934F E701                       	dc.b	smpsNoAttack, $01
00099351 E1E4                       	smpsAlterNote       $E4
00099353 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00099356 E1F6                       	smpsAlterNote       $F6
00099358 E701                       	dc.b	smpsNoAttack, $01
0009935A E108                       	smpsAlterNote       $08
0009935C E701                       	dc.b	smpsNoAttack, $01
0009935E E10B                       	smpsAlterNote       $0B
00099360 E706                       	dc.b	smpsNoAttack, $06
00099362 E105                       	smpsAlterNote       $05
00099364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099368 E108                       	smpsAlterNote       $08
0009936A E701                       	dc.b	smpsNoAttack, $01
0009936C E10E                       	smpsAlterNote       $0E
0009936E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099372 E108                       	smpsAlterNote       $08
00099374 E701                       	dc.b	smpsNoAttack, $01
00099376 E105                       	smpsAlterNote       $05
00099378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009937C E10B                       	smpsAlterNote       $0B
0009937E E701                       	dc.b	smpsNoAttack, $01
00099380 E10F                       	smpsAlterNote       $0F
00099382 E701                       	dc.b	smpsNoAttack, $01
00099384 E10E                       	smpsAlterNote       $0E
00099386 E701                       	dc.b	smpsNoAttack, $01
00099388 E108                       	smpsAlterNote       $08
0009938A E701                       	dc.b	smpsNoAttack, $01
0009938C E104                       	smpsAlterNote       $04
0009938E E701                       	dc.b	smpsNoAttack, $01
00099390 E108                       	smpsAlterNote       $08
00099392 E701                       	dc.b	smpsNoAttack, $01
00099394 E10B                       	smpsAlterNote       $0B
00099396 E701                       	dc.b	smpsNoAttack, $01
00099398 E10F                       	smpsAlterNote       $0F
0009939A E701                       	dc.b	smpsNoAttack, $01
0009939C E10B                       	smpsAlterNote       $0B
0009939E E701                       	dc.b	smpsNoAttack, $01
000993A0 E105                       	smpsAlterNote       $05
000993A2 E701                       	dc.b	smpsNoAttack, $01
000993A4 E104                       	smpsAlterNote       $04
000993A6 E701                       	dc.b	smpsNoAttack, $01
000993A8 E108                       	smpsAlterNote       $08
000993AA E701                       	dc.b	smpsNoAttack, $01
000993AC E10E                       	smpsAlterNote       $0E
000993AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000993B2 E10B                       	smpsAlterNote       $0B
000993B4 E701                       	dc.b	smpsNoAttack, $01
000993B6 E105                       	smpsAlterNote       $05
000993B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000993BC E10B                       	smpsAlterNote       $0B
000993BE E701                       	dc.b	smpsNoAttack, $01
000993C0 E10E                       	smpsAlterNote       $0E
000993C2 E701                       	dc.b	smpsNoAttack, $01
000993C4 E10F                       	smpsAlterNote       $0F
000993C6 8001                       	dc.b	nRst, $01
000993C8 E109                       	smpsAlterNote       $09
000993CA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000993D0 E108                       	smpsAlterNote       $08
000993D2 C101 8001                  	dc.b	nE5, $01, nRst, $01
000993D6 E109                       	smpsAlterNote       $09
000993D8 C202                       	dc.b	nF5, $02
000993DA E108                       	smpsAlterNote       $08
000993DC C102                       	dc.b	nE5, $02
000993DE E107                       	smpsAlterNote       $07
000993E0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000993E4 E108                       	smpsAlterNote       $08
000993E6 C101 8001                  	dc.b	nE5, $01, nRst, $01
000993EA E107                       	smpsAlterNote       $07
000993EC BF02                       	dc.b	nD5, $02
000993EE E106                       	smpsAlterNote       $06
000993F0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000993F4 E107                       	smpsAlterNote       $07
000993F6 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000993FA E106                       	smpsAlterNote       $06
000993FC BD02                       	dc.b	nC5, $02
000993FE E10C                       	smpsAlterNote       $0C
00099400 BB02                       	dc.b	nBb4, $02
00099402 E106                       	smpsAlterNote       $06
00099404 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00099408 E10C                       	smpsAlterNote       $0C
0009940A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009940E E10B                       	smpsAlterNote       $0B
00099410 BA02                       	dc.b	nA4, $02
00099412 E10C                       	smpsAlterNote       $0C
00099414 BB02                       	dc.b	nBb4, $02
00099416 E10B                       	smpsAlterNote       $0B
00099418 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00099422 E108                       	smpsAlterNote       $08
00099424 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0009942C E107                       	smpsAlterNote       $07
0009942E BE02                       	dc.b	nCs5, $02
00099430 E10B                       	smpsAlterNote       $0B
00099432 BA02                       	dc.b	nA4, $02
00099434 E109                       	smpsAlterNote       $09
00099436 B802 8001                  	dc.b	nG4, $02, nRst, $01
0009943A E108                       	smpsAlterNote       $08
0009943C B501 8001                  	dc.b	nE4, $01, nRst, $01
00099440 E10B                       	smpsAlterNote       $0B
00099442 AE02                       	dc.b	nA3, $02
00099444 E10C                       	smpsAlterNote       $0C
00099446 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00099452 E10B                       	smpsAlterNote       $0B
00099454 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0009945C E107                       	smpsAlterNote       $07
0009945E A706 8001                  	dc.b	nD3, $06, nRst, $01
00099462 E10B                       	smpsAlterNote       $0B
00099464 A203                       	dc.b	nA2, $03
00099466 E109                       	smpsAlterNote       $09
00099468 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0009946C E108                       	smpsAlterNote       $08
0009946E A906 8001                  	dc.b	nE3, $06, nRst, $01
00099472 E107                       	smpsAlterNote       $07
00099474 A702 8001                  	dc.b	nD3, $02, nRst, $01
00099478 E106                       	smpsAlterNote       $06
0009947A A503                       	dc.b	nC3, $03
0009947C E10C                       	smpsAlterNote       $0C
0009947E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00099484 E107                       	smpsAlterNote       $07
00099486 B20D                       	dc.b	nCs4, $0D
00099488 E104                       	smpsAlterNote       $04
0009948A E701                       	dc.b	smpsNoAttack, $01
0009948C E100                       	smpsAlterNote       $00
0009948E E701                       	dc.b	smpsNoAttack, $01
00099490 E104                       	smpsAlterNote       $04
00099492 E701                       	dc.b	smpsNoAttack, $01
00099494 E10A                       	smpsAlterNote       $0A
00099496 E701                       	dc.b	smpsNoAttack, $01
00099498 E10B                       	smpsAlterNote       $0B
0009949A E701                       	dc.b	smpsNoAttack, $01
0009949C E107                       	smpsAlterNote       $07
0009949E E701                       	dc.b	smpsNoAttack, $01
000994A0 E101                       	smpsAlterNote       $01
000994A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994A6 E104                       	smpsAlterNote       $04
000994A8 E701                       	dc.b	smpsNoAttack, $01
000994AA E10A                       	smpsAlterNote       $0A
000994AC E701                       	dc.b	smpsNoAttack, $01
000994AE E10B                       	smpsAlterNote       $0B
000994B0 8001                       	dc.b	nRst, $01
000994B2 E107                       	smpsAlterNote       $07
000994B4 B30D                       	dc.b	nD4, $0D
000994B6 E104                       	smpsAlterNote       $04
000994B8 E701                       	dc.b	smpsNoAttack, $01
000994BA E100                       	smpsAlterNote       $00
000994BC E701                       	dc.b	smpsNoAttack, $01
000994BE E104                       	smpsAlterNote       $04
000994C0 E701                       	dc.b	smpsNoAttack, $01
000994C2 E10A                       	smpsAlterNote       $0A
000994C4 E701                       	dc.b	smpsNoAttack, $01
000994C6 E10B                       	smpsAlterNote       $0B
000994C8 E701                       	dc.b	smpsNoAttack, $01
000994CA E107                       	smpsAlterNote       $07
000994CC E701                       	dc.b	smpsNoAttack, $01
000994CE E101                       	smpsAlterNote       $01
000994D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994D4 E104                       	smpsAlterNote       $04
000994D6 E701                       	dc.b	smpsNoAttack, $01
000994D8 E10A                       	smpsAlterNote       $0A
000994DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994DE E104                       	smpsAlterNote       $04
000994E0 E701                       	dc.b	smpsNoAttack, $01
000994E2 E101                       	smpsAlterNote       $01
000994E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994E8 E107                       	smpsAlterNote       $07
000994EA E701                       	dc.b	smpsNoAttack, $01
000994EC E10B                       	smpsAlterNote       $0B
000994EE E701                       	dc.b	smpsNoAttack, $01
000994F0 E10A                       	smpsAlterNote       $0A
000994F2 E701                       	dc.b	smpsNoAttack, $01
000994F4 E107                       	smpsAlterNote       $07
000994F6 8001                       	dc.b	nRst, $01
000994F8 E108                       	smpsAlterNote       $08
000994FA B50D                       	dc.b	nE4, $0D
000994FC E102                       	smpsAlterNote       $02
000994FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099502 E105                       	smpsAlterNote       $05
00099504 E701                       	dc.b	smpsNoAttack, $01
00099506 E10B                       	smpsAlterNote       $0B
00099508 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009950C E105                       	smpsAlterNote       $05
0009950E E701                       	dc.b	smpsNoAttack, $01
00099510 E102                       	smpsAlterNote       $02
00099512 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099516 E108                       	smpsAlterNote       $08
00099518 E701                       	dc.b	smpsNoAttack, $01
0009951A E10C                       	smpsAlterNote       $0C
0009951C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099520 E107                       	smpsAlterNote       $07
00099522 B30D                       	dc.b	nD4, $0D
00099524 E101                       	smpsAlterNote       $01
00099526 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009952A E104                       	smpsAlterNote       $04
0009952C E701                       	dc.b	smpsNoAttack, $01
0009952E E10A                       	smpsAlterNote       $0A
00099530 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099534 E104                       	smpsAlterNote       $04
00099536 E701                       	dc.b	smpsNoAttack, $01
00099538 E101                       	smpsAlterNote       $01
0009953A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009953E E107                       	smpsAlterNote       $07
00099540 E701                       	dc.b	smpsNoAttack, $01
00099542 E10B                       	smpsAlterNote       $0B
00099544 E701                       	dc.b	smpsNoAttack, $01
00099546 E10A                       	smpsAlterNote       $0A
00099548 E701                       	dc.b	smpsNoAttack, $01
0009954A E104                       	smpsAlterNote       $04
0009954C E701                       	dc.b	smpsNoAttack, $01
0009954E E100                       	smpsAlterNote       $00
00099550 E701                       	dc.b	smpsNoAttack, $01
00099552 E104                       	smpsAlterNote       $04
00099554 E701                       	dc.b	smpsNoAttack, $01
00099556 E107                       	smpsAlterNote       $07
00099558 E701                       	dc.b	smpsNoAttack, $01
0009955A E10B                       	smpsAlterNote       $0B
0009955C E701                       	dc.b	smpsNoAttack, $01
0009955E E107                       	smpsAlterNote       $07
00099560 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00099564 E101                       	smpsAlterNote       $01
00099566 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009956A E107                       	smpsAlterNote       $07
0009956C E701                       	dc.b	smpsNoAttack, $01
0009956E E10A                       	smpsAlterNote       $0A
00099570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099574 E104                       	smpsAlterNote       $04
00099576 E701                       	dc.b	smpsNoAttack, $01
00099578 E100                       	smpsAlterNote       $00
0009957A E701                       	dc.b	smpsNoAttack, $01
0009957C E101                       	smpsAlterNote       $01
0009957E E701                       	dc.b	smpsNoAttack, $01
00099580 E107                       	smpsAlterNote       $07
00099582 E701                       	dc.b	smpsNoAttack, $01
00099584 E10B                       	smpsAlterNote       $0B
00099586 E701                       	dc.b	smpsNoAttack, $01
00099588 E107                       	smpsAlterNote       $07
0009958A B30E                       	dc.b	nD4, $0E
0009958C E101                       	smpsAlterNote       $01
0009958E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099592 E107                       	smpsAlterNote       $07
00099594 E701                       	dc.b	smpsNoAttack, $01
00099596 E10A                       	smpsAlterNote       $0A
00099598 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009959C E104                       	smpsAlterNote       $04
0009959E E701                       	dc.b	smpsNoAttack, $01
000995A0 E100                       	smpsAlterNote       $00
000995A2 E701                       	dc.b	smpsNoAttack, $01
000995A4 E101                       	smpsAlterNote       $01
000995A6 E701                       	dc.b	smpsNoAttack, $01
000995A8 E107                       	smpsAlterNote       $07
000995AA E701                       	dc.b	smpsNoAttack, $01
000995AC E10B                       	smpsAlterNote       $0B
000995AE E701                       	dc.b	smpsNoAttack, $01
000995B0 E107                       	smpsAlterNote       $07
000995B2 E701                       	dc.b	smpsNoAttack, $01
000995B4 E104                       	smpsAlterNote       $04
000995B6 E701                       	dc.b	smpsNoAttack, $01
000995B8 E100                       	smpsAlterNote       $00
000995BA E701                       	dc.b	smpsNoAttack, $01
000995BC E104                       	smpsAlterNote       $04
000995BE E701                       	dc.b	smpsNoAttack, $01
000995C0 E10A                       	smpsAlterNote       $0A
000995C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000995C6 E107                       	smpsAlterNote       $07
000995C8 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000995CC E104                       	smpsAlterNote       $04
000995CE E701                       	dc.b	smpsNoAttack, $01
000995D0 E100                       	smpsAlterNote       $00
000995D2 E701                       	dc.b	smpsNoAttack, $01
000995D4 E101                       	smpsAlterNote       $01
000995D6 E701                       	dc.b	smpsNoAttack, $01
000995D8 E107                       	smpsAlterNote       $07
000995DA E701                       	dc.b	smpsNoAttack, $01
000995DC E10B                       	smpsAlterNote       $0B
000995DE E701                       	dc.b	smpsNoAttack, $01
000995E0 E107                       	smpsAlterNote       $07
000995E2 E701                       	dc.b	smpsNoAttack, $01
000995E4 E104                       	smpsAlterNote       $04
000995E6 E701                       	dc.b	smpsNoAttack, $01
000995E8 E100                       	smpsAlterNote       $00
000995EA E701                       	dc.b	smpsNoAttack, $01
000995EC E104                       	smpsAlterNote       $04
000995EE E701                       	dc.b	smpsNoAttack, $01
000995F0 E10A                       	smpsAlterNote       $0A
000995F2 E701                       	dc.b	smpsNoAttack, $01
000995F4 E10B                       	smpsAlterNote       $0B
000995F6 E701                       	dc.b	smpsNoAttack, $01
000995FA E6FF                       	smpsAlterVol        $FF
000995FC A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00099608 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00099610 E109                       	smpsAlterNote       $09
00099612 E601                       	smpsAlterVol        $01
00099614 B60D                       	dc.b	nF4, $0D
00099616 E106                       	smpsAlterNote       $06
00099618 E701                       	dc.b	smpsNoAttack, $01
0009961A E102                       	smpsAlterNote       $02
0009961C E701                       	dc.b	smpsNoAttack, $01
0009961E E106                       	smpsAlterNote       $06
00099620 E701                       	dc.b	smpsNoAttack, $01
00099622 E109                       	smpsAlterNote       $09
00099624 E701                       	dc.b	smpsNoAttack, $01
00099626 E10D                       	smpsAlterNote       $0D
00099628 E701                       	dc.b	smpsNoAttack, $01
0009962A E109                       	smpsAlterNote       $09
0009962C E701                       	dc.b	smpsNoAttack, $01
0009962E E103                       	smpsAlterNote       $03
00099630 E701                       	dc.b	smpsNoAttack, $01
00099632 E102                       	smpsAlterNote       $02
00099634 E701                       	dc.b	smpsNoAttack, $01
00099636 E106                       	smpsAlterNote       $06
00099638 E701                       	dc.b	smpsNoAttack, $01
0009963A E10C                       	smpsAlterNote       $0C
0009963C E701                       	dc.b	smpsNoAttack, $01
0009963E E10D                       	smpsAlterNote       $0D
00099640 8001                       	dc.b	nRst, $01
00099642 E109                       	smpsAlterNote       $09
00099644 B80D                       	dc.b	nG4, $0D
00099646 E106                       	smpsAlterNote       $06
00099648 E701                       	dc.b	smpsNoAttack, $01
0009964A E102                       	smpsAlterNote       $02
0009964C E701                       	dc.b	smpsNoAttack, $01
0009964E E106                       	smpsAlterNote       $06
00099650 E701                       	dc.b	smpsNoAttack, $01
00099652 E109                       	smpsAlterNote       $09
00099654 E701                       	dc.b	smpsNoAttack, $01
00099656 E10D                       	smpsAlterNote       $0D
00099658 E701                       	dc.b	smpsNoAttack, $01
0009965A E109                       	smpsAlterNote       $09
0009965C E701                       	dc.b	smpsNoAttack, $01
0009965E E103                       	smpsAlterNote       $03
00099660 E701                       	dc.b	smpsNoAttack, $01
00099662 E102                       	smpsAlterNote       $02
00099664 E701                       	dc.b	smpsNoAttack, $01
00099666 E106                       	smpsAlterNote       $06
00099668 E701                       	dc.b	smpsNoAttack, $01
0009966A E10C                       	smpsAlterNote       $0C
0009966C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099670 E106                       	smpsAlterNote       $06
00099672 E701                       	dc.b	smpsNoAttack, $01
00099674 E103                       	smpsAlterNote       $03
00099676 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009967A E109                       	smpsAlterNote       $09
0009967C E701                       	dc.b	smpsNoAttack, $01
0009967E E10D                       	smpsAlterNote       $0D
00099680 E701                       	dc.b	smpsNoAttack, $01
00099682 E10C                       	smpsAlterNote       $0C
00099684 E701                       	dc.b	smpsNoAttack, $01
00099686 E109                       	smpsAlterNote       $09
00099688 8001                       	dc.b	nRst, $01
0009968A E10B                       	smpsAlterNote       $0B
0009968C BA0D                       	dc.b	nA4, $0D
0009968E E105                       	smpsAlterNote       $05
00099690 E701                       	dc.b	smpsNoAttack, $01
00099692 E104                       	smpsAlterNote       $04
00099694 E701                       	dc.b	smpsNoAttack, $01
00099696 E108                       	smpsAlterNote       $08
00099698 E701                       	dc.b	smpsNoAttack, $01
0009969A E10E                       	smpsAlterNote       $0E
0009969C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996A0 E10B                       	smpsAlterNote       $0B
000996A2 E701                       	dc.b	smpsNoAttack, $01
000996A4 E105                       	smpsAlterNote       $05
000996A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996AA E10B                       	smpsAlterNote       $0B
000996AC E701                       	dc.b	smpsNoAttack, $01
000996AE E10E                       	smpsAlterNote       $0E
000996B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996B4 E108                       	smpsAlterNote       $08
000996B6 E701                       	dc.b	smpsNoAttack, $01
000996B8 E104                       	smpsAlterNote       $04
000996BA E701                       	dc.b	smpsNoAttack, $01
000996BC E105                       	smpsAlterNote       $05
000996BE E701                       	dc.b	smpsNoAttack, $01
000996C0 E10B                       	smpsAlterNote       $0B
000996C2 E701                       	dc.b	smpsNoAttack, $01
000996C4 E10F                       	smpsAlterNote       $0F
000996C6 E701                       	dc.b	smpsNoAttack, $01
000996C8 E10B                       	smpsAlterNote       $0B
000996CA E701                       	dc.b	smpsNoAttack, $01
000996CC E108                       	smpsAlterNote       $08
000996CE E701                       	dc.b	smpsNoAttack, $01
000996D0 E104                       	smpsAlterNote       $04
000996D2 E701                       	dc.b	smpsNoAttack, $01
000996D4 E108                       	smpsAlterNote       $08
000996D6 E701                       	dc.b	smpsNoAttack, $01
000996D8 E10E                       	smpsAlterNote       $0E
000996DA E701                       	dc.b	smpsNoAttack, $01
000996DC E10F                       	smpsAlterNote       $0F
000996DE E701                       	dc.b	smpsNoAttack, $01
000996E0 E10B                       	smpsAlterNote       $0B
000996E2 E701                       	dc.b	smpsNoAttack, $01
000996E4 E105                       	smpsAlterNote       $05
000996E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996EA E108                       	smpsAlterNote       $08
000996EC E701                       	dc.b	smpsNoAttack, $01
000996EE E10E                       	smpsAlterNote       $0E
000996F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996F4 E108                       	smpsAlterNote       $08
000996F6 E701                       	dc.b	smpsNoAttack, $01
000996F8 E105                       	smpsAlterNote       $05
000996FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996FE E108                       	smpsAlterNote       $08
00099700 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00099704 E109                       	smpsAlterNote       $09
00099706 B60D                       	dc.b	nF4, $0D
00099708 E103                       	smpsAlterNote       $03
0009970A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009970E E106                       	smpsAlterNote       $06
00099710 E701                       	dc.b	smpsNoAttack, $01
00099712 E10C                       	smpsAlterNote       $0C
00099714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099718 E106                       	smpsAlterNote       $06
0009971A E701                       	dc.b	smpsNoAttack, $01
0009971C E103                       	smpsAlterNote       $03
0009971E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099722 E109                       	smpsAlterNote       $09
00099724 E701                       	dc.b	smpsNoAttack, $01
00099726 E10D                       	smpsAlterNote       $0D
00099728 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009972C E109                       	smpsAlterNote       $09
0009972E B80D                       	dc.b	nG4, $0D
00099730 E103                       	smpsAlterNote       $03
00099732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099736 E109                       	smpsAlterNote       $09
00099738 E701                       	dc.b	smpsNoAttack, $01
0009973A E10C                       	smpsAlterNote       $0C
0009973C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099740 E106                       	smpsAlterNote       $06
00099742 E701                       	dc.b	smpsNoAttack, $01
00099744 E102                       	smpsAlterNote       $02
00099746 E701                       	dc.b	smpsNoAttack, $01
00099748 E103                       	smpsAlterNote       $03
0009974A E701                       	dc.b	smpsNoAttack, $01
0009974C E109                       	smpsAlterNote       $09
0009974E E701                       	dc.b	smpsNoAttack, $01
00099750 E10D                       	smpsAlterNote       $0D
00099752 E701                       	dc.b	smpsNoAttack, $01
00099754 E109                       	smpsAlterNote       $09
00099756 E701                       	dc.b	smpsNoAttack, $01
00099758 E106                       	smpsAlterNote       $06
0009975A E701                       	dc.b	smpsNoAttack, $01
0009975C E102                       	smpsAlterNote       $02
0009975E E701                       	dc.b	smpsNoAttack, $01
00099760 E106                       	smpsAlterNote       $06
00099762 E701                       	dc.b	smpsNoAttack, $01
00099764 E10C                       	smpsAlterNote       $0C
00099766 E701                       	dc.b	smpsNoAttack, $01
00099768 E10D                       	smpsAlterNote       $0D
0009976A E701                       	dc.b	smpsNoAttack, $01
0009976C E109                       	smpsAlterNote       $09
0009976E E701                       	dc.b	smpsNoAttack, $01
00099770 E10B                       	smpsAlterNote       $0B
00099772 BA0D                       	dc.b	nA4, $0D
00099774 E108                       	smpsAlterNote       $08
00099776 E701                       	dc.b	smpsNoAttack, $01
00099778 E105                       	smpsAlterNote       $05
0009977A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009977E E10B                       	smpsAlterNote       $0B
00099780 E701                       	dc.b	smpsNoAttack, $01
00099782 E10F                       	smpsAlterNote       $0F
00099784 E701                       	dc.b	smpsNoAttack, $01
00099786 E10E                       	smpsAlterNote       $0E
00099788 E701                       	dc.b	smpsNoAttack, $01
0009978A E108                       	smpsAlterNote       $08
0009978C E701                       	dc.b	smpsNoAttack, $01
0009978E E104                       	smpsAlterNote       $04
00099790 E701                       	dc.b	smpsNoAttack, $01
00099792 E108                       	smpsAlterNote       $08
00099794 E701                       	dc.b	smpsNoAttack, $01
00099796 E10B                       	smpsAlterNote       $0B
00099798 E701                       	dc.b	smpsNoAttack, $01
0009979A E10F                       	smpsAlterNote       $0F
0009979C E701                       	dc.b	smpsNoAttack, $01
0009979E E10B                       	smpsAlterNote       $0B
000997A0 E701                       	dc.b	smpsNoAttack, $01
000997A2 E105                       	smpsAlterNote       $05
000997A4 E701                       	dc.b	smpsNoAttack, $01
000997A6 E104                       	smpsAlterNote       $04
000997A8 E701                       	dc.b	smpsNoAttack, $01
000997AA E108                       	smpsAlterNote       $08
000997AC E701                       	dc.b	smpsNoAttack, $01
000997AE E10E                       	smpsAlterNote       $0E
000997B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000997B4 E10B                       	smpsAlterNote       $0B
000997B6 E701                       	dc.b	smpsNoAttack, $01
000997B8 E105                       	smpsAlterNote       $05
000997BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000997BE E10B                       	smpsAlterNote       $0B
000997C0 E701                       	dc.b	smpsNoAttack, $01
000997C2 E10E                       	smpsAlterNote       $0E
000997C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000997C8 E108                       	smpsAlterNote       $08
000997CA E701                       	dc.b	smpsNoAttack, $01
000997CC E105                       	smpsAlterNote       $05
000997CE 8001                       	dc.b	nRst, $01
000997D0 E109                       	smpsAlterNote       $09
000997D2 B60A                       	dc.b	nF4, $0A
000997D4 E108                       	smpsAlterNote       $08
000997D6 B507                       	dc.b	nE4, $07
000997D8 E107                       	smpsAlterNote       $07
000997DA B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000997DE E108                       	smpsAlterNote       $08
000997E0 B503                       	dc.b	nE4, $03
000997E2 E109                       	smpsAlterNote       $09
000997E4 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000997EC E10B                       	smpsAlterNote       $0B
000997EE BA0D                       	dc.b	nA4, $0D
000997F0 E108                       	smpsAlterNote       $08
000997F2 E701                       	dc.b	smpsNoAttack, $01
000997F4 E104                       	smpsAlterNote       $04
000997F6 E701                       	dc.b	smpsNoAttack, $01
000997F8 E108                       	smpsAlterNote       $08
000997FA E701                       	dc.b	smpsNoAttack, $01
000997FC E10B                       	smpsAlterNote       $0B
000997FE E701                       	dc.b	smpsNoAttack, $01
00099800 E10F                       	smpsAlterNote       $0F
00099802 E701                       	dc.b	smpsNoAttack, $01
00099804 E10B                       	smpsAlterNote       $0B
00099806 E701                       	dc.b	smpsNoAttack, $01
00099808 E105                       	smpsAlterNote       $05
0009980A E701                       	dc.b	smpsNoAttack, $01
0009980C E104                       	smpsAlterNote       $04
0009980E E701                       	dc.b	smpsNoAttack, $01
00099810 E108                       	smpsAlterNote       $08
00099812 E701                       	dc.b	smpsNoAttack, $01
00099814 E10E                       	smpsAlterNote       $0E
00099816 E701                       	dc.b	smpsNoAttack, $01
00099818 E10F                       	smpsAlterNote       $0F
0009981A 8001                       	dc.b	nRst, $01
0009981C E109                       	smpsAlterNote       $09
0009981E C20D                       	dc.b	nF5, $0D
00099820 E106                       	smpsAlterNote       $06
00099822 E701                       	dc.b	smpsNoAttack, $01
00099824 E102                       	smpsAlterNote       $02
00099826 E701                       	dc.b	smpsNoAttack, $01
00099828 E106                       	smpsAlterNote       $06
0009982A E701                       	dc.b	smpsNoAttack, $01
0009982C E109                       	smpsAlterNote       $09
0009982E E701                       	dc.b	smpsNoAttack, $01
00099830 E10D                       	smpsAlterNote       $0D
00099832 E701                       	dc.b	smpsNoAttack, $01
00099834 E109                       	smpsAlterNote       $09
00099836 E701                       	dc.b	smpsNoAttack, $01
00099838 E103                       	smpsAlterNote       $03
0009983A E701                       	dc.b	smpsNoAttack, $01
0009983C E102                       	smpsAlterNote       $02
0009983E E701                       	dc.b	smpsNoAttack, $01
00099840 E106                       	smpsAlterNote       $06
00099842 E701                       	dc.b	smpsNoAttack, $01
00099844 E10C                       	smpsAlterNote       $0C
00099846 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009984A E109                       	smpsAlterNote       $09
0009984C E701                       	dc.b	smpsNoAttack, $01
0009984E E103                       	smpsAlterNote       $03
00099850 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099854 E109                       	smpsAlterNote       $09
00099856 E701                       	dc.b	smpsNoAttack, $01
00099858 E10C                       	smpsAlterNote       $0C
0009985A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009985E E106                       	smpsAlterNote       $06
00099860 E701                       	dc.b	smpsNoAttack, $01
00099862 E102                       	smpsAlterNote       $02
00099864 E701                       	dc.b	smpsNoAttack, $01
00099866 E103                       	smpsAlterNote       $03
00099868 E701                       	dc.b	smpsNoAttack, $01
0009986A E109                       	smpsAlterNote       $09
0009986C E701                       	dc.b	smpsNoAttack, $01
0009986E E10D                       	smpsAlterNote       $0D
00099870 E701                       	dc.b	smpsNoAttack, $01
00099872 E109                       	smpsAlterNote       $09
00099874 E701                       	dc.b	smpsNoAttack, $01
00099876 E106                       	smpsAlterNote       $06
00099878 E701                       	dc.b	smpsNoAttack, $01
0009987A E102                       	smpsAlterNote       $02
0009987C E701                       	dc.b	smpsNoAttack, $01
0009987E E106                       	smpsAlterNote       $06
00099880 E701                       	dc.b	smpsNoAttack, $01
00099882 E10C                       	smpsAlterNote       $0C
00099884 E701                       	dc.b	smpsNoAttack, $01
00099886 E10D                       	smpsAlterNote       $0D
00099888 E701                       	dc.b	smpsNoAttack, $01
0009988A E109                       	smpsAlterNote       $09
0009988C E701                       	dc.b	smpsNoAttack, $01
0009988E E103                       	smpsAlterNote       $03
00099890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099894 E106                       	smpsAlterNote       $06
00099896 E701                       	dc.b	smpsNoAttack, $01
00099898 E10C                       	smpsAlterNote       $0C
0009989A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009989E E106                       	smpsAlterNote       $06
000998A0 E701                       	dc.b	smpsNoAttack, $01
000998A2 E103                       	smpsAlterNote       $03
000998A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998A8 E109                       	smpsAlterNote       $09
000998AA E701                       	dc.b	smpsNoAttack, $01
000998AC E10D                       	smpsAlterNote       $0D
000998AE E701                       	dc.b	smpsNoAttack, $01
000998B0 E10C                       	smpsAlterNote       $0C
000998B2 E701                       	dc.b	smpsNoAttack, $01
000998B4 E106                       	smpsAlterNote       $06
000998B6 E701                       	dc.b	smpsNoAttack, $01
000998B8 E103                       	smpsAlterNote       $03
000998BA 8001                       	dc.b	nRst, $01
000998BC E109                       	smpsAlterNote       $09
000998BE C206 8001                  	dc.b	nF5, $06, nRst, $01
000998C4 E10C                       	smpsAlterNote       $0C
000998C6 E601                       	smpsAlterVol        $01
000998C8 BB0D                       	dc.b	nBb4, $0D
000998CA E106                       	smpsAlterNote       $06
000998CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998D0 E109                       	smpsAlterNote       $09
000998D2 E701                       	dc.b	smpsNoAttack, $01
000998D4 E10F                       	smpsAlterNote       $0F
000998D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998DA E109                       	smpsAlterNote       $09
000998DC E701                       	dc.b	smpsNoAttack, $01
000998DE E106                       	smpsAlterNote       $06
000998E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998E4 E10C                       	smpsAlterNote       $0C
000998E6 E701                       	dc.b	smpsNoAttack, $01
000998E8 E110                       	smpsAlterNote       $10
000998EA E701                       	dc.b	smpsNoAttack, $01
000998EC E10F                       	smpsAlterNote       $0F
000998EE E701                       	dc.b	smpsNoAttack, $01
000998F0 E109                       	smpsAlterNote       $09
000998F2 E701                       	dc.b	smpsNoAttack, $01
000998F4 E105                       	smpsAlterNote       $05
000998F6 E701                       	dc.b	smpsNoAttack, $01
000998F8 E106                       	smpsAlterNote       $06
000998FA 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000998FE E103                       	smpsAlterNote       $03
00099900 E701                       	dc.b	smpsNoAttack, $01
00099902 E1FF                       	smpsAlterNote       $FF
00099904 E701                       	dc.b	smpsNoAttack, $01
00099906 E103                       	smpsAlterNote       $03
00099908 E701                       	dc.b	smpsNoAttack, $01
0009990A E106                       	smpsAlterNote       $06
0009990C E701                       	dc.b	smpsNoAttack, $01
0009990E E10A                       	smpsAlterNote       $0A
00099910 E701                       	dc.b	smpsNoAttack, $01
00099912 E106                       	smpsAlterNote       $06
00099914 E701                       	dc.b	smpsNoAttack, $01
00099916 E100                       	smpsAlterNote       $00
00099918 E701                       	dc.b	smpsNoAttack, $01
0009991A E1FF                       	smpsAlterNote       $FF
0009991C E701                       	dc.b	smpsNoAttack, $01
0009991E E103                       	smpsAlterNote       $03
00099920 E701                       	dc.b	smpsNoAttack, $01
00099922 E109                       	smpsAlterNote       $09
00099924 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099928 E106                       	smpsAlterNote       $06
0009992A E701                       	dc.b	smpsNoAttack, $01
0009992C E100                       	smpsAlterNote       $00
0009992E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099932 E107                       	smpsAlterNote       $07
00099934 BF0E                       	dc.b	nD5, $0E
00099936 E101                       	smpsAlterNote       $01
00099938 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009993C E107                       	smpsAlterNote       $07
0009993E E701                       	dc.b	smpsNoAttack, $01
00099940 E10A                       	smpsAlterNote       $0A
00099942 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099946 E104                       	smpsAlterNote       $04
00099948 E701                       	dc.b	smpsNoAttack, $01
0009994A E100                       	smpsAlterNote       $00
0009994C E701                       	dc.b	smpsNoAttack, $01
0009994E E101                       	smpsAlterNote       $01
00099950 E701                       	dc.b	smpsNoAttack, $01
00099952 E107                       	smpsAlterNote       $07
00099954 E701                       	dc.b	smpsNoAttack, $01
00099956 E10B                       	smpsAlterNote       $0B
00099958 E701                       	dc.b	smpsNoAttack, $01
0009995A E107                       	smpsAlterNote       $07
0009995C E701                       	dc.b	smpsNoAttack, $01
0009995E E104                       	smpsAlterNote       $04
00099960 E701                       	dc.b	smpsNoAttack, $01
00099962 E100                       	smpsAlterNote       $00
00099964 E701                       	dc.b	smpsNoAttack, $01
00099966 E101                       	smpsAlterNote       $01
00099968 8001                       	dc.b	nRst, $01
0009996A E108                       	smpsAlterNote       $08
0009996C C10C                       	dc.b	nE5, $0C
0009996E E109                       	smpsAlterNote       $09
00099970 C201 8001                  	dc.b	nF5, $01, nRst, $01
00099974 E10A                       	smpsAlterNote       $0A
00099976 8001                       	dc.b	nRst, $01
00099978 E109                       	smpsAlterNote       $09
0009997A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009997E E106                       	smpsAlterNote       $06
00099980 E701                       	dc.b	smpsNoAttack, $01
00099982 E102                       	smpsAlterNote       $02
00099984 E701                       	dc.b	smpsNoAttack, $01
00099986 E103                       	smpsAlterNote       $03
00099988 E701                       	dc.b	smpsNoAttack, $01
0009998A E109                       	smpsAlterNote       $09
0009998C E701                       	dc.b	smpsNoAttack, $01
0009998E E10D                       	smpsAlterNote       $0D
00099990 E701                       	dc.b	smpsNoAttack, $01
00099992 E109                       	smpsAlterNote       $09
00099994 E701                       	dc.b	smpsNoAttack, $01
00099996 E106                       	smpsAlterNote       $06
00099998 E701                       	dc.b	smpsNoAttack, $01
0009999A E102                       	smpsAlterNote       $02
0009999C E701                       	dc.b	smpsNoAttack, $01
0009999E E106                       	smpsAlterNote       $06
000999A0 E701                       	dc.b	smpsNoAttack, $01
000999A2 E10C                       	smpsAlterNote       $0C
000999A4 E701                       	dc.b	smpsNoAttack, $01
000999A6 E10D                       	smpsAlterNote       $0D
000999A8 E701                       	dc.b	smpsNoAttack, $01
000999AA E109                       	smpsAlterNote       $09
000999AC C40D                       	dc.b	nG5, $0D
000999AE E106                       	smpsAlterNote       $06
000999B0 E701                       	dc.b	smpsNoAttack, $01
000999B2 E102                       	smpsAlterNote       $02
000999B4 E701                       	dc.b	smpsNoAttack, $01
000999B6 E103                       	smpsAlterNote       $03
000999B8 E701                       	dc.b	smpsNoAttack, $01
000999BA E109                       	smpsAlterNote       $09
000999BC E701                       	dc.b	smpsNoAttack, $01
000999BE E108                       	smpsAlterNote       $08
000999C0 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000999CC E109                       	smpsAlterNote       $09
000999CE C20D                       	dc.b	nF5, $0D
000999D0 E106                       	smpsAlterNote       $06
000999D2 E701                       	dc.b	smpsNoAttack, $01
000999D4 E102                       	smpsAlterNote       $02
000999D6 E701                       	dc.b	smpsNoAttack, $01
000999D8 E106                       	smpsAlterNote       $06
000999DA E701                       	dc.b	smpsNoAttack, $01
000999DC E109                       	smpsAlterNote       $09
000999DE E701                       	dc.b	smpsNoAttack, $01
000999E0 E10D                       	smpsAlterNote       $0D
000999E2 E701                       	dc.b	smpsNoAttack, $01
000999E4 E109                       	smpsAlterNote       $09
000999E6 E701                       	dc.b	smpsNoAttack, $01
000999E8 E103                       	smpsAlterNote       $03
000999EA E701                       	dc.b	smpsNoAttack, $01
000999EC E102                       	smpsAlterNote       $02
000999EE E701                       	dc.b	smpsNoAttack, $01
000999F0 E106                       	smpsAlterNote       $06
000999F2 E701                       	dc.b	smpsNoAttack, $01
000999F4 E10C                       	smpsAlterNote       $0C
000999F6 E701                       	dc.b	smpsNoAttack, $01
000999F8 E10D                       	smpsAlterNote       $0D
000999FA 8001                       	dc.b	nRst, $01
000999FC E112                       	smpsAlterNote       $12
000999FE C401                       	dc.b	nG5, $01
00099A00 E1EB                       	smpsAlterNote       $EB
00099A02 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00099A05 E1FD                       	smpsAlterNote       $FD
00099A07 E701                       	dc.b	smpsNoAttack, $01
00099A09 E10F                       	smpsAlterNote       $0F
00099A0B E701                       	dc.b	smpsNoAttack, $01
00099A0D E118                       	smpsAlterNote       $18
00099A0F E701                       	dc.b	smpsNoAttack, $01
00099A11 E1ED                       	smpsAlterNote       $ED
00099A13 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00099A16 E1FF                       	smpsAlterNote       $FF
00099A18 E701                       	dc.b	smpsNoAttack, $01
00099A1A E10B                       	smpsAlterNote       $0B
00099A1C E703                       	dc.b	smpsNoAttack, $03
00099A1E E109                       	smpsAlterNote       $09
00099A20 C407                       	dc.b	nG5, $07
00099A22 E108                       	smpsAlterNote       $08
00099A24 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00099A30 E109                       	smpsAlterNote       $09
00099A32 C20D                       	dc.b	nF5, $0D
00099A34 E103                       	smpsAlterNote       $03
00099A36 E701                       	dc.b	smpsNoAttack, $01
00099A38 E102                       	smpsAlterNote       $02
00099A3A E701                       	dc.b	smpsNoAttack, $01
00099A3C E106                       	smpsAlterNote       $06
00099A3E E701                       	dc.b	smpsNoAttack, $01
00099A40 E10C                       	smpsAlterNote       $0C
00099A42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A46 E109                       	smpsAlterNote       $09
00099A48 E701                       	dc.b	smpsNoAttack, $01
00099A4A E103                       	smpsAlterNote       $03
00099A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A50 E109                       	smpsAlterNote       $09
00099A52 E701                       	dc.b	smpsNoAttack, $01
00099A54 E10C                       	smpsAlterNote       $0C
00099A56 E701                       	dc.b	smpsNoAttack, $01
00099A58 E10D                       	smpsAlterNote       $0D
00099A5A 8001                       	dc.b	nRst, $01
00099A5C E10B                       	smpsAlterNote       $0B
00099A5E C609 8001                  	dc.b	nA5, $09, nRst, $01
00099A62 E109                       	smpsAlterNote       $09
00099A64 B806 8001                  	dc.b	nG4, $06, nRst, $01
00099A68 E108                       	smpsAlterNote       $08
00099A6A C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00099A76 8001                       	dc.b	nRst, $01
00099A78 E109                       	smpsAlterNote       $09
00099A7A C20D                       	dc.b	nF5, $0D
00099A7C E103                       	smpsAlterNote       $03
00099A7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A82 E106                       	smpsAlterNote       $06
00099A84 E701                       	dc.b	smpsNoAttack, $01
00099A86 E10C                       	smpsAlterNote       $0C
00099A88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A8C E106                       	smpsAlterNote       $06
00099A8E E701                       	dc.b	smpsNoAttack, $01
00099A90 E103                       	smpsAlterNote       $03
00099A92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A96 E109                       	smpsAlterNote       $09
00099A98 E701                       	dc.b	smpsNoAttack, $01
00099A9A E10D                       	smpsAlterNote       $0D
00099A9C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099AA2 E108                       	smpsAlterNote       $08
00099AA4 E6FF                       	smpsAlterVol        $FF
00099AA6 A806                       	dc.b	nEb3, $06
00099AA8 E10C                       	smpsAlterNote       $0C
00099AAA A303 8001                  	dc.b	nBb2, $03, nRst, $01
00099AAE E108                       	smpsAlterNote       $08
00099AB0 A803                       	dc.b	nEb3, $03
00099AB2 E109                       	smpsAlterNote       $09
00099AB4 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00099AB8 E10C                       	smpsAlterNote       $0C
00099ABA AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00099AC4 E109                       	smpsAlterNote       $09
00099AC6 E602                       	smpsAlterVol        $02
00099AC8 B604                       	dc.b	nF4, $04
00099ACA E602                       	smpsAlterVol        $02
00099ACC F6F1 AA                    	smpsJump            music84_Jump02
00099ACF                            
00099ACF                            ; FM4 Data
00099ACF                            music84_FM4:
00099AD1 E040                       	smpsPan             panRight, $00
00099AD3 8003                       	dc.b	nRst, $03
00099AD5 E10F                       	smpsAlterNote       $0F
00099AD7 C603 8008                  	dc.b	nA5, $03, nRst, $08
00099ADB E10D                       	smpsAlterNote       $0D
00099ADD C403 800A                  	dc.b	nG5, $03, nRst, $0A
00099AE1 E10C                       	smpsAlterNote       $0C
00099AE3 C103 8004                  	dc.b	nE5, $03, nRst, $04
00099AE9 E6FE                       	smpsAlterVol        $FE
00099AEB E110                       	smpsAlterNote       $10
00099AED C703 8001                  	dc.b	nBb5, $03, nRst, $01
00099AF1 E10F                       	smpsAlterNote       $0F
00099AF3 C602 8001                  	dc.b	nA5, $02, nRst, $01
00099AF7 E10D                       	smpsAlterNote       $0D
00099AF9 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00099B02 E10C                       	smpsAlterNote       $0C
00099B04 C103                       	dc.b	nE5, $03
00099B06 E10A                       	smpsAlterNote       $0A
00099B08 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00099B0E 03                         	dc.b	$03
00099B0F                            
00099B0F                            music84_Jump01:
00099B0F E10B                       	smpsAlterNote       $0B
00099B11 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00099B15 E10C                       	smpsAlterNote       $0C
00099B17 C102 8001                  	dc.b	nE5, $02, nRst, $01
00099B1B E10D                       	smpsAlterNote       $0D
00099B1D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099B27 E10B                       	smpsAlterNote       $0B
00099B29 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00099B2D E107                       	smpsAlterNote       $07
00099B2F E701                       	dc.b	smpsNoAttack, $01
00099B31 E103                       	smpsAlterNote       $03
00099B33 E701                       	dc.b	smpsNoAttack, $01
00099B35 E104                       	smpsAlterNote       $04
00099B37 E701                       	dc.b	smpsNoAttack, $01
00099B39 E10A                       	smpsAlterNote       $0A
00099B3B E701                       	dc.b	smpsNoAttack, $01
00099B3D E10E                       	smpsAlterNote       $0E
00099B3F E701                       	dc.b	smpsNoAttack, $01
00099B41 E10A                       	smpsAlterNote       $0A
00099B43 E701                       	dc.b	smpsNoAttack, $01
00099B45 E107                       	smpsAlterNote       $07
00099B47 E701                       	dc.b	smpsNoAttack, $01
00099B49 E104                       	smpsAlterNote       $04
00099B4B 8001                       	dc.b	nRst, $01
00099B4D E110                       	smpsAlterNote       $10
00099B4F C703                       	dc.b	nBb5, $03
00099B51 E10F                       	smpsAlterNote       $0F
00099B53 C603 8001                  	dc.b	nA5, $03, nRst, $01
00099B57 E10D                       	smpsAlterNote       $0D
00099B59 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00099B5F E10C                       	smpsAlterNote       $0C
00099B61 E701                       	dc.b	smpsNoAttack, $01
00099B63 E108                       	smpsAlterNote       $08
00099B65 E701                       	dc.b	smpsNoAttack, $01
00099B67 E10C                       	smpsAlterNote       $0C
00099B69 E701                       	dc.b	smpsNoAttack, $01
00099B6B E10F                       	smpsAlterNote       $0F
00099B6D E701                       	dc.b	smpsNoAttack, $01
00099B6F E113                       	smpsAlterNote       $13
00099B71 E701                       	dc.b	smpsNoAttack, $01
00099B73 E10F                       	smpsAlterNote       $0F
00099B75 E701                       	dc.b	smpsNoAttack, $01
00099B77 E109                       	smpsAlterNote       $09
00099B79 E701                       	dc.b	smpsNoAttack, $01
00099B7B E108                       	smpsAlterNote       $08
00099B7D E701                       	dc.b	smpsNoAttack, $01
00099B7F E10C                       	smpsAlterNote       $0C
00099B81 E701                       	dc.b	smpsNoAttack, $01
00099B83 E112                       	smpsAlterNote       $12
00099B85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B89 E10C                       	smpsAlterNote       $0C
00099B8B E701                       	dc.b	smpsNoAttack, $01
00099B8D E109                       	smpsAlterNote       $09
00099B8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B93 E10F                       	smpsAlterNote       $0F
00099B95 E701                       	dc.b	smpsNoAttack, $01
00099B97 E113                       	smpsAlterNote       $13
00099B99 E701                       	dc.b	smpsNoAttack, $01
00099B9B E112                       	smpsAlterNote       $12
00099B9D E701                       	dc.b	smpsNoAttack, $01
00099B9F E10C                       	smpsAlterNote       $0C
00099BA1 E701                       	dc.b	smpsNoAttack, $01
00099BA3 E108                       	smpsAlterNote       $08
00099BA5 E701                       	dc.b	smpsNoAttack, $01
00099BA7 E10C                       	smpsAlterNote       $0C
00099BA9 E701                       	dc.b	smpsNoAttack, $01
00099BAB E10F                       	smpsAlterNote       $0F
00099BAD E701                       	dc.b	smpsNoAttack, $01
00099BAF E113                       	smpsAlterNote       $13
00099BB1 E701                       	dc.b	smpsNoAttack, $01
00099BB3 E10F                       	smpsAlterNote       $0F
00099BB5 E701                       	dc.b	smpsNoAttack, $01
00099BB7 E109                       	smpsAlterNote       $09
00099BB9 E701                       	dc.b	smpsNoAttack, $01
00099BBB E108                       	smpsAlterNote       $08
00099BBD E701                       	dc.b	smpsNoAttack, $01
00099BBF E10C                       	smpsAlterNote       $0C
00099BC1 E701                       	dc.b	smpsNoAttack, $01
00099BC3 E112                       	smpsAlterNote       $12
00099BC5 E701                       	dc.b	smpsNoAttack, $01
00099BC7 E113                       	smpsAlterNote       $13
00099BC9 800F                       	dc.b	nRst, $0F
00099BCB E10B                       	smpsAlterNote       $0B
00099BCD BF03                       	dc.b	nD5, $03
00099BCF E10C                       	smpsAlterNote       $0C
00099BD1 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099BD5 E10D                       	smpsAlterNote       $0D
00099BD7 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00099BDF E10B                       	smpsAlterNote       $0B
00099BE1 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00099BEB E110                       	smpsAlterNote       $10
00099BED C704                       	dc.b	nBb5, $04
00099BEF E10F                       	smpsAlterNote       $0F
00099BF1 C604 8001                  	dc.b	nA5, $04, nRst, $01
00099BF5 E10D                       	smpsAlterNote       $0D
00099BF7 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00099BFD E109                       	smpsAlterNote       $09
00099BFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C03 E10F                       	smpsAlterNote       $0F
00099C05 E701                       	dc.b	smpsNoAttack, $01
00099C07 E112                       	smpsAlterNote       $12
00099C09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C0D E10C                       	smpsAlterNote       $0C
00099C0F E701                       	dc.b	smpsNoAttack, $01
00099C11 E108                       	smpsAlterNote       $08
00099C13 E701                       	dc.b	smpsNoAttack, $01
00099C15 E109                       	smpsAlterNote       $09
00099C17 E701                       	dc.b	smpsNoAttack, $01
00099C19 E10F                       	smpsAlterNote       $0F
00099C1B E701                       	dc.b	smpsNoAttack, $01
00099C1D E113                       	smpsAlterNote       $13
00099C1F E701                       	dc.b	smpsNoAttack, $01
00099C21 E10F                       	smpsAlterNote       $0F
00099C23 E701                       	dc.b	smpsNoAttack, $01
00099C25 E10C                       	smpsAlterNote       $0C
00099C27 E701                       	dc.b	smpsNoAttack, $01
00099C29 E108                       	smpsAlterNote       $08
00099C2B E701                       	dc.b	smpsNoAttack, $01
00099C2D E10C                       	smpsAlterNote       $0C
00099C2F E701                       	dc.b	smpsNoAttack, $01
00099C31 E112                       	smpsAlterNote       $12
00099C33 E701                       	dc.b	smpsNoAttack, $01
00099C35 E113                       	smpsAlterNote       $13
00099C37 E701                       	dc.b	smpsNoAttack, $01
00099C39 E10F                       	smpsAlterNote       $0F
00099C3B E701                       	dc.b	smpsNoAttack, $01
00099C3D E109                       	smpsAlterNote       $09
00099C3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C43 E10C                       	smpsAlterNote       $0C
00099C45 E701                       	dc.b	smpsNoAttack, $01
00099C47 E112                       	smpsAlterNote       $12
00099C49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C4D E10C                       	smpsAlterNote       $0C
00099C4F E701                       	dc.b	smpsNoAttack, $01
00099C51 E109                       	smpsAlterNote       $09
00099C53 E701                       	dc.b	smpsNoAttack, $01
00099C55 E10D                       	smpsAlterNote       $0D
00099C57 C401 8001                  	dc.b	nG5, $01, nRst, $01
00099C5B E10F                       	smpsAlterNote       $0F
00099C5D C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00099C67 E10D                       	smpsAlterNote       $0D
00099C69 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00099C6F E10B                       	smpsAlterNote       $0B
00099C71 BF0D                       	dc.b	nD5, $0D
00099C73 E108                       	smpsAlterNote       $08
00099C75 E701                       	dc.b	smpsNoAttack, $01
00099C77 E104                       	smpsAlterNote       $04
00099C79 E701                       	dc.b	smpsNoAttack, $01
00099C7B E108                       	smpsAlterNote       $08
00099C7D E701                       	dc.b	smpsNoAttack, $01
00099C7F E10B                       	smpsAlterNote       $0B
00099C81 E701                       	dc.b	smpsNoAttack, $01
00099C83 E10F                       	smpsAlterNote       $0F
00099C85 E701                       	dc.b	smpsNoAttack, $01
00099C87 E10B                       	smpsAlterNote       $0B
00099C89 E701                       	dc.b	smpsNoAttack, $01
00099C8B E105                       	smpsAlterNote       $05
00099C8D E701                       	dc.b	smpsNoAttack, $01
00099C8F E104                       	smpsAlterNote       $04
00099C91 E701                       	dc.b	smpsNoAttack, $01
00099C93 E108                       	smpsAlterNote       $08
00099C95 E701                       	dc.b	smpsNoAttack, $01
00099C97 E10E                       	smpsAlterNote       $0E
00099C99 E701                       	dc.b	smpsNoAttack, $01
00099C9B E10F                       	smpsAlterNote       $0F
00099C9D 8001                       	dc.b	nRst, $01
00099C9F E10C                       	smpsAlterNote       $0C
00099CA1 C101                       	dc.b	nE5, $01
00099CA3 E10D                       	smpsAlterNote       $0D
00099CA5 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00099CAB E10F                       	smpsAlterNote       $0F
00099CAD C606 8001                  	dc.b	nA5, $06, nRst, $01
00099CB1 E10C                       	smpsAlterNote       $0C
00099CB3 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00099CB7 E10D                       	smpsAlterNote       $0D
00099CB9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00099CBD E10C                       	smpsAlterNote       $0C
00099CBF CD03                       	dc.b	nE6, $03
00099CC1 E10A                       	smpsAlterNote       $0A
00099CC3 C903 8001                  	dc.b	nC6, $03, nRst, $01
00099CC7 E10D                       	smpsAlterNote       $0D
00099CC9 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00099CD1 E109                       	smpsAlterNote       $09
00099CD3 E701                       	dc.b	smpsNoAttack, $01
00099CD5 E10D                       	smpsAlterNote       $0D
00099CD7 E701                       	dc.b	smpsNoAttack, $01
00099CD9 E110                       	smpsAlterNote       $10
00099CDB E701                       	dc.b	smpsNoAttack, $01
00099CDD E114                       	smpsAlterNote       $14
00099CDF E701                       	dc.b	smpsNoAttack, $01
00099CE1 E110                       	smpsAlterNote       $10
00099CE3 E701                       	dc.b	smpsNoAttack, $01
00099CE5 E10A                       	smpsAlterNote       $0A
00099CE7 E701                       	dc.b	smpsNoAttack, $01
00099CE9 E109                       	smpsAlterNote       $09
00099CEB E701                       	dc.b	smpsNoAttack, $01
00099CED E10D                       	smpsAlterNote       $0D
00099CEF E701                       	dc.b	smpsNoAttack, $01
00099CF1 E113                       	smpsAlterNote       $13
00099CF3 E701                       	dc.b	smpsNoAttack, $01
00099CF5 E114                       	smpsAlterNote       $14
00099CF7 8001                       	dc.b	nRst, $01
00099CF9 E10F                       	smpsAlterNote       $0F
00099CFB C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00099D01 E10C                       	smpsAlterNote       $0C
00099D03 E701                       	dc.b	smpsNoAttack, $01
00099D05 E108                       	smpsAlterNote       $08
00099D07 E701                       	dc.b	smpsNoAttack, $01
00099D09 E10C                       	smpsAlterNote       $0C
00099D0B E701                       	dc.b	smpsNoAttack, $01
00099D0D E112                       	smpsAlterNote       $12
00099D0F E701                       	dc.b	smpsNoAttack, $01
00099D11 E113                       	smpsAlterNote       $13
00099D13 E701                       	dc.b	smpsNoAttack, $01
00099D15 E10F                       	smpsAlterNote       $0F
00099D17 E701                       	dc.b	smpsNoAttack, $01
00099D19 E109                       	smpsAlterNote       $09
00099D1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D1F E10C                       	smpsAlterNote       $0C
00099D21 E701                       	dc.b	smpsNoAttack, $01
00099D23 E112                       	smpsAlterNote       $12
00099D25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D29 E10C                       	smpsAlterNote       $0C
00099D2B E701                       	dc.b	smpsNoAttack, $01
00099D2D E109                       	smpsAlterNote       $09
00099D2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D33 E10F                       	smpsAlterNote       $0F
00099D35 E701                       	dc.b	smpsNoAttack, $01
00099D37 E113                       	smpsAlterNote       $13
00099D39 E701                       	dc.b	smpsNoAttack, $01
00099D3B E112                       	smpsAlterNote       $12
00099D3D E701                       	dc.b	smpsNoAttack, $01
00099D3F E10C                       	smpsAlterNote       $0C
00099D41 E701                       	dc.b	smpsNoAttack, $01
00099D43 E108                       	smpsAlterNote       $08
00099D45 E701                       	dc.b	smpsNoAttack, $01
00099D47 E10C                       	smpsAlterNote       $0C
00099D49 E701                       	dc.b	smpsNoAttack, $01
00099D4B E10F                       	smpsAlterNote       $0F
00099D4D E701                       	dc.b	smpsNoAttack, $01
00099D4F E113                       	smpsAlterNote       $13
00099D51 E701                       	dc.b	smpsNoAttack, $01
00099D53 E10F                       	smpsAlterNote       $0F
00099D55 E701                       	dc.b	smpsNoAttack, $01
00099D57 E109                       	smpsAlterNote       $09
00099D59 E701                       	dc.b	smpsNoAttack, $01
00099D5B E108                       	smpsAlterNote       $08
00099D5D E701                       	dc.b	smpsNoAttack, $01
00099D5F E10C                       	smpsAlterNote       $0C
00099D61 E701                       	dc.b	smpsNoAttack, $01
00099D63 E112                       	smpsAlterNote       $12
00099D65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D69 E10F                       	smpsAlterNote       $0F
00099D6B E701                       	dc.b	smpsNoAttack, $01
00099D6D E109                       	smpsAlterNote       $09
00099D6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D73 E10F                       	smpsAlterNote       $0F
00099D75 E701                       	dc.b	smpsNoAttack, $01
00099D77 E113                       	smpsAlterNote       $13
00099D79 E701                       	dc.b	smpsNoAttack, $01
00099D7B E112                       	smpsAlterNote       $12
00099D7D E701                       	dc.b	smpsNoAttack, $01
00099D7F E10C                       	smpsAlterNote       $0C
00099D81 E701                       	dc.b	smpsNoAttack, $01
00099D83 E108                       	smpsAlterNote       $08
00099D85 E701                       	dc.b	smpsNoAttack, $01
00099D87 E10C                       	smpsAlterNote       $0C
00099D89 E701                       	dc.b	smpsNoAttack, $01
00099D8B E10F                       	smpsAlterNote       $0F
00099D8D E701                       	dc.b	smpsNoAttack, $01
00099D8F E113                       	smpsAlterNote       $13
00099D91 E701                       	dc.b	smpsNoAttack, $01
00099D93 E10F                       	smpsAlterNote       $0F
00099D95 E701                       	dc.b	smpsNoAttack, $01
00099D97 E109                       	smpsAlterNote       $09
00099D99 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099D9D E10F                       	smpsAlterNote       $0F
00099D9F C60D                       	dc.b	nA5, $0D
00099DA1 E109                       	smpsAlterNote       $09
00099DA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099DA7 E10C                       	smpsAlterNote       $0C
00099DA9 E701                       	dc.b	smpsNoAttack, $01
00099DAB E112                       	smpsAlterNote       $12
00099DAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099DB1 E10C                       	smpsAlterNote       $0C
00099DB3 E701                       	dc.b	smpsNoAttack, $01
00099DB5 E109                       	smpsAlterNote       $09
00099DB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099DBB E10F                       	smpsAlterNote       $0F
00099DBD E701                       	dc.b	smpsNoAttack, $01
00099DBF E113                       	smpsAlterNote       $13
00099DC1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099DC7 E10D                       	smpsAlterNote       $0D
00099DC9 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00099DD1 E10C                       	smpsAlterNote       $0C
00099DD3 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00099DD9 E6FF                       	smpsAlterVol        $FF
00099DDB E10B                       	smpsAlterNote       $0B
00099DDD BF03 8001                  	dc.b	nD5, $03, nRst, $01
00099DE1 E10C                       	smpsAlterNote       $0C
00099DE3 C103                       	dc.b	nE5, $03
00099DE5 E10D                       	smpsAlterNote       $0D
00099DE7 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00099DF1 E10B                       	smpsAlterNote       $0B
00099DF3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00099DF7 E107                       	smpsAlterNote       $07
00099DF9 E701                       	dc.b	smpsNoAttack, $01
00099DFB E104                       	smpsAlterNote       $04
00099DFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E01 E10A                       	smpsAlterNote       $0A
00099E03 E701                       	dc.b	smpsNoAttack, $01
00099E05 E10D                       	smpsAlterNote       $0D
00099E07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E0B E107                       	smpsAlterNote       $07
00099E0D E701                       	dc.b	smpsNoAttack, $01
00099E0F E104                       	smpsAlterNote       $04
00099E11 8001                       	dc.b	nRst, $01
00099E13 E110                       	smpsAlterNote       $10
00099E15 C703                       	dc.b	nBb5, $03
00099E17 E10F                       	smpsAlterNote       $0F
00099E19 C603 8001                  	dc.b	nA5, $03, nRst, $01
00099E1D E10D                       	smpsAlterNote       $0D
00099E1F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00099E23 E10C                       	smpsAlterNote       $0C
00099E25 E701                       	dc.b	smpsNoAttack, $01
00099E27 E108                       	smpsAlterNote       $08
00099E29 E701                       	dc.b	smpsNoAttack, $01
00099E2B E109                       	smpsAlterNote       $09
00099E2D E701                       	dc.b	smpsNoAttack, $01
00099E2F E10F                       	smpsAlterNote       $0F
00099E31 E701                       	dc.b	smpsNoAttack, $01
00099E33 E113                       	smpsAlterNote       $13
00099E35 E701                       	dc.b	smpsNoAttack, $01
00099E37 E10F                       	smpsAlterNote       $0F
00099E39 E701                       	dc.b	smpsNoAttack, $01
00099E3B E10C                       	smpsAlterNote       $0C
00099E3D E701                       	dc.b	smpsNoAttack, $01
00099E3F E108                       	smpsAlterNote       $08
00099E41 E701                       	dc.b	smpsNoAttack, $01
00099E43 E10C                       	smpsAlterNote       $0C
00099E45 E701                       	dc.b	smpsNoAttack, $01
00099E47 E112                       	smpsAlterNote       $12
00099E49 E701                       	dc.b	smpsNoAttack, $01
00099E4B E113                       	smpsAlterNote       $13
00099E4D E701                       	dc.b	smpsNoAttack, $01
00099E4F E10F                       	smpsAlterNote       $0F
00099E51 E701                       	dc.b	smpsNoAttack, $01
00099E53 E109                       	smpsAlterNote       $09
00099E55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E59 E10C                       	smpsAlterNote       $0C
00099E5B E701                       	dc.b	smpsNoAttack, $01
00099E5D E112                       	smpsAlterNote       $12
00099E5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E63 E10C                       	smpsAlterNote       $0C
00099E65 E701                       	dc.b	smpsNoAttack, $01
00099E67 E109                       	smpsAlterNote       $09
00099E69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E6D E10F                       	smpsAlterNote       $0F
00099E6F E701                       	dc.b	smpsNoAttack, $01
00099E71 E113                       	smpsAlterNote       $13
00099E73 E701                       	dc.b	smpsNoAttack, $01
00099E75 E112                       	smpsAlterNote       $12
00099E77 E701                       	dc.b	smpsNoAttack, $01
00099E79 E10C                       	smpsAlterNote       $0C
00099E7B E701                       	dc.b	smpsNoAttack, $01
00099E7D E108                       	smpsAlterNote       $08
00099E7F E701                       	dc.b	smpsNoAttack, $01
00099E81 E10C                       	smpsAlterNote       $0C
00099E83 E701                       	dc.b	smpsNoAttack, $01
00099E85 E10F                       	smpsAlterNote       $0F
00099E87 E701                       	dc.b	smpsNoAttack, $01
00099E89 E113                       	smpsAlterNote       $13
00099E8B E701                       	dc.b	smpsNoAttack, $01
00099E8D E10F                       	smpsAlterNote       $0F
00099E8F BA03 8001                  	dc.b	nA4, $03, nRst, $01
00099E93 E110                       	smpsAlterNote       $10
00099E95 BB03                       	dc.b	nBb4, $03
00099E97 E10F                       	smpsAlterNote       $0F
00099E99 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00099E9D E10B                       	smpsAlterNote       $0B
00099E9F BF03                       	dc.b	nD5, $03
00099EA1 E10C                       	smpsAlterNote       $0C
00099EA3 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099EA7 E10D                       	smpsAlterNote       $0D
00099EA9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099EB3 E10B                       	smpsAlterNote       $0B
00099EB5 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00099EC1 E110                       	smpsAlterNote       $10
00099EC3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00099EC7 E10F                       	smpsAlterNote       $0F
00099EC9 C604                       	dc.b	nA5, $04
00099ECB E10D                       	smpsAlterNote       $0D
00099ECD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00099ED3 E109                       	smpsAlterNote       $09
00099ED5 E701                       	dc.b	smpsNoAttack, $01
00099ED7 E108                       	smpsAlterNote       $08
00099ED9 E701                       	dc.b	smpsNoAttack, $01
00099EDB E10C                       	smpsAlterNote       $0C
00099EDD E701                       	dc.b	smpsNoAttack, $01
00099EDF E112                       	smpsAlterNote       $12
00099EE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EE5 E10F                       	smpsAlterNote       $0F
00099EE7 E701                       	dc.b	smpsNoAttack, $01
00099EE9 E109                       	smpsAlterNote       $09
00099EEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EEF E10F                       	smpsAlterNote       $0F
00099EF1 E701                       	dc.b	smpsNoAttack, $01
00099EF3 E112                       	smpsAlterNote       $12
00099EF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EF9 E10C                       	smpsAlterNote       $0C
00099EFB E701                       	dc.b	smpsNoAttack, $01
00099EFD E108                       	smpsAlterNote       $08
00099EFF E701                       	dc.b	smpsNoAttack, $01
00099F01 E109                       	smpsAlterNote       $09
00099F03 E701                       	dc.b	smpsNoAttack, $01
00099F05 E10F                       	smpsAlterNote       $0F
00099F07 E701                       	dc.b	smpsNoAttack, $01
00099F09 E113                       	smpsAlterNote       $13
00099F0B E701                       	dc.b	smpsNoAttack, $01
00099F0D E10F                       	smpsAlterNote       $0F
00099F0F E701                       	dc.b	smpsNoAttack, $01
00099F11 E10C                       	smpsAlterNote       $0C
00099F13 E701                       	dc.b	smpsNoAttack, $01
00099F15 E108                       	smpsAlterNote       $08
00099F17 E701                       	dc.b	smpsNoAttack, $01
00099F19 E10C                       	smpsAlterNote       $0C
00099F1B E701                       	dc.b	smpsNoAttack, $01
00099F1D E112                       	smpsAlterNote       $12
00099F1F E701                       	dc.b	smpsNoAttack, $01
00099F21 E113                       	smpsAlterNote       $13
00099F23 E701                       	dc.b	smpsNoAttack, $01
00099F25 E10F                       	smpsAlterNote       $0F
00099F27 E701                       	dc.b	smpsNoAttack, $01
00099F29 E109                       	smpsAlterNote       $09
00099F2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F2F E10C                       	smpsAlterNote       $0C
00099F31 E701                       	dc.b	smpsNoAttack, $01
00099F33 E112                       	smpsAlterNote       $12
00099F35 E701                       	dc.b	smpsNoAttack, $01
00099F37 E113                       	smpsAlterNote       $13
00099F39 8001                       	dc.b	nRst, $01
00099F3B E10F                       	smpsAlterNote       $0F
00099F3D C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00099F49 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00099F51 E10D                       	smpsAlterNote       $0D
00099F53 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00099F59 E10B                       	smpsAlterNote       $0B
00099F5B BF0D                       	dc.b	nD5, $0D
00099F5D E108                       	smpsAlterNote       $08
00099F5F E701                       	dc.b	smpsNoAttack, $01
00099F61 E104                       	smpsAlterNote       $04
00099F63 E701                       	dc.b	smpsNoAttack, $01
00099F65 E105                       	smpsAlterNote       $05
00099F67 E701                       	dc.b	smpsNoAttack, $01
00099F69 E10B                       	smpsAlterNote       $0B
00099F6B E701                       	dc.b	smpsNoAttack, $01
00099F6D E10F                       	smpsAlterNote       $0F
00099F6F E701                       	dc.b	smpsNoAttack, $01
00099F71 E10B                       	smpsAlterNote       $0B
00099F73 E701                       	dc.b	smpsNoAttack, $01
00099F75 E108                       	smpsAlterNote       $08
00099F77 E701                       	dc.b	smpsNoAttack, $01
00099F79 E104                       	smpsAlterNote       $04
00099F7B E701                       	dc.b	smpsNoAttack, $01
00099F7D E108                       	smpsAlterNote       $08
00099F7F E701                       	dc.b	smpsNoAttack, $01
00099F81 E10E                       	smpsAlterNote       $0E
00099F83 E701                       	dc.b	smpsNoAttack, $01
00099F85 E10F                       	smpsAlterNote       $0F
00099F87 E701                       	dc.b	smpsNoAttack, $01
00099F89 E10C                       	smpsAlterNote       $0C
00099F8B C101                       	dc.b	nE5, $01
00099F8D E10D                       	smpsAlterNote       $0D
00099F8F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00099F97 E10F                       	smpsAlterNote       $0F
00099F99 C607                       	dc.b	nA5, $07
00099F9B E10C                       	smpsAlterNote       $0C
00099F9D CD07                       	dc.b	nE6, $07
00099F9F E10D                       	smpsAlterNote       $0D
00099FA1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00099FA5 E10C                       	smpsAlterNote       $0C
00099FA7 CD03                       	dc.b	nE6, $03
00099FA9 E10A                       	smpsAlterNote       $0A
00099FAB C903 8001                  	dc.b	nC6, $03, nRst, $01
00099FAF E10D                       	smpsAlterNote       $0D
00099FB1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00099FB7 E10A                       	smpsAlterNote       $0A
00099FB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099FBD E110                       	smpsAlterNote       $10
00099FBF E701                       	dc.b	smpsNoAttack, $01
00099FC1 E114                       	smpsAlterNote       $14
00099FC3 E701                       	dc.b	smpsNoAttack, $01
00099FC5 E113                       	smpsAlterNote       $13
00099FC7 E701                       	dc.b	smpsNoAttack, $01
00099FC9 E10D                       	smpsAlterNote       $0D
00099FCB E701                       	dc.b	smpsNoAttack, $01
00099FCD E109                       	smpsAlterNote       $09
00099FCF E701                       	dc.b	smpsNoAttack, $01
00099FD1 E10D                       	smpsAlterNote       $0D
00099FD3 E701                       	dc.b	smpsNoAttack, $01
00099FD5 E110                       	smpsAlterNote       $10
00099FD7 E701                       	dc.b	smpsNoAttack, $01
00099FD9 E114                       	smpsAlterNote       $14
00099FDB E701                       	dc.b	smpsNoAttack, $01
00099FDD E10F                       	smpsAlterNote       $0F
00099FDF C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00099FE3 E10C                       	smpsAlterNote       $0C
00099FE5 E701                       	dc.b	smpsNoAttack, $01
00099FE7 E108                       	smpsAlterNote       $08
00099FE9 E701                       	dc.b	smpsNoAttack, $01
00099FEB E10C                       	smpsAlterNote       $0C
00099FED E701                       	dc.b	smpsNoAttack, $01
00099FEF E10F                       	smpsAlterNote       $0F
00099FF1 E701                       	dc.b	smpsNoAttack, $01
00099FF3 E113                       	smpsAlterNote       $13
00099FF5 E701                       	dc.b	smpsNoAttack, $01
00099FF7 E10F                       	smpsAlterNote       $0F
00099FF9 E701                       	dc.b	smpsNoAttack, $01
00099FFB E109                       	smpsAlterNote       $09
00099FFD E701                       	dc.b	smpsNoAttack, $01
00099FFF E108                       	smpsAlterNote       $08
0009A001 E701                       	dc.b	smpsNoAttack, $01
0009A003 E10C                       	smpsAlterNote       $0C
0009A005 E701                       	dc.b	smpsNoAttack, $01
0009A007 E112                       	smpsAlterNote       $12
0009A009 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A00D E10F                       	smpsAlterNote       $0F
0009A00F E701                       	dc.b	smpsNoAttack, $01
0009A011 E109                       	smpsAlterNote       $09
0009A013 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A017 E10F                       	smpsAlterNote       $0F
0009A019 E701                       	dc.b	smpsNoAttack, $01
0009A01B E112                       	smpsAlterNote       $12
0009A01D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A021 E10C                       	smpsAlterNote       $0C
0009A023 E701                       	dc.b	smpsNoAttack, $01
0009A025 E108                       	smpsAlterNote       $08
0009A027 E701                       	dc.b	smpsNoAttack, $01
0009A029 E109                       	smpsAlterNote       $09
0009A02B E701                       	dc.b	smpsNoAttack, $01
0009A02D E10F                       	smpsAlterNote       $0F
0009A02F E701                       	dc.b	smpsNoAttack, $01
0009A031 E113                       	smpsAlterNote       $13
0009A033 E701                       	dc.b	smpsNoAttack, $01
0009A035 E10F                       	smpsAlterNote       $0F
0009A037 E701                       	dc.b	smpsNoAttack, $01
0009A039 E10C                       	smpsAlterNote       $0C
0009A03B E701                       	dc.b	smpsNoAttack, $01
0009A03D E108                       	smpsAlterNote       $08
0009A03F E701                       	dc.b	smpsNoAttack, $01
0009A041 E10C                       	smpsAlterNote       $0C
0009A043 E701                       	dc.b	smpsNoAttack, $01
0009A045 E112                       	smpsAlterNote       $12
0009A047 E701                       	dc.b	smpsNoAttack, $01
0009A049 E113                       	smpsAlterNote       $13
0009A04B E701                       	dc.b	smpsNoAttack, $01
0009A04D E10F                       	smpsAlterNote       $0F
0009A04F E701                       	dc.b	smpsNoAttack, $01
0009A051 E109                       	smpsAlterNote       $09
0009A053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A057 E10C                       	smpsAlterNote       $0C
0009A059 E701                       	dc.b	smpsNoAttack, $01
0009A05B E112                       	smpsAlterNote       $12
0009A05D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A061 E10C                       	smpsAlterNote       $0C
0009A063 E701                       	dc.b	smpsNoAttack, $01
0009A065 E109                       	smpsAlterNote       $09
0009A067 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A06B E10F                       	smpsAlterNote       $0F
0009A06D E701                       	dc.b	smpsNoAttack, $01
0009A06F E113                       	smpsAlterNote       $13
0009A071 E701                       	dc.b	smpsNoAttack, $01
0009A073 E112                       	smpsAlterNote       $12
0009A075 E701                       	dc.b	smpsNoAttack, $01
0009A077 E10C                       	smpsAlterNote       $0C
0009A079 E701                       	dc.b	smpsNoAttack, $01
0009A07B E109                       	smpsAlterNote       $09
0009A07D 8001                       	dc.b	nRst, $01
0009A07F E10F                       	smpsAlterNote       $0F
0009A081 C60D                       	dc.b	nA5, $0D
0009A083 E10C                       	smpsAlterNote       $0C
0009A085 E701                       	dc.b	smpsNoAttack, $01
0009A087 E108                       	smpsAlterNote       $08
0009A089 E701                       	dc.b	smpsNoAttack, $01
0009A08B E10C                       	smpsAlterNote       $0C
0009A08D E701                       	dc.b	smpsNoAttack, $01
0009A08F E112                       	smpsAlterNote       $12
0009A091 E701                       	dc.b	smpsNoAttack, $01
0009A093 E113                       	smpsAlterNote       $13
0009A095 E701                       	dc.b	smpsNoAttack, $01
0009A097 E10F                       	smpsAlterNote       $0F
0009A099 E701                       	dc.b	smpsNoAttack, $01
0009A09B E109                       	smpsAlterNote       $09
0009A09D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0A1 E10C                       	smpsAlterNote       $0C
0009A0A3 E701                       	dc.b	smpsNoAttack, $01
0009A0A5 E112                       	smpsAlterNote       $12
0009A0A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0AB E10C                       	smpsAlterNote       $0C
0009A0AD E701                       	dc.b	smpsNoAttack, $01
0009A0AF E109                       	smpsAlterNote       $09
0009A0B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0B5 E10F                       	smpsAlterNote       $0F
0009A0B7 E701                       	dc.b	smpsNoAttack, $01
0009A0B9 E113                       	smpsAlterNote       $13
0009A0BB E701                       	dc.b	smpsNoAttack, $01
0009A0BD E112                       	smpsAlterNote       $12
0009A0BF E701                       	dc.b	smpsNoAttack, $01
0009A0C1 E10C                       	smpsAlterNote       $0C
0009A0C3 E701                       	dc.b	smpsNoAttack, $01
0009A0C5 E108                       	smpsAlterNote       $08
0009A0C7 E701                       	dc.b	smpsNoAttack, $01
0009A0C9 E10C                       	smpsAlterNote       $0C
0009A0CB E701                       	dc.b	smpsNoAttack, $01
0009A0CD E10F                       	smpsAlterNote       $0F
0009A0CF E701                       	dc.b	smpsNoAttack, $01
0009A0D1 E113                       	smpsAlterNote       $13
0009A0D3 E701                       	dc.b	smpsNoAttack, $01
0009A0D5 E10F                       	smpsAlterNote       $0F
0009A0D7 E701                       	dc.b	smpsNoAttack, $01
0009A0D9 E109                       	smpsAlterNote       $09
0009A0DB E701                       	dc.b	smpsNoAttack, $01
0009A0DD E108                       	smpsAlterNote       $08
0009A0DF E701                       	dc.b	smpsNoAttack, $01
0009A0E1 E10C                       	smpsAlterNote       $0C
0009A0E3 E701                       	dc.b	smpsNoAttack, $01
0009A0E5 E112                       	smpsAlterNote       $12
0009A0E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0EB E10F                       	smpsAlterNote       $0F
0009A0ED E701                       	dc.b	smpsNoAttack, $01
0009A0EF E109                       	smpsAlterNote       $09
0009A0F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0F5 E10F                       	smpsAlterNote       $0F
0009A0F7 E701                       	dc.b	smpsNoAttack, $01
0009A0F9 E112                       	smpsAlterNote       $12
0009A0FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0FF E10C                       	smpsAlterNote       $0C
0009A101 E701                       	dc.b	smpsNoAttack, $01
0009A103 E108                       	smpsAlterNote       $08
0009A105 E701                       	dc.b	smpsNoAttack, $01
0009A107 E10C                       	smpsAlterNote       $0C
0009A109 E701                       	dc.b	smpsNoAttack, $01
0009A10B E10F                       	smpsAlterNote       $0F
0009A10D E701                       	dc.b	smpsNoAttack, $01
0009A10F E113                       	smpsAlterNote       $13
0009A111 E701                       	dc.b	smpsNoAttack, $01
0009A113 E10F                       	smpsAlterNote       $0F
0009A115 E701                       	dc.b	smpsNoAttack, $01
0009A117 E109                       	smpsAlterNote       $09
0009A119 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A11F E601                       	smpsAlterVol        $01
0009A121 E10F                       	smpsAlterNote       $0F
0009A123 C604                       	dc.b	nA5, $04
0009A125 E10D                       	smpsAlterNote       $0D
0009A127 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009A12D E10B                       	smpsAlterNote       $0B
0009A12F BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0009A137 E10F                       	smpsAlterNote       $0F
0009A139 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009A13D E10D                       	smpsAlterNote       $0D
0009A13F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0009A145 E10C                       	smpsAlterNote       $0C
0009A147 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0009A14D E10A                       	smpsAlterNote       $0A
0009A14F C904 8001                  	dc.b	nC6, $04, nRst, $01
0009A153 E110                       	smpsAlterNote       $10
0009A155 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009A159 E10F                       	smpsAlterNote       $0F
0009A15B C604                       	dc.b	nA5, $04
0009A15D E10D                       	smpsAlterNote       $0D
0009A15F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009A16B E109                       	smpsAlterNote       $09
0009A16D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A171 E10F                       	smpsAlterNote       $0F
0009A173 E701                       	dc.b	smpsNoAttack, $01
0009A175 E112                       	smpsAlterNote       $12
0009A177 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A17B E10C                       	smpsAlterNote       $0C
0009A17D E701                       	dc.b	smpsNoAttack, $01
0009A17F E108                       	smpsAlterNote       $08
0009A181 E701                       	dc.b	smpsNoAttack, $01
0009A183 E10C                       	smpsAlterNote       $0C
0009A185 E701                       	dc.b	smpsNoAttack, $01
0009A187 E10F                       	smpsAlterNote       $0F
0009A189 E701                       	dc.b	smpsNoAttack, $01
0009A18B E113                       	smpsAlterNote       $13
0009A18D E701                       	dc.b	smpsNoAttack, $01
0009A18F E10D                       	smpsAlterNote       $0D
0009A191 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0009A197 E10C                       	smpsAlterNote       $0C
0009A199 C10D                       	dc.b	nE5, $0D
0009A19B E109                       	smpsAlterNote       $09
0009A19D E701                       	dc.b	smpsNoAttack, $01
0009A19F E105                       	smpsAlterNote       $05
0009A1A1 E701                       	dc.b	smpsNoAttack, $01
0009A1A3 E106                       	smpsAlterNote       $06
0009A1A5 E701                       	dc.b	smpsNoAttack, $01
0009A1A7 E10C                       	smpsAlterNote       $0C
0009A1A9 E701                       	dc.b	smpsNoAttack, $01
0009A1AB E110                       	smpsAlterNote       $10
0009A1AD E701                       	dc.b	smpsNoAttack, $01
0009A1AF E10C                       	smpsAlterNote       $0C
0009A1B1 E701                       	dc.b	smpsNoAttack, $01
0009A1B3 E109                       	smpsAlterNote       $09
0009A1B5 E701                       	dc.b	smpsNoAttack, $01
0009A1B7 E105                       	smpsAlterNote       $05
0009A1B9 E701                       	dc.b	smpsNoAttack, $01
0009A1BB E109                       	smpsAlterNote       $09
0009A1BD E701                       	dc.b	smpsNoAttack, $01
0009A1BF E10F                       	smpsAlterNote       $0F
0009A1C1 E701                       	dc.b	smpsNoAttack, $01
0009A1C3 E110                       	smpsAlterNote       $10
0009A1C5 E701                       	dc.b	smpsNoAttack, $01
0009A1C7 E10C                       	smpsAlterNote       $0C
0009A1C9 E701                       	dc.b	smpsNoAttack, $01
0009A1CB E106                       	smpsAlterNote       $06
0009A1CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1D1 E109                       	smpsAlterNote       $09
0009A1D3 E701                       	dc.b	smpsNoAttack, $01
0009A1D5 E10F                       	smpsAlterNote       $0F
0009A1D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1DB E109                       	smpsAlterNote       $09
0009A1DD E701                       	dc.b	smpsNoAttack, $01
0009A1DF E106                       	smpsAlterNote       $06
0009A1E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1E5 E10C                       	smpsAlterNote       $0C
0009A1E7 E701                       	dc.b	smpsNoAttack, $01
0009A1E9 E110                       	smpsAlterNote       $10
0009A1EB E701                       	dc.b	smpsNoAttack, $01
0009A1ED E10F                       	smpsAlterNote       $0F
0009A1EF E701                       	dc.b	smpsNoAttack, $01
0009A1F1 E109                       	smpsAlterNote       $09
0009A1F3 E701                       	dc.b	smpsNoAttack, $01
0009A1F5 E105                       	smpsAlterNote       $05
0009A1F7 E701                       	dc.b	smpsNoAttack, $01
0009A1F9 E109                       	smpsAlterNote       $09
0009A1FB E701                       	dc.b	smpsNoAttack, $01
0009A1FD E10C                       	smpsAlterNote       $0C
0009A1FF E701                       	dc.b	smpsNoAttack, $01
0009A201 E110                       	smpsAlterNote       $10
0009A203 E701                       	dc.b	smpsNoAttack, $01
0009A205 E10C                       	smpsAlterNote       $0C
0009A207 E701                       	dc.b	smpsNoAttack, $01
0009A209 E106                       	smpsAlterNote       $06
0009A20B E701                       	dc.b	smpsNoAttack, $01
0009A20D E105                       	smpsAlterNote       $05
0009A20F E701                       	dc.b	smpsNoAttack, $01
0009A211 E109                       	smpsAlterNote       $09
0009A213 E701                       	dc.b	smpsNoAttack, $01
0009A215 E10F                       	smpsAlterNote       $0F
0009A217 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A21B E10C                       	smpsAlterNote       $0C
0009A21D E701                       	dc.b	smpsNoAttack, $01
0009A21F E106                       	smpsAlterNote       $06
0009A221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A225 E10C                       	smpsAlterNote       $0C
0009A227 E701                       	dc.b	smpsNoAttack, $01
0009A229 E10F                       	smpsAlterNote       $0F
0009A22B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A22F E109                       	smpsAlterNote       $09
0009A231 E701                       	dc.b	smpsNoAttack, $01
0009A233 E105                       	smpsAlterNote       $05
0009A235 E701                       	dc.b	smpsNoAttack, $01
0009A237 E106                       	smpsAlterNote       $06
0009A239 E701                       	dc.b	smpsNoAttack, $01
0009A23B E10C                       	smpsAlterNote       $0C
0009A23D E701                       	dc.b	smpsNoAttack, $01
0009A23F E110                       	smpsAlterNote       $10
0009A241 E701                       	dc.b	smpsNoAttack, $01
0009A243 E10C                       	smpsAlterNote       $0C
0009A245 E701                       	dc.b	smpsNoAttack, $01
0009A247 E109                       	smpsAlterNote       $09
0009A249 E701                       	dc.b	smpsNoAttack, $01
0009A24B E105                       	smpsAlterNote       $05
0009A24D E701                       	dc.b	smpsNoAttack, $01
0009A24F E109                       	smpsAlterNote       $09
0009A251 E701                       	dc.b	smpsNoAttack, $01
0009A253 E10F                       	smpsAlterNote       $0F
0009A255 E701                       	dc.b	smpsNoAttack, $01
0009A257 E110                       	smpsAlterNote       $10
0009A259 E701                       	dc.b	smpsNoAttack, $01
0009A25B E10C                       	smpsAlterNote       $0C
0009A25D E701                       	dc.b	smpsNoAttack, $01
0009A25F E106                       	smpsAlterNote       $06
0009A261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A265 E109                       	smpsAlterNote       $09
0009A267 E701                       	dc.b	smpsNoAttack, $01
0009A269 E10F                       	smpsAlterNote       $0F
0009A26B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A26F E109                       	smpsAlterNote       $09
0009A271 E701                       	dc.b	smpsNoAttack, $01
0009A273 E106                       	smpsAlterNote       $06
0009A275 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A279 E10C                       	smpsAlterNote       $0C
0009A27B E701                       	dc.b	smpsNoAttack, $01
0009A27D E110                       	smpsAlterNote       $10
0009A27F E701                       	dc.b	smpsNoAttack, $01
0009A281 E10F                       	smpsAlterNote       $0F
0009A283 E701                       	dc.b	smpsNoAttack, $01
0009A285 E109                       	smpsAlterNote       $09
0009A287 E701                       	dc.b	smpsNoAttack, $01
0009A289 E105                       	smpsAlterNote       $05
0009A28B E701                       	dc.b	smpsNoAttack, $01
0009A28D E109                       	smpsAlterNote       $09
0009A28F E701                       	dc.b	smpsNoAttack, $01
0009A291 E10C                       	smpsAlterNote       $0C
0009A293 E701                       	dc.b	smpsNoAttack, $01
0009A295 E110                       	smpsAlterNote       $10
0009A297 E701                       	dc.b	smpsNoAttack, $01
0009A299 E10C                       	smpsAlterNote       $0C
0009A29B E701                       	dc.b	smpsNoAttack, $01
0009A29D E106                       	smpsAlterNote       $06
0009A29F E701                       	dc.b	smpsNoAttack, $01
0009A2A1 E105                       	smpsAlterNote       $05
0009A2A3 E701                       	dc.b	smpsNoAttack, $01
0009A2A5 E109                       	smpsAlterNote       $09
0009A2A7 E701                       	dc.b	smpsNoAttack, $01
0009A2A9 E10F                       	smpsAlterNote       $0F
0009A2AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2AF E109                       	smpsAlterNote       $09
0009A2B1 E701                       	dc.b	smpsNoAttack, $01
0009A2B3 E106                       	smpsAlterNote       $06
0009A2B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2B9 E10C                       	smpsAlterNote       $0C
0009A2BB E701                       	dc.b	smpsNoAttack, $01
0009A2BD E110                       	smpsAlterNote       $10
0009A2BF E701                       	dc.b	smpsNoAttack, $01
0009A2C1 E10F                       	smpsAlterNote       $0F
0009A2C3 E701                       	dc.b	smpsNoAttack, $01
0009A2C5 E109                       	smpsAlterNote       $09
0009A2C7 E701                       	dc.b	smpsNoAttack, $01
0009A2C9 E105                       	smpsAlterNote       $05
0009A2CB E701                       	dc.b	smpsNoAttack, $01
0009A2CD E109                       	smpsAlterNote       $09
0009A2CF E701                       	dc.b	smpsNoAttack, $01
0009A2D1 E10C                       	smpsAlterNote       $0C
0009A2D3 E701                       	dc.b	smpsNoAttack, $01
0009A2D5 E110                       	smpsAlterNote       $10
0009A2D7 E701                       	dc.b	smpsNoAttack, $01
0009A2D9 E10C                       	smpsAlterNote       $0C
0009A2DB E701                       	dc.b	smpsNoAttack, $01
0009A2DD E106                       	smpsAlterNote       $06
0009A2DF E701                       	dc.b	smpsNoAttack, $01
0009A2E1 E105                       	smpsAlterNote       $05
0009A2E3 E701                       	dc.b	smpsNoAttack, $01
0009A2E5 E109                       	smpsAlterNote       $09
0009A2E7 E701                       	dc.b	smpsNoAttack, $01
0009A2E9 E10F                       	smpsAlterNote       $0F
0009A2EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2EF E10C                       	smpsAlterNote       $0C
0009A2F1 E701                       	dc.b	smpsNoAttack, $01
0009A2F3 E106                       	smpsAlterNote       $06
0009A2F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2F9 E10C                       	smpsAlterNote       $0C
0009A2FB E701                       	dc.b	smpsNoAttack, $01
0009A2FD E10F                       	smpsAlterNote       $0F
0009A2FF E701                       	dc.b	smpsNoAttack, $01
0009A301 E110                       	smpsAlterNote       $10
0009A303 8001                       	dc.b	nRst, $01
0009A305 E10F                       	smpsAlterNote       $0F
0009A307 C604                       	dc.b	nA5, $04
0009A309 E10D                       	smpsAlterNote       $0D
0009A30B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009A311 E10B                       	smpsAlterNote       $0B
0009A313 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0009A319 E10F                       	smpsAlterNote       $0F
0009A31B C604 8001                  	dc.b	nA5, $04, nRst, $01
0009A31F E10D                       	smpsAlterNote       $0D
0009A321 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0009A327 E10C                       	smpsAlterNote       $0C
0009A329 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0009A32F E10A                       	smpsAlterNote       $0A
0009A331 C904                       	dc.b	nC6, $04
0009A333 E110                       	smpsAlterNote       $10
0009A335 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009A339 E10F                       	smpsAlterNote       $0F
0009A33B C604                       	dc.b	nA5, $04
0009A33D E10D                       	smpsAlterNote       $0D
0009A33F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009A34B E109                       	smpsAlterNote       $09
0009A34D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A351 E10F                       	smpsAlterNote       $0F
0009A353 E701                       	dc.b	smpsNoAttack, $01
0009A355 E112                       	smpsAlterNote       $12
0009A357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A35B E10C                       	smpsAlterNote       $0C
0009A35D E701                       	dc.b	smpsNoAttack, $01
0009A35F E108                       	smpsAlterNote       $08
0009A361 E701                       	dc.b	smpsNoAttack, $01
0009A363 E109                       	smpsAlterNote       $09
0009A365 E701                       	dc.b	smpsNoAttack, $01
0009A367 E10F                       	smpsAlterNote       $0F
0009A369 E701                       	dc.b	smpsNoAttack, $01
0009A36B E113                       	smpsAlterNote       $13
0009A36D E701                       	dc.b	smpsNoAttack, $01
0009A36F E10D                       	smpsAlterNote       $0D
0009A371 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0009A377 E10C                       	smpsAlterNote       $0C
0009A379 C10D                       	dc.b	nE5, $0D
0009A37B E109                       	smpsAlterNote       $09
0009A37D E701                       	dc.b	smpsNoAttack, $01
0009A37F E106                       	smpsAlterNote       $06
0009A381 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A385 E10C                       	smpsAlterNote       $0C
0009A387 E701                       	dc.b	smpsNoAttack, $01
0009A389 E110                       	smpsAlterNote       $10
0009A38B E701                       	dc.b	smpsNoAttack, $01
0009A38D E10F                       	smpsAlterNote       $0F
0009A38F E701                       	dc.b	smpsNoAttack, $01
0009A391 E109                       	smpsAlterNote       $09
0009A393 E701                       	dc.b	smpsNoAttack, $01
0009A395 E105                       	smpsAlterNote       $05
0009A397 E701                       	dc.b	smpsNoAttack, $01
0009A399 E109                       	smpsAlterNote       $09
0009A39B E701                       	dc.b	smpsNoAttack, $01
0009A39D E10C                       	smpsAlterNote       $0C
0009A39F E701                       	dc.b	smpsNoAttack, $01
0009A3A1 E110                       	smpsAlterNote       $10
0009A3A3 E701                       	dc.b	smpsNoAttack, $01
0009A3A5 E10C                       	smpsAlterNote       $0C
0009A3A7 E701                       	dc.b	smpsNoAttack, $01
0009A3A9 E106                       	smpsAlterNote       $06
0009A3AB E701                       	dc.b	smpsNoAttack, $01
0009A3AD E105                       	smpsAlterNote       $05
0009A3AF E701                       	dc.b	smpsNoAttack, $01
0009A3B1 E109                       	smpsAlterNote       $09
0009A3B3 E701                       	dc.b	smpsNoAttack, $01
0009A3B5 E10F                       	smpsAlterNote       $0F
0009A3B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3BB E10C                       	smpsAlterNote       $0C
0009A3BD E701                       	dc.b	smpsNoAttack, $01
0009A3BF E106                       	smpsAlterNote       $06
0009A3C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3C5 E10C                       	smpsAlterNote       $0C
0009A3C7 E701                       	dc.b	smpsNoAttack, $01
0009A3C9 E10F                       	smpsAlterNote       $0F
0009A3CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3CF E109                       	smpsAlterNote       $09
0009A3D1 E701                       	dc.b	smpsNoAttack, $01
0009A3D3 E105                       	smpsAlterNote       $05
0009A3D5 E701                       	dc.b	smpsNoAttack, $01
0009A3D7 E106                       	smpsAlterNote       $06
0009A3D9 E701                       	dc.b	smpsNoAttack, $01
0009A3DB E10C                       	smpsAlterNote       $0C
0009A3DD E701                       	dc.b	smpsNoAttack, $01
0009A3DF E110                       	smpsAlterNote       $10
0009A3E1 E701                       	dc.b	smpsNoAttack, $01
0009A3E3 E10C                       	smpsAlterNote       $0C
0009A3E5 E701                       	dc.b	smpsNoAttack, $01
0009A3E7 E109                       	smpsAlterNote       $09
0009A3E9 E701                       	dc.b	smpsNoAttack, $01
0009A3EB E105                       	smpsAlterNote       $05
0009A3ED E701                       	dc.b	smpsNoAttack, $01
0009A3EF E109                       	smpsAlterNote       $09
0009A3F1 E701                       	dc.b	smpsNoAttack, $01
0009A3F3 E10F                       	smpsAlterNote       $0F
0009A3F5 E701                       	dc.b	smpsNoAttack, $01
0009A3F7 E110                       	smpsAlterNote       $10
0009A3F9 E701                       	dc.b	smpsNoAttack, $01
0009A3FB E10C                       	smpsAlterNote       $0C
0009A3FD E701                       	dc.b	smpsNoAttack, $01
0009A3FF E106                       	smpsAlterNote       $06
0009A401 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A405 E109                       	smpsAlterNote       $09
0009A407 E701                       	dc.b	smpsNoAttack, $01
0009A409 E10F                       	smpsAlterNote       $0F
0009A40B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A40F E109                       	smpsAlterNote       $09
0009A411 E701                       	dc.b	smpsNoAttack, $01
0009A413 E106                       	smpsAlterNote       $06
0009A415 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A419 E10C                       	smpsAlterNote       $0C
0009A41B E701                       	dc.b	smpsNoAttack, $01
0009A41D E110                       	smpsAlterNote       $10
0009A41F E701                       	dc.b	smpsNoAttack, $01
0009A421 E10F                       	smpsAlterNote       $0F
0009A423 E701                       	dc.b	smpsNoAttack, $01
0009A425 E109                       	smpsAlterNote       $09
0009A427 E701                       	dc.b	smpsNoAttack, $01
0009A429 E105                       	smpsAlterNote       $05
0009A42B E701                       	dc.b	smpsNoAttack, $01
0009A42D E109                       	smpsAlterNote       $09
0009A42F E701                       	dc.b	smpsNoAttack, $01
0009A431 E10F                       	smpsAlterNote       $0F
0009A433 E701                       	dc.b	smpsNoAttack, $01
0009A435 E110                       	smpsAlterNote       $10
0009A437 E701                       	dc.b	smpsNoAttack, $01
0009A439 E10C                       	smpsAlterNote       $0C
0009A43B E701                       	dc.b	smpsNoAttack, $01
0009A43D E106                       	smpsAlterNote       $06
0009A43F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A443 E109                       	smpsAlterNote       $09
0009A445 E701                       	dc.b	smpsNoAttack, $01
0009A447 E10F                       	smpsAlterNote       $0F
0009A449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A44D E109                       	smpsAlterNote       $09
0009A44F E701                       	dc.b	smpsNoAttack, $01
0009A451 E106                       	smpsAlterNote       $06
0009A453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A457 E10C                       	smpsAlterNote       $0C
0009A459 E701                       	dc.b	smpsNoAttack, $01
0009A45B E110                       	smpsAlterNote       $10
0009A45D E701                       	dc.b	smpsNoAttack, $01
0009A45F E10F                       	smpsAlterNote       $0F
0009A461 E701                       	dc.b	smpsNoAttack, $01
0009A463 E109                       	smpsAlterNote       $09
0009A465 E701                       	dc.b	smpsNoAttack, $01
0009A467 E105                       	smpsAlterNote       $05
0009A469 E701                       	dc.b	smpsNoAttack, $01
0009A46B E109                       	smpsAlterNote       $09
0009A46D E701                       	dc.b	smpsNoAttack, $01
0009A46F E10C                       	smpsAlterNote       $0C
0009A471 E701                       	dc.b	smpsNoAttack, $01
0009A473 E110                       	smpsAlterNote       $10
0009A475 E701                       	dc.b	smpsNoAttack, $01
0009A477 E10C                       	smpsAlterNote       $0C
0009A479 E701                       	dc.b	smpsNoAttack, $01
0009A47B E106                       	smpsAlterNote       $06
0009A47D E701                       	dc.b	smpsNoAttack, $01
0009A47F E105                       	smpsAlterNote       $05
0009A481 E701                       	dc.b	smpsNoAttack, $01
0009A483 E109                       	smpsAlterNote       $09
0009A485 E701                       	dc.b	smpsNoAttack, $01
0009A487 E10F                       	smpsAlterNote       $0F
0009A489 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A48D E10C                       	smpsAlterNote       $0C
0009A48F E701                       	dc.b	smpsNoAttack, $01
0009A491 E106                       	smpsAlterNote       $06
0009A493 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A497 E10C                       	smpsAlterNote       $0C
0009A499 E701                       	dc.b	smpsNoAttack, $01
0009A49B E10F                       	smpsAlterNote       $0F
0009A49D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A4A1 E109                       	smpsAlterNote       $09
0009A4A3 E701                       	dc.b	smpsNoAttack, $01
0009A4A5 E105                       	smpsAlterNote       $05
0009A4A7 E701                       	dc.b	smpsNoAttack, $01
0009A4A9 E106                       	smpsAlterNote       $06
0009A4AB E701                       	dc.b	smpsNoAttack, $01
0009A4AD E10C                       	smpsAlterNote       $0C
0009A4AF E701                       	dc.b	smpsNoAttack, $01
0009A4B1 E110                       	smpsAlterNote       $10
0009A4B3 E701                       	dc.b	smpsNoAttack, $01
0009A4B5 E10C                       	smpsAlterNote       $0C
0009A4B7 E701                       	dc.b	smpsNoAttack, $01
0009A4B9 E109                       	smpsAlterNote       $09
0009A4BB E701                       	dc.b	smpsNoAttack, $01
0009A4BD E105                       	smpsAlterNote       $05
0009A4BF E701                       	dc.b	smpsNoAttack, $01
0009A4C1 E109                       	smpsAlterNote       $09
0009A4C3 E701                       	dc.b	smpsNoAttack, $01
0009A4C5 E10F                       	smpsAlterNote       $0F
0009A4C7 E701                       	dc.b	smpsNoAttack, $01
0009A4C9 E110                       	smpsAlterNote       $10
0009A4CB E701                       	dc.b	smpsNoAttack, $01
0009A4CD E10C                       	smpsAlterNote       $0C
0009A4CF E701                       	dc.b	smpsNoAttack, $01
0009A4D1 E106                       	smpsAlterNote       $06
0009A4D3 E701                       	dc.b	smpsNoAttack, $01
0009A4D5 E10B                       	smpsAlterNote       $0B
0009A4D7 BF02                       	dc.b	nD5, $02
0009A4D9 E10C                       	smpsAlterNote       $0C
0009A4DB C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0009A4E1 E109                       	smpsAlterNote       $09
0009A4E3 E701                       	dc.b	smpsNoAttack, $01
0009A4E5 E105                       	smpsAlterNote       $05
0009A4E7 E701                       	dc.b	smpsNoAttack, $01
0009A4E9 E109                       	smpsAlterNote       $09
0009A4EB E701                       	dc.b	smpsNoAttack, $01
0009A4ED E10F                       	smpsAlterNote       $0F
0009A4EF E701                       	dc.b	smpsNoAttack, $01
0009A4F1 E110                       	smpsAlterNote       $10
0009A4F3 E701                       	dc.b	smpsNoAttack, $01
0009A4F5 E10C                       	smpsAlterNote       $0C
0009A4F7 E701                       	dc.b	smpsNoAttack, $01
0009A4F9 E106                       	smpsAlterNote       $06
0009A4FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A4FF E109                       	smpsAlterNote       $09
0009A501 E701                       	dc.b	smpsNoAttack, $01
0009A503 E10F                       	smpsAlterNote       $0F
0009A505 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A509 E109                       	smpsAlterNote       $09
0009A50B E701                       	dc.b	smpsNoAttack, $01
0009A50D E106                       	smpsAlterNote       $06
0009A50F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A513 E10C                       	smpsAlterNote       $0C
0009A515 E701                       	dc.b	smpsNoAttack, $01
0009A517 E110                       	smpsAlterNote       $10
0009A519 E701                       	dc.b	smpsNoAttack, $01
0009A51B E10F                       	smpsAlterNote       $0F
0009A51D E701                       	dc.b	smpsNoAttack, $01
0009A51F E109                       	smpsAlterNote       $09
0009A521 E701                       	dc.b	smpsNoAttack, $01
0009A523 E105                       	smpsAlterNote       $05
0009A525 E701                       	dc.b	smpsNoAttack, $01
0009A527 E109                       	smpsAlterNote       $09
0009A529 E701                       	dc.b	smpsNoAttack, $01
0009A52B E10C                       	smpsAlterNote       $0C
0009A52D E701                       	dc.b	smpsNoAttack, $01
0009A52F E110                       	smpsAlterNote       $10
0009A531 E701                       	dc.b	smpsNoAttack, $01
0009A533 E10C                       	smpsAlterNote       $0C
0009A535 E701                       	dc.b	smpsNoAttack, $01
0009A537 E106                       	smpsAlterNote       $06
0009A539 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A53D E10D                       	smpsAlterNote       $0D
0009A53F C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0009A547 E10C                       	smpsAlterNote       $0C
0009A549 C10D                       	dc.b	nE5, $0D
0009A54B E106                       	smpsAlterNote       $06
0009A54D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A551 E109                       	smpsAlterNote       $09
0009A553 E701                       	dc.b	smpsNoAttack, $01
0009A555 E10F                       	smpsAlterNote       $0F
0009A557 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A55B E109                       	smpsAlterNote       $09
0009A55D E701                       	dc.b	smpsNoAttack, $01
0009A55F E106                       	smpsAlterNote       $06
0009A561 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A565 E10C                       	smpsAlterNote       $0C
0009A567 E701                       	dc.b	smpsNoAttack, $01
0009A569 E110                       	smpsAlterNote       $10
0009A56B E701                       	dc.b	smpsNoAttack, $01
0009A56D E10F                       	smpsAlterNote       $0F
0009A56F E701                       	dc.b	smpsNoAttack, $01
0009A571 E109                       	smpsAlterNote       $09
0009A573 E701                       	dc.b	smpsNoAttack, $01
0009A575 E105                       	smpsAlterNote       $05
0009A577 E701                       	dc.b	smpsNoAttack, $01
0009A579 E106                       	smpsAlterNote       $06
0009A57B 800F                       	dc.b	nRst, $0F
0009A57F E6FF                       	smpsAlterVol        $FF
0009A581 E10F                       	smpsAlterNote       $0F
0009A583 BA01                       	dc.b	nA4, $01
0009A585 E110                       	smpsAlterNote       $10
0009A587 BB02                       	dc.b	nBb4, $02
0009A589 E10F                       	smpsAlterNote       $0F
0009A58B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0009A591 E10B                       	smpsAlterNote       $0B
0009A593 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009A597 E10C                       	smpsAlterNote       $0C
0009A599 C103                       	dc.b	nE5, $03
0009A59B E10D                       	smpsAlterNote       $0D
0009A59D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0009A5A7 E10B                       	smpsAlterNote       $0B
0009A5A9 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0009A5AD E104                       	smpsAlterNote       $04
0009A5AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5B3 E10A                       	smpsAlterNote       $0A
0009A5B5 E701                       	dc.b	smpsNoAttack, $01
0009A5B7 E10D                       	smpsAlterNote       $0D
0009A5B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5BD E107                       	smpsAlterNote       $07
0009A5BF E701                       	dc.b	smpsNoAttack, $01
0009A5C1 E104                       	smpsAlterNote       $04
0009A5C3 8001                       	dc.b	nRst, $01
0009A5C5 E110                       	smpsAlterNote       $10
0009A5C7 C703                       	dc.b	nBb5, $03
0009A5C9 E10F                       	smpsAlterNote       $0F
0009A5CB C603 8001                  	dc.b	nA5, $03, nRst, $01
0009A5CF E10D                       	smpsAlterNote       $0D
0009A5D1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0009A5D5 E10C                       	smpsAlterNote       $0C
0009A5D7 E701                       	dc.b	smpsNoAttack, $01
0009A5D9 E108                       	smpsAlterNote       $08
0009A5DB E701                       	dc.b	smpsNoAttack, $01
0009A5DD E109                       	smpsAlterNote       $09
0009A5DF E701                       	dc.b	smpsNoAttack, $01
0009A5E1 E10F                       	smpsAlterNote       $0F
0009A5E3 E701                       	dc.b	smpsNoAttack, $01
0009A5E5 E113                       	smpsAlterNote       $13
0009A5E7 E701                       	dc.b	smpsNoAttack, $01
0009A5E9 E10F                       	smpsAlterNote       $0F
0009A5EB E701                       	dc.b	smpsNoAttack, $01
0009A5ED E10C                       	smpsAlterNote       $0C
0009A5EF E701                       	dc.b	smpsNoAttack, $01
0009A5F1 E108                       	smpsAlterNote       $08
0009A5F3 E701                       	dc.b	smpsNoAttack, $01
0009A5F5 E10C                       	smpsAlterNote       $0C
0009A5F7 E701                       	dc.b	smpsNoAttack, $01
0009A5F9 E112                       	smpsAlterNote       $12
0009A5FB E701                       	dc.b	smpsNoAttack, $01
0009A5FD E113                       	smpsAlterNote       $13
0009A5FF E701                       	dc.b	smpsNoAttack, $01
0009A601 E10F                       	smpsAlterNote       $0F
0009A603 E701                       	dc.b	smpsNoAttack, $01
0009A605 E109                       	smpsAlterNote       $09
0009A607 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A60B E10C                       	smpsAlterNote       $0C
0009A60D E701                       	dc.b	smpsNoAttack, $01
0009A60F E112                       	smpsAlterNote       $12
0009A611 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A615 E10C                       	smpsAlterNote       $0C
0009A617 E701                       	dc.b	smpsNoAttack, $01
0009A619 E109                       	smpsAlterNote       $09
0009A61B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A61F E10F                       	smpsAlterNote       $0F
0009A621 E701                       	dc.b	smpsNoAttack, $01
0009A623 E113                       	smpsAlterNote       $13
0009A625 E701                       	dc.b	smpsNoAttack, $01
0009A627 E112                       	smpsAlterNote       $12
0009A629 E701                       	dc.b	smpsNoAttack, $01
0009A62B E10C                       	smpsAlterNote       $0C
0009A62D E701                       	dc.b	smpsNoAttack, $01
0009A62F E108                       	smpsAlterNote       $08
0009A631 E701                       	dc.b	smpsNoAttack, $01
0009A633 E10C                       	smpsAlterNote       $0C
0009A635 E701                       	dc.b	smpsNoAttack, $01
0009A637 E10F                       	smpsAlterNote       $0F
0009A639 E701                       	dc.b	smpsNoAttack, $01
0009A63B E113                       	smpsAlterNote       $13
0009A63D E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0009A641 E10B                       	smpsAlterNote       $0B
0009A643 BF03                       	dc.b	nD5, $03
0009A645 E10C                       	smpsAlterNote       $0C
0009A647 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009A64B E10D                       	smpsAlterNote       $0D
0009A64D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0009A657 E10B                       	smpsAlterNote       $0B
0009A659 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0009A665 E110                       	smpsAlterNote       $10
0009A667 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009A66B E10F                       	smpsAlterNote       $0F
0009A66D C604                       	dc.b	nA5, $04
0009A66F E10D                       	smpsAlterNote       $0D
0009A671 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0009A677 E109                       	smpsAlterNote       $09
0009A679 E701                       	dc.b	smpsNoAttack, $01
0009A67B E108                       	smpsAlterNote       $08
0009A67D E701                       	dc.b	smpsNoAttack, $01
0009A67F E10C                       	smpsAlterNote       $0C
0009A681 E701                       	dc.b	smpsNoAttack, $01
0009A683 E112                       	smpsAlterNote       $12
0009A685 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A689 E10F                       	smpsAlterNote       $0F
0009A68B E701                       	dc.b	smpsNoAttack, $01
0009A68D E109                       	smpsAlterNote       $09
0009A68F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A693 E10F                       	smpsAlterNote       $0F
0009A695 E701                       	dc.b	smpsNoAttack, $01
0009A697 E112                       	smpsAlterNote       $12
0009A699 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A69D E10C                       	smpsAlterNote       $0C
0009A69F E701                       	dc.b	smpsNoAttack, $01
0009A6A1 E108                       	smpsAlterNote       $08
0009A6A3 E701                       	dc.b	smpsNoAttack, $01
0009A6A5 E109                       	smpsAlterNote       $09
0009A6A7 E701                       	dc.b	smpsNoAttack, $01
0009A6A9 E10F                       	smpsAlterNote       $0F
0009A6AB E701                       	dc.b	smpsNoAttack, $01
0009A6AD E113                       	smpsAlterNote       $13
0009A6AF E701                       	dc.b	smpsNoAttack, $01
0009A6B1 E10F                       	smpsAlterNote       $0F
0009A6B3 E701                       	dc.b	smpsNoAttack, $01
0009A6B5 E10C                       	smpsAlterNote       $0C
0009A6B7 E701                       	dc.b	smpsNoAttack, $01
0009A6B9 E108                       	smpsAlterNote       $08
0009A6BB E701                       	dc.b	smpsNoAttack, $01
0009A6BD E10C                       	smpsAlterNote       $0C
0009A6BF E701                       	dc.b	smpsNoAttack, $01
0009A6C1 E112                       	smpsAlterNote       $12
0009A6C3 E701                       	dc.b	smpsNoAttack, $01
0009A6C5 E113                       	smpsAlterNote       $13
0009A6C7 E701                       	dc.b	smpsNoAttack, $01
0009A6C9 E10F                       	smpsAlterNote       $0F
0009A6CB E701                       	dc.b	smpsNoAttack, $01
0009A6CD E109                       	smpsAlterNote       $09
0009A6CF E701                       	dc.b	smpsNoAttack, $01
0009A6D1 E10D                       	smpsAlterNote       $0D
0009A6D3 C402                       	dc.b	nG5, $02
0009A6D5 E10F                       	smpsAlterNote       $0F
0009A6D7 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0009A6E1 E10D                       	smpsAlterNote       $0D
0009A6E3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009A6E9 E10B                       	smpsAlterNote       $0B
0009A6EB BF0D                       	dc.b	nD5, $0D
0009A6ED E108                       	smpsAlterNote       $08
0009A6EF E701                       	dc.b	smpsNoAttack, $01
0009A6F1 E104                       	smpsAlterNote       $04
0009A6F3 E701                       	dc.b	smpsNoAttack, $01
0009A6F5 E105                       	smpsAlterNote       $05
0009A6F7 E701                       	dc.b	smpsNoAttack, $01
0009A6F9 E10B                       	smpsAlterNote       $0B
0009A6FB E701                       	dc.b	smpsNoAttack, $01
0009A6FD E10F                       	smpsAlterNote       $0F
0009A6FF E701                       	dc.b	smpsNoAttack, $01
0009A701 E10B                       	smpsAlterNote       $0B
0009A703 E701                       	dc.b	smpsNoAttack, $01
0009A705 E108                       	smpsAlterNote       $08
0009A707 E701                       	dc.b	smpsNoAttack, $01
0009A709 E104                       	smpsAlterNote       $04
0009A70B E701                       	dc.b	smpsNoAttack, $01
0009A70D E108                       	smpsAlterNote       $08
0009A70F E701                       	dc.b	smpsNoAttack, $01
0009A711 E10E                       	smpsAlterNote       $0E
0009A713 E701                       	dc.b	smpsNoAttack, $01
0009A715 E10F                       	smpsAlterNote       $0F
0009A717 E701                       	dc.b	smpsNoAttack, $01
0009A719 E10C                       	smpsAlterNote       $0C
0009A71B C101                       	dc.b	nE5, $01
0009A71D E10D                       	smpsAlterNote       $0D
0009A71F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0009A727 E10F                       	smpsAlterNote       $0F
0009A729 C607                       	dc.b	nA5, $07
0009A72B E10C                       	smpsAlterNote       $0C
0009A72D CD07                       	dc.b	nE6, $07
0009A72F E10D                       	smpsAlterNote       $0D
0009A731 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0009A735 E10C                       	smpsAlterNote       $0C
0009A737 CD03                       	dc.b	nE6, $03
0009A739 E10A                       	smpsAlterNote       $0A
0009A73B C903 8001                  	dc.b	nC6, $03, nRst, $01
0009A73F E10D                       	smpsAlterNote       $0D
0009A741 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0009A747 E10A                       	smpsAlterNote       $0A
0009A749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A74D E110                       	smpsAlterNote       $10
0009A74F E701                       	dc.b	smpsNoAttack, $01
0009A751 E114                       	smpsAlterNote       $14
0009A753 E701                       	dc.b	smpsNoAttack, $01
0009A755 E113                       	smpsAlterNote       $13
0009A757 E701                       	dc.b	smpsNoAttack, $01
0009A759 E10D                       	smpsAlterNote       $0D
0009A75B E701                       	dc.b	smpsNoAttack, $01
0009A75D E109                       	smpsAlterNote       $09
0009A75F E701                       	dc.b	smpsNoAttack, $01
0009A761 E10D                       	smpsAlterNote       $0D
0009A763 E701                       	dc.b	smpsNoAttack, $01
0009A765 E110                       	smpsAlterNote       $10
0009A767 E701                       	dc.b	smpsNoAttack, $01
0009A769 E114                       	smpsAlterNote       $14
0009A76B E701                       	dc.b	smpsNoAttack, $01
0009A76D E10F                       	smpsAlterNote       $0F
0009A76F C607                       	dc.b	nA5, $07
0009A771 E10D                       	smpsAlterNote       $0D
0009A773 C40D                       	dc.b	nG5, $0D
0009A775 E10A                       	smpsAlterNote       $0A
0009A777 E701                       	dc.b	smpsNoAttack, $01
0009A779 E106                       	smpsAlterNote       $06
0009A77B E701                       	dc.b	smpsNoAttack, $01
0009A77D E10A                       	smpsAlterNote       $0A
0009A77F E701                       	dc.b	smpsNoAttack, $01
0009A781 E10D                       	smpsAlterNote       $0D
0009A783 E701                       	dc.b	smpsNoAttack, $01
0009A785 E111                       	smpsAlterNote       $11
0009A787 E701                       	dc.b	smpsNoAttack, $01
0009A789 E10D                       	smpsAlterNote       $0D
0009A78B E701                       	dc.b	smpsNoAttack, $01
0009A78D E107                       	smpsAlterNote       $07
0009A78F E701                       	dc.b	smpsNoAttack, $01
0009A791 E106                       	smpsAlterNote       $06
0009A793 E701                       	dc.b	smpsNoAttack, $01
0009A795 E10A                       	smpsAlterNote       $0A
0009A797 E701                       	dc.b	smpsNoAttack, $01
0009A799 E110                       	smpsAlterNote       $10
0009A79B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A79F E10D                       	smpsAlterNote       $0D
0009A7A1 E701                       	dc.b	smpsNoAttack, $01
0009A7A3 E107                       	smpsAlterNote       $07
0009A7A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A7A9 E10F                       	smpsAlterNote       $0F
0009A7AB C60E                       	dc.b	nA5, $0E
0009A7AD E109                       	smpsAlterNote       $09
0009A7AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A7B3 E10F                       	smpsAlterNote       $0F
0009A7B5 E701                       	dc.b	smpsNoAttack, $01
0009A7B7 E112                       	smpsAlterNote       $12
0009A7B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A7BD E10C                       	smpsAlterNote       $0C
0009A7BF E701                       	dc.b	smpsNoAttack, $01
0009A7C1 E108                       	smpsAlterNote       $08
0009A7C3 E701                       	dc.b	smpsNoAttack, $01
0009A7C5 E109                       	smpsAlterNote       $09
0009A7C7 E701                       	dc.b	smpsNoAttack, $01
0009A7C9 E10F                       	smpsAlterNote       $0F
0009A7CB E701                       	dc.b	smpsNoAttack, $01
0009A7CD E113                       	smpsAlterNote       $13
0009A7CF E701                       	dc.b	smpsNoAttack, $01
0009A7D1 E10F                       	smpsAlterNote       $0F
0009A7D3 E701                       	dc.b	smpsNoAttack, $01
0009A7D5 E10C                       	smpsAlterNote       $0C
0009A7D7 E701                       	dc.b	smpsNoAttack, $01
0009A7D9 E108                       	smpsAlterNote       $08
0009A7DB E701                       	dc.b	smpsNoAttack, $01
0009A7DD E109                       	smpsAlterNote       $09
0009A7DF 8001                       	dc.b	nRst, $01
0009A7E1 E110                       	smpsAlterNote       $10
0009A7E3 C70D                       	dc.b	nBb5, $0D
0009A7E5 E10D                       	smpsAlterNote       $0D
0009A7E7 E701                       	dc.b	smpsNoAttack, $01
0009A7E9 E109                       	smpsAlterNote       $09
0009A7EB E701                       	dc.b	smpsNoAttack, $01
0009A7ED E10D                       	smpsAlterNote       $0D
0009A7EF E701                       	dc.b	smpsNoAttack, $01
0009A7F1 E113                       	smpsAlterNote       $13
0009A7F3 E701                       	dc.b	smpsNoAttack, $01
0009A7F5 E114                       	smpsAlterNote       $14
0009A7F7 E701                       	dc.b	smpsNoAttack, $01
0009A7F9 E110                       	smpsAlterNote       $10
0009A7FB E701                       	dc.b	smpsNoAttack, $01
0009A7FD E10A                       	smpsAlterNote       $0A
0009A7FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A803 E10D                       	smpsAlterNote       $0D
0009A805 E701                       	dc.b	smpsNoAttack, $01
0009A807 E113                       	smpsAlterNote       $13
0009A809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A80D E10D                       	smpsAlterNote       $0D
0009A80F E701                       	dc.b	smpsNoAttack, $01
0009A811 E10A                       	smpsAlterNote       $0A
0009A813 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0009A81D E10B                       	smpsAlterNote       $0B
0009A81F 8001                       	dc.b	nRst, $01
0009A821 E10C                       	smpsAlterNote       $0C
0009A823 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0009A827 E10B                       	smpsAlterNote       $0B
0009A829 CB0D                       	dc.b	nD6, $0D
0009A82B E105                       	smpsAlterNote       $05
0009A82D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A831 E108                       	smpsAlterNote       $08
0009A833 E701                       	dc.b	smpsNoAttack, $01
0009A835 E10E                       	smpsAlterNote       $0E
0009A837 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A83B E108                       	smpsAlterNote       $08
0009A83D E701                       	dc.b	smpsNoAttack, $01
0009A83F E105                       	smpsAlterNote       $05
0009A841 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A845 E10B                       	smpsAlterNote       $0B
0009A847 E701                       	dc.b	smpsNoAttack, $01
0009A849 E10F                       	smpsAlterNote       $0F
0009A84B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A84F E10C                       	smpsAlterNote       $0C
0009A851 CC0D                       	dc.b	nEb6, $0D
0009A853 E106                       	smpsAlterNote       $06
0009A855 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A859 E109                       	smpsAlterNote       $09
0009A85B E701                       	dc.b	smpsNoAttack, $01
0009A85D E10C                       	smpsAlterNote       $0C
0009A85F 8001                       	dc.b	nRst, $01
0009A861 E10A                       	smpsAlterNote       $0A
0009A863 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0009A86F CB0E                       	dc.b	nD6, $0E
0009A871 E105                       	smpsAlterNote       $05
0009A873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A877 E10B                       	smpsAlterNote       $0B
0009A879 E701                       	dc.b	smpsNoAttack, $01
0009A87B E10E                       	smpsAlterNote       $0E
0009A87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A881 E108                       	smpsAlterNote       $08
0009A883 E701                       	dc.b	smpsNoAttack, $01
0009A885 E104                       	smpsAlterNote       $04
0009A887 E701                       	dc.b	smpsNoAttack, $01
0009A889 E105                       	smpsAlterNote       $05
0009A88B E701                       	dc.b	smpsNoAttack, $01
0009A88D E10B                       	smpsAlterNote       $0B
0009A88F E701                       	dc.b	smpsNoAttack, $01
0009A891 E10F                       	smpsAlterNote       $0F
0009A893 E701                       	dc.b	smpsNoAttack, $01
0009A895 E10D                       	smpsAlterNote       $0D
0009A897 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0009A89B E10C                       	smpsAlterNote       $0C
0009A89D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0009A8A1 E10A                       	smpsAlterNote       $0A
0009A8A3 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0009A8AF CB0D                       	dc.b	nD6, $0D
0009A8B1 E108                       	smpsAlterNote       $08
0009A8B3 E701                       	dc.b	smpsNoAttack, $01
0009A8B5 E104                       	smpsAlterNote       $04
0009A8B7 E701                       	dc.b	smpsNoAttack, $01
0009A8B9 E105                       	smpsAlterNote       $05
0009A8BB E701                       	dc.b	smpsNoAttack, $01
0009A8BD E10B                       	smpsAlterNote       $0B
0009A8BF E701                       	dc.b	smpsNoAttack, $01
0009A8C1 E10F                       	smpsAlterNote       $0F
0009A8C3 E701                       	dc.b	smpsNoAttack, $01
0009A8C5 E10B                       	smpsAlterNote       $0B
0009A8C7 E701                       	dc.b	smpsNoAttack, $01
0009A8C9 E108                       	smpsAlterNote       $08
0009A8CB E701                       	dc.b	smpsNoAttack, $01
0009A8CD E104                       	smpsAlterNote       $04
0009A8CF E701                       	dc.b	smpsNoAttack, $01
0009A8D1 E108                       	smpsAlterNote       $08
0009A8D3 E701                       	dc.b	smpsNoAttack, $01
0009A8D5 E10E                       	smpsAlterNote       $0E
0009A8D7 E701                       	dc.b	smpsNoAttack, $01
0009A8D9 E10F                       	smpsAlterNote       $0F
0009A8DB E701                       	dc.b	smpsNoAttack, $01
0009A8DD E10C                       	smpsAlterNote       $0C
0009A8DF CC0D                       	dc.b	nEb6, $0D
0009A8E1 E109                       	smpsAlterNote       $09
0009A8E3 E701                       	dc.b	smpsNoAttack, $01
0009A8E5 E105                       	smpsAlterNote       $05
0009A8E7 E701                       	dc.b	smpsNoAttack, $01
0009A8E9 E106                       	smpsAlterNote       $06
0009A8EB E701                       	dc.b	smpsNoAttack, $01
0009A8ED E10C                       	smpsAlterNote       $0C
0009A8EF E701                       	dc.b	smpsNoAttack, $01
0009A8F1 E10A                       	smpsAlterNote       $0A
0009A8F3 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0009A8FF CB0D                       	dc.b	nD6, $0D
0009A901 E108                       	smpsAlterNote       $08
0009A903 E701                       	dc.b	smpsNoAttack, $01
0009A905 E104                       	smpsAlterNote       $04
0009A907 E701                       	dc.b	smpsNoAttack, $01
0009A909 E108                       	smpsAlterNote       $08
0009A90B E701                       	dc.b	smpsNoAttack, $01
0009A90D E10B                       	smpsAlterNote       $0B
0009A90F E701                       	dc.b	smpsNoAttack, $01
0009A911 E10F                       	smpsAlterNote       $0F
0009A913 E701                       	dc.b	smpsNoAttack, $01
0009A915 E10B                       	smpsAlterNote       $0B
0009A917 E701                       	dc.b	smpsNoAttack, $01
0009A919 E105                       	smpsAlterNote       $05
0009A91B E701                       	dc.b	smpsNoAttack, $01
0009A91D E104                       	smpsAlterNote       $04
0009A91F E701                       	dc.b	smpsNoAttack, $01
0009A921 E108                       	smpsAlterNote       $08
0009A923 E701                       	dc.b	smpsNoAttack, $01
0009A925 E10E                       	smpsAlterNote       $0E
0009A927 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A92B E10B                       	smpsAlterNote       $0B
0009A92D E701                       	dc.b	smpsNoAttack, $01
0009A92F E105                       	smpsAlterNote       $05
0009A931 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0009A939 03                         	dc.b	$03
0009A93A E601                       	smpsAlterVol        $01
0009A93C F6F1 D1                    	smpsJump            music84_Jump01
0009A93F                            
0009A93F                            ; FM5 Data
0009A93F                            music84_FM5:
0009A941 E080                       	smpsPan             panLeft, $00
0009A943 8003                       	dc.b	nRst, $03
0009A945 E10D                       	smpsAlterNote       $0D
0009A947 C203 8008                  	dc.b	nF5, $03, nRst, $08
0009A94B E10C                       	smpsAlterNote       $0C
0009A94D C103 800A                  	dc.b	nE5, $03, nRst, $0A
0009A951 E10F                       	smpsAlterNote       $0F
0009A953 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0009A959 E6FE                       	smpsAlterVol        $FE
0009A95B C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0009A961 E10D                       	smpsAlterNote       $0D
0009A963 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009A969 E10C                       	smpsAlterNote       $0C
0009A96B C102 8001                  	dc.b	nE5, $02, nRst, $01
0009A96F E10A                       	smpsAlterNote       $0A
0009A971 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0009A977 03                         	dc.b	$03
0009A978                            
0009A978                            music84_Jump00:
0009A978 8004                       	dc.b	nRst, $04
0009A97A E602                       	smpsAlterVol        $02
0009A97C E10D                       	smpsAlterNote       $0D
0009A97E B60D                       	dc.b	nF4, $0D
0009A980 E107                       	smpsAlterNote       $07
0009A982 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A986 E10A                       	smpsAlterNote       $0A
0009A988 E701                       	dc.b	smpsNoAttack, $01
0009A98A E110                       	smpsAlterNote       $10
0009A98C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A990 E10A                       	smpsAlterNote       $0A
0009A992 E701                       	dc.b	smpsNoAttack, $01
0009A994 E107                       	smpsAlterNote       $07
0009A996 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A99A E10D                       	smpsAlterNote       $0D
0009A99C E701                       	dc.b	smpsNoAttack, $01
0009A99E E111                       	smpsAlterNote       $11
0009A9A0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A9A4 E10D                       	smpsAlterNote       $0D
0009A9A6 B80D                       	dc.b	nG4, $0D
0009A9A8 E107                       	smpsAlterNote       $07
0009A9AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9AE E10A                       	smpsAlterNote       $0A
0009A9B0 E701                       	dc.b	smpsNoAttack, $01
0009A9B2 E110                       	smpsAlterNote       $10
0009A9B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9B8 E10A                       	smpsAlterNote       $0A
0009A9BA E701                       	dc.b	smpsNoAttack, $01
0009A9BC E107                       	smpsAlterNote       $07
0009A9BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9C2 E10D                       	smpsAlterNote       $0D
0009A9C4 E701                       	dc.b	smpsNoAttack, $01
0009A9C6 E111                       	smpsAlterNote       $11
0009A9C8 E701                       	dc.b	smpsNoAttack, $01
0009A9CA E110                       	smpsAlterNote       $10
0009A9CC E701                       	dc.b	smpsNoAttack, $01
0009A9CE E10A                       	smpsAlterNote       $0A
0009A9D0 E701                       	dc.b	smpsNoAttack, $01
0009A9D2 E106                       	smpsAlterNote       $06
0009A9D4 E701                       	dc.b	smpsNoAttack, $01
0009A9D6 E10A                       	smpsAlterNote       $0A
0009A9D8 E701                       	dc.b	smpsNoAttack, $01
0009A9DA E10D                       	smpsAlterNote       $0D
0009A9DC E701                       	dc.b	smpsNoAttack, $01
0009A9DE E111                       	smpsAlterNote       $11
0009A9E0 E701                       	dc.b	smpsNoAttack, $01
0009A9E2 E10D                       	smpsAlterNote       $0D
0009A9E4 E701                       	dc.b	smpsNoAttack, $01
0009A9E6 E10F                       	smpsAlterNote       $0F
0009A9E8 BA0E                       	dc.b	nA4, $0E
0009A9EA E109                       	smpsAlterNote       $09
0009A9EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9F0 E10F                       	smpsAlterNote       $0F
0009A9F2 E701                       	dc.b	smpsNoAttack, $01
0009A9F4 E112                       	smpsAlterNote       $12
0009A9F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9FA E10C                       	smpsAlterNote       $0C
0009A9FC E701                       	dc.b	smpsNoAttack, $01
0009A9FE E108                       	smpsAlterNote       $08
0009AA00 E701                       	dc.b	smpsNoAttack, $01
0009AA02 E109                       	smpsAlterNote       $09
0009AA04 E701                       	dc.b	smpsNoAttack, $01
0009AA06 E10F                       	smpsAlterNote       $0F
0009AA08 E701                       	dc.b	smpsNoAttack, $01
0009AA0A E113                       	smpsAlterNote       $13
0009AA0C E701                       	dc.b	smpsNoAttack, $01
0009AA0E E10F                       	smpsAlterNote       $0F
0009AA10 E701                       	dc.b	smpsNoAttack, $01
0009AA12 E109                       	smpsAlterNote       $09
0009AA14 E701                       	dc.b	smpsNoAttack, $01
0009AA16 E108                       	smpsAlterNote       $08
0009AA18 E701                       	dc.b	smpsNoAttack, $01
0009AA1A E10C                       	smpsAlterNote       $0C
0009AA1C E701                       	dc.b	smpsNoAttack, $01
0009AA1E E112                       	smpsAlterNote       $12
0009AA20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA24 E10F                       	smpsAlterNote       $0F
0009AA26 E701                       	dc.b	smpsNoAttack, $01
0009AA28 E109                       	smpsAlterNote       $09
0009AA2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA2E E10F                       	smpsAlterNote       $0F
0009AA30 E701                       	dc.b	smpsNoAttack, $01
0009AA32 E112                       	smpsAlterNote       $12
0009AA34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA38 E10C                       	smpsAlterNote       $0C
0009AA3A E701                       	dc.b	smpsNoAttack, $01
0009AA3C E108                       	smpsAlterNote       $08
0009AA3E E701                       	dc.b	smpsNoAttack, $01
0009AA40 E109                       	smpsAlterNote       $09
0009AA42 E701                       	dc.b	smpsNoAttack, $01
0009AA44 E10F                       	smpsAlterNote       $0F
0009AA46 E701                       	dc.b	smpsNoAttack, $01
0009AA48 E113                       	smpsAlterNote       $13
0009AA4A E701                       	dc.b	smpsNoAttack, $01
0009AA4C E10F                       	smpsAlterNote       $0F
0009AA4E E701                       	dc.b	smpsNoAttack, $01
0009AA50 E10C                       	smpsAlterNote       $0C
0009AA52 E701                       	dc.b	smpsNoAttack, $01
0009AA54 E108                       	smpsAlterNote       $08
0009AA56 E701                       	dc.b	smpsNoAttack, $01
0009AA58 E109                       	smpsAlterNote       $09
0009AA5A 8001                       	dc.b	nRst, $01
0009AA5C E10C                       	smpsAlterNote       $0C
0009AA5E B50A                       	dc.b	nE4, $0A
0009AA60 E10D                       	smpsAlterNote       $0D
0009AA62 B60D                       	dc.b	nF4, $0D
0009AA64 E10A                       	smpsAlterNote       $0A
0009AA66 E701                       	dc.b	smpsNoAttack, $01
0009AA68 E106                       	smpsAlterNote       $06
0009AA6A E701                       	dc.b	smpsNoAttack, $01
0009AA6C E107                       	smpsAlterNote       $07
0009AA6E E701                       	dc.b	smpsNoAttack, $01
0009AA70 E10D                       	smpsAlterNote       $0D
0009AA72 E701                       	dc.b	smpsNoAttack, $01
0009AA74 E111                       	smpsAlterNote       $11
0009AA76 E701                       	dc.b	smpsNoAttack, $01
0009AA78 E10D                       	smpsAlterNote       $0D
0009AA7A E701                       	dc.b	smpsNoAttack, $01
0009AA7C E10A                       	smpsAlterNote       $0A
0009AA7E E701                       	dc.b	smpsNoAttack, $01
0009AA80 E106                       	smpsAlterNote       $06
0009AA82 E701                       	dc.b	smpsNoAttack, $01
0009AA84 E10A                       	smpsAlterNote       $0A
0009AA86 E701                       	dc.b	smpsNoAttack, $01
0009AA88 E110                       	smpsAlterNote       $10
0009AA8A E701                       	dc.b	smpsNoAttack, $01
0009AA8C E111                       	smpsAlterNote       $11
0009AA8E E701                       	dc.b	smpsNoAttack, $01
0009AA90 E10D                       	smpsAlterNote       $0D
0009AA92 B80D                       	dc.b	nG4, $0D
0009AA94 E10A                       	smpsAlterNote       $0A
0009AA96 E701                       	dc.b	smpsNoAttack, $01
0009AA98 E106                       	smpsAlterNote       $06
0009AA9A E701                       	dc.b	smpsNoAttack, $01
0009AA9C E107                       	smpsAlterNote       $07
0009AA9E E701                       	dc.b	smpsNoAttack, $01
0009AAA0 E10D                       	smpsAlterNote       $0D
0009AAA2 E701                       	dc.b	smpsNoAttack, $01
0009AAA4 E111                       	smpsAlterNote       $11
0009AAA6 E701                       	dc.b	smpsNoAttack, $01
0009AAA8 E10D                       	smpsAlterNote       $0D
0009AAAA E701                       	dc.b	smpsNoAttack, $01
0009AAAC E10A                       	smpsAlterNote       $0A
0009AAAE E701                       	dc.b	smpsNoAttack, $01
0009AAB0 E106                       	smpsAlterNote       $06
0009AAB2 E701                       	dc.b	smpsNoAttack, $01
0009AAB4 E10A                       	smpsAlterNote       $0A
0009AAB6 E701                       	dc.b	smpsNoAttack, $01
0009AAB8 E110                       	smpsAlterNote       $10
0009AABA E701                       	dc.b	smpsNoAttack, $01
0009AABC E111                       	smpsAlterNote       $11
0009AABE E701                       	dc.b	smpsNoAttack, $01
0009AAC0 E10D                       	smpsAlterNote       $0D
0009AAC2 E701                       	dc.b	smpsNoAttack, $01
0009AAC4 E107                       	smpsAlterNote       $07
0009AAC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AACA E10A                       	smpsAlterNote       $0A
0009AACC E701                       	dc.b	smpsNoAttack, $01
0009AACE E110                       	smpsAlterNote       $10
0009AAD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAD4 E10D                       	smpsAlterNote       $0D
0009AAD6 8001                       	dc.b	nRst, $01
0009AAD8 E10F                       	smpsAlterNote       $0F
0009AADA BA0D                       	dc.b	nA4, $0D
0009AADC E10C                       	smpsAlterNote       $0C
0009AADE E701                       	dc.b	smpsNoAttack, $01
0009AAE0 E108                       	smpsAlterNote       $08
0009AAE2 E701                       	dc.b	smpsNoAttack, $01
0009AAE4 E10C                       	smpsAlterNote       $0C
0009AAE6 E701                       	dc.b	smpsNoAttack, $01
0009AAE8 E112                       	smpsAlterNote       $12
0009AAEA E701                       	dc.b	smpsNoAttack, $01
0009AAEC E113                       	smpsAlterNote       $13
0009AAEE E701                       	dc.b	smpsNoAttack, $01
0009AAF0 E10F                       	smpsAlterNote       $0F
0009AAF2 E701                       	dc.b	smpsNoAttack, $01
0009AAF4 E109                       	smpsAlterNote       $09
0009AAF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAFA E10C                       	smpsAlterNote       $0C
0009AAFC E701                       	dc.b	smpsNoAttack, $01
0009AAFE E112                       	smpsAlterNote       $12
0009AB00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB04 E10C                       	smpsAlterNote       $0C
0009AB06 E701                       	dc.b	smpsNoAttack, $01
0009AB08 E109                       	smpsAlterNote       $09
0009AB0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB0E E10F                       	smpsAlterNote       $0F
0009AB10 E701                       	dc.b	smpsNoAttack, $01
0009AB12 E113                       	smpsAlterNote       $13
0009AB14 E701                       	dc.b	smpsNoAttack, $01
0009AB16 E112                       	smpsAlterNote       $12
0009AB18 E701                       	dc.b	smpsNoAttack, $01
0009AB1A E10C                       	smpsAlterNote       $0C
0009AB1C E701                       	dc.b	smpsNoAttack, $01
0009AB1E E108                       	smpsAlterNote       $08
0009AB20 E701                       	dc.b	smpsNoAttack, $01
0009AB22 E10C                       	smpsAlterNote       $0C
0009AB24 E701                       	dc.b	smpsNoAttack, $01
0009AB26 E10F                       	smpsAlterNote       $0F
0009AB28 E701                       	dc.b	smpsNoAttack, $01
0009AB2A E113                       	smpsAlterNote       $13
0009AB2C E701                       	dc.b	smpsNoAttack, $01
0009AB2E E10F                       	smpsAlterNote       $0F
0009AB30 E701                       	dc.b	smpsNoAttack, $01
0009AB32 E109                       	smpsAlterNote       $09
0009AB34 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AB38 E10D                       	smpsAlterNote       $0D
0009AB3A B609 8001                  	dc.b	nF4, $09, nRst, $01
0009AB3E E10C                       	smpsAlterNote       $0C
0009AB40 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009AB44 E10B                       	smpsAlterNote       $0B
0009AB46 B30D                       	dc.b	nD4, $0D
0009AB48 E10C                       	smpsAlterNote       $0C
0009AB4A B503 8001                  	dc.b	nE4, $03, nRst, $01
0009AB4E E10D                       	smpsAlterNote       $0D
0009AB50 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0009AB58 E109                       	smpsAlterNote       $09
0009AB5A E701                       	dc.b	smpsNoAttack, $01
0009AB5C E108                       	smpsAlterNote       $08
0009AB5E E701                       	dc.b	smpsNoAttack, $01
0009AB60 E10C                       	smpsAlterNote       $0C
0009AB62 E701                       	dc.b	smpsNoAttack, $01
0009AB64 E112                       	smpsAlterNote       $12
0009AB66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB6A E10F                       	smpsAlterNote       $0F
0009AB6C E701                       	dc.b	smpsNoAttack, $01
0009AB6E E109                       	smpsAlterNote       $09
0009AB70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB74 E10F                       	smpsAlterNote       $0F
0009AB76 E701                       	dc.b	smpsNoAttack, $01
0009AB78 E112                       	smpsAlterNote       $12
0009AB7A E701                       	dc.b	smpsNoAttack, $01
0009AB7C E113                       	smpsAlterNote       $13
0009AB7E 8001                       	dc.b	nRst, $01
0009AB80 E10D                       	smpsAlterNote       $0D
0009AB82 C20D                       	dc.b	nF5, $0D
0009AB84 E107                       	smpsAlterNote       $07
0009AB86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB8A E10A                       	smpsAlterNote       $0A
0009AB8C E701                       	dc.b	smpsNoAttack, $01
0009AB8E E110                       	smpsAlterNote       $10
0009AB90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB94 E10A                       	smpsAlterNote       $0A
0009AB96 E701                       	dc.b	smpsNoAttack, $01
0009AB98 E107                       	smpsAlterNote       $07
0009AB9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB9E E10D                       	smpsAlterNote       $0D
0009ABA0 E701                       	dc.b	smpsNoAttack, $01
0009ABA2 E111                       	smpsAlterNote       $11
0009ABA4 E701                       	dc.b	smpsNoAttack, $01
0009ABA6 E110                       	smpsAlterNote       $10
0009ABA8 E701                       	dc.b	smpsNoAttack, $01
0009ABAA E10A                       	smpsAlterNote       $0A
0009ABAC E701                       	dc.b	smpsNoAttack, $01
0009ABAE E106                       	smpsAlterNote       $06
0009ABB0 E701                       	dc.b	smpsNoAttack, $01
0009ABB2 E10A                       	smpsAlterNote       $0A
0009ABB4 E701                       	dc.b	smpsNoAttack, $01
0009ABB6 E10D                       	smpsAlterNote       $0D
0009ABB8 E701                       	dc.b	smpsNoAttack, $01
0009ABBA E111                       	smpsAlterNote       $11
0009ABBC E701                       	dc.b	smpsNoAttack, $01
0009ABBE E10D                       	smpsAlterNote       $0D
0009ABC0 E701                       	dc.b	smpsNoAttack, $01
0009ABC2 E107                       	smpsAlterNote       $07
0009ABC4 E701                       	dc.b	smpsNoAttack, $01
0009ABC6 E106                       	smpsAlterNote       $06
0009ABC8 E701                       	dc.b	smpsNoAttack, $01
0009ABCA E10A                       	smpsAlterNote       $0A
0009ABCC E701                       	dc.b	smpsNoAttack, $01
0009ABCE E110                       	smpsAlterNote       $10
0009ABD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABD4 E10D                       	smpsAlterNote       $0D
0009ABD6 E701                       	dc.b	smpsNoAttack, $01
0009ABD8 E107                       	smpsAlterNote       $07
0009ABDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABDE E10D                       	smpsAlterNote       $0D
0009ABE0 E701                       	dc.b	smpsNoAttack, $01
0009ABE2 E110                       	smpsAlterNote       $10
0009ABE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABE8 E10A                       	smpsAlterNote       $0A
0009ABEA E701                       	dc.b	smpsNoAttack, $01
0009ABEC E106                       	smpsAlterNote       $06
0009ABEE E701                       	dc.b	smpsNoAttack, $01
0009ABF0 E107                       	smpsAlterNote       $07
0009ABF2 E701                       	dc.b	smpsNoAttack, $01
0009ABF4 E10D                       	smpsAlterNote       $0D
0009ABF6 E701                       	dc.b	smpsNoAttack, $01
0009ABF8 E111                       	smpsAlterNote       $11
0009ABFA E701                       	dc.b	smpsNoAttack, $01
0009ABFC E10D                       	smpsAlterNote       $0D
0009ABFE E701                       	dc.b	smpsNoAttack, $01
0009AC00 E10A                       	smpsAlterNote       $0A
0009AC02 E701                       	dc.b	smpsNoAttack, $01
0009AC04 E106                       	smpsAlterNote       $06
0009AC06 E701                       	dc.b	smpsNoAttack, $01
0009AC08 E10A                       	smpsAlterNote       $0A
0009AC0A E701                       	dc.b	smpsNoAttack, $01
0009AC0C E110                       	smpsAlterNote       $10
0009AC0E E701                       	dc.b	smpsNoAttack, $01
0009AC10 E111                       	smpsAlterNote       $11
0009AC12 E701                       	dc.b	smpsNoAttack, $01
0009AC14 E10D                       	smpsAlterNote       $0D
0009AC16 E701                       	dc.b	smpsNoAttack, $01
0009AC18 E107                       	smpsAlterNote       $07
0009AC1A E701                       	dc.b	smpsNoAttack, $01
0009AC1C E10D                       	smpsAlterNote       $0D
0009AC1E C207                       	dc.b	nF5, $07
0009AC20 E10C                       	smpsAlterNote       $0C
0009AC22 C10D                       	dc.b	nE5, $0D
0009AC24 E109                       	smpsAlterNote       $09
0009AC26 E701                       	dc.b	smpsNoAttack, $01
0009AC28 E106                       	smpsAlterNote       $06
0009AC2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC2E E10C                       	smpsAlterNote       $0C
0009AC30 E701                       	dc.b	smpsNoAttack, $01
0009AC32 E110                       	smpsAlterNote       $10
0009AC34 E701                       	dc.b	smpsNoAttack, $01
0009AC36 E10F                       	smpsAlterNote       $0F
0009AC38 E701                       	dc.b	smpsNoAttack, $01
0009AC3A E109                       	smpsAlterNote       $09
0009AC3C E701                       	dc.b	smpsNoAttack, $01
0009AC3E E105                       	smpsAlterNote       $05
0009AC40 E701                       	dc.b	smpsNoAttack, $01
0009AC42 E109                       	smpsAlterNote       $09
0009AC44 E701                       	dc.b	smpsNoAttack, $01
0009AC46 E10C                       	smpsAlterNote       $0C
0009AC48 E701                       	dc.b	smpsNoAttack, $01
0009AC4A E110                       	smpsAlterNote       $10
0009AC4C E701                       	dc.b	smpsNoAttack, $01
0009AC4E E10B                       	smpsAlterNote       $0B
0009AC50 BF0D                       	dc.b	nD5, $0D
0009AC52 E108                       	smpsAlterNote       $08
0009AC54 E701                       	dc.b	smpsNoAttack, $01
0009AC56 E105                       	smpsAlterNote       $05
0009AC58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC5C E10B                       	smpsAlterNote       $0B
0009AC5E E701                       	dc.b	smpsNoAttack, $01
0009AC60 E10F                       	smpsAlterNote       $0F
0009AC62 E701                       	dc.b	smpsNoAttack, $01
0009AC64 E10E                       	smpsAlterNote       $0E
0009AC66 E701                       	dc.b	smpsNoAttack, $01
0009AC68 E108                       	smpsAlterNote       $08
0009AC6A E701                       	dc.b	smpsNoAttack, $01
0009AC6C E104                       	smpsAlterNote       $04
0009AC6E E701                       	dc.b	smpsNoAttack, $01
0009AC70 E108                       	smpsAlterNote       $08
0009AC72 E701                       	dc.b	smpsNoAttack, $01
0009AC74 E10E                       	smpsAlterNote       $0E
0009AC76 E701                       	dc.b	smpsNoAttack, $01
0009AC78 E10F                       	smpsAlterNote       $0F
0009AC7A E701                       	dc.b	smpsNoAttack, $01
0009AC7C E10B                       	smpsAlterNote       $0B
0009AC7E E701                       	dc.b	smpsNoAttack, $01
0009AC80 E105                       	smpsAlterNote       $05
0009AC82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC86 E108                       	smpsAlterNote       $08
0009AC88 E701                       	dc.b	smpsNoAttack, $01
0009AC8A E10E                       	smpsAlterNote       $0E
0009AC8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC90 E108                       	smpsAlterNote       $08
0009AC92 E701                       	dc.b	smpsNoAttack, $01
0009AC94 E105                       	smpsAlterNote       $05
0009AC96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC9A E10B                       	smpsAlterNote       $0B
0009AC9C E701                       	dc.b	smpsNoAttack, $01
0009AC9E E10F                       	smpsAlterNote       $0F
0009ACA0 E701                       	dc.b	smpsNoAttack, $01
0009ACA2 E10E                       	smpsAlterNote       $0E
0009ACA4 E701                       	dc.b	smpsNoAttack, $01
0009ACA6 E108                       	smpsAlterNote       $08
0009ACA8 E701                       	dc.b	smpsNoAttack, $01
0009ACAA E104                       	smpsAlterNote       $04
0009ACAC E701                       	dc.b	smpsNoAttack, $01
0009ACAE E108                       	smpsAlterNote       $08
0009ACB0 E701                       	dc.b	smpsNoAttack, $01
0009ACB2 E10B                       	smpsAlterNote       $0B
0009ACB4 E701                       	dc.b	smpsNoAttack, $01
0009ACB6 E10F                       	smpsAlterNote       $0F
0009ACB8 E701                       	dc.b	smpsNoAttack, $01
0009ACBA E10B                       	smpsAlterNote       $0B
0009ACBC E701                       	dc.b	smpsNoAttack, $01
0009ACBE E105                       	smpsAlterNote       $05
0009ACC0 E701                       	dc.b	smpsNoAttack, $01
0009ACC2 E104                       	smpsAlterNote       $04
0009ACC4 E701                       	dc.b	smpsNoAttack, $01
0009ACC6 E108                       	smpsAlterNote       $08
0009ACC8 E701                       	dc.b	smpsNoAttack, $01
0009ACCA E10E                       	smpsAlterNote       $0E
0009ACCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACD0 E10B                       	smpsAlterNote       $0B
0009ACD2 E701                       	dc.b	smpsNoAttack, $01
0009ACD4 E105                       	smpsAlterNote       $05
0009ACD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACDA E10B                       	smpsAlterNote       $0B
0009ACDC E701                       	dc.b	smpsNoAttack, $01
0009ACDE E10E                       	smpsAlterNote       $0E
0009ACE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACE4 E108                       	smpsAlterNote       $08
0009ACE6 E701                       	dc.b	smpsNoAttack, $01
0009ACE8 E105                       	smpsAlterNote       $05
0009ACEA 8001                       	dc.b	nRst, $01
0009ACEE E601                       	smpsAlterVol        $01
0009ACF0 E10B                       	smpsAlterNote       $0B
0009ACF2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009ACFE 8004                       	dc.b	nRst, $04
0009AD02 E6FF                       	smpsAlterVol        $FF
0009AD04 E10D                       	smpsAlterNote       $0D
0009AD06 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0009AD0E E10C                       	smpsAlterNote       $0C
0009AD10 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0009AD15 E10D                       	smpsAlterNote       $0D
0009AD17 B60D                       	dc.b	nF4, $0D
0009AD19 E10A                       	smpsAlterNote       $0A
0009AD1B E701                       	dc.b	smpsNoAttack, $01
0009AD1D E106                       	smpsAlterNote       $06
0009AD1F E701                       	dc.b	smpsNoAttack, $01
0009AD21 E10A                       	smpsAlterNote       $0A
0009AD23 E701                       	dc.b	smpsNoAttack, $01
0009AD25 E110                       	smpsAlterNote       $10
0009AD27 E701                       	dc.b	smpsNoAttack, $01
0009AD29 E111                       	smpsAlterNote       $11
0009AD2B E701                       	dc.b	smpsNoAttack, $01
0009AD2D E10D                       	smpsAlterNote       $0D
0009AD2F E701                       	dc.b	smpsNoAttack, $01
0009AD31 E107                       	smpsAlterNote       $07
0009AD33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AD37 E10A                       	smpsAlterNote       $0A
0009AD39 E701                       	dc.b	smpsNoAttack, $01
0009AD3B E110                       	smpsAlterNote       $10
0009AD3D E701                       	dc.b	smpsNoAttack, $01
0009AD3F E111                       	smpsAlterNote       $11
0009AD41 8001                       	dc.b	nRst, $01
0009AD43 E10D                       	smpsAlterNote       $0D
0009AD45 B80D                       	dc.b	nG4, $0D
0009AD47 E10A                       	smpsAlterNote       $0A
0009AD49 E701                       	dc.b	smpsNoAttack, $01
0009AD4B E106                       	smpsAlterNote       $06
0009AD4D E701                       	dc.b	smpsNoAttack, $01
0009AD4F E10A                       	smpsAlterNote       $0A
0009AD51 E701                       	dc.b	smpsNoAttack, $01
0009AD53 E110                       	smpsAlterNote       $10
0009AD55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AD59 E10D                       	smpsAlterNote       $0D
0009AD5B E701                       	dc.b	smpsNoAttack, $01
0009AD5D E107                       	smpsAlterNote       $07
0009AD5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AD63 E10D                       	smpsAlterNote       $0D
0009AD65 E701                       	dc.b	smpsNoAttack, $01
0009AD67 E110                       	smpsAlterNote       $10
0009AD69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AD6D E10A                       	smpsAlterNote       $0A
0009AD6F E701                       	dc.b	smpsNoAttack, $01
0009AD71 E106                       	smpsAlterNote       $06
0009AD73 E701                       	dc.b	smpsNoAttack, $01
0009AD75 E107                       	smpsAlterNote       $07
0009AD77 E701                       	dc.b	smpsNoAttack, $01
0009AD79 E10D                       	smpsAlterNote       $0D
0009AD7B E701                       	dc.b	smpsNoAttack, $01
0009AD7D E111                       	smpsAlterNote       $11
0009AD7F E701                       	dc.b	smpsNoAttack, $01
0009AD81 E10D                       	smpsAlterNote       $0D
0009AD83 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AD87 E10F                       	smpsAlterNote       $0F
0009AD89 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0009AD8D E110                       	smpsAlterNote       $10
0009AD8F BB03                       	dc.b	nBb4, $03
0009AD91 E10F                       	smpsAlterNote       $0F
0009AD93 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0009AD99 E110                       	smpsAlterNote       $10
0009AD9B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009AD9F E10F                       	smpsAlterNote       $0F
0009ADA1 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0009ADA7 E110                       	smpsAlterNote       $10
0009ADA9 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0009ADAD E10F                       	smpsAlterNote       $0F
0009ADAF D20D                       	dc.b	nA6, $0D
0009ADB1 E10C                       	smpsAlterNote       $0C
0009ADB3 E701                       	dc.b	smpsNoAttack, $01
0009ADB5 E108                       	smpsAlterNote       $08
0009ADB7 E701                       	dc.b	smpsNoAttack, $01
0009ADB9 E10C                       	smpsAlterNote       $0C
0009ADBB E701                       	dc.b	smpsNoAttack, $01
0009ADBD E10F                       	smpsAlterNote       $0F
0009ADBF E701                       	dc.b	smpsNoAttack, $01
0009ADC1 E113                       	smpsAlterNote       $13
0009ADC3 E701                       	dc.b	smpsNoAttack, $01
0009ADC5 E10F                       	smpsAlterNote       $0F
0009ADC7 E701                       	dc.b	smpsNoAttack, $01
0009ADC9 E109                       	smpsAlterNote       $09
0009ADCB E701                       	dc.b	smpsNoAttack, $01
0009ADCD E108                       	smpsAlterNote       $08
0009ADCF E701                       	dc.b	smpsNoAttack, $01
0009ADD1 E10C                       	smpsAlterNote       $0C
0009ADD3 E701                       	dc.b	smpsNoAttack, $01
0009ADD5 E112                       	smpsAlterNote       $12
0009ADD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADDB E10F                       	smpsAlterNote       $0F
0009ADDD E701                       	dc.b	smpsNoAttack, $01
0009ADDF E109                       	smpsAlterNote       $09
0009ADE1 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0009ADE7 E10D                       	smpsAlterNote       $0D
0009ADE9 CE07                       	dc.b	nF6, $07
0009ADEB E10C                       	smpsAlterNote       $0C
0009ADED CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009ADF1 E10D                       	smpsAlterNote       $0D
0009ADF3 CE03                       	dc.b	nF6, $03
0009ADF5 E10C                       	smpsAlterNote       $0C
0009ADF7 CC0D                       	dc.b	nEb6, $0D
0009ADF9 E109                       	smpsAlterNote       $09
0009ADFB E701                       	dc.b	smpsNoAttack, $01
0009ADFD E106                       	smpsAlterNote       $06
0009ADFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE03 E10C                       	smpsAlterNote       $0C
0009AE05 E701                       	dc.b	smpsNoAttack, $01
0009AE07 E110                       	smpsAlterNote       $10
0009AE09 E701                       	dc.b	smpsNoAttack, $01
0009AE0B E10F                       	smpsAlterNote       $0F
0009AE0D E701                       	dc.b	smpsNoAttack, $01
0009AE0F E109                       	smpsAlterNote       $09
0009AE11 E701                       	dc.b	smpsNoAttack, $01
0009AE13 E105                       	smpsAlterNote       $05
0009AE15 E701                       	dc.b	smpsNoAttack, $01
0009AE17 E109                       	smpsAlterNote       $09
0009AE19 E701                       	dc.b	smpsNoAttack, $01
0009AE1B E10C                       	smpsAlterNote       $0C
0009AE1D E701                       	dc.b	smpsNoAttack, $01
0009AE1F E110                       	smpsAlterNote       $10
0009AE21 E701                       	dc.b	smpsNoAttack, $01
0009AE23 E10C                       	smpsAlterNote       $0C
0009AE25 E701                       	dc.b	smpsNoAttack, $01
0009AE27 E106                       	smpsAlterNote       $06
0009AE29 E701                       	dc.b	smpsNoAttack, $01
0009AE2B E105                       	smpsAlterNote       $05
0009AE2D E701                       	dc.b	smpsNoAttack, $01
0009AE2F E109                       	smpsAlterNote       $09
0009AE31 E701                       	dc.b	smpsNoAttack, $01
0009AE33 E10F                       	smpsAlterNote       $0F
0009AE35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE39 E10C                       	smpsAlterNote       $0C
0009AE3B E701                       	dc.b	smpsNoAttack, $01
0009AE3D E10B                       	smpsAlterNote       $0B
0009AE3F CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0009AE49 E10F                       	smpsAlterNote       $0F
0009AE4B C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0009AE55 E10D                       	smpsAlterNote       $0D
0009AE57 C203                       	dc.b	nF5, $03
0009AE59 E10C                       	smpsAlterNote       $0C
0009AE5B C103 8001                  	dc.b	nE5, $03, nRst, $01
0009AE5F E10D                       	smpsAlterNote       $0D
0009AE61 C20D                       	dc.b	nF5, $0D
0009AE63 E10C                       	smpsAlterNote       $0C
0009AE65 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0009AE69 E10B                       	smpsAlterNote       $0B
0009AE6B BF0D                       	dc.b	nD5, $0D
0009AE6D E108                       	smpsAlterNote       $08
0009AE6F E701                       	dc.b	smpsNoAttack, $01
0009AE71 E104                       	smpsAlterNote       $04
0009AE73 E701                       	dc.b	smpsNoAttack, $01
0009AE75 E108                       	smpsAlterNote       $08
0009AE77 E701                       	dc.b	smpsNoAttack, $01
0009AE79 E10E                       	smpsAlterNote       $0E
0009AE7B E701                       	dc.b	smpsNoAttack, $01
0009AE7D E10F                       	smpsAlterNote       $0F
0009AE7F E701                       	dc.b	smpsNoAttack, $01
0009AE81 E10B                       	smpsAlterNote       $0B
0009AE83 E701                       	dc.b	smpsNoAttack, $01
0009AE85 E105                       	smpsAlterNote       $05
0009AE87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE8B E108                       	smpsAlterNote       $08
0009AE8D E701                       	dc.b	smpsNoAttack, $01
0009AE8F E10E                       	smpsAlterNote       $0E
0009AE91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE95 E108                       	smpsAlterNote       $08
0009AE97 E701                       	dc.b	smpsNoAttack, $01
0009AE99 E105                       	smpsAlterNote       $05
0009AE9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AE9F E10B                       	smpsAlterNote       $0B
0009AEA1 E701                       	dc.b	smpsNoAttack, $01
0009AEA3 E10F                       	smpsAlterNote       $0F
0009AEA5 E701                       	dc.b	smpsNoAttack, $01
0009AEA7 E10E                       	smpsAlterNote       $0E
0009AEA9 E701                       	dc.b	smpsNoAttack, $01
0009AEAB E108                       	smpsAlterNote       $08
0009AEAD E701                       	dc.b	smpsNoAttack, $01
0009AEAF E104                       	smpsAlterNote       $04
0009AEB1 E701                       	dc.b	smpsNoAttack, $01
0009AEB3 E108                       	smpsAlterNote       $08
0009AEB5 E701                       	dc.b	smpsNoAttack, $01
0009AEB7 E10B                       	smpsAlterNote       $0B
0009AEB9 E701                       	dc.b	smpsNoAttack, $01
0009AEBB E10F                       	smpsAlterNote       $0F
0009AEBD E701                       	dc.b	smpsNoAttack, $01
0009AEBF E10B                       	smpsAlterNote       $0B
0009AEC1 E701                       	dc.b	smpsNoAttack, $01
0009AEC3 E105                       	smpsAlterNote       $05
0009AEC5 E701                       	dc.b	smpsNoAttack, $01
0009AEC7 E104                       	smpsAlterNote       $04
0009AEC9 E701                       	dc.b	smpsNoAttack, $01
0009AECB E108                       	smpsAlterNote       $08
0009AECD E701                       	dc.b	smpsNoAttack, $01
0009AECF E10E                       	smpsAlterNote       $0E
0009AED1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AED5 E10B                       	smpsAlterNote       $0B
0009AED7 E701                       	dc.b	smpsNoAttack, $01
0009AED9 E105                       	smpsAlterNote       $05
0009AEDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AEDF E10B                       	smpsAlterNote       $0B
0009AEE1 E701                       	dc.b	smpsNoAttack, $01
0009AEE3 E10E                       	smpsAlterNote       $0E
0009AEE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AEE9 E108                       	smpsAlterNote       $08
0009AEEB E701                       	dc.b	smpsNoAttack, $01
0009AEED E104                       	smpsAlterNote       $04
0009AEEF E701                       	dc.b	smpsNoAttack, $01
0009AEF1 E105                       	smpsAlterNote       $05
0009AEF3 E701                       	dc.b	smpsNoAttack, $01
0009AEF5 E10B                       	smpsAlterNote       $0B
0009AEF7 E701                       	dc.b	smpsNoAttack, $01
0009AEF9 E10F                       	smpsAlterNote       $0F
0009AEFB E701                       	dc.b	smpsNoAttack, $01
0009AEFD E10B                       	smpsAlterNote       $0B
0009AEFF E701                       	dc.b	smpsNoAttack, $01
0009AF01 E108                       	smpsAlterNote       $08
0009AF03 E701                       	dc.b	smpsNoAttack, $01
0009AF05 E104                       	smpsAlterNote       $04
0009AF07 E701                       	dc.b	smpsNoAttack, $01
0009AF09 E108                       	smpsAlterNote       $08
0009AF0B E701                       	dc.b	smpsNoAttack, $01
0009AF0D E10E                       	smpsAlterNote       $0E
0009AF0F E701                       	dc.b	smpsNoAttack, $01
0009AF11 E10F                       	smpsAlterNote       $0F
0009AF13 E701                       	dc.b	smpsNoAttack, $01
0009AF15 E10B                       	smpsAlterNote       $0B
0009AF17 E701                       	dc.b	smpsNoAttack, $01
0009AF19 E105                       	smpsAlterNote       $05
0009AF1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AF1F E108                       	smpsAlterNote       $08
0009AF21 E701                       	dc.b	smpsNoAttack, $01
0009AF23 E10E                       	smpsAlterNote       $0E
0009AF25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AF29 E108                       	smpsAlterNote       $08
0009AF2B E701                       	dc.b	smpsNoAttack, $01
0009AF2D E105                       	smpsAlterNote       $05
0009AF2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AF33 E10B                       	smpsAlterNote       $0B
0009AF35 E701                       	dc.b	smpsNoAttack, $01
0009AF37 E10F                       	smpsAlterNote       $0F
0009AF39 E701                       	dc.b	smpsNoAttack, $01
0009AF3B E10E                       	smpsAlterNote       $0E
0009AF3D E701                       	dc.b	smpsNoAttack, $01
0009AF3F E108                       	smpsAlterNote       $08
0009AF41 E701                       	dc.b	smpsNoAttack, $01
0009AF43 E104                       	smpsAlterNote       $04
0009AF45 E701                       	dc.b	smpsNoAttack, $01
0009AF47 E108                       	smpsAlterNote       $08
0009AF49 E701                       	dc.b	smpsNoAttack, $01
0009AF4B E10B                       	smpsAlterNote       $0B
0009AF4D E701                       	dc.b	smpsNoAttack, $01
0009AF4F E10F                       	smpsAlterNote       $0F
0009AF51 E701                       	dc.b	smpsNoAttack, $01
0009AF53 E10B                       	smpsAlterNote       $0B
0009AF55 E701                       	dc.b	smpsNoAttack, $01
0009AF57 E105                       	smpsAlterNote       $05
0009AF59 E701                       	dc.b	smpsNoAttack, $01
0009AF5B E104                       	smpsAlterNote       $04
0009AF5D E701                       	dc.b	smpsNoAttack, $01
0009AF5F E105                       	smpsAlterNote       $05
0009AF61 8001                       	dc.b	nRst, $01
0009AF63 E10D                       	smpsAlterNote       $0D
0009AF65 C20D                       	dc.b	nF5, $0D
0009AF67 E107                       	smpsAlterNote       $07
0009AF69 E701                       	dc.b	smpsNoAttack, $01
0009AF6B E106                       	smpsAlterNote       $06
0009AF6D E701                       	dc.b	smpsNoAttack, $01
0009AF6F E10A                       	smpsAlterNote       $0A
0009AF71 E701                       	dc.b	smpsNoAttack, $01
0009AF73 E110                       	smpsAlterNote       $10
0009AF75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AF79 E10D                       	smpsAlterNote       $0D
0009AF7B E701                       	dc.b	smpsNoAttack, $01
0009AF7D E107                       	smpsAlterNote       $07
0009AF7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AF83 E10D                       	smpsAlterNote       $0D
0009AF85 E701                       	dc.b	smpsNoAttack, $01
0009AF87 E110                       	smpsAlterNote       $10
0009AF89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AF8D E10A                       	smpsAlterNote       $0A
0009AF8F E701                       	dc.b	smpsNoAttack, $01
0009AF91 E106                       	smpsAlterNote       $06
0009AF93 E701                       	dc.b	smpsNoAttack, $01
0009AF95 E107                       	smpsAlterNote       $07
0009AF97 E701                       	dc.b	smpsNoAttack, $01
0009AF99 E10D                       	smpsAlterNote       $0D
0009AF9B E701                       	dc.b	smpsNoAttack, $01
0009AF9D E111                       	smpsAlterNote       $11
0009AF9F E701                       	dc.b	smpsNoAttack, $01
0009AFA1 E10D                       	smpsAlterNote       $0D
0009AFA3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AFA7 E10C                       	smpsAlterNote       $0C
0009AFA9 C10D                       	dc.b	nE5, $0D
0009AFAB E10D                       	smpsAlterNote       $0D
0009AFAD C20A                       	dc.b	nF5, $0A
0009AFAF E10C                       	smpsAlterNote       $0C
0009AFB1 C10E                       	dc.b	nE5, $0E
0009AFB3 E106                       	smpsAlterNote       $06
0009AFB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AFB9 E10C                       	smpsAlterNote       $0C
0009AFBB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AFBF E10B                       	smpsAlterNote       $0B
0009AFC1 BF0D                       	dc.b	nD5, $0D
0009AFC3 E10C                       	smpsAlterNote       $0C
0009AFC5 C107                       	dc.b	nE5, $07
0009AFC7 E10D                       	smpsAlterNote       $0D
0009AFC9 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0009AFD3 E110                       	smpsAlterNote       $10
0009AFD5 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009AFDB E10F                       	smpsAlterNote       $0F
0009AFDD C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0009AFE5 E10D                       	smpsAlterNote       $0D
0009AFE7 D003                       	dc.b	nG6, $03
0009AFEB E0C0                       	smpsPan             panCenter, $00
0009AFED E6FF                       	smpsAlterVol        $FF
0009AFEF AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009AFFB 8001                       	dc.b	nRst, $01
0009AFFD E10C                       	smpsAlterNote       $0C
0009AFFF A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0009B009 E604                       	smpsAlterVol        $04
0009B00B E10B                       	smpsAlterNote       $0B
0009B00D B306 8001                  	dc.b	nD4, $06, nRst, $01
0009B011 E10F                       	smpsAlterNote       $0F
0009B013 AE03                       	dc.b	nA3, $03
0009B015 E10D                       	smpsAlterNote       $0D
0009B017 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009B01B E10C                       	smpsAlterNote       $0C
0009B01D B506 8001                  	dc.b	nE4, $06, nRst, $01
0009B021 E10B                       	smpsAlterNote       $0B
0009B023 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009B027 E10A                       	smpsAlterNote       $0A
0009B029 B103                       	dc.b	nC4, $03
0009B02B E110                       	smpsAlterNote       $10
0009B02D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009B031 E10F                       	smpsAlterNote       $0F
0009B033 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0009B037 E080                       	smpsPan             panLeft, $00
0009B039 01                         	dc.b	$01
0009B03C E6FB                       	smpsAlterVol        $FB
0009B03E E1E4                       	smpsAlterNote       $E4
0009B040 C501                       	dc.b	nAb5, $01
0009B042 E1F4                       	smpsAlterNote       $F4
0009B044 E701                       	dc.b	smpsNoAttack, $01
0009B046 E104                       	smpsAlterNote       $04
0009B048 E701                       	dc.b	smpsNoAttack, $01
0009B04A E114                       	smpsAlterNote       $14
0009B04C E701                       	dc.b	smpsNoAttack, $01
0009B04E E11C                       	smpsAlterNote       $1C
0009B050 E701                       	dc.b	smpsNoAttack, $01
0009B052 E1EF                       	smpsAlterNote       $EF
0009B054 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0009B057 E1FF                       	smpsAlterNote       $FF
0009B059 E701                       	dc.b	smpsNoAttack, $01
0009B05B E10F                       	smpsAlterNote       $0F
0009B05D C606                       	dc.b	nA5, $06
0009B05F E109                       	smpsAlterNote       $09
0009B061 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B065 E10F                       	smpsAlterNote       $0F
0009B067 E701                       	dc.b	smpsNoAttack, $01
0009B069 E112                       	smpsAlterNote       $12
0009B06B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B06F E10C                       	smpsAlterNote       $0C
0009B071 E701                       	dc.b	smpsNoAttack, $01
0009B073 E108                       	smpsAlterNote       $08
0009B075 E701                       	dc.b	smpsNoAttack, $01
0009B077 E109                       	smpsAlterNote       $09
0009B079 E701                       	dc.b	smpsNoAttack, $01
0009B07B E10F                       	smpsAlterNote       $0F
0009B07D E701                       	dc.b	smpsNoAttack, $01
0009B07F E113                       	smpsAlterNote       $13
0009B081 E701                       	dc.b	smpsNoAttack, $01
0009B083 E10F                       	smpsAlterNote       $0F
0009B085 E701                       	dc.b	smpsNoAttack, $01
0009B087 E10C                       	smpsAlterNote       $0C
0009B089 E701                       	dc.b	smpsNoAttack, $01
0009B08B E108                       	smpsAlterNote       $08
0009B08D E701                       	dc.b	smpsNoAttack, $01
0009B08F E10C                       	smpsAlterNote       $0C
0009B091 E701                       	dc.b	smpsNoAttack, $01
0009B093 E112                       	smpsAlterNote       $12
0009B095 E701                       	dc.b	smpsNoAttack, $01
0009B097 E113                       	smpsAlterNote       $13
0009B099 E701                       	dc.b	smpsNoAttack, $01
0009B09B E10F                       	smpsAlterNote       $0F
0009B09D E701                       	dc.b	smpsNoAttack, $01
0009B09F E109                       	smpsAlterNote       $09
0009B0A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B0A5 E10C                       	smpsAlterNote       $0C
0009B0A7 E701                       	dc.b	smpsNoAttack, $01
0009B0A9 E112                       	smpsAlterNote       $12
0009B0AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B0AF E10C                       	smpsAlterNote       $0C
0009B0B1 E701                       	dc.b	smpsNoAttack, $01
0009B0B3 E109                       	smpsAlterNote       $09
0009B0B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B0B9 E10F                       	smpsAlterNote       $0F
0009B0BB E701                       	dc.b	smpsNoAttack, $01
0009B0BD E113                       	smpsAlterNote       $13
0009B0BF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009B0C3 E10D                       	smpsAlterNote       $0D
0009B0C5 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009B0CB E10C                       	smpsAlterNote       $0C
0009B0CD C102 8001                  	dc.b	nE5, $02, nRst, $01
0009B0D1 E10D                       	smpsAlterNote       $0D
0009B0D3 C201 8001                  	dc.b	nF5, $01, nRst, $01
0009B0D7 E10C                       	smpsAlterNote       $0C
0009B0D9 C102                       	dc.b	nE5, $02
0009B0DB E10B                       	smpsAlterNote       $0B
0009B0DD BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009B0E1 E10C                       	smpsAlterNote       $0C
0009B0E3 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009B0E7 E10B                       	smpsAlterNote       $0B
0009B0E9 BF02                       	dc.b	nD5, $02
0009B0EB E10A                       	smpsAlterNote       $0A
0009B0ED BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0009B0F7 E110                       	smpsAlterNote       $10
0009B0F9 BB02                       	dc.b	nBb4, $02
0009B0FB E10A                       	smpsAlterNote       $0A
0009B0FD BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009B101 E110                       	smpsAlterNote       $10
0009B103 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009B107 E10F                       	smpsAlterNote       $0F
0009B109 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009B10D E110                       	smpsAlterNote       $10
0009B10F BB02                       	dc.b	nBb4, $02
0009B111 E10F                       	smpsAlterNote       $0F
0009B113 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009B11D E10C                       	smpsAlterNote       $0C
0009B11F B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0009B127 E10B                       	smpsAlterNote       $0B
0009B129 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0009B12D E10F                       	smpsAlterNote       $0F
0009B12F BA02                       	dc.b	nA4, $02
0009B133 E0C0                       	smpsPan             panCenter, $00
0009B135 E601                       	smpsAlterVol        $01
0009B137 E109                       	smpsAlterNote       $09
0009B139 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0009B145 E108                       	smpsAlterNote       $08
0009B147 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0009B14D E107                       	smpsAlterNote       $07
0009B14F B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0009B155 E109                       	smpsAlterNote       $09
0009B157 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009B15B E108                       	smpsAlterNote       $08
0009B15D B506 8001                  	dc.b	nE4, $06, nRst, $01
0009B161 E107                       	smpsAlterNote       $07
0009B163 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009B167 E106                       	smpsAlterNote       $06
0009B169 B103                       	dc.b	nC4, $03
0009B16B E10C                       	smpsAlterNote       $0C
0009B16D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009B173 E080                       	smpsPan             panLeft, $00
0009B175 07                         	dc.b	$07
0009B176 E6FE                       	smpsAlterVol        $FE
0009B178 E10B                       	smpsAlterNote       $0B
0009B17A B20D                       	dc.b	nCs4, $0D
0009B17C E105                       	smpsAlterNote       $05
0009B17E E701                       	dc.b	smpsNoAttack, $01
0009B180 E104                       	smpsAlterNote       $04
0009B182 E701                       	dc.b	smpsNoAttack, $01
0009B184 E108                       	smpsAlterNote       $08
0009B186 E701                       	dc.b	smpsNoAttack, $01
0009B188 E10E                       	smpsAlterNote       $0E
0009B18A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B18E E10B                       	smpsAlterNote       $0B
0009B190 E701                       	dc.b	smpsNoAttack, $01
0009B192 E105                       	smpsAlterNote       $05
0009B194 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B198 E10B                       	smpsAlterNote       $0B
0009B19A E701                       	dc.b	smpsNoAttack, $01
0009B19C E10E                       	smpsAlterNote       $0E
0009B19E E701                       	dc.b	smpsNoAttack, $01
0009B1A0 E10F                       	smpsAlterNote       $0F
0009B1A2 8001                       	dc.b	nRst, $01
0009B1A4 E10B                       	smpsAlterNote       $0B
0009B1A6 B30D                       	dc.b	nD4, $0D
0009B1A8 E105                       	smpsAlterNote       $05
0009B1AA E701                       	dc.b	smpsNoAttack, $01
0009B1AC E104                       	smpsAlterNote       $04
0009B1AE E701                       	dc.b	smpsNoAttack, $01
0009B1B0 E108                       	smpsAlterNote       $08
0009B1B2 E701                       	dc.b	smpsNoAttack, $01
0009B1B4 E10E                       	smpsAlterNote       $0E
0009B1B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B1BA E10B                       	smpsAlterNote       $0B
0009B1BC E701                       	dc.b	smpsNoAttack, $01
0009B1BE E105                       	smpsAlterNote       $05
0009B1C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B1C4 E10B                       	smpsAlterNote       $0B
0009B1C6 E701                       	dc.b	smpsNoAttack, $01
0009B1C8 E10E                       	smpsAlterNote       $0E
0009B1CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B1CE E108                       	smpsAlterNote       $08
0009B1D0 E701                       	dc.b	smpsNoAttack, $01
0009B1D2 E104                       	smpsAlterNote       $04
0009B1D4 E701                       	dc.b	smpsNoAttack, $01
0009B1D6 E105                       	smpsAlterNote       $05
0009B1D8 E701                       	dc.b	smpsNoAttack, $01
0009B1DA E10B                       	smpsAlterNote       $0B
0009B1DC E701                       	dc.b	smpsNoAttack, $01
0009B1DE E10F                       	smpsAlterNote       $0F
0009B1E0 E701                       	dc.b	smpsNoAttack, $01
0009B1E2 E10B                       	smpsAlterNote       $0B
0009B1E4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009B1E8 E10C                       	smpsAlterNote       $0C
0009B1EA B50D                       	dc.b	nE4, $0D
0009B1EC E106                       	smpsAlterNote       $06
0009B1EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B1F2 E10C                       	smpsAlterNote       $0C
0009B1F4 E701                       	dc.b	smpsNoAttack, $01
0009B1F6 E10F                       	smpsAlterNote       $0F
0009B1F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B1FC E109                       	smpsAlterNote       $09
0009B1FE E701                       	dc.b	smpsNoAttack, $01
0009B200 E105                       	smpsAlterNote       $05
0009B202 E701                       	dc.b	smpsNoAttack, $01
0009B204 E106                       	smpsAlterNote       $06
0009B206 E701                       	dc.b	smpsNoAttack, $01
0009B208 E10C                       	smpsAlterNote       $0C
0009B20A E701                       	dc.b	smpsNoAttack, $01
0009B20C E110                       	smpsAlterNote       $10
0009B20E E701                       	dc.b	smpsNoAttack, $01
0009B210 E10B                       	smpsAlterNote       $0B
0009B212 B30E                       	dc.b	nD4, $0E
0009B214 E105                       	smpsAlterNote       $05
0009B216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B21A E10B                       	smpsAlterNote       $0B
0009B21C E701                       	dc.b	smpsNoAttack, $01
0009B21E E10E                       	smpsAlterNote       $0E
0009B220 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B224 E108                       	smpsAlterNote       $08
0009B226 E701                       	dc.b	smpsNoAttack, $01
0009B228 E104                       	smpsAlterNote       $04
0009B22A E701                       	dc.b	smpsNoAttack, $01
0009B22C E105                       	smpsAlterNote       $05
0009B22E E701                       	dc.b	smpsNoAttack, $01
0009B230 E10B                       	smpsAlterNote       $0B
0009B232 E701                       	dc.b	smpsNoAttack, $01
0009B234 E10F                       	smpsAlterNote       $0F
0009B236 E701                       	dc.b	smpsNoAttack, $01
0009B238 E10B                       	smpsAlterNote       $0B
0009B23A E701                       	dc.b	smpsNoAttack, $01
0009B23C E108                       	smpsAlterNote       $08
0009B23E E701                       	dc.b	smpsNoAttack, $01
0009B240 E104                       	smpsAlterNote       $04
0009B242 E701                       	dc.b	smpsNoAttack, $01
0009B244 E108                       	smpsAlterNote       $08
0009B246 E701                       	dc.b	smpsNoAttack, $01
0009B248 E10E                       	smpsAlterNote       $0E
0009B24A E701                       	dc.b	smpsNoAttack, $01
0009B24C E10F                       	smpsAlterNote       $0F
0009B24E E701                       	dc.b	smpsNoAttack, $01
0009B250 E10B                       	smpsAlterNote       $0B
0009B252 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009B256 E108                       	smpsAlterNote       $08
0009B258 E701                       	dc.b	smpsNoAttack, $01
0009B25A E105                       	smpsAlterNote       $05
0009B25C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B260 E10B                       	smpsAlterNote       $0B
0009B262 E701                       	dc.b	smpsNoAttack, $01
0009B264 E10F                       	smpsAlterNote       $0F
0009B266 E701                       	dc.b	smpsNoAttack, $01
0009B268 E10E                       	smpsAlterNote       $0E
0009B26A E701                       	dc.b	smpsNoAttack, $01
0009B26C E108                       	smpsAlterNote       $08
0009B26E E701                       	dc.b	smpsNoAttack, $01
0009B270 E104                       	smpsAlterNote       $04
0009B272 E701                       	dc.b	smpsNoAttack, $01
0009B274 E108                       	smpsAlterNote       $08
0009B276 E701                       	dc.b	smpsNoAttack, $01
0009B278 E10B                       	smpsAlterNote       $0B
0009B27A E701                       	dc.b	smpsNoAttack, $01
0009B27C E10F                       	smpsAlterNote       $0F
0009B27E E701                       	dc.b	smpsNoAttack, $01
0009B280 E10B                       	smpsAlterNote       $0B
0009B282 B30D                       	dc.b	nD4, $0D
0009B284 E108                       	smpsAlterNote       $08
0009B286 E701                       	dc.b	smpsNoAttack, $01
0009B288 E105                       	smpsAlterNote       $05
0009B28A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B28E E10B                       	smpsAlterNote       $0B
0009B290 E701                       	dc.b	smpsNoAttack, $01
0009B292 E10F                       	smpsAlterNote       $0F
0009B294 E701                       	dc.b	smpsNoAttack, $01
0009B296 E10E                       	smpsAlterNote       $0E
0009B298 E701                       	dc.b	smpsNoAttack, $01
0009B29A E108                       	smpsAlterNote       $08
0009B29C E701                       	dc.b	smpsNoAttack, $01
0009B29E E104                       	smpsAlterNote       $04
0009B2A0 E701                       	dc.b	smpsNoAttack, $01
0009B2A2 E108                       	smpsAlterNote       $08
0009B2A4 E701                       	dc.b	smpsNoAttack, $01
0009B2A6 E10B                       	smpsAlterNote       $0B
0009B2A8 E701                       	dc.b	smpsNoAttack, $01
0009B2AA E10F                       	smpsAlterNote       $0F
0009B2AC E701                       	dc.b	smpsNoAttack, $01
0009B2AE E10B                       	smpsAlterNote       $0B
0009B2B0 E701                       	dc.b	smpsNoAttack, $01
0009B2B2 E105                       	smpsAlterNote       $05
0009B2B4 E701                       	dc.b	smpsNoAttack, $01
0009B2B6 E104                       	smpsAlterNote       $04
0009B2B8 E701                       	dc.b	smpsNoAttack, $01
0009B2BA E108                       	smpsAlterNote       $08
0009B2BC E701                       	dc.b	smpsNoAttack, $01
0009B2BE E10E                       	smpsAlterNote       $0E
0009B2C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B2C4 E10B                       	smpsAlterNote       $0B
0009B2C6 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009B2CA E108                       	smpsAlterNote       $08
0009B2CC E701                       	dc.b	smpsNoAttack, $01
0009B2CE E104                       	smpsAlterNote       $04
0009B2D0 E701                       	dc.b	smpsNoAttack, $01
0009B2D2 E108                       	smpsAlterNote       $08
0009B2D4 E701                       	dc.b	smpsNoAttack, $01
0009B2D6 E10B                       	smpsAlterNote       $0B
0009B2D8 E701                       	dc.b	smpsNoAttack, $01
0009B2DC E0C0                       	smpsPan             panCenter, $00
0009B2DE E601                       	smpsAlterVol        $01
0009B2E0 E108                       	smpsAlterNote       $08
0009B2E2 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009B2EE 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0009B2F6 E080                       	smpsPan             panLeft, $00
0009B2F8 07                         	dc.b	$07
0009B2F9 E6FF                       	smpsAlterVol        $FF
0009B2FB E10D                       	smpsAlterNote       $0D
0009B2FD B60D                       	dc.b	nF4, $0D
0009B2FF E10A                       	smpsAlterNote       $0A
0009B301 E701                       	dc.b	smpsNoAttack, $01
0009B303 E106                       	smpsAlterNote       $06
0009B305 E701                       	dc.b	smpsNoAttack, $01
0009B307 E10A                       	smpsAlterNote       $0A
0009B309 E701                       	dc.b	smpsNoAttack, $01
0009B30B E110                       	smpsAlterNote       $10
0009B30D E701                       	dc.b	smpsNoAttack, $01
0009B30F E111                       	smpsAlterNote       $11
0009B311 E701                       	dc.b	smpsNoAttack, $01
0009B313 E10D                       	smpsAlterNote       $0D
0009B315 E701                       	dc.b	smpsNoAttack, $01
0009B317 E107                       	smpsAlterNote       $07
0009B319 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B31D E10A                       	smpsAlterNote       $0A
0009B31F E701                       	dc.b	smpsNoAttack, $01
0009B321 E110                       	smpsAlterNote       $10
0009B323 E701                       	dc.b	smpsNoAttack, $01
0009B325 E111                       	smpsAlterNote       $11
0009B327 8001                       	dc.b	nRst, $01
0009B329 E10D                       	smpsAlterNote       $0D
0009B32B B80D                       	dc.b	nG4, $0D
0009B32D E10A                       	smpsAlterNote       $0A
0009B32F E701                       	dc.b	smpsNoAttack, $01
0009B331 E106                       	smpsAlterNote       $06
0009B333 E701                       	dc.b	smpsNoAttack, $01
0009B335 E10A                       	smpsAlterNote       $0A
0009B337 E701                       	dc.b	smpsNoAttack, $01
0009B339 E110                       	smpsAlterNote       $10
0009B33B E701                       	dc.b	smpsNoAttack, $01
0009B33D E111                       	smpsAlterNote       $11
0009B33F E701                       	dc.b	smpsNoAttack, $01
0009B341 E10D                       	smpsAlterNote       $0D
0009B343 E701                       	dc.b	smpsNoAttack, $01
0009B345 E107                       	smpsAlterNote       $07
0009B347 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B34B E10D                       	smpsAlterNote       $0D
0009B34D E701                       	dc.b	smpsNoAttack, $01
0009B34F E110                       	smpsAlterNote       $10
0009B351 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B355 E10A                       	smpsAlterNote       $0A
0009B357 E701                       	dc.b	smpsNoAttack, $01
0009B359 E106                       	smpsAlterNote       $06
0009B35B E701                       	dc.b	smpsNoAttack, $01
0009B35D E107                       	smpsAlterNote       $07
0009B35F E701                       	dc.b	smpsNoAttack, $01
0009B361 E10D                       	smpsAlterNote       $0D
0009B363 E701                       	dc.b	smpsNoAttack, $01
0009B365 E111                       	smpsAlterNote       $11
0009B367 E701                       	dc.b	smpsNoAttack, $01
0009B369 E10D                       	smpsAlterNote       $0D
0009B36B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009B36F E10F                       	smpsAlterNote       $0F
0009B371 BA0D                       	dc.b	nA4, $0D
0009B373 E109                       	smpsAlterNote       $09
0009B375 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B379 E10C                       	smpsAlterNote       $0C
0009B37B E701                       	dc.b	smpsNoAttack, $01
0009B37D E112                       	smpsAlterNote       $12
0009B37F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B383 E10C                       	smpsAlterNote       $0C
0009B385 E701                       	dc.b	smpsNoAttack, $01
0009B387 E109                       	smpsAlterNote       $09
0009B389 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B38D E10F                       	smpsAlterNote       $0F
0009B38F E701                       	dc.b	smpsNoAttack, $01
0009B391 E113                       	smpsAlterNote       $13
0009B393 E701                       	dc.b	smpsNoAttack, $01
0009B395 E112                       	smpsAlterNote       $12
0009B397 E701                       	dc.b	smpsNoAttack, $01
0009B399 E10C                       	smpsAlterNote       $0C
0009B39B E701                       	dc.b	smpsNoAttack, $01
0009B39D E108                       	smpsAlterNote       $08
0009B39F E701                       	dc.b	smpsNoAttack, $01
0009B3A1 E10C                       	smpsAlterNote       $0C
0009B3A3 E701                       	dc.b	smpsNoAttack, $01
0009B3A5 E10F                       	smpsAlterNote       $0F
0009B3A7 E701                       	dc.b	smpsNoAttack, $01
0009B3A9 E113                       	smpsAlterNote       $13
0009B3AB E701                       	dc.b	smpsNoAttack, $01
0009B3AD E10F                       	smpsAlterNote       $0F
0009B3AF E701                       	dc.b	smpsNoAttack, $01
0009B3B1 E109                       	smpsAlterNote       $09
0009B3B3 E701                       	dc.b	smpsNoAttack, $01
0009B3B5 E108                       	smpsAlterNote       $08
0009B3B7 E701                       	dc.b	smpsNoAttack, $01
0009B3B9 E10C                       	smpsAlterNote       $0C
0009B3BB E701                       	dc.b	smpsNoAttack, $01
0009B3BD E112                       	smpsAlterNote       $12
0009B3BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3C3 E10F                       	smpsAlterNote       $0F
0009B3C5 E701                       	dc.b	smpsNoAttack, $01
0009B3C7 E109                       	smpsAlterNote       $09
0009B3C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3CD E10F                       	smpsAlterNote       $0F
0009B3CF E701                       	dc.b	smpsNoAttack, $01
0009B3D1 E112                       	smpsAlterNote       $12
0009B3D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3D7 E10C                       	smpsAlterNote       $0C
0009B3D9 E701                       	dc.b	smpsNoAttack, $01
0009B3DB E108                       	smpsAlterNote       $08
0009B3DD E701                       	dc.b	smpsNoAttack, $01
0009B3DF E109                       	smpsAlterNote       $09
0009B3E1 E701                       	dc.b	smpsNoAttack, $01
0009B3E3 E10C                       	smpsAlterNote       $0C
0009B3E5 B50A                       	dc.b	nE4, $0A
0009B3E7 E10D                       	smpsAlterNote       $0D
0009B3E9 B60E                       	dc.b	nF4, $0E
0009B3EB E107                       	smpsAlterNote       $07
0009B3ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3F1 E10D                       	smpsAlterNote       $0D
0009B3F3 E701                       	dc.b	smpsNoAttack, $01
0009B3F5 E110                       	smpsAlterNote       $10
0009B3F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B3FB E10A                       	smpsAlterNote       $0A
0009B3FD E701                       	dc.b	smpsNoAttack, $01
0009B3FF E106                       	smpsAlterNote       $06
0009B401 E701                       	dc.b	smpsNoAttack, $01
0009B403 E107                       	smpsAlterNote       $07
0009B405 E701                       	dc.b	smpsNoAttack, $01
0009B407 E10D                       	smpsAlterNote       $0D
0009B409 E701                       	dc.b	smpsNoAttack, $01
0009B40B E111                       	smpsAlterNote       $11
0009B40D E701                       	dc.b	smpsNoAttack, $01
0009B40F E10D                       	smpsAlterNote       $0D
0009B411 B80D                       	dc.b	nG4, $0D
0009B413 E10A                       	smpsAlterNote       $0A
0009B415 E701                       	dc.b	smpsNoAttack, $01
0009B417 E107                       	smpsAlterNote       $07
0009B419 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B41D E10D                       	smpsAlterNote       $0D
0009B41F E701                       	dc.b	smpsNoAttack, $01
0009B421 E111                       	smpsAlterNote       $11
0009B423 E701                       	dc.b	smpsNoAttack, $01
0009B425 E110                       	smpsAlterNote       $10
0009B427 E701                       	dc.b	smpsNoAttack, $01
0009B429 E10A                       	smpsAlterNote       $0A
0009B42B E701                       	dc.b	smpsNoAttack, $01
0009B42D E106                       	smpsAlterNote       $06
0009B42F E701                       	dc.b	smpsNoAttack, $01
0009B431 E10A                       	smpsAlterNote       $0A
0009B433 E701                       	dc.b	smpsNoAttack, $01
0009B435 E10D                       	smpsAlterNote       $0D
0009B437 E701                       	dc.b	smpsNoAttack, $01
0009B439 E111                       	smpsAlterNote       $11
0009B43B E701                       	dc.b	smpsNoAttack, $01
0009B43D E10D                       	smpsAlterNote       $0D
0009B43F E701                       	dc.b	smpsNoAttack, $01
0009B441 E107                       	smpsAlterNote       $07
0009B443 E701                       	dc.b	smpsNoAttack, $01
0009B445 E106                       	smpsAlterNote       $06
0009B447 E701                       	dc.b	smpsNoAttack, $01
0009B449 E10A                       	smpsAlterNote       $0A
0009B44B E701                       	dc.b	smpsNoAttack, $01
0009B44D E110                       	smpsAlterNote       $10
0009B44F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B453 E10D                       	smpsAlterNote       $0D
0009B455 E701                       	dc.b	smpsNoAttack, $01
0009B457 E10F                       	smpsAlterNote       $0F
0009B459 BA0D                       	dc.b	nA4, $0D
0009B45B E10C                       	smpsAlterNote       $0C
0009B45D E701                       	dc.b	smpsNoAttack, $01
0009B45F E108                       	smpsAlterNote       $08
0009B461 E701                       	dc.b	smpsNoAttack, $01
0009B463 E109                       	smpsAlterNote       $09
0009B465 E701                       	dc.b	smpsNoAttack, $01
0009B467 E10F                       	smpsAlterNote       $0F
0009B469 E701                       	dc.b	smpsNoAttack, $01
0009B46B E113                       	smpsAlterNote       $13
0009B46D E701                       	dc.b	smpsNoAttack, $01
0009B46F E10F                       	smpsAlterNote       $0F
0009B471 E701                       	dc.b	smpsNoAttack, $01
0009B473 E10C                       	smpsAlterNote       $0C
0009B475 E701                       	dc.b	smpsNoAttack, $01
0009B477 E108                       	smpsAlterNote       $08
0009B479 E701                       	dc.b	smpsNoAttack, $01
0009B47B E10C                       	smpsAlterNote       $0C
0009B47D E701                       	dc.b	smpsNoAttack, $01
0009B47F E112                       	smpsAlterNote       $12
0009B481 E701                       	dc.b	smpsNoAttack, $01
0009B483 E113                       	smpsAlterNote       $13
0009B485 E701                       	dc.b	smpsNoAttack, $01
0009B487 E10F                       	smpsAlterNote       $0F
0009B489 E701                       	dc.b	smpsNoAttack, $01
0009B48B E109                       	smpsAlterNote       $09
0009B48D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B491 E10C                       	smpsAlterNote       $0C
0009B493 E701                       	dc.b	smpsNoAttack, $01
0009B495 E112                       	smpsAlterNote       $12
0009B497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B49B E10C                       	smpsAlterNote       $0C
0009B49D E701                       	dc.b	smpsNoAttack, $01
0009B49F E109                       	smpsAlterNote       $09
0009B4A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B4A5 E10F                       	smpsAlterNote       $0F
0009B4A7 E701                       	dc.b	smpsNoAttack, $01
0009B4A9 E113                       	smpsAlterNote       $13
0009B4AB E701                       	dc.b	smpsNoAttack, $01
0009B4AD E112                       	smpsAlterNote       $12
0009B4AF E701                       	dc.b	smpsNoAttack, $01
0009B4B1 E10C                       	smpsAlterNote       $0C
0009B4B3 E701                       	dc.b	smpsNoAttack, $01
0009B4B5 E109                       	smpsAlterNote       $09
0009B4B7 8001                       	dc.b	nRst, $01
0009B4B9 E10D                       	smpsAlterNote       $0D
0009B4BB B60A                       	dc.b	nF4, $0A
0009B4BD E10C                       	smpsAlterNote       $0C
0009B4BF B506 8001                  	dc.b	nE4, $06, nRst, $01
0009B4C3 E10B                       	smpsAlterNote       $0B
0009B4C5 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009B4C9 E10C                       	smpsAlterNote       $0C
0009B4CB B503                       	dc.b	nE4, $03
0009B4CD E10D                       	smpsAlterNote       $0D
0009B4CF B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009B4D9 E10C                       	smpsAlterNote       $0C
0009B4DB E701                       	dc.b	smpsNoAttack, $01
0009B4DD E108                       	smpsAlterNote       $08
0009B4DF E701                       	dc.b	smpsNoAttack, $01
0009B4E1 E10C                       	smpsAlterNote       $0C
0009B4E3 E701                       	dc.b	smpsNoAttack, $01
0009B4E5 E112                       	smpsAlterNote       $12
0009B4E7 E701                       	dc.b	smpsNoAttack, $01
0009B4E9 E113                       	smpsAlterNote       $13
0009B4EB E701                       	dc.b	smpsNoAttack, $01
0009B4ED E10F                       	smpsAlterNote       $0F
0009B4EF E701                       	dc.b	smpsNoAttack, $01
0009B4F1 E109                       	smpsAlterNote       $09
0009B4F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B4F7 E10C                       	smpsAlterNote       $0C
0009B4F9 E701                       	dc.b	smpsNoAttack, $01
0009B4FB E112                       	smpsAlterNote       $12
0009B4FD E701                       	dc.b	smpsNoAttack, $01
0009B4FF E113                       	smpsAlterNote       $13
0009B501 8001                       	dc.b	nRst, $01
0009B503 E10D                       	smpsAlterNote       $0D
0009B505 C20D                       	dc.b	nF5, $0D
0009B507 E10A                       	smpsAlterNote       $0A
0009B509 E701                       	dc.b	smpsNoAttack, $01
0009B50B E106                       	smpsAlterNote       $06
0009B50D E701                       	dc.b	smpsNoAttack, $01
0009B50F E10A                       	smpsAlterNote       $0A
0009B511 E701                       	dc.b	smpsNoAttack, $01
0009B513 E110                       	smpsAlterNote       $10
0009B515 E701                       	dc.b	smpsNoAttack, $01
0009B517 E111                       	smpsAlterNote       $11
0009B519 E701                       	dc.b	smpsNoAttack, $01
0009B51B E10D                       	smpsAlterNote       $0D
0009B51D E701                       	dc.b	smpsNoAttack, $01
0009B51F E107                       	smpsAlterNote       $07
0009B521 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B525 E10A                       	smpsAlterNote       $0A
0009B527 E701                       	dc.b	smpsNoAttack, $01
0009B529 E110                       	smpsAlterNote       $10
0009B52B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B52F E10A                       	smpsAlterNote       $0A
0009B531 E701                       	dc.b	smpsNoAttack, $01
0009B533 E107                       	smpsAlterNote       $07
0009B535 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B539 E10D                       	smpsAlterNote       $0D
0009B53B E701                       	dc.b	smpsNoAttack, $01
0009B53D E111                       	smpsAlterNote       $11
0009B53F E701                       	dc.b	smpsNoAttack, $01
0009B541 E110                       	smpsAlterNote       $10
0009B543 E701                       	dc.b	smpsNoAttack, $01
0009B545 E10A                       	smpsAlterNote       $0A
0009B547 E701                       	dc.b	smpsNoAttack, $01
0009B549 E106                       	smpsAlterNote       $06
0009B54B E701                       	dc.b	smpsNoAttack, $01
0009B54D E10A                       	smpsAlterNote       $0A
0009B54F E701                       	dc.b	smpsNoAttack, $01
0009B551 E10D                       	smpsAlterNote       $0D
0009B553 E701                       	dc.b	smpsNoAttack, $01
0009B555 E111                       	smpsAlterNote       $11
0009B557 E701                       	dc.b	smpsNoAttack, $01
0009B559 E10D                       	smpsAlterNote       $0D
0009B55B E701                       	dc.b	smpsNoAttack, $01
0009B55D E107                       	smpsAlterNote       $07
0009B55F E701                       	dc.b	smpsNoAttack, $01
0009B561 E106                       	smpsAlterNote       $06
0009B563 E701                       	dc.b	smpsNoAttack, $01
0009B565 E10A                       	smpsAlterNote       $0A
0009B567 E701                       	dc.b	smpsNoAttack, $01
0009B569 E110                       	smpsAlterNote       $10
0009B56B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B56F E10D                       	smpsAlterNote       $0D
0009B571 E701                       	dc.b	smpsNoAttack, $01
0009B573 E107                       	smpsAlterNote       $07
0009B575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B579 E10D                       	smpsAlterNote       $0D
0009B57B E701                       	dc.b	smpsNoAttack, $01
0009B57D E110                       	smpsAlterNote       $10
0009B57F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B583 E10A                       	smpsAlterNote       $0A
0009B585 E701                       	dc.b	smpsNoAttack, $01
0009B587 E106                       	smpsAlterNote       $06
0009B589 E701                       	dc.b	smpsNoAttack, $01
0009B58B E107                       	smpsAlterNote       $07
0009B58D E701                       	dc.b	smpsNoAttack, $01
0009B58F E10D                       	smpsAlterNote       $0D
0009B591 E701                       	dc.b	smpsNoAttack, $01
0009B593 E111                       	smpsAlterNote       $11
0009B595 E701                       	dc.b	smpsNoAttack, $01
0009B597 E10D                       	smpsAlterNote       $0D
0009B599 E701                       	dc.b	smpsNoAttack, $01
0009B59B E10A                       	smpsAlterNote       $0A
0009B59D E701                       	dc.b	smpsNoAttack, $01
0009B59F E107                       	smpsAlterNote       $07
0009B5A1 8001                       	dc.b	nRst, $01
0009B5A3 E10D                       	smpsAlterNote       $0D
0009B5A5 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009B5AB E601                       	smpsAlterVol        $01
0009B5AD E110                       	smpsAlterNote       $10
0009B5AF BB0D                       	dc.b	nBb4, $0D
0009B5B1 E10A                       	smpsAlterNote       $0A
0009B5B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B5B7 E110                       	smpsAlterNote       $10
0009B5B9 E701                       	dc.b	smpsNoAttack, $01
0009B5BB E113                       	smpsAlterNote       $13
0009B5BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B5C1 E10D                       	smpsAlterNote       $0D
0009B5C3 E701                       	dc.b	smpsNoAttack, $01
0009B5C5 E109                       	smpsAlterNote       $09
0009B5C7 E701                       	dc.b	smpsNoAttack, $01
0009B5C9 E10A                       	smpsAlterNote       $0A
0009B5CB E701                       	dc.b	smpsNoAttack, $01
0009B5CD E110                       	smpsAlterNote       $10
0009B5CF E701                       	dc.b	smpsNoAttack, $01
0009B5D1 E114                       	smpsAlterNote       $14
0009B5D3 E701                       	dc.b	smpsNoAttack, $01
0009B5D5 E110                       	smpsAlterNote       $10
0009B5D7 E701                       	dc.b	smpsNoAttack, $01
0009B5D9 E10D                       	smpsAlterNote       $0D
0009B5DB E701                       	dc.b	smpsNoAttack, $01
0009B5DD E109                       	smpsAlterNote       $09
0009B5DF E701                       	dc.b	smpsNoAttack, $01
0009B5E1 E10A                       	smpsAlterNote       $0A
0009B5E3 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009B5E7 E107                       	smpsAlterNote       $07
0009B5E9 E701                       	dc.b	smpsNoAttack, $01
0009B5EB E103                       	smpsAlterNote       $03
0009B5ED E701                       	dc.b	smpsNoAttack, $01
0009B5EF E107                       	smpsAlterNote       $07
0009B5F1 E701                       	dc.b	smpsNoAttack, $01
0009B5F3 E10D                       	smpsAlterNote       $0D
0009B5F5 E701                       	dc.b	smpsNoAttack, $01
0009B5F7 E10E                       	smpsAlterNote       $0E
0009B5F9 E701                       	dc.b	smpsNoAttack, $01
0009B5FB E10A                       	smpsAlterNote       $0A
0009B5FD E701                       	dc.b	smpsNoAttack, $01
0009B5FF E104                       	smpsAlterNote       $04
0009B601 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B605 E107                       	smpsAlterNote       $07
0009B607 E701                       	dc.b	smpsNoAttack, $01
0009B609 E10D                       	smpsAlterNote       $0D
0009B60B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B60F E107                       	smpsAlterNote       $07
0009B611 E701                       	dc.b	smpsNoAttack, $01
0009B613 E104                       	smpsAlterNote       $04
0009B615 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B619 E10B                       	smpsAlterNote       $0B
0009B61B BF0D                       	dc.b	nD5, $0D
0009B61D E108                       	smpsAlterNote       $08
0009B61F E701                       	dc.b	smpsNoAttack, $01
0009B621 E105                       	smpsAlterNote       $05
0009B623 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B627 E10B                       	smpsAlterNote       $0B
0009B629 E701                       	dc.b	smpsNoAttack, $01
0009B62B E10F                       	smpsAlterNote       $0F
0009B62D E701                       	dc.b	smpsNoAttack, $01
0009B62F E10E                       	smpsAlterNote       $0E
0009B631 E701                       	dc.b	smpsNoAttack, $01
0009B633 E108                       	smpsAlterNote       $08
0009B635 E701                       	dc.b	smpsNoAttack, $01
0009B637 E104                       	smpsAlterNote       $04
0009B639 E701                       	dc.b	smpsNoAttack, $01
0009B63B E108                       	smpsAlterNote       $08
0009B63D E701                       	dc.b	smpsNoAttack, $01
0009B63F E10B                       	smpsAlterNote       $0B
0009B641 E701                       	dc.b	smpsNoAttack, $01
0009B643 E10F                       	smpsAlterNote       $0F
0009B645 E701                       	dc.b	smpsNoAttack, $01
0009B647 E10B                       	smpsAlterNote       $0B
0009B649 E701                       	dc.b	smpsNoAttack, $01
0009B64B E105                       	smpsAlterNote       $05
0009B64D E701                       	dc.b	smpsNoAttack, $01
0009B64F E104                       	smpsAlterNote       $04
0009B651 E701                       	dc.b	smpsNoAttack, $01
0009B653 E105                       	smpsAlterNote       $05
0009B655 8001                       	dc.b	nRst, $01
0009B657 E10C                       	smpsAlterNote       $0C
0009B659 C10C                       	dc.b	nE5, $0C
0009B65B E10D                       	smpsAlterNote       $0D
0009B65D C201                       	dc.b	nF5, $01
0009B65F E10E                       	smpsAlterNote       $0E
0009B661 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009B665 E10D                       	smpsAlterNote       $0D
0009B667 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009B66B E10A                       	smpsAlterNote       $0A
0009B66D E701                       	dc.b	smpsNoAttack, $01
0009B66F E106                       	smpsAlterNote       $06
0009B671 E701                       	dc.b	smpsNoAttack, $01
0009B673 E10A                       	smpsAlterNote       $0A
0009B675 E701                       	dc.b	smpsNoAttack, $01
0009B677 E10D                       	smpsAlterNote       $0D
0009B679 E701                       	dc.b	smpsNoAttack, $01
0009B67B E111                       	smpsAlterNote       $11
0009B67D E701                       	dc.b	smpsNoAttack, $01
0009B67F E10D                       	smpsAlterNote       $0D
0009B681 E701                       	dc.b	smpsNoAttack, $01
0009B683 E107                       	smpsAlterNote       $07
0009B685 E701                       	dc.b	smpsNoAttack, $01
0009B687 E106                       	smpsAlterNote       $06
0009B689 E701                       	dc.b	smpsNoAttack, $01
0009B68B E10A                       	smpsAlterNote       $0A
0009B68D E701                       	dc.b	smpsNoAttack, $01
0009B68F E110                       	smpsAlterNote       $10
0009B691 E701                       	dc.b	smpsNoAttack, $01
0009B693 E111                       	smpsAlterNote       $11
0009B695 8001                       	dc.b	nRst, $01
0009B697 E10D                       	smpsAlterNote       $0D
0009B699 C40D                       	dc.b	nG5, $0D
0009B69B E10A                       	smpsAlterNote       $0A
0009B69D E701                       	dc.b	smpsNoAttack, $01
0009B69F E106                       	smpsAlterNote       $06
0009B6A1 E701                       	dc.b	smpsNoAttack, $01
0009B6A3 E10A                       	smpsAlterNote       $0A
0009B6A5 E701                       	dc.b	smpsNoAttack, $01
0009B6A7 E10D                       	smpsAlterNote       $0D
0009B6A9 E701                       	dc.b	smpsNoAttack, $01
0009B6AB E10C                       	smpsAlterNote       $0C
0009B6AD C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009B6B9 8001                       	dc.b	nRst, $01
0009B6BB E10D                       	smpsAlterNote       $0D
0009B6BD C20D                       	dc.b	nF5, $0D
0009B6BF E10A                       	smpsAlterNote       $0A
0009B6C1 E701                       	dc.b	smpsNoAttack, $01
0009B6C3 E106                       	smpsAlterNote       $06
0009B6C5 E701                       	dc.b	smpsNoAttack, $01
0009B6C7 E10A                       	smpsAlterNote       $0A
0009B6C9 E701                       	dc.b	smpsNoAttack, $01
0009B6CB E110                       	smpsAlterNote       $10
0009B6CD E701                       	dc.b	smpsNoAttack, $01
0009B6CF E111                       	smpsAlterNote       $11
0009B6D1 E701                       	dc.b	smpsNoAttack, $01
0009B6D3 E10D                       	smpsAlterNote       $0D
0009B6D5 E701                       	dc.b	smpsNoAttack, $01
0009B6D7 E107                       	smpsAlterNote       $07
0009B6D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B6DD E10A                       	smpsAlterNote       $0A
0009B6DF E701                       	dc.b	smpsNoAttack, $01
0009B6E1 E110                       	smpsAlterNote       $10
0009B6E3 E701                       	dc.b	smpsNoAttack, $01
0009B6E5 E111                       	smpsAlterNote       $11
0009B6E7 8001                       	dc.b	nRst, $01
0009B6E9 E10F                       	smpsAlterNote       $0F
0009B6EB C60A                       	dc.b	nA5, $0A
0009B6ED E10D                       	smpsAlterNote       $0D
0009B6EF C406 8001                  	dc.b	nG5, $06, nRst, $01
0009B6F3 E10C                       	smpsAlterNote       $0C
0009B6F5 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009B701 8001                       	dc.b	nRst, $01
0009B703 E10D                       	smpsAlterNote       $0D
0009B705 C20D                       	dc.b	nF5, $0D
0009B707 E107                       	smpsAlterNote       $07
0009B709 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B70D E10A                       	smpsAlterNote       $0A
0009B70F E701                       	dc.b	smpsNoAttack, $01
0009B711 E110                       	smpsAlterNote       $10
0009B713 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B717 E10A                       	smpsAlterNote       $0A
0009B719 E701                       	dc.b	smpsNoAttack, $01
0009B71B E107                       	smpsAlterNote       $07
0009B71D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B721 E10D                       	smpsAlterNote       $0D
0009B723 E701                       	dc.b	smpsNoAttack, $01
0009B725 E111                       	smpsAlterNote       $11
0009B727 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009B72B E10D                       	smpsAlterNote       $0D
0009B72D C40D                       	dc.b	nG5, $0D
0009B72F E107                       	smpsAlterNote       $07
0009B731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B735 E10A                       	smpsAlterNote       $0A
0009B737 E701                       	dc.b	smpsNoAttack, $01
0009B739 E10D                       	smpsAlterNote       $0D
0009B73B 8001                       	dc.b	nRst, $01
0009B73D E10C                       	smpsAlterNote       $0C
0009B73F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009B74B E10D                       	smpsAlterNote       $0D
0009B74D C20E                       	dc.b	nF5, $0E
0009B74F E107                       	smpsAlterNote       $07
0009B751 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B755 E10D                       	smpsAlterNote       $0D
0009B757 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009B75D E0C0                       	smpsPan             panCenter, $00
0009B75F E603                       	smpsAlterVol        $03
0009B761 E108                       	smpsAlterNote       $08
0009B763 B406                       	dc.b	nEb4, $06
0009B765 E10C                       	smpsAlterNote       $0C
0009B767 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009B76B E108                       	smpsAlterNote       $08
0009B76D B403                       	dc.b	nEb4, $03
0009B76F E109                       	smpsAlterNote       $09
0009B771 B803 8001                  	dc.b	nG4, $03, nRst, $01
0009B775 E10C                       	smpsAlterNote       $0C
0009B777 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009B77F 03                         	dc.b	$03
0009B780 E6FD                       	smpsAlterVol        $FD
0009B782 F6F1 F4                    	smpsJump            music84_Jump00
0009B785                            
0009B785                            ; PSG1 Data
0009B785                            music84_PSG1:
0009B785 E1FD                       	smpsAlterNote       $FD
0009B787 EC04                       	smpsPSGAlterVol     $04
0009B789 9203                       	dc.b	nF1, $03
0009B78B E1FE                       	smpsAlterNote       $FE
0009B78D 9603                       	dc.b	nA1, $03
0009B78F EC04                       	smpsPSGAlterVol     $04
0009B791 E701                       	dc.b	smpsNoAttack, $01
0009B793 E1FF                       	smpsAlterNote       $FF
0009B795 ECFC                       	smpsPSGAlterVol     $FC
0009B797 9B03                       	dc.b	nD2, $03
0009B799 E1FD                       	smpsAlterNote       $FD
0009B79B 9403                       	dc.b	nG1, $03
0009B79D EC04                       	smpsPSGAlterVol     $04
0009B79F E701                       	dc.b	smpsNoAttack, $01
0009B7A1 E1FE                       	smpsAlterNote       $FE
0009B7A3 ECFC                       	smpsPSGAlterVol     $FC
0009B7A5 9703                       	dc.b	nBb1, $03
0009B7A7 E1FF                       	smpsAlterNote       $FF
0009B7A9 9B03                       	dc.b	nD2, $03
0009B7AB EC04                       	smpsPSGAlterVol     $04
0009B7AD E701                       	dc.b	smpsNoAttack, $01
0009B7AF E1FE                       	smpsAlterNote       $FE
0009B7B1 ECFC                       	smpsPSGAlterVol     $FC
0009B7B3 A002                       	dc.b	nG2, $02
0009B7B5 EC04                       	smpsPSGAlterVol     $04
0009B7B7 E701                       	dc.b	smpsNoAttack, $01
0009B7B9 E1FF                       	smpsAlterNote       $FF
0009B7BB ECFC                       	smpsPSGAlterVol     $FC
0009B7BD A203                       	dc.b	nA2, $03
0009B7BF EC0B                       	smpsPSGAlterVol     $0B
0009B7C1 800A                       	dc.b	nRst, $0A
0009B7C3 E105                       	smpsAlterNote       $05
0009B7C5 01                         	dc.b	$01
0009B7C6 E1FC                       	smpsAlterNote       $FC
0009B7C8 01                         	dc.b	$01
0009B7C9 E105                       	smpsAlterNote       $05
0009B7CB 01                         	dc.b	$01
0009B7CC E1FD                       	smpsAlterNote       $FD
0009B7CE 01                         	dc.b	$01
0009B7CF E105                       	smpsAlterNote       $05
0009B7D1 01                         	dc.b	$01
0009B7D2 E1FD                       	smpsAlterNote       $FD
0009B7D4 01                         	dc.b	$01
0009B7D5 E1FA                       	smpsAlterNote       $FA
0009B7D7 01                         	dc.b	$01
0009B7D8 E1FC                       	smpsAlterNote       $FC
0009B7DA 01                         	dc.b	$01
0009B7DB E105                       	smpsAlterNote       $05
0009B7DD 01                         	dc.b	$01
0009B7DE E108                       	smpsAlterNote       $08
0009B7E0 0101                       	dc.b	$01, $01
0009B7E2 E105                       	smpsAlterNote       $05
0009B7E4 01                         	dc.b	$01
0009B7E5 E1FA                       	smpsAlterNote       $FA
0009B7E7 0101                       	dc.b	$01, $01
0009B7E9 E1FD                       	smpsAlterNote       $FD
0009B7EB 01                         	dc.b	$01
0009B7EC E105                       	smpsAlterNote       $05
0009B7EE 01                         	dc.b	$01
0009B7EF E108                       	smpsAlterNote       $08
0009B7F1 01                         	dc.b	$01
0009B7F2 E105                       	smpsAlterNote       $05
0009B7F4 01                         	dc.b	$01
0009B7F5 E1FC                       	smpsAlterNote       $FC
0009B7F7 01                         	dc.b	$01
0009B7F8 E105                       	smpsAlterNote       $05
0009B7FA 01                         	dc.b	$01
0009B7FB E1FD                       	smpsAlterNote       $FD
0009B7FD 01                         	dc.b	$01
0009B7FE                            
0009B7FE                            music84_Jump07:
0009B7FE E105                       	smpsAlterNote       $05
0009B800 8001                       	dc.b	nRst, $01
0009B802 E1FD                       	smpsAlterNote       $FD
0009B804 01                         	dc.b	$01
0009B805 E1FA                       	smpsAlterNote       $FA
0009B807 01                         	dc.b	$01
0009B808 E1FC                       	smpsAlterNote       $FC
0009B80A 01                         	dc.b	$01
0009B80B E1FD                       	smpsAlterNote       $FD
0009B80D ECF5                       	smpsPSGAlterVol     $F5
0009B80F 9206                       	dc.b	nF1, $06
0009B811 EC04                       	smpsPSGAlterVol     $04
0009B813 E701                       	dc.b	smpsNoAttack, $01
0009B815 EC07                       	smpsPSGAlterVol     $07
0009B817 8003                       	dc.b	nRst, $03
0009B819 ECF5                       	smpsPSGAlterVol     $F5
0009B81B 9206                       	dc.b	nF1, $06
0009B81D EC04                       	smpsPSGAlterVol     $04
0009B81F E701                       	dc.b	smpsNoAttack, $01
0009B821 EC07                       	smpsPSGAlterVol     $07
0009B823 8006                       	dc.b	nRst, $06
0009B825 E100                       	smpsAlterNote       $00
0009B827 01                         	dc.b	$01
0009B828 E104                       	smpsAlterNote       $04
0009B82A 01                         	dc.b	$01
0009B82B E100                       	smpsAlterNote       $00
0009B82D 01                         	dc.b	$01
0009B82E E1FB                       	smpsAlterNote       $FB
0009B830 01                         	dc.b	$01
0009B831 E1FD                       	smpsAlterNote       $FD
0009B833 ECF5                       	smpsPSGAlterVol     $F5
0009B835 9406                       	dc.b	nG1, $06
0009B837 EC04                       	smpsPSGAlterVol     $04
0009B839 E701                       	dc.b	smpsNoAttack, $01
0009B83B EC07                       	smpsPSGAlterVol     $07
0009B83D 8003                       	dc.b	nRst, $03
0009B83F ECF5                       	smpsPSGAlterVol     $F5
0009B841 9407                       	dc.b	nG1, $07
0009B843 EC0B                       	smpsPSGAlterVol     $0B
0009B845 8006                       	dc.b	nRst, $06
0009B847 E100                       	smpsAlterNote       $00
0009B849 01                         	dc.b	$01
0009B84A E103                       	smpsAlterNote       $03
0009B84C 0101                       	dc.b	$01, $01
0009B84E E1FD                       	smpsAlterNote       $FD
0009B850 01                         	dc.b	$01
0009B851 ECF5                       	smpsPSGAlterVol     $F5
0009B853 9207                       	dc.b	nF1, $07
0009B855 EC0B                       	smpsPSGAlterVol     $0B
0009B857 8004                       	dc.b	nRst, $04
0009B859 ECF5                       	smpsPSGAlterVol     $F5
0009B85B 9206                       	dc.b	nF1, $06
0009B85D EC04                       	smpsPSGAlterVol     $04
0009B85F E701                       	dc.b	smpsNoAttack, $01
0009B861 EC07                       	smpsPSGAlterVol     $07
0009B863 8006                       	dc.b	nRst, $06
0009B865 E103                       	smpsAlterNote       $03
0009B867 01                         	dc.b	$01
0009B868 E104                       	smpsAlterNote       $04
0009B86A 01                         	dc.b	$01
0009B86B E100                       	smpsAlterNote       $00
0009B86D 01                         	dc.b	$01
0009B86E E1FA                       	smpsAlterNote       $FA
0009B870 01                         	dc.b	$01
0009B871 E1FD                       	smpsAlterNote       $FD
0009B873 ECF5                       	smpsPSGAlterVol     $F5
0009B875 9206                       	dc.b	nF1, $06
0009B877 EC04                       	smpsPSGAlterVol     $04
0009B879 E701                       	dc.b	smpsNoAttack, $01
0009B87B EC07                       	smpsPSGAlterVol     $07
0009B87D 8003                       	dc.b	nRst, $03
0009B87F ECF5                       	smpsPSGAlterVol     $F5
0009B881 9106                       	dc.b	nE1, $06
0009B883 EC04                       	smpsPSGAlterVol     $04
0009B885 E701                       	dc.b	smpsNoAttack, $01
0009B887 EC07                       	smpsPSGAlterVol     $07
0009B889 8006                       	dc.b	nRst, $06
0009B88B E100                       	smpsAlterNote       $00
0009B88D 01                         	dc.b	$01
0009B88E E104                       	smpsAlterNote       $04
0009B890 01                         	dc.b	$01
0009B891 E100                       	smpsAlterNote       $00
0009B893 01                         	dc.b	$01
0009B894 E1FD                       	smpsAlterNote       $FD
0009B896 01                         	dc.b	$01
0009B897 ECF5                       	smpsPSGAlterVol     $F5
0009B899 9206                       	dc.b	nF1, $06
0009B89B EC04                       	smpsPSGAlterVol     $04
0009B89D E701                       	dc.b	smpsNoAttack, $01
0009B89F EC07                       	smpsPSGAlterVol     $07
0009B8A1 8003                       	dc.b	nRst, $03
0009B8A3 ECF5                       	smpsPSGAlterVol     $F5
0009B8A5 9207                       	dc.b	nF1, $07
0009B8A7 EC0B                       	smpsPSGAlterVol     $0B
0009B8A9 8007                       	dc.b	nRst, $07
0009B8AB E103                       	smpsAlterNote       $03
0009B8AD 0101                       	dc.b	$01, $01
0009B8AF E1FD                       	smpsAlterNote       $FD
0009B8B1 01                         	dc.b	$01
0009B8B2 E1FB                       	smpsAlterNote       $FB
0009B8B4 01                         	dc.b	$01
0009B8B5 E1FD                       	smpsAlterNote       $FD
0009B8B7 ECF5                       	smpsPSGAlterVol     $F5
0009B8B9 9406                       	dc.b	nG1, $06
0009B8BB EC0B                       	smpsPSGAlterVol     $0B
0009B8BD 8004                       	dc.b	nRst, $04
0009B8BF ECF5                       	smpsPSGAlterVol     $F5
0009B8C1 9406                       	dc.b	nG1, $06
0009B8C3 EC04                       	smpsPSGAlterVol     $04
0009B8C5 E701                       	dc.b	smpsNoAttack, $01
0009B8C7 EC07                       	smpsPSGAlterVol     $07
0009B8C9 8006                       	dc.b	nRst, $06
0009B8CB E100                       	smpsAlterNote       $00
0009B8CD 01                         	dc.b	$01
0009B8CE E104                       	smpsAlterNote       $04
0009B8D0 01                         	dc.b	$01
0009B8D1 E100                       	smpsAlterNote       $00
0009B8D3 01                         	dc.b	$01
0009B8D4 E1F9                       	smpsAlterNote       $F9
0009B8D6 01                         	dc.b	$01
0009B8D7 E1FD                       	smpsAlterNote       $FD
0009B8D9 ECF5                       	smpsPSGAlterVol     $F5
0009B8DB 9206                       	dc.b	nF1, $06
0009B8DD EC04                       	smpsPSGAlterVol     $04
0009B8DF E701                       	dc.b	smpsNoAttack, $01
0009B8E1 EC07                       	smpsPSGAlterVol     $07
0009B8E3 8003                       	dc.b	nRst, $03
0009B8E5 ECF5                       	smpsPSGAlterVol     $F5
0009B8E7 9207                       	dc.b	nF1, $07
0009B8E9 EC0B                       	smpsPSGAlterVol     $0B
0009B8EB 8006                       	dc.b	nRst, $06
0009B8ED E100                       	smpsAlterNote       $00
0009B8EF 01                         	dc.b	$01
0009B8F0 E104                       	smpsAlterNote       $04
0009B8F2 01                         	dc.b	$01
0009B8F3 E103                       	smpsAlterNote       $03
0009B8F5 01                         	dc.b	$01
0009B8F6 E1FD                       	smpsAlterNote       $FD
0009B8F8 01                         	dc.b	$01
0009B8F9 ECF5                       	smpsPSGAlterVol     $F5
0009B8FB 9207                       	dc.b	nF1, $07
0009B8FD EC0B                       	smpsPSGAlterVol     $0B
0009B8FF 8004                       	dc.b	nRst, $04
0009B901 ECF5                       	smpsPSGAlterVol     $F5
0009B903 9206                       	dc.b	nF1, $06
0009B905 EC0B                       	smpsPSGAlterVol     $0B
0009B907 8007                       	dc.b	nRst, $07
0009B909 E103                       	smpsAlterNote       $03
0009B90B 0101                       	dc.b	$01, $01
0009B90D E100                       	smpsAlterNote       $00
0009B90F 01                         	dc.b	$01
0009B910 E1FA                       	smpsAlterNote       $FA
0009B912 01                         	dc.b	$01
0009B913 E1FD                       	smpsAlterNote       $FD
0009B915 ECF5                       	smpsPSGAlterVol     $F5
0009B917 9206                       	dc.b	nF1, $06
0009B919 EC04                       	smpsPSGAlterVol     $04
0009B91B E701                       	dc.b	smpsNoAttack, $01
0009B91D EC07                       	smpsPSGAlterVol     $07
0009B91F 8003                       	dc.b	nRst, $03
0009B921 ECF5                       	smpsPSGAlterVol     $F5
0009B923 9206                       	dc.b	nF1, $06
0009B925 EC04                       	smpsPSGAlterVol     $04
0009B927 E701                       	dc.b	smpsNoAttack, $01
0009B929 EC07                       	smpsPSGAlterVol     $07
0009B92B 8006                       	dc.b	nRst, $06
0009B92D E100                       	smpsAlterNote       $00
0009B92F 01                         	dc.b	$01
0009B930 E104                       	smpsAlterNote       $04
0009B932 01                         	dc.b	$01
0009B933 E100                       	smpsAlterNote       $00
0009B935 01                         	dc.b	$01
0009B936 E1FD                       	smpsAlterNote       $FD
0009B938 01                         	dc.b	$01
0009B939 ECF5                       	smpsPSGAlterVol     $F5
0009B93B 9206                       	dc.b	nF1, $06
0009B93D EC04                       	smpsPSGAlterVol     $04
0009B93F E701                       	dc.b	smpsNoAttack, $01
0009B941 EC07                       	smpsPSGAlterVol     $07
0009B943 8003                       	dc.b	nRst, $03
0009B945 ECF5                       	smpsPSGAlterVol     $F5
0009B947 9207                       	dc.b	nF1, $07
0009B949 EC0B                       	smpsPSGAlterVol     $0B
0009B94B 8007                       	dc.b	nRst, $07
0009B94D E103                       	smpsAlterNote       $03
0009B94F 0101                       	dc.b	$01, $01
0009B951 E1FD                       	smpsAlterNote       $FD
0009B953 01                         	dc.b	$01
0009B954 E1FA                       	smpsAlterNote       $FA
0009B956 01                         	dc.b	$01
0009B957 E1FD                       	smpsAlterNote       $FD
0009B959 ECF5                       	smpsPSGAlterVol     $F5
0009B95B 9206                       	dc.b	nF1, $06
0009B95D EC0B                       	smpsPSGAlterVol     $0B
0009B95F 8004                       	dc.b	nRst, $04
0009B961 ECF5                       	smpsPSGAlterVol     $F5
0009B963 9206                       	dc.b	nF1, $06
0009B965 EC04                       	smpsPSGAlterVol     $04
0009B967 E701                       	dc.b	smpsNoAttack, $01
0009B969 EC07                       	smpsPSGAlterVol     $07
0009B96B 8006                       	dc.b	nRst, $06
0009B96D E103                       	smpsAlterNote       $03
0009B96F 01                         	dc.b	$01
0009B970 E104                       	smpsAlterNote       $04
0009B972 01                         	dc.b	$01
0009B973 E100                       	smpsAlterNote       $00
0009B975 01                         	dc.b	$01
0009B976 E1FA                       	smpsAlterNote       $FA
0009B978 01                         	dc.b	$01
0009B979 E1FD                       	smpsAlterNote       $FD
0009B97B ECF5                       	smpsPSGAlterVol     $F5
0009B97D 9206                       	dc.b	nF1, $06
0009B97F EC04                       	smpsPSGAlterVol     $04
0009B981 E701                       	dc.b	smpsNoAttack, $01
0009B983 EC07                       	smpsPSGAlterVol     $07
0009B985 8003                       	dc.b	nRst, $03
0009B987 ECF5                       	smpsPSGAlterVol     $F5
0009B989 9206                       	dc.b	nF1, $06
0009B98B EC04                       	smpsPSGAlterVol     $04
0009B98D E701                       	dc.b	smpsNoAttack, $01
0009B98F EC07                       	smpsPSGAlterVol     $07
0009B991 8006                       	dc.b	nRst, $06
0009B993 E100                       	smpsAlterNote       $00
0009B995 01                         	dc.b	$01
0009B996 E104                       	smpsAlterNote       $04
0009B998 01                         	dc.b	$01
0009B999 E103                       	smpsAlterNote       $03
0009B99B 01                         	dc.b	$01
0009B99C E1FD                       	smpsAlterNote       $FD
0009B99E 01                         	dc.b	$01
0009B99F ECF5                       	smpsPSGAlterVol     $F5
0009B9A1 9107                       	dc.b	nE1, $07
0009B9A3 EC0B                       	smpsPSGAlterVol     $0B
0009B9A5 8004                       	dc.b	nRst, $04
0009B9A7 ECF5                       	smpsPSGAlterVol     $F5
0009B9A9 9106                       	dc.b	nE1, $06
0009B9AB EC0B                       	smpsPSGAlterVol     $0B
0009B9AD 8007                       	dc.b	nRst, $07
0009B9AF E103                       	smpsAlterNote       $03
0009B9B1 0101                       	dc.b	$01, $01
0009B9B3 E100                       	smpsAlterNote       $00
0009B9B5 01                         	dc.b	$01
0009B9B6 E1FA                       	smpsAlterNote       $FA
0009B9B8 01                         	dc.b	$01
0009B9B9 E1FD                       	smpsAlterNote       $FD
0009B9BB ECF5                       	smpsPSGAlterVol     $F5
0009B9BD 9106                       	dc.b	nE1, $06
0009B9BF EC04                       	smpsPSGAlterVol     $04
0009B9C1 E701                       	dc.b	smpsNoAttack, $01
0009B9C3 EC07                       	smpsPSGAlterVol     $07
0009B9C5 8003                       	dc.b	nRst, $03
0009B9C7 ECF5                       	smpsPSGAlterVol     $F5
0009B9C9 9106                       	dc.b	nE1, $06
0009B9CB EC04                       	smpsPSGAlterVol     $04
0009B9CD E701                       	dc.b	smpsNoAttack, $01
0009B9CF EC07                       	smpsPSGAlterVol     $07
0009B9D1 8006                       	dc.b	nRst, $06
0009B9D3 E100                       	smpsAlterNote       $00
0009B9D5 01                         	dc.b	$01
0009B9D6 E104                       	smpsAlterNote       $04
0009B9D8 01                         	dc.b	$01
0009B9D9 E100                       	smpsAlterNote       $00
0009B9DB 01                         	dc.b	$01
0009B9DC E1FA                       	smpsAlterNote       $FA
0009B9DE 01                         	dc.b	$01
0009B9DF E1FD                       	smpsAlterNote       $FD
0009B9E1 ECF5                       	smpsPSGAlterVol     $F5
0009B9E3 9106                       	dc.b	nE1, $06
0009B9E5 EC04                       	smpsPSGAlterVol     $04
0009B9E7 E701                       	dc.b	smpsNoAttack, $01
0009B9E9 EC07                       	smpsPSGAlterVol     $07
0009B9EB 8003                       	dc.b	nRst, $03
0009B9ED ECF5                       	smpsPSGAlterVol     $F5
0009B9EF 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009B9F3 EC04                       	smpsPSGAlterVol     $04
0009B9F5 E701                       	dc.b	smpsNoAttack, $01
0009B9F7 ECFC                       	smpsPSGAlterVol     $FC
0009B9F9 9103 9103                  	dc.b	nE1, $03, nE1, $03
0009B9FD EC04                       	smpsPSGAlterVol     $04
0009B9FF E701                       	dc.b	smpsNoAttack, $01
0009BA01 ECFC                       	smpsPSGAlterVol     $FC
0009BA03 9106                       	dc.b	nE1, $06
0009BA05 EC04                       	smpsPSGAlterVol     $04
0009BA07 E701                       	dc.b	smpsNoAttack, $01
0009BA09 EC07                       	smpsPSGAlterVol     $07
0009BA0B 8006                       	dc.b	nRst, $06
0009BA0D E100                       	smpsAlterNote       $00
0009BA0F 01                         	dc.b	$01
0009BA10 E104                       	smpsAlterNote       $04
0009BA12 01                         	dc.b	$01
0009BA13 E100                       	smpsAlterNote       $00
0009BA15 01                         	dc.b	$01
0009BA16 E1FA                       	smpsAlterNote       $FA
0009BA18 01                         	dc.b	$01
0009BA19 E1F9                       	smpsAlterNote       $F9
0009BA1B 01                         	dc.b	$01
0009BA1C E1FD                       	smpsAlterNote       $FD
0009BA1E 01                         	dc.b	$01
0009BA1F E103                       	smpsAlterNote       $03
0009BA21 01                         	dc.b	$01
0009BA22 E104                       	smpsAlterNote       $04
0009BA24 01                         	dc.b	$01
0009BA25 E100                       	smpsAlterNote       $00
0009BA27 01                         	dc.b	$01
0009BA28 E1FA                       	smpsAlterNote       $FA
0009BA2A 0101                       	dc.b	$01, $01
0009BA2C E1FD                       	smpsAlterNote       $FD
0009BA2E ECF5                       	smpsPSGAlterVol     $F5
0009BA30 9206                       	dc.b	nF1, $06
0009BA32 EC04                       	smpsPSGAlterVol     $04
0009BA34 E701                       	dc.b	smpsNoAttack, $01
0009BA36 EC07                       	smpsPSGAlterVol     $07
0009BA38 8003                       	dc.b	nRst, $03
0009BA3A ECF5                       	smpsPSGAlterVol     $F5
0009BA3C 9206                       	dc.b	nF1, $06
0009BA3E EC04                       	smpsPSGAlterVol     $04
0009BA40 E701                       	dc.b	smpsNoAttack, $01
0009BA42 EC07                       	smpsPSGAlterVol     $07
0009BA44 8006                       	dc.b	nRst, $06
0009BA46 E100                       	smpsAlterNote       $00
0009BA48 01                         	dc.b	$01
0009BA49 E104                       	smpsAlterNote       $04
0009BA4B 01                         	dc.b	$01
0009BA4C E103                       	smpsAlterNote       $03
0009BA4E 01                         	dc.b	$01
0009BA4F E1FD                       	smpsAlterNote       $FD
0009BA51 01                         	dc.b	$01
0009BA52 ECF5                       	smpsPSGAlterVol     $F5
0009BA54 9407                       	dc.b	nG1, $07
0009BA56 EC0B                       	smpsPSGAlterVol     $0B
0009BA58 8004                       	dc.b	nRst, $04
0009BA5A ECF5                       	smpsPSGAlterVol     $F5
0009BA5C 9406                       	dc.b	nG1, $06
0009BA5E EC0B                       	smpsPSGAlterVol     $0B
0009BA60 8007                       	dc.b	nRst, $07
0009BA62 E103                       	smpsAlterNote       $03
0009BA64 0101                       	dc.b	$01, $01
0009BA66 E1FD                       	smpsAlterNote       $FD
0009BA68 01                         	dc.b	$01
0009BA69 E1F9                       	smpsAlterNote       $F9
0009BA6B 01                         	dc.b	$01
0009BA6C E1FD                       	smpsAlterNote       $FD
0009BA6E ECF5                       	smpsPSGAlterVol     $F5
0009BA70 9206                       	dc.b	nF1, $06
0009BA72 EC04                       	smpsPSGAlterVol     $04
0009BA74 E701                       	dc.b	smpsNoAttack, $01
0009BA76 EC07                       	smpsPSGAlterVol     $07
0009BA78 8003                       	dc.b	nRst, $03
0009BA7A ECF5                       	smpsPSGAlterVol     $F5
0009BA7C 9206                       	dc.b	nF1, $06
0009BA7E EC04                       	smpsPSGAlterVol     $04
0009BA80 E701                       	dc.b	smpsNoAttack, $01
0009BA82 EC07                       	smpsPSGAlterVol     $07
0009BA84 8006                       	dc.b	nRst, $06
0009BA86 E100                       	smpsAlterNote       $00
0009BA88 01                         	dc.b	$01
0009BA89 E104                       	smpsAlterNote       $04
0009BA8B 01                         	dc.b	$01
0009BA8C E100                       	smpsAlterNote       $00
0009BA8E 01                         	dc.b	$01
0009BA8F E1FA                       	smpsAlterNote       $FA
0009BA91 01                         	dc.b	$01
0009BA92 E1FD                       	smpsAlterNote       $FD
0009BA94 ECF5                       	smpsPSGAlterVol     $F5
0009BA96 9206                       	dc.b	nF1, $06
0009BA98 EC04                       	smpsPSGAlterVol     $04
0009BA9A E701                       	dc.b	smpsNoAttack, $01
0009BA9C EC07                       	smpsPSGAlterVol     $07
0009BA9E 8003                       	dc.b	nRst, $03
0009BAA0 ECF5                       	smpsPSGAlterVol     $F5
0009BAA2 9107                       	dc.b	nE1, $07
0009BAA4 EC0B                       	smpsPSGAlterVol     $0B
0009BAA6 8006                       	dc.b	nRst, $06
0009BAA8 E100                       	smpsAlterNote       $00
0009BAAA 01                         	dc.b	$01
0009BAAB E103                       	smpsAlterNote       $03
0009BAAD 0101                       	dc.b	$01, $01
0009BAAF E1FD                       	smpsAlterNote       $FD
0009BAB1 01                         	dc.b	$01
0009BAB2 ECF5                       	smpsPSGAlterVol     $F5
0009BAB4 9207                       	dc.b	nF1, $07
0009BAB6 EC0B                       	smpsPSGAlterVol     $0B
0009BAB8 8004                       	dc.b	nRst, $04
0009BABA ECF5                       	smpsPSGAlterVol     $F5
0009BABC 9206                       	dc.b	nF1, $06
0009BABE EC04                       	smpsPSGAlterVol     $04
0009BAC0 E701                       	dc.b	smpsNoAttack, $01
0009BAC2 EC07                       	smpsPSGAlterVol     $07
0009BAC4 8006                       	dc.b	nRst, $06
0009BAC6 E103                       	smpsAlterNote       $03
0009BAC8 01                         	dc.b	$01
0009BAC9 E104                       	smpsAlterNote       $04
0009BACB 01                         	dc.b	$01
0009BACC E100                       	smpsAlterNote       $00
0009BACE 01                         	dc.b	$01
0009BACF E1FB                       	smpsAlterNote       $FB
0009BAD1 01                         	dc.b	$01
0009BAD2 E1FD                       	smpsAlterNote       $FD
0009BAD4 ECF5                       	smpsPSGAlterVol     $F5
0009BAD6 9406                       	dc.b	nG1, $06
0009BAD8 EC04                       	smpsPSGAlterVol     $04
0009BADA E701                       	dc.b	smpsNoAttack, $01
0009BADC EC07                       	smpsPSGAlterVol     $07
0009BADE 8003                       	dc.b	nRst, $03
0009BAE0 ECF5                       	smpsPSGAlterVol     $F5
0009BAE2 9406                       	dc.b	nG1, $06
0009BAE4 EC04                       	smpsPSGAlterVol     $04
0009BAE6 E701                       	dc.b	smpsNoAttack, $01
0009BAE8 EC07                       	smpsPSGAlterVol     $07
0009BAEA 8006                       	dc.b	nRst, $06
0009BAEC E100                       	smpsAlterNote       $00
0009BAEE 01                         	dc.b	$01
0009BAEF E104                       	smpsAlterNote       $04
0009BAF1 01                         	dc.b	$01
0009BAF2 E100                       	smpsAlterNote       $00
0009BAF4 01                         	dc.b	$01
0009BAF5 E1FD                       	smpsAlterNote       $FD
0009BAF7 01                         	dc.b	$01
0009BAF8 ECF5                       	smpsPSGAlterVol     $F5
0009BAFA 9206                       	dc.b	nF1, $06
0009BAFC EC04                       	smpsPSGAlterVol     $04
0009BAFE E701                       	dc.b	smpsNoAttack, $01
0009BB00 EC07                       	smpsPSGAlterVol     $07
0009BB02 8003                       	dc.b	nRst, $03
0009BB04 ECF5                       	smpsPSGAlterVol     $F5
0009BB06 9207                       	dc.b	nF1, $07
0009BB08 EC0B                       	smpsPSGAlterVol     $0B
0009BB0A 8007                       	dc.b	nRst, $07
0009BB0C E103                       	smpsAlterNote       $03
0009BB0E 0101                       	dc.b	$01, $01
0009BB10 E1FD                       	smpsAlterNote       $FD
0009BB12 01                         	dc.b	$01
0009BB13 E1FA                       	smpsAlterNote       $FA
0009BB15 01                         	dc.b	$01
0009BB16 E1FD                       	smpsAlterNote       $FD
0009BB18 ECF5                       	smpsPSGAlterVol     $F5
0009BB1A 9206                       	dc.b	nF1, $06
0009BB1C EC0B                       	smpsPSGAlterVol     $0B
0009BB1E 8004                       	dc.b	nRst, $04
0009BB20 ECF5                       	smpsPSGAlterVol     $F5
0009BB22 9206                       	dc.b	nF1, $06
0009BB24 EC04                       	smpsPSGAlterVol     $04
0009BB26 E701                       	dc.b	smpsNoAttack, $01
0009BB28 EC07                       	smpsPSGAlterVol     $07
0009BB2A 8006                       	dc.b	nRst, $06
0009BB2C E100                       	smpsAlterNote       $00
0009BB2E 01                         	dc.b	$01
0009BB2F E104                       	smpsAlterNote       $04
0009BB31 01                         	dc.b	$01
0009BB32 E100                       	smpsAlterNote       $00
0009BB34 01                         	dc.b	$01
0009BB35 E1FA                       	smpsAlterNote       $FA
0009BB37 01                         	dc.b	$01
0009BB38 E1FD                       	smpsAlterNote       $FD
0009BB3A ECF5                       	smpsPSGAlterVol     $F5
0009BB3C 9206                       	dc.b	nF1, $06
0009BB3E EC04                       	smpsPSGAlterVol     $04
0009BB40 E704                       	dc.b	smpsNoAttack, $04
0009BB42 ECFC                       	smpsPSGAlterVol     $FC
0009BB44 9207                       	dc.b	nF1, $07
0009BB46 EC0B                       	smpsPSGAlterVol     $0B
0009BB48 8006                       	dc.b	nRst, $06
0009BB4A E100                       	smpsAlterNote       $00
0009BB4C 01                         	dc.b	$01
0009BB4D E104                       	smpsAlterNote       $04
0009BB4F 01                         	dc.b	$01
0009BB50 E103                       	smpsAlterNote       $03
0009BB52 01                         	dc.b	$01
0009BB53 E1FD                       	smpsAlterNote       $FD
0009BB55 01                         	dc.b	$01
0009BB56 ECF5                       	smpsPSGAlterVol     $F5
0009BB58 9207                       	dc.b	nF1, $07
0009BB5A EC0B                       	smpsPSGAlterVol     $0B
0009BB5C 8004                       	dc.b	nRst, $04
0009BB5E ECF5                       	smpsPSGAlterVol     $F5
0009BB60 9206                       	dc.b	nF1, $06
0009BB62 EC0B                       	smpsPSGAlterVol     $0B
0009BB64 8007                       	dc.b	nRst, $07
0009BB66 E103                       	smpsAlterNote       $03
0009BB68 0101                       	dc.b	$01, $01
0009BB6A E100                       	smpsAlterNote       $00
0009BB6C 01                         	dc.b	$01
0009BB6D E1FA                       	smpsAlterNote       $FA
0009BB6F 01                         	dc.b	$01
0009BB70 E1FD                       	smpsAlterNote       $FD
0009BB72 ECF5                       	smpsPSGAlterVol     $F5
0009BB74 9206                       	dc.b	nF1, $06
0009BB76 EC04                       	smpsPSGAlterVol     $04
0009BB78 E704                       	dc.b	smpsNoAttack, $04
0009BB7A ECFC                       	smpsPSGAlterVol     $FC
0009BB7C 9206                       	dc.b	nF1, $06
0009BB7E EC04                       	smpsPSGAlterVol     $04
0009BB80 E701                       	dc.b	smpsNoAttack, $01
0009BB82 EC07                       	smpsPSGAlterVol     $07
0009BB84 8006                       	dc.b	nRst, $06
0009BB86 E100                       	smpsAlterNote       $00
0009BB88 01                         	dc.b	$01
0009BB89 E104                       	smpsAlterNote       $04
0009BB8B 01                         	dc.b	$01
0009BB8C E100                       	smpsAlterNote       $00
0009BB8E 01                         	dc.b	$01
0009BB8F E1FD                       	smpsAlterNote       $FD
0009BB91 01                         	dc.b	$01
0009BB92 ECF5                       	smpsPSGAlterVol     $F5
0009BB94 9206                       	dc.b	nF1, $06
0009BB96 EC04                       	smpsPSGAlterVol     $04
0009BB98 E701                       	dc.b	smpsNoAttack, $01
0009BB9A EC07                       	smpsPSGAlterVol     $07
0009BB9C 8003                       	dc.b	nRst, $03
0009BB9E ECF5                       	smpsPSGAlterVol     $F5
0009BBA0 9207                       	dc.b	nF1, $07
0009BBA2 EC0B                       	smpsPSGAlterVol     $0B
0009BBA4 8007                       	dc.b	nRst, $07
0009BBA6 E103                       	smpsAlterNote       $03
0009BBA8 0101                       	dc.b	$01, $01
0009BBAA E1FD                       	smpsAlterNote       $FD
0009BBAC 01                         	dc.b	$01
0009BBAD E1FA                       	smpsAlterNote       $FA
0009BBAF 01                         	dc.b	$01
0009BBB0 E1FD                       	smpsAlterNote       $FD
0009BBB2 ECF5                       	smpsPSGAlterVol     $F5
0009BBB4 9106                       	dc.b	nE1, $06
0009BBB6 EC0B                       	smpsPSGAlterVol     $0B
0009BBB8 8004                       	dc.b	nRst, $04
0009BBBA ECF5                       	smpsPSGAlterVol     $F5
0009BBBC 9106                       	dc.b	nE1, $06
0009BBBE EC04                       	smpsPSGAlterVol     $04
0009BBC0 E701                       	dc.b	smpsNoAttack, $01
0009BBC2 EC07                       	smpsPSGAlterVol     $07
0009BBC4 8006                       	dc.b	nRst, $06
0009BBC6 E100                       	smpsAlterNote       $00
0009BBC8 01                         	dc.b	$01
0009BBC9 E104                       	smpsAlterNote       $04
0009BBCB 01                         	dc.b	$01
0009BBCC E100                       	smpsAlterNote       $00
0009BBCE 01                         	dc.b	$01
0009BBCF E1FA                       	smpsAlterNote       $FA
0009BBD1 01                         	dc.b	$01
0009BBD2 E1FD                       	smpsAlterNote       $FD
0009BBD4 ECF5                       	smpsPSGAlterVol     $F5
0009BBD6 9106                       	dc.b	nE1, $06
0009BBD8 EC04                       	smpsPSGAlterVol     $04
0009BBDA E701                       	dc.b	smpsNoAttack, $01
0009BBDC EC07                       	smpsPSGAlterVol     $07
0009BBDE 8003                       	dc.b	nRst, $03
0009BBE0 ECF5                       	smpsPSGAlterVol     $F5
0009BBE2 9106                       	dc.b	nE1, $06
0009BBE4 EC04                       	smpsPSGAlterVol     $04
0009BBE6 E701                       	dc.b	smpsNoAttack, $01
0009BBE8 EC07                       	smpsPSGAlterVol     $07
0009BBEA 8006                       	dc.b	nRst, $06
0009BBEC E100                       	smpsAlterNote       $00
0009BBEE 01                         	dc.b	$01
0009BBEF E104                       	smpsAlterNote       $04
0009BBF1 01                         	dc.b	$01
0009BBF2 E103                       	smpsAlterNote       $03
0009BBF4 01                         	dc.b	$01
0009BBF5 E1FD                       	smpsAlterNote       $FD
0009BBF7 01                         	dc.b	$01
0009BBF8 ECF5                       	smpsPSGAlterVol     $F5
0009BBFA 9107                       	dc.b	nE1, $07
0009BBFC EC0B                       	smpsPSGAlterVol     $0B
0009BBFE 8004                       	dc.b	nRst, $04
0009BC00 ECF5                       	smpsPSGAlterVol     $F5
0009BC02 9106                       	dc.b	nE1, $06
0009BC04 EC0B                       	smpsPSGAlterVol     $0B
0009BC06 8007                       	dc.b	nRst, $07
0009BC08 E103                       	smpsAlterNote       $03
0009BC0A 0101                       	dc.b	$01, $01
0009BC0C E100                       	smpsAlterNote       $00
0009BC0E 01                         	dc.b	$01
0009BC0F E1FA                       	smpsAlterNote       $FA
0009BC11 01                         	dc.b	$01
0009BC12 E1FD                       	smpsAlterNote       $FD
0009BC14 ECF5                       	smpsPSGAlterVol     $F5
0009BC16 9106                       	dc.b	nE1, $06
0009BC18 EC04                       	smpsPSGAlterVol     $04
0009BC1A E701                       	dc.b	smpsNoAttack, $01
0009BC1C EC07                       	smpsPSGAlterVol     $07
0009BC1E 8003                       	dc.b	nRst, $03
0009BC20 ECF5                       	smpsPSGAlterVol     $F5
0009BC22 9106                       	dc.b	nE1, $06
0009BC24 EC04                       	smpsPSGAlterVol     $04
0009BC26 E701                       	dc.b	smpsNoAttack, $01
0009BC28 EC07                       	smpsPSGAlterVol     $07
0009BC2A 8003                       	dc.b	nRst, $03
0009BC2C ECF5                       	smpsPSGAlterVol     $F5
0009BC2E 9207                       	dc.b	nF1, $07
0009BC30 EC0B                       	smpsPSGAlterVol     $0B
0009BC32 8006                       	dc.b	nRst, $06
0009BC34 E100                       	smpsAlterNote       $00
0009BC36 01                         	dc.b	$01
0009BC37 E104                       	smpsAlterNote       $04
0009BC39 01                         	dc.b	$01
0009BC3A E103                       	smpsAlterNote       $03
0009BC3C 01                         	dc.b	$01
0009BC3D E1FD                       	smpsAlterNote       $FD
0009BC3F 01                         	dc.b	$01
0009BC40 E1F9                       	smpsAlterNote       $F9
0009BC42 01                         	dc.b	$01
0009BC43 E1FD                       	smpsAlterNote       $FD
0009BC45 01                         	dc.b	$01
0009BC46 E100                       	smpsAlterNote       $00
0009BC48 01                         	dc.b	$01
0009BC49 E104                       	smpsAlterNote       $04
0009BC4B 01                         	dc.b	$01
0009BC4C E1FD                       	smpsAlterNote       $FD
0009BC4E ECF5                       	smpsPSGAlterVol     $F5
0009BC50 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009BC54 EC04                       	smpsPSGAlterVol     $04
0009BC56 E701                       	dc.b	smpsNoAttack, $01
0009BC58 EC07                       	smpsPSGAlterVol     $07
0009BC5A 8009                       	dc.b	nRst, $09
0009BC5C E100                       	smpsAlterNote       $00
0009BC5E 01                         	dc.b	$01
0009BC5F E104                       	smpsAlterNote       $04
0009BC61 01                         	dc.b	$01
0009BC62 E103                       	smpsAlterNote       $03
0009BC64 01                         	dc.b	$01
0009BC65 E1FD                       	smpsAlterNote       $FD
0009BC67 01                         	dc.b	$01
0009BC68 E1F9                       	smpsAlterNote       $F9
0009BC6A 01                         	dc.b	$01
0009BC6B E1FD                       	smpsAlterNote       $FD
0009BC6D 01                         	dc.b	$01
0009BC6E E100                       	smpsAlterNote       $00
0009BC70 01                         	dc.b	$01
0009BC71 E104                       	smpsAlterNote       $04
0009BC73 01                         	dc.b	$01
0009BC74 E100                       	smpsAlterNote       $00
0009BC76 01                         	dc.b	$01
0009BC77 E1FA                       	smpsAlterNote       $FA
0009BC79 01                         	dc.b	$01
0009BC7A E1F9                       	smpsAlterNote       $F9
0009BC7C 01                         	dc.b	$01
0009BC7D E1FD                       	smpsAlterNote       $FD
0009BC7F 01                         	dc.b	$01
0009BC80 E103                       	smpsAlterNote       $03
0009BC82 0101                       	dc.b	$01, $01
0009BC84 E100                       	smpsAlterNote       $00
0009BC86 01                         	dc.b	$01
0009BC87 E1FD                       	smpsAlterNote       $FD
0009BC89 ECF5                       	smpsPSGAlterVol     $F5
0009BC8B 9202                       	dc.b	nF1, $02
0009BC8D EC04                       	smpsPSGAlterVol     $04
0009BC8F E701                       	dc.b	smpsNoAttack, $01
0009BC91 ECFC                       	smpsPSGAlterVol     $FC
0009BC93 9106                       	dc.b	nE1, $06
0009BC95 EC04                       	smpsPSGAlterVol     $04
0009BC97 E701                       	dc.b	smpsNoAttack, $01
0009BC99 EC07                       	smpsPSGAlterVol     $07
0009BC9B 8006                       	dc.b	nRst, $06
0009BC9D E100                       	smpsAlterNote       $00
0009BC9F 01                         	dc.b	$01
0009BCA0 E104                       	smpsAlterNote       $04
0009BCA2 01                         	dc.b	$01
0009BCA3 E100                       	smpsAlterNote       $00
0009BCA5 01                         	dc.b	$01
0009BCA6 E1FD                       	smpsAlterNote       $FD
0009BCA8 01                         	dc.b	$01
0009BCA9 E1F9                       	smpsAlterNote       $F9
0009BCAB 01                         	dc.b	$01
0009BCAC E1FD                       	smpsAlterNote       $FD
0009BCAE 01                         	dc.b	$01
0009BCAF E103                       	smpsAlterNote       $03
0009BCB1 01                         	dc.b	$01
0009BCB2 E104                       	smpsAlterNote       $04
0009BCB4 01                         	dc.b	$01
0009BCB5 E1FD                       	smpsAlterNote       $FD
0009BCB7 ECF5                       	smpsPSGAlterVol     $F5
0009BCB9 9102                       	dc.b	nE1, $02
0009BCBB EC04                       	smpsPSGAlterVol     $04
0009BCBD E701                       	dc.b	smpsNoAttack, $01
0009BCBF ECFC                       	smpsPSGAlterVol     $FC
0009BCC1 920D                       	dc.b	nF1, $0D
0009BCC3 E100                       	smpsAlterNote       $00
0009BCC5 E701                       	dc.b	smpsNoAttack, $01
0009BCC7 E104                       	smpsAlterNote       $04
0009BCC9 E701                       	dc.b	smpsNoAttack, $01
0009BCCB E100                       	smpsAlterNote       $00
0009BCCD E701                       	dc.b	smpsNoAttack, $01
0009BCCF E1FD                       	smpsAlterNote       $FD
0009BCD1 E701                       	dc.b	smpsNoAttack, $01
0009BCD3 E1F9                       	smpsAlterNote       $F9
0009BCD5 E701                       	dc.b	smpsNoAttack, $01
0009BCD7 E1FD                       	smpsAlterNote       $FD
0009BCD9 E701                       	dc.b	smpsNoAttack, $01
0009BCDB E103                       	smpsAlterNote       $03
0009BCDD E701                       	dc.b	smpsNoAttack, $01
0009BCDF E104                       	smpsAlterNote       $04
0009BCE1 E701                       	dc.b	smpsNoAttack, $01
0009BCE3 E100                       	smpsAlterNote       $00
0009BCE5 E701                       	dc.b	smpsNoAttack, $01
0009BCE7 E1FA                       	smpsAlterNote       $FA
0009BCE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BCED E1FD                       	smpsAlterNote       $FD
0009BCEF E701                       	dc.b	smpsNoAttack, $01
0009BCF1 E103                       	smpsAlterNote       $03
0009BCF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BCF7 E1FD                       	smpsAlterNote       $FD
0009BCF9 E701                       	dc.b	smpsNoAttack, $01
0009BCFB E1F9                       	smpsAlterNote       $F9
0009BCFD E701                       	dc.b	smpsNoAttack, $01
0009BCFF E1FA                       	smpsAlterNote       $FA
0009BD01 E701                       	dc.b	smpsNoAttack, $01
0009BD03 E100                       	smpsAlterNote       $00
0009BD05 EC04                       	smpsPSGAlterVol     $04
0009BD07 E701                       	dc.b	smpsNoAttack, $01
0009BD09 EC07                       	smpsPSGAlterVol     $07
0009BD0B E104                       	smpsAlterNote       $04
0009BD0D 8001                       	dc.b	nRst, $01
0009BD0F E100                       	smpsAlterNote       $00
0009BD11 01                         	dc.b	$01
0009BD12 E1FD                       	smpsAlterNote       $FD
0009BD14 01                         	dc.b	$01
0009BD15 E1F9                       	smpsAlterNote       $F9
0009BD17 01                         	dc.b	$01
0009BD18 E1FD                       	smpsAlterNote       $FD
0009BD1A 01                         	dc.b	$01
0009BD1B E103                       	smpsAlterNote       $03
0009BD1D 01                         	dc.b	$01
0009BD1E E104                       	smpsAlterNote       $04
0009BD20 01                         	dc.b	$01
0009BD21 E1FD                       	smpsAlterNote       $FD
0009BD23 ECF5                       	smpsPSGAlterVol     $F5
0009BD25 9106                       	dc.b	nE1, $06
0009BD27 EC04                       	smpsPSGAlterVol     $04
0009BD29 E701                       	dc.b	smpsNoAttack, $01
0009BD2B EC07                       	smpsPSGAlterVol     $07
0009BD2D 8003                       	dc.b	nRst, $03
0009BD2F ECF5                       	smpsPSGAlterVol     $F5
0009BD31 9106                       	dc.b	nE1, $06
0009BD33 EC04                       	smpsPSGAlterVol     $04
0009BD35 E701                       	dc.b	smpsNoAttack, $01
0009BD37 EC07                       	smpsPSGAlterVol     $07
0009BD39 8006                       	dc.b	nRst, $06
0009BD3B E100                       	smpsAlterNote       $00
0009BD3D 01                         	dc.b	$01
0009BD3E E104                       	smpsAlterNote       $04
0009BD40 01                         	dc.b	$01
0009BD41 E100                       	smpsAlterNote       $00
0009BD43 01                         	dc.b	$01
0009BD44 E1FA                       	smpsAlterNote       $FA
0009BD46 01                         	dc.b	$01
0009BD47 E1FD                       	smpsAlterNote       $FD
0009BD49 ECF5                       	smpsPSGAlterVol     $F5
0009BD4B 9206                       	dc.b	nF1, $06
0009BD4D EC04                       	smpsPSGAlterVol     $04
0009BD4F E701                       	dc.b	smpsNoAttack, $01
0009BD51 EC07                       	smpsPSGAlterVol     $07
0009BD53 8003                       	dc.b	nRst, $03
0009BD55 ECF5                       	smpsPSGAlterVol     $F5
0009BD57 9207                       	dc.b	nF1, $07
0009BD59 EC0B                       	smpsPSGAlterVol     $0B
0009BD5B 8006                       	dc.b	nRst, $06
0009BD5D E100                       	smpsAlterNote       $00
0009BD5F 01                         	dc.b	$01
0009BD60 E103                       	smpsAlterNote       $03
0009BD62 0101                       	dc.b	$01, $01
0009BD64 E1FD                       	smpsAlterNote       $FD
0009BD66 01                         	dc.b	$01
0009BD67 ECF5                       	smpsPSGAlterVol     $F5
0009BD69 9107                       	dc.b	nE1, $07
0009BD6B EC0B                       	smpsPSGAlterVol     $0B
0009BD6D 8004                       	dc.b	nRst, $04
0009BD6F ECF5                       	smpsPSGAlterVol     $F5
0009BD71 9106                       	dc.b	nE1, $06
0009BD73 EC04                       	smpsPSGAlterVol     $04
0009BD75 E701                       	dc.b	smpsNoAttack, $01
0009BD77 EC07                       	smpsPSGAlterVol     $07
0009BD79 8006                       	dc.b	nRst, $06
0009BD7B E103                       	smpsAlterNote       $03
0009BD7D 01                         	dc.b	$01
0009BD7E E104                       	smpsAlterNote       $04
0009BD80 01                         	dc.b	$01
0009BD81 E100                       	smpsAlterNote       $00
0009BD83 01                         	dc.b	$01
0009BD84 E1FA                       	smpsAlterNote       $FA
0009BD86 01                         	dc.b	$01
0009BD87 E1FD                       	smpsAlterNote       $FD
0009BD89 ECF5                       	smpsPSGAlterVol     $F5
0009BD8B 9106                       	dc.b	nE1, $06
0009BD8D EC04                       	smpsPSGAlterVol     $04
0009BD8F E701                       	dc.b	smpsNoAttack, $01
0009BD91 EC07                       	smpsPSGAlterVol     $07
0009BD93 8003                       	dc.b	nRst, $03
0009BD95 ECF5                       	smpsPSGAlterVol     $F5
0009BD97 9106                       	dc.b	nE1, $06
0009BD99 EC04                       	smpsPSGAlterVol     $04
0009BD9B E701                       	dc.b	smpsNoAttack, $01
0009BD9D EC07                       	smpsPSGAlterVol     $07
0009BD9F 8003                       	dc.b	nRst, $03
0009BDA1 ECF5                       	smpsPSGAlterVol     $F5
0009BDA3 9207                       	dc.b	nF1, $07
0009BDA5 EC0B                       	smpsPSGAlterVol     $0B
0009BDA7 8006                       	dc.b	nRst, $06
0009BDA9 E100                       	smpsAlterNote       $00
0009BDAB 01                         	dc.b	$01
0009BDAC E103                       	smpsAlterNote       $03
0009BDAE 0101                       	dc.b	$01, $01
0009BDB0 E1FD                       	smpsAlterNote       $FD
0009BDB2 01                         	dc.b	$01
0009BDB3 E1F9                       	smpsAlterNote       $F9
0009BDB5 01                         	dc.b	$01
0009BDB6 E1FA                       	smpsAlterNote       $FA
0009BDB8 01                         	dc.b	$01
0009BDB9 E100                       	smpsAlterNote       $00
0009BDBB 01                         	dc.b	$01
0009BDBC E104                       	smpsAlterNote       $04
0009BDBE 01                         	dc.b	$01
0009BDBF E1FD                       	smpsAlterNote       $FD
0009BDC1 ECF5                       	smpsPSGAlterVol     $F5
0009BDC3 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009BDC7 EC04                       	smpsPSGAlterVol     $04
0009BDC9 E701                       	dc.b	smpsNoAttack, $01
0009BDCB EC07                       	smpsPSGAlterVol     $07
0009BDCD 8009                       	dc.b	nRst, $09
0009BDCF E100                       	smpsAlterNote       $00
0009BDD1 01                         	dc.b	$01
0009BDD2 E103                       	smpsAlterNote       $03
0009BDD4 0101                       	dc.b	$01, $01
0009BDD6 E1FD                       	smpsAlterNote       $FD
0009BDD8 01                         	dc.b	$01
0009BDD9 E1F9                       	smpsAlterNote       $F9
0009BDDB 01                         	dc.b	$01
0009BDDC E1FA                       	smpsAlterNote       $FA
0009BDDE 01                         	dc.b	$01
0009BDDF E100                       	smpsAlterNote       $00
0009BDE1 01                         	dc.b	$01
0009BDE2 E104                       	smpsAlterNote       $04
0009BDE4 01                         	dc.b	$01
0009BDE5 E100                       	smpsAlterNote       $00
0009BDE7 01                         	dc.b	$01
0009BDE8 E1FD                       	smpsAlterNote       $FD
0009BDEA 01                         	dc.b	$01
0009BDEB E1F9                       	smpsAlterNote       $F9
0009BDED 01                         	dc.b	$01
0009BDEE E1FD                       	smpsAlterNote       $FD
0009BDF0 01                         	dc.b	$01
0009BDF1 E103                       	smpsAlterNote       $03
0009BDF3 01                         	dc.b	$01
0009BDF4 E104                       	smpsAlterNote       $04
0009BDF6 01                         	dc.b	$01
0009BDF7 E100                       	smpsAlterNote       $00
0009BDF9 01                         	dc.b	$01
0009BDFA E1FD                       	smpsAlterNote       $FD
0009BDFC ECF5                       	smpsPSGAlterVol     $F5
0009BDFE 9203 9106                  	dc.b	nF1, $03, nE1, $06
0009BE02 EC04                       	smpsPSGAlterVol     $04
0009BE04 E701                       	dc.b	smpsNoAttack, $01
0009BE06 EC07                       	smpsPSGAlterVol     $07
0009BE08 8006                       	dc.b	nRst, $06
0009BE0A E100                       	smpsAlterNote       $00
0009BE0C 01                         	dc.b	$01
0009BE0D E104                       	smpsAlterNote       $04
0009BE0F 01                         	dc.b	$01
0009BE10 E103                       	smpsAlterNote       $03
0009BE12 01                         	dc.b	$01
0009BE13 E1FD                       	smpsAlterNote       $FD
0009BE15 01                         	dc.b	$01
0009BE16 E1F9                       	smpsAlterNote       $F9
0009BE18 01                         	dc.b	$01
0009BE19 E1FD                       	smpsAlterNote       $FD
0009BE1B 01                         	dc.b	$01
0009BE1C E100                       	smpsAlterNote       $00
0009BE1E 01                         	dc.b	$01
0009BE1F E104                       	smpsAlterNote       $04
0009BE21 01                         	dc.b	$01
0009BE22 E1FD                       	smpsAlterNote       $FD
0009BE24 ECF5                       	smpsPSGAlterVol     $F5
0009BE26 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0009BE2A E100                       	smpsAlterNote       $00
0009BE2C E701                       	dc.b	smpsNoAttack, $01
0009BE2E E104                       	smpsAlterNote       $04
0009BE30 E701                       	dc.b	smpsNoAttack, $01
0009BE32 E100                       	smpsAlterNote       $00
0009BE34 E701                       	dc.b	smpsNoAttack, $01
0009BE36 E1FD                       	smpsAlterNote       $FD
0009BE38 E701                       	dc.b	smpsNoAttack, $01
0009BE3A E1F9                       	smpsAlterNote       $F9
0009BE3C E701                       	dc.b	smpsNoAttack, $01
0009BE3E E1FD                       	smpsAlterNote       $FD
0009BE40 E701                       	dc.b	smpsNoAttack, $01
0009BE42 E103                       	smpsAlterNote       $03
0009BE44 E701                       	dc.b	smpsNoAttack, $01
0009BE46 E104                       	smpsAlterNote       $04
0009BE48 E701                       	dc.b	smpsNoAttack, $01
0009BE4A E100                       	smpsAlterNote       $00
0009BE4C E701                       	dc.b	smpsNoAttack, $01
0009BE4E E1FA                       	smpsAlterNote       $FA
0009BE50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BE54 E1FD                       	smpsAlterNote       $FD
0009BE56 E701                       	dc.b	smpsNoAttack, $01
0009BE58 E103                       	smpsAlterNote       $03
0009BE5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BE5E E100                       	smpsAlterNote       $00
0009BE60 E701                       	dc.b	smpsNoAttack, $01
0009BE62 E1FA                       	smpsAlterNote       $FA
0009BE64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BE68 E100                       	smpsAlterNote       $00
0009BE6A EC04                       	smpsPSGAlterVol     $04
0009BE6C E701                       	dc.b	smpsNoAttack, $01
0009BE6E EC07                       	smpsPSGAlterVol     $07
0009BE70 E104                       	smpsAlterNote       $04
0009BE72 8001                       	dc.b	nRst, $01
0009BE74 E103                       	smpsAlterNote       $03
0009BE76 01                         	dc.b	$01
0009BE77 E1FD                       	smpsAlterNote       $FD
0009BE79 01                         	dc.b	$01
0009BE7A E1F9                       	smpsAlterNote       $F9
0009BE7C 01                         	dc.b	$01
0009BE7D E1FD                       	smpsAlterNote       $FD
0009BE7F 01                         	dc.b	$01
0009BE80 E100                       	smpsAlterNote       $00
0009BE82 01                         	dc.b	$01
0009BE83 E104                       	smpsAlterNote       $04
0009BE85 01                         	dc.b	$01
0009BE86 E1FD                       	smpsAlterNote       $FD
0009BE88 ECF5                       	smpsPSGAlterVol     $F5
0009BE8A 9106                       	dc.b	nE1, $06
0009BE8C EC04                       	smpsPSGAlterVol     $04
0009BE8E E701                       	dc.b	smpsNoAttack, $01
0009BE90 EC07                       	smpsPSGAlterVol     $07
0009BE92 8003                       	dc.b	nRst, $03
0009BE94 ECF5                       	smpsPSGAlterVol     $F5
0009BE96 9106                       	dc.b	nE1, $06
0009BE98 EC04                       	smpsPSGAlterVol     $04
0009BE9A E701                       	dc.b	smpsNoAttack, $01
0009BE9C EC07                       	smpsPSGAlterVol     $07
0009BE9E 8006                       	dc.b	nRst, $06
0009BEA0 E100                       	smpsAlterNote       $00
0009BEA2 01                         	dc.b	$01
0009BEA3 E104                       	smpsAlterNote       $04
0009BEA5 01                         	dc.b	$01
0009BEA6 E100                       	smpsAlterNote       $00
0009BEA8 01                         	dc.b	$01
0009BEA9 E1FD                       	smpsAlterNote       $FD
0009BEAB 01                         	dc.b	$01
0009BEAC ECF5                       	smpsPSGAlterVol     $F5
0009BEAE 9206                       	dc.b	nF1, $06
0009BEB0 EC04                       	smpsPSGAlterVol     $04
0009BEB2 E701                       	dc.b	smpsNoAttack, $01
0009BEB4 EC07                       	smpsPSGAlterVol     $07
0009BEB6 8003                       	dc.b	nRst, $03
0009BEB8 ECF5                       	smpsPSGAlterVol     $F5
0009BEBA 9207                       	dc.b	nF1, $07
0009BEBC EC0B                       	smpsPSGAlterVol     $0B
0009BEBE 8007                       	dc.b	nRst, $07
0009BEC0 E103                       	smpsAlterNote       $03
0009BEC2 0101                       	dc.b	$01, $01
0009BEC4 E1FD                       	smpsAlterNote       $FD
0009BEC6 01                         	dc.b	$01
0009BEC7 E1FA                       	smpsAlterNote       $FA
0009BEC9 01                         	dc.b	$01
0009BECA E1FD                       	smpsAlterNote       $FD
0009BECC ECF5                       	smpsPSGAlterVol     $F5
0009BECE 9106                       	dc.b	nE1, $06
0009BED0 EC0B                       	smpsPSGAlterVol     $0B
0009BED2 8004                       	dc.b	nRst, $04
0009BED4 ECF5                       	smpsPSGAlterVol     $F5
0009BED6 9106                       	dc.b	nE1, $06
0009BED8 EC04                       	smpsPSGAlterVol     $04
0009BEDA E701                       	dc.b	smpsNoAttack, $01
0009BEDC EC07                       	smpsPSGAlterVol     $07
0009BEDE 8006                       	dc.b	nRst, $06
0009BEE0 E100                       	smpsAlterNote       $00
0009BEE2 01                         	dc.b	$01
0009BEE3 E104                       	smpsAlterNote       $04
0009BEE5 01                         	dc.b	$01
0009BEE6 E100                       	smpsAlterNote       $00
0009BEE8 01                         	dc.b	$01
0009BEE9 E1FA                       	smpsAlterNote       $FA
0009BEEB 01                         	dc.b	$01
0009BEEC E1FD                       	smpsAlterNote       $FD
0009BEEE ECF5                       	smpsPSGAlterVol     $F5
0009BEF0 9206                       	dc.b	nF1, $06
0009BEF2 EC04                       	smpsPSGAlterVol     $04
0009BEF4 E701                       	dc.b	smpsNoAttack, $01
0009BEF6 EC07                       	smpsPSGAlterVol     $07
0009BEF8 8003                       	dc.b	nRst, $03
0009BEFA ECF5                       	smpsPSGAlterVol     $F5
0009BEFC 9206                       	dc.b	nF1, $06
0009BEFE EC04                       	smpsPSGAlterVol     $04
0009BF00 E701                       	dc.b	smpsNoAttack, $01
0009BF02 EC07                       	smpsPSGAlterVol     $07
0009BF04 8006                       	dc.b	nRst, $06
0009BF06 E100                       	smpsAlterNote       $00
0009BF08 01                         	dc.b	$01
0009BF09 E104                       	smpsAlterNote       $04
0009BF0B 01                         	dc.b	$01
0009BF0C E103                       	smpsAlterNote       $03
0009BF0E 01                         	dc.b	$01
0009BF0F E1FD                       	smpsAlterNote       $FD
0009BF11 01                         	dc.b	$01
0009BF12 ECF5                       	smpsPSGAlterVol     $F5
0009BF14 9107                       	dc.b	nE1, $07
0009BF16 EC0B                       	smpsPSGAlterVol     $0B
0009BF18 8004                       	dc.b	nRst, $04
0009BF1A ECF5                       	smpsPSGAlterVol     $F5
0009BF1C 9106                       	dc.b	nE1, $06
0009BF1E EC0B                       	smpsPSGAlterVol     $0B
0009BF20 8007                       	dc.b	nRst, $07
0009BF22 E103                       	smpsAlterNote       $03
0009BF24 0101                       	dc.b	$01, $01
0009BF26 E100                       	smpsAlterNote       $00
0009BF28 01                         	dc.b	$01
0009BF29 E1FA                       	smpsAlterNote       $FA
0009BF2B 01                         	dc.b	$01
0009BF2C E1FD                       	smpsAlterNote       $FD
0009BF2E ECF5                       	smpsPSGAlterVol     $F5
0009BF30 9206                       	dc.b	nF1, $06
0009BF32 EC04                       	smpsPSGAlterVol     $04
0009BF34 E701                       	dc.b	smpsNoAttack, $01
0009BF36 EC07                       	smpsPSGAlterVol     $07
0009BF38 8003                       	dc.b	nRst, $03
0009BF3A ECF5                       	smpsPSGAlterVol     $F5
0009BF3C 9206                       	dc.b	nF1, $06
0009BF3E EC04                       	smpsPSGAlterVol     $04
0009BF40 E701                       	dc.b	smpsNoAttack, $01
0009BF42 EC07                       	smpsPSGAlterVol     $07
0009BF44 8006                       	dc.b	nRst, $06
0009BF46 E100                       	smpsAlterNote       $00
0009BF48 01                         	dc.b	$01
0009BF49 E104                       	smpsAlterNote       $04
0009BF4B 01                         	dc.b	$01
0009BF4C E100                       	smpsAlterNote       $00
0009BF4E 01                         	dc.b	$01
0009BF4F E1FD                       	smpsAlterNote       $FD
0009BF51 01                         	dc.b	$01
0009BF52 ECF5                       	smpsPSGAlterVol     $F5
0009BF54 9106                       	dc.b	nE1, $06
0009BF56 EC04                       	smpsPSGAlterVol     $04
0009BF58 E701                       	dc.b	smpsNoAttack, $01
0009BF5A EC07                       	smpsPSGAlterVol     $07
0009BF5C 8003                       	dc.b	nRst, $03
0009BF5E ECF5                       	smpsPSGAlterVol     $F5
0009BF60 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009BF64 EC04                       	smpsPSGAlterVol     $04
0009BF66 E701                       	dc.b	smpsNoAttack, $01
0009BF68 ECFC                       	smpsPSGAlterVol     $FC
0009BF6A 9103                       	dc.b	nE1, $03
0009BF6C EC04                       	smpsPSGAlterVol     $04
0009BF6E E701                       	dc.b	smpsNoAttack, $01
0009BF70 ECFC                       	smpsPSGAlterVol     $FC
0009BF72 9102                       	dc.b	nE1, $02
0009BF74 EC04                       	smpsPSGAlterVol     $04
0009BF76 E701                       	dc.b	smpsNoAttack, $01
0009BF78 ECFC                       	smpsPSGAlterVol     $FC
0009BF7A 9103                       	dc.b	nE1, $03
0009BF7C EC0B                       	smpsPSGAlterVol     $0B
0009BF7E 800A                       	dc.b	nRst, $0A
0009BF80 E100                       	smpsAlterNote       $00
0009BF82 01                         	dc.b	$01
0009BF83 E104                       	smpsAlterNote       $04
0009BF85 01                         	dc.b	$01
0009BF86 E100                       	smpsAlterNote       $00
0009BF88 01                         	dc.b	$01
0009BF89 E1FA                       	smpsAlterNote       $FA
0009BF8B 01                         	dc.b	$01
0009BF8C E1F9                       	smpsAlterNote       $F9
0009BF8E 01                         	dc.b	$01
0009BF8F E1FD                       	smpsAlterNote       $FD
0009BF91 01                         	dc.b	$01
0009BF92 E103                       	smpsAlterNote       $03
0009BF94 0101                       	dc.b	$01, $01
0009BF96 E100                       	smpsAlterNote       $00
0009BF98 01                         	dc.b	$01
0009BF99 E1FA                       	smpsAlterNote       $FA
0009BF9B 0101                       	dc.b	$01, $01
0009BF9D E1FD                       	smpsAlterNote       $FD
0009BF9F ECF5                       	smpsPSGAlterVol     $F5
0009BFA1 9206                       	dc.b	nF1, $06
0009BFA3 EC04                       	smpsPSGAlterVol     $04
0009BFA5 E704                       	dc.b	smpsNoAttack, $04
0009BFA7 ECFC                       	smpsPSGAlterVol     $FC
0009BFA9 9206                       	dc.b	nF1, $06
0009BFAB EC04                       	smpsPSGAlterVol     $04
0009BFAD E701                       	dc.b	smpsNoAttack, $01
0009BFAF EC07                       	smpsPSGAlterVol     $07
0009BFB1 8006                       	dc.b	nRst, $06
0009BFB3 E100                       	smpsAlterNote       $00
0009BFB5 01                         	dc.b	$01
0009BFB6 E104                       	smpsAlterNote       $04
0009BFB8 01                         	dc.b	$01
0009BFB9 E103                       	smpsAlterNote       $03
0009BFBB 01                         	dc.b	$01
0009BFBC E1FD                       	smpsAlterNote       $FD
0009BFBE 01                         	dc.b	$01
0009BFBF ECF5                       	smpsPSGAlterVol     $F5
0009BFC1 9407                       	dc.b	nG1, $07
0009BFC3 EC0B                       	smpsPSGAlterVol     $0B
0009BFC5 8004                       	dc.b	nRst, $04
0009BFC7 ECF5                       	smpsPSGAlterVol     $F5
0009BFC9 9406                       	dc.b	nG1, $06
0009BFCB EC0B                       	smpsPSGAlterVol     $0B
0009BFCD 8007                       	dc.b	nRst, $07
0009BFCF E103                       	smpsAlterNote       $03
0009BFD1 0101                       	dc.b	$01, $01
0009BFD3 E1FD                       	smpsAlterNote       $FD
0009BFD5 01                         	dc.b	$01
0009BFD6 E1F9                       	smpsAlterNote       $F9
0009BFD8 01                         	dc.b	$01
0009BFD9 E1FD                       	smpsAlterNote       $FD
0009BFDB ECF5                       	smpsPSGAlterVol     $F5
0009BFDD 9206                       	dc.b	nF1, $06
0009BFDF EC04                       	smpsPSGAlterVol     $04
0009BFE1 E701                       	dc.b	smpsNoAttack, $01
0009BFE3 EC07                       	smpsPSGAlterVol     $07
0009BFE5 8003                       	dc.b	nRst, $03
0009BFE7 ECF5                       	smpsPSGAlterVol     $F5
0009BFE9 9206                       	dc.b	nF1, $06
0009BFEB EC04                       	smpsPSGAlterVol     $04
0009BFED E701                       	dc.b	smpsNoAttack, $01
0009BFEF EC07                       	smpsPSGAlterVol     $07
0009BFF1 8006                       	dc.b	nRst, $06
0009BFF3 E100                       	smpsAlterNote       $00
0009BFF5 01                         	dc.b	$01
0009BFF6 E104                       	smpsAlterNote       $04
0009BFF8 01                         	dc.b	$01
0009BFF9 E100                       	smpsAlterNote       $00
0009BFFB 01                         	dc.b	$01
0009BFFC E1FA                       	smpsAlterNote       $FA
0009BFFE 01                         	dc.b	$01
0009BFFF E1FD                       	smpsAlterNote       $FD
0009C001 ECF5                       	smpsPSGAlterVol     $F5
0009C003 9206                       	dc.b	nF1, $06
0009C005 EC04                       	smpsPSGAlterVol     $04
0009C007 E701                       	dc.b	smpsNoAttack, $01
0009C009 EC07                       	smpsPSGAlterVol     $07
0009C00B 8003                       	dc.b	nRst, $03
0009C00D ECF5                       	smpsPSGAlterVol     $F5
0009C00F 9107                       	dc.b	nE1, $07
0009C011 EC0B                       	smpsPSGAlterVol     $0B
0009C013 8006                       	dc.b	nRst, $06
0009C015 E100                       	smpsAlterNote       $00
0009C017 01                         	dc.b	$01
0009C018 E103                       	smpsAlterNote       $03
0009C01A 0101                       	dc.b	$01, $01
0009C01C E1FD                       	smpsAlterNote       $FD
0009C01E 01                         	dc.b	$01
0009C01F ECF5                       	smpsPSGAlterVol     $F5
0009C021 9207                       	dc.b	nF1, $07
0009C023 EC0B                       	smpsPSGAlterVol     $0B
0009C025 8004                       	dc.b	nRst, $04
0009C027 ECF5                       	smpsPSGAlterVol     $F5
0009C029 9206                       	dc.b	nF1, $06
0009C02B EC04                       	smpsPSGAlterVol     $04
0009C02D E701                       	dc.b	smpsNoAttack, $01
0009C02F EC07                       	smpsPSGAlterVol     $07
0009C031 8006                       	dc.b	nRst, $06
0009C033 E103                       	smpsAlterNote       $03
0009C035 01                         	dc.b	$01
0009C036 E104                       	smpsAlterNote       $04
0009C038 01                         	dc.b	$01
0009C039 E100                       	smpsAlterNote       $00
0009C03B 01                         	dc.b	$01
0009C03C E1FB                       	smpsAlterNote       $FB
0009C03E 01                         	dc.b	$01
0009C03F E1FD                       	smpsAlterNote       $FD
0009C041 ECF5                       	smpsPSGAlterVol     $F5
0009C043 9406                       	dc.b	nG1, $06
0009C045 EC04                       	smpsPSGAlterVol     $04
0009C047 E701                       	dc.b	smpsNoAttack, $01
0009C049 EC07                       	smpsPSGAlterVol     $07
0009C04B 8003                       	dc.b	nRst, $03
0009C04D ECF5                       	smpsPSGAlterVol     $F5
0009C04F 9406                       	dc.b	nG1, $06
0009C051 EC04                       	smpsPSGAlterVol     $04
0009C053 E701                       	dc.b	smpsNoAttack, $01
0009C055 EC07                       	smpsPSGAlterVol     $07
0009C057 8006                       	dc.b	nRst, $06
0009C059 E100                       	smpsAlterNote       $00
0009C05B 01                         	dc.b	$01
0009C05C E104                       	smpsAlterNote       $04
0009C05E 01                         	dc.b	$01
0009C05F E100                       	smpsAlterNote       $00
0009C061 01                         	dc.b	$01
0009C062 E1FD                       	smpsAlterNote       $FD
0009C064 01                         	dc.b	$01
0009C065 ECF5                       	smpsPSGAlterVol     $F5
0009C067 9206                       	dc.b	nF1, $06
0009C069 EC04                       	smpsPSGAlterVol     $04
0009C06B E701                       	dc.b	smpsNoAttack, $01
0009C06D EC07                       	smpsPSGAlterVol     $07
0009C06F 8003                       	dc.b	nRst, $03
0009C071 ECF5                       	smpsPSGAlterVol     $F5
0009C073 9207                       	dc.b	nF1, $07
0009C075 EC0B                       	smpsPSGAlterVol     $0B
0009C077 8007                       	dc.b	nRst, $07
0009C079 E103                       	smpsAlterNote       $03
0009C07B 0101                       	dc.b	$01, $01
0009C07D E1FD                       	smpsAlterNote       $FD
0009C07F 01                         	dc.b	$01
0009C080 E1FA                       	smpsAlterNote       $FA
0009C082 01                         	dc.b	$01
0009C083 E1FD                       	smpsAlterNote       $FD
0009C085 ECF5                       	smpsPSGAlterVol     $F5
0009C087 9206                       	dc.b	nF1, $06
0009C089 EC0B                       	smpsPSGAlterVol     $0B
0009C08B 8004                       	dc.b	nRst, $04
0009C08D ECF5                       	smpsPSGAlterVol     $F5
0009C08F 9206                       	dc.b	nF1, $06
0009C091 EC04                       	smpsPSGAlterVol     $04
0009C093 E701                       	dc.b	smpsNoAttack, $01
0009C095 EC07                       	smpsPSGAlterVol     $07
0009C097 8006                       	dc.b	nRst, $06
0009C099 E100                       	smpsAlterNote       $00
0009C09B 01                         	dc.b	$01
0009C09C E104                       	smpsAlterNote       $04
0009C09E 01                         	dc.b	$01
0009C09F E100                       	smpsAlterNote       $00
0009C0A1 01                         	dc.b	$01
0009C0A2 E1FA                       	smpsAlterNote       $FA
0009C0A4 01                         	dc.b	$01
0009C0A5 E1FD                       	smpsAlterNote       $FD
0009C0A7 ECF5                       	smpsPSGAlterVol     $F5
0009C0A9 9206                       	dc.b	nF1, $06
0009C0AB EC04                       	smpsPSGAlterVol     $04
0009C0AD E701                       	dc.b	smpsNoAttack, $01
0009C0AF EC07                       	smpsPSGAlterVol     $07
0009C0B1 8003                       	dc.b	nRst, $03
0009C0B3 ECF5                       	smpsPSGAlterVol     $F5
0009C0B5 9207                       	dc.b	nF1, $07
0009C0B7 EC0B                       	smpsPSGAlterVol     $0B
0009C0B9 8006                       	dc.b	nRst, $06
0009C0BB E100                       	smpsAlterNote       $00
0009C0BD 01                         	dc.b	$01
0009C0BE E103                       	smpsAlterNote       $03
0009C0C0 0101                       	dc.b	$01, $01
0009C0C2 E1FD                       	smpsAlterNote       $FD
0009C0C4 01                         	dc.b	$01
0009C0C5 ECF5                       	smpsPSGAlterVol     $F5
0009C0C7 9207                       	dc.b	nF1, $07
0009C0C9 EC0B                       	smpsPSGAlterVol     $0B
0009C0CB 8004                       	dc.b	nRst, $04
0009C0CD ECF5                       	smpsPSGAlterVol     $F5
0009C0CF 9206                       	dc.b	nF1, $06
0009C0D1 EC0B                       	smpsPSGAlterVol     $0B
0009C0D3 8007                       	dc.b	nRst, $07
0009C0D5 E103                       	smpsAlterNote       $03
0009C0D7 0101                       	dc.b	$01, $01
0009C0D9 E100                       	smpsAlterNote       $00
0009C0DB 01                         	dc.b	$01
0009C0DC E1FA                       	smpsAlterNote       $FA
0009C0DE 01                         	dc.b	$01
0009C0DF E1FD                       	smpsAlterNote       $FD
0009C0E1 ECF5                       	smpsPSGAlterVol     $F5
0009C0E3 9206                       	dc.b	nF1, $06
0009C0E5 EC04                       	smpsPSGAlterVol     $04
0009C0E7 E701                       	dc.b	smpsNoAttack, $01
0009C0E9 EC07                       	smpsPSGAlterVol     $07
0009C0EB 8003                       	dc.b	nRst, $03
0009C0ED ECF5                       	smpsPSGAlterVol     $F5
0009C0EF 9206                       	dc.b	nF1, $06
0009C0F1 EC04                       	smpsPSGAlterVol     $04
0009C0F3 E701                       	dc.b	smpsNoAttack, $01
0009C0F5 EC07                       	smpsPSGAlterVol     $07
0009C0F7 8006                       	dc.b	nRst, $06
0009C0F9 E100                       	smpsAlterNote       $00
0009C0FB 01                         	dc.b	$01
0009C0FC E104                       	smpsAlterNote       $04
0009C0FE 01                         	dc.b	$01
0009C0FF E100                       	smpsAlterNote       $00
0009C101 01                         	dc.b	$01
0009C102 E1FD                       	smpsAlterNote       $FD
0009C104 01                         	dc.b	$01
0009C105 ECF5                       	smpsPSGAlterVol     $F5
0009C107 9206                       	dc.b	nF1, $06
0009C109 EC04                       	smpsPSGAlterVol     $04
0009C10B E701                       	dc.b	smpsNoAttack, $01
0009C10D EC07                       	smpsPSGAlterVol     $07
0009C10F 8003                       	dc.b	nRst, $03
0009C111 ECF5                       	smpsPSGAlterVol     $F5
0009C113 9207                       	dc.b	nF1, $07
0009C115 EC0B                       	smpsPSGAlterVol     $0B
0009C117 8007                       	dc.b	nRst, $07
0009C119 E104                       	smpsAlterNote       $04
0009C11B 0101                       	dc.b	$01, $01
0009C11D E1FB                       	smpsAlterNote       $FB
0009C11F 01                         	dc.b	$01
0009C120 E1F6                       	smpsAlterNote       $F6
0009C122 0101                       	dc.b	$01, $01
0009C124 E1FF                       	smpsAlterNote       $FF
0009C126 01                         	dc.b	$01
0009C127 E105                       	smpsAlterNote       $05
0009C129 01                         	dc.b	$01
0009C12A E104                       	smpsAlterNote       $04
0009C12C 01                         	dc.b	$01
0009C12D E1FB                       	smpsAlterNote       $FB
0009C12F 01                         	dc.b	$01
0009C130 E1F5                       	smpsAlterNote       $F5
0009C132 01                         	dc.b	$01
0009C133 E1FC                       	smpsAlterNote       $FC
0009C135 ECF5                       	smpsPSGAlterVol     $F5
0009C137 8B0E                       	dc.b	nBb0, $0E
0009C139 E102                       	smpsAlterNote       $02
0009C13B EC0B                       	smpsPSGAlterVol     $0B
0009C13D 8001                       	dc.b	nRst, $01
0009C13F E101                       	smpsAlterNote       $01
0009C141 01                         	dc.b	$01
0009C142 E1FC                       	smpsAlterNote       $FC
0009C144 01                         	dc.b	$01
0009C145 E1F9                       	smpsAlterNote       $F9
0009C147 0101                       	dc.b	$01, $01
0009C149 E1FF                       	smpsAlterNote       $FF
0009C14B 01                         	dc.b	$01
0009C14C E102                       	smpsAlterNote       $02
0009C14E 01                         	dc.b	$01
0009C14F E1FF                       	smpsAlterNote       $FF
0009C151 01                         	dc.b	$01
0009C152 E1FC                       	smpsAlterNote       $FC
0009C154 01                         	dc.b	$01
0009C155 E1F8                       	smpsAlterNote       $F8
0009C157 01                         	dc.b	$01
0009C158 E1FC                       	smpsAlterNote       $FC
0009C15A 01                         	dc.b	$01
0009C15B E101                       	smpsAlterNote       $01
0009C15D 01                         	dc.b	$01
0009C15E E102                       	smpsAlterNote       $02
0009C160 01                         	dc.b	$01
0009C161 E1FF                       	smpsAlterNote       $FF
0009C163 01                         	dc.b	$01
0009C164 E1FB                       	smpsAlterNote       $FB
0009C166 ECF5                       	smpsPSGAlterVol     $F5
0009C168 8D0D                       	dc.b	nC1, $0D
0009C16A E101                       	smpsAlterNote       $01
0009C16C EC0B                       	smpsPSGAlterVol     $0B
0009C16E 8001                       	dc.b	nRst, $01
0009C170 E102                       	smpsAlterNote       $02
0009C172 01                         	dc.b	$01
0009C173 E1FF                       	smpsAlterNote       $FF
0009C175 01                         	dc.b	$01
0009C176 E1F9                       	smpsAlterNote       $F9
0009C178 0101                       	dc.b	$01, $01
0009C17A E1FC                       	smpsAlterNote       $FC
0009C17C 01                         	dc.b	$01
0009C17D E101                       	smpsAlterNote       $01
0009C17F 0101                       	dc.b	$01, $01
0009C181 E1FC                       	smpsAlterNote       $FC
0009C183 01                         	dc.b	$01
0009C184 E1F9                       	smpsAlterNote       $F9
0009C186 0101                       	dc.b	$01, $01
0009C188 E1FF                       	smpsAlterNote       $FF
0009C18A 01                         	dc.b	$01
0009C18B E102                       	smpsAlterNote       $02
0009C18D 01                         	dc.b	$01
0009C18E E101                       	smpsAlterNote       $01
0009C190 01                         	dc.b	$01
0009C191 E1FC                       	smpsAlterNote       $FC
0009C193 ECF5                       	smpsPSGAlterVol     $F5
0009C195 8F0D                       	dc.b	nD1, $0D
0009C197 E1FF                       	smpsAlterNote       $FF
0009C199 EC04                       	smpsPSGAlterVol     $04
0009C19B E701                       	dc.b	smpsNoAttack, $01
0009C19D EC07                       	smpsPSGAlterVol     $07
0009C19F E103                       	smpsAlterNote       $03
0009C1A1 8001                       	dc.b	nRst, $01
0009C1A3 E102                       	smpsAlterNote       $02
0009C1A5 01                         	dc.b	$01
0009C1A6 E1FD                       	smpsAlterNote       $FD
0009C1A8 01                         	dc.b	$01
0009C1A9 E1F9                       	smpsAlterNote       $F9
0009C1AB 01                         	dc.b	$01
0009C1AC E1FD                       	smpsAlterNote       $FD
0009C1AE 01                         	dc.b	$01
0009C1AF E100                       	smpsAlterNote       $00
0009C1B1 01                         	dc.b	$01
0009C1B2 E103                       	smpsAlterNote       $03
0009C1B4 01                         	dc.b	$01
0009C1B5 E100                       	smpsAlterNote       $00
0009C1B7 01                         	dc.b	$01
0009C1B8 E1FA                       	smpsAlterNote       $FA
0009C1BA 01                         	dc.b	$01
0009C1BB E1F9                       	smpsAlterNote       $F9
0009C1BD 01                         	dc.b	$01
0009C1BE E1FD                       	smpsAlterNote       $FD
0009C1C0 01                         	dc.b	$01
0009C1C1 E102                       	smpsAlterNote       $02
0009C1C3 0101                       	dc.b	$01, $01
0009C1C5 E100                       	smpsAlterNote       $00
0009C1C7 01                         	dc.b	$01
0009C1C8 E1FD                       	smpsAlterNote       $FD
0009C1CA ECF5                       	smpsPSGAlterVol     $F5
0009C1CC 910D                       	dc.b	nE1, $0D
0009C1CE E103                       	smpsAlterNote       $03
0009C1D0 EC0B                       	smpsPSGAlterVol     $0B
0009C1D2 8001 01                    	dc.b	nRst, $01, $01
0009C1D5 E100                       	smpsAlterNote       $00
0009C1D7 01                         	dc.b	$01
0009C1D8 E1FA                       	smpsAlterNote       $FA
0009C1DA 0101                       	dc.b	$01, $01
0009C1DC E100                       	smpsAlterNote       $00
0009C1DE 01                         	dc.b	$01
0009C1DF E103                       	smpsAlterNote       $03
0009C1E1 01                         	dc.b	$01
0009C1E2 E1FD                       	smpsAlterNote       $FD
0009C1E4 ECF5                       	smpsPSGAlterVol     $F5
0009C1E6 9206                       	dc.b	nF1, $06
0009C1E8 EC04                       	smpsPSGAlterVol     $04
0009C1EA E701                       	dc.b	smpsNoAttack, $01
0009C1EC EC07                       	smpsPSGAlterVol     $07
0009C1EE 8003                       	dc.b	nRst, $03
0009C1F0 ECF5                       	smpsPSGAlterVol     $F5
0009C1F2 9207                       	dc.b	nF1, $07
0009C1F4 EC0B                       	smpsPSGAlterVol     $0B
0009C1F6 8006                       	dc.b	nRst, $06
0009C1F8 E100                       	smpsAlterNote       $00
0009C1FA 01                         	dc.b	$01
0009C1FB E103                       	smpsAlterNote       $03
0009C1FD 0101                       	dc.b	$01, $01
0009C1FF E1FD                       	smpsAlterNote       $FD
0009C201 01                         	dc.b	$01
0009C202 ECF5                       	smpsPSGAlterVol     $F5
0009C204 9407                       	dc.b	nG1, $07
0009C206 EC0B                       	smpsPSGAlterVol     $0B
0009C208 8004                       	dc.b	nRst, $04
0009C20A ECF5                       	smpsPSGAlterVol     $F5
0009C20C 9406                       	dc.b	nG1, $06
0009C20E EC04                       	smpsPSGAlterVol     $04
0009C210 E701                       	dc.b	smpsNoAttack, $01
0009C212 EC07                       	smpsPSGAlterVol     $07
0009C214 8006                       	dc.b	nRst, $06
0009C216 E103                       	smpsAlterNote       $03
0009C218 01                         	dc.b	$01
0009C219 E104                       	smpsAlterNote       $04
0009C21B 01                         	dc.b	$01
0009C21C E100                       	smpsAlterNote       $00
0009C21E 01                         	dc.b	$01
0009C21F E1F9                       	smpsAlterNote       $F9
0009C221 01                         	dc.b	$01
0009C222 E1FD                       	smpsAlterNote       $FD
0009C224 ECF5                       	smpsPSGAlterVol     $F5
0009C226 9206                       	dc.b	nF1, $06
0009C228 EC04                       	smpsPSGAlterVol     $04
0009C22A E701                       	dc.b	smpsNoAttack, $01
0009C22C EC07                       	smpsPSGAlterVol     $07
0009C22E 8003                       	dc.b	nRst, $03
0009C230 ECF5                       	smpsPSGAlterVol     $F5
0009C232 9206                       	dc.b	nF1, $06
0009C234 EC04                       	smpsPSGAlterVol     $04
0009C236 E701                       	dc.b	smpsNoAttack, $01
0009C238 EC07                       	smpsPSGAlterVol     $07
0009C23A 8006                       	dc.b	nRst, $06
0009C23C E100                       	smpsAlterNote       $00
0009C23E 01                         	dc.b	$01
0009C23F E104                       	smpsAlterNote       $04
0009C241 01                         	dc.b	$01
0009C242 E103                       	smpsAlterNote       $03
0009C244 01                         	dc.b	$01
0009C245 E1FD                       	smpsAlterNote       $FD
0009C247 01                         	dc.b	$01
0009C248 ECF5                       	smpsPSGAlterVol     $F5
0009C24A 9407                       	dc.b	nG1, $07
0009C24C EC0B                       	smpsPSGAlterVol     $0B
0009C24E 8004                       	dc.b	nRst, $04
0009C250 ECF5                       	smpsPSGAlterVol     $F5
0009C252 9406                       	dc.b	nG1, $06
0009C254 EC0B                       	smpsPSGAlterVol     $0B
0009C256 8007                       	dc.b	nRst, $07
0009C258 E103                       	smpsAlterNote       $03
0009C25A 0101                       	dc.b	$01, $01
0009C25C E100                       	smpsAlterNote       $00
0009C25E 01                         	dc.b	$01
0009C25F E1F9                       	smpsAlterNote       $F9
0009C261 01                         	dc.b	$01
0009C262 E1FD                       	smpsAlterNote       $FD
0009C264 ECF5                       	smpsPSGAlterVol     $F5
0009C266 9206                       	dc.b	nF1, $06
0009C268 EC04                       	smpsPSGAlterVol     $04
0009C26A E701                       	dc.b	smpsNoAttack, $01
0009C26C EC07                       	smpsPSGAlterVol     $07
0009C26E 8003                       	dc.b	nRst, $03
0009C270 ECF5                       	smpsPSGAlterVol     $F5
0009C272 9206                       	dc.b	nF1, $06
0009C274 EC04                       	smpsPSGAlterVol     $04
0009C276 E701                       	dc.b	smpsNoAttack, $01
0009C278 EC07                       	smpsPSGAlterVol     $07
0009C27A 8006                       	dc.b	nRst, $06
0009C27C E100                       	smpsAlterNote       $00
0009C27E 01                         	dc.b	$01
0009C27F E104                       	smpsAlterNote       $04
0009C281 01                         	dc.b	$01
0009C282 E100                       	smpsAlterNote       $00
0009C284 01                         	dc.b	$01
0009C285 E1FB                       	smpsAlterNote       $FB
0009C287 01                         	dc.b	$01
0009C288 E1FD                       	smpsAlterNote       $FD
0009C28A ECF5                       	smpsPSGAlterVol     $F5
0009C28C 9406                       	dc.b	nG1, $06
0009C28E EC04                       	smpsPSGAlterVol     $04
0009C290 E701                       	dc.b	smpsNoAttack, $01
0009C292 EC07                       	smpsPSGAlterVol     $07
0009C294 8003                       	dc.b	nRst, $03
0009C296 ECF5                       	smpsPSGAlterVol     $F5
0009C298 9407                       	dc.b	nG1, $07
0009C29A EC0B                       	smpsPSGAlterVol     $0B
0009C29C 8006                       	dc.b	nRst, $06
0009C29E E100                       	smpsAlterNote       $00
0009C2A0 01                         	dc.b	$01
0009C2A1 E103                       	smpsAlterNote       $03
0009C2A3 0101                       	dc.b	$01, $01
0009C2A5 E1FD                       	smpsAlterNote       $FD
0009C2A7 01                         	dc.b	$01
0009C2A8 ECF5                       	smpsPSGAlterVol     $F5
0009C2AA 9207                       	dc.b	nF1, $07
0009C2AC EC0B                       	smpsPSGAlterVol     $0B
0009C2AE 8004                       	dc.b	nRst, $04
0009C2B0 ECF5                       	smpsPSGAlterVol     $F5
0009C2B2 9206                       	dc.b	nF1, $06
0009C2B4 EC04                       	smpsPSGAlterVol     $04
0009C2B6 E701                       	dc.b	smpsNoAttack, $01
0009C2B8 ECFC                       	smpsPSGAlterVol     $FC
0009C2BA E1FC                       	smpsAlterNote       $FC
0009C2BC 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009C2C0 EC04                       	smpsPSGAlterVol     $04
0009C2C2 E701                       	dc.b	smpsNoAttack, $01
0009C2C4 ECFC                       	smpsPSGAlterVol     $FC
0009C2C6 9003                       	dc.b	nEb1, $03
0009C2C8 E1FD                       	smpsAlterNote       $FD
0009C2CA 9403                       	dc.b	nG1, $03
0009C2CC EC04                       	smpsPSGAlterVol     $04
0009C2CE E701                       	dc.b	smpsNoAttack, $01
0009C2D0 E1FE                       	smpsAlterNote       $FE
0009C2D2 ECFC                       	smpsPSGAlterVol     $FC
0009C2D4 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009C2D8 EC04                       	smpsPSGAlterVol     $04
0009C2DA E701                       	dc.b	smpsNoAttack, $01
0009C2DC EC07                       	smpsPSGAlterVol     $07
0009C2DE 8009                       	dc.b	nRst, $09
0009C2E0 E100                       	smpsAlterNote       $00
0009C2E2 01                         	dc.b	$01
0009C2E3 F6F5 19                    	smpsJump            music84_Jump07
0009C2E6                            
0009C2E6                            ; PSG2 Data
0009C2E6                            music84_PSG2:
0009C2E6 E1FC                       	smpsAlterNote       $FC
0009C2E8 EC04                       	smpsPSGAlterVol     $04
0009C2EA 8F03                       	dc.b	nD1, $03
0009C2EC E1FD                       	smpsAlterNote       $FD
0009C2EE 9203                       	dc.b	nF1, $03
0009C2F0 EC04                       	smpsPSGAlterVol     $04
0009C2F2 E701                       	dc.b	smpsNoAttack, $01
0009C2F4 E1FE                       	smpsAlterNote       $FE
0009C2F6 ECFC                       	smpsPSGAlterVol     $FC
0009C2F8 9603                       	dc.b	nA1, $03
0009C2FA E1FD                       	smpsAlterNote       $FD
0009C2FC 9103                       	dc.b	nE1, $03
0009C2FE EC04                       	smpsPSGAlterVol     $04
0009C300 E701                       	dc.b	smpsNoAttack, $01
0009C302 ECFC                       	smpsPSGAlterVol     $FC
0009C304 9403                       	dc.b	nG1, $03
0009C306 E1FE                       	smpsAlterNote       $FE
0009C308 9703                       	dc.b	nBb1, $03
0009C30A EC04                       	smpsPSGAlterVol     $04
0009C30C E701                       	dc.b	smpsNoAttack, $01
0009C30E E1FF                       	smpsAlterNote       $FF
0009C310 ECFC                       	smpsPSGAlterVol     $FC
0009C312 9B02                       	dc.b	nD2, $02
0009C314 EC04                       	smpsPSGAlterVol     $04
0009C316 E701                       	dc.b	smpsNoAttack, $01
0009C318 ECFC                       	smpsPSGAlterVol     $FC
0009C31A E1FE                       	smpsAlterNote       $FE
0009C31C 9A03                       	dc.b	nCs2, $03
0009C31E EC0B                       	smpsPSGAlterVol     $0B
0009C320 800A                       	dc.b	nRst, $0A
0009C322 E102                       	smpsAlterNote       $02
0009C324 01                         	dc.b	$01
0009C325 E10A                       	smpsAlterNote       $0A
0009C327 01                         	dc.b	$01
0009C328 E102                       	smpsAlterNote       $02
0009C32A 01                         	dc.b	$01
0009C32B E1FC                       	smpsAlterNote       $FC
0009C32D 01                         	dc.b	$01
0009C32E E10A                       	smpsAlterNote       $0A
0009C330 01                         	dc.b	$01
0009C331 E1FC                       	smpsAlterNote       $FC
0009C333 01                         	dc.b	$01
0009C334 E108                       	smpsAlterNote       $08
0009C336 01                         	dc.b	$01
0009C337 E10A                       	smpsAlterNote       $0A
0009C339 01                         	dc.b	$01
0009C33A E102                       	smpsAlterNote       $02
0009C33C 01                         	dc.b	$01
0009C33D E1F7                       	smpsAlterNote       $F7
0009C33F 0101                       	dc.b	$01, $01
0009C341 E102                       	smpsAlterNote       $02
0009C343 01                         	dc.b	$01
0009C344 E108                       	smpsAlterNote       $08
0009C346 0101                       	dc.b	$01, $01
0009C348 E1FC                       	smpsAlterNote       $FC
0009C34A 01                         	dc.b	$01
0009C34B E10A                       	smpsAlterNote       $0A
0009C34D 01                         	dc.b	$01
0009C34E E1F7                       	smpsAlterNote       $F7
0009C350 01                         	dc.b	$01
0009C351 E102                       	smpsAlterNote       $02
0009C353 01                         	dc.b	$01
0009C354 E10A                       	smpsAlterNote       $0A
0009C356 01                         	dc.b	$01
0009C357 E102                       	smpsAlterNote       $02
0009C359 01                         	dc.b	$01
0009C35A E1FC                       	smpsAlterNote       $FC
0009C35C 01                         	dc.b	$01
0009C35D                            
0009C35D                            music84_Jump06:
0009C35D E10A                       	smpsAlterNote       $0A
0009C35F 8001                       	dc.b	nRst, $01
0009C361 E1FC                       	smpsAlterNote       $FC
0009C363 01                         	dc.b	$01
0009C364 E108                       	smpsAlterNote       $08
0009C366 01                         	dc.b	$01
0009C367 E10A                       	smpsAlterNote       $0A
0009C369 01                         	dc.b	$01
0009C36A E1FC                       	smpsAlterNote       $FC
0009C36C ECF5                       	smpsPSGAlterVol     $F5
0009C36E 8F06                       	dc.b	nD1, $06
0009C370 EC04                       	smpsPSGAlterVol     $04
0009C372 E701                       	dc.b	smpsNoAttack, $01
0009C374 EC07                       	smpsPSGAlterVol     $07
0009C376 8003                       	dc.b	nRst, $03
0009C378 ECF5                       	smpsPSGAlterVol     $F5
0009C37A 8F06                       	dc.b	nD1, $06
0009C37C EC04                       	smpsPSGAlterVol     $04
0009C37E E701                       	dc.b	smpsNoAttack, $01
0009C380 EC07                       	smpsPSGAlterVol     $07
0009C382 8006                       	dc.b	nRst, $06
0009C384 E1FF                       	smpsAlterNote       $FF
0009C386 01                         	dc.b	$01
0009C387 E102                       	smpsAlterNote       $02
0009C389 01                         	dc.b	$01
0009C38A E1FF                       	smpsAlterNote       $FF
0009C38C 01                         	dc.b	$01
0009C38D E1F9                       	smpsAlterNote       $F9
0009C38F 01                         	dc.b	$01
0009C390 E1FC                       	smpsAlterNote       $FC
0009C392 ECF5                       	smpsPSGAlterVol     $F5
0009C394 9006                       	dc.b	nEb1, $06
0009C396 EC04                       	smpsPSGAlterVol     $04
0009C398 E701                       	dc.b	smpsNoAttack, $01
0009C39A EC07                       	smpsPSGAlterVol     $07
0009C39C 8003                       	dc.b	nRst, $03
0009C39E ECF5                       	smpsPSGAlterVol     $F5
0009C3A0 9007                       	dc.b	nEb1, $07
0009C3A2 EC0B                       	smpsPSGAlterVol     $0B
0009C3A4 8006                       	dc.b	nRst, $06
0009C3A6 E1FF                       	smpsAlterNote       $FF
0009C3A8 01                         	dc.b	$01
0009C3A9 E103                       	smpsAlterNote       $03
0009C3AB 0101                       	dc.b	$01, $01
0009C3AD E1FC                       	smpsAlterNote       $FC
0009C3AF 01                         	dc.b	$01
0009C3B0 ECF5                       	smpsPSGAlterVol     $F5
0009C3B2 8F07                       	dc.b	nD1, $07
0009C3B4 EC0B                       	smpsPSGAlterVol     $0B
0009C3B6 8004                       	dc.b	nRst, $04
0009C3B8 ECF5                       	smpsPSGAlterVol     $F5
0009C3BA 8F06                       	dc.b	nD1, $06
0009C3BC EC04                       	smpsPSGAlterVol     $04
0009C3BE E701                       	dc.b	smpsNoAttack, $01
0009C3C0 EC07                       	smpsPSGAlterVol     $07
0009C3C2 8006                       	dc.b	nRst, $06
0009C3C4 E102                       	smpsAlterNote       $02
0009C3C6 01                         	dc.b	$01
0009C3C7 E103                       	smpsAlterNote       $03
0009C3C9 01                         	dc.b	$01
0009C3CA E1FF                       	smpsAlterNote       $FF
0009C3CC 01                         	dc.b	$01
0009C3CD E1F9                       	smpsAlterNote       $F9
0009C3CF 01                         	dc.b	$01
0009C3D0 E1FC                       	smpsAlterNote       $FC
0009C3D2 ECF5                       	smpsPSGAlterVol     $F5
0009C3D4 8F06                       	dc.b	nD1, $06
0009C3D6 EC04                       	smpsPSGAlterVol     $04
0009C3D8 E701                       	dc.b	smpsNoAttack, $01
0009C3DA EC07                       	smpsPSGAlterVol     $07
0009C3DC 8003                       	dc.b	nRst, $03
0009C3DE ECF5                       	smpsPSGAlterVol     $F5
0009C3E0 8F06                       	dc.b	nD1, $06
0009C3E2 EC04                       	smpsPSGAlterVol     $04
0009C3E4 E701                       	dc.b	smpsNoAttack, $01
0009C3E6 EC07                       	smpsPSGAlterVol     $07
0009C3E8 8006                       	dc.b	nRst, $06
0009C3EA E1FF                       	smpsAlterNote       $FF
0009C3EC 01                         	dc.b	$01
0009C3ED E103                       	smpsAlterNote       $03
0009C3EF 01                         	dc.b	$01
0009C3F0 E1FF                       	smpsAlterNote       $FF
0009C3F2 01                         	dc.b	$01
0009C3F3 E1FC                       	smpsAlterNote       $FC
0009C3F5 01                         	dc.b	$01
0009C3F6 ECF5                       	smpsPSGAlterVol     $F5
0009C3F8 8F06                       	dc.b	nD1, $06
0009C3FA EC04                       	smpsPSGAlterVol     $04
0009C3FC E701                       	dc.b	smpsNoAttack, $01
0009C3FE EC07                       	smpsPSGAlterVol     $07
0009C400 8003                       	dc.b	nRst, $03
0009C402 ECF5                       	smpsPSGAlterVol     $F5
0009C404 8F07                       	dc.b	nD1, $07
0009C406 EC0B                       	smpsPSGAlterVol     $0B
0009C408 8007                       	dc.b	nRst, $07
0009C40A E101                       	smpsAlterNote       $01
0009C40C 0101                       	dc.b	$01, $01
0009C40E E1FC                       	smpsAlterNote       $FC
0009C410 01                         	dc.b	$01
0009C411 E1F9                       	smpsAlterNote       $F9
0009C413 01                         	dc.b	$01
0009C414 E1FC                       	smpsAlterNote       $FC
0009C416 ECF5                       	smpsPSGAlterVol     $F5
0009C418 9006                       	dc.b	nEb1, $06
0009C41A EC0B                       	smpsPSGAlterVol     $0B
0009C41C 8004                       	dc.b	nRst, $04
0009C41E ECF5                       	smpsPSGAlterVol     $F5
0009C420 9006                       	dc.b	nEb1, $06
0009C422 EC04                       	smpsPSGAlterVol     $04
0009C424 E701                       	dc.b	smpsNoAttack, $01
0009C426 EC07                       	smpsPSGAlterVol     $07
0009C428 8006                       	dc.b	nRst, $06
0009C42A E100                       	smpsAlterNote       $00
0009C42C 01                         	dc.b	$01
0009C42D E102                       	smpsAlterNote       $02
0009C42F 01                         	dc.b	$01
0009C430 E100                       	smpsAlterNote       $00
0009C432 01                         	dc.b	$01
0009C433 E1FD                       	smpsAlterNote       $FD
0009C435 01                         	dc.b	$01
0009C436 E1FF                       	smpsAlterNote       $FF
0009C438 ECF5                       	smpsPSGAlterVol     $F5
0009C43A 9B06                       	dc.b	nD2, $06
0009C43C EC04                       	smpsPSGAlterVol     $04
0009C43E E701                       	dc.b	smpsNoAttack, $01
0009C440 EC07                       	smpsPSGAlterVol     $07
0009C442 8003                       	dc.b	nRst, $03
0009C444 ECF5                       	smpsPSGAlterVol     $F5
0009C446 9B07                       	dc.b	nD2, $07
0009C448 EC0B                       	smpsPSGAlterVol     $0B
0009C44A 8006                       	dc.b	nRst, $06
0009C44C E102                       	smpsAlterNote       $02
0009C44E 01                         	dc.b	$01
0009C44F E106                       	smpsAlterNote       $06
0009C451 01                         	dc.b	$01
0009C452 E105                       	smpsAlterNote       $05
0009C454 01                         	dc.b	$01
0009C455 E1FF                       	smpsAlterNote       $FF
0009C457 01                         	dc.b	$01
0009C458 ECF5                       	smpsPSGAlterVol     $F5
0009C45A 9B07                       	dc.b	nD2, $07
0009C45C EC0B                       	smpsPSGAlterVol     $0B
0009C45E 8004                       	dc.b	nRst, $04
0009C460 ECF5                       	smpsPSGAlterVol     $F5
0009C462 9B06                       	dc.b	nD2, $06
0009C464 EC0B                       	smpsPSGAlterVol     $0B
0009C466 8007                       	dc.b	nRst, $07
0009C468 E105                       	smpsAlterNote       $05
0009C46A 0101                       	dc.b	$01, $01
0009C46C E102                       	smpsAlterNote       $02
0009C46E 01                         	dc.b	$01
0009C46F E1FC                       	smpsAlterNote       $FC
0009C471 01                         	dc.b	$01
0009C472 E1FF                       	smpsAlterNote       $FF
0009C474 ECF5                       	smpsPSGAlterVol     $F5
0009C476 9B06                       	dc.b	nD2, $06
0009C478 EC04                       	smpsPSGAlterVol     $04
0009C47A E701                       	dc.b	smpsNoAttack, $01
0009C47C EC07                       	smpsPSGAlterVol     $07
0009C47E 8003                       	dc.b	nRst, $03
0009C480 ECF5                       	smpsPSGAlterVol     $F5
0009C482 9B06                       	dc.b	nD2, $06
0009C484 EC04                       	smpsPSGAlterVol     $04
0009C486 E701                       	dc.b	smpsNoAttack, $01
0009C488 EC07                       	smpsPSGAlterVol     $07
0009C48A 8006                       	dc.b	nRst, $06
0009C48C E102                       	smpsAlterNote       $02
0009C48E 01                         	dc.b	$01
0009C48F E106                       	smpsAlterNote       $06
0009C491 01                         	dc.b	$01
0009C492 E102                       	smpsAlterNote       $02
0009C494 01                         	dc.b	$01
0009C495 E1FF                       	smpsAlterNote       $FF
0009C497 01                         	dc.b	$01
0009C498 ECF5                       	smpsPSGAlterVol     $F5
0009C49A 9B06                       	dc.b	nD2, $06
0009C49C EC04                       	smpsPSGAlterVol     $04
0009C49E E701                       	dc.b	smpsNoAttack, $01
0009C4A0 EC07                       	smpsPSGAlterVol     $07
0009C4A2 8003                       	dc.b	nRst, $03
0009C4A4 ECF5                       	smpsPSGAlterVol     $F5
0009C4A6 9B07                       	dc.b	nD2, $07
0009C4A8 EC0B                       	smpsPSGAlterVol     $0B
0009C4AA 8007                       	dc.b	nRst, $07
0009C4AC E105                       	smpsAlterNote       $05
0009C4AE 0101                       	dc.b	$01, $01
0009C4B0 E1FF                       	smpsAlterNote       $FF
0009C4B2 01                         	dc.b	$01
0009C4B3 E1FC                       	smpsAlterNote       $FC
0009C4B5 01                         	dc.b	$01
0009C4B6 E1FF                       	smpsAlterNote       $FF
0009C4B8 ECF5                       	smpsPSGAlterVol     $F5
0009C4BA 9B06                       	dc.b	nD2, $06
0009C4BC EC0B                       	smpsPSGAlterVol     $0B
0009C4BE 8004                       	dc.b	nRst, $04
0009C4C0 ECF5                       	smpsPSGAlterVol     $F5
0009C4C2 9B06                       	dc.b	nD2, $06
0009C4C4 EC04                       	smpsPSGAlterVol     $04
0009C4C6 E701                       	dc.b	smpsNoAttack, $01
0009C4C8 EC07                       	smpsPSGAlterVol     $07
0009C4CA 8006                       	dc.b	nRst, $06
0009C4CC E105                       	smpsAlterNote       $05
0009C4CE 01                         	dc.b	$01
0009C4CF E106                       	smpsAlterNote       $06
0009C4D1 01                         	dc.b	$01
0009C4D2 E102                       	smpsAlterNote       $02
0009C4D4 01                         	dc.b	$01
0009C4D5 E1FC                       	smpsAlterNote       $FC
0009C4D7 01                         	dc.b	$01
0009C4D8 E1FF                       	smpsAlterNote       $FF
0009C4DA ECF5                       	smpsPSGAlterVol     $F5
0009C4DC 9B06                       	dc.b	nD2, $06
0009C4DE EC04                       	smpsPSGAlterVol     $04
0009C4E0 E701                       	dc.b	smpsNoAttack, $01
0009C4E2 EC07                       	smpsPSGAlterVol     $07
0009C4E4 8003                       	dc.b	nRst, $03
0009C4E6 ECF5                       	smpsPSGAlterVol     $F5
0009C4E8 9B06                       	dc.b	nD2, $06
0009C4EA EC04                       	smpsPSGAlterVol     $04
0009C4EC E701                       	dc.b	smpsNoAttack, $01
0009C4EE EC07                       	smpsPSGAlterVol     $07
0009C4F0 8006                       	dc.b	nRst, $06
0009C4F2 E102                       	smpsAlterNote       $02
0009C4F4 01                         	dc.b	$01
0009C4F5 E106                       	smpsAlterNote       $06
0009C4F7 01                         	dc.b	$01
0009C4F8 E105                       	smpsAlterNote       $05
0009C4FA 01                         	dc.b	$01
0009C4FB E1FF                       	smpsAlterNote       $FF
0009C4FD 01                         	dc.b	$01
0009C4FE ECF5                       	smpsPSGAlterVol     $F5
0009C500 9B07                       	dc.b	nD2, $07
0009C502 EC0B                       	smpsPSGAlterVol     $0B
0009C504 8004                       	dc.b	nRst, $04
0009C506 ECF5                       	smpsPSGAlterVol     $F5
0009C508 9B06                       	dc.b	nD2, $06
0009C50A EC0B                       	smpsPSGAlterVol     $0B
0009C50C 8007                       	dc.b	nRst, $07
0009C50E E105                       	smpsAlterNote       $05
0009C510 0101                       	dc.b	$01, $01
0009C512 E102                       	smpsAlterNote       $02
0009C514 01                         	dc.b	$01
0009C515 E1FC                       	smpsAlterNote       $FC
0009C517 01                         	dc.b	$01
0009C518 E1FF                       	smpsAlterNote       $FF
0009C51A ECF5                       	smpsPSGAlterVol     $F5
0009C51C 9B06                       	dc.b	nD2, $06
0009C51E EC04                       	smpsPSGAlterVol     $04
0009C520 E701                       	dc.b	smpsNoAttack, $01
0009C522 EC07                       	smpsPSGAlterVol     $07
0009C524 8003                       	dc.b	nRst, $03
0009C526 ECF5                       	smpsPSGAlterVol     $F5
0009C528 9B06                       	dc.b	nD2, $06
0009C52A EC04                       	smpsPSGAlterVol     $04
0009C52C E701                       	dc.b	smpsNoAttack, $01
0009C52E EC07                       	smpsPSGAlterVol     $07
0009C530 8006                       	dc.b	nRst, $06
0009C532 E102                       	smpsAlterNote       $02
0009C534 01                         	dc.b	$01
0009C535 E106                       	smpsAlterNote       $06
0009C537 01                         	dc.b	$01
0009C538 E102                       	smpsAlterNote       $02
0009C53A 01                         	dc.b	$01
0009C53B E1FF                       	smpsAlterNote       $FF
0009C53D 01                         	dc.b	$01
0009C53E ECF5                       	smpsPSGAlterVol     $F5
0009C540 9B06                       	dc.b	nD2, $06
0009C542 EC04                       	smpsPSGAlterVol     $04
0009C544 E701                       	dc.b	smpsNoAttack, $01
0009C546 EC07                       	smpsPSGAlterVol     $07
0009C548 8003                       	dc.b	nRst, $03
0009C54A ECF5                       	smpsPSGAlterVol     $F5
0009C54C 9B07                       	dc.b	nD2, $07
0009C54E E1FE                       	smpsAlterNote       $FE
0009C550 9706                       	dc.b	nBb1, $06
0009C552 EC04                       	smpsPSGAlterVol     $04
0009C554 E701                       	dc.b	smpsNoAttack, $01
0009C556 ECFC                       	smpsPSGAlterVol     $FC
0009C558 9703                       	dc.b	nBb1, $03
0009C55A EC04                       	smpsPSGAlterVol     $04
0009C55C E701                       	dc.b	smpsNoAttack, $01
0009C55E ECFC                       	smpsPSGAlterVol     $FC
0009C560 9702                       	dc.b	nBb1, $02
0009C562 EC04                       	smpsPSGAlterVol     $04
0009C564 E701                       	dc.b	smpsNoAttack, $01
0009C566 ECFC                       	smpsPSGAlterVol     $FC
0009C568 9606                       	dc.b	nA1, $06
0009C56A EC04                       	smpsPSGAlterVol     $04
0009C56C E701                       	dc.b	smpsNoAttack, $01
0009C56E EC07                       	smpsPSGAlterVol     $07
0009C570 8006                       	dc.b	nRst, $06
0009C572 E101                       	smpsAlterNote       $01
0009C574 01                         	dc.b	$01
0009C575 E107                       	smpsAlterNote       $07
0009C577 01                         	dc.b	$01
0009C578 E101                       	smpsAlterNote       $01
0009C57A 01                         	dc.b	$01
0009C57B E1F8                       	smpsAlterNote       $F8
0009C57D 01                         	dc.b	$01
0009C57E E1F7                       	smpsAlterNote       $F7
0009C580 01                         	dc.b	$01
0009C581 E1FC                       	smpsAlterNote       $FC
0009C583 01                         	dc.b	$01
0009C584 E106                       	smpsAlterNote       $06
0009C586 01                         	dc.b	$01
0009C587 E107                       	smpsAlterNote       $07
0009C589 01                         	dc.b	$01
0009C58A E101                       	smpsAlterNote       $01
0009C58C 01                         	dc.b	$01
0009C58D E1F8                       	smpsAlterNote       $F8
0009C58F 0101                       	dc.b	$01, $01
0009C591 E1FC                       	smpsAlterNote       $FC
0009C593 ECF5                       	smpsPSGAlterVol     $F5
0009C595 8F06                       	dc.b	nD1, $06
0009C597 EC04                       	smpsPSGAlterVol     $04
0009C599 E701                       	dc.b	smpsNoAttack, $01
0009C59B EC07                       	smpsPSGAlterVol     $07
0009C59D 8003                       	dc.b	nRst, $03
0009C59F ECF5                       	smpsPSGAlterVol     $F5
0009C5A1 8F06                       	dc.b	nD1, $06
0009C5A3 EC04                       	smpsPSGAlterVol     $04
0009C5A5 E701                       	dc.b	smpsNoAttack, $01
0009C5A7 EC07                       	smpsPSGAlterVol     $07
0009C5A9 8006                       	dc.b	nRst, $06
0009C5AB E1FF                       	smpsAlterNote       $FF
0009C5AD 01                         	dc.b	$01
0009C5AE E102                       	smpsAlterNote       $02
0009C5B0 01                         	dc.b	$01
0009C5B1 E101                       	smpsAlterNote       $01
0009C5B3 01                         	dc.b	$01
0009C5B4 E1FC                       	smpsAlterNote       $FC
0009C5B6 01                         	dc.b	$01
0009C5B7 ECF5                       	smpsPSGAlterVol     $F5
0009C5B9 9007                       	dc.b	nEb1, $07
0009C5BB EC0B                       	smpsPSGAlterVol     $0B
0009C5BD 8004                       	dc.b	nRst, $04
0009C5BF ECF5                       	smpsPSGAlterVol     $F5
0009C5C1 9006                       	dc.b	nEb1, $06
0009C5C3 EC0B                       	smpsPSGAlterVol     $0B
0009C5C5 8007                       	dc.b	nRst, $07
0009C5C7 E103                       	smpsAlterNote       $03
0009C5C9 0101                       	dc.b	$01, $01
0009C5CB E1FC                       	smpsAlterNote       $FC
0009C5CD 01                         	dc.b	$01
0009C5CE E1F9                       	smpsAlterNote       $F9
0009C5D0 01                         	dc.b	$01
0009C5D1 E1FC                       	smpsAlterNote       $FC
0009C5D3 ECF5                       	smpsPSGAlterVol     $F5
0009C5D5 8F06                       	dc.b	nD1, $06
0009C5D7 EC04                       	smpsPSGAlterVol     $04
0009C5D9 E701                       	dc.b	smpsNoAttack, $01
0009C5DB EC07                       	smpsPSGAlterVol     $07
0009C5DD 8003                       	dc.b	nRst, $03
0009C5DF ECF5                       	smpsPSGAlterVol     $F5
0009C5E1 8F06                       	dc.b	nD1, $06
0009C5E3 EC04                       	smpsPSGAlterVol     $04
0009C5E5 E701                       	dc.b	smpsNoAttack, $01
0009C5E7 EC07                       	smpsPSGAlterVol     $07
0009C5E9 8006                       	dc.b	nRst, $06
0009C5EB E1FF                       	smpsAlterNote       $FF
0009C5ED 01                         	dc.b	$01
0009C5EE E103                       	smpsAlterNote       $03
0009C5F0 01                         	dc.b	$01
0009C5F1 E1FF                       	smpsAlterNote       $FF
0009C5F3 01                         	dc.b	$01
0009C5F4 E1F9                       	smpsAlterNote       $F9
0009C5F6 01                         	dc.b	$01
0009C5F7 E1FC                       	smpsAlterNote       $FC
0009C5F9 ECF5                       	smpsPSGAlterVol     $F5
0009C5FB 8F06                       	dc.b	nD1, $06
0009C5FD EC04                       	smpsPSGAlterVol     $04
0009C5FF E701                       	dc.b	smpsNoAttack, $01
0009C601 EC07                       	smpsPSGAlterVol     $07
0009C603 8003                       	dc.b	nRst, $03
0009C605 ECF5                       	smpsPSGAlterVol     $F5
0009C607 8F07                       	dc.b	nD1, $07
0009C609 EC0B                       	smpsPSGAlterVol     $0B
0009C60B 8006                       	dc.b	nRst, $06
0009C60D E1FF                       	smpsAlterNote       $FF
0009C60F 01                         	dc.b	$01
0009C610 E102                       	smpsAlterNote       $02
0009C612 0101                       	dc.b	$01, $01
0009C614 E1FC                       	smpsAlterNote       $FC
0009C616 01                         	dc.b	$01
0009C617 ECF5                       	smpsPSGAlterVol     $F5
0009C619 8F07                       	dc.b	nD1, $07
0009C61B EC0B                       	smpsPSGAlterVol     $0B
0009C61D 8004                       	dc.b	nRst, $04
0009C61F ECF5                       	smpsPSGAlterVol     $F5
0009C621 8F06                       	dc.b	nD1, $06
0009C623 EC04                       	smpsPSGAlterVol     $04
0009C625 E701                       	dc.b	smpsNoAttack, $01
0009C627 EC07                       	smpsPSGAlterVol     $07
0009C629 8006                       	dc.b	nRst, $06
0009C62B E101                       	smpsAlterNote       $01
0009C62D 01                         	dc.b	$01
0009C62E E102                       	smpsAlterNote       $02
0009C630 01                         	dc.b	$01
0009C631 E1FF                       	smpsAlterNote       $FF
0009C633 01                         	dc.b	$01
0009C634 E1F9                       	smpsAlterNote       $F9
0009C636 01                         	dc.b	$01
0009C637 E1FC                       	smpsAlterNote       $FC
0009C639 ECF5                       	smpsPSGAlterVol     $F5
0009C63B 9006                       	dc.b	nEb1, $06
0009C63D EC04                       	smpsPSGAlterVol     $04
0009C63F E701                       	dc.b	smpsNoAttack, $01
0009C641 EC07                       	smpsPSGAlterVol     $07
0009C643 8003                       	dc.b	nRst, $03
0009C645 ECF5                       	smpsPSGAlterVol     $F5
0009C647 9006                       	dc.b	nEb1, $06
0009C649 EC04                       	smpsPSGAlterVol     $04
0009C64B E701                       	dc.b	smpsNoAttack, $01
0009C64D EC07                       	smpsPSGAlterVol     $07
0009C64F 8006                       	dc.b	nRst, $06
0009C651 E100                       	smpsAlterNote       $00
0009C653 01                         	dc.b	$01
0009C654 E102                       	smpsAlterNote       $02
0009C656 01                         	dc.b	$01
0009C657 E100                       	smpsAlterNote       $00
0009C659 01                         	dc.b	$01
0009C65A E1FF                       	smpsAlterNote       $FF
0009C65C 01                         	dc.b	$01
0009C65D ECF5                       	smpsPSGAlterVol     $F5
0009C65F 9B06                       	dc.b	nD2, $06
0009C661 EC04                       	smpsPSGAlterVol     $04
0009C663 E701                       	dc.b	smpsNoAttack, $01
0009C665 EC07                       	smpsPSGAlterVol     $07
0009C667 8003                       	dc.b	nRst, $03
0009C669 ECF5                       	smpsPSGAlterVol     $F5
0009C66B 9B07                       	dc.b	nD2, $07
0009C66D EC0B                       	smpsPSGAlterVol     $0B
0009C66F 8007                       	dc.b	nRst, $07
0009C671 E105                       	smpsAlterNote       $05
0009C673 0101                       	dc.b	$01, $01
0009C675 E1FF                       	smpsAlterNote       $FF
0009C677 01                         	dc.b	$01
0009C678 E1FC                       	smpsAlterNote       $FC
0009C67A 01                         	dc.b	$01
0009C67B E1FF                       	smpsAlterNote       $FF
0009C67D ECF5                       	smpsPSGAlterVol     $F5
0009C67F 9B06                       	dc.b	nD2, $06
0009C681 EC0B                       	smpsPSGAlterVol     $0B
0009C683 8004                       	dc.b	nRst, $04
0009C685 ECF5                       	smpsPSGAlterVol     $F5
0009C687 9B06                       	dc.b	nD2, $06
0009C689 EC04                       	smpsPSGAlterVol     $04
0009C68B E701                       	dc.b	smpsNoAttack, $01
0009C68D EC07                       	smpsPSGAlterVol     $07
0009C68F 8006                       	dc.b	nRst, $06
0009C691 E102                       	smpsAlterNote       $02
0009C693 01                         	dc.b	$01
0009C694 E106                       	smpsAlterNote       $06
0009C696 01                         	dc.b	$01
0009C697 E102                       	smpsAlterNote       $02
0009C699 01                         	dc.b	$01
0009C69A E1FC                       	smpsAlterNote       $FC
0009C69C 01                         	dc.b	$01
0009C69D E1FF                       	smpsAlterNote       $FF
0009C69F ECF5                       	smpsPSGAlterVol     $F5
0009C6A1 9B06                       	dc.b	nD2, $06
0009C6A3 EC04                       	smpsPSGAlterVol     $04
0009C6A5 E701                       	dc.b	smpsNoAttack, $01
0009C6A7 EC07                       	smpsPSGAlterVol     $07
0009C6A9 8003                       	dc.b	nRst, $03
0009C6AB ECF5                       	smpsPSGAlterVol     $F5
0009C6AD 9B07                       	dc.b	nD2, $07
0009C6AF EC0B                       	smpsPSGAlterVol     $0B
0009C6B1 8006                       	dc.b	nRst, $06
0009C6B3 E102                       	smpsAlterNote       $02
0009C6B5 01                         	dc.b	$01
0009C6B6 E105                       	smpsAlterNote       $05
0009C6B8 0101                       	dc.b	$01, $01
0009C6BA E1FF                       	smpsAlterNote       $FF
0009C6BC 01                         	dc.b	$01
0009C6BD ECF5                       	smpsPSGAlterVol     $F5
0009C6BF 9B07                       	dc.b	nD2, $07
0009C6C1 EC0B                       	smpsPSGAlterVol     $0B
0009C6C3 8004                       	dc.b	nRst, $04
0009C6C5 ECF5                       	smpsPSGAlterVol     $F5
0009C6C7 9B06                       	dc.b	nD2, $06
0009C6C9 EC0B                       	smpsPSGAlterVol     $0B
0009C6CB 8007                       	dc.b	nRst, $07
0009C6CD E105                       	smpsAlterNote       $05
0009C6CF 0101                       	dc.b	$01, $01
0009C6D1 E102                       	smpsAlterNote       $02
0009C6D3 01                         	dc.b	$01
0009C6D4 E1FC                       	smpsAlterNote       $FC
0009C6D6 01                         	dc.b	$01
0009C6D7 E1FF                       	smpsAlterNote       $FF
0009C6D9 ECF5                       	smpsPSGAlterVol     $F5
0009C6DB 9B06                       	dc.b	nD2, $06
0009C6DD EC04                       	smpsPSGAlterVol     $04
0009C6DF E701                       	dc.b	smpsNoAttack, $01
0009C6E1 EC07                       	smpsPSGAlterVol     $07
0009C6E3 8003                       	dc.b	nRst, $03
0009C6E5 ECF5                       	smpsPSGAlterVol     $F5
0009C6E7 9B06                       	dc.b	nD2, $06
0009C6E9 EC04                       	smpsPSGAlterVol     $04
0009C6EB E701                       	dc.b	smpsNoAttack, $01
0009C6ED EC07                       	smpsPSGAlterVol     $07
0009C6EF 8006                       	dc.b	nRst, $06
0009C6F1 E102                       	smpsAlterNote       $02
0009C6F3 01                         	dc.b	$01
0009C6F4 E106                       	smpsAlterNote       $06
0009C6F6 01                         	dc.b	$01
0009C6F7 E102                       	smpsAlterNote       $02
0009C6F9 01                         	dc.b	$01
0009C6FA E1FF                       	smpsAlterNote       $FF
0009C6FC 01                         	dc.b	$01
0009C6FD ECF5                       	smpsPSGAlterVol     $F5
0009C6FF 9B06                       	dc.b	nD2, $06
0009C701 EC04                       	smpsPSGAlterVol     $04
0009C703 E701                       	dc.b	smpsNoAttack, $01
0009C705 EC07                       	smpsPSGAlterVol     $07
0009C707 8003                       	dc.b	nRst, $03
0009C709 ECF5                       	smpsPSGAlterVol     $F5
0009C70B 9B07                       	dc.b	nD2, $07
0009C70D EC0B                       	smpsPSGAlterVol     $0B
0009C70F 8007                       	dc.b	nRst, $07
0009C711 E105                       	smpsAlterNote       $05
0009C713 0101                       	dc.b	$01, $01
0009C715 E1FF                       	smpsAlterNote       $FF
0009C717 01                         	dc.b	$01
0009C718 E1FC                       	smpsAlterNote       $FC
0009C71A 01                         	dc.b	$01
0009C71B E1FF                       	smpsAlterNote       $FF
0009C71D ECF5                       	smpsPSGAlterVol     $F5
0009C71F 9B06                       	dc.b	nD2, $06
0009C721 EC0B                       	smpsPSGAlterVol     $0B
0009C723 8004                       	dc.b	nRst, $04
0009C725 ECF5                       	smpsPSGAlterVol     $F5
0009C727 9B06                       	dc.b	nD2, $06
0009C729 EC04                       	smpsPSGAlterVol     $04
0009C72B E701                       	dc.b	smpsNoAttack, $01
0009C72D EC07                       	smpsPSGAlterVol     $07
0009C72F 8006                       	dc.b	nRst, $06
0009C731 E102                       	smpsAlterNote       $02
0009C733 01                         	dc.b	$01
0009C734 E106                       	smpsAlterNote       $06
0009C736 01                         	dc.b	$01
0009C737 E102                       	smpsAlterNote       $02
0009C739 01                         	dc.b	$01
0009C73A E1FC                       	smpsAlterNote       $FC
0009C73C 01                         	dc.b	$01
0009C73D E1FF                       	smpsAlterNote       $FF
0009C73F ECF5                       	smpsPSGAlterVol     $F5
0009C741 9B06                       	dc.b	nD2, $06
0009C743 EC04                       	smpsPSGAlterVol     $04
0009C745 E701                       	dc.b	smpsNoAttack, $01
0009C747 EC07                       	smpsPSGAlterVol     $07
0009C749 8003                       	dc.b	nRst, $03
0009C74B ECF5                       	smpsPSGAlterVol     $F5
0009C74D 9B06                       	dc.b	nD2, $06
0009C74F EC04                       	smpsPSGAlterVol     $04
0009C751 E701                       	dc.b	smpsNoAttack, $01
0009C753 EC07                       	smpsPSGAlterVol     $07
0009C755 8006                       	dc.b	nRst, $06
0009C757 E102                       	smpsAlterNote       $02
0009C759 01                         	dc.b	$01
0009C75A E106                       	smpsAlterNote       $06
0009C75C 01                         	dc.b	$01
0009C75D E105                       	smpsAlterNote       $05
0009C75F 01                         	dc.b	$01
0009C760 E1FF                       	smpsAlterNote       $FF
0009C762 01                         	dc.b	$01
0009C763 ECF5                       	smpsPSGAlterVol     $F5
0009C765 9B07                       	dc.b	nD2, $07
0009C767 EC0B                       	smpsPSGAlterVol     $0B
0009C769 8004                       	dc.b	nRst, $04
0009C76B ECF5                       	smpsPSGAlterVol     $F5
0009C76D 9B06                       	dc.b	nD2, $06
0009C76F EC0B                       	smpsPSGAlterVol     $0B
0009C771 8007                       	dc.b	nRst, $07
0009C773 E105                       	smpsAlterNote       $05
0009C775 0101                       	dc.b	$01, $01
0009C777 E101                       	smpsAlterNote       $01
0009C779 01                         	dc.b	$01
0009C77A E1FB                       	smpsAlterNote       $FB
0009C77C 01                         	dc.b	$01
0009C77D E1FE                       	smpsAlterNote       $FE
0009C77F ECF5                       	smpsPSGAlterVol     $F5
0009C781 9A06                       	dc.b	nCs2, $06
0009C783 EC04                       	smpsPSGAlterVol     $04
0009C785 E701                       	dc.b	smpsNoAttack, $01
0009C787 EC07                       	smpsPSGAlterVol     $07
0009C789 8003                       	dc.b	nRst, $03
0009C78B ECF5                       	smpsPSGAlterVol     $F5
0009C78D 9A06                       	dc.b	nCs2, $06
0009C78F EC04                       	smpsPSGAlterVol     $04
0009C791 E701                       	dc.b	smpsNoAttack, $01
0009C793 EC07                       	smpsPSGAlterVol     $07
0009C795 8003                       	dc.b	nRst, $03
0009C797 E1FC                       	smpsAlterNote       $FC
0009C799 ECF5                       	smpsPSGAlterVol     $F5
0009C79B 8F07                       	dc.b	nD1, $07
0009C79D EC0B                       	smpsPSGAlterVol     $0B
0009C79F 8006                       	dc.b	nRst, $06
0009C7A1 E1FF                       	smpsAlterNote       $FF
0009C7A3 01                         	dc.b	$01
0009C7A4 E103                       	smpsAlterNote       $03
0009C7A6 01                         	dc.b	$01
0009C7A7 E102                       	smpsAlterNote       $02
0009C7A9 01                         	dc.b	$01
0009C7AA E1FC                       	smpsAlterNote       $FC
0009C7AC 01                         	dc.b	$01
0009C7AD E1F8                       	smpsAlterNote       $F8
0009C7AF 01                         	dc.b	$01
0009C7B0 E1FC                       	smpsAlterNote       $FC
0009C7B2 01                         	dc.b	$01
0009C7B3 E1FF                       	smpsAlterNote       $FF
0009C7B5 01                         	dc.b	$01
0009C7B6 E103                       	smpsAlterNote       $03
0009C7B8 01                         	dc.b	$01
0009C7B9 E1FC                       	smpsAlterNote       $FC
0009C7BB ECF5                       	smpsPSGAlterVol     $F5
0009C7BD 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009C7C1 EC04                       	smpsPSGAlterVol     $04
0009C7C3 E701                       	dc.b	smpsNoAttack, $01
0009C7C5 EC07                       	smpsPSGAlterVol     $07
0009C7C7 8009                       	dc.b	nRst, $09
0009C7C9 E1FF                       	smpsAlterNote       $FF
0009C7CB 01                         	dc.b	$01
0009C7CC E103                       	smpsAlterNote       $03
0009C7CE 01                         	dc.b	$01
0009C7CF E102                       	smpsAlterNote       $02
0009C7D1 01                         	dc.b	$01
0009C7D2 E1FC                       	smpsAlterNote       $FC
0009C7D4 01                         	dc.b	$01
0009C7D5 E1F8                       	smpsAlterNote       $F8
0009C7D7 01                         	dc.b	$01
0009C7D8 E1FC                       	smpsAlterNote       $FC
0009C7DA 01                         	dc.b	$01
0009C7DB E1FF                       	smpsAlterNote       $FF
0009C7DD 01                         	dc.b	$01
0009C7DE E103                       	smpsAlterNote       $03
0009C7E0 01                         	dc.b	$01
0009C7E1 E1FF                       	smpsAlterNote       $FF
0009C7E3 01                         	dc.b	$01
0009C7E4 E1F9                       	smpsAlterNote       $F9
0009C7E6 01                         	dc.b	$01
0009C7E7 E1F8                       	smpsAlterNote       $F8
0009C7E9 01                         	dc.b	$01
0009C7EA E1FC                       	smpsAlterNote       $FC
0009C7EC 01                         	dc.b	$01
0009C7ED E102                       	smpsAlterNote       $02
0009C7EF 0101                       	dc.b	$01, $01
0009C7F1 E1FF                       	smpsAlterNote       $FF
0009C7F3 01                         	dc.b	$01
0009C7F4 E1FC                       	smpsAlterNote       $FC
0009C7F6 ECF5                       	smpsPSGAlterVol     $F5
0009C7F8 8F02                       	dc.b	nD1, $02
0009C7FA EC04                       	smpsPSGAlterVol     $04
0009C7FC E701                       	dc.b	smpsNoAttack, $01
0009C7FE ECFC                       	smpsPSGAlterVol     $FC
0009C800 E1FB                       	smpsAlterNote       $FB
0009C802 8D06                       	dc.b	nC1, $06
0009C804 EC04                       	smpsPSGAlterVol     $04
0009C806 E701                       	dc.b	smpsNoAttack, $01
0009C808 EC07                       	smpsPSGAlterVol     $07
0009C80A 8006                       	dc.b	nRst, $06
0009C80C E1FE                       	smpsAlterNote       $FE
0009C80E 01                         	dc.b	$01
0009C80F E102                       	smpsAlterNote       $02
0009C811 01                         	dc.b	$01
0009C812 E1FE                       	smpsAlterNote       $FE
0009C814 01                         	dc.b	$01
0009C815 E1FB                       	smpsAlterNote       $FB
0009C817 01                         	dc.b	$01
0009C818 E1F7                       	smpsAlterNote       $F7
0009C81A 01                         	dc.b	$01
0009C81B E1FB                       	smpsAlterNote       $FB
0009C81D 01                         	dc.b	$01
0009C81E E101                       	smpsAlterNote       $01
0009C820 01                         	dc.b	$01
0009C821 E102                       	smpsAlterNote       $02
0009C823 01                         	dc.b	$01
0009C824 E1FB                       	smpsAlterNote       $FB
0009C826 ECF5                       	smpsPSGAlterVol     $F5
0009C828 8D02                       	dc.b	nC1, $02
0009C82A EC04                       	smpsPSGAlterVol     $04
0009C82C E701                       	dc.b	smpsNoAttack, $01
0009C82E E1FC                       	smpsAlterNote       $FC
0009C830 ECFC                       	smpsPSGAlterVol     $FC
0009C832 8F0D                       	dc.b	nD1, $0D
0009C834 E1FF                       	smpsAlterNote       $FF
0009C836 E701                       	dc.b	smpsNoAttack, $01
0009C838 E103                       	smpsAlterNote       $03
0009C83A E701                       	dc.b	smpsNoAttack, $01
0009C83C E1FF                       	smpsAlterNote       $FF
0009C83E E701                       	dc.b	smpsNoAttack, $01
0009C840 E1FC                       	smpsAlterNote       $FC
0009C842 E701                       	dc.b	smpsNoAttack, $01
0009C844 E1F8                       	smpsAlterNote       $F8
0009C846 E701                       	dc.b	smpsNoAttack, $01
0009C848 E1FC                       	smpsAlterNote       $FC
0009C84A E701                       	dc.b	smpsNoAttack, $01
0009C84C E102                       	smpsAlterNote       $02
0009C84E E701                       	dc.b	smpsNoAttack, $01
0009C850 E103                       	smpsAlterNote       $03
0009C852 E701                       	dc.b	smpsNoAttack, $01
0009C854 E1FF                       	smpsAlterNote       $FF
0009C856 E701                       	dc.b	smpsNoAttack, $01
0009C858 E1F9                       	smpsAlterNote       $F9
0009C85A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C85E E1FC                       	smpsAlterNote       $FC
0009C860 E701                       	dc.b	smpsNoAttack, $01
0009C862 E102                       	smpsAlterNote       $02
0009C864 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C868 E1FC                       	smpsAlterNote       $FC
0009C86A E701                       	dc.b	smpsNoAttack, $01
0009C86C E1F9                       	smpsAlterNote       $F9
0009C86E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C872 E1FF                       	smpsAlterNote       $FF
0009C874 EC04                       	smpsPSGAlterVol     $04
0009C876 E701                       	dc.b	smpsNoAttack, $01
0009C878 EC07                       	smpsPSGAlterVol     $07
0009C87A E103                       	smpsAlterNote       $03
0009C87C 8001                       	dc.b	nRst, $01
0009C87E E102                       	smpsAlterNote       $02
0009C880 01                         	dc.b	$01
0009C881 E1FB                       	smpsAlterNote       $FB
0009C883 01                         	dc.b	$01
0009C884 E1F7                       	smpsAlterNote       $F7
0009C886 01                         	dc.b	$01
0009C887 E1FB                       	smpsAlterNote       $FB
0009C889 01                         	dc.b	$01
0009C88A E102                       	smpsAlterNote       $02
0009C88C 01                         	dc.b	$01
0009C88D E103                       	smpsAlterNote       $03
0009C88F 01                         	dc.b	$01
0009C890 E1FB                       	smpsAlterNote       $FB
0009C892 ECF5                       	smpsPSGAlterVol     $F5
0009C894 8E06                       	dc.b	nCs1, $06
0009C896 EC04                       	smpsPSGAlterVol     $04
0009C898 E701                       	dc.b	smpsNoAttack, $01
0009C89A EC07                       	smpsPSGAlterVol     $07
0009C89C 8003                       	dc.b	nRst, $03
0009C89E ECF5                       	smpsPSGAlterVol     $F5
0009C8A0 8E06                       	dc.b	nCs1, $06
0009C8A2 EC04                       	smpsPSGAlterVol     $04
0009C8A4 E701                       	dc.b	smpsNoAttack, $01
0009C8A6 EC07                       	smpsPSGAlterVol     $07
0009C8A8 8006                       	dc.b	nRst, $06
0009C8AA E1FE                       	smpsAlterNote       $FE
0009C8AC 01                         	dc.b	$01
0009C8AD E102                       	smpsAlterNote       $02
0009C8AF 01                         	dc.b	$01
0009C8B0 E1FE                       	smpsAlterNote       $FE
0009C8B2 01                         	dc.b	$01
0009C8B3 E1F9                       	smpsAlterNote       $F9
0009C8B5 01                         	dc.b	$01
0009C8B6 E1FC                       	smpsAlterNote       $FC
0009C8B8 ECF5                       	smpsPSGAlterVol     $F5
0009C8BA 8F06                       	dc.b	nD1, $06
0009C8BC EC04                       	smpsPSGAlterVol     $04
0009C8BE E701                       	dc.b	smpsNoAttack, $01
0009C8C0 EC07                       	smpsPSGAlterVol     $07
0009C8C2 8003                       	dc.b	nRst, $03
0009C8C4 ECF5                       	smpsPSGAlterVol     $F5
0009C8C6 8F07                       	dc.b	nD1, $07
0009C8C8 EC0B                       	smpsPSGAlterVol     $0B
0009C8CA 8006                       	dc.b	nRst, $06
0009C8CC E1FF                       	smpsAlterNote       $FF
0009C8CE 01                         	dc.b	$01
0009C8CF E102                       	smpsAlterNote       $02
0009C8D1 0101                       	dc.b	$01, $01
0009C8D3 E1FB                       	smpsAlterNote       $FB
0009C8D5 01                         	dc.b	$01
0009C8D6 ECF5                       	smpsPSGAlterVol     $F5
0009C8D8 8E07                       	dc.b	nCs1, $07
0009C8DA EC0B                       	smpsPSGAlterVol     $0B
0009C8DC 8004                       	dc.b	nRst, $04
0009C8DE ECF5                       	smpsPSGAlterVol     $F5
0009C8E0 8E06                       	dc.b	nCs1, $06
0009C8E2 EC04                       	smpsPSGAlterVol     $04
0009C8E4 E701                       	dc.b	smpsNoAttack, $01
0009C8E6 EC07                       	smpsPSGAlterVol     $07
0009C8E8 8006                       	dc.b	nRst, $06
0009C8EA E101                       	smpsAlterNote       $01
0009C8EC 01                         	dc.b	$01
0009C8ED E102                       	smpsAlterNote       $02
0009C8EF 01                         	dc.b	$01
0009C8F0 E1FE                       	smpsAlterNote       $FE
0009C8F2 01                         	dc.b	$01
0009C8F3 E1F8                       	smpsAlterNote       $F8
0009C8F5 01                         	dc.b	$01
0009C8F6 E1FB                       	smpsAlterNote       $FB
0009C8F8 ECF5                       	smpsPSGAlterVol     $F5
0009C8FA 8E06                       	dc.b	nCs1, $06
0009C8FC EC04                       	smpsPSGAlterVol     $04
0009C8FE E701                       	dc.b	smpsNoAttack, $01
0009C900 EC07                       	smpsPSGAlterVol     $07
0009C902 8003                       	dc.b	nRst, $03
0009C904 ECF5                       	smpsPSGAlterVol     $F5
0009C906 8E06                       	dc.b	nCs1, $06
0009C908 EC04                       	smpsPSGAlterVol     $04
0009C90A E701                       	dc.b	smpsNoAttack, $01
0009C90C EC07                       	smpsPSGAlterVol     $07
0009C90E 8004                       	dc.b	nRst, $04
0009C910 E1FC                       	smpsAlterNote       $FC
0009C912 ECF5                       	smpsPSGAlterVol     $F5
0009C914 8F06                       	dc.b	nD1, $06
0009C916 EC0B                       	smpsPSGAlterVol     $0B
0009C918 8006                       	dc.b	nRst, $06
0009C91A E1FF                       	smpsAlterNote       $FF
0009C91C 01                         	dc.b	$01
0009C91D E102                       	smpsAlterNote       $02
0009C91F 0101                       	dc.b	$01, $01
0009C921 E1FC                       	smpsAlterNote       $FC
0009C923 01                         	dc.b	$01
0009C924 E1F8                       	smpsAlterNote       $F8
0009C926 01                         	dc.b	$01
0009C927 E1F9                       	smpsAlterNote       $F9
0009C929 01                         	dc.b	$01
0009C92A E1FF                       	smpsAlterNote       $FF
0009C92C 01                         	dc.b	$01
0009C92D E103                       	smpsAlterNote       $03
0009C92F 01                         	dc.b	$01
0009C930 E1FC                       	smpsAlterNote       $FC
0009C932 ECF5                       	smpsPSGAlterVol     $F5
0009C934 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009C938 EC04                       	smpsPSGAlterVol     $04
0009C93A E701                       	dc.b	smpsNoAttack, $01
0009C93C EC07                       	smpsPSGAlterVol     $07
0009C93E 8009                       	dc.b	nRst, $09
0009C940 E1FF                       	smpsAlterNote       $FF
0009C942 01                         	dc.b	$01
0009C943 E102                       	smpsAlterNote       $02
0009C945 0101                       	dc.b	$01, $01
0009C947 E1FC                       	smpsAlterNote       $FC
0009C949 01                         	dc.b	$01
0009C94A E1F8                       	smpsAlterNote       $F8
0009C94C 01                         	dc.b	$01
0009C94D E1F9                       	smpsAlterNote       $F9
0009C94F 01                         	dc.b	$01
0009C950 E1FF                       	smpsAlterNote       $FF
0009C952 01                         	dc.b	$01
0009C953 E103                       	smpsAlterNote       $03
0009C955 01                         	dc.b	$01
0009C956 E1FF                       	smpsAlterNote       $FF
0009C958 01                         	dc.b	$01
0009C959 E1FC                       	smpsAlterNote       $FC
0009C95B 01                         	dc.b	$01
0009C95C E1F8                       	smpsAlterNote       $F8
0009C95E 01                         	dc.b	$01
0009C95F E1FC                       	smpsAlterNote       $FC
0009C961 01                         	dc.b	$01
0009C962 E102                       	smpsAlterNote       $02
0009C964 01                         	dc.b	$01
0009C965 E103                       	smpsAlterNote       $03
0009C967 01                         	dc.b	$01
0009C968 E1FF                       	smpsAlterNote       $FF
0009C96A 01                         	dc.b	$01
0009C96B E1FC                       	smpsAlterNote       $FC
0009C96D ECF5                       	smpsPSGAlterVol     $F5
0009C96F 8F03                       	dc.b	nD1, $03
0009C971 E1FB                       	smpsAlterNote       $FB
0009C973 8D06                       	dc.b	nC1, $06
0009C975 EC04                       	smpsPSGAlterVol     $04
0009C977 E701                       	dc.b	smpsNoAttack, $01
0009C979 EC07                       	smpsPSGAlterVol     $07
0009C97B 8006                       	dc.b	nRst, $06
0009C97D E1FE                       	smpsAlterNote       $FE
0009C97F 01                         	dc.b	$01
0009C980 E102                       	smpsAlterNote       $02
0009C982 01                         	dc.b	$01
0009C983 E101                       	smpsAlterNote       $01
0009C985 01                         	dc.b	$01
0009C986 E1FB                       	smpsAlterNote       $FB
0009C988 01                         	dc.b	$01
0009C989 E1F7                       	smpsAlterNote       $F7
0009C98B 01                         	dc.b	$01
0009C98C E1FB                       	smpsAlterNote       $FB
0009C98E 01                         	dc.b	$01
0009C98F E1FE                       	smpsAlterNote       $FE
0009C991 01                         	dc.b	$01
0009C992 E102                       	smpsAlterNote       $02
0009C994 01                         	dc.b	$01
0009C995 E1FB                       	smpsAlterNote       $FB
0009C997 ECF5                       	smpsPSGAlterVol     $F5
0009C999 8D03                       	dc.b	nC1, $03
0009C99B E1FC                       	smpsAlterNote       $FC
0009C99D 8F0D                       	dc.b	nD1, $0D
0009C99F E1FF                       	smpsAlterNote       $FF
0009C9A1 E701                       	dc.b	smpsNoAttack, $01
0009C9A3 E103                       	smpsAlterNote       $03
0009C9A5 E701                       	dc.b	smpsNoAttack, $01
0009C9A7 E1FF                       	smpsAlterNote       $FF
0009C9A9 E701                       	dc.b	smpsNoAttack, $01
0009C9AB E1FC                       	smpsAlterNote       $FC
0009C9AD E701                       	dc.b	smpsNoAttack, $01
0009C9AF E1F8                       	smpsAlterNote       $F8
0009C9B1 E701                       	dc.b	smpsNoAttack, $01
0009C9B3 E1FC                       	smpsAlterNote       $FC
0009C9B5 E701                       	dc.b	smpsNoAttack, $01
0009C9B7 E102                       	smpsAlterNote       $02
0009C9B9 E701                       	dc.b	smpsNoAttack, $01
0009C9BB E103                       	smpsAlterNote       $03
0009C9BD E701                       	dc.b	smpsNoAttack, $01
0009C9BF E1FF                       	smpsAlterNote       $FF
0009C9C1 E701                       	dc.b	smpsNoAttack, $01
0009C9C3 E1F9                       	smpsAlterNote       $F9
0009C9C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C9C9 E1FC                       	smpsAlterNote       $FC
0009C9CB E701                       	dc.b	smpsNoAttack, $01
0009C9CD E102                       	smpsAlterNote       $02
0009C9CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C9D3 E1FF                       	smpsAlterNote       $FF
0009C9D5 E701                       	dc.b	smpsNoAttack, $01
0009C9D7 E1F9                       	smpsAlterNote       $F9
0009C9D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C9DD E1FF                       	smpsAlterNote       $FF
0009C9DF EC04                       	smpsPSGAlterVol     $04
0009C9E1 E701                       	dc.b	smpsNoAttack, $01
0009C9E3 EC07                       	smpsPSGAlterVol     $07
0009C9E5 E103                       	smpsAlterNote       $03
0009C9E7 8001                       	dc.b	nRst, $01
0009C9E9 E102                       	smpsAlterNote       $02
0009C9EB 01                         	dc.b	$01
0009C9EC E1FB                       	smpsAlterNote       $FB
0009C9EE 01                         	dc.b	$01
0009C9EF E1F7                       	smpsAlterNote       $F7
0009C9F1 01                         	dc.b	$01
0009C9F2 E1FB                       	smpsAlterNote       $FB
0009C9F4 01                         	dc.b	$01
0009C9F5 E1FF                       	smpsAlterNote       $FF
0009C9F7 01                         	dc.b	$01
0009C9F8 E103                       	smpsAlterNote       $03
0009C9FA 01                         	dc.b	$01
0009C9FB E1FB                       	smpsAlterNote       $FB
0009C9FD ECF5                       	smpsPSGAlterVol     $F5
0009C9FF 8E06                       	dc.b	nCs1, $06
0009CA01 EC04                       	smpsPSGAlterVol     $04
0009CA03 E701                       	dc.b	smpsNoAttack, $01
0009CA05 EC07                       	smpsPSGAlterVol     $07
0009CA07 8003                       	dc.b	nRst, $03
0009CA09 ECF5                       	smpsPSGAlterVol     $F5
0009CA0B 8E06                       	dc.b	nCs1, $06
0009CA0D EC04                       	smpsPSGAlterVol     $04
0009CA0F E701                       	dc.b	smpsNoAttack, $01
0009CA11 EC07                       	smpsPSGAlterVol     $07
0009CA13 8006                       	dc.b	nRst, $06
0009CA15 E1FE                       	smpsAlterNote       $FE
0009CA17 01                         	dc.b	$01
0009CA18 E102                       	smpsAlterNote       $02
0009CA1A 01                         	dc.b	$01
0009CA1B E1FE                       	smpsAlterNote       $FE
0009CA1D 01                         	dc.b	$01
0009CA1E E1FC                       	smpsAlterNote       $FC
0009CA20 01                         	dc.b	$01
0009CA21 ECF5                       	smpsPSGAlterVol     $F5
0009CA23 8F06                       	dc.b	nD1, $06
0009CA25 EC04                       	smpsPSGAlterVol     $04
0009CA27 E701                       	dc.b	smpsNoAttack, $01
0009CA29 EC07                       	smpsPSGAlterVol     $07
0009CA2B 8003                       	dc.b	nRst, $03
0009CA2D ECF5                       	smpsPSGAlterVol     $F5
0009CA2F 8F07                       	dc.b	nD1, $07
0009CA31 EC0B                       	smpsPSGAlterVol     $0B
0009CA33 8007                       	dc.b	nRst, $07
0009CA35 E102                       	smpsAlterNote       $02
0009CA37 0101                       	dc.b	$01, $01
0009CA39 E1FB                       	smpsAlterNote       $FB
0009CA3B 01                         	dc.b	$01
0009CA3C E1F8                       	smpsAlterNote       $F8
0009CA3E 01                         	dc.b	$01
0009CA3F E1FB                       	smpsAlterNote       $FB
0009CA41 ECF5                       	smpsPSGAlterVol     $F5
0009CA43 8E06                       	dc.b	nCs1, $06
0009CA45 EC0B                       	smpsPSGAlterVol     $0B
0009CA47 8004                       	dc.b	nRst, $04
0009CA49 ECF5                       	smpsPSGAlterVol     $F5
0009CA4B 8E06                       	dc.b	nCs1, $06
0009CA4D EC04                       	smpsPSGAlterVol     $04
0009CA4F E701                       	dc.b	smpsNoAttack, $01
0009CA51 EC07                       	smpsPSGAlterVol     $07
0009CA53 8006                       	dc.b	nRst, $06
0009CA55 E1FE                       	smpsAlterNote       $FE
0009CA57 01                         	dc.b	$01
0009CA58 E102                       	smpsAlterNote       $02
0009CA5A 01                         	dc.b	$01
0009CA5B E1FE                       	smpsAlterNote       $FE
0009CA5D 01                         	dc.b	$01
0009CA5E E1F9                       	smpsAlterNote       $F9
0009CA60 01                         	dc.b	$01
0009CA61 E1FC                       	smpsAlterNote       $FC
0009CA63 ECF5                       	smpsPSGAlterVol     $F5
0009CA65 8F06                       	dc.b	nD1, $06
0009CA67 EC04                       	smpsPSGAlterVol     $04
0009CA69 E701                       	dc.b	smpsNoAttack, $01
0009CA6B EC07                       	smpsPSGAlterVol     $07
0009CA6D 8003                       	dc.b	nRst, $03
0009CA6F ECF5                       	smpsPSGAlterVol     $F5
0009CA71 8F06                       	dc.b	nD1, $06
0009CA73 EC04                       	smpsPSGAlterVol     $04
0009CA75 E701                       	dc.b	smpsNoAttack, $01
0009CA77 EC07                       	smpsPSGAlterVol     $07
0009CA79 8006                       	dc.b	nRst, $06
0009CA7B E1FF                       	smpsAlterNote       $FF
0009CA7D 01                         	dc.b	$01
0009CA7E E103                       	smpsAlterNote       $03
0009CA80 01                         	dc.b	$01
0009CA81 E102                       	smpsAlterNote       $02
0009CA83 01                         	dc.b	$01
0009CA84 E1FB                       	smpsAlterNote       $FB
0009CA86 01                         	dc.b	$01
0009CA87 ECF5                       	smpsPSGAlterVol     $F5
0009CA89 8E07                       	dc.b	nCs1, $07
0009CA8B EC0B                       	smpsPSGAlterVol     $0B
0009CA8D 8004                       	dc.b	nRst, $04
0009CA8F ECF5                       	smpsPSGAlterVol     $F5
0009CA91 8E06                       	dc.b	nCs1, $06
0009CA93 EC0B                       	smpsPSGAlterVol     $0B
0009CA95 8007                       	dc.b	nRst, $07
0009CA97 E101                       	smpsAlterNote       $01
0009CA99 0101                       	dc.b	$01, $01
0009CA9B E1FE                       	smpsAlterNote       $FE
0009CA9D 01                         	dc.b	$01
0009CA9E E1F9                       	smpsAlterNote       $F9
0009CAA0 01                         	dc.b	$01
0009CAA1 E1FC                       	smpsAlterNote       $FC
0009CAA3 ECF5                       	smpsPSGAlterVol     $F5
0009CAA5 8F06                       	dc.b	nD1, $06
0009CAA7 EC04                       	smpsPSGAlterVol     $04
0009CAA9 E701                       	dc.b	smpsNoAttack, $01
0009CAAB EC07                       	smpsPSGAlterVol     $07
0009CAAD 8003                       	dc.b	nRst, $03
0009CAAF ECF5                       	smpsPSGAlterVol     $F5
0009CAB1 8F06                       	dc.b	nD1, $06
0009CAB3 EC04                       	smpsPSGAlterVol     $04
0009CAB5 E701                       	dc.b	smpsNoAttack, $01
0009CAB7 EC07                       	smpsPSGAlterVol     $07
0009CAB9 8006                       	dc.b	nRst, $06
0009CABB E1FF                       	smpsAlterNote       $FF
0009CABD 01                         	dc.b	$01
0009CABE E103                       	smpsAlterNote       $03
0009CAC0 01                         	dc.b	$01
0009CAC1 E1FF                       	smpsAlterNote       $FF
0009CAC3 01                         	dc.b	$01
0009CAC4 E1FB                       	smpsAlterNote       $FB
0009CAC6 01                         	dc.b	$01
0009CAC7 ECF5                       	smpsPSGAlterVol     $F5
0009CAC9 8E06                       	dc.b	nCs1, $06
0009CACB EC04                       	smpsPSGAlterVol     $04
0009CACD E701                       	dc.b	smpsNoAttack, $01
0009CACF EC07                       	smpsPSGAlterVol     $07
0009CAD1 8003                       	dc.b	nRst, $03
0009CAD3 ECF5                       	smpsPSGAlterVol     $F5
0009CAD5 8E07                       	dc.b	nCs1, $07
0009CAD7 E1FF                       	smpsAlterNote       $FF
0009CAD9 9B06                       	dc.b	nD2, $06
0009CADB EC04                       	smpsPSGAlterVol     $04
0009CADD E701                       	dc.b	smpsNoAttack, $01
0009CADF ECFC                       	smpsPSGAlterVol     $FC
0009CAE1 9B03                       	dc.b	nD2, $03
0009CAE3 EC04                       	smpsPSGAlterVol     $04
0009CAE5 E701                       	dc.b	smpsNoAttack, $01
0009CAE7 ECFC                       	smpsPSGAlterVol     $FC
0009CAE9 9B02                       	dc.b	nD2, $02
0009CAEB EC04                       	smpsPSGAlterVol     $04
0009CAED E701                       	dc.b	smpsNoAttack, $01
0009CAEF ECFC                       	smpsPSGAlterVol     $FC
0009CAF1 E1FE                       	smpsAlterNote       $FE
0009CAF3 9A03                       	dc.b	nCs2, $03
0009CAF5 EC0B                       	smpsPSGAlterVol     $0B
0009CAF7 800A                       	dc.b	nRst, $0A
0009CAF9 E102                       	smpsAlterNote       $02
0009CAFB 01                         	dc.b	$01
0009CAFC E10A                       	smpsAlterNote       $0A
0009CAFE 01                         	dc.b	$01
0009CAFF E102                       	smpsAlterNote       $02
0009CB01 01                         	dc.b	$01
0009CB02 E1F7                       	smpsAlterNote       $F7
0009CB04 01                         	dc.b	$01
0009CB05 E10A                       	smpsAlterNote       $0A
0009CB07 01                         	dc.b	$01
0009CB08 E1FC                       	smpsAlterNote       $FC
0009CB0A 01                         	dc.b	$01
0009CB0B E108                       	smpsAlterNote       $08
0009CB0D 0101                       	dc.b	$01, $01
0009CB0F E102                       	smpsAlterNote       $02
0009CB11 01                         	dc.b	$01
0009CB12 E1F7                       	smpsAlterNote       $F7
0009CB14 0101                       	dc.b	$01, $01
0009CB16 E1FC                       	smpsAlterNote       $FC
0009CB18 ECF5                       	smpsPSGAlterVol     $F5
0009CB1A 8F06                       	dc.b	nD1, $06
0009CB1C EC04                       	smpsPSGAlterVol     $04
0009CB1E E701                       	dc.b	smpsNoAttack, $01
0009CB20 EC07                       	smpsPSGAlterVol     $07
0009CB22 8003                       	dc.b	nRst, $03
0009CB24 ECF5                       	smpsPSGAlterVol     $F5
0009CB26 8F06                       	dc.b	nD1, $06
0009CB28 EC04                       	smpsPSGAlterVol     $04
0009CB2A E701                       	dc.b	smpsNoAttack, $01
0009CB2C EC07                       	smpsPSGAlterVol     $07
0009CB2E 8006                       	dc.b	nRst, $06
0009CB30 E1FF                       	smpsAlterNote       $FF
0009CB32 01                         	dc.b	$01
0009CB33 E102                       	smpsAlterNote       $02
0009CB35 01                         	dc.b	$01
0009CB36 E101                       	smpsAlterNote       $01
0009CB38 01                         	dc.b	$01
0009CB39 E1FC                       	smpsAlterNote       $FC
0009CB3B 01                         	dc.b	$01
0009CB3C ECF5                       	smpsPSGAlterVol     $F5
0009CB3E 9007                       	dc.b	nEb1, $07
0009CB40 EC0B                       	smpsPSGAlterVol     $0B
0009CB42 8004                       	dc.b	nRst, $04
0009CB44 ECF5                       	smpsPSGAlterVol     $F5
0009CB46 9006                       	dc.b	nEb1, $06
0009CB48 EC0B                       	smpsPSGAlterVol     $0B
0009CB4A 8007                       	dc.b	nRst, $07
0009CB4C E103                       	smpsAlterNote       $03
0009CB4E 0101                       	dc.b	$01, $01
0009CB50 E1FF                       	smpsAlterNote       $FF
0009CB52 01                         	dc.b	$01
0009CB53 E1F9                       	smpsAlterNote       $F9
0009CB55 01                         	dc.b	$01
0009CB56 E1FC                       	smpsAlterNote       $FC
0009CB58 ECF5                       	smpsPSGAlterVol     $F5
0009CB5A 8F06                       	dc.b	nD1, $06
0009CB5C EC04                       	smpsPSGAlterVol     $04
0009CB5E E701                       	dc.b	smpsNoAttack, $01
0009CB60 EC07                       	smpsPSGAlterVol     $07
0009CB62 8003                       	dc.b	nRst, $03
0009CB64 ECF5                       	smpsPSGAlterVol     $F5
0009CB66 8F06                       	dc.b	nD1, $06
0009CB68 EC04                       	smpsPSGAlterVol     $04
0009CB6A E701                       	dc.b	smpsNoAttack, $01
0009CB6C EC07                       	smpsPSGAlterVol     $07
0009CB6E 8006                       	dc.b	nRst, $06
0009CB70 E1FF                       	smpsAlterNote       $FF
0009CB72 01                         	dc.b	$01
0009CB73 E103                       	smpsAlterNote       $03
0009CB75 01                         	dc.b	$01
0009CB76 E1FF                       	smpsAlterNote       $FF
0009CB78 01                         	dc.b	$01
0009CB79 E1F9                       	smpsAlterNote       $F9
0009CB7B 01                         	dc.b	$01
0009CB7C E1FC                       	smpsAlterNote       $FC
0009CB7E ECF5                       	smpsPSGAlterVol     $F5
0009CB80 8F06                       	dc.b	nD1, $06
0009CB82 EC04                       	smpsPSGAlterVol     $04
0009CB84 E701                       	dc.b	smpsNoAttack, $01
0009CB86 EC07                       	smpsPSGAlterVol     $07
0009CB88 8003                       	dc.b	nRst, $03
0009CB8A ECF5                       	smpsPSGAlterVol     $F5
0009CB8C 8F07                       	dc.b	nD1, $07
0009CB8E EC0B                       	smpsPSGAlterVol     $0B
0009CB90 8006                       	dc.b	nRst, $06
0009CB92 E1FF                       	smpsAlterNote       $FF
0009CB94 01                         	dc.b	$01
0009CB95 E102                       	smpsAlterNote       $02
0009CB97 0101                       	dc.b	$01, $01
0009CB99 E1FC                       	smpsAlterNote       $FC
0009CB9B 01                         	dc.b	$01
0009CB9C ECF5                       	smpsPSGAlterVol     $F5
0009CB9E 8F07                       	dc.b	nD1, $07
0009CBA0 EC0B                       	smpsPSGAlterVol     $0B
0009CBA2 8004                       	dc.b	nRst, $04
0009CBA4 ECF5                       	smpsPSGAlterVol     $F5
0009CBA6 8F06                       	dc.b	nD1, $06
0009CBA8 EC04                       	smpsPSGAlterVol     $04
0009CBAA E701                       	dc.b	smpsNoAttack, $01
0009CBAC EC07                       	smpsPSGAlterVol     $07
0009CBAE 8006                       	dc.b	nRst, $06
0009CBB0 E101                       	smpsAlterNote       $01
0009CBB2 01                         	dc.b	$01
0009CBB3 E102                       	smpsAlterNote       $02
0009CBB5 01                         	dc.b	$01
0009CBB6 E1FF                       	smpsAlterNote       $FF
0009CBB8 01                         	dc.b	$01
0009CBB9 E1F9                       	smpsAlterNote       $F9
0009CBBB 01                         	dc.b	$01
0009CBBC E1FC                       	smpsAlterNote       $FC
0009CBBE ECF5                       	smpsPSGAlterVol     $F5
0009CBC0 9006                       	dc.b	nEb1, $06
0009CBC2 EC04                       	smpsPSGAlterVol     $04
0009CBC4 E701                       	dc.b	smpsNoAttack, $01
0009CBC6 EC07                       	smpsPSGAlterVol     $07
0009CBC8 8003                       	dc.b	nRst, $03
0009CBCA ECF5                       	smpsPSGAlterVol     $F5
0009CBCC 9006                       	dc.b	nEb1, $06
0009CBCE EC04                       	smpsPSGAlterVol     $04
0009CBD0 E701                       	dc.b	smpsNoAttack, $01
0009CBD2 EC07                       	smpsPSGAlterVol     $07
0009CBD4 8006                       	dc.b	nRst, $06
0009CBD6 E100                       	smpsAlterNote       $00
0009CBD8 01                         	dc.b	$01
0009CBD9 E102                       	smpsAlterNote       $02
0009CBDB 01                         	dc.b	$01
0009CBDC E100                       	smpsAlterNote       $00
0009CBDE 01                         	dc.b	$01
0009CBDF E1FF                       	smpsAlterNote       $FF
0009CBE1 01                         	dc.b	$01
0009CBE2 ECF5                       	smpsPSGAlterVol     $F5
0009CBE4 9B06                       	dc.b	nD2, $06
0009CBE6 EC04                       	smpsPSGAlterVol     $04
0009CBE8 E701                       	dc.b	smpsNoAttack, $01
0009CBEA EC07                       	smpsPSGAlterVol     $07
0009CBEC 8003                       	dc.b	nRst, $03
0009CBEE ECF5                       	smpsPSGAlterVol     $F5
0009CBF0 9B07                       	dc.b	nD2, $07
0009CBF2 EC0B                       	smpsPSGAlterVol     $0B
0009CBF4 8007                       	dc.b	nRst, $07
0009CBF6 E105                       	smpsAlterNote       $05
0009CBF8 0101                       	dc.b	$01, $01
0009CBFA E1FF                       	smpsAlterNote       $FF
0009CBFC 01                         	dc.b	$01
0009CBFD E1FC                       	smpsAlterNote       $FC
0009CBFF 01                         	dc.b	$01
0009CC00 E1FF                       	smpsAlterNote       $FF
0009CC02 ECF5                       	smpsPSGAlterVol     $F5
0009CC04 9B06                       	dc.b	nD2, $06
0009CC06 EC0B                       	smpsPSGAlterVol     $0B
0009CC08 8004                       	dc.b	nRst, $04
0009CC0A ECF5                       	smpsPSGAlterVol     $F5
0009CC0C 9B06                       	dc.b	nD2, $06
0009CC0E EC04                       	smpsPSGAlterVol     $04
0009CC10 E701                       	dc.b	smpsNoAttack, $01
0009CC12 EC07                       	smpsPSGAlterVol     $07
0009CC14 8006                       	dc.b	nRst, $06
0009CC16 E102                       	smpsAlterNote       $02
0009CC18 01                         	dc.b	$01
0009CC19 E106                       	smpsAlterNote       $06
0009CC1B 01                         	dc.b	$01
0009CC1C E102                       	smpsAlterNote       $02
0009CC1E 01                         	dc.b	$01
0009CC1F E1FC                       	smpsAlterNote       $FC
0009CC21 01                         	dc.b	$01
0009CC22 E1FF                       	smpsAlterNote       $FF
0009CC24 ECF5                       	smpsPSGAlterVol     $F5
0009CC26 9B06                       	dc.b	nD2, $06
0009CC28 EC04                       	smpsPSGAlterVol     $04
0009CC2A E701                       	dc.b	smpsNoAttack, $01
0009CC2C EC07                       	smpsPSGAlterVol     $07
0009CC2E 8003                       	dc.b	nRst, $03
0009CC30 ECF5                       	smpsPSGAlterVol     $F5
0009CC32 9B07                       	dc.b	nD2, $07
0009CC34 EC0B                       	smpsPSGAlterVol     $0B
0009CC36 8006                       	dc.b	nRst, $06
0009CC38 E102                       	smpsAlterNote       $02
0009CC3A 01                         	dc.b	$01
0009CC3B E105                       	smpsAlterNote       $05
0009CC3D 0101                       	dc.b	$01, $01
0009CC3F E1FF                       	smpsAlterNote       $FF
0009CC41 01                         	dc.b	$01
0009CC42 ECF5                       	smpsPSGAlterVol     $F5
0009CC44 9B07                       	dc.b	nD2, $07
0009CC46 EC0B                       	smpsPSGAlterVol     $0B
0009CC48 8004                       	dc.b	nRst, $04
0009CC4A ECF5                       	smpsPSGAlterVol     $F5
0009CC4C 9B06                       	dc.b	nD2, $06
0009CC4E EC04                       	smpsPSGAlterVol     $04
0009CC50 E701                       	dc.b	smpsNoAttack, $01
0009CC52 EC07                       	smpsPSGAlterVol     $07
0009CC54 8006                       	dc.b	nRst, $06
0009CC56 E105                       	smpsAlterNote       $05
0009CC58 0101                       	dc.b	$01, $01
0009CC5A E102                       	smpsAlterNote       $02
0009CC5C 01                         	dc.b	$01
0009CC5D E1FC                       	smpsAlterNote       $FC
0009CC5F 01                         	dc.b	$01
0009CC60 E1FF                       	smpsAlterNote       $FF
0009CC62 ECF5                       	smpsPSGAlterVol     $F5
0009CC64 9B06                       	dc.b	nD2, $06
0009CC66 EC04                       	smpsPSGAlterVol     $04
0009CC68 E701                       	dc.b	smpsNoAttack, $01
0009CC6A EC07                       	smpsPSGAlterVol     $07
0009CC6C 8003                       	dc.b	nRst, $03
0009CC6E ECF5                       	smpsPSGAlterVol     $F5
0009CC70 9B06                       	dc.b	nD2, $06
0009CC72 EC04                       	smpsPSGAlterVol     $04
0009CC74 E701                       	dc.b	smpsNoAttack, $01
0009CC76 EC07                       	smpsPSGAlterVol     $07
0009CC78 8006                       	dc.b	nRst, $06
0009CC7A E102                       	smpsAlterNote       $02
0009CC7C 01                         	dc.b	$01
0009CC7D E106                       	smpsAlterNote       $06
0009CC7F 01                         	dc.b	$01
0009CC80 E102                       	smpsAlterNote       $02
0009CC82 01                         	dc.b	$01
0009CC83 E1FF                       	smpsAlterNote       $FF
0009CC85 01                         	dc.b	$01
0009CC86 ECF5                       	smpsPSGAlterVol     $F5
0009CC88 9B06                       	dc.b	nD2, $06
0009CC8A EC04                       	smpsPSGAlterVol     $04
0009CC8C E701                       	dc.b	smpsNoAttack, $01
0009CC8E EC07                       	smpsPSGAlterVol     $07
0009CC90 8003                       	dc.b	nRst, $03
0009CC92 ECF5                       	smpsPSGAlterVol     $F5
0009CC94 9B07                       	dc.b	nD2, $07
0009CC96 EC0B                       	smpsPSGAlterVol     $0B
0009CC98 8007                       	dc.b	nRst, $07
0009CC9A E107                       	smpsAlterNote       $07
0009CC9C 0101                       	dc.b	$01, $01
0009CC9E E1FE                       	smpsAlterNote       $FE
0009CCA0 01                         	dc.b	$01
0009CCA1 E1FA                       	smpsAlterNote       $FA
0009CCA3 0101                       	dc.b	$01, $01
0009CCA5 E103                       	smpsAlterNote       $03
0009CCA7 01                         	dc.b	$01
0009CCA8 E109                       	smpsAlterNote       $09
0009CCAA 01                         	dc.b	$01
0009CCAB E107                       	smpsAlterNote       $07
0009CCAD 01                         	dc.b	$01
0009CCAE E1FE                       	smpsAlterNote       $FE
0009CCB0 01                         	dc.b	$01
0009CCB1 E108                       	smpsAlterNote       $08
0009CCB3 01                         	dc.b	$01
0009CCB4 E1FD                       	smpsAlterNote       $FD
0009CCB6 ECF5                       	smpsPSGAlterVol     $F5
0009CCB8 940E                       	dc.b	nG1, $0E
0009CCBA E103                       	smpsAlterNote       $03
0009CCBC EC0B                       	smpsPSGAlterVol     $0B
0009CCBE 8001 01                    	dc.b	nRst, $01, $01
0009CCC1 E1FD                       	smpsAlterNote       $FD
0009CCC3 01                         	dc.b	$01
0009CCC4 E1FB                       	smpsAlterNote       $FB
0009CCC6 0101                       	dc.b	$01, $01
0009CCC8 E100                       	smpsAlterNote       $00
0009CCCA 01                         	dc.b	$01
0009CCCB E103                       	smpsAlterNote       $03
0009CCCD 01                         	dc.b	$01
0009CCCE E100                       	smpsAlterNote       $00
0009CCD0 01                         	dc.b	$01
0009CCD1 E1FD                       	smpsAlterNote       $FD
0009CCD3 01                         	dc.b	$01
0009CCD4 E1FA                       	smpsAlterNote       $FA
0009CCD6 01                         	dc.b	$01
0009CCD7 E1FD                       	smpsAlterNote       $FD
0009CCD9 01                         	dc.b	$01
0009CCDA E103                       	smpsAlterNote       $03
0009CCDC 0101                       	dc.b	$01, $01
0009CCDE E100                       	smpsAlterNote       $00
0009CCE0 01                         	dc.b	$01
0009CCE1 E1FE                       	smpsAlterNote       $FE
0009CCE3 ECF5                       	smpsPSGAlterVol     $F5
0009CCE5 960D                       	dc.b	nA1, $0D
0009CCE7 E104                       	smpsAlterNote       $04
0009CCE9 EC0B                       	smpsPSGAlterVol     $0B
0009CCEB 8001 01                    	dc.b	nRst, $01, $01
0009CCEE E101                       	smpsAlterNote       $01
0009CCF0 01                         	dc.b	$01
0009CCF1 E1FB                       	smpsAlterNote       $FB
0009CCF3 0101                       	dc.b	$01, $01
0009CCF5 E1FE                       	smpsAlterNote       $FE
0009CCF7 01                         	dc.b	$01
0009CCF8 E104                       	smpsAlterNote       $04
0009CCFA 0101                       	dc.b	$01, $01
0009CCFC E1FE                       	smpsAlterNote       $FE
0009CCFE 01                         	dc.b	$01
0009CCFF E1FB                       	smpsAlterNote       $FB
0009CD01 0101                       	dc.b	$01, $01
0009CD03 E101                       	smpsAlterNote       $01
0009CD05 01                         	dc.b	$01
0009CD06 E104                       	smpsAlterNote       $04
0009CD08 0101                       	dc.b	$01, $01
0009CD0A E1FE                       	smpsAlterNote       $FE
0009CD0C ECF5                       	smpsPSGAlterVol     $F5
0009CD0E 970D                       	dc.b	nBb1, $0D
0009CD10 E101                       	smpsAlterNote       $01
0009CD12 EC04                       	smpsPSGAlterVol     $04
0009CD14 E701                       	dc.b	smpsNoAttack, $01
0009CD16 EC07                       	smpsPSGAlterVol     $07
0009CD18 E104                       	smpsAlterNote       $04
0009CD1A 8001                       	dc.b	nRst, $01
0009CD1C E103                       	smpsAlterNote       $03
0009CD1E 01                         	dc.b	$01
0009CD1F E1FE                       	smpsAlterNote       $FE
0009CD21 01                         	dc.b	$01
0009CD22 E1FA                       	smpsAlterNote       $FA
0009CD24 01                         	dc.b	$01
0009CD25 E1FE                       	smpsAlterNote       $FE
0009CD27 01                         	dc.b	$01
0009CD28 E101                       	smpsAlterNote       $01
0009CD2A 01                         	dc.b	$01
0009CD2B E104                       	smpsAlterNote       $04
0009CD2D 01                         	dc.b	$01
0009CD2E E101                       	smpsAlterNote       $01
0009CD30 01                         	dc.b	$01
0009CD31 E1FB                       	smpsAlterNote       $FB
0009CD33 01                         	dc.b	$01
0009CD34 E1FA                       	smpsAlterNote       $FA
0009CD36 01                         	dc.b	$01
0009CD37 E1FE                       	smpsAlterNote       $FE
0009CD39 01                         	dc.b	$01
0009CD3A E103                       	smpsAlterNote       $03
0009CD3C 0101                       	dc.b	$01, $01
0009CD3E E101                       	smpsAlterNote       $01
0009CD40 01                         	dc.b	$01
0009CD41 E1FE                       	smpsAlterNote       $FE
0009CD43 ECF5                       	smpsPSGAlterVol     $F5
0009CD45 990D                       	dc.b	nC2, $0D
0009CD47 E104                       	smpsAlterNote       $04
0009CD49 EC0B                       	smpsPSGAlterVol     $0B
0009CD4B 8001 01                    	dc.b	nRst, $01, $01
0009CD4E E102                       	smpsAlterNote       $02
0009CD50 01                         	dc.b	$01
0009CD51 E1FC                       	smpsAlterNote       $FC
0009CD53 0101                       	dc.b	$01, $01
0009CD55 E102                       	smpsAlterNote       $02
0009CD57 01                         	dc.b	$01
0009CD58 E104                       	smpsAlterNote       $04
0009CD5A 01                         	dc.b	$01
0009CD5B E1FF                       	smpsAlterNote       $FF
0009CD5D ECF5                       	smpsPSGAlterVol     $F5
0009CD5F 9B06                       	dc.b	nD2, $06
0009CD61 EC04                       	smpsPSGAlterVol     $04
0009CD63 E701                       	dc.b	smpsNoAttack, $01
0009CD65 EC07                       	smpsPSGAlterVol     $07
0009CD67 8003                       	dc.b	nRst, $03
0009CD69 ECF5                       	smpsPSGAlterVol     $F5
0009CD6B 9B07                       	dc.b	nD2, $07
0009CD6D EC0B                       	smpsPSGAlterVol     $0B
0009CD6F 8006                       	dc.b	nRst, $06
0009CD71 E101                       	smpsAlterNote       $01
0009CD73 01                         	dc.b	$01
0009CD74 E104                       	smpsAlterNote       $04
0009CD76 0101                       	dc.b	$01, $01
0009CD78 E1FE                       	smpsAlterNote       $FE
0009CD7A 01                         	dc.b	$01
0009CD7B E1FC                       	smpsAlterNote       $FC
0009CD7D 01                         	dc.b	$01
0009CD7E E1FE                       	smpsAlterNote       $FE
0009CD80 ECF5                       	smpsPSGAlterVol     $F5
0009CD82 9C06                       	dc.b	nEb2, $06
0009CD84 EC0B                       	smpsPSGAlterVol     $0B
0009CD86 8004                       	dc.b	nRst, $04
0009CD88 ECF5                       	smpsPSGAlterVol     $F5
0009CD8A 9C06                       	dc.b	nEb2, $06
0009CD8C EC04                       	smpsPSGAlterVol     $04
0009CD8E E701                       	dc.b	smpsNoAttack, $01
0009CD90 EC07                       	smpsPSGAlterVol     $07
0009CD92 8006                       	dc.b	nRst, $06
0009CD94 E105                       	smpsAlterNote       $05
0009CD96 01                         	dc.b	$01
0009CD97 E106                       	smpsAlterNote       $06
0009CD99 01                         	dc.b	$01
0009CD9A E102                       	smpsAlterNote       $02
0009CD9C 01                         	dc.b	$01
0009CD9D E1FB                       	smpsAlterNote       $FB
0009CD9F 01                         	dc.b	$01
0009CDA0 E1FF                       	smpsAlterNote       $FF
0009CDA2 ECF5                       	smpsPSGAlterVol     $F5
0009CDA4 9B06                       	dc.b	nD2, $06
0009CDA6 EC04                       	smpsPSGAlterVol     $04
0009CDA8 E701                       	dc.b	smpsNoAttack, $01
0009CDAA EC07                       	smpsPSGAlterVol     $07
0009CDAC 8003                       	dc.b	nRst, $03
0009CDAE ECF5                       	smpsPSGAlterVol     $F5
0009CDB0 9B06                       	dc.b	nD2, $06
0009CDB2 EC04                       	smpsPSGAlterVol     $04
0009CDB4 E701                       	dc.b	smpsNoAttack, $01
0009CDB6 EC07                       	smpsPSGAlterVol     $07
0009CDB8 8006                       	dc.b	nRst, $06
0009CDBA E101                       	smpsAlterNote       $01
0009CDBC 01                         	dc.b	$01
0009CDBD E105                       	smpsAlterNote       $05
0009CDBF 01                         	dc.b	$01
0009CDC0 E104                       	smpsAlterNote       $04
0009CDC2 01                         	dc.b	$01
0009CDC3 E1FE                       	smpsAlterNote       $FE
0009CDC5 01                         	dc.b	$01
0009CDC6 ECF5                       	smpsPSGAlterVol     $F5
0009CDC8 9C07                       	dc.b	nEb2, $07
0009CDCA EC0B                       	smpsPSGAlterVol     $0B
0009CDCC 8004                       	dc.b	nRst, $04
0009CDCE ECF5                       	smpsPSGAlterVol     $F5
0009CDD0 9C06                       	dc.b	nEb2, $06
0009CDD2 EC0B                       	smpsPSGAlterVol     $0B
0009CDD4 8007                       	dc.b	nRst, $07
0009CDD6 E105                       	smpsAlterNote       $05
0009CDD8 0101                       	dc.b	$01, $01
0009CDDA E102                       	smpsAlterNote       $02
0009CDDC 01                         	dc.b	$01
0009CDDD E1FB                       	smpsAlterNote       $FB
0009CDDF 01                         	dc.b	$01
0009CDE0 E1FF                       	smpsAlterNote       $FF
0009CDE2 ECF5                       	smpsPSGAlterVol     $F5
0009CDE4 9B06                       	dc.b	nD2, $06
0009CDE6 EC04                       	smpsPSGAlterVol     $04
0009CDE8 E701                       	dc.b	smpsNoAttack, $01
0009CDEA EC07                       	smpsPSGAlterVol     $07
0009CDEC 8003                       	dc.b	nRst, $03
0009CDEE ECF5                       	smpsPSGAlterVol     $F5
0009CDF0 9B06                       	dc.b	nD2, $06
0009CDF2 EC04                       	smpsPSGAlterVol     $04
0009CDF4 E701                       	dc.b	smpsNoAttack, $01
0009CDF6 EC07                       	smpsPSGAlterVol     $07
0009CDF8 8006                       	dc.b	nRst, $06
0009CDFA E101                       	smpsAlterNote       $01
0009CDFC 01                         	dc.b	$01
0009CDFD E105                       	smpsAlterNote       $05
0009CDFF 01                         	dc.b	$01
0009CE00 E101                       	smpsAlterNote       $01
0009CE02 01                         	dc.b	$01
0009CE03 E1FC                       	smpsAlterNote       $FC
0009CE05 01                         	dc.b	$01
0009CE06 E1FE                       	smpsAlterNote       $FE
0009CE08 ECF5                       	smpsPSGAlterVol     $F5
0009CE0A 9C06                       	dc.b	nEb2, $06
0009CE0C EC04                       	smpsPSGAlterVol     $04
0009CE0E E701                       	dc.b	smpsNoAttack, $01
0009CE10 EC07                       	smpsPSGAlterVol     $07
0009CE12 8003                       	dc.b	nRst, $03
0009CE14 ECF5                       	smpsPSGAlterVol     $F5
0009CE16 9C07                       	dc.b	nEb2, $07
0009CE18 EC0B                       	smpsPSGAlterVol     $0B
0009CE1A 8006                       	dc.b	nRst, $06
0009CE1C E102                       	smpsAlterNote       $02
0009CE1E 01                         	dc.b	$01
0009CE1F E105                       	smpsAlterNote       $05
0009CE21 0101                       	dc.b	$01, $01
0009CE23 E1FF                       	smpsAlterNote       $FF
0009CE25 01                         	dc.b	$01
0009CE26 ECF5                       	smpsPSGAlterVol     $F5
0009CE28 9B07                       	dc.b	nD2, $07
0009CE2A EC0B                       	smpsPSGAlterVol     $0B
0009CE2C 8004                       	dc.b	nRst, $04
0009CE2E ECF5                       	smpsPSGAlterVol     $F5
0009CE30 9B06                       	dc.b	nD2, $06
0009CE32 EC04                       	smpsPSGAlterVol     $04
0009CE34 E701                       	dc.b	smpsNoAttack, $01
0009CE36 EC07                       	smpsPSGAlterVol     $07
0009CE38 8002                       	dc.b	nRst, $02
0009CE3A E1FC                       	smpsAlterNote       $FC
0009CE3C ECF5                       	smpsPSGAlterVol     $F5
0009CE3E 9006                       	dc.b	nEb1, $06
0009CE40 EC04                       	smpsPSGAlterVol     $04
0009CE42 E701                       	dc.b	smpsNoAttack, $01
0009CE44 ECFC                       	smpsPSGAlterVol     $FC
0009CE46 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0009CE4A EC04                       	smpsPSGAlterVol     $04
0009CE4C E701                       	dc.b	smpsNoAttack, $01
0009CE4E E1FD                       	smpsAlterNote       $FD
0009CE50 ECFC                       	smpsPSGAlterVol     $FC
0009CE52 9402                       	dc.b	nG1, $02
0009CE54 EC04                       	smpsPSGAlterVol     $04
0009CE56 E701                       	dc.b	smpsNoAttack, $01
0009CE58 E1FE                       	smpsAlterNote       $FE
0009CE5A ECFC                       	smpsPSGAlterVol     $FC
0009CE5C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009CE60 EC04                       	smpsPSGAlterVol     $04
0009CE62 E701                       	dc.b	smpsNoAttack, $01
0009CE64 EC07                       	smpsPSGAlterVol     $07
0009CE66 8008                       	dc.b	nRst, $08
0009CE68 F6F4 F3                    	smpsJump            music84_Jump06
0009CE6B                            
0009CE6B                            ; PSG3 Data
0009CE6B                            music84_PSG3:
0009CE6B F500                       	smpsPSGvoice        $00
0009CE6D E1FF                       	smpsAlterNote       $FF
0009CE6F EC0F                       	smpsPSGAlterVol     $0F
0009CE71 803A                       	dc.b	nRst, $3A
0009CE73                            
0009CE73                            music84_Jump05:
0009CE73 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0009CE7F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0009CE89 F6FF E8                    	smpsJump            music84_Jump05
0009CE8C                            
0009CE8C                            ; DAC Data
0009CE8C                            music84_DAC:
0009CE8C E0C0                       	smpsPan             panCenter, $00
0009CE8E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0009CE9A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0009CEA6 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0009CEB2 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009CEBE 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009CECA 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0009CED6 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009CEE2 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0009CEEE 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009CEFA 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0009CF06 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009CF12 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0009CF1E 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009CF2A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009CF36 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0009CF42 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0009CF4E 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0009CF5A 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0009CF66 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0009CF72 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009CF7E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009CF8A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009CF96 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0009CFA2 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009CFAE 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0009CFBA 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0009CFC6 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0009CFD2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009CFDE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009CFEA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009CFF6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009D002 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009D00E 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009D01A 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0009D026 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0009D032 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009D03E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0009D04A 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0009D056 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009D062 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0009D06E 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0009D07A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0009D086 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009D092 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009D09E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009D0AA 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009D0B6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009D0C2 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0009D0CE 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009D0DA 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0009D0E6 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0009D0F2 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009D0FE 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009D10A 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0009D116 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009D122 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0009D12E 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0009D13A 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009D146 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009D152 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009D15E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0009D16A 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0009D176 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0009D182 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0009D18E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009D19A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0009D1A6 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0009D1B2 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009D1BE 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009D1CA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009D1D6 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0009D1E2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009D1EE 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009D1FA 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0009D206 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009D212 E0C0                       	smpsPan             panCenter, $00
0009D214 F2                         	smpsStop
0009D215                            
0009D215                            music84_Voices:
0009D215                            ;	Voice $00
0009D215                            ;	$3D
0009D215                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0009D215                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0009D215                            	smpsVcAlgorithm     $05
0009D215                            	smpsVcFeedback      $07
0009D215                            	smpsVcUnusedBits    $00
0009D215                            	smpsVcDetune        $05, $04, $03, $04
0009D215                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009D215                            	smpsVcRateScale     $00, $00, $00, $00
0009D215                            	smpsVcAttackRate    $11, $11, $11, $11
0009D215                            	smpsVcAmpMod        $00, $00, $00, $00
0009D215                            	smpsVcDecayRate1    $00, $00, $00, $0A
0009D215                            	smpsVcDecayRate2    $00, $00, $00, $0B
0009D215                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D215                            	smpsVcReleaseRate   $08, $08, $08, $07
0009D215 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0009D22E                            
0009D22E                            ;	Voice $01
0009D22E                            ;	$04
0009D22E                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0009D22E                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0009D22E                            	smpsVcAlgorithm     $04
0009D22E                            	smpsVcFeedback      $00
0009D22E                            	smpsVcUnusedBits    $00
0009D22E                            	smpsVcDetune        $04, $03, $04, $05
0009D22E                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0009D22E                            	smpsVcRateScale     $00, $01, $00, $01
0009D22E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D22E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D22E                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0009D22E                            	smpsVcDecayRate2    $05, $00, $05, $00
0009D22E                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0009D22E                            	smpsVcReleaseRate   $06, $06, $06, $06
0009D22E 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0009D247                            
0009D247                            ;	Voice $02
0009D247                            ;	$30
0009D247                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0009D247                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0009D247                            	smpsVcAlgorithm     $00
0009D247                            	smpsVcFeedback      $06
0009D247                            	smpsVcUnusedBits    $00
0009D247                            	smpsVcDetune        $04, $02, $00, $06
0009D247                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0009D247                            	smpsVcRateScale     $00, $00, $00, $00
0009D247                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0009D247                            	smpsVcAmpMod        $00, $00, $00, $00
0009D247                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0009D247                            	smpsVcDecayRate2    $01, $01, $01, $01
0009D247                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0009D247                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0009D247 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009D260                            
0009D260                            ;	Voice $03
0009D260                            ;	$3A
0009D260                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009D260                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009D260                            	smpsVcAlgorithm     $02
0009D260                            	smpsVcFeedback      $07
0009D260                            	smpsVcUnusedBits    $00
0009D260                            	smpsVcDetune        $04, $06, $02, $00
0009D260                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009D260                            	smpsVcRateScale     $00, $00, $00, $00
0009D260                            	smpsVcAttackRate    $18, $19, $14, $14
0009D260                            	smpsVcAmpMod        $00, $00, $00, $00
0009D260                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009D260                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D260                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009D260                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009D260 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009D279                            
0009D279                            ;	Voice $04
0009D279                            ;	$3C
0009D279                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009D279                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009D279                            	smpsVcAlgorithm     $04
0009D279                            	smpsVcFeedback      $07
0009D279                            	smpsVcUnusedBits    $00
0009D279                            	smpsVcDetune        $07, $00, $00, $03
0009D279                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009D279                            	smpsVcRateScale     $00, $00, $00, $00
0009D279                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009D279                            	smpsVcAmpMod        $00, $00, $00, $00
0009D279                            	smpsVcDecayRate1    $00, $00, $00, $00
0009D279                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D279                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D279                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009D279 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0009D292                            
0009D292                            ;	Voice $05
0009D292                            ;	$38
0009D292                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0009D292                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0009D292                            	smpsVcAlgorithm     $00
0009D292                            	smpsVcFeedback      $07
0009D292                            	smpsVcUnusedBits    $00
0009D292                            	smpsVcDetune        $04, $06, $02, $00
0009D292                            	smpsVcCoarseFreq    $01, $01, $01, $00
0009D292                            	smpsVcRateScale     $00, $00, $00, $00
0009D292                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0009D292                            	smpsVcAmpMod        $00, $00, $00, $00
0009D292                            	smpsVcDecayRate1    $00, $03, $00, $17
0009D292                            	smpsVcDecayRate2    $00, $08, $08, $0B
0009D292                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0009D292                            	smpsVcReleaseRate   $08, $05, $05, $05
0009D292 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009D2AB                            
0009D2AB                            
0009D2AC 00                         		even
0009D2AC                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000A14BC                            		even
000A14BC                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A5014 00                         		even
000A5014                            Music87:	include	sound\music87.asm; Invincibility
000A5014                            triple_Header:
000A5014 =00000001                  smpsHeaderStartSong = 1
000A5014 0000                       	smpsHeaderVoice     triple_Voices
000A5016 0501                       	smpsHeaderChan      $05, $01
000A5018 0200                       	smpsHeaderTempo     $02, $00
000A501A                            
000A501E 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A5022 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A5026 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A502A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A502E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A5034                            
000A5034                            ; DAC Data
000A5034                            triple_DAC:
000A5034 E0C0                       	smpsPan             panCenter, $00
000A5036 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A503C                            
000A503C                            triple_Loop01:
000A503C 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A503F                            
000A503F                            triple_Loop00:
000A503F 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A504B 06                         	dc.b	$06
000A504C F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A5051 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A505D 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A5064 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A5069 0303 1B                    	dc.b	$03, $03, $1B
000A506C E0C0                       	smpsPan             panCenter, $00
000A506E F6FF C4                    	smpsJump triple_DAC
000A5071                            
000A5071                            ; FM1 Data
000A5071                            triple_FM1:
000A5071 E0C0                       	smpsPan             panCenter, $00
000A5075 8018                       	dc.b	nRst, $18
000A5077                            
000A5077                            triple_Loop0B:
000A5077 AC06 B8                    	dc.b	nG3, $06, nG4
000A507A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A507F                            
000A507F                            triple_Loop0C:
000A507F A7B3                       	dc.b	nD3, nD4
000A5081 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A5086                            
000A5086                            triple_Loop0D:
000A5086 A9B5                       	dc.b	nE3, nE4
000A5088 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A508D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A5095 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A509A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A50A6 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A50B2 AD                         	dc.b	nAb3
000A50B3 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A50B8 8018                       	dc.b	nRst, $18
000A50BA E0C0                       	smpsPan             panCenter, $00
000A50BE F6FF B1                    	smpsJump triple_FM1
000A50C1                            
000A50C1                            ; FM2 Data
000A50C1                            triple_FM2:
000A50C1 E0C0                       	smpsPan             panCenter, $00
000A50C5 8018                       	dc.b	nRst, $18
000A50C7                            
000A50C7                            triple_Loop07:
000A50C7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A50D3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A50DF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A50E4 8003                       	dc.b	nRst, $03
000A50E6                            
000A50E6                            triple_Loop08:
000A50E6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A50EC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A50F1 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A50F7                            
000A50F7                            triple_Loop09:
000A50F7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A5103 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A510F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A5114 8003                       	dc.b	nRst, $03
000A5116                            
000A5116                            triple_Loop0A:
000A5116 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A511C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A5121 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A5127 E0C0                       	smpsPan             panCenter, $00
000A512B F6FF 94                    	smpsJump triple_FM2
000A512E                            
000A512E                            ; FM3 Data
000A512E                            triple_FM3:
000A512E E0C0                       	smpsPan             panCenter, $00
000A5132 8018                       	dc.b	nRst, $18
000A5134                            
000A5134                            triple_Loop06:
000A5134 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A513B F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A5140 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A514C BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A5158 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A515B F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A5160 8018                       	dc.b	nRst, $18
000A5162 E0C0                       	smpsPan             panCenter, $00
000A5166 F6FF C6                    	smpsJump triple_FM3
000A5169                            
000A5169                            ; FM4 Data
000A5169                            triple_FM4:
000A5169 E103                       	smpsAlterNote       $03
000A516D E0C0                       	smpsPan             panCenter, $00
000A516F 8018                       	dc.b	nRst, $18
000A5171                            
000A5171                            triple_Loop02:
000A5171 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A517D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A5189 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A518E 8003                       	dc.b	nRst, $03
000A5190                            
000A5190                            triple_Loop03:
000A5190 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A5196 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A519B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A51A1                            
000A51A1                            triple_Loop04:
000A51A1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A51AD C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A51B9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A51BE 8003                       	dc.b	nRst, $03
000A51C0                            
000A51C0                            triple_Loop05:
000A51C0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A51C6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A51CB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A51D1 E0C0                       	smpsPan             panCenter, $00
000A51D3 F6FF 94                    	smpsJump triple_FM4
000A51D6                            
000A51D6                            ; PSG1 Data
000A51D6                            triple_PSG1:
000A51D6 8018                       	dc.b	nRst, $18
000A51D8                            
000A51D8                            triple_Loop0E:
000A51D8 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A51E4 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A51F0 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A51FC 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A5200 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A5205 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A5211 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A521D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A5229 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A522D                            
000A522D                            triple_Loop0F:
000A522D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A5233 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A5238 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A523E                            
000A523E                            triple_Loop10:
000A523E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A524A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A5256 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A5262 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A5266 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A526B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A5277 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A5283 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A528F 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A5293                            
000A5293                            triple_Loop11:
000A5293 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A5299 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A529E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A52A4 F500                       	smpsPSGvoice        $00
000A52A6 F6FF 2E                    	smpsJump triple_PSG1
000A52A9                            
000A52A9                            triple_Voices:
000A52A9                            ;	Voice $00
000A52A9                            ;	$3A
000A52A9                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A52A9                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A52A9                            	smpsVcAlgorithm     $02
000A52A9                            	smpsVcFeedback      $07
000A52A9                            	smpsVcUnusedBits    $00
000A52A9                            	smpsVcDetune        $00, $00, $00, $00
000A52A9                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A52A9                            	smpsVcRateScale     $01, $02, $02, $02
000A52A9                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A52A9                            	smpsVcAmpMod        $00, $00, $00, $00
000A52A9                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A52A9                            	smpsVcDecayRate2    $00, $00, $00, $00
000A52A9                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A52A9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A52A9 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A52C2                            
000A52C2                            ;	Voice $01
000A52C2                            ;	$20
000A52C2                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A52C2                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A52C2                            	smpsVcAlgorithm     $00
000A52C2                            	smpsVcFeedback      $04
000A52C2                            	smpsVcUnusedBits    $00
000A52C2                            	smpsVcDetune        $00, $00, $03, $07
000A52C2                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A52C2                            	smpsVcRateScale     $03, $03, $03, $02
000A52C2                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A52C2                            	smpsVcAmpMod        $00, $00, $00, $00
000A52C2                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A52C2                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A52C2                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A52C2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A52C2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A52C2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A52DC 00                         		even
000A52DC                            Music88:	incbin	sound\music88.bin; Extra Life
000A53CA                            		even
000A53CA                            Music89:	incbin	sound\music89.bin; Special Stage
000A9292 00                         		even
000A9292                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A945C                            		even
000A945C                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A96F6                            		even
000A96F6                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A9994                            		even
000A9994                            Music8D:	incbin	sound\music8D.bin; Final Zone
000AFC0C 00                         		even
000AFC0C                            Music8E:	include	sound\merry.asm ; Act Clear
000AFC0C =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000AFC0C =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000AFC0C =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000AFC0C =0000008A                  dMerryClap = dLowTimpani
000AFC0C                            
000AFC0C                            MerrysLittleLamb_Header:
000AFC0C 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000AFC0E 0603                       	smpsHeaderChan      $06, $03
000AFC10 0100                       	smpsHeaderTempo     $01, $00
000AFC12                            
000AFC16 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000AFC1A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000AFC1E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000AFC22 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000AFC26 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000AFC2A 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000AFC30 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000AFC36 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000AFC3C                            
000AFC3C                            MerrysLittleLamb_FM1:
000AFC3C E0C0                       	smpsPan             panCenter, $00
000AFC3E 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000AFC45 E60F                       	smpsAlterVol        $0F
000AFC47 A704                       	dc.b	nD3, $04
000AFC49 E606                       	smpsAlterVol        $06
000AFC4B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFC50 E6FA                       	smpsAlterVol        $FA
000AFC52 A705                       	dc.b	nD3, $05
000AFC54 E606                       	smpsAlterVol        $06
000AFC56 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFC5B E6FA                       	smpsAlterVol        $FA
000AFC5D A704                       	dc.b	nD3, $04
000AFC5F E606                       	smpsAlterVol        $06
000AFC61 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AFC67 E6FA                       	smpsAlterVol        $FA
000AFC69 A7                         	dc.b	nD3
000AFC6A E606                       	smpsAlterVol        $06
000AFC6C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFC71 E6FA                       	smpsAlterVol        $FA
000AFC73 A704                       	dc.b	nD3, $04
000AFC75 E606                       	smpsAlterVol        $06
000AFC77 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AFC7D E6FA                       	smpsAlterVol        $FA
000AFC7F A7                         	dc.b	nD3
000AFC80 E606                       	smpsAlterVol        $06
000AFC82 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AFC88 E6FA                       	smpsAlterVol        $FA
000AFC8A A705                       	dc.b	nD3, $05
000AFC8C E606                       	smpsAlterVol        $06
000AFC8E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFC93 E6FA                       	smpsAlterVol        $FA
000AFC95 A7                         	dc.b	nD3
000AFC96 E606                       	smpsAlterVol        $06
000AFC98 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AFC9E E6FA                       	smpsAlterVol        $FA
000AFCA0 A705                       	dc.b	nD3, $05
000AFCA2 E606                       	smpsAlterVol        $06
000AFCA4 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFCA9 E6FA                       	smpsAlterVol        $FA
000AFCAB A704                       	dc.b	nD3, $04
000AFCAD E606                       	smpsAlterVol        $06
000AFCAF A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFCB4 E6FA                       	smpsAlterVol        $FA
000AFCB6 A705                       	dc.b	nD3, $05
000AFCB8 E606                       	smpsAlterVol        $06
000AFCBA A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFCBF E6FA                       	smpsAlterVol        $FA
000AFCC1 A704                       	dc.b	nD3, $04
000AFCC3 E606                       	smpsAlterVol        $06
000AFCC5 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFCCA E6FA                       	smpsAlterVol        $FA
000AFCCC A705                       	dc.b	nD3, $05
000AFCCE E606                       	smpsAlterVol        $06
000AFCD0 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFCD5 E6FA                       	smpsAlterVol        $FA
000AFCD7 A704                       	dc.b	nD3, $04
000AFCD9 E606                       	smpsAlterVol        $06
000AFCDB A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AFCE1 E6FA                       	smpsAlterVol        $FA
000AFCE3 A7                         	dc.b	nD3
000AFCE4 E606                       	smpsAlterVol        $06
000AFCE6 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AFCEC E6FA                       	smpsAlterVol        $FA
000AFCEE A705                       	dc.b	nD3, $05
000AFCF0 E606                       	smpsAlterVol        $06
000AFCF2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFCF7 E6FA                       	smpsAlterVol        $FA
000AFCF9 A7                         	dc.b	nD3
000AFCFA E606                       	smpsAlterVol        $06
000AFCFC A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AFD02 E6FA                       	smpsAlterVol        $FA
000AFD04 A705                       	dc.b	nD3, $05
000AFD06 E606                       	smpsAlterVol        $06
000AFD08 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFD0D E6FA                       	smpsAlterVol        $FA
000AFD0F A704                       	dc.b	nD3, $04
000AFD11 E606                       	smpsAlterVol        $06
000AFD13 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFD18 E6FA                       	smpsAlterVol        $FA
000AFD1A A705                       	dc.b	nD3, $05
000AFD1C E606                       	smpsAlterVol        $06
000AFD1E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFD23 E6FA                       	smpsAlterVol        $FA
000AFD25 A704                       	dc.b	nD3, $04
000AFD27 E606                       	smpsAlterVol        $06
000AFD29 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFD2E E6FA                       	smpsAlterVol        $FA
000AFD30 A705                       	dc.b	nD3, $05
000AFD32 E606                       	smpsAlterVol        $06
000AFD34 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFD39 E6FA                       	smpsAlterVol        $FA
000AFD3B A704                       	dc.b	nD3, $04
000AFD3D E606                       	smpsAlterVol        $06
000AFD3F A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AFD45 E6FA                       	smpsAlterVol        $FA
000AFD47 A7                         	dc.b	nD3
000AFD48 E606                       	smpsAlterVol        $06
000AFD4A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFD4F E6FA                       	smpsAlterVol        $FA
000AFD51 A704                       	dc.b	nD3, $04
000AFD53 E606                       	smpsAlterVol        $06
000AFD55 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AFD5B E6FA                       	smpsAlterVol        $FA
000AFD5D A7                         	dc.b	nD3
000AFD5E E606                       	smpsAlterVol        $06
000AFD60 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AFD66 E6FA                       	smpsAlterVol        $FA
000AFD68 A705                       	dc.b	nD3, $05
000AFD6A E606                       	smpsAlterVol        $06
000AFD6C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFD71 E6FA                       	smpsAlterVol        $FA
000AFD73 A704                       	dc.b	nD3, $04
000AFD75 E606                       	smpsAlterVol        $06
000AFD77 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFD7C E6FA                       	smpsAlterVol        $FA
000AFD7E A705                       	dc.b	nD3, $05
000AFD80 E606                       	smpsAlterVol        $06
000AFD82 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AFD87 E6FA                       	smpsAlterVol        $FA
000AFD89 A704                       	dc.b	nD3, $04
000AFD8B E606                       	smpsAlterVol        $06
000AFD8D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AFD92 E6FA                       	smpsAlterVol        $FA
000AFD94 A705                       	dc.b	nD3, $05
000AFD96 E606                       	smpsAlterVol        $06
000AFD98 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AFD9D E6FA                       	smpsAlterVol        $FA
000AFD9F A704                       	dc.b	nD3, $04
000AFDA1 E606                       	smpsAlterVol        $06
000AFDA3 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000AFDAA F2                         	smpsStop
000AFDAB                            
000AFDAB                            MerrysLittleLamb_FM2:
000AFDAB E0C0                       	smpsPan             panCenter, $00
000AFDAD 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000AFDB5 E610                       	smpsAlterVol        $10
000AFDB7 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000AFDC0                            
000AFDC0                            MerrysLittleLamb_FM3:
000AFDC0                            MerrysLittleLamb_FM4:
000AFDC0                            MerrysLittleLamb_FM5:
000AFDC0 F2                         	smpsStop
000AFDC1                            
000AFDC1                            MerrysLittleLamb_PSG1:
000AFDC1 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000AFDC9 EC02                       	smpsPSGAlterVol     $02
000AFDCB B7                         	dc.b	nFs4
000AFDCC EC03                       	smpsPSGAlterVol     $03
000AFDCE B7                         	dc.b	nFs4
000AFDCF EC03                       	smpsPSGAlterVol     $03
000AFDD1 B7                         	dc.b	nFs4
000AFDD2 EC03                       	smpsPSGAlterVol     $03
000AFDD4 B7                         	dc.b	nFs4
000AFDD5 ECF5                       	smpsPSGAlterVol     $F5
000AFDD7 B7                         	dc.b	nFs4
000AFDD8 EC02                       	smpsPSGAlterVol     $02
000AFDDA B7                         	dc.b	nFs4
000AFDDB EC03                       	smpsPSGAlterVol     $03
000AFDDD B7                         	dc.b	nFs4
000AFDDE EC03                       	smpsPSGAlterVol     $03
000AFDE0 B7                         	dc.b	nFs4
000AFDE1 ECF8                       	smpsPSGAlterVol     $F8
000AFDE3 B7                         	dc.b	nFs4
000AFDE4 EC02                       	smpsPSGAlterVol     $02
000AFDE6 B7                         	dc.b	nFs4
000AFDE7 EC03                       	smpsPSGAlterVol     $03
000AFDE9 B7                         	dc.b	nFs4
000AFDEA EC03                       	smpsPSGAlterVol     $03
000AFDEC B7                         	dc.b	nFs4
000AFDED EC03                       	smpsPSGAlterVol     $03
000AFDEF B7                         	dc.b	nFs4
000AFDF0 ECF5                       	smpsPSGAlterVol     $F5
000AFDF2 B7                         	dc.b	nFs4
000AFDF3 EC02                       	smpsPSGAlterVol     $02
000AFDF5 B7                         	dc.b	nFs4
000AFDF6 EC03                       	smpsPSGAlterVol     $03
000AFDF8 B7                         	dc.b	nFs4
000AFDF9 EC03                       	smpsPSGAlterVol     $03
000AFDFB B7                         	dc.b	nFs4
000AFDFC EC03                       	smpsPSGAlterVol     $03
000AFDFE B7                         	dc.b	nFs4
000AFDFF ECF5                       	smpsPSGAlterVol     $F5
000AFE01 B7                         	dc.b	nFs4
000AFE02 EC02                       	smpsPSGAlterVol     $02
000AFE04 B7                         	dc.b	nFs4
000AFE05 EC06                       	smpsPSGAlterVol     $06
000AFE07 B7                         	dc.b	nFs4
000AFE08 EC03                       	smpsPSGAlterVol     $03
000AFE0A B7                         	dc.b	nFs4
000AFE0B ECF5                       	smpsPSGAlterVol     $F5
000AFE0D B7                         	dc.b	nFs4
000AFE0E EC02                       	smpsPSGAlterVol     $02
000AFE10 B7                         	dc.b	nFs4
000AFE11 EC03                       	smpsPSGAlterVol     $03
000AFE13 B7                         	dc.b	nFs4
000AFE14 EC03                       	smpsPSGAlterVol     $03
000AFE16 B7                         	dc.b	nFs4
000AFE17 EC03                       	smpsPSGAlterVol     $03
000AFE19 B7                         	dc.b	nFs4
000AFE1A ECF5                       	smpsPSGAlterVol     $F5
000AFE1C B7                         	dc.b	nFs4
000AFE1D EC02                       	smpsPSGAlterVol     $02
000AFE1F B7                         	dc.b	nFs4
000AFE20 EC03                       	smpsPSGAlterVol     $03
000AFE22 B7                         	dc.b	nFs4
000AFE23 EC03                       	smpsPSGAlterVol     $03
000AFE25 B7                         	dc.b	nFs4
000AFE26 EC03                       	smpsPSGAlterVol     $03
000AFE28 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000AFE2C ECF7                       	smpsPSGAlterVol     $F7
000AFE2E A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000AFE3A A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000AFE46 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000AFE52 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000AFE5E 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000AFE6A F2                         	smpsStop
000AFE6B                            
000AFE6B                            MerrysLittleLamb_PSG2:
000AFE6B 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000AFE72 EC02                       	smpsPSGAlterVol     $02
000AFE74 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000AFE80 E101                       	smpsAlterNote       $01
000AFE82 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000AFE86 E101                       	smpsAlterNote       $01
000AFE88 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AFE8C E101                       	smpsAlterNote       $01
000AFE8E AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AFE92 E101                       	smpsAlterNote       $01
000AFE94 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AFE98 E101                       	smpsAlterNote       $01
000AFE9A AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000AFE9E E101                       	smpsAlterNote       $01
000AFEA0 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AFEA4 E101                       	smpsAlterNote       $01
000AFEA6 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000AFEAA E101                       	smpsAlterNote       $01
000AFEAC AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AFEB0 E101                       	smpsAlterNote       $01
000AFEB2 AB04 80                    	dc.b	nFs3, $04, nRst
000AFEB5 E101                       	smpsAlterNote       $01
000AFEB7 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AFEBB E101                       	smpsAlterNote       $01
000AFEBD AB04 80                    	dc.b	nFs3, $04, nRst
000AFEC0 E101                       	smpsAlterNote       $01
000AFEC2 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000AFEC8 F2                         	smpsStop
000AFEC9                            
000AFEC9                            MerrysLittleLamb_PSG3:
000AFEC9 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000AFECF F3E7                       	smpsPSGform         $E7
000AFED1 E108                       	smpsAlterNote       $08
000AFED3 0002                       	dc.b	nMaxPSG, $02
000AFED5 EC01                       	smpsPSGAlterVol     $01
000AFED7 E108                       	smpsAlterNote       $08
000AFED9 0005                       	dc.b	nMaxPSG, $05
000AFEDB EC01                       	smpsPSGAlterVol     $01
000AFEDD E108                       	smpsAlterNote       $08
000AFEDF 0008                       	dc.b	nMaxPSG, $08
000AFEE1 EC01                       	smpsPSGAlterVol     $01
000AFEE3 E108                       	smpsAlterNote       $08
000AFEE5 00                         	dc.b	nMaxPSG
000AFEE6 EC01                       	smpsPSGAlterVol     $01
000AFEE8 E108                       	smpsAlterNote       $08
000AFEEA 00                         	dc.b	nMaxPSG
000AFEEB EC01                       	smpsPSGAlterVol     $01
000AFEED E108                       	smpsAlterNote       $08
000AFEEF 0007                       	dc.b	nMaxPSG, $07
000AFEF1 EC01                       	smpsPSGAlterVol     $01
000AFEF3 E108                       	smpsAlterNote       $08
000AFEF5 0005                       	dc.b	nMaxPSG, $05
000AFEF7 EC01                       	smpsPSGAlterVol     $01
000AFEF9 E108                       	smpsAlterNote       $08
000AFEFB 0007                       	dc.b	nMaxPSG, $07
000AFEFD EC01                       	smpsPSGAlterVol     $01
000AFEFF E108                       	smpsAlterNote       $08
000AFF01 0004                       	dc.b	nMaxPSG, $04
000AFF03 EC01                       	smpsPSGAlterVol     $01
000AFF05 E108                       	smpsAlterNote       $08
000AFF07 0007                       	dc.b	nMaxPSG, $07
000AFF09 EC01                       	smpsPSGAlterVol     $01
000AFF0B E108                       	smpsAlterNote       $08
000AFF0D 0006                       	dc.b	nMaxPSG, $06
000AFF0F EC01                       	smpsPSGAlterVol     $01
000AFF11 E108                       	smpsAlterNote       $08
000AFF13 0009                       	dc.b	nMaxPSG, $09
000AFF15 EC01                       	smpsPSGAlterVol     $01
000AFF17 E108                       	smpsAlterNote       $08
000AFF19 0007                       	dc.b	nMaxPSG, $07
000AFF1B EC01                       	smpsPSGAlterVol     $01
000AFF1D E108                       	smpsAlterNote       $08
000AFF1F 0001                       	dc.b	nMaxPSG, $01
000AFF21 ECFF                       	smpsPSGAlterVol     $FF
000AFF23 E108                       	smpsAlterNote       $08
000AFF25 00                         	dc.b	nMaxPSG
000AFF26 EC01                       	smpsPSGAlterVol     $01
000AFF28 E108                       	smpsAlterNote       $08
000AFF2A 0009                       	dc.b	nMaxPSG, $09
000AFF2C EC01                       	smpsPSGAlterVol     $01
000AFF2E E108                       	smpsAlterNote       $08
000AFF30 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000AFF37 F2                         	smpsStop
000AFF38                            
000AFF38                            MerrysLittleLamb_DAC:
000AFF38 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000AFF44 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000AFF50 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000AFF5C 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000AFF68 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000AFF74 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000AFF80 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000AFF8C 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000AFF98 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000AFFA4 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000AFFB0 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000AFFBC 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000AFFC8 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000AFFD4 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000AFFE0 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000AFFEC 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000AFFF8 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000B0004 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000B0010 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000B001C 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000B0028 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000B0034 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000B0040 F2                         	smpsStop
000B0041                            
000B0041                            MerrysLittleLamb_Voices:
000B0041                            ;	Voice $00
000B0041                            ;	$00
000B0041                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000B0041                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000B0041                            	smpsVcAlgorithm     $00
000B0041                            	smpsVcFeedback      $00
000B0041                            	smpsVcUnusedBits    $00
000B0041                            	smpsVcDetune        $07, $07, $07, $07
000B0041                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B0041                            	smpsVcRateScale     $00, $00, $00, $00
000B0041                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0041                            	smpsVcAmpMod        $00, $00, $00, $00
000B0041                            	smpsVcDecayRate1    $1F, $00, $00, $00
000B0041                            	smpsVcDecayRate2    $12, $00, $00, $00
000B0041                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000B0041                            	smpsVcReleaseRate   $0F, $00, $00, $00
000B0041 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000B005A                            
000B005A                            ;	Voice $01
000B005A                            ;	$25
000B005A                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000B005A                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000B005A                            	smpsVcAlgorithm     $05
000B005A                            	smpsVcFeedback      $04
000B005A                            	smpsVcUnusedBits    $00
000B005A                            	smpsVcDetune        $07, $00, $00, $00
000B005A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B005A                            	smpsVcRateScale     $00, $00, $00, $00
000B005A                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B005A                            	smpsVcAmpMod        $00, $00, $00, $00
000B005A                            	smpsVcDecayRate1    $03, $0B, $06, $08
000B005A                            	smpsVcDecayRate2    $00, $00, $00, $00
000B005A                            	smpsVcDecayLevel    $00, $0A, $04, $04
000B005A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B005A 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000B0073                            
000B0073                            
000B0074 00                         		even
000B0074                            Music8F:	incbin	sound\music8F.bin ; Game Over
000B06B4 00                         		even
000B06B4                            Music90:	incbin	sound\music90.bin ; Continue
000B0A4E 00                         		even
000B0A4E                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000B0A4E                            Mus91_Credits_Header:
000B0A4E =00000001                  smpsHeaderStartSong = 1
000B0A4E 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000B0A50 0603                       	smpsHeaderChan      $06, $03
000B0A52 0133                       	smpsHeaderTempo     $01, $33
000B0A54                            
000B0A58 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000B0A5C 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000B0A60 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000B0A64 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000B0A68 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000B0A6C 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000B0A72 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000B0A78 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000B0A7E                            ;	this is just a rip of the track
000B0A7E                            ;	ripper, 	part,		joke
000B0A7E                            ;	undecided, 	intro,		undecided
000B0A7E                            ;	coninight, 	ghz,		luka luka night fever -FM1 done
000B0A7E                            ;	coninight, 	lz,		the cleveland show (callback) - COMPLETE!
000B0A7E                            ;	undecided, 	mz,		undecided
000B0A7E                            ;	carlos, 	slz,		meltdown
000B0A7E                            ;	undecided, 	sbz,		undecided
000B0A7E                            ;	undecided, 	ccz,		undecided
000B0A7E                            ;	undecided, 	ending,		undecided
000B0A7E                            
000B0A7E                            ; FM1 Data
000B0A7E                            Mus91_Credits_FM1:
000B0A7E E201                       	smpsNop             $01
000B0A80 8060                       	dc.b	nRst, $60
000B0A84 E6F8                       	smpsAlterVol        $F8
000B0A86 E806                       	smpsNoteFill        $06
000B0A88 F800 00                    	smpsCall            Mus91_Credits_Call11
000B0A8B E0C0                       	smpsPan             panCenter, $00
000B0A8D E800                       	smpsNoteFill        $00
000B0A91 F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000B0A96                            ; conis turn
000B0A96 F800 00                    	smpsCall            Mus91_Credits_Call12	;ruka ruka
000B0A99 C40C C5C7 18C5 30          	dc.b	nG5, $0C, nAb5, nBb5, $18, nAb5, $30	;โ naito fiibaa
000B0AA0                            
000B0AA0 F800 00                    	smpsCall            Mus91_Credits_Call12	;watashi wa 
000B0AA3 CC0C CAC9 CA               	dc.b	nEb6, $0C, nCs6, nC6, nCs6		;koko ni
000B0AA8 C9C9 C7C5 80               	dc.b	nC6, nC6, nBb5, nAb5, nRst		;iru kara
000B0AAD                            
000B0AAD C2C2 C4C5 C718             	dc.b	nF5, nF5, nG5, nAb5, nBb5, $18		;sukoshi de mo
000B0AB3 C4C5 0CC7 18C5 80          	dc.b	nG5, nAb5, $0C, nBb5, $18, nAb5, nRst	;shisen o
000B0ABA                            
000B0ABA C2C4 C5C7 0C               	dc.b	nF5, nG5, nAb5, nBb5, $0C		;sorashicha
000B0ABF F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000B0AC2 8060 6060 18               	dc.b	nRst, $60, $60, $60, $18
000B0AC7 F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000B0ACA                            ;	dc.b	nRst, $30
000B0ACA                            ; conis turn again
000B0ACA F4                         	smpsModOff
000B0ACB E201                       	smpsNop             $01
000B0ACF E602                       	smpsAlterVol        $02
000B0AD1 C10C C4C1                  	dc.b	nE5, $0C, nG5, nE5			;My name is
000B0AD5                            ;cut for tempo change
000B0AD5 EA0F                       	smpsSetTempoMod     $0F
000B0AD7                            ;perfect now continue
000B0AD7 C409 C4C6 0C               	dc.b	nG5, $09, nG5, nA5, $0C			;Cleveland Brown
000B0ADC                            
000B0ADC C106 C103 BFBD 06          	dc.b	nE5, $06, nE5, $03, nD5, nC5, $06	;and I am
000B0AE3 BD09 BDBA 0680             	dc.b	nC5, $09, nC5, nA4, $06, nRst		;proud to be
000B0AE9                            
000B0AE9 CD06 CBC8                  	dc.b	nE6, $06, nD6, nB5			; and silence
000B0AED CB09 C9C6 0C               	dc.b	nD6, $09, nC6, nA5, $0C
000B0AF2                            
000B0AF2 C806 C603 C4C6 06          	dc.b	nB5, $06, nA5, $03, nG5, nA5, $06
000B0AF9 C609 C6C8 0680 0C          	dc.b	nA5, $09, nA5, nB5, $06, nRst, $0C
000B0B00                            
000B0B00 C9CB 04C9 CBC9 24          	dc.b	nC6, nD6, $04, nC6, nD6, nC6, $24	;welcome back to labyrinth zone from sonic 1
000B0B07 E9F4                       	smpsAlterPitch      $F4
000B0B09 E609                       	smpsAlterVol        $09
000B0B0D 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000B0B14 F800 00                    	smpsCall            Mus91_Credits_Call0C
000B0B19 E6EB                       	smpsAlterVol        $EB
000B0B1B 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000B0B20 F800 00                    	smpsCall            Mus91_Credits_Call0D
000B0B23 CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000B0B2B E201                       	smpsNop             $01
000B0B2D EA0A                       	smpsSetTempoMod     $0A
000B0B31 E90C                       	smpsAlterPitch      $0C
000B0B33 E60B                       	smpsAlterVol        $0B
000B0B35 F800 00                    	smpsCall            Mus91_Credits_Call0E
000B0B38 E201                       	smpsNop             $01
000B0B3A EA07                       	smpsSetTempoMod     $07
000B0B3C 8060                       	dc.b	nRst, $60
000B0B3E E201                       	smpsNop             $01
000B0B40 EA03                       	smpsSetTempoMod     $03
000B0B42 8030                       	dc.b	nRst, $30
000B0B46 E60E                       	smpsAlterVol        $0E
000B0B48 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000B0B54 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000B0B60 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000B0B6C 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000B0B78 E201                       	smpsNop             $01
000B0B7A EA04                       	smpsSetTempoMod     $04
000B0B7C E6F5                       	smpsAlterVol        $F5
000B0B80 8060                       	dc.b	nRst, $60
000B0B82 F800 00                    	smpsCall            Mus91_Credits_Call07
000B0B85 E609                       	smpsAlterVol        $09
000B0B87 E103                       	smpsAlterNote       $03
000B0B8B F000 0106 04               	smpsModSet          $00, $01, $06, $04
000B0B90 F800 00                    	smpsCall            Mus91_Credits_Call0B
000B0B93 E6EF                       	smpsAlterVol        $EF
000B0B97 E102                       	smpsAlterNote       $02
000B0B99 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000B0B9D E201                       	smpsNop             $01
000B0B9F F2                         	smpsStop
000B0BA0                            
000B0BA0                            Mus91_Credits_Call12:
000B0BA0                            	;whats the name of the pink haired vocaloid just askin'
000B0BA0                            	;and twice as well
000B0BA0                            	;them:
000B0BA0 C218 C9C2 C9               	dc.b	nF5, $18, nC6, nF5, nC6
000B0BA5 E3                         	smpsReturn
000B0BA6                            
000B0BA6                            Mus91_Credits_DameDameYo:
000B0BA6 C418 C50C C4C5 C2          	dc.b	nG5, $18, nAb5, $0C, nG5, nAb5, nF5	
000B0BAD E3                         	smpsReturn
000B0BAE                            
000B0BAE                            Mus91_Credits_Call07:
000B0BAE 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000B0BBA 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000B0BC6 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000B0BD0 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000B0BD5 E3                         	smpsReturn
000B0BD6                            
000B0BD6                            ; FM2 Data
000B0BD6                            Mus91_Credits_FM2:
000B0BD6 8060                       	dc.b	nRst, $60
000B0BDA                            
000B0BDA                            Mus91_Credits_Loop0F:
000B0BDA A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000B0BE6 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000B0BF2 ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000B0BFB F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000B0C02                            
000B0C02                            Mus91_Credits_Loop10:
000B0C02 E805                       	smpsNoteFill        $05
000B0C04 AA0C                       	dc.b	nF3, $0C
000B0C06 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B0C09 E805                       	smpsNoteFill        $05
000B0C0B A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000B0C11 E800                       	smpsNoteFill        $00
000B0C13 A5A7 A9                    	dc.b	nC3, nD3, nE3
000B0C16 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000B0C1B E805                       	smpsNoteFill        $05
000B0C1D AA                         	dc.b	nF3
000B0C1E F800 00                    	smpsCall            Mus91_Credits_Call0F
000B0C21 E805                       	smpsNoteFill        $05
000B0C23 A9                         	dc.b	nE3
000B0C24 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B0C27 E805                       	smpsNoteFill        $05
000B0C29 A7                         	dc.b	nD3
000B0C2A F800 00                    	smpsCall            Mus91_Credits_Call0F
000B0C2D E805                       	smpsNoteFill        $05
000B0C2F A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000B0C35 E800                       	smpsNoteFill        $00
000B0C37 A0A2 A4                    	dc.b	nG2, nA2, nB2
000B0C3A E805                       	smpsNoteFill        $05
000B0C3C                            
000B0C3C                            Mus91_Credits_Loop11:
000B0C3C A5                         	dc.b	nC3
000B0C3D F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000B0C42 E800                       	smpsNoteFill        $00
000B0C44 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000B0C50 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000B0C5A E9E8                       	smpsAlterPitch      $E8
000B0C5C E602                       	smpsAlterVol        $02
000B0C5E                            
000B0C5E                            Mus91_Credits_Loop12:
000B0C5E B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000B0C6A 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000B0C76 B509 8003                  	dc.b	nE4, $09, nRst, $03
000B0C7A E905                       	smpsAlterPitch      $05
000B0C7C F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000B0C81 E9F6                       	smpsAlterPitch      $F6
000B0C83 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000B0C8F 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000B0C97 E601                       	smpsAlterVol        $01
000B0C9B                            
000B0C9B                            Mus91_Credits_Loop13:
000B0C9B AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000B0CA7 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000B0CAF F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000B0CB4                            
000B0CB4                            Mus91_Credits_Loop14:
000B0CB4 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000B0CC0 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000B0CC8 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000B0CCD B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000B0CD9 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000B0CE5 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000B0CF1 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000B0CFD B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000B0D09 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000B0D0F E6F8                       	smpsAlterVol        $F8
000B0D11 B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000B0D1D 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000B0D29 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000B0D35 0280 01                    	dc.b	$02, nRst, $01
000B0D38                            
000B0D38                            Mus91_Credits_Loop15:
000B0D38 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000B0D44 B302 8001                  	dc.b	nD4, $02, nRst, $01
000B0D48 E9FF                       	smpsAlterPitch      $FF
000B0D4A F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000B0D4F E904                       	smpsAlterPitch      $04
000B0D51 AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000B0D5D 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000B0D69 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000B0D75 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000B0D81 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000B0D8D AC24                       	dc.b	nG3, $24
000B0D91 E90C                       	smpsAlterPitch      $0C
000B0D93 E607                       	smpsAlterVol        $07
000B0D95 E806                       	smpsNoteFill        $06
000B0D97                            
000B0D97                            Mus91_Credits_Loop16:
000B0D97 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0D9A E906                       	smpsAlterPitch      $06
000B0D9C F800 00                    	smpsCall            Mus91_Credits_Call10
000B0D9F E9FF                       	smpsAlterPitch      $FF
000B0DA1 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0DA4 E902                       	smpsAlterPitch      $02
000B0DA6 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0DA9 E9F9                       	smpsAlterPitch      $F9
000B0DAB F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000B0DB0 E800                       	smpsNoteFill        $00
000B0DB2 E9F4                       	smpsAlterPitch      $F4
000B0DB4 E6FC                       	smpsAlterVol        $FC
000B0DB8 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000B0DC4 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000B0DCF E602                       	smpsAlterVol        $02
000B0DD1 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000B0DDD BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000B0DE9 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000B0DF5 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000B0E01 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000B0E07 E90C                       	smpsAlterPitch      $0C
000B0E09 E6FE                       	smpsAlterVol        $FE
000B0E0D 8060                       	dc.b	nRst, $60
000B0E0F                            
000B0E0F                            Mus91_Credits_Loop17:
000B0E0F AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000B0E1B 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000B0E27 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000B0E31 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000B0E36 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000B0E42 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000B0E4E 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000B0E5A B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000B0E66 AE06 80                    	dc.b	nA3, $06, nRst
000B0E69 E6FD                       	smpsAlterVol        $FD
000B0E6B A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B0E6F F2                         	smpsStop
000B0E70                            
000B0E70                            	; Unused data
000B0E70                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000B0E70 0001                       	dc.b	$00, $01
000B0E72                            
000B0E72                            Mus91_Credits_Call0F:
000B0E72 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000B0E78 E800                       	smpsNoteFill        $00
000B0E7A 0C                         	dc.b	$0C
000B0E7B E3                         	smpsReturn
000B0E7C                            
000B0E7C                            Mus91_Credits_Call10:
000B0E7C B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000B0E85 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000B0E8A E3                         	smpsReturn
000B0E8B                            
000B0E8B                            ; FM3 Data
000B0E8B                            Mus91_Credits_FM3:
000B0E8B 8060                       	dc.b	nRst, $60
000B0E8D F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000B0E94 E601                       	smpsAlterVol        $01
000B0E96 E040                       	smpsPan             panRight, $00
000B0E98 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000B0EA4 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000B0EA9                            
000B0EA9                            Mus91_Credits_Loop0C:
000B0EA9 E080                       	smpsPan             panLeft, $00
000B0EAB D9                         	dc.b	nE7
000B0EAC E040                       	smpsPan             panRight, $00
000B0EAE D5                         	dc.b	nC7
000B0EAF E602                       	smpsAlterVol        $02
000B0EB1 F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000B0EB6 E0C0                       	smpsPan             panCenter, $00
000B0EBA E6E5                       	smpsAlterVol        $E5
000B0EBC E9E8                       	smpsAlterPitch      $E8
000B0EBE D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000B0ECA D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000B0ED6 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000B0EE2 D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000B0EE6 F4                         	smpsModOff
000B0EE9 E6FE                       	smpsAlterVol        $FE
000B0EEB                            
000B0EEB                            Mus91_Credits_Loop0D:
000B0EEB C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000B0EF7 8008                       	dc.b	nRst, $08
000B0EF9 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000B0EFE C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000B0F0A 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000B0F16 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B0F1E E918                       	smpsAlterPitch      $18
000B0F20 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000B0F25 E9E8                       	smpsAlterPitch      $E8
000B0F29 E90C                       	smpsAlterPitch      $0C
000B0F2B E603                       	smpsAlterVol        $03
000B0F2D E102                       	smpsAlterNote       $02
000B0F2F 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000B0F36 F800 00                    	smpsCall            Mus91_Credits_Call0C
000B0F3B E90C                       	smpsAlterPitch      $0C
000B0F3D E60B                       	smpsAlterVol        $0B
000B0F3F 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000B0F44 F800 00                    	smpsCall            Mus91_Credits_Call0D
000B0F49 E6EC                       	smpsAlterVol        $EC
000B0F4B 8006                       	dc.b	nRst, $06
000B0F4D E114                       	smpsAlterNote       $14
000B0F4F C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000B0F52 E100                       	smpsAlterNote       $00
000B0F54 02C6 03                    	dc.b	$02, nA5, $03
000B0F57 E805                       	smpsNoteFill        $05
000B0F59 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000B0F60 E800                       	smpsNoteFill        $00
000B0F62 C9                         	dc.b	nC6
000B0F63 E6FC                       	smpsAlterVol        $FC
000B0F65 E933                       	smpsAlterPitch      $33
000B0F69 B403                       	dc.b	nEb4, $03
000B0F6B E607                       	smpsAlterVol        $07
000B0F6D B4                         	dc.b	nEb4
000B0F6E E607                       	smpsAlterVol        $07
000B0F70 B4                         	dc.b	nEb4
000B0F71 E607                       	smpsAlterVol        $07
000B0F73 B4                         	dc.b	nEb4
000B0F76 E6EF                       	smpsAlterVol        $EF
000B0F78 E9CD                       	smpsAlterPitch      $CD
000B0F7A CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000B0F80 E1EC                       	smpsAlterNote       $EC
000B0F82 D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000B0F85 E100                       	smpsAlterNote       $00
000B0F87 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000B0F8C D523                       	dc.b	nC7, $23
000B0F8E F4                         	smpsModOff
000B0F91 E6FF                       	smpsAlterVol        $FF
000B0F93 E103                       	smpsAlterNote       $03
000B0F95 F800 00                    	smpsCall            Mus91_Credits_Call0E
000B0F98 E100                       	smpsAlterNote       $00
000B0F9C E609                       	smpsAlterVol        $09
000B0F9E 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000B0FAA C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000B0FB6 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000B0FC2 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000B0FCE 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000B0FD9 E6F9                       	smpsAlterVol        $F9
000B0FDB 8060                       	dc.b	nRst, $60
000B0FDD                            
000B0FDD                            Mus91_Credits_Loop0E:
000B0FDD CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000B0FE9 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000B0FF5 D01E                       	dc.b	nG6, $1E
000B0FF7 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000B0FFC 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000B1008 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000B1014 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000B101A E6F8                       	smpsAlterVol        $F8
000B101C E103                       	smpsAlterNote       $03
000B101E A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B1022 F2                         	smpsStop
000B1023                            
000B1023                            Mus91_Credits_Call14:
000B1023 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000B102F D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000B1034 E3                         	smpsReturn
000B1035                            
000B1035                            ; FM4 Data
000B1035                            Mus91_Credits_FM4:
000B1037 8060                       	dc.b	nRst, $60
000B1039 E608                       	smpsAlterVol        $08
000B103B F800 00                    	smpsCall            Mus91_Credits_Call08
000B103E C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000B1047 F800 00                    	smpsCall            Mus91_Credits_Call08
000B104A C624 2418                  	dc.b	nA5, $24, $24, $18
000B104E E080                       	smpsPan             panLeft, $00
000B1050 F800 00                    	smpsCall            Mus91_Credits_Call03
000B1053 E6F2                       	smpsAlterVol        $F2
000B1055                            
000B1055                            Mus91_Credits_Loop09:
000B1055 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000B1061 8008                       	dc.b	nRst, $08
000B1063 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000B1068 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000B1074 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000B1080 C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B1088 E918                       	smpsAlterPitch      $18
000B108A 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000B108F E0C0                       	smpsPan             panCenter, $00
000B1093 E9F4                       	smpsAlterPitch      $F4
000B1095 E605                       	smpsAlterVol        $05
000B1097                            
000B1097                            Mus91_Credits_Loop0A:
000B1097 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000B10A3 06                         	dc.b	$06
000B10A4 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000B10A9 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000B10B5 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000B10C1 D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000B10CD 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000B10D9 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000B10E4 E9F4                       	smpsAlterPitch      $F4
000B10E6 E603                       	smpsAlterVol        $03
000B10EA E080                       	smpsPan             panLeft, $00
000B10EC F800 00                    	smpsCall            Mus91_Credits_Call09
000B10F1 E6F6                       	smpsAlterVol        $F6
000B10F3 E918                       	smpsAlterPitch      $18
000B10F5 F800 00                    	smpsCall            Mus91_Credits_Call0A
000B10F8 800C                       	dc.b	nRst, $0C
000B10FA E1EC                       	smpsAlterNote       $EC
000B10FC C602                       	dc.b	nA5, $02
000B10FE E100                       	smpsAlterNote       $00
000B1100 E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000B110A F800 00                    	smpsCall            Mus91_Credits_Call0A
000B110D E1EC                       	smpsAlterNote       $EC
000B110F C602                       	dc.b	nA5, $02
000B1111 E100                       	smpsAlterNote       $00
000B1113 0A80 06                    	dc.b	$0A, nRst, $06
000B1116 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000B111B E1E2                       	smpsAlterNote       $E2
000B111D C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000B1120 E100                       	smpsAlterNote       $00
000B1122 1C                         	dc.b	$1C
000B1123 E100                       	smpsAlterNote       $00
000B1125 E103                       	smpsAlterNote       $03
000B1127 F800 00                    	smpsCall            Mus91_Credits_Call06
000B112A E100                       	smpsAlterNote       $00
000B112C E0C0                       	smpsPan             panCenter, $00
000B1130 E6F5                       	smpsAlterVol        $F5
000B1132 8060                       	dc.b	nRst, $60
000B1134                            
000B1134                            Mus91_Credits_Loop0B:
000B1134 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000B1140 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000B114C CB1E                       	dc.b	nD6, $1E
000B114E F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000B1155 E103                       	smpsAlterNote       $03
000B1157 E608                       	smpsAlterVol        $08
000B1159 F800 00                    	smpsCall            Mus91_Credits_Call0B
000B115E E6F0                       	smpsAlterVol        $F0
000B1160 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000B1165 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B1169 F2                         	smpsStop
000B116A                            
000B116A                            Mus91_Credits_Call08:
000B116A C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000B1176 E3                         	smpsReturn
000B1177                            
000B1177                            Mus91_Credits_Call03:
000B1179 E9E8                       	smpsAlterPitch      $E8
000B117B E60D                       	smpsAlterVol        $0D
000B117D                            
000B117D                            Mus91_Credits_Loop2D:
000B117D F800 00                    	smpsCall            Mus91_Credits_Call1B
000B1180 BFBF                       	dc.b	nD5, nD5
000B1182 F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000B1187 F800 00                    	smpsCall            Mus91_Credits_Call1B
000B118A B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000B1196 E603                       	smpsAlterVol        $03
000B1198 E90C                       	smpsAlterPitch      $0C
000B119C D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000B11A0 E9F4                       	smpsAlterPitch      $F4
000B11A4 E3                         	smpsReturn
000B11A5                            
000B11A5                            Mus91_Credits_Call1B:
000B11A5 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000B11B1 BCB8 B8                    	dc.b	nB4, nG4, nG4
000B11B4 E3                         	smpsReturn
000B11B5                            
000B11B5                            Mus91_Credits_Call0A:
000B11B5 800C                       	dc.b	nRst, $0C
000B11B7 E1EC                       	smpsAlterNote       $EC
000B11B9 C402                       	dc.b	nG5, $02
000B11BB E100                       	smpsAlterNote       $00
000B11BD E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000B11C7 E1EC                       	smpsAlterNote       $EC
000B11C9 CA02                       	dc.b	nCs6, $02
000B11CB E100                       	smpsAlterNote       $00
000B11CD E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000B11D7 E1EC                       	smpsAlterNote       $EC
000B11D9 C902                       	dc.b	nC6, $02
000B11DB E100                       	smpsAlterNote       $00
000B11DD E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000B11E5 E3                         	smpsReturn
000B11E6                            
000B11E6                            Mus91_Credits_Call06:
000B11E6 E608                       	smpsAlterVol        $08
000B11EA 8030 8030                  	dc.b	nRst, $30, nRst, $30
000B11EE E501                       	smpsChanTempoDiv    $01
000B11F0 F800 00                    	smpsCall            Mus91_Credits_Call17
000B11F3 E502                       	smpsChanTempoDiv    $02
000B11F7 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000B11FC CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000B1208 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000B1214 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000B1220 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000B1226 E3                         	smpsReturn
000B1227                            
000B1227                            Mus91_Credits_Call17:
000B1227 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000B1233 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000B123F B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000B124B 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000B1257 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000B125F E3                         	smpsReturn
000B1260                            
000B1260                            Mus91_Credits_Call0B:
000B1260 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000B126C DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000B1278 DE0C                       	dc.b	nA7, $0C
000B127A E3                         	smpsReturn
000B127B                            
000B127B                            ; FM5 Data
000B127B                            Mus91_Credits_FM5:
000B127D 8060                       	dc.b	nRst, $60
000B127F E6F0                       	smpsAlterVol        $F0
000B1281 F800 00                    	smpsCall            Mus91_Credits_Call02
000B1284 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000B128E F800 00                    	smpsCall            Mus91_Credits_Call02
000B1291 C324 2418                  	dc.b	nFs5, $24, $24, $18
000B1295 E040                       	smpsPan             panRight, $00
000B1297 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000B129A E6F2                       	smpsAlterVol        $F2
000B129C                            
000B129C                            Mus91_Credits_Loop07:
000B129C C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000B12A8 8008                       	dc.b	nRst, $08
000B12AA F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000B12AF C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000B12BB 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000B12C7 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B12CF E918                       	smpsAlterPitch      $18
000B12D1 E0C0                       	smpsPan             panCenter, $00
000B12D3 E603                       	smpsAlterVol        $03
000B12D5 E90C                       	smpsAlterPitch      $0C
000B12D9 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000B12E5 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000B12ED E9E8                       	smpsAlterPitch      $E8
000B12EF E602                       	smpsAlterVol        $02
000B12F1                            
000B12F1                            Mus91_Credits_Loop08:
000B12F1 D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000B12FD 06                         	dc.b	$06
000B12FE F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000B1303 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000B130F 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000B131B CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000B1327 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000B1333 D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000B133D E040                       	smpsPan             panRight, $00
000B133F E9F4                       	smpsAlterPitch      $F4
000B1341 E603                       	smpsAlterVol        $03
000B1343 F800 00                    	smpsCall            Mus91_Credits_Call04
000B1348 E924                       	smpsAlterPitch      $24
000B134A E6F4                       	smpsAlterVol        $F4
000B134C F800 00                    	smpsCall            Mus91_Credits_Call05
000B134F CDCE D0                    	dc.b	nE6, nF6, nG6
000B1352 F800 00                    	smpsCall            Mus91_Credits_Call05
000B1355 D0CE CD                    	dc.b	nG6, nF6, nE6
000B1358 E9F4                       	smpsAlterPitch      $F4
000B135A F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000B135D E0C0                       	smpsPan             panCenter, $00
000B1361 E103                       	smpsAlterNote       $03
000B1363 E6F8                       	smpsAlterVol        $F8
000B1365 8060                       	dc.b	nRst, $60
000B1367 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000B136A E600                       	smpsAlterVol        $00
000B136E 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000B137A CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000B1382 E605                       	smpsAlterVol        $05
000B1384 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000B1389 F2                         	smpsStop
000B138A                            
000B138A                            Mus91_Credits_Call02:
000B138A C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000B1396 E3                         	smpsReturn
000B1397                            
000B1397                            ; PSG1 Data
000B1397                            Mus91_Credits_PSG1:
000B1397 8060                       	dc.b	nRst, $60
000B1399 F508                       	smpsPSGvoice        fTone_08
000B139B EC03                       	smpsPSGAlterVol     $03
000B139D E806                       	smpsNoteFill        $06
000B139F F800 00                    	smpsCall            Mus91_Credits_Call11
000B13A2 F501                       	smpsPSGvoice        fTone_01
000B13A4 E800                       	smpsNoteFill        $00
000B13A6 ECFD                       	smpsPSGAlterVol     $FD
000B13A8                            
000B13A8                            Mus91_Credits_Loop2A:
000B13A8 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000B13B4 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000B13BC F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000B13C1 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000B13CD C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000B13D5 F505                       	smpsPSGvoice        fTone_05
000B13D7 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000B13DC E810                       	smpsNoteFill        $10
000B13DE C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000B13EA E800                       	smpsNoteFill        $00
000B13EC C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000B13F0 F4                         	smpsModOff
000B13F1 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000B13F3 EC01                       	smpsPSGAlterVol     $01
000B13F5                            
000B13F5                            Mus91_Credits_Loop2B:
000B13F5 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000B1401 CD03 0906                  	dc.b	nE6, $03, $09, $06
000B1405 E905                       	smpsAlterPitch      $05
000B1407 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000B140C E9F6                       	smpsAlterPitch      $F6
000B140E 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000B1418 F508                       	smpsPSGvoice        fTone_08
000B141A EC01                       	smpsPSGAlterVol     $01
000B141C F800 00                    	smpsCall            Mus91_Credits_Call15
000B141F 8002 8030                  	dc.b	nRst, $02, nRst, $30
000B1423 EC03                       	smpsPSGAlterVol     $03
000B1425 E9F4                       	smpsAlterPitch      $F4
000B1427 F505                       	smpsPSGvoice        fTone_05
000B1429 F800 00                    	smpsCall            Mus91_Credits_Call09
000B142C E90C                       	smpsAlterPitch      $0C
000B142E ECFC                       	smpsPSGAlterVol     $FC
000B1430 F500                       	smpsPSGvoice        $00
000B1432 F800 00                    	smpsCall            Mus91_Credits_Call16
000B1435 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000B1440 F800 00                    	smpsCall            Mus91_Credits_Call16
000B1443 C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000B1449 F506                       	smpsPSGvoice        fTone_06
000B144B EC04                       	smpsPSGAlterVol     $04
000B144D 8030 8030                  	dc.b	nRst, $30, nRst, $30
000B1451 E501                       	smpsChanTempoDiv    $01
000B1453 F8FD D2                    	smpsCall            Mus91_Credits_Call17
000B1456 E502                       	smpsChanTempoDiv    $02
000B1458 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000B1464 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000B1470 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000B147C 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000B1488 ECFF                       	smpsPSGAlterVol     $FF
000B148A 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000B1496 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000B14A2 C9CA 06                    	dc.b	nC6, nCs6, $06
000B14A5 F2                         	smpsStop
000B14A6                            
000B14A6                            Mus91_Credits_Call16:
000B14A6 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000B14B2 C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000B14BE 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000B14C4 E3                         	smpsReturn
000B14C5                            
000B14C5                            ; PSG2 Data
000B14C5                            Mus91_Credits_PSG2:
000B14C5 8060                       	dc.b	nRst, $60
000B14C7 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000B14CC 8002                       	dc.b	nRst, $02
000B14CE F8FB 53                    	smpsCall            Mus91_Credits_Call14
000B14D1 ECFE                       	smpsPSGAlterVol     $FE
000B14D3 F501                       	smpsPSGvoice        fTone_01
000B14D5 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000B14E1 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000B14E9                            Mus91_Credits_Loop24:
000B14E9 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000B14F5 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000B14FD F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000B1502 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000B150E C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000B1516 E806                       	smpsNoteFill        $06
000B1518 F506                       	smpsPSGvoice        fTone_06
000B151A                            
000B151A                            Mus91_Credits_Loop25:
000B151A D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000B151F F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000B1524 E800                       	smpsNoteFill        $00
000B1526 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000B1528 EC01                       	smpsPSGAlterVol     $01
000B152A                            
000B152A                            Mus91_Credits_Loop26:
000B152A 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000B1536 D003 0906                  	dc.b	nG6, $03, $09, $06
000B153A E905                       	smpsAlterPitch      $05
000B153C F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000B1541 E9F6                       	smpsAlterPitch      $F6
000B1543 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000B154F E101                       	smpsAlterNote       $01
000B1551 EC03                       	smpsPSGAlterVol     $03
000B1553 F800 00                    	smpsCall            Mus91_Credits_Call15
000B1556 E100                       	smpsAlterNote       $00
000B1558 8030                       	dc.b	nRst, $30
000B155A EC01                       	smpsPSGAlterVol     $01
000B155C E9F4                       	smpsAlterPitch      $F4
000B155E F505                       	smpsPSGvoice        fTone_05
000B1560 F800 00                    	smpsCall            Mus91_Credits_Call04
000B1563 E90C                       	smpsAlterPitch      $0C
000B1565 ECFD                       	smpsPSGAlterVol     $FD
000B1567 E803                       	smpsNoteFill        $03
000B1569                            
000B1569                            Mus91_Credits_Loop27:
000B1569 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000B1572 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000B1577                            
000B1577                            Mus91_Credits_Loop28:
000B1577 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000B157F F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000B1584                            
000B1584                            Mus91_Credits_Loop29:
000B1584 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000B158C F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000B1591 F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000B1596 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000B159D                            ;	; These rests are unnecessary, and cause the following notes to play way too late.
000B159D                            ;	; Delete these three notes to fix this.
000B159D                            ;	dc.b	nRst, nRst, nRst
000B159D                            ;	; This erroneous FM-only command causes the following notes to be inaudible.
000B159D                            ;	smpsAlterVol        $0C
000B159D                            ; there we go i fixed it - coni
000B159D E102                       	smpsAlterNote       $02
000B159F EC02                       	smpsPSGAlterVol     $02
000B15A1 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000B15AD 80D4 CD                    	dc.b	nRst, nB6, nE6
000B15B0 F2                         	smpsStop
000B15B1                            
000B15B1                            ; PSG3 Data
000B15B1                            Mus91_Credits_PSG3:
000B15B1 F3E7                       	smpsPSGform         $E7
000B15B3 E804                       	smpsNoteFill        $04
000B15B5                            
000B15B5                            Mus91_Credits_Loop18:
000B15B5 000C                       	dc.b	nMaxPSG, $0C
000B15B7 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000B15BC E806                       	smpsNoteFill        $06
000B15BE                            
000B15BE                            Mus91_Credits_Loop19:
000B15BE 0C                         	dc.b	$0C
000B15BF F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000B15C4 ECFF                       	smpsPSGAlterVol     $FF
000B15C6 F800 00                    	smpsCall            Mus91_Credits_Call13
000B15C9 E80E                       	smpsNoteFill        $0E
000B15CB 0C                         	dc.b	$0C
000B15CC E803                       	smpsNoteFill        $03
000B15CE 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000B15D6                            
000B15D6                            Mus91_Credits_Loop1A:
000B15D6 F800 00                    	smpsCall            Mus91_Credits_Call13
000B15D9 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000B15DE F509                       	smpsPSGvoice        fTone_09
000B15E0 EC01                       	smpsPSGAlterVol     $01
000B15E2 E90B                       	smpsAlterPitch      $0B
000B15E4                            
000B15E4                            Mus91_Credits_Loop1B:
000B15E4 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000B15ED F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000B15F2                            
000B15F2                            Mus91_Credits_Loop1C:
000B15F2 B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000B15FA F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000B15FF B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000B160B B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000B1617 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000B161B E802                       	smpsNoteFill        $02
000B161D E9F5                       	smpsAlterPitch      $F5
000B161F                            
000B161F                            Mus91_Credits_Loop1D:
000B161F F504                       	smpsPSGvoice        fTone_04
000B1621 0003 03                    	dc.b	nMaxPSG, $03, $03
000B1624 EC02                       	smpsPSGAlterVol     $02
000B1626 F508                       	smpsPSGvoice        fTone_08
000B1628 E808                       	smpsNoteFill        $08
000B162A 06                         	dc.b	$06
000B162B E803                       	smpsNoteFill        $03
000B162D ECFE                       	smpsPSGAlterVol     $FE
000B162F F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000B1634 8024                       	dc.b	nRst, $24
000B1636                            
000B1636                            Mus91_Credits_Loop1E:
000B1636 F504                       	smpsPSGvoice        fTone_04
000B1638 0303                       	dc.b	$03, $03
000B163A EC02                       	smpsPSGAlterVol     $02
000B163C F508                       	smpsPSGvoice        fTone_08
000B163E E808                       	smpsNoteFill        $08
000B1640 06                         	dc.b	$06
000B1641 E803                       	smpsNoteFill        $03
000B1643 ECFE                       	smpsPSGAlterVol     $FE
000B1645 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000B164A 8030                       	dc.b	nRst, $30
000B164C E801                       	smpsNoteFill        $01
000B164E F504                       	smpsPSGvoice        fTone_04
000B1650 EC03                       	smpsPSGAlterVol     $03
000B1652                            
000B1652                            Mus91_Credits_Loop1F:
000B1652 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000B1656 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000B165B                            
000B165B                            Mus91_Credits_Loop20:
000B165B 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000B165F F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000B1664 ECFF                       	smpsPSGAlterVol     $FF
000B1666                            
000B1666                            Mus91_Credits_Loop21:
000B1666 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000B166A F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000B166F ECFE                       	smpsPSGAlterVol     $FE
000B1671                            
000B1671                            Mus91_Credits_Loop22:
000B1671 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000B1675 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000B167A                            
000B167A                            Mus91_Credits_Loop23:
000B167A E803                       	smpsNoteFill        $03
000B167C 0C                         	dc.b	$0C
000B167D E80C                       	smpsNoteFill        $0C
000B167F 0C                         	dc.b	$0C
000B1680 E803                       	smpsNoteFill        $03
000B1682 0C                         	dc.b	$0C
000B1683 E80C                       	smpsNoteFill        $0C
000B1685 0C                         	dc.b	$0C
000B1686 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000B168B E803                       	smpsNoteFill        $03
000B168D 06                         	dc.b	$06
000B168E E80E                       	smpsNoteFill        $0E
000B1690 12                         	dc.b	$12
000B1691 E803                       	smpsNoteFill        $03
000B1693 0C                         	dc.b	$0C
000B1694 E80F                       	smpsNoteFill        $0F
000B1696 0C                         	dc.b	$0C
000B1697 F2                         	smpsStop
000B1698                            
000B1698                            ; DAC Data
000B1698                            Mus91_Credits_DAC:
000B1698 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000B16A4 0C                         	dc.b	$0C
000B16A5 F800 00                    	smpsCall            Mus91_Credits_Call00
000B16A8 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000B16B2 F800 00                    	smpsCall            Mus91_Credits_Call00
000B16B5 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000B16BE                            
000B16BE                            Mus91_Credits_Loop00:
000B16BE 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000B16C7 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000B16CC 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000B16D6                            
000B16D6                            Mus91_Credits_Loop01:
000B16D6 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000B16DF F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000B16E4 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000B16EE EB02                       	smpsSetTempoDiv     $02
000B16F0                            
000B16F0                            Mus91_Credits_Loop02:
000B16F0 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000B16F7 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000B16FC 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000B1705                            
000B1705                            Mus91_Credits_Loop03:
000B1705 810C                       	dc.b	dKick, $0C
000B1707 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000B170C 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000B1718 8024                       	dc.b	nRst, $24
000B171A                            
000B171A                            Mus91_Credits_Loop04:
000B171A 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000B171F F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000B1724 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000B1730 F800 00                    	smpsCall            Mus91_Credits_Call01
000B1733 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000B173F F800 00                    	smpsCall            Mus91_Credits_Call01
000B1742 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000B174E 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000B175A 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000B1766 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000B1772 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000B177C                            
000B177C                            Mus91_Credits_Loop05:
000B177C 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000B1788 02                         	dc.b	$02
000B1789 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000B178E EB01                       	smpsSetTempoDiv     $01
000B1790 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000B179C 8104                       	dc.b	dKick, $04
000B179E                            
000B179E                            Mus91_Credits_Loop06:
000B179E 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000B17A3 F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000B17A8 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000B17B4 03                         	dc.b	$03
000B17B5 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000B17BA 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000B17C6 F2                         	smpsStop
000B17C7                            
000B17C7                            Mus91_Credits_Call00:
000B17C7 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000B17D1 F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000B17D6 E3                         	smpsReturn
000B17D7                            
000B17D7                            Mus91_Credits_Call01:
000B17D7 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000B17E3 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000B17EF 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000B17FB 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000B1807 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000B1812 E3                         	smpsReturn
000B1813                            
000B1813                            Mus91_Credits_Call11:
000B1813 F800 00                    	smpsCall            Mus91_Credits_Call1A
000B1816 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000B181B F800 00                    	smpsCall            Mus91_Credits_Call1A
000B181E C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000B1823 E3                         	smpsReturn
000B1824                            
000B1824                            Mus91_Credits_Call1A:
000B1824 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000B1830 C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000B183C C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000B1840 E3                         	smpsReturn
000B1841                            
000B1841                            ; Unused alternate version of Mus91_Credits_Call0B
000B1841                            ; Mus91_Credits_CallUnk:
000B1841 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000B184D 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000B1859 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000B1865 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000B1871 DE06 8012                  	dc.b	nA7, $06, nRst, $12
000B1875 E3                         	smpsReturn
000B1876                            
000B1876                            Mus91_Credits_Call13:
000B1876 E80E                       	smpsNoteFill        $0E
000B1878 0C                         	dc.b	$0C
000B1879 E803                       	smpsNoteFill        $03
000B187B 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000B1881 E3                         	smpsReturn
000B1882                            
000B1882                            Mus91_Credits_Call0C:
000B1882 D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000B1889 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000B188E D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000B189A 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000B18A6 12D2 1E                    	dc.b	$12, nA6, $1E
000B18A9 E3                         	smpsReturn
000B18AA                            
000B18AA                            Mus91_Credits_Call15:
000B18AA 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000B18B6 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000B18C2 E3                         	smpsReturn
000B18C3                            
000B18C3                            Mus91_Credits_Call0D:
000B18C3 CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000B18CF D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000B18DB 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000B18E7 E3                         	smpsReturn
000B18E8                            
000B18E8                            Mus91_Credits_Call04:
000B18E8 F800 00                    	smpsCall            Mus91_Credits_Call19
000B18EB CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000B18F6                            
000B18F6                            Mus91_Credits_Loop2C:
000B18F6 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000B1900 F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000B1905 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000B1911 E9FE                       	smpsAlterPitch      $FE
000B1913 F800 00                    	smpsCall            Mus91_Credits_Call19
000B1916 E903                       	smpsAlterPitch      $03
000B1918 F800 00                    	smpsCall            Mus91_Credits_Call19
000B191B E9FF                       	smpsAlterPitch      $FF
000B191D 8006                       	dc.b	nRst, $06
000B191F E808                       	smpsNoteFill        $08
000B1921 D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000B1926 E805                       	smpsNoteFill        $05
000B1928 0303                       	dc.b	$03, $03
000B192A E800                       	smpsNoteFill        $00
000B192C 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000B1930 E3                         	smpsReturn
000B1931                            
000B1931                            Mus91_Credits_Call19:
000B1931 CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000B193C E3                         	smpsReturn
000B193D                            
000B193D                            Mus91_Credits_Call09:
000B193D D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000B1949 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000B1955 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000B1961 D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000B196D 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000B1979 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000B1985 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000B198B E808                       	smpsNoteFill        $08
000B198D D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000B1992 E805                       	smpsNoteFill        $05
000B1994 0303                       	dc.b	$03, $03
000B1996 E800                       	smpsNoteFill        $00
000B1998 800C D224                  	dc.b	nRst, $0C, nA6, $24
000B199C E3                         	smpsReturn
000B199D                            
000B199D                            Mus91_Credits_Call0E:
000B199D F800 00                    	smpsCall            Mus91_Credits_Call18
000B19A0 D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000B19A8 F800 00                    	smpsCall            Mus91_Credits_Call18
000B19AB D030 8006                  	dc.b	nG6, $30, nRst, $06
000B19AF E3                         	smpsReturn
000B19B0                            
000B19B0                            Mus91_Credits_Call18:
000B19B0 D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000B19BC D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000B19C4 E3                         	smpsReturn
000B19C5                            
000B19C5                            Mus91_Credits_Call05:
000B19C5 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000B19D1 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000B19DD 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000B19E9 0FCB 0C                    	dc.b	$0F, nD6, $0C
000B19EC E3                         	smpsReturn
000B19ED                            
000B19ED                            Mus91_Credits_Voices:
000B19ED                            ;	Voice $00
000B19ED                            ;	$20
000B19ED                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B19ED                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000B19ED                            	smpsVcAlgorithm     $00
000B19ED                            	smpsVcFeedback      $04
000B19ED                            	smpsVcUnusedBits    $00
000B19ED                            	smpsVcDetune        $03, $03, $03, $03
000B19ED                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B19ED                            	smpsVcRateScale     $02, $02, $03, $03
000B19ED                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B19ED                            	smpsVcAmpMod        $00, $00, $00, $00
000B19ED                            	smpsVcDecayRate1    $06, $09, $06, $07
000B19ED                            	smpsVcDecayRate2    $08, $06, $06, $07
000B19ED                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B19ED                            	smpsVcReleaseRate   $08, $00, $00, $00
000B19ED 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000B1A06                            
000B1A06                            ;	Voice $01
000B1A06                            ;	$2C
000B1A06                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B1A06                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000B1A06                            	smpsVcAlgorithm     $04
000B1A06                            	smpsVcFeedback      $05
000B1A06                            	smpsVcUnusedBits    $00
000B1A06                            	smpsVcDetune        $03, $03, $07, $07
000B1A06                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B1A06                            	smpsVcRateScale     $00, $00, $00, $00
000B1A06                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B1A06                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A06                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B1A06                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1A06                            	smpsVcDecayLevel    $01, $00, $01, $00
000B1A06                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A06 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000B1A1F                            
000B1A1F                            ;	Voice $02
000B1A1F                            ;	$2C
000B1A1F                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000B1A1F                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000B1A1F                            	smpsVcAlgorithm     $04
000B1A1F                            	smpsVcFeedback      $05
000B1A1F                            	smpsVcUnusedBits    $00
000B1A1F                            	smpsVcDetune        $03, $03, $07, $07
000B1A1F                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B1A1F                            	smpsVcRateScale     $00, $00, $00, $00
000B1A1F                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000B1A1F                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A1F                            	smpsVcDecayRate1    $00, $00, $00, $00
000B1A1F                            	smpsVcDecayRate2    $01, $00, $01, $00
000B1A1F                            	smpsVcDecayLevel    $03, $00, $03, $00
000B1A1F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A1F 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B1A38                            
000B1A38                            ;	Voice $03
000B1A38                            ;	$04
000B1A38                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000B1A38                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000B1A38                            	smpsVcAlgorithm     $04
000B1A38                            	smpsVcFeedback      $00
000B1A38                            	smpsVcUnusedBits    $00
000B1A38                            	smpsVcDetune        $03, $03, $04, $07
000B1A38                            	smpsVcCoarseFreq    $02, $02, $02, $02
000B1A38                            	smpsVcRateScale     $00, $00, $00, $00
000B1A38                            	smpsVcAttackRate    $12, $12, $12, $12
000B1A38                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A38                            	smpsVcDecayRate1    $08, $00, $08, $00
000B1A38                            	smpsVcDecayRate2    $08, $00, $08, $00
000B1A38                            	smpsVcDecayLevel    $01, $00, $01, $00
000B1A38                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A38 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000B1A51                            
000B1A51                            ;	Voice $04
000B1A51                            ;	$2C
000B1A51                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000B1A51                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000B1A51                            	smpsVcAlgorithm     $04
000B1A51                            	smpsVcFeedback      $05
000B1A51                            	smpsVcUnusedBits    $00
000B1A51                            	smpsVcDetune        $03, $03, $07, $07
000B1A51                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B1A51                            	smpsVcRateScale     $00, $00, $00, $00
000B1A51                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000B1A51                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A51                            	smpsVcDecayRate1    $07, $00, $07, $00
000B1A51                            	smpsVcDecayRate2    $07, $00, $07, $00
000B1A51                            	smpsVcDecayLevel    $03, $00, $03, $00
000B1A51                            	smpsVcReleaseRate   $08, $00, $08, $00
000B1A51 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B1A6A                            
000B1A6A                            ;	Voice $05
000B1A6A                            ;	$31
000B1A6A                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000B1A6A                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000B1A6A                            	smpsVcAlgorithm     $01
000B1A6A                            	smpsVcFeedback      $06
000B1A6A                            	smpsVcUnusedBits    $00
000B1A6A                            	smpsVcDetune        $03, $03, $03, $03
000B1A6A                            	smpsVcCoarseFreq    $01, $00, $05, $04
000B1A6A                            	smpsVcRateScale     $02, $02, $03, $03
000B1A6A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1A6A                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A6A                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000B1A6A                            	smpsVcDecayRate2    $08, $07, $07, $07
000B1A6A                            	smpsVcDecayLevel    $02, $01, $01, $02
000B1A6A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A6A 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000B1A83                            
000B1A83                            ;	Voice $06
000B1A83                            ;	$18
000B1A83                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1A83                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000B1A83                            	smpsVcAlgorithm     $00
000B1A83                            	smpsVcFeedback      $03
000B1A83                            	smpsVcUnusedBits    $00
000B1A83                            	smpsVcDetune        $03, $03, $03, $03
000B1A83                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1A83                            	smpsVcRateScale     $02, $00, $03, $02
000B1A83                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1A83                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A83                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1A83                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1A83                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1A83                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A83 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000B1A9C                            
000B1A9C                            ;	Voice $07
000B1A9C                            ;	$3C
000B1A9C                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000B1A9C                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000B1A9C                            	smpsVcAlgorithm     $04
000B1A9C                            	smpsVcFeedback      $07
000B1A9C                            	smpsVcUnusedBits    $00
000B1A9C                            	smpsVcDetune        $03, $05, $05, $03
000B1A9C                            	smpsVcCoarseFreq    $00, $00, $02, $01
000B1A9C                            	smpsVcRateScale     $01, $01, $01, $01
000B1A9C                            	smpsVcAttackRate    $13, $12, $13, $12
000B1A9C                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A9C                            	smpsVcDecayRate1    $00, $08, $00, $08
000B1A9C                            	smpsVcDecayRate2    $00, $04, $00, $04
000B1A9C                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1A9C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A9C 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000B1AB5                            
000B1AB5                            ;	Voice $08
000B1AB5                            ;	$22
000B1AB5                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000B1AB5                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000B1AB5                            	smpsVcAlgorithm     $02
000B1AB5                            	smpsVcFeedback      $04
000B1AB5                            	smpsVcUnusedBits    $00
000B1AB5                            	smpsVcDetune        $01, $00, $01, $00
000B1AB5                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000B1AB5                            	smpsVcRateScale     $00, $00, $00, $00
000B1AB5                            	smpsVcAttackRate    $11, $12, $12, $03
000B1AB5                            	smpsVcAmpMod        $00, $00, $00, $00
000B1AB5                            	smpsVcDecayRate1    $00, $13, $13, $00
000B1AB5                            	smpsVcDecayRate2    $01, $02, $02, $03
000B1AB5                            	smpsVcDecayLevel    $00, $00, $01, $01
000B1AB5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1AB5 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000B1ACE                            
000B1ACE                            ;	Voice $09
000B1ACE                            ;	$3A
000B1ACE                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000B1ACE                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000B1ACE                            	smpsVcAlgorithm     $02
000B1ACE                            	smpsVcFeedback      $07
000B1ACE                            	smpsVcUnusedBits    $00
000B1ACE                            	smpsVcDetune        $03, $01, $03, $06
000B1ACE                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000B1ACE                            	smpsVcRateScale     $03, $02, $03, $02
000B1ACE                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000B1ACE                            	smpsVcAmpMod        $00, $00, $00, $00
000B1ACE                            	smpsVcDecayRate1    $03, $04, $09, $04
000B1ACE                            	smpsVcDecayRate2    $00, $03, $01, $03
000B1ACE                            	smpsVcDecayLevel    $0A, $00, $00, $01
000B1ACE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1ACE 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000B1AE7                            
000B1AE7                            ;	Voice $0A
000B1AE7                            ;	$3A
000B1AE7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B1AE7                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B1AE7                            	smpsVcAlgorithm     $02
000B1AE7                            	smpsVcFeedback      $07
000B1AE7                            	smpsVcUnusedBits    $00
000B1AE7                            	smpsVcDetune        $00, $00, $00, $00
000B1AE7                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B1AE7                            	smpsVcRateScale     $01, $02, $02, $02
000B1AE7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B1AE7                            	smpsVcAmpMod        $00, $00, $00, $00
000B1AE7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B1AE7                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1AE7                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B1AE7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1AE7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B1B00                            
000B1B00                            ;	Voice $0B
000B1B00                            ;	$34
000B1B00                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000B1B00                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000B1B00                            	smpsVcAlgorithm     $04
000B1B00                            	smpsVcFeedback      $06
000B1B00                            	smpsVcUnusedBits    $00
000B1B00                            	smpsVcDetune        $07, $07, $04, $03
000B1B00                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000B1B00                            	smpsVcRateScale     $00, $01, $02, $01
000B1B00                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000B1B00                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B00                            	smpsVcDecayRate1    $08, $07, $07, $04
000B1B00                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1B00                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000B1B00                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B00 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000B1B19                            
000B1B19                            ;	Voice $0C
000B1B19                            ;	$04
000B1B19                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B1B19                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000B1B19                            	smpsVcAlgorithm     $04
000B1B19                            	smpsVcFeedback      $00
000B1B19                            	smpsVcUnusedBits    $00
000B1B19                            	smpsVcDetune        $03, $03, $04, $07
000B1B19                            	smpsVcCoarseFreq    $02, $02, $02, $02
000B1B19                            	smpsVcRateScale     $00, $00, $00, $00
000B1B19                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1B19                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B19                            	smpsVcDecayRate1    $00, $00, $00, $00
000B1B19                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1B19                            	smpsVcDecayLevel    $00, $00, $00, $00
000B1B19                            	smpsVcReleaseRate   $07, $00, $07, $00
000B1B19 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000B1B32                            
000B1B32                            ;	Voice $0D
000B1B32                            ;	$3C
000B1B32                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000B1B32                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000B1B32                            	smpsVcAlgorithm     $04
000B1B32                            	smpsVcFeedback      $07
000B1B32                            	smpsVcUnusedBits    $00
000B1B32                            	smpsVcDetune        $03, $07, $07, $03
000B1B32                            	smpsVcCoarseFreq    $03, $06, $04, $08
000B1B32                            	smpsVcRateScale     $00, $00, $00, $00
000B1B32                            	smpsVcAttackRate    $10, $10, $10, $10
000B1B32                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B32                            	smpsVcDecayRate1    $07, $04, $07, $02
000B1B32                            	smpsVcDecayRate2    $09, $03, $09, $03
000B1B32                            	smpsVcDecayLevel    $02, $02, $02, $02
000B1B32                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B32 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000B1B4B                            
000B1B4B                            ;	Voice $0E
000B1B4B                            ;	$F4
000B1B4B                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B1B4B                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000B1B4B                            	smpsVcAlgorithm     $04
000B1B4B                            	smpsVcFeedback      $06
000B1B4B                            	smpsVcUnusedBits    $03
000B1B4B                            	smpsVcDetune        $00, $00, $00, $00
000B1B4B                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B1B4B                            	smpsVcRateScale     $00, $00, $00, $00
000B1B4B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1B4B                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B4B                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B1B4B                            	smpsVcDecayRate2    $08, $05, $00, $00
000B1B4B                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B1B4B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B4B F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000B1B64                            
000B1B64                            ;	Voice $0F
000B1B64                            ;	$29
000B1B64                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000B1B64                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000B1B64                            	smpsVcAlgorithm     $01
000B1B64                            	smpsVcFeedback      $05
000B1B64                            	smpsVcUnusedBits    $00
000B1B64                            	smpsVcDetune        $03, $07, $07, $03
000B1B64                            	smpsVcCoarseFreq    $01, $01, $04, $06
000B1B64                            	smpsVcRateScale     $00, $00, $00, $00
000B1B64                            	smpsVcAttackRate    $1D, $05, $04, $04
000B1B64                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B64                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000B1B64                            	smpsVcDecayRate2    $01, $03, $06, $04
000B1B64                            	smpsVcDecayLevel    $00, $00, $06, $05
000B1B64                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B64 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000B1B7D                            
000B1B7D                            ;	Voice $10
000B1B7D                            ;	$08
000B1B7D                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000B1B7D                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000B1B7D                            	smpsVcAlgorithm     $00
000B1B7D                            	smpsVcFeedback      $01
000B1B7D                            	smpsVcUnusedBits    $00
000B1B7D                            	smpsVcDetune        $00, $03, $07, $00
000B1B7D                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000B1B7D                            	smpsVcRateScale     $01, $01, $00, $00
000B1B7D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1B7D                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B7D                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000B1B7D                            	smpsVcDecayRate2    $03, $04, $04, $00
000B1B7D                            	smpsVcDecayLevel    $02, $02, $02, $02
000B1B7D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B7D 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000B1B96                            
000B1B96                            ;	Voice $11
000B1B96                            ;	$3D
000B1B96                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000B1B96                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000B1B96                            	smpsVcAlgorithm     $05
000B1B96                            	smpsVcFeedback      $07
000B1B96                            	smpsVcUnusedBits    $00
000B1B96                            	smpsVcDetune        $00, $00, $00, $00
000B1B96                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1B96                            	smpsVcRateScale     $01, $00, $01, $02
000B1B96                            	smpsVcAttackRate    $0C, $14, $12, $0E
000B1B96                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B96                            	smpsVcDecayRate1    $03, $0E, $08, $08
000B1B96                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1B96                            	smpsVcDecayLevel    $01, $01, $01, $01
000B1B96                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B96 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000B1BAF                            
000B1BAF                            ;	Voice $12
000B1BAF                            ;	$3D
000B1BAF                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000B1BAF                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000B1BAF                            	smpsVcAlgorithm     $05
000B1BAF                            	smpsVcFeedback      $07
000B1BAF                            	smpsVcUnusedBits    $00
000B1BAF                            	smpsVcDetune        $00, $00, $00, $00
000B1BAF                            	smpsVcCoarseFreq    $01, $00, $02, $01
000B1BAF                            	smpsVcRateScale     $00, $00, $00, $00
000B1BAF                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000B1BAF                            	smpsVcAmpMod        $00, $00, $00, $00
000B1BAF                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000B1BAF                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1BAF                            	smpsVcDecayLevel    $00, $00, $00, $01
000B1BAF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1BAF 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000B1BC8                            
000B1BC8                            ;	Voice $13
000B1BC8                            ;	$3C
000B1BC8                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000B1BC8                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000B1BC8                            	smpsVcAlgorithm     $04
000B1BC8                            	smpsVcFeedback      $07
000B1BC8                            	smpsVcUnusedBits    $00
000B1BC8                            	smpsVcDetune        $03, $05, $05, $03
000B1BC8                            	smpsVcCoarseFreq    $00, $00, $02, $01
000B1BC8                            	smpsVcRateScale     $01, $01, $01, $01
000B1BC8                            	smpsVcAttackRate    $13, $12, $13, $12
000B1BC8                            	smpsVcAmpMod        $00, $00, $00, $00
000B1BC8                            	smpsVcDecayRate1    $00, $08, $00, $08
000B1BC8                            	smpsVcDecayRate2    $00, $04, $00, $04
000B1BC8                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1BC8                            	smpsVcReleaseRate   $07, $00, $07, $00
000B1BC8 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000B1BE1                            
000B1BE1                            ;	Voice $14
000B1BE1                            ;	$18
000B1BE1                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1BE1                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000B1BE1                            	smpsVcAlgorithm     $00
000B1BE1                            	smpsVcFeedback      $03
000B1BE1                            	smpsVcUnusedBits    $00
000B1BE1                            	smpsVcDetune        $03, $03, $03, $03
000B1BE1                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1BE1                            	smpsVcRateScale     $02, $00, $03, $02
000B1BE1                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1BE1                            	smpsVcAmpMod        $00, $00, $00, $00
000B1BE1                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1BE1                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1BE1                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1BE1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1BE1 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000B1BFA                            
000B1BFA                            ;	Voice $15
000B1BFA                            ;	$3A
000B1BFA                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000B1BFA                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000B1BFA                            	smpsVcAlgorithm     $02
000B1BFA                            	smpsVcFeedback      $07
000B1BFA                            	smpsVcUnusedBits    $00
000B1BFA                            	smpsVcDetune        $00, $00, $00, $00
000B1BFA                            	smpsVcCoarseFreq    $02, $01, $01, $01
000B1BFA                            	smpsVcRateScale     $01, $00, $00, $02
000B1BFA                            	smpsVcAttackRate    $12, $07, $07, $0D
000B1BFA                            	smpsVcAmpMod        $00, $00, $00, $00
000B1BFA                            	smpsVcDecayRate1    $03, $00, $00, $09
000B1BFA                            	smpsVcDecayRate2    $00, $02, $02, $01
000B1BFA                            	smpsVcDecayLevel    $02, $00, $00, $05
000B1BFA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1BFA 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000B1C13                            
000B1C13                            ;	Voice $16
000B1C13                            ;	$2C
000B1C13                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B1C13                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000B1C13                            	smpsVcAlgorithm     $04
000B1C13                            	smpsVcFeedback      $05
000B1C13                            	smpsVcUnusedBits    $00
000B1C13                            	smpsVcDetune        $03, $03, $07, $07
000B1C13                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B1C13                            	smpsVcRateScale     $00, $00, $00, $00
000B1C13                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1C13                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C13                            	smpsVcDecayRate1    $00, $00, $00, $00
000B1C13                            	smpsVcDecayRate2    $01, $00, $01, $00
000B1C13                            	smpsVcDecayLevel    $03, $00, $03, $00
000B1C13                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1C13 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B1C2C                            
000B1C2C                            ;	Voice $17
000B1C2C                            ;	$04
000B1C2C                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B1C2C                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000B1C2C                            	smpsVcAlgorithm     $04
000B1C2C                            	smpsVcFeedback      $00
000B1C2C                            	smpsVcUnusedBits    $00
000B1C2C                            	smpsVcDetune        $04, $07, $07, $03
000B1C2C                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B1C2C                            	smpsVcRateScale     $00, $00, $00, $00
000B1C2C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1C2C                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C2C                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B1C2C                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1C2C                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1C2C                            	smpsVcReleaseRate   $07, $00, $07, $00
000B1C2C 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000B1C45                            
000B1C45                            ;	Voice $18
000B1C45                            ;	$3D
000B1C45                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000B1C45                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000B1C45                            	smpsVcAlgorithm     $05
000B1C45                            	smpsVcFeedback      $07
000B1C45                            	smpsVcUnusedBits    $00
000B1C45                            	smpsVcDetune        $00, $00, $00, $00
000B1C45                            	smpsVcCoarseFreq    $02, $02, $02, $01
000B1C45                            	smpsVcRateScale     $00, $02, $00, $00
000B1C45                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000B1C45                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C45                            	smpsVcDecayRate1    $05, $02, $05, $08
000B1C45                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1C45                            	smpsVcDecayLevel    $01, $01, $01, $01
000B1C45                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1C45 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000B1C5E                            
000B1C5E                            ;	Voice $19
000B1C5E                            ;	$20
000B1C5E                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B1C5E                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000B1C5E                            	smpsVcAlgorithm     $00
000B1C5E                            	smpsVcFeedback      $04
000B1C5E                            	smpsVcUnusedBits    $00
000B1C5E                            	smpsVcDetune        $03, $03, $03, $03
000B1C5E                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B1C5E                            	smpsVcRateScale     $02, $02, $03, $03
000B1C5E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1C5E                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C5E                            	smpsVcDecayRate1    $06, $09, $06, $07
000B1C5E                            	smpsVcDecayRate2    $08, $06, $06, $07
000B1C5E                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B1C5E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1C5E 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000B1C77                            
000B1C77                            ;	Voice $1A
000B1C77                            ;	$3A
000B1C77                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000B1C77                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000B1C77                            	smpsVcAlgorithm     $02
000B1C77                            	smpsVcFeedback      $07
000B1C77                            	smpsVcUnusedBits    $00
000B1C77                            	smpsVcDetune        $00, $05, $00, $05
000B1C77                            	smpsVcCoarseFreq    $02, $01, $08, $01
000B1C77                            	smpsVcRateScale     $00, $00, $00, $00
000B1C77                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000B1C77                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C77                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000B1C77                            	smpsVcDecayRate2    $02, $00, $00, $00
000B1C77                            	smpsVcDecayLevel    $01, $00, $00, $00
000B1C77                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1C77 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000B1C90                            
000B1C90                            ;	Voice $1B
000B1C90                            ;	$3A
000B1C90                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000B1C90                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000B1C90                            	smpsVcAlgorithm     $02
000B1C90                            	smpsVcFeedback      $07
000B1C90                            	smpsVcUnusedBits    $00
000B1C90                            	smpsVcDetune        $04, $03, $05, $03
000B1C90                            	smpsVcCoarseFreq    $02, $02, $06, $02
000B1C90                            	smpsVcRateScale     $01, $00, $01, $02
000B1C90                            	smpsVcAttackRate    $12, $15, $0F, $0D
000B1C90                            	smpsVcAmpMod        $00, $00, $00, $00
000B1C90                            	smpsVcDecayRate1    $04, $07, $08, $06
000B1C90                            	smpsVcDecayRate2    $00, $00, $00, $02
000B1C90                            	smpsVcDecayLevel    $02, $02, $01, $01
000B1C90                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1C90 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000B1CA9                            
000B1CA9                            ;	Voice $1C
000B1CA9                            ;	$3A
000B1CA9                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B1CA9                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B1CA9                            	smpsVcAlgorithm     $02
000B1CA9                            	smpsVcFeedback      $07
000B1CA9                            	smpsVcUnusedBits    $00
000B1CA9                            	smpsVcDetune        $00, $00, $00, $00
000B1CA9                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B1CA9                            	smpsVcRateScale     $01, $02, $02, $02
000B1CA9                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B1CA9                            	smpsVcAmpMod        $00, $00, $00, $00
000B1CA9                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B1CA9                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1CA9                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B1CA9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1CA9 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B1CC2                            
000B1CC2                            ;	Voice $1D
000B1CC2                            ;	$08
000B1CC2                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000B1CC2                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000B1CC2                            	smpsVcAlgorithm     $00
000B1CC2                            	smpsVcFeedback      $01
000B1CC2                            	smpsVcUnusedBits    $00
000B1CC2                            	smpsVcDetune        $00, $03, $07, $00
000B1CC2                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000B1CC2                            	smpsVcRateScale     $01, $01, $00, $00
000B1CC2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1CC2                            	smpsVcAmpMod        $00, $00, $00, $00
000B1CC2                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000B1CC2                            	smpsVcDecayRate2    $03, $04, $04, $00
000B1CC2                            	smpsVcDecayLevel    $02, $02, $02, $02
000B1CC2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1CC2 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000B1CDB                            
000B1CDB                            ;	Voice $1E
000B1CDB                            ;	$3A
000B1CDB                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B1CDB                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B1CDB                            	smpsVcAlgorithm     $02
000B1CDB                            	smpsVcFeedback      $07
000B1CDB                            	smpsVcUnusedBits    $00
000B1CDB                            	smpsVcDetune        $00, $00, $00, $00
000B1CDB                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B1CDB                            	smpsVcRateScale     $01, $02, $02, $02
000B1CDB                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B1CDB                            	smpsVcAmpMod        $00, $00, $00, $00
000B1CDB                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B1CDB                            	smpsVcDecayRate2    $07, $00, $00, $00
000B1CDB                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B1CDB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1CDB 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B1CF4                            
000B1CF4                            ;	Voice $1F
000B1CF4                            ;	$36
000B1CF4                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000B1CF4                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000B1CF4                            	smpsVcAlgorithm     $06
000B1CF4                            	smpsVcFeedback      $06
000B1CF4                            	smpsVcUnusedBits    $00
000B1CF4                            	smpsVcDetune        $00, $00, $00, $00
000B1CF4                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000B1CF4                            	smpsVcRateScale     $00, $00, $00, $00
000B1CF4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1CF4                            	smpsVcAmpMod        $00, $00, $00, $00
000B1CF4                            	smpsVcDecayRate1    $00, $0E, $11, $12
000B1CF4                            	smpsVcDecayRate2    $09, $07, $0A, $00
000B1CF4                            	smpsVcDecayLevel    $00, $01, $00, $0F
000B1CF4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1CF4 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000B1D0D                            
000B1D0D                            ;	Voice $20
000B1D0D                            ;	$3A
000B1D0D                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000B1D0D                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000B1D0D                            	smpsVcAlgorithm     $02
000B1D0D                            	smpsVcFeedback      $07
000B1D0D                            	smpsVcUnusedBits    $00
000B1D0D                            	smpsVcDetune        $05, $00, $01, $00
000B1D0D                            	smpsVcCoarseFreq    $03, $01, $09, $03
000B1D0D                            	smpsVcRateScale     $02, $00, $03, $00
000B1D0D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1D0D                            	smpsVcAmpMod        $00, $00, $00, $00
000B1D0D                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000B1D0D                            	smpsVcDecayRate2    $07, $04, $04, $04
000B1D0D                            	smpsVcDecayLevel    $02, $00, $0F, $01
000B1D0D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1D0D 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000B1D26                            
000B1D26                            
000B1D26                            		even
000B1D26                            Music92:	incbin	sound\music92.bin ; Drowning
000B2068 00                         		even
000B2068                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000B2138                            		even
000B2138                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000B2E0E 00                         		even
000B2E0E                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000B2F5E 00                         		even
000B2F5E                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000B2F98 00                         		even
000B2F98                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000B3300                            		even
000B3300                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000B333A 00                         		even
000B333A                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000B3374 00                         		even
000B3374                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000B33AE 00                         		even
000B33AE                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000B33E8 00                         		even
000B33E8                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000B3422 00                         		even
000B3422                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000B345C 00                         		even
000B345C                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000B394C                            		even
000B394C                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000B394C                            GentleBreeze_Header:
000B394C =00000001                  smpsHeaderStartSong = 1
000B394C 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000B394E 0603                       	smpsHeaderChan      $06, $03
000B3950 0100                       	smpsHeaderTempo     $01, $00
000B3952                            
000B3956 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000B395A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000B395E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000B3962 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000B3966 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000B396A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000B3970 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000B3976 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000B397C                            
000B397C                            ; PSG3 Data
000B397C                            GentleBreeze_PSG3:
000B397C F2                         	smpsStop
000B397D                            
000B397D                            ; FM1 Data
000B397D                            GentleBreeze_FM1:
000B397F E0C0                       	smpsPan             panCenter, $00
000B3981 E1FF                       	smpsAlterNote       $FF
000B3983 C410                       	dc.b	nG5, $10
000B3985 E60F                       	smpsAlterVol        $0F
000B3987 C4                         	dc.b	nG5
000B3988 E6F1                       	smpsAlterVol        $F1
000B398A E100                       	smpsAlterNote       $00
000B398C C2                         	dc.b	nF5
000B398D E60F                       	smpsAlterVol        $0F
000B398F 08                         	dc.b	$08
000B3990 E6F1                       	smpsAlterVol        $F1
000B3992 C010                       	dc.b	nEb5, $10
000B3994 E60F                       	smpsAlterVol        $0F
000B3996 C0                         	dc.b	nEb5
000B3997 E6F1                       	smpsAlterVol        $F1
000B3999 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B399F E60F                       	smpsAlterVol        $0F
000B39A1 C9                         	dc.b	nC6
000B39A2 E6F1                       	smpsAlterVol        $F1
000B39A4 C5                         	dc.b	nAb5
000B39A5 E60F                       	smpsAlterVol        $0F
000B39A7 08                         	dc.b	$08
000B39A8 E6F1                       	smpsAlterVol        $F1
000B39AA C010                       	dc.b	nEb5, $10
000B39AC E60F                       	smpsAlterVol        $0F
000B39AE C0                         	dc.b	nEb5
000B39AF E6F1                       	smpsAlterVol        $F1
000B39B1 C208                       	dc.b	nF5, $08
000B39B3 E1FF                       	smpsAlterNote       $FF
000B39B5 C410                       	dc.b	nG5, $10
000B39B7 E100                       	smpsAlterNote       $00
000B39B9 C5C7                       	dc.b	nAb5, nBb5
000B39BB E60F                       	smpsAlterVol        $0F
000B39BD C7                         	dc.b	nBb5
000B39BE E6F1                       	smpsAlterVol        $F1
000B39C0 C5                         	dc.b	nAb5
000B39C1 E60F                       	smpsAlterVol        $0F
000B39C3 08                         	dc.b	$08
000B39C4 E6F1                       	smpsAlterVol        $F1
000B39C6 E1FF                       	smpsAlterNote       $FF
000B39C8 C410                       	dc.b	nG5, $10
000B39CA E60F                       	smpsAlterVol        $0F
000B39CC C4                         	dc.b	nG5
000B39CD E6F1                       	smpsAlterVol        $F1
000B39CF C4                         	dc.b	nG5
000B39D0 E100                       	smpsAlterNote       $00
000B39D2 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B39D7 E60F                       	smpsAlterVol        $0F
000B39D9 C2                         	dc.b	nF5
000B39DA E6F1                       	smpsAlterVol        $F1
000B39DC E1FF                       	smpsAlterNote       $FF
000B39DE C4                         	dc.b	nG5
000B39DF E60F                       	smpsAlterVol        $0F
000B39E1 08                         	dc.b	$08
000B39E2 E6F1                       	smpsAlterVol        $F1
000B39E4 10                         	dc.b	$10
000B39E5 E60F                       	smpsAlterVol        $0F
000B39E7 38                         	dc.b	$38
000B39E8 E6F1                       	smpsAlterVol        $F1
000B39EA 10                         	dc.b	$10
000B39EB E60F                       	smpsAlterVol        $0F
000B39ED C4                         	dc.b	nG5
000B39EE E6F1                       	smpsAlterVol        $F1
000B39F0 E100                       	smpsAlterNote       $00
000B39F2 C2                         	dc.b	nF5
000B39F3 E60F                       	smpsAlterVol        $0F
000B39F5 08                         	dc.b	$08
000B39F6 E6F1                       	smpsAlterVol        $F1
000B39F8 C010                       	dc.b	nEb5, $10
000B39FA E60F                       	smpsAlterVol        $0F
000B39FC C0                         	dc.b	nEb5
000B39FD E6F1                       	smpsAlterVol        $F1
000B39FF BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B3A05 E60F                       	smpsAlterVol        $0F
000B3A07 C9                         	dc.b	nC6
000B3A08 E6F1                       	smpsAlterVol        $F1
000B3A0A C5                         	dc.b	nAb5
000B3A0B E60F                       	smpsAlterVol        $0F
000B3A0D 08                         	dc.b	$08
000B3A0E E6F1                       	smpsAlterVol        $F1
000B3A10 C010                       	dc.b	nEb5, $10
000B3A12 E60F                       	smpsAlterVol        $0F
000B3A14 C0                         	dc.b	nEb5
000B3A15 E6F1                       	smpsAlterVol        $F1
000B3A17 C208                       	dc.b	nF5, $08
000B3A19 E1FF                       	smpsAlterNote       $FF
000B3A1B C410                       	dc.b	nG5, $10
000B3A1D E100                       	smpsAlterNote       $00
000B3A1F C5C7                       	dc.b	nAb5, nBb5
000B3A21 E60F                       	smpsAlterVol        $0F
000B3A23 C7                         	dc.b	nBb5
000B3A24 E6F1                       	smpsAlterVol        $F1
000B3A26 C5                         	dc.b	nAb5
000B3A27 E60F                       	smpsAlterVol        $0F
000B3A29 08                         	dc.b	$08
000B3A2A E6F1                       	smpsAlterVol        $F1
000B3A2C E1FF                       	smpsAlterNote       $FF
000B3A2E C410                       	dc.b	nG5, $10
000B3A30 E60F                       	smpsAlterVol        $0F
000B3A32 C4                         	dc.b	nG5
000B3A33 E6F1                       	smpsAlterVol        $F1
000B3A35 C4                         	dc.b	nG5
000B3A36 E100                       	smpsAlterNote       $00
000B3A38 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B3A3D E60F                       	smpsAlterVol        $0F
000B3A3F 28                         	dc.b	$28
000B3A40 E6F1                       	smpsAlterVol        $F1
000B3A42 C008 10                    	dc.b	nEb5, $08, $10
000B3A45 E60F                       	smpsAlterVol        $0F
000B3A47 21                         	dc.b	$21
000B3A48                            
000B3A48                            GentleBreeze_Loop12:
000B3A48 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000B3A4B F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000B3A50 E717                       	dc.b	smpsNoAttack, $17
000B3A52 E6F1                       	smpsAlterVol        $F1
000B3A54 E1FF                       	smpsAlterNote       $FF
000B3A56 C410                       	dc.b	nG5, $10
000B3A58 E60F                       	smpsAlterVol        $0F
000B3A5A C4                         	dc.b	nG5
000B3A5B E6F1                       	smpsAlterVol        $F1
000B3A5D E100                       	smpsAlterNote       $00
000B3A5F C2                         	dc.b	nF5
000B3A60 E60F                       	smpsAlterVol        $0F
000B3A62 08                         	dc.b	$08
000B3A63 E6F1                       	smpsAlterVol        $F1
000B3A65 C010                       	dc.b	nEb5, $10
000B3A67 E60F                       	smpsAlterVol        $0F
000B3A69 C0                         	dc.b	nEb5
000B3A6A E6F1                       	smpsAlterVol        $F1
000B3A6C BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B3A72 E60F                       	smpsAlterVol        $0F
000B3A74 C9                         	dc.b	nC6
000B3A75 E6F1                       	smpsAlterVol        $F1
000B3A77 C5                         	dc.b	nAb5
000B3A78 E60F                       	smpsAlterVol        $0F
000B3A7A 08                         	dc.b	$08
000B3A7B E6F1                       	smpsAlterVol        $F1
000B3A7D C010                       	dc.b	nEb5, $10
000B3A7F E60F                       	smpsAlterVol        $0F
000B3A81 C0                         	dc.b	nEb5
000B3A82 E6F1                       	smpsAlterVol        $F1
000B3A84 C208                       	dc.b	nF5, $08
000B3A86 E1FF                       	smpsAlterNote       $FF
000B3A88 C410                       	dc.b	nG5, $10
000B3A8A E100                       	smpsAlterNote       $00
000B3A8C C5C7                       	dc.b	nAb5, nBb5
000B3A8E E60F                       	smpsAlterVol        $0F
000B3A90 C7                         	dc.b	nBb5
000B3A91 E6F1                       	smpsAlterVol        $F1
000B3A93 C5                         	dc.b	nAb5
000B3A94 E60F                       	smpsAlterVol        $0F
000B3A96 08                         	dc.b	$08
000B3A97 E6F1                       	smpsAlterVol        $F1
000B3A99 E1FF                       	smpsAlterNote       $FF
000B3A9B C410                       	dc.b	nG5, $10
000B3A9D E60F                       	smpsAlterVol        $0F
000B3A9F C4                         	dc.b	nG5
000B3AA0 E6F1                       	smpsAlterVol        $F1
000B3AA2 C4                         	dc.b	nG5
000B3AA3 E100                       	smpsAlterNote       $00
000B3AA5 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B3AAA E60F                       	smpsAlterVol        $0F
000B3AAC C2                         	dc.b	nF5
000B3AAD E6F1                       	smpsAlterVol        $F1
000B3AAF E1FF                       	smpsAlterNote       $FF
000B3AB1 C4                         	dc.b	nG5
000B3AB2 E60F                       	smpsAlterVol        $0F
000B3AB4 08                         	dc.b	$08
000B3AB5 E6F1                       	smpsAlterVol        $F1
000B3AB7 10                         	dc.b	$10
000B3AB8 E60F                       	smpsAlterVol        $0F
000B3ABA 38                         	dc.b	$38
000B3ABB E6F1                       	smpsAlterVol        $F1
000B3ABD 10                         	dc.b	$10
000B3ABE E60F                       	smpsAlterVol        $0F
000B3AC0 C4                         	dc.b	nG5
000B3AC1 E6F1                       	smpsAlterVol        $F1
000B3AC3 E100                       	smpsAlterNote       $00
000B3AC5 C2                         	dc.b	nF5
000B3AC6 E60F                       	smpsAlterVol        $0F
000B3AC8 08                         	dc.b	$08
000B3AC9 E6F1                       	smpsAlterVol        $F1
000B3ACB C010                       	dc.b	nEb5, $10
000B3ACD E60F                       	smpsAlterVol        $0F
000B3ACF C0                         	dc.b	nEb5
000B3AD0 E6F1                       	smpsAlterVol        $F1
000B3AD2 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B3AD8 E60F                       	smpsAlterVol        $0F
000B3ADA C9                         	dc.b	nC6
000B3ADB E6F1                       	smpsAlterVol        $F1
000B3ADD C5                         	dc.b	nAb5
000B3ADE E60F                       	smpsAlterVol        $0F
000B3AE0 08                         	dc.b	$08
000B3AE1 E6F1                       	smpsAlterVol        $F1
000B3AE3 C010                       	dc.b	nEb5, $10
000B3AE5 E60F                       	smpsAlterVol        $0F
000B3AE7 C0                         	dc.b	nEb5
000B3AE8 E6F1                       	smpsAlterVol        $F1
000B3AEA C208                       	dc.b	nF5, $08
000B3AEC E1FF                       	smpsAlterNote       $FF
000B3AEE C410                       	dc.b	nG5, $10
000B3AF0 E100                       	smpsAlterNote       $00
000B3AF2 C5C7                       	dc.b	nAb5, nBb5
000B3AF4 E60F                       	smpsAlterVol        $0F
000B3AF6 C7                         	dc.b	nBb5
000B3AF7 E6F1                       	smpsAlterVol        $F1
000B3AF9 C5                         	dc.b	nAb5
000B3AFA E60F                       	smpsAlterVol        $0F
000B3AFC 08                         	dc.b	$08
000B3AFD E6F1                       	smpsAlterVol        $F1
000B3AFF E1FF                       	smpsAlterNote       $FF
000B3B01 C410                       	dc.b	nG5, $10
000B3B03 E60F                       	smpsAlterVol        $0F
000B3B05 C4                         	dc.b	nG5
000B3B06 E6F1                       	smpsAlterVol        $F1
000B3B08 C4                         	dc.b	nG5
000B3B09 E100                       	smpsAlterNote       $00
000B3B0B C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B3B10 E60F                       	smpsAlterVol        $0F
000B3B12 28                         	dc.b	$28
000B3B13 E6F1                       	smpsAlterVol        $F1
000B3B15 C008 10                    	dc.b	nEb5, $08, $10
000B3B18 E60F                       	smpsAlterVol        $0F
000B3B1A 21                         	dc.b	$21
000B3B1B E0C0                       	smpsPan             panCenter, $00
000B3B1D F6FF 29                    	smpsJump            GentleBreeze_Loop12
000B3B20                            
000B3B20                            ; FM2 Data
000B3B20                            GentleBreeze_FM2:
000B3B22 E60C                       	smpsAlterVol        $0C
000B3B24 E0C0                       	smpsPan             panCenter, $00
000B3B26 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000B3B32 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000B3B3E 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000B3B4A 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000B3B56 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000B3B62 A039                       	dc.b	nG2, $39
000B3B64                            
000B3B64                            GentleBreeze_Jump04:
000B3B64 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000B3B67                            
000B3B67                            GentleBreeze_Loop11:
000B3B67 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000B3B73 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000B3B7F 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000B3B8B 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000B3B97 A3                         	dc.b	nBb2
000B3B98 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000B3B9D 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000B3BA9 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000B3BB5 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000B3BC1 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000B3BCD 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000B3BD9 A039                       	dc.b	nG2, $39
000B3BDB E0C0                       	smpsPan             panCenter, $00
000B3BDD F6FF 85                    	smpsJump            GentleBreeze_Jump04
000B3BE0                            
000B3BE0                            ; FM3 Data
000B3BE0                            GentleBreeze_FM3:
000B3BE2 E0C0                       	smpsPan             panCenter, $00
000B3BE4 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000B3BEC E616                       	smpsAlterVol        $16
000B3BEE F000 0207 03               	smpsModSet          $00, $02, $07, $03
000B3BF3                            
000B3BF3                            GentleBreeze_Loop0F:
000B3BF3 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000B3BF7 E1FF                       	smpsAlterNote       $FF
000B3BF9 C4                         	dc.b	nG5
000B3BFA E100                       	smpsAlterNote       $00
000B3BFC C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B3C01 E608                       	smpsAlterVol        $08
000B3C03 C080 08                    	dc.b	nEb5, nRst, $08
000B3C06 E6F8                       	smpsAlterVol        $F8
000B3C08 C7                         	dc.b	nBb5
000B3C09 E1FF                       	smpsAlterNote       $FF
000B3C0B C4                         	dc.b	nG5
000B3C0C E100                       	smpsAlterNote       $00
000B3C0E C0BB                       	dc.b	nEb5, nBb4
000B3C10 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000B3C15 C0BD C9                    	dc.b	nEb5, nC5, nC6
000B3C18 E1FF                       	smpsAlterNote       $FF
000B3C1A C4                         	dc.b	nG5
000B3C1B E100                       	smpsAlterNote       $00
000B3C1D C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B3C22 E608                       	smpsAlterVol        $08
000B3C24 C080 08                    	dc.b	nEb5, nRst, $08
000B3C27 E6F8                       	smpsAlterVol        $F8
000B3C29 E1FF                       	smpsAlterNote       $FF
000B3C2B C4                         	dc.b	nG5
000B3C2C E100                       	smpsAlterNote       $00
000B3C2E C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000B3C35 E1FF                       	smpsAlterNote       $FF
000B3C37 C4                         	dc.b	nG5
000B3C38 E100                       	smpsAlterNote       $00
000B3C3A C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000B3C3F E1FF                       	smpsAlterNote       $FF
000B3C41 C4                         	dc.b	nG5
000B3C42 E100                       	smpsAlterNote       $00
000B3C44 C7                         	dc.b	nBb5
000B3C45 E1FF                       	smpsAlterNote       $FF
000B3C47 C4                         	dc.b	nG5
000B3C48 E100                       	smpsAlterNote       $00
000B3C4A C2C0 01                    	dc.b	nF5, nEb5, $01
000B3C4D                            
000B3C4D                            GentleBreeze_Jump03:
000B3C4D E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000B3C54 E6FA                       	smpsAlterVol        $FA
000B3C56 F4                         	smpsModOff
000B3C57 E1FF                       	smpsAlterNote       $FF
000B3C59 B850                       	dc.b	nG4, $50
000B3C5B E100                       	smpsAlterNote       $00
000B3C5D B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000B3C69 E1FF                       	smpsAlterNote       $FF
000B3C6B B810                       	dc.b	nG4, $10
000B3C6D E100                       	smpsAlterNote       $00
000B3C6F BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000B3C74 E1FF                       	smpsAlterNote       $FF
000B3C76 B8                         	dc.b	nG4
000B3C77 E100                       	smpsAlterNote       $00
000B3C79 B610                       	dc.b	nF4, $10
000B3C7B E1FF                       	smpsAlterNote       $FF
000B3C7D B850                       	dc.b	nG4, $50
000B3C7F E100                       	smpsAlterNote       $00
000B3C81 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000B3C89 E1FF                       	smpsAlterNote       $FF
000B3C8B AC08                       	dc.b	nG3, $08
000B3C8D E100                       	smpsAlterNote       $00
000B3C8F AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000B3C94 E1FF                       	smpsAlterNote       $FF
000B3C96 B850                       	dc.b	nG4, $50
000B3C98 E100                       	smpsAlterNote       $00
000B3C9A BB08                       	dc.b	nBb4, $08
000B3C9C E1FF                       	smpsAlterNote       $FF
000B3C9E B8                         	dc.b	nG4
000B3C9F E100                       	smpsAlterNote       $00
000B3CA1 BDBB B6                    	dc.b	nC5, nBb4, nF4
000B3CA4 E1FF                       	smpsAlterNote       $FF
000B3CA6 B810 08                    	dc.b	nG4, $10, $08
000B3CA9 E100                       	smpsAlterNote       $00
000B3CAB B6                         	dc.b	nF4
000B3CAC E1FF                       	smpsAlterNote       $FF
000B3CAE B880                       	dc.b	nG4, nRst
000B3CB0 E100                       	smpsAlterNote       $00
000B3CB2 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000B3CB5 E1FF                       	smpsAlterNote       $FF
000B3CB7 B810                       	dc.b	nG4, $10
000B3CB9 E100                       	smpsAlterNote       $00
000B3CBB B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000B3CC2 E1FF                       	smpsAlterNote       $FF
000B3CC4 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000B3CD2 E606                       	smpsAlterVol        $06
000B3CD4 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000B3CD9 E100                       	smpsAlterNote       $00
000B3CDB                            
000B3CDB                            GentleBreeze_Loop10:
000B3CDB C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000B3CDF E1FF                       	smpsAlterNote       $FF
000B3CE1 C4                         	dc.b	nG5
000B3CE2 E100                       	smpsAlterNote       $00
000B3CE4 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B3CE9 E608                       	smpsAlterVol        $08
000B3CEB C080 08                    	dc.b	nEb5, nRst, $08
000B3CEE E6F8                       	smpsAlterVol        $F8
000B3CF0 C7                         	dc.b	nBb5
000B3CF1 E1FF                       	smpsAlterNote       $FF
000B3CF3 C4                         	dc.b	nG5
000B3CF4 E100                       	smpsAlterNote       $00
000B3CF6 C0BB                       	dc.b	nEb5, nBb4
000B3CF8 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000B3CFD C0BD C9                    	dc.b	nEb5, nC5, nC6
000B3D00 E1FF                       	smpsAlterNote       $FF
000B3D02 C4                         	dc.b	nG5
000B3D03 E100                       	smpsAlterNote       $00
000B3D05 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B3D0A E608                       	smpsAlterVol        $08
000B3D0C C080 08                    	dc.b	nEb5, nRst, $08
000B3D0F E6F8                       	smpsAlterVol        $F8
000B3D11 E1FF                       	smpsAlterNote       $FF
000B3D13 C4                         	dc.b	nG5
000B3D14 E100                       	smpsAlterNote       $00
000B3D16 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000B3D1D E1FF                       	smpsAlterNote       $FF
000B3D1F C4                         	dc.b	nG5
000B3D20 E100                       	smpsAlterNote       $00
000B3D22 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000B3D27 E1FF                       	smpsAlterNote       $FF
000B3D29 C4                         	dc.b	nG5
000B3D2A E100                       	smpsAlterNote       $00
000B3D2C C7                         	dc.b	nBb5
000B3D2D E1FF                       	smpsAlterNote       $FF
000B3D2F C4                         	dc.b	nG5
000B3D30 E100                       	smpsAlterNote       $00
000B3D32 C2C0 01                    	dc.b	nF5, nEb5, $01
000B3D35 E0C0                       	smpsPan             panCenter, $00
000B3D37 F1                         	smpsModOn
000B3D38 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000B3D3B                            
000B3D3B                            ; FM4 Data
000B3D3B                            GentleBreeze_FM4:
000B3D3D E0C0                       	smpsPan             panCenter, $00
000B3D3F 80                         	dc.b	nRst
000B3D40                            
000B3D40                            GentleBreeze_Loop0D:
000B3D40 7F                         	dc.b	$7F
000B3D41 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000B3D46 77                         	dc.b	$77
000B3D49 E609                       	smpsAlterVol        $09
000B3D4B C001                       	dc.b	nEb5, $01
000B3D4D                            
000B3D4D                            GentleBreeze_Jump02:
000B3D4D E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000B3D52 E607                       	smpsAlterVol        $07
000B3D54 E1FF                       	smpsAlterNote       $FF
000B3D56 C450                       	dc.b	nG5, $50
000B3D58 E100                       	smpsAlterNote       $00
000B3D5A C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000B3D66 E1FF                       	smpsAlterNote       $FF
000B3D68 C410                       	dc.b	nG5, $10
000B3D6A E100                       	smpsAlterNote       $00
000B3D6C C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000B3D71 E1FF                       	smpsAlterNote       $FF
000B3D73 C4                         	dc.b	nG5
000B3D74 E100                       	smpsAlterNote       $00
000B3D76 C210                       	dc.b	nF5, $10
000B3D78 E1FF                       	smpsAlterNote       $FF
000B3D7A C450                       	dc.b	nG5, $50
000B3D7C E100                       	smpsAlterNote       $00
000B3D7E C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000B3D86 E1FF                       	smpsAlterNote       $FF
000B3D88 B808                       	dc.b	nG4, $08
000B3D8A E100                       	smpsAlterNote       $00
000B3D8C BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000B3D91 E1FF                       	smpsAlterNote       $FF
000B3D93 C450                       	dc.b	nG5, $50
000B3D95 E100                       	smpsAlterNote       $00
000B3D97 C708                       	dc.b	nBb5, $08
000B3D99 E1FF                       	smpsAlterNote       $FF
000B3D9B C4                         	dc.b	nG5
000B3D9C E100                       	smpsAlterNote       $00
000B3D9E C9C7 C2                    	dc.b	nC6, nBb5, nF5
000B3DA1 E1FF                       	smpsAlterNote       $FF
000B3DA3 C410 08                    	dc.b	nG5, $10, $08
000B3DA6 E100                       	smpsAlterNote       $00
000B3DA8 C2                         	dc.b	nF5
000B3DA9 E1FF                       	smpsAlterNote       $FF
000B3DAB C480                       	dc.b	nG5, nRst
000B3DAD E100                       	smpsAlterNote       $00
000B3DAF C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000B3DB2 E1FF                       	smpsAlterNote       $FF
000B3DB4 C410                       	dc.b	nG5, $10
000B3DB6 E100                       	smpsAlterNote       $00
000B3DB8 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000B3DBF E1FF                       	smpsAlterNote       $FF
000B3DC1 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000B3DC9                            
000B3DC9                            GentleBreeze_Loop0E:
000B3DC9 7F                         	dc.b	$7F
000B3DCA F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000B3DCF 77                         	dc.b	$77
000B3DD0 E100                       	smpsAlterNote       $00
000B3DD2 C001                       	dc.b	nEb5, $01
000B3DD4 E6F9                       	smpsAlterVol        $F9
000B3DD6 E0C0                       	smpsPan             panCenter, $00
000B3DD8 E100                       	smpsAlterNote       $00
000B3DDA F6FF 71                    	smpsJump            GentleBreeze_Jump02
000B3DDD                            
000B3DDD                            ; FM5 Data
000B3DDD                            GentleBreeze_FM5:
000B3DDF E0C0                       	smpsPan             panCenter, $00
000B3DE1 A5                         	dc.b	nC3
000B3DE2                            
000B3DE2                            GentleBreeze_Loop06:
000B3DE2 10                         	dc.b	$10
000B3DE3 E607                       	smpsAlterVol        $07
000B3DE5 A5                         	dc.b	nC3
000B3DE6 E6F9                       	smpsAlterVol        $F9
000B3DE8 08                         	dc.b	$08
000B3DE9 E607                       	smpsAlterVol        $07
000B3DEB A5                         	dc.b	nC3
000B3DEC E608                       	smpsAlterVol        $08
000B3DEE A5                         	dc.b	nC3
000B3DEF E6F1                       	smpsAlterVol        $F1
000B3DF1 18                         	dc.b	$18
000B3DF2 E607                       	smpsAlterVol        $07
000B3DF4 10                         	dc.b	$10
000B3DF5 E608                       	smpsAlterVol        $08
000B3DF7 A5                         	dc.b	nC3
000B3DF8 E6F1                       	smpsAlterVol        $F1
000B3DFA A5                         	dc.b	nC3
000B3DFB F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000B3E00 A5                         	dc.b	nC3
000B3E01                            
000B3E01                            GentleBreeze_Loop07:
000B3E01 E607                       	smpsAlterVol        $07
000B3E03 A5                         	dc.b	nC3
000B3E04 E6F9                       	smpsAlterVol        $F9
000B3E06 08                         	dc.b	$08
000B3E07 E607                       	smpsAlterVol        $07
000B3E09 A5                         	dc.b	nC3
000B3E0A E608                       	smpsAlterVol        $08
000B3E0C A5                         	dc.b	nC3
000B3E0D E6F1                       	smpsAlterVol        $F1
000B3E0F 10                         	dc.b	$10
000B3E10 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000B3E15                            
000B3E15                            GentleBreeze_Loop08:
000B3E15 A5                         	dc.b	nC3
000B3E16 E607                       	smpsAlterVol        $07
000B3E18 A5                         	dc.b	nC3
000B3E19 E6F9                       	smpsAlterVol        $F9
000B3E1B 08                         	dc.b	$08
000B3E1C E607                       	smpsAlterVol        $07
000B3E1E A5                         	dc.b	nC3
000B3E1F E608                       	smpsAlterVol        $08
000B3E21 A5                         	dc.b	nC3
000B3E22 E6F1                       	smpsAlterVol        $F1
000B3E24 18                         	dc.b	$18
000B3E25 E607                       	smpsAlterVol        $07
000B3E27 10                         	dc.b	$10
000B3E28 E608                       	smpsAlterVol        $08
000B3E2A A5                         	dc.b	nC3
000B3E2B E6F1                       	smpsAlterVol        $F1
000B3E2D A5                         	dc.b	nC3
000B3E2E F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000B3E33 A5                         	dc.b	nC3
000B3E34 E607                       	smpsAlterVol        $07
000B3E36 A5                         	dc.b	nC3
000B3E37 E6F9                       	smpsAlterVol        $F9
000B3E39 08                         	dc.b	$08
000B3E3A E607                       	smpsAlterVol        $07
000B3E3C A5                         	dc.b	nC3
000B3E3D E608                       	smpsAlterVol        $08
000B3E3F A5                         	dc.b	nC3
000B3E40 E6F1                       	smpsAlterVol        $F1
000B3E42 10                         	dc.b	$10
000B3E43 E607                       	smpsAlterVol        $07
000B3E45 A5                         	dc.b	nC3
000B3E46 E6F9                       	smpsAlterVol        $F9
000B3E48 08                         	dc.b	$08
000B3E49 E607                       	smpsAlterVol        $07
000B3E4B A5                         	dc.b	nC3
000B3E4C E608                       	smpsAlterVol        $08
000B3E4E A5                         	dc.b	nC3
000B3E4F E6F1                       	smpsAlterVol        $F1
000B3E51 01                         	dc.b	$01
000B3E52                            
000B3E52                            GentleBreeze_Jump01:
000B3E52 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000B3E55 E607                       	smpsAlterVol        $07
000B3E57                            
000B3E57                            GentleBreeze_Loop09:
000B3E57 10                         	dc.b	$10
000B3E58 E608                       	smpsAlterVol        $08
000B3E5A A5                         	dc.b	nC3
000B3E5B E6F1                       	smpsAlterVol        $F1
000B3E5D 08                         	dc.b	$08
000B3E5E E60F                       	smpsAlterVol        $0F
000B3E60 18                         	dc.b	$18
000B3E61 E6F8                       	smpsAlterVol        $F8
000B3E63 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000B3E68 10                         	dc.b	$10
000B3E69 E608                       	smpsAlterVol        $08
000B3E6B A5                         	dc.b	nC3
000B3E6C E6F1                       	smpsAlterVol        $F1
000B3E6E 08                         	dc.b	$08
000B3E6F E60F                       	smpsAlterVol        $0F
000B3E71 18                         	dc.b	$18
000B3E72 E6F1                       	smpsAlterVol        $F1
000B3E74                            
000B3E74                            GentleBreeze_Loop0A:
000B3E74 10                         	dc.b	$10
000B3E75 E607                       	smpsAlterVol        $07
000B3E77 A5                         	dc.b	nC3
000B3E78 E6F9                       	smpsAlterVol        $F9
000B3E7A 08                         	dc.b	$08
000B3E7B E607                       	smpsAlterVol        $07
000B3E7D A5                         	dc.b	nC3
000B3E7E E608                       	smpsAlterVol        $08
000B3E80 A5                         	dc.b	nC3
000B3E81 E6F1                       	smpsAlterVol        $F1
000B3E83 18                         	dc.b	$18
000B3E84 E607                       	smpsAlterVol        $07
000B3E86 10                         	dc.b	$10
000B3E87 E608                       	smpsAlterVol        $08
000B3E89 A5                         	dc.b	nC3
000B3E8A E6F1                       	smpsAlterVol        $F1
000B3E8C A5                         	dc.b	nC3
000B3E8D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000B3E92 A5                         	dc.b	nC3
000B3E93                            
000B3E93                            GentleBreeze_Loop0B:
000B3E93 E607                       	smpsAlterVol        $07
000B3E95 A5                         	dc.b	nC3
000B3E96 E6F9                       	smpsAlterVol        $F9
000B3E98 08                         	dc.b	$08
000B3E99 E607                       	smpsAlterVol        $07
000B3E9B A5                         	dc.b	nC3
000B3E9C E608                       	smpsAlterVol        $08
000B3E9E A5                         	dc.b	nC3
000B3E9F E6F1                       	smpsAlterVol        $F1
000B3EA1 10                         	dc.b	$10
000B3EA2 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000B3EA7                            
000B3EA7                            GentleBreeze_Loop0C:
000B3EA7 A5                         	dc.b	nC3
000B3EA8 E607                       	smpsAlterVol        $07
000B3EAA A5                         	dc.b	nC3
000B3EAB E6F9                       	smpsAlterVol        $F9
000B3EAD 08                         	dc.b	$08
000B3EAE E607                       	smpsAlterVol        $07
000B3EB0 A5                         	dc.b	nC3
000B3EB1 E608                       	smpsAlterVol        $08
000B3EB3 A5                         	dc.b	nC3
000B3EB4 E6F1                       	smpsAlterVol        $F1
000B3EB6 18                         	dc.b	$18
000B3EB7 E607                       	smpsAlterVol        $07
000B3EB9 10                         	dc.b	$10
000B3EBA E608                       	smpsAlterVol        $08
000B3EBC A5                         	dc.b	nC3
000B3EBD E6F1                       	smpsAlterVol        $F1
000B3EBF A5                         	dc.b	nC3
000B3EC0 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000B3EC5 A5                         	dc.b	nC3
000B3EC6 E607                       	smpsAlterVol        $07
000B3EC8 A5                         	dc.b	nC3
000B3EC9 E6F9                       	smpsAlterVol        $F9
000B3ECB 08                         	dc.b	$08
000B3ECC E607                       	smpsAlterVol        $07
000B3ECE A5                         	dc.b	nC3
000B3ECF E608                       	smpsAlterVol        $08
000B3ED1 A5                         	dc.b	nC3
000B3ED2 E6F1                       	smpsAlterVol        $F1
000B3ED4 10                         	dc.b	$10
000B3ED5 E607                       	smpsAlterVol        $07
000B3ED7 A5                         	dc.b	nC3
000B3ED8 E6F9                       	smpsAlterVol        $F9
000B3EDA 08                         	dc.b	$08
000B3EDB E607                       	smpsAlterVol        $07
000B3EDD A5                         	dc.b	nC3
000B3EDE E608                       	smpsAlterVol        $08
000B3EE0 A5                         	dc.b	nC3
000B3EE1 E6F1                       	smpsAlterVol        $F1
000B3EE3 01                         	dc.b	$01
000B3EE4 E0C0                       	smpsPan             panCenter, $00
000B3EE6 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000B3EE9                            
000B3EE9                            ; DAC Data
000B3EE9                            GentleBreeze_DAC:
000B3EE9 81                         	dc.b	dKick
000B3EEA                            
000B3EEA                            GentleBreeze_Loop00:
000B3EEA 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B3EF0 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000B3EF5 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B3F00                            
000B3F00                            GentleBreeze_Loop01:
000B3F00 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B3F06 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000B3F0B 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B3F15                            
000B3F15                            GentleBreeze_Jump00:
000B3F15 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000B3F19                            
000B3F19                            GentleBreeze_Loop02:
000B3F19 81                         	dc.b	dKick
000B3F1A                            
000B3F1A                            GentleBreeze_Loop03:
000B3F1A 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000B3F26 088A                       	dc.b	$08, dLowTimpani
000B3F28 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000B3F2D 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000B3F39 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000B3F3E F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000B3F43                            
000B3F43                            GentleBreeze_Loop04:
000B3F43 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B3F49 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000B3F4E 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B3F59                            
000B3F59                            GentleBreeze_Loop05:
000B3F59 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B3F5F F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000B3F64 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B3F6E F6FF A5                    	smpsJump            GentleBreeze_Jump00
000B3F71                            
000B3F71                            ; PSG 1 Data
000B3F71                            GentleBreeze_PSG1:
000B3F71 80                         	dc.b	nRst
000B3F72                            
000B3F72                            GentleBreeze_LoopPSG02:
000B3F72 7F                         	dc.b	$7F
000B3F73 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000B3F78 08                         	dc.b	$08
000B3F79 EC04                       	smpsPSGAlterVol     $04
000B3F7B                            
000B3F7B                            GentleBreeze_JumpPSG01:
000B3F7B A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000B3F87 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000B3F8F                            
000B3F8F                            GentleBreeze_LoopPSG03:
000B3F8F 7F                         	dc.b	$7F
000B3F90 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000B3F95 08A3 01                    	dc.b	$08, nBb2, $01
000B3F98 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000B3F9B                            
000B3F9B                            ; PSG2 Data
000B3F9B                            GentleBreeze_PSG2:
000B3F9B 80                         	dc.b	nRst
000B3F9C                            
000B3F9C                            GentleBreeze_LoopPSG00:
000B3F9C 7F                         	dc.b	$7F
000B3F9D F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000B3FA2 08                         	dc.b	$08
000B3FA3 EC04                       	smpsPSGAlterVol     $04
000B3FA5                            
000B3FA5                            GentleBreeze_JumpPSG00:
000B3FA5 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000B3FB1 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000B3FB9                            
000B3FB9                            GentleBreeze_LoopPSG01:
000B3FB9 7F                         	dc.b	$7F
000B3FBA F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000B3FBF 08A8 01                    	dc.b	$08, nEb3, $01
000B3FC2 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000B3FC5                            
000B3FC5                            GentleBreeze_Voices:
000B3FC5                            ;	Voice $00
000B3FC5                            ;	$0C
000B3FC5                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000B3FC5                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000B3FC5                            	smpsVcAlgorithm     $04
000B3FC5                            	smpsVcFeedback      $01
000B3FC5                            	smpsVcUnusedBits    $00
000B3FC5                            	smpsVcDetune        $07, $02, $07, $02
000B3FC5                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000B3FC5                            	smpsVcRateScale     $00, $00, $00, $00
000B3FC5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3FC5                            	smpsVcAmpMod        $00, $00, $00, $00
000B3FC5                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000B3FC5                            	smpsVcDecayRate2    $01, $00, $00, $00
000B3FC5                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000B3FC5                            	smpsVcReleaseRate   $09, $01, $04, $03
000B3FC5 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000B3FDE                            
000B3FDE                            ;	Voice $01
000B3FDE                            ;	$38
000B3FDE                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000B3FDE                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000B3FDE                            	smpsVcAlgorithm     $00
000B3FDE                            	smpsVcFeedback      $07
000B3FDE                            	smpsVcUnusedBits    $00
000B3FDE                            	smpsVcDetune        $03, $07, $01, $05
000B3FDE                            	smpsVcCoarseFreq    $00, $00, $07, $04
000B3FDE                            	smpsVcRateScale     $00, $02, $00, $02
000B3FDE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3FDE                            	smpsVcAmpMod        $00, $00, $00, $00
000B3FDE                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000B3FDE                            	smpsVcDecayRate2    $00, $00, $10, $00
000B3FDE                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3FDE                            	smpsVcReleaseRate   $08, $05, $05, $05
000B3FDE 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000B3FF7                            
000B3FF7                            ;	Voice $02
000B3FF7                            ;	$00
000B3FF7                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B3FF7                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B3FF7                            	smpsVcAlgorithm     $00
000B3FF7                            	smpsVcFeedback      $00
000B3FF7                            	smpsVcUnusedBits    $00
000B3FF7                            	smpsVcDetune        $00, $00, $00, $00
000B3FF7                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B3FF7                            	smpsVcRateScale     $00, $00, $00, $00
000B3FF7                            	smpsVcAttackRate    $00, $00, $00, $00
000B3FF7                            	smpsVcAmpMod        $00, $00, $00, $00
000B3FF7                            	smpsVcDecayRate1    $00, $00, $00, $00
000B3FF7                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3FF7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B3FF7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3FF7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B4010                            
000B4010                            ;	Voice $03
000B4010                            ;	$36
000B4010                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000B4010                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000B4010                            	smpsVcAlgorithm     $06
000B4010                            	smpsVcFeedback      $06
000B4010                            	smpsVcUnusedBits    $00
000B4010                            	smpsVcDetune        $00, $00, $00, $00
000B4010                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000B4010                            	smpsVcRateScale     $00, $00, $00, $00
000B4010                            	smpsVcAttackRate    $1F, $00, $18, $16
000B4010                            	smpsVcAmpMod        $00, $00, $00, $00
000B4010                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000B4010                            	smpsVcDecayRate2    $00, $00, $12, $00
000B4010                            	smpsVcDecayLevel    $04, $04, $02, $00
000B4010                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000B4010 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000B4029                            
000B4029                            ;	Voice $04
000B4029                            ;	$07
000B4029                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000B4029                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000B4029                            	smpsVcAlgorithm     $07
000B4029                            	smpsVcFeedback      $00
000B4029                            	smpsVcUnusedBits    $00
000B4029                            	smpsVcDetune        $07, $06, $05, $00
000B4029                            	smpsVcCoarseFreq    $05, $04, $03, $05
000B4029                            	smpsVcRateScale     $00, $01, $01, $01
000B4029                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000B4029                            	smpsVcAmpMod        $00, $00, $00, $00
000B4029                            	smpsVcDecayRate1    $17, $17, $17, $17
000B4029                            	smpsVcDecayRate2    $00, $00, $00, $00
000B4029                            	smpsVcDecayLevel    $02, $02, $02, $02
000B4029                            	smpsVcReleaseRate   $06, $06, $06, $06
000B4029 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000B4042                            
000B4042                            ;	Voice $05
000B4042                            ;	$3C
000B4042                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000B4042                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000B4042                            	smpsVcAlgorithm     $04
000B4042                            	smpsVcFeedback      $07
000B4042                            	smpsVcUnusedBits    $00
000B4042                            	smpsVcDetune        $06, $06, $02, $02
000B4042                            	smpsVcCoarseFreq    $01, $03, $01, $01
000B4042                            	smpsVcRateScale     $00, $00, $00, $00
000B4042                            	smpsVcAttackRate    $0E, $14, $10, $13
000B4042                            	smpsVcAmpMod        $00, $00, $00, $00
000B4042                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000B4042                            	smpsVcDecayRate2    $04, $04, $04, $04
000B4042                            	smpsVcDecayLevel    $02, $01, $01, $01
000B4042                            	smpsVcReleaseRate   $07, $07, $07, $07
000B4042 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000B405B                            
000B405B                            
000B405C 00                         		even
000B405C                            ; ---------------------------------------------------------------------------
000B405C                            ; Sound	effect pointers
000B405C                            ; ---------------------------------------------------------------------------
000B405C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000B4068 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000B4074 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000B4080 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000B408C 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000B4098 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000B40A4 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000B40B0 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000B40BC 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000B40C8 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000B40D4 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000B40E0 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000B40EC 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000B40F8 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000B4104 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000B4110 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000B411C 0000 0000                  SoundD0Index:	dc.l SoundD0
000B4120 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000B4128                            SoundA0:	include	sound\jump.asm
000B4128                            SndA0_Jump_Header:
000B4128 =00000001                  smpsHeaderStartSong = 1
000B4128 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000B412A 01                         	smpsHeaderTempoSFX  $01
000B412B 01                         	smpsHeaderChanSFX   $01
000B412C                            
000B4132                            
000B4132                            ; PSG1 Data
000B4132                            SndA0_Jump_PSG1:
000B4132 F500                       	smpsPSGvoice        $00
000B4134 A201                       	dc.b	nA2, $01
000B4136 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000B413B 9C15                       	dc.b	nEb2, $15
000B413D F2                         	smpsStop
000B413E                            
000B413E                            ; Song seems to not use any FM voices
000B413E                            SndA0_Jump_Voices:
000B413E                            SndA0_Jump_Voices:
000B413E                            		even
000B413E                            SoundA1:	incbin	sound\soundA1.bin
000B4168                            		even
000B4168                            SoundA2:	incbin	sound\soundA2.bin
000B4188                            		even
000B4188                            SoundA3:	incbin	sound\soundA3.bin
000B41BA                            		even
000B41BA                            SoundA4:	incbin	sound\soundA4.bin
000B41F0                            		even
000B41F0                            SoundA5:	include	sound\fart.asm
000B41F0                            Fart_Header:
000B41F0 =00000001                  smpsHeaderStartSong = 1
000B41F0 0000                       	smpsHeaderVoice     Fart_Voices
000B41F2 01                         	smpsHeaderTempoSFX  $01
000B41F3 04                         	smpsHeaderChanSFX   $04
000B41F4                            
000B420C                            
000B420C                            Fart_FM3:
000B420E E607                       	smpsAlterVol        $07
000B4210 E0C0                       	smpsPan             panCenter, $00
000B4212 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B4217 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000B421A E1FE                       	smpsAlterNote       $FE
000B421C A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000B421F E100                       	smpsAlterNote       $00
000B4221 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000B4226 F2                         	smpsStop
000B4227                            
000B4227                            ; FM4 Data
000B4227                            Fart_FM4:
000B4229 E0C0                       	smpsPan             panCenter, $00
000B422B 8006                       	dc.b	nRst, $06
000B422F E616                       	smpsAlterVol        $16
000B4231 E080                       	smpsPan             panLeft, $00
000B4233 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B4238 A212                       	dc.b	nA2, $12
000B423A E60A                       	smpsAlterVol        $0A
000B423C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B423F E603                       	smpsAlterVol        $03
000B4241 E7A2                       	dc.b	smpsNoAttack, nA2
000B4243 E603                       	smpsAlterVol        $03
000B4245 E7A2                       	dc.b	smpsNoAttack, nA2
000B4247 E604                       	smpsAlterVol        $04
000B4249 E7A2                       	dc.b	smpsNoAttack, nA2
000B424B E606                       	smpsAlterVol        $06
000B424D E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000B4250 E610                       	smpsAlterVol        $10
000B4252 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B4255 E610                       	smpsAlterVol        $10
000B4257 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000B425C F2                         	smpsStop
000B425D                            
000B425D                            ; FM5 Data
000B425D                            Fart_FM5:
000B425F E0C0                       	smpsPan             panCenter, $00
000B4261 8009                       	dc.b	nRst, $09
000B4265 E616                       	smpsAlterVol        $16
000B4267 E040                       	smpsPan             panRight, $00
000B4269 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B426E A215                       	dc.b	nA2, $15
000B4270 E60A                       	smpsAlterVol        $0A
000B4272 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B4275 E603                       	smpsAlterVol        $03
000B4277 E7A2                       	dc.b	smpsNoAttack, nA2
000B4279 E603                       	smpsAlterVol        $03
000B427B E7A2                       	dc.b	smpsNoAttack, nA2
000B427D E604                       	smpsAlterVol        $04
000B427F E7A2                       	dc.b	smpsNoAttack, nA2
000B4281 E606                       	smpsAlterVol        $06
000B4283 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000B4286 E610                       	smpsAlterVol        $10
000B4288 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B428B E610                       	smpsAlterVol        $10
000B428D E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000B4292 F2                         	smpsStop
000B4293                            
000B4293                            ; PSG3 Data
000B4293                            Fart_PSG3:
000B4293 F2                         	smpsStop
000B4294                            
000B4294                            ; FM Voices
000B4294                            Fart_Voices:
000B4294                            ;	Voice $00
000B4294                            ;	$39
000B4294                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000B4294                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000B4294                            	smpsVcAlgorithm     $01
000B4294                            	smpsVcFeedback      $07
000B4294                            	smpsVcUnusedBits    $00
000B4294                            	smpsVcDetune        $00, $07, $03, $07
000B4294                            	smpsVcCoarseFreq    $01, $01, $02, $00
000B4294                            	smpsVcRateScale     $00, $03, $03, $03
000B4294                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4294                            	smpsVcAmpMod        $00, $00, $00, $00
000B4294                            	smpsVcDecayRate1    $00, $00, $00, $04
000B4294                            	smpsVcDecayRate2    $00, $00, $16, $1F
000B4294                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000B4294                            	smpsVcReleaseRate   $0A, $09, $00, $00
000B4294 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000B42AD                            
000B42AD                            ;	Voice $01
000B42AD                            ;	$00
000B42AD                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B42AD                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B42AD                            	smpsVcAlgorithm     $00
000B42AD                            	smpsVcFeedback      $00
000B42AD                            	smpsVcUnusedBits    $00
000B42AD                            	smpsVcDetune        $00, $00, $00, $00
000B42AD                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B42AD                            	smpsVcRateScale     $00, $00, $00, $00
000B42AD                            	smpsVcAttackRate    $00, $00, $00, $00
000B42AD                            	smpsVcAmpMod        $00, $00, $00, $00
000B42AD                            	smpsVcDecayRate1    $00, $00, $00, $00
000B42AD                            	smpsVcDecayRate2    $00, $00, $00, $00
000B42AD                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B42AD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B42AD 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B42AD 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B42C6                            		even
000B42C6                            SoundA6:	incbin	sound\soundA6.bin
000B42F6                            		even
000B42F6                            SoundA7:	incbin	sound\soundA7.bin
000B4326                            		even
000B4326                            SoundA8:	incbin	sound\soundA8.bin
000B435A                            		even
000B435A                            SoundA9:	incbin	sound\soundA9.bin
000B436C                            		even
000B436C                            SoundAA:	incbin	sound\soundAA.bin
000B43AE                            		even
000B43AE                            SoundAB:	incbin	sound\soundAB.bin
000B43CE                            		even
000B43CE                            SoundAC:	incbin	sound\soundAC.bin
000B4402                            		even
000B4402                            SoundAD:	incbin	sound\soundAD.bin
000B4438                            		even
000B4438                            SoundAE:	incbin	sound\soundAE.bin
000B4482                            		even
000B4482                            SoundAF:	incbin	sound\soundAF.bin
000B44B0                            		even
000B44B0                            SoundB0:	incbin	sound\soundB0.bin
000B44E2                            		even
000B44E2                            SoundB1:	incbin	sound\soundB1.bin
000B450E                            		even
000B450E                            SoundB2:	incbin	sound\soundB2.bin
000B455E                            		even
000B455E                            SoundB3:	incbin	sound\soundB3.bin
000B45A8                            		even
000B45A8                            SoundB4:	include	sound\soundB4.asm
000B45A8                            SndB4_Bumper_Header:
000B45A8 =00000001                  smpsHeaderStartSong = 1
000B45A8 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000B45AA 01                         	smpsHeaderTempoSFX  $01
000B45AB 03                         	smpsHeaderChanSFX   $03
000B45AC                            
000B45BE                            
000B45BE                            ; FM5 Data
000B45BE                            SndB4_Bumper_FM5:
000B45C0 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000B45C3                            
000B45C3                            ; FM4 Data
000B45C3                            SndB4_Bumper_FM4:
000B45C3 F2                         	smpsStop
000B45C4                            
000B45C4                            SndB4_Bumper_Jump00:
000B45C4 A020                       	dc.b	nG2, $20
000B45C6 F2                         	smpsStop
000B45C7                            
000B45C7                            ; FM3 Data
000B45C7                            SndB4_Bumper_FM3:
000B45C7 F2                         	smpsStop
000B45C8                            
000B45C8                            SndB4_Bumper_Voices:
000B45C8                            ;	Voice $00
000B45C8                            ;	$32
000B45C8                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000B45C8                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000B45C8                            	smpsVcAlgorithm     $02
000B45C8                            	smpsVcFeedback      $06
000B45C8                            	smpsVcUnusedBits    $00
000B45C8                            	smpsVcDetune        $07, $07, $02, $00
000B45C8                            	smpsVcCoarseFreq    $00, $00, $00, $04
000B45C8                            	smpsVcRateScale     $00, $00, $00, $00
000B45C8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B45C8                            	smpsVcAmpMod        $00, $00, $00, $00
000B45C8                            	smpsVcDecayRate1    $08, $00, $00, $09
000B45C8                            	smpsVcDecayRate2    $0B, $00, $00, $09
000B45C8                            	smpsVcDecayLevel    $00, $00, $00, $00
000B45C8                            	smpsVcReleaseRate   $0F, $00, $00, $00
000B45C8 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B45C8 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B45E2 00                         		even
000B45E2                            SoundB5:	incbin	sound\soundB5.bin
000B4600 00                         		even
000B4600                            SoundB6:	incbin	sound\soundB6.bin
000B461E                            		even
000B461E                            SoundB7:	incbin	sound\soundB7.bin
000B465A                            		even
000B465A                            SoundB8:	incbin	sound\soundB8.bin
000B4678                            		even
000B4678                            SoundB9:	incbin	sound\soundB9.bin
000B46DC                            		even
000B46DC                            SoundBA:	incbin	sound\soundBA.bin
000B4740                            		even
000B4740                            SoundBB:	incbin	sound\soundBB.bin
000B476C                            		even
000B476C                            SoundBC:	incbin	sound\soundBC.bin
000B47AE                            		even
000B47AE                            SoundBD:	incbin	sound\soundBD.bin
000B4802                            		even
000B4802                            SoundBE:	incbin	sound\soundBE.bin
000B483C                            		even
000B483C                            SoundBF:	incbin	sound\soundBF.bin
000B48AE                            		even
000B48AE                            SoundC0:	incbin	sound\soundC0.bin
000B48DC                            		even
000B48DC                            SoundC1:	incbin	sound\soundC1.bin
000B4936                            		even
000B4936                            SoundC2:	incbin	sound\soundC2.bin
000B4960                            		even
000B4960                            SoundC3:	incbin	sound\soundC3.bin
000B49DA                            		even
000B49DA                            SoundC4:	incbin	sound\soundC4.bin
000B4AD8                            		even
000B4AD8                            SoundC5:	incbin	sound\soundC5.bin
000B4B40                            		even
000B4B40                            SoundC6:	incbin	sound\soundC6.bin
000B4B82                            		even
000B4B82                            SoundC7:	incbin	sound\soundC7.bin
000B4BB0                            		even
000B4BB0                            SoundC8:	incbin	sound\soundC8.bin
000B4BC2                            		even
000B4BC2                            SoundC9:	incbin	sound\soundC9.bin
000B4BF0                            		even
000B4BF0                            SoundCA:	incbin	sound\soundCA.bin
000B4C1E                            		even
000B4C1E                            SoundCB:	incbin	sound\soundCB.bin
000B4C6A                            		even
000B4C6A                            SoundCC:	incbin	sound\C9.ssf
000B4C98                            		even
000B4C98                            SoundCD:	incbin	sound\soundCD.bin
000B4CC4                            		even
000B4CC4                            SoundCE:	incbin	sound\soundCE.bin
000B4CE2 00                         		even
000B4CE2                            SoundCF:	incbin	sound\soundCF.bin
000B4D1A                            		even
000B4D1A                            SoundD0:	incbin	sound\soundD0.bin
000B4D54                            		even
000B4D54                            SoundD1:	incbin	sound\MenuBIT.bin
000B4D62                            		even
000B4D62                            SoundD2:	incbin	sound\MenuAffirm.bin
000B4DCA 00                         		even
000B4DCA                            SegaPCM:	incbin	sound\segapcm.bin
000CEF20                            SegaPCM_end:
000CEF20                            	even
000CEF20                            
000CEF20                            IdiotPCM:	incbin	sound\youare.bin
000D8FF1                            IdiotPCM_end:
000D8FF2 00                         	even
000D8FF2                            GM_AntiTMSS:	include _inc\GM_AntiTMSS.asm
000D8FF2                            ;GM_AntiTMSS:
000D8FF2 4EB8 1C3E                  		jsr	ClearScreen
000D8FF6                            
000D8FF6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000D9000 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
000D9004 4EB8 1DBA                  		jsr	NemDec
000D9008 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000D9012 41F9 0006 F61A             		lea	(Nem_CreditText).l,a0	; load alphabet
000D9018 4EB8 1DBA                  		jsr	NemDec
000D901C 43F9 00FF 0000             		lea	($FF0000).l,a1
000D9022 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
000D9026 7000                       		moveq	#0,d0
000D9028 4EB8 2098                  		jsr	EniDec
000D902C 43F9 00FF 0000             		lea	($FF0000).l,a1
000D9032 203C 4000 0003             		move.l	#$40000003,d0
000D9038 7227                       		moveq	#$27,d1
000D903A 741B                       		moveq	#$1B,d2
000D903C 4EB8 1D9A                  		jsr	ShowVDPGraphics
000D9040 41FA 0000                  		lea	@pal(pc),a0
000D9044 43F8 FB80                  		lea	($FFFFFB80).w,a1
000D9048 701F                       		moveq	#$1F,d0
000D904A                            @palset:
000D904A 22D8                       		move.l	(a0)+,(a1)+
000D904C 51C8 FFFC                  		dbf	d0,@palset
000D9050                            
000D9050 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
000D9058 1E38 F600                  		move.b	($FFFFF600).w,d7	; save game mode
000D905C 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure it's not using title screen code
000D9062 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
000D9068 41F8 D080                  		lea	($FFFFD080).w,a0
000D906C 10BC 0001                  		move.b	#1,(a0)
000D9070 4EB9 0001 853C             		jsr	Obj8A
000D9076 11C7 F600                  		move.b	d7,($FFFFF600).w	; restore game mode
000D907A 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
000D9080 4EB9 0000 E83E             		jsr	BuildSprites
000D9086                            
000D9086 3038 F60C                  		move.w	($FFFFF60C).w,d0
000D908A 0000 0040                  		ori.b	#$40,d0
000D908E 0880 0003                  		bclr	#3,d0
000D9092 33C0 00C0 0004             		move.w	d0,($C00004).l
000D9098 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
000D909E 4EB8 3486                  		jsr	DelayProgram
000D90A2 303C 0086                  		move.w	#$86,d0			; play title screen music
000D90A6 4EB8 1D10                  		jsr	PlaySound
000D90AA                            
000D90AA 4EB8 26F6                  		jsr	Pal_FadeTo
000D90AE 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
000D90B4                            @mainloop:
000D90B4 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000D90BA 4EB8 3486                  		jsr	DelayProgram
000D90BE 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
000D90C2 66F0                       		bne.s	@mainloop
000D90C4 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
000D90C8 C038 F604                  		and.b	($FFFFF604).w,d0
000D90CC 67E6                       		beq.s	@mainloop
000D90CE 4E75                       		rts
000D90D0                            @nem:	incbin artnem\tmss.bin
000DAC60                            	even
000DAC60                            @eni:	incbin mapeni\tmss.bin
000DAD68                            	even
000DAD68                            @pal:	incbin pallet\tmss.bin
000DADE8                            	even
000DADE8                            	even
000DADE8                            
000DADE8                            Minecraft:	include	minecraft\code\main.asm
000DADE8                            ; Minecraft: Very Legacy Console Edition
000DADE8                            ; Main file
000DADE8                            
000DADE8                            ;	align	$20000
000DADE8                            	opt	l.
000DADE8                            	include	"minecraft\code\variables.asm"
000DADE8                            ; Minecraft: Very Legacy Console Edition
000DADE8                            ; Variable Definitions
000DADE8                            
000DADE8 =00000040                  MAP_HEIGHT	equ	64
000DADE8 =00000100                  MAP_WIDTH	equ	256
000DADE8                            
000DADE8                            		rsset	$FF0000
000DADE8 =00FF0000                  mcRAM		rs.b	0
000DADE8 =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000DADE8 =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000DADE8                            
000DADE8                            		rsset	$FFFF8000
000DADE8 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000DADE8 =FFFF8E80                  planeBuffer_End	rs.b	0
000DADE8 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000DADE8                            
000DADE8 =FFFF8E80                  scrollBuffer	rs.l	256
000DADE8                            
000DADE8 =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
000DADE8 =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
000DADE8 =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
000DADE8 =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
000DADE8                            
000DADE8 =FFFF9288                  vblankWait	rs.w	1
000DADE8 =FFFF928A                  cloudFrameCnt	rs.w	1
000DADE8 =FFFF928C                  cloudSkew	rs.l	36
000DADE8                            
000DADE8                            
000DADE8                            		rsset	__rs&$FFFFFF
000DADE8 =00FF931C                  mcRAM_End	rs.b	0
000DADE8                            
000DADE8                            ; VRAM Definitions
000DADE8 =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000DADE8                            
000DADE8                            		rsreset
000DADE8 =00000000                  vramEmptyTile	rs.b	TILE
000DADE8 =00000020                  vramTerrain	rs.b	255*TILE
000DADE8 =00002000                  vramBackground	rs.b	408*TILE
000DADE8                            
000DADE8 =0000C000                  VRAM_PLANE_A	equ	$C000
000DADE8 =0000D000                  VRAM_PLANE_W	equ	$D000
000DADE8 =0000E000                  VRAM_PLANE_B	equ	$E000
000DADE8                            
000DADE8 =0000F800                  VRAM_SPR_LIST	equ	$F800
000DADE8 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000DADE8 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000DADE8                            	include	"minecraft\code\macros.asm"
000DADE8                            ; =========================================================================================================================================================
000DADE8                            ; MegaDrive macros
000DADE8                            ; =========================================================================================================================================================
000DADE8                            clrRAM		macro	starta, enda
000DADE8                            		local	endaddr
000DADE8                            		if narg<2
000DADE8                            endaddr			EQUS	"\starta\_End"
000DADE8                            		else
000DADE8                            endaddr			EQUS	"\enda"
000DADE8                            		endif
000DADE8                            		moveq	#0,d0
000DADE8                            		if ((\starta)&$8000)=0
000DADE8                            			lea	\starta,a1
000DADE8                            		else
000DADE8                            			lea	(\starta).w,a1
000DADE8                            		endif
000DADE8                            		if (\starta)&1
000DADE8                            			move.b	d0,(a1)+
000DADE8                            		endif
000DADE8                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000DADE8                            .Clear\@:	move.l	d0,(a1)+
000DADE8                            		dbf	d1,.Clear\@
000DADE8                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000DADE8                            			move.w	d0,(a1)+
000DADE8                            		endif
000DADE8                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000DADE8                            			move.b	d0,(a1)+
000DADE8                            		endif
000DADE8                            		endm
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; Disable interrupts
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; ARGUMENTS:
000DADE8                            ;	Nothing
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; RETURNS:
000DADE8                            ;	Nothing
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            intsOff		macros
000DADE8                            		ori	#$700,sr
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; Enable interrupts
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; ARGUMENTS:
000DADE8                            ;	Nothing
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; RETURNS:
000DADE8                            ;	Nothing
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            intsOn		macros
000DADE8                            		andi	#$F8FF,sr
000DADE8                            
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; VDP command instruction
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; ARGUMENTS:
000DADE8                            ;	addr	- Address in VDP memory
000DADE8                            ;	type	- Type of VDP memory
000DADE8                            ;	rwd	- VDP command
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; RETURNS:
000DADE8                            ;	Nothing
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8 =00000021                  VRAM		EQU	%100001		; VRAM
000DADE8 =0000002B                  CRAM		EQU	%101011		; CRAM
000DADE8 =00000025                  VSRAM		EQU	%100101		; VSRAM
000DADE8 =0000000C                  READ		EQU	%001100		; VDP read
000DADE8 =00000007                  WRITE		EQU	%000111		; VDP write
000DADE8 =00000027                  DMA		EQU	%100111		; VDP DMA
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000DADE8                            		if narg=5
000DADE8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000DADE8                            		elseif narg>=6
000DADE8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000DADE8                            		else
000DADE8                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000DADE8                            		endif
000DADE8                            		endm
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; VDP DMA from 68000 memory to VDP memory
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; ARGUMENTS:
000DADE8                            ;	src	- Source address in 68000 memory
000DADE8                            ;	dest	- Destination address in VDP memory
000DADE8                            ;	len	- Length of data in bytes
000DADE8                            ;	type	- Type of VDP memory
000DADE8                            ;	a6.l	- VDP control port
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; RETURNS:
000DADE8                            ;	Nothing
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            dma68k		macro	src, dest, len, type
000DADE8                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000DADE8                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000DADE8                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000DADE8                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000DADE8                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000DADE8                            		move.w	(sp)+,(a6)
000DADE8                            		endm
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DADE8                            
000DADE8                            MC_Init:
000DADE8 007C 0700                  		intsOff						; disable CPU interrupts
000DADEC 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000DADF4                            
000DADF4 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000DADFA 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000DADFE                            
000DADFE 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000DAE02 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000DAE06 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000DAE0A 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000DAE0E                            		
000DAE0E 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
000DAE12 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000DAE16 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000DAE1A 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000DAE1E                            
000DAE30 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000DAE34                            
000DAE34                            .waitVBlank:	
000DAE34 44D6                       		move.w	(a6),ccr				; is v-blank active?
000DAE36 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000DAE38                            
000DAE6C 6100 0000                  		bsr.w	MC_LoadBackground
000DAE70 6100 0000                  		bsr.w	MC_LoadWorld
000DAE74                            
000DAE74 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000DAE78 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000DAE7C 027C F8FF                  		intsOn						; enable CPU interrupts
000DAE80                            
000DAE80 4278 928A                  		clr.w	(cloudFrameCnt).w		
000DAE84                            
000DAE84                            .gameLoop:
000DAE84 50F8 9288                  		st.b	(vblankWait).w
000DAE88 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
000DAE8C 6100                       		bsr.s	MC_RenderBlocks
000DAE8E                            
000DAE8E                            .spin:
000DAE8E 4A38 9288                  		tst.b	(vblankWait).w
000DAE92 67F0                       		beq.s	.gameLoop
000DAE94 60F8                       		bra.s	.spin
000DAE96                            ; ---------------------------------------------------------------------------
000DAE96                            
000DAE96                            ; ===========================================================================
000DAE96                            ; ---------------------------------------------------------------------------
000DAE96                            ; Render the Visible Portion of the World to the Screen
000DAE96                            ; ---------------------------------------------------------------------------
000DAE96                            MC_RenderBlocks:
000DAE96 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000DAE9A E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000DAE9C 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000DAEA0                            
000DAEA0 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000DAEA4 EB49                       		lsl.w	#5,d1			; Make into row offset
000DAEA6 0241 3F00                  		andi.w	#$3F00,d1		; ^
000DAEAA                            
000DAEAA 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000DAEB0 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000DAEB6 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000DAEBA 7600                       		moveq	#0,d3			; Clear d3
000DAEBC 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000DAEBE                            
000DAEBE                            .renderScreen:
000DAEBE 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000DAEC0 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000DAEC2 1400                       		move.b	d0,d2			; ^
000DAEC4                            
000DAEC4                            .renderRow:
000DAEC4 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000DAEC8 6700                       		beq.s	.renderWall
000DAECA                            
000DAECA 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000DAECE D643                       		add.w	d3,d3				; Turn tile ID into index
000DAED0 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
000DAED4 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000DAED6                            		
000DAED6 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000DAED8 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000DAEDC 6000                       		bra.s	.endRenderRow		; Branch
000DAEDE                            
000DAEDE                            .renderWall:
000DAEDE 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
000DAEE2 D643                       		add.w	d3,d3					; Turn tile ID into index
000DAEE4 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000DAEE8                            
000DAEE8 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000DAEEA 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000DAEEE                            
000DAEEE                            .endRenderRow:
000DAEEE D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000DAEF2 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000DAEF6 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000DAEFA 6200                       		bhi.s	.inBounds		; If so, branch
000DAEFC 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000DAF00                            
000DAF00                            .inBounds:	
000DAF00 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000DAF04 4E75                       		rts
000DAF06                            
000DAF06                            ; ---------------------------------------------------------------------------
000DAF06                            block_entry	macro	tileID, palLine, priority
000DAF06                            	if (narg<3)
000DAF06                            		dc.w	(palLine<<13)|tileID
000DAF06                            	else
000DAF06                            		dc.w	$8000|(palLine<<13)|tileID
000DAF06                            	endif
000DAF06                            		endm
000DAF06                            
000DAF06                            .renderProperties:
000DAF46                            
000DAF64                            ; ---------------------------------------------------------------------------
000DAF64                            
000DAF64                            ; ===========================================================================
000DAF64                            ; ---------------------------------------------------------------------------
000DAF64                            ; Update Foreground and Background Scrolling
000DAF64                            ; ---------------------------------------------------------------------------
000DAF64 =00000500                  CLOUD_SCROLL_RATE	equ	1280
000DAF64                            
000DAF64                            MC_UpdateScrollBuffer:
000DAF64 41F8 8E80                  		lea	(scrollBuffer).w,a0
000DAF68 7E13                       		moveq	#20-1,d7
000DAF6A 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
000DAF6E 0240 0007                  		andi.w	#7,d0					; ^
000DAF72 4440                       		neg.w	d0					; ^
000DAF74 4840                       		swap	d0					; ^
000DAF76 4240                       		clr.w	d0
000DAF78                            
000DAF78                            .blankBGSegment:
000DAF78 20C0                       		move.l	d0,(a0)+
000DAF7A 51CF FFFC                  		dbf	d7,.blankBGSegment
000DAF7E                            
000DAF7E 43F8 928C                  		lea	(cloudSkew).w,a1
000DAF82 7200                       		moveq	#0,d1
000DAF84 7E23                       		moveq	#36-1,d7
000DAF86                            
000DAF86 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
000DAF8A 6A00                       		bpl.s	.cloudBGSegment
000DAF8C                            	
000DAF8C 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
000DAF92                            
000DAF92                            .resetClouds:
000DAF92 20C0                       		move.l	d0,(a0)+
000DAF94 4299                       		clr.l	(a1)+
000DAF96 51CF FFFA                  		dbf	d7,.resetClouds
000DAF9A 6000                       		bra.s	.return
000DAF9C                            
000DAF9C                            .cloudBGSegment:
000DAF9C 2411                       		move.l	(a1),d2
000DAF9E D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
000DAFA2 22C2                       		move.l	d2,(a1)+
000DAFA4                            
000DAFA4 4842                       		swap	d2
000DAFA6 3002                       		move.w	d2,d0
000DAFA8 4440                       		neg.w	d0
000DAFAA 20C0                       		move.l	d0,(a0)+
000DAFAC                            		
000DAFAC 5841                       		addq.w	#4,d1
000DAFAE 51CF FFEC                  		dbf	d7,.cloudBGSegment
000DAFB2                            
000DAFB2                            .return:
000DAFB2 4E75                       		rts
000DAFB4                            ; ---------------------------------------------------------------------------
000DAFB4                            .cloudSkewFactor:
000DAFB4 =00000080                  	.i: = 128
000DAFB4                            
000DAFB4                            	rept	36
000DAFB4                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
000DAFB4                            	.i: = .i-2
000DAFB4 0000 1999 0000 1933 0000+  	endr
000DB044                            
000DB044                            ; ===========================================================================
000DB044                            ; ---------------------------------------------------------------------------
000DB044                            ; Clear The Screen
000DB044                            ; ---------------------------------------------------------------------------
000DB044                            MC_ClearScreen:
000DB044 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000DB048                            
000DB048 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000DB04E 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DB052 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000DB058 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DB05E                            
000DB05E 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DB060 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000DB062                            
000DB062 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000DB068 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DB06C 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000DB072 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DB078                            
000DB078 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DB07A 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000DB07C                            
000DB07C 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000DB082 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DB086 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000DB08C 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DB092                            
000DB092 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DB094 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000DB096                            
000DB096 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000DB09A 4E75                       		rts						; return
000DB09C                            ; ---------------------------------------------------------------------------
000DB09C                            
000DB09C                            ; ===========================================================================
000DB09C                            ; ---------------------------------------------------------------------------
000DB09C                            ; Load the Background
000DB09C                            ; ---------------------------------------------------------------------------
000DB09C                            MC_LoadBackground:
000DB0B6                            
000DB0BC 41F9 0000 0000             		lea	MC_BGMap,a0
000DB0C2 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000DB0C6                            
000DB0C6                            .loop:
000DB0C6 3018                       		move.w	(a0)+,d0
000DB0C8 6700                       		beq.s	.empty
000DB0CA 0640 0100                  		add.w	#(vramBackground>>5),d0
000DB0CE 0040 6000                  		ori.w	#(3<<13),d0
000DB0D2                            
000DB0D2                            .empty:
000DB0D2 3D40 FFFC                  		move.w	d0,-4(a6)
000DB0D6 51CF FFEE                  		dbf	d7,.loop
000DB0DA 4E75                       		rts						; return
000DB0DC                            ; ---------------------------------------------------------------------------
000DB0DC                            
000DB0DC                            ; ===========================================================================
000DB0DC                            ; ---------------------------------------------------------------------------
000DB0DC                            ; Load the World
000DB0DC                            ; ---------------------------------------------------------------------------
000DB0DC                            MC_LoadWorld:
000DB0DC 41F9 0000 0000             		lea	MC_TestMap,a0
000DB0E2 43F9 00FF 4000             		lea	mapWallBlocks,a1
000DB0E8 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000DB0EC                            
000DB0EC                            .loadWalls:
000DB0EC 22D8                       		move.l	(a0)+,(a1)+
000DB0EE 51CF FFFC                  		dbf	d7,.loadWalls
000DB0F2                            
000DB0F2 41F9 0000 0000             		lea	MC_TestMap,a0
000DB0F8 43F9 00FF 0000             		lea	mapCollBlocks,a1
000DB0FE 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000DB102                            
000DB102                            .loadBlocks:
000DB102 22D8                       		move.l	(a0)+,(a1)+
000DB104 51CF FFFC                  		dbf	d7,.loadBlocks
000DB108 4E75                       		rts						; return
000DB10A                            ; ---------------------------------------------------------------------------
000DB10A                            
000DB10A                            ; ===========================================================================
000DB10A                            ; ---------------------------------------------------------------------------
000DB10A                            ; VBlank Interrupt
000DB10A                            ; ---------------------------------------------------------------------------
000DB10A                            MC_VInt:
000DB13E                            
000DB13E                            ;		move.w	(camXPosFG).w,d0			; update scrolling
000DB13E                            ;		andi.w	#7,d0					; ^
000DB13E                            ;		neg.w	d0					; ^
000DB13E                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
000DB13E                            ;		move.w	d0,-4(a6)				; ^
000DB13E                            
000DB13E                            ;		addq.w	#1,(camXPosFG).w			
000DB13E 51F8 9288                  		sf.b	(vblankWait).w
000DB142 4E73                       		rte						; return
000DB144                            ; ---------------------------------------------------------------------------
000DB144                            
000DB144                            ; ---------------------------------------------------------------------------
000DB144                            MC_Palette:
000DB144 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000DB164 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000DB184 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000DB1A4 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000DB1C4                            ; ---------------------------------------------------------------------------
000DB1C4                            MC_Terrain:
000DB1C4                            	incbin	"minecraft\assets\bin\terrain.bin"
000DB644                            MC_Terrain_End:
000DB644                            	even
000DB644                            ; ---------------------------------------------------------------------------
000DB644                            MC_BGArt:
000DB644                            	incbin	"minecraft\assets\bin\bgArt.bin"
000DE944                            MC_BGArt_End:
000DE944                            	even
000DE944                            ; ---------------------------------------------------------------------------
000DE944                            MC_BGMap:
000DE944                            	incbin	"minecraft\assets\bin\bgMap.bin"
000DF944                            MC_BGMap_End:
000DF944                            	even
000DF944                            ; ---------------------------------------------------------------------------
000DF944                            MC_TestMap:
000DF944 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000DFA44 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000DFB44 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000DFC44 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000DFD44 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000DFE44 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000DFF44 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000E0044 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000E0144 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000E0244 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000E0344 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000E0444 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000E0544 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000E0644                            	
000E0644                            ;	dcb.b	32,$01	; Row 0F
000E0644                            ;	dcb.b	32,$02	; Row 0F
000E0644                            ;	dcb.b	32,$03	; Row 0F
000E0644                            ;	dcb.b	32,$04	; Row 0F
000E0644                            ;	dcb.b	32,$05	; Row 0F
000E0644                            ;	dcb.b	32,$06	; Row 0F
000E0644                            ;	dcb.b	32,$07	; Row 0F
000E0644                            ;	dcb.b	32,$08	; Row 0F
000E0644                            
000E0644                            ;	dcb.b	256,$03	; Row 10
000E0644                            ;	dcb.b	256,$02	; Row 11
000E0644                            ;	dcb.b	256,$02	; Row 12
000E0644                            ;	dcb.b	256,$02	; Row 13
000E0644                            ;	dcb.b	256,$01	; Row 14
000E0644                            ;	dcb.b	256,$01	; Row 15
000E0644                            ;	dcb.b	256,$01	; Row 16
000E0644                            ;	dcb.b	256,$01	; Row 17
000E0644                            ;	dcb.b	256,$01	; Row 19
000E0644                            ;	dcb.b	256,$01	; Row 1A
000E0644                            ;	dcb.b	256,$01	; Row 1B
000E0644                            ;	dcb.b	256,$01	; Row 1C
000E0644                            ;	dcb.b	256,$01	; Row 1E
000E0644                            ;	dcb.b	256,$01	; Row 1F
000E0644                            MC_TestMap_End:
000E0644                            MC_TestMap_End:
000E0644                            		
000E0644                            		include beebush\_BEEBUSH.68k
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; I'm Glenn Quagmire, and this is Code Bush.
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                                    include "beebush/Mega Drive.inc"
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; Basic system memory location equates
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644 =00000000                  CARTRIDGE       EQU     $0                    
000E0644 =00080000                  CARTRIDGEE      EQU     $80000
000E0644 =00080000                  CARTRIDGESZ     EQU     CARTRIDGEE-CARTRIDGE
000E0644                            
000E0644 =00FF0000                  WORKRAM         EQU     $FF0000
000E0644 =01000000                  WORKRAME        EQU     $1000000
000E0644 =00010000                  WORKRAMSZ       EQU     WORKRAME-WORKRAM
000E0644                            
000E0644 =00A00000                  Z80RAM          EQU     $A00000
000E0644 =00A02000                  Z80RAME		EQU	$A02000
000E0644 =00002000                  Z80RAMSZ	EQU	Z80RAME-Z80RAM
000E0644 =00A11100                  Z80BUS		EQU	$A11100
000E0644 =00A11200                  Z80RES	        EQU	$A11200
000E0644                            
000E0644 =00080000                  CARTRAM         EQU     CARTRIDGEE	
000E0644                            	
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; System and VDP registers 
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            ; I/O
000E0644                            
000E0644                            ; Word
000E0644 =00A10000                  VERSION_	EQU	$A10000		; Hardware version
000E0644 =00A10002                  IODATA1_	EQU	$A10002		; Pad 1 Data
000E0644 =00A10004                  IODATA2_	EQU	$A10004         ; Pad 2 Data
000E0644 =00A10006                  IODATA3_	EQU	$A10006         ; EXT Data
000E0644 =00A10008                  IOCTRL1_	EQU	$A10008         ; Pad 1 Ctrl
000E0644 =00A1000A                  IOCTRL2_	EQU	$A1000A         ; Pad 2 Ctrl
000E0644 =00A1000C                  IOCTRL3_	EQU	$A1000C         ; EXT Ctrl
000E0644                            
000E0644                            ; Byte
000E0644 =00A10001                  VERSION         EQU     VERSION_+1
000E0644 =00A10003                  IODATA1         EQU     IODATA1_+1
000E0644 =00A10005                  IODATA2         EQU     IODATA2_+1
000E0644 =00A10007                  IODATA3         EQU     IODATA3_+1
000E0644 =00A10009                  IOCTRL1         EQU     IOCTRL1_+1
000E0644 =00A1000B                  IOCTRL2         EQU     IOCTRL2_+1
000E0644 =00A1000D                  IOCTRL3         EQU     IOCTRL3_+1
000E0644                            
000E0644                            ; Sound
000E0644 =00A04000                  YMADDR0		EQU	$A04000		; YM2612 address port 0
000E0644 =00A04001                  YMDATA0		EQU	$A04001		; YM2612 data port 0
000E0644 =00A04002                  YMADDR1		EQU	$A04002		; YM2612 address port 1
000E0644 =00A04003                  YMDATA1		EQU	$A04003		; YM2612 data port 1
000E0644 =00C00011                  PSGCTRL		EQU	$C00011		; PSG control port
000E0644                            
000E0644                            ; VDP
000E0644 =00C00000                  VDPDATA		EQU	$C00000		; VDP data port
000E0644 =00C00004                  VDPCTRL		EQU	$C00004		; VDP control port
000E0644 =00C00008                  VDPHVCNT	EQU	$C00008		; VDP H/V counter
000E0644 =00C0001C                  VDPDEBUG	EQU	$C0001C		; VDP debug register
000E0644                            
000E0644                            ; TMSS
000E0644 =00A14000                  TMSSSEGA	EQU	$A14000		; TMSS "SEGA" register
000E0644 =00A14100                  TMSSMODE	EQU	$A14100		; TMSS bus mode
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; VDP operation codes
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644 =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
000E0644 =C0000000                  CRAMWRITE	EQU	$C0000000		; CRAM write
000E0644 =40000010                  VSRAMWRITE	EQU	$40000010		; VSRAM write
000E0644 =00000000                  VRAMREAD	EQU	$00000000		; VRAM read
000E0644 =00000020                  CRAMREAD	EQU	$00000020		; CRAM read
000E0644 =00000010                  VSRAMREAD	EQU	$00000010		; VSRAM read
000E0644 =40000080                  VRAMDMA		EQU	$40000080		; VRAM DMA
000E0644 =C0000080                  CRAMDMA		EQU	$C0000080		; CRAM DMA
000E0644 =40000090                  VSRAMDMA	EQU	$40000090		; VSRAM DMA
000E0644 =000000C0                  VRAMCOPY	EQU	$000000C0		; VRAM DMA copy
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; VDP status codes
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644 =00000000                  PAL_CLOCK:          EQU 0
000E0644 =00000001                  DMA_RUNNING:        EQU 1 
000E0644 =00000002                  HBLANKING:       	EQU 2
000E0644 =00000003                  VBLANKING:       	EQU 3
000E0644 =00000004                  ODDFRAME:        	EQU 4
000E0644 =00000005                  SPRITE_COLLIDE:		EQU 5
000E0644 =00000006                  SPRITE_OVERFLOW: 	EQU 6
000E0644 =00000007                  VBLANK_PENDING:  	EQU 7
000E0644 =00000008                  FIFO_FULL:       	EQU 8
000E0644 =00000009                  FIFO_EMPTY:      	EQU 9
000E0644                            
000E0644                            
000E0644                            
000E0644                                    include "beebush/Macros.inc"
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; General purpose macros for defining pointer data
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            dclww	macro	long, word1, word2
000E0644                            	dc.l 	\long
000E0644                            	dc.w 	\word1
000E0644                            	dc.w 	\word2
000E0644                            	endm
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; Stop the Z80
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            Z80STOP macro
000E0644                            	move.w	#$100,Z80BUS			; Request Z80 bus access
000E0644                            .Wait\@:
000E0644                            	btst	#0,Z80BUS			; Was the request acknowledged?
000E0644                            	bne.s	.Wait\@				; If not, wait
000E0644                            	endm
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; Stop the Z80
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            Z80START macro
000E0644                            	move.w	#0,Z80BUS
000E0644                            	endm
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; VDP command set
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            VDPCMD macro ins, addr, type, rwd, end, end2
000E0644                            	local	cmd
000E0644                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
000E0644                            	if narg=5
000E0644                            		\ins	#\#cmd,\end
000E0644                            	elseif narg>=6
000E0644                            		\ins	#(\#cmd)\end,\end2
000E0644                            	else
000E0644                            		\ins	cmd
000E0644                            	endif
000E0644                            	endm
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; Wait for DMA
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            DMAWAIT macro ctrl
000E0644                            .Wait\@:
000E0644                            	if narg>0
000E0644                            		btst	#1,1(\ctrl)		; Is DMA active?
000E0644                            	else
000E0644                            		move.w	VDPCTRL,d0		; Is DMA active?
000E0644                            		btst	#1,d0
000E0644                            	endif
000E0644                            	bne.s	.Wait\@				; If so, wait
000E0644                            	endm
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; VDP DMA from 68000 memory to VDP memory
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; PARAMETERS:
000E0644                            ;	src  - Source address in 68000 memory
000E0644                            ;	dest - Destination address in VDP memory
000E0644                            ;	len  - Length of data in bytes
000E0644                            ;	type - Type of VDP memory
000E0644                            ;	port - Address register for the VDP port
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; kys
000E0644 =FFFFF644                  vdpIntBuffer = $FFFFF644
000E0644                            
000E0644                            VDPDMA  macro src, dest, len, type, port
000E0644                            	; DMA data
000E0644                            	lea	VDPCTRL,\port
000E0644                            	move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(\port)
000E0644                            	move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(\port)
000E0644                            	move.w	#$9700|(((\src)>>17)&$7F),(\port)
000E0644                            	VDPCMD	move.w,\dest,\type,DMA,>>16,(\port)
000E0644                            	VDPCMD	move.w,\dest,\type,DMA,&$FFFF,vdpIntBuffer.w
000E0644                            	move.w	vdpIntBuffer.w,(\port)
000E0644                            	endm
000E0644                            
000E0644                            ; -------------------------------------------------------------------------
000E0644                            ; VDP DMA fill VRAM with byte
000E0644                            ; -------------------------------------------------------------------------
000E0644                            ; PARAMETERS:
000E0644                            ;	addr - Address in VRAM
000E0644                            ;	len  - Length of fill in bytes
000E0644                            ;	byte - Byte to fill VRAM with
000E0644                            ;	inc  - VDP autoincrement value
000E0644                            ;	port - Control port address register
000E0644                            ; -------------------------------------------------------------------------
000E0644                            
000E0644                            VDPFILL macro addr, len, byte, inc, port
000E0644                            	; DMA fill
000E0644                            	lea	VDPCTRL,\port
000E0644                            	move.w	#$8F00+\inc,(\port)
000E0644                            	move.l	#$93009400|((((\len)-1)&$FF00)>>8)|((((\len)-1)&$FF)<<16),(\port)
000E0644                            	move.w	#$9780,(\port)
000E0644                            	VDPCMD	move.l,\addr,VRAM,DMA,(\port)
000E0644                            	move.w	#(\byte)<<8,VDPDATA
000E0644                            	DMAWAIT	\port
000E0644                            	endm
000E0644                            
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            ; Macro to create ids from objects
000E0644                            ; ---------------------------------------------------------------------------
000E0644                            
000E0644                            OBJDEF      macro   addr, id
000E0644                                    dc.l    \addr
000E0644                            \id     rs.b    1
000E0644                                    endm
000E0644                                    endm
000E0644                            
000E0644                                    opt     l.
000E0644 =FFFFCC00                  hscroll =       $FFFFCC00
000E0644 =FFFFF800                  vdpSprites =    $FFFFF800
000E0644 =FFFFFB00                  palette =       $FFFFFB00
000E0644 =FFFFFE04                  frameCntr =     $FFFFFE04
000E0644                                    rsset   $FFFFF600
000E0644                            
000E0644 =FFFFF600                  gamemode:               rs.b 1  
000E0644 =FFFFF601                  submode                 rs.b 1
000E0644 =FFFFF602                  joypadMirr:             rs.b 1    
000E0644 =FFFFF603                  joypadPressMirr:        rs.b 1  
000E0644 =FFFFF604                  joypad:                 rs.b 1    
000E0644 =FFFFF605                  joypadPress:            rs.b 1  
000E0644                                                    rs.b 2  
000E0644 =FFFFF608                  distance:               rs.b 4
000E0644 =FFFFF60C                  displayMode:            rs.b 2    
000E0644                                                    rs.b 6
000E0644 =FFFFF614                  genericTimer:           rs.b 2    
000E0644 =FFFFF616                  mainAPosY:              rs.b 2    
000E0644 =FFFFF618                  mainBPosY:              rs.b 2    
000E0644 =FFFFF61A                  mainAPosX:              rs.b 2    
000E0644 =FFFFF61C                  mainBPosX:              rs.b 2    
000E0644 =FFFFF61E                  mainZPosY:              rs.b 2    
000E0644 =FFFFF620                  mainZPosX:              rs.b 2    
000E0644 =FFFFF622                  mainCPosX:              rs.b 2    
000E0644 =FFFFF624                  mainCPosY:              rs.b 2    
000E0644 =FFFFF626                  palFadeArgs:            rs.b 0
000E0644 =FFFFF626                  palFadeOff:             rs.b 1    
000E0644 =FFFFF627                  palFadeSize:            rs.b 1    
000E0644 =FFFFF628                  vblankUnk1:             rs.b 1    
000E0644 =FFFFF629                  vblankUnk2:             rs.b 1    
000E0644 =FFFFF62A                  vblankCmd:              rs.b 1   
000E0644                                    rsset   $FFFFF700
000E0644 =FFFFF700                  cameraAPosX:            rs.b 4                  
000E0644 =FFFFF704                  cameraAPosY:            rs.b 4                  
000E0644 =FFFFF708                  cameraBPosX:            rs.b 4                  
000E0644 =FFFFF70C                  cameraBPosY:            rs.b 4                  
000E0644 =FFFFF710                  cameraCPosX:            rs.b 4                  
000E0644 =FFFFF714                  cameraCPosY:            rs.b 4                  
000E0644 =FFFFF718                  cameraZPosX:            rs.b 4                  
000E0644 =FFFFF71C                  cameraZPosY:            rs.b 4  
000E0644                            
000E0644 =FFFFD000                  OBJECTRAM               EQU $FFFFD000 
000E0644 =00000040                  OBJSZ                   EQU 64
000E0644                            OBJECTRAMSZ             EQU OBJECTRAME-OBJECTRAM    
000E0644                            
000E0644                                    rsset           $FFFFD000 
000E0644 =FFFFD000                  objSlot00:      rs.b    OBJSZ
000E0644 =FFFFD040                  objSlot01:      rs.b    OBJSZ
000E0644 =FFFFD080                  objSlot02:      rs.b    OBJSZ
000E0644 =FFFFD0C0                  objSlot03:      rs.b    OBJSZ
000E0644 =FFFFD100                  objSlot04:      rs.b    OBJSZ
000E0644 =FFFFD140                  objSlot05:      rs.b    OBJSZ
000E0644 =FFFFD180                  objSlot06:      rs.b    OBJSZ
000E0644 =FFFFD1C0                  objSlot07:      rs.b    OBJSZ  
000E0644 =FFFFD200                  objSlot08:      rs.b    OBJSZ  
000E0644 =FFFFD240                  objSlot09:      rs.b    OBJSZ  
000E0644 =FFFFD280                  objSlot0A:      rs.b    OBJSZ  
000E0644 =FFFFD2C0                  objSlot0B:      rs.b    OBJSZ  
000E0644 =FFFFD300                  objSlot0C:      rs.b    OBJSZ
000E0644 =FFFFD340                  objSlot0D:      rs.b    OBJSZ
000E0644 =FFFFD380                  objSlot0E:      rs.b    OBJSZ
000E0644 =FFFFD3C0                  objSlot0F:      rs.b    OBJSZ
000E0644 =FFFFD400                  objSlot10:      rs.b    OBJSZ  
000E0644 =FFFFD440                  objSlot11:      rs.b    OBJSZ
000E0644 =FFFFD480                  objSlot12:      rs.b    OBJSZ
000E0644 =FFFFD4C0                  objSlot13:      rs.b    OBJSZ
000E0644 =FFFFD500                  objSlot14:      rs.b    OBJSZ  
000E0644 =FFFFD540                  objSlot15:      rs.b    OBJSZ
000E0644 =FFFFD580                  objSlot16:      rs.b    OBJSZ
000E0644 =FFFFD5C0                  objSlot17:      rs.b    OBJSZ
000E0644 =FFFFD600                  objSlot18:      rs.b    OBJSZ  
000E0644 =FFFFD640                  objSlot19:      rs.b    OBJSZ
000E0644 =FFFFD680                  objSlot1A:      rs.b    OBJSZ
000E0644 =FFFFD6C0                  objSlot1B:      rs.b    OBJSZ
000E0644 =FFFFD700                  objSlot1C:      rs.b    OBJSZ
000E0644 =FFFFD740                  objSlot1D:      rs.b    OBJSZ
000E0644 =FFFFD780                  objSlot1E:      rs.b    OBJSZ
000E0644 =FFFFD7C0                  objSlot1F:      rs.b    OBJSZ
000E0644 =FFFFD800                  objsAlloc:              rs.b    OBJSZ*96
000E0644                            OBJECTRAME:
000E0644                            
000E0644                            GM_BEEBUSH:  
000E0644 1038 F601                        	move.b  submode.w,d0
000E0648 0240 001C                          andi.w  #$1C,d0
000E064C 4EBB 0000                          jsr     .Index(pc,d0.w)
000E0650 4E75                               rts
000E0652                            
000E0652                            ; ---------------------------------------------------------------------------
000E0652                            
000E0652 =00000000                  SMNO_BEEBUSH_INIT       = 0*4   ; Init 
000E0652 =00000004                  SMNO_BEEBUSH_INTRO      = 1*4   ; Intro seq.
000E0652 =00000008                  SMNO_BEEBUSH_STATIC     = 2*4   ; Static scr.
000E0652 =0000000C                  SMNO_BEEBUSH_INITMAIN   = 3*4   ; Main Init
000E0652 =00000010                  SMNO_BEEBUSH_MAIN       = 4*4   ; Main game
000E0652                            
000E0652                            .Index:      
000E0652 6000 0000                          bra.w   BEEBUSH_INIT
000E0656 6000 0000                          bra.w   BEEBUSH_INTRO
000E065A 6000 0000                          bra.w   BEEBUSH_STATIC
000E065E 6000 0000                          bra.w   BEEBUSH_INITMAIN
000E0662 6000 0000                          bra.w   BEEBUSH_MAIN
000E0666                            .Null:
000E0666 4E75                               rts 
000E0668                            
000E0668                            ; ---------------------------------------------------------------------------
000E0668                            ; Initialization
000E0668                            ; ---------------------------------------------------------------------------
000E0668                            
000E0668                            BEEBUSH_INIT:   
000E0668 46FC 2700                  	move    #$2700,sr  		; interrupt disable               
000E066C 4EB8 1F58                          jsr     ClearArtListQueue	; clr art lists, we're not using them
000E0670 4EB8 27A0                          jsr     PalFadeOut		; fade palette out
000E0674 4EB8 1C3E                          jsr     InitScreen		
000E0678 4DF9 00C0 0004                     lea     VDPCTRL,a6		; init regs
000E067E 3038 F60C                          move.w  displayMode.w,d0	; Get mode reg. 1 info
000E0682 0200 00BF                          andi.b  #%10111111,d0           ; Mask display enable bit
000E0686 33C0 00C0 0004                     move.w  d0,VDPCTRL              ; Set mode reg. 1 
000E068C 3CBC 8004                          move.w  #$8000+%00000100,(a6)
000E0690 3CBC 8230                          move.w  #$8230,(a6)
000E0694 3CBC 8407                          move.w  #$8407,(a6)
000E0698 3CBC 857C                          move.w  #$857C,(a6)
000E069C 3CBC 8720                          move.w  #$8720,(a6)
000E06A0 3CBC 8B00                          move.w  #$8B00+%00000000,(a6)
000E06A4 43F8 D000                          lea     OBJECTRAM.w,a1
000E06A8 7000                               moveq   #0,d0
000E06AA 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000E06AE                            
000E06AE                            .ClearObjects:                         
000E06AE 22C0                               move.l  d0,(a1)+
000E06B0 51C9 FFFC                          dbf     d1,.ClearObjects
000E06B4 43F8 F700                          lea     cameraAPosX.w,a1
000E06B8 7000                               moveq   #0,d0
000E06BA 323C 0007                          move.w  #$8-1,d1
000E06BE                            
000E06BE                            .ClearCams:                            
000E06BE 22C0                               move.l  d0,(a1)+
000E06C0 51C9 FFFC                          dbf     d1,.ClearCams
000E06C4                            
000E06C4 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E06CA 4EB8 3486                          jsr     VSync
000E06CE                            
000E06CE 11FC 0000 D000                     move.b  #BBUSH_OBJNO_BODY,objSlot00.w        
000E06D4 11FC 0000 D040                     move.b  #BBUSH_OBJNO_HEAD,objSlot01.w      
000E06DA 11FC 0000 D080                     move.b  #BBUSH_OBJNO_EYES,objSlot02.w     
000E06E0 11FC 0000 D0C0                     move.b  #BBUSH_OBJNO_MOUTH,objSlot03.w   
000E06E6 11FC 0000 D100                     move.b  #BBUSH_OBJNO_DBUG,objSlot04.w
000E06EC                            
000E06EC =FFFFD000                  membushBody  = objSlot00
000E06EC =FFFFD040                  membushHead  = objSlot01       
000E06EC =FFFFD080                  membushEyes  = objSlot02
000E06EC =FFFFD0C0                  membushMouth = objSlot03    
000E06EC                                                    
000E06EC 31FC 0000 F602                     move.w  #0,joypadMirr.w
000E06F2 31FC 0000 F604                     move.w  #0,joypad.w
000E06F8                            
000E06F8                                    ; Load art direct
000E06F8                            
000E0702 41F9 0000 0000                     lea     ArtNem_BEEBUSH,a0                       ; Get compressed bitstream
000E0708 4EB8 1DBA                          jsr     NemDec
000E070C                            
000E0716 41F9 0000 0000                     lea     ArtNem_QUAGMIRE,a0                      ; Get compressed bitstream
000E071C 4EB8 1DBA                          jsr     NemDec
000E0720                            
000E072A 3E3C 01FF                          move.w  #(8*64)-1,d7
000E072E                            
000E072E                            .FillStatic:
000E072E 4EB8 3492                          jsr     CalcRandom
000E0732 23C0 00C0 0000                     move.l  d0,VDPDATA
000E0738 D280                               add.l   d0,d1
000E073A 23C1 00C0 0000                     move.l  d1,VDPDATA
000E0740                            
000E0740 51CF FFEC                          dbf     d7,.FillStatic
000E0744                            
000E0744                                    ; Load screen A tilemap
000E0744                            
000E0744 43F9 0000 0000                     lea     MapScrA_BEEBUSH,a1
000E0750 7227                               moveq   #40-1,d1                     ; Set Width
000E0752 741B                               moveq   #28-1,d2                     ; Set Height
000E0754 4EB8 1D9A                          jsr     DrawTileMap                  ; Draw Tilemap to location
000E0758                            
000E0758                                    ; Load screen B tilemap
000E0758                            
000E0758 43F9 0000 0000                     lea     MapScrB_BEEBUSH,a1
000E0764 7227                               moveq   #40-1,d1                     ; Set Width
000E0766 741B                               moveq   #28-1,d2                     ; Set Height
000E0768 4EB8 1D9A                          jsr     DrawTileMap                  ; Draw Tilemap to location
000E076C                            
000E076C                                    ; Load palette into buffer directly
000E076C                            
000E076C 7E3F                               moveq   #64-1,d7
000E076E 45F9 0000 0000                     lea     Pal_BEEBUSH,a2
000E0774 47F8 FB00                          lea     palette,a3
000E0778                            
000E0778                            .LoadToBuffer:                         
000E0778 26DA                               move.l  (a2)+,(a3)+
000E077A 51CF FFFC                          dbf     d7,.LoadToBuffer
000E077E                            
000E077E                                    ; !!!DEBUG!!!
000E077E                            
000E077E 4EB9 0000 0000                     jsr     _beebushDbugLoad
000E0784                            
000E0784 3038 F60C                          move.w  displayMode.w,d0          
000E0788 0000 0040                          ori.b   #%1000000,d0
000E078C                            
000E078C 33C0 00C0 0004                     move.w  d0,VDPCTRL		     ; Enable display when ready
000E0792 11FC 0004 F601                     move.b  #SMNO_BEEBUSH_INTRO,submode.w ; Move to next mode
000E0798 4E75                               rts
000E079A                            
000E079A                            ; ---------------------------------------------------------------------------
000E079A                            ; Main cutscene loop
000E079A                            ; ---------------------------------------------------------------------------
000E079A                            
000E079A                            BEEBUSH_INTRO:                              
000E079A 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E07A0 4EB8 3486                          jsr     VSync
000E07A4 5278 FE04                          addq.w  #1,frameCntr.w
000E07A8 6100 0000                          bsr.w   _beebushCamShake
000E07AC 6100 0000                          bsr.w   _beebushRunObjects    
000E07B0 4EB9 0000 E83E                     jsr     DrawObjects
000E07B6                            
000E07B6 4A38 D070                          tst.b   membushHead+$30
000E07BA 6700                               beq.s   .NoChg
000E07BC 11FC 0008 F601                     move.b  #SMNO_BEEBUSH_STATIC,submode.w ; Move to next mode
000E07C2 31FC 003C F614                     move.w  #60,genericTimer.w
000E07C8 6100 0000                          bsr.w   _beebushClrSprites
000E07CC                            
000E07CC                            .NoChg: 
000E07CC 4E75                               rts 
000E07CE                            
000E07CE                            ; ---------------------------------------------------------------------------
000E07CE                            ; Static Transition sequence
000E07CE                            ; ---------------------------------------------------------------------------
000E07CE                            
000E07CE                            BEEBUSH_STATIC:                              
000E07CE 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E07D4 4EB8 3486                          jsr     VSync
000E07D8 5278 FE04                          addq.w  #1,frameCntr.w
000E07DC 6100 0000                          bsr.w   _beebushDrawStatic
000E07E0 5378 F614                          subq.w  #1,genericTimer.w
000E07E4 6600 0000                          bne.w   .Exit
000E07E8 11FC 000C F601                     move.b  #SMNO_BEEBUSH_INITMAIN,submode.w ; Move to next mode
000E07EE 4E75                               rts
000E07F0                            .Exit:
000E07F0                            
000E07F0 4E75                               rts
000E07F2                            
000E07F2                            ; ---------------------------------------------------------------------------
000E07F2                            ; Initialize main sequence
000E07F2                            ; ---------------------------------------------------------------------------
000E07F2                            
000E07F2 =FFFFD000                  membushPlayer = objSlot00
000E07F2                            
000E07F2                            BEEBUSH_INITMAIN:                              
000E07F2 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000E07F8 4EB8 3486                          jsr     VSync
000E07FC 43F9 0000 0000                     lea     MapScrB_BEEBUSHMAIN,a1
000E0802 33FC 8B00 00C0 0004                move.w  #$8B00+%00000000,VDPCTRL
000E0810 723F                               moveq   #64-1,d1                     ; Set Width
000E0812 741B                               moveq   #28-1,d2                     ; Set Height
000E0814 4EB8 1D9A                          jsr     DrawTileMap                  ; Draw Tilemap to location
000E0818 43F8 D000                          lea     OBJECTRAM.w,a1
000E081C 7000                               moveq   #0,d0
000E081E 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000E0822                            
000E0822                            .ClearObjects:                         
000E0822 22C0                               move.l  d0,(a1)+
000E0824 51C9 FFFC                          dbf     d1,.ClearObjects
000E0828 11FC 0000 D000                     move.b  #BBUSH_OBJNO_PLAYER,objSlot00.w
000E082E 21FC 1234 5678 F608                move.l  #$12345678,distance
000E0836 11FC 0010 F601                     move.b  #SMNO_BEEBUSH_MAIN,submode.w ; Move to next mode
000E083C 4E75                               rts
000E083E                            
000E083E                            ; ---------------------------------------------------------------------------
000E083E                            ; Main    lGod wfyuck ioff
000E083E                            ; ---------------------------------------------------------------------------
000E083E                            
000E083E                            BEEBUSH_MAIN:                              
000E083E 11FC 001C F62A                     move.b  #VBLNO_BEEBUSHSCR,vblankCmd.w
000E0844 4EB8 3486                          jsr     VSync
000E0848 5278 FE04                          addq.w  #1,frameCntr.w
000E084C 6100 0000                          bsr.w   _beebushScroll
000E0850 6100 0000                          bsr.w   _beebushRunObjects    
000E0854 4EB9 0000 E83E                     jsr     DrawObjects
000E085A 4E75                               rts
000E085C                            
000E085C                            ; ---------------------------------------------------------------------------
000E085C                            
000E085C                            Pal_BEEBUSH:
000E085C                                    incbin	"beebush/Data/BEEBUSH.PAL"
000E08DC                                    even
000E08DC                            
000E08DC                            MapScrA_BEEBUSH:
000E08DC                                    incbin  "beebush/Data/BEEBUSH_SCR_A.MAP"
000E119C                                    even
000E119C                            
000E119C                            MapScrB_BEEBUSH:
000E119C                                    incbin  "beebush/Data/BEEBUSH_SCR_B.MAP"
000E1A5C                                    even
000E1A5C                            
000E1A5C                            MapScrB_BEEBUSHMAIN:
000E1A5C                                    incbin  "beebush/Data/BEEBUSH_MAIN_B.MAP"
000E285C                                    even
000E285C                            
000E285C                            ArtNem_BEEBUSH:
000E285C                                    incbin  "beebush/Data/BEEBUSH_ART.NEM"
000E2BC0                                    even
000E2BC0                            
000E2BC0                            ArtNem_QUAGMIRE:
000E2BC0                                    incbin  "beebush/Data/QUAGMIRE_ART.NEM"
000E3B98                                    even
000E3B98                            
000E3B98                            ; ---------------------------------------------------------------------------
000E3B98                            ; Do camera unsteadiness movement
000E3B98                            ;
000E3B98                            ; camera A = REC. and camera overlay
000E3B98                            ; camera B = background (moves)
000E3B98                            ; ---------------------------------------------------------------------------
000E3B98                            
000E3B98 =FFFFF760                  beeSinCntr = $FFFFF760
000E3B98 =FFFFF762                  beeSin     = $FFFFF762      
000E3B98 =FFFFF764                  beeCos     = $FFFFF764
000E3B98                            
000E3B98                            _beebushCamShake:
000E3B98 5438 F760                          add.b   #2,beeSinCntr.w
000E3B9C 1038 F760                          move.b  beeSinCntr.w,d0
000E3BA0 4EB8 34B8                          jsr     CalcSinCos
000E3BA4 31C0 F764                          move.w  d0,beeCos.w
000E3BA8 31C1 F762                          move.w  d1,beeSin.w
000E3BAC EE40                               asr.w   #7,d0
000E3BAE EC41                               asr.w   #6,d1
000E3BB0                            
000E3BB0                                    
000E3BB0 31C0 F61C                          move.w  d0,mainBPosX
000E3BB4 4440                               neg.w   d0
000E3BB6 31C0 F708                          move.w  d0,cameraBPosX
000E3BBA                            
000E3BBA 31C1 F618                          move.w  d1,mainBPosY
000E3BBE 31C1 F70C                          move.w  d1,cameraBPosY
000E3BC2 4E75                               rts
000E3BC4                            
000E3BC4                            ; ---------------------------------------------------------------------------
000E3BC4                            ; Main scrolling for gameplay
000E3BC4                            ; ---------------------------------------------------------------------------
000E3BC4                            
000E3BC4                            
000E3BC4                            _beebushScroll:                    
000E3BC4 43F8 CC00                          lea     hscroll.w,a1
000E3BC8                            
000E3BC8 3238 F700                          move.w  cameraAPosX.w,d1
000E3BCC E241                               asr.w   #1,d1
000E3BCE 31C1 F708                          move.w  d1,cameraBPosX
000E3BD2                            
000E3BD2 3238 F710                          move.w  cameraCPosX.w,d1
000E3BD6 D241                               add.w   d1,d1
000E3BD8 31C1 F718                          move.w  d1,cameraZPosX.w
000E3BDC                            
000E3BDC 3038 F708                          move.w  cameraBPosX.w,d0
000E3BE0                            
000E3BE0                                    ; Far away BG segment
000E3BE0                            
000E3BE0 323C 0047                          move.w  #72-1,d1
000E3BE4 E480                               asr.l   #2,d0
000E3BE6                            .FarBG:                         
000E3BE6 22C0                               move.l  d0,(a1)+
000E3BE8 51C9 FFFC                          dbf     d1,.FarBG
000E3BEC                            
000E3BEC                                    ; Sidewalk perspective effect
000E3BEC                            
000E3BEC 3038 F710                          move.w  cameraCPosX.w,d0
000E3BF0 E440                               asr.w   #2,d0
000E3BF2 31C0 F622                          move.w  d0,mainCPosX.w
000E3BF6 0C40 0021                          cmp.w   #32+1,d0
000E3BFA 6600                               bne.s   .SkipBRes
000E3BFC 31FC 0000 F710                     move.w  #0,cameraCPosX.w
000E3C02 31FC 0000 F718                     move.w  #0,cameraZPosX.w
000E3C08 303C 0000                          move.w  #0,d0
000E3C0C                            .SkipBRes
000E3C0C 4440                               neg     d0
000E3C0E 3438 F718                          move.w  cameraZPosX.w,d2
000E3C12 E442                               asr.w   #2,d2
000E3C14 31C2 F620                          move.w  d2,mainZPosX.w
000E3C18 4442                               neg     d2
000E3C1A 9440                               sub.w   d0,d2
000E3C1C 48C2                               ext.l   d2
000E3C1E E182                               asl.l   #8,d2
000E3C20 85FC 0068                          divs.w  #$68,d2
000E3C24 48C2                               ext.l   d2
000E3C26 E182                               asl.l   #8,d2
000E3C28 3600                               move.w  d0,d3
000E3C2A 323C 001F                          move.w  #32-1,d1
000E3C2E                            
000E3C2E                            .Road:                                                    
000E3C2E 3003                               move.w  d3,d0
000E3C30 4440                               neg.w   d0
000E3C32 22C0                               move.l  d0,(a1)+
000E3C34 4843                               swap    d3
000E3C36 D682                               add.l   d2,d3
000E3C38 4843                               swap    d3
000E3C3A 51C9 FFF2                          dbf     d1,.Road
000E3C3E                            
000E3C3E                                    ; Grass (far away)
000E3C3E                            
000E3C3E 3038 F708                          move.w  cameraBPosX.w,d0
000E3C42 2400                               move.l  d0,d2
000E3C44 E482                               asr.l   #2,d2
000E3C46 9082                               sub.l   d2,d0
000E3C48 323C 001F                          move.w  #32-1,d1
000E3C4C                            
000E3C4C                            .GrassFar
000E3C4C                            
000E3C4C 22C0                               move.l  d0,(a1)+
000E3C4E 51C9 FFFC                          dbf     d1,.GrassFar
000E3C52                            
000E3C52 3038 F708                          move.w  cameraBPosX.w,d0
000E3C56 323C 001F                          move.w  #32-1,d1
000E3C5A                                    
000E3C5A                            .GrassMid
000E3C5A                            
000E3C5A 22C0                               move.l  d0,(a1)+
000E3C5C 51C9 FFFC                          dbf     d1,.GrassMid
000E3C60                            
000E3C60 3038 F708                          move.w  cameraBPosX.w,d0
000E3C64 2400                               move.l  d0,d2
000E3C66 E482                               asr.l   #2,d2
000E3C68 D082                               add.l   d2,d0
000E3C6A 323C 001F                          move.w  #32-1,d1
000E3C6E                            
000E3C6E                            .GrassClose
000E3C6E                            
000E3C6E 22C0                               move.l  d0,(a1)+
000E3C70 51C9 FFFC                          dbf     d1,.GrassClose
000E3C74 31F8 F700 F61A                     move.w  cameraAPosX.w,mainAPosX
000E3C7A 31F8 F708 F61C                     move.w  cameraBPosX.w,mainBPosX
000E3C80 4E75                               rts
000E3C82                            
000E3C82                            ; ---------------------------------------------------------------------------
000E3C82                            ; Clear screen sprites
000E3C82                            ; ---------------------------------------------------------------------------
000E3C82                            
000E3C82                            _beebushClrSprites:
000E3C82 21FC 0000 0000 F616                move.l  #0,mainAPosY.w
000E3C8A 21FC 0000 0000 F61A                move.l  #0,mainAPosX.w
000E3C92                            
000E3C92 43F8 F800                          lea     vdpSprites.w,a1
000E3C96 7000                               moveq   #0,d0
000E3C98 323C 009F                          move.w  #$A0-1,d1               ; Clear all sprites
000E3C9C                            
000E3C9C                            .ClearSprites:
000E3C9C 22C0                               move.l  d0,(a1)+
000E3C9E 51C9 FFFC                          dbf     d1,.ClearSprites
000E3CA2 43F8 CC00                          lea     hscroll.w,a1
000E3CA6 7000                               moveq   #0,d0
000E3CA8 323C 0100                          move.w  #$100,d1
000E3CAC                            
000E3CAC                            .ClearHScroll:
000E3CAC 22C0                               move.l  d0,(a1)+
000E3CAE 51C9 FFFC                          dbf     d1,.ClearHScroll
000E3CB2 4E75                               rts
000E3CB4                            
000E3CB4                            ; ---------------------------------------------------------------------------
000E3CB4                            ; Draw tilemap static for transitory sequences
000E3CB4                            ; Draws 2 "random" tiles out of a memory space location (document later idk)
000E3CB4                            ; ---------------------------------------------------------------------------
000E3CB4                            
000E3CB4                            _beebushDrawStatic:
000E3CB4 4DF9 00C0 0000                     lea     VDPDATA,a6                      ; a6 = VDPDATA        
000E3CC0 383C 000E                          move.w  #(30/2)-1,d4                    ; d4 = width / 2
000E3CC4 3A3C 0013                          move.w  #20-1,d5                        ; d5 = height
000E3CC8 2C3C 0080 0000                     move.l  #$800000,d6                     ; d6 = cmd row delta 
000E3CCE                            
000E3CCE                            .LoopRow:                              
000E3CCE 2D43 0004                          move.l  d3,VDPCTRL-VDPDATA(a6)          ; set addr
000E3CD2 3E04                               move.w  d4,d7                           ; copy width to d7
000E3CD4                            
000E3CD4                            .LoopColumn:            
000E3CD4 4EB8 3492                          jsr     CalcRandom                      ; get rand
000E3CD8 0240 003F                          andi.w  #$003F,d0                       ; mask high bits of tile no.
000E3CDC 0040 2200                          ori.w   #$2200,d0                       ; set line 2 and id $1XX
000E3CE0 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E3CE2 D007                               add.b   d7,d0                           ; add whatever d7 is to d0
000E3CE4 0240 003F                          andi.w  #$003F,d0                       ; do the same to it
000E3CE8 0040 2200                          ori.w   #$2200,d0
000E3CEC 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E3CEE                            
000E3CEE 51CF FFE4                          dbf     d7,.LoopColumn                  ; loop for width
000E3CF2 D686                               add.l   d6,d3                           ; move to next row
000E3CF4 51CD FFD8                          dbf     d5,.LoopRow                     ; loop for height
000E3CF8 4E75                               rts
000E3CFA                            
000E3CFA                            ; ---------------------------------------------------------------------------
000E3CFA                            ; local memory usage derived from global (this sucks)
000E3CFA                            
000E3CFA                            
000E3CFA                                    include 'beebush/Objects.asm'
000E3CFA                            ; ---------------------------------------------------------------------------
000E3CFA                            ; Bee Bush Screen objects library
000E3CFA                            ; Depends on Stock Sonic 1 object library and sprite renderer
000E3CFA                            ; ---------------------------------------------------------------------------
000E3CFA                            
000E3CFA =00000038                  OBJ.GRAVITY    EQU     56              ; Gravity delta
000E3CFA                            
000E3CFA                                                rsreset
000E3CFA =00000000                  obj.No:             rs.b 1                  
000E3CFA =00000001                  obj.Render:         rs.b 1                  
000E3CFA =00000002                  obj.Tile:           rs.b 2                  
000E3CFA =00000004                  obj.Map:            rs.b 4                  
000E3CFA =00000008                  obj.X:              rs.b 2                  
000E3CFA =0000000A                  obj.YScr:           rs.b 2                  
000E3CFA =0000000C                  obj.Y:              rs.b 2                  
000E3CFA =0000000E                  obj.YSub:           rs.b 2                  
000E3CFA =00000010                  obj.XSpeed:         rs.b 2                  
000E3CFA =00000012                  obj.YSpeed:         rs.b 2                  
000E3CFA =00000014                  obj.Momentum:       rs.b 2                  
000E3CFA =00000016                  obj.YRad:           rs.b 1                  
000E3CFA =00000017                  obj.XRad:           rs.b 1                  
000E3CFA =00000018                  obj.XDraw:          rs.b 1                  
000E3CFA =00000019                  obj.Priority:       rs.b 1                  
000E3CFA =0000001A                  obj.Frame:          rs.b 1                  
000E3CFA =0000001B                  obj.AnimFrame:      rs.b 1                  
000E3CFA =0000001C                  obj.Anim:           rs.b 1                  
000E3CFA =0000001D                  obj.LastAnim:       rs.b 1                  
000E3CFA =0000001E                  obj.FrameTimer:     rs.b 1                  
000E3CFA =0000001F                  obj.FrameMirr:      rs.b 1                  
000E3CFA =00000020                  obj.Collision:      rs.b 1                  
000E3CFA =00000021                  obj.ColliCnt:       rs.b 1                  
000E3CFA =00000022                  obj.Status:         rs.b 1                  
000E3CFA =00000023                  obj.Respawn:        rs.b 1                  
000E3CFA =00000024                  obj.Action:         rs.b 1                  
000E3CFA =00000025                  obj.SubAction:      rs.b 1                  
000E3CFA =00000026                  obj.Angle:          rs.b 2                  
000E3CFA =00000028                  obj.Arg:            rs.b 1                   
000E3CFA                            
000E3CFA                            ; --------------------------------------------------------------------------- 
000E3CFA                            
000E3CFA =00000000                  STAT.XDIR:       equ 0
000E3CFA =00000001                  STAT.YDIR:       equ 1                  
000E3CFA =00000003                  STAT.HOISTING:   equ 3                  
000E3CFA =00000005                  STAT.PUSHED:     equ 5                  
000E3CFA =00000007                  STAT.FLAG:       equ 7
000E3CFA                            
000E3CFA                            ; ---------------------------------------------------------------------------
000E3CFA                            
000E3CFA =00000000                  PHYS.DIR:        equ 0                  
000E3CFA =00000001                  PHYS.AIRBORNE:   equ 1                  
000E3CFA =00000002                  PHYS.ROLLING:    equ 2                  
000E3CFA =00000003                  PHYS.HOISTED:    equ 3                  
000E3CFA =00000004                  PHYS.ROLLJUMP:   equ 4                  
000E3CFA =00000005                  PHYS.PUSH:       equ 5                  
000E3CFA =00000006                  PHYS.WATER:      equ 6
000E3CFA =00000007                  PHYS.FLAG:       equ 7
000E3CFA                            
000E3CFA                            ; ---------------------------------------------------------------------------
000E3CFA                            
000E3CFA =00000000                  REND.XMIRR:      equ 0
000E3CFA =00000001                  REND.YMIRR:      equ 1
000E3CFA =00000002                  REND.CAMOFF:     equ 2
000E3CFA =00000003                  REND.CAMOFF2:    equ 3
000E3CFA =00000004                  REND.HEIGHT:     equ 4
000E3CFA =00000005                  REND.SPTYPE:     equ 5
000E3CFA =00000006                  REND.BEHIND:     equ 6                  
000E3CFA =00000007                  REND.ONSCREEN:   equ 7
000E3CFA                            
000E3CFA                            ; ---------------------------------------------------------------------------
000E3CFA                            
000E3CFA                            _beebushRunObjects:                             
000E3CFA 41F8 D000                          lea     OBJECTRAM.w,a0
000E3CFE 7E5F                               moveq   #96-1,d7
000E3D00 7000                               moveq   #0,d0
000E3D02                            
000E3D02                            .RunObjLoop:                       
000E3D02 1010                               move.b  obj.No(a0),d0
000E3D04 6700                               beq.s   .EmptySlot
000E3D06 D040                               add.w   d0,d0
000E3D08 D040                               add.w   d0,d0
000E3D0A 227B 0000                          movea.l .ObjectIndex-4(pc,d0.w),a1       ; No zero offset - start at 1
000E3D0E 4E91                               jsr     (a1)
000E3D10 7000                               moveq   #0,d0
000E3D12                            
000E3D12                            .EmptySlot:                            
000E3D12 41E8 0040                          lea     OBJSZ(a0),a0            ; Move into next object memory space
000E3D16 51CF FFEA                          dbf     d7,.RunObjLoop
000E3D1A 4E75                               rts
000E3D1C                            
000E3D1C                            ; ---------------------------------------------------------------------------
000E3D1C                            ; Object Index for Bee Bush
000E3D1C                            ; ---------------------------------------------------------------------------
000E3D1C =00000001                  BBUSH_OBJNO_PLAYER      = 1
000E3D1C =00000002                  BBUSH_OBJNO_BODY        = 2
000E3D1C =00000003                  BBUSH_OBJNO_HEAD        = 3
000E3D1C =00000004                  BBUSH_OBJNO_EYES        = 4
000E3D1C =00000005                  BBUSH_OBJNO_MOUTH       = 5
000E3D1C =00000006                  BBUSH_OBJNO_DBUG        = 6
000E3D1C                            
000E3D1C                            
000E3D1C                            .ObjectIndex:    
000E3D1C 0000 0000                          dc.l BbushObj_Player
000E3D20 0000 0000                          dc.l BbushObj_QuagmireBody
000E3D24 0000 0000                          dc.l BbushObj_QuagmireHead
000E3D28 0000 0000                          dc.l BbushObj_QuagmireEyes
000E3D2C 0000 0000                          dc.l BbushObj_QuagmireMouth
000E3D30 0000 0000                          dc.l BbushObj_Dbug
000E3D34                            .Null:
000E3D34 4E75                               rts 
000E3D36                            
000E3D36                                    include  "beebush/Objects/OBJ_QUAGMIRE.asm"
000E3D36                            ; ---------------------------------------------------------------------------
000E3D36                            ; Body
000E3D36                            ; ---------------------------------------------------------------------------
000E3D36                            
000E3D36 =00000030                  bbush.Flag  = $30
000E3D36 =00000032                  bbush.orgX  = $32
000E3D36 =00000034                  bbush.orgY  = $34
000E3D36 =00000036                  bbush.Cntr  = $36
000E3D36 =00000038                  bbush.Timer = $38
000E3D36 =00000039                  bbush.MvChk = $39
000E3D36                            
000E3D36                            
000E3D36 =00000300                  QUAGTILE = $300
000E3D36                            
000E3D36                            BbushObj_QuagmireBody:                          
000E3D36 7000                               moveq   #0,d0
000E3D38 1028 0024                          move.b  obj.Action(a0),d0
000E3D3C 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3D40 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3D44                            
000E3D44                            ; ---------------------------------------------------------------------------
000E3D44                            .Index:                                
000E3D44 0000                               dc.w QuagmireBody_Init-.Index
000E3D46 0000                               dc.w QuagmireBody_Display-.Index
000E3D48                            ; ---------------------------------------------------------------------------
000E3D48                            
000E3D48                            QuagmireBody_Init:                         
000E3D48 5428 0024                          addq.b  #2,obj.Action(a0)
000E3D4C 317C 00A8 0008                     move.w  #168,obj.X(a0)
000E3D52 317C 00A0 000C                     move.w  #160,obj.Y(a0)
000E3D58 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3D60 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E3D66 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E3D6C 117C 0007 0019                     move.b  #7,obj.Priority(a0)
000E3D72 117C 0002 001A                     move.b  #2,obj.Frame(a0)
000E3D78 43F8 D040                          lea     membushHead,a1
000E3D7C 3368 0008 0008                     move.w  obj.X(a0),obj.X(a1)
000E3D82 3368 000C 000C                     move.w  obj.Y(a0),obj.Y(a1)
000E3D88 0469 003C 000C                     sub.w   #60,obj.Y(a1)
000E3D8E 5169 0008                          sub.w   #8,obj.X(a1)    
000E3D92 3369 0008 0032                     move.w  obj.X(a1),bbush.orgX(a1)
000E3D98 3369 000C 0034                     move.w  obj.Y(a1),bbush.orgY(a1)
000E3D9E                                  
000E3D9E                            
000E3D9E                            QuagmireBody_Display:                           
000E3D9E 4EB9 0000 E7E4                     jsr     _objectDraw  
000E3DA4 4E75                               rts
000E3DA6                            
000E3DA6                            ; ---------------------------------------------------------------------------
000E3DA6                            ; Head
000E3DA6                            ; ---------------------------------------------------------------------------
000E3DA6                            
000E3DA6                            BbushObj_QuagmireHead:                          
000E3DA6 7000                               moveq   #0,d0
000E3DA8 1028 0024                          move.b  obj.Action(a0),d0
000E3DAC 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3DB0 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3DB4                            
000E3DB4                            ; ---------------------------------------------------------------------------
000E3DB4                            .Index:                                
000E3DB4 0000                               dc.w QuagmireHead_Init-.Index
000E3DB6 0000                               dc.w QuagmireHead_Display-.Index
000E3DB8 0000                               dc.w QuagmireHead_InitBck-.Index
000E3DBA 0000                               dc.w QuagmireHead_MoveBck-.Index
000E3DBC 0000                               dc.w QuagmireHead_WaitInit-.Index
000E3DBE 0000                               dc.w QuagmireHead_Wait-.Index
000E3DC0                            ; ---------------------------------------------------------------------------
000E3DC0                            
000E3DC0                            QuagmireHead_Init:                         
000E3DC0 5428 0024                          addq.b  #2,obj.Action(a0)
000E3DC4 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E3DCA 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E3DD0 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3DD8 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E3DDE 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E3DE4 117C 0006 0019                     move.b  #6,obj.Priority(a0)
000E3DEA 117C 0001 001A                     move.b  #1,obj.Frame(a0)
000E3DF0                            
000E3DF0                            QuagmireHead_Display:  
000E3DF0 11FC 0003 D09A                     move.b  #3,(membushEyes+obj.Frame)
000E3DF6 3168 0032 0008                     move.w  bbush.orgX(a0),obj.X(a0)
000E3DFC 3168 0034 000C                     move.w  bbush.orgY(a0),obj.Y(a0)                    
000E3E02 4EB9 0000 E7E4                     jsr     _objectDraw  
000E3E08 4E75                               rts
000E3E0A                            
000E3E0A                            QuagmireHead_InitBck:
000E3E0A 117C 009A 0036                     move.b  #$9A,bbush.Cntr(a0)     ; set initial "phase" of sine
000E3E10 117C 003C 0038                     move.b  #60,bbush.Timer(a0)  
000E3E16 5428 0024                          addq.b  #2,obj.Action(a0)   
000E3E1A 11FC 0004 D09A                     move.b  #4,(membushEyes+obj.Frame)
000E3E20                                
000E3E20                            QuagmireHead_MoveBck:
000E3E20 1028 0036                          move.b  bbush.Cntr(a0),d0
000E3E24 5028 0036                          add.b   #8,bbush.Cntr(a0)
000E3E28 4EB8 34B8                          jsr     CalcSinCos              ; note: d0 yshift div. needs to be 6 so adj.
000E3E2C                            
000E3E2C                            
000E3E2C E840                               asr.w   #4,d0
000E3E2E 0C68 00B0 0008                     cmpi.w  #$B0,obj.X(a0)
000E3E34                            
000E3E34 3428 0032                          move.w  bbush.orgX(a0),d2
000E3E38 9440                               sub.w   d0,d2
000E3E3A                            
000E3E3A 0C42 00B0                          cmpi.w  #$B0,d2
000E3E3E 6200                               bhi.s   .SkipSet
000E3E40 0C42 0091                          cmpi.w  #$91,d2
000E3E44 6500                               blo.s   .SkipSet
000E3E46                            
000E3E46 3142 0008                          move.w  d2,obj.X(a0)
000E3E4A                            
000E3E4A                            
000E3E4A E640                               asr.w   #3,d0        
000E3E4C 3628 0034                          move.w  bbush.orgY(a0),d3
000E3E50 D640                               add.w   d0,d3
000E3E52 3143 000C                          move.w  d3,obj.Y(a0) 
000E3E56                            
000E3E56                            .SkipSet:
000E3E56 4EB9 0000 E7E4                     jsr     _objectDraw 
000E3E5C 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E3E60 6700                               beq.s   .Exit
000E3E62 4E75                               rts
000E3E64                            .Exit:
000E3E64 5428 0024                          addq.b  #2,obj.Action(a0)
000E3E68 4E75                               rts  
000E3E6A                            
000E3E6A                            QuagmireHead_WaitInit:  
000E3E6A 5428 0024                          addq.b  #2,obj.Action(a0)     
000E3E6E 117C 001E 0038                     move.b  #30,bbush.Timer(a0) 
000E3E74                            
000E3E74                            QuagmireHead_Wait:
000E3E74 4EB9 0000 E7E4                     jsr     _objectDraw                    
000E3E7A 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E3E7E 6600                               bne.s   .Exit
000E3E80 50E8 0030                          st      bbush.Flag(a0)
000E3E84                            
000E3E84                            .Exit:
000E3E84 4E75                               rts
000E3E86                            
000E3E86                            ; ---------------------------------------------------------------------------
000E3E86                            ; Eyes
000E3E86                            ; ---------------------------------------------------------------------------
000E3E86                            
000E3E86                            BbushObj_QuagmireEyes:                          
000E3E86 7000                               moveq   #0,d0
000E3E88 1028 0024                          move.b  obj.Action(a0),d0
000E3E8C 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3E90 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3E94                            
000E3E94                            ; ---------------------------------------------------------------------------
000E3E94                            .Index:                                
000E3E94 0000                               dc.w QuagmireEyes_Init-.Index
000E3E96 0000                               dc.w QuagmireEyes_Display-.Index
000E3E98                            ; ---------------------------------------------------------------------------
000E3E98                            
000E3E98                            QuagmireEyes_Init:                         
000E3E98 5428 0024                          addq.b  #2,obj.Action(a0)
000E3E9C 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3EA4 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E3EAA 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E3EB0 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E3EB6 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E3EBC                            
000E3EBC                            QuagmireEyes_Display:   
000E3EBC 43F8 D040                          lea     membushHead,a1
000E3EC0 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E3EC6 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E3ECC 0468 0016 000C                     sub.w   #22,obj.Y(a0)                        
000E3ED2 4EB9 0000 E7E4                     jsr     _objectDraw  
000E3ED8 4E75                               rts
000E3EDA                            
000E3EDA                            ; ---------------------------------------------------------------------------
000E3EDA                            ; Mouth
000E3EDA                            ; ---------------------------------------------------------------------------
000E3EDA                            
000E3EDA                            BbushObj_QuagmireMouth:
000E3EDA 7000                               moveq   #0,d0
000E3EDC 1028 0024                          move.b  obj.Action(a0),d0
000E3EE0 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3EE4 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3EE8                            
000E3EE8                            ; ---------------------------------------------------------------------------
000E3EE8                            .Index:                                
000E3EE8 0000                               dc.w QuagmireMouth_Init1-.Index
000E3EEA 0000                               dc.w QuagmireMouth_Speak1-.Index
000E3EEC 0000                               dc.w QuagmireMouth_Init2-.Index
000E3EEE 0000                               dc.w QuagmireMouth_Speak2-.Index
000E3EF0                            ; ---------------------------------------------------------------------------
000E3EF0                            
000E3EF0                            QuagmireMouth_Init1:                         
000E3EF0 5428 0024                          addq.b  #2,obj.Action(a0)
000E3EF4 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3EFC 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E3F02 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E3F08 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E3F0E 117C 0008 001A                     move.b  #8,obj.Frame(a0)
000E3F14                            
000E3F14                            QuagmireMouth_Speak1:   
000E3F14 6100 0000                          bsr.w   _quagEyeAdjToHead
000E3F18 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E3F1E 6100 0000                          bsr.w   _objectAnimate
000E3F22 4EB9 0000 E7E4                     jsr     _objectDraw  
000E3F28 4E75                               rts
000E3F2A                            
000E3F2A                            QuagmireMouth_Init2:   
000E3F2A 5228 001C                          addq.b  #1,obj.Anim(a0)
000E3F2E 5428 0024                          addq.b  #2,obj.Action(a0)
000E3F32 5438 D064                          add.b   #2,(membushHead+obj.Action)
000E3F36                            
000E3F36                            QuagmireMouth_Speak2:
000E3F36 6100 0000                          bsr.w   _quagEyeAdjToHead
000E3F3A 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E3F40 6100 0000                          bsr.w   _objectAnimate
000E3F44 4EB9 0000 E7E4                     jsr     _objectDraw  
000E3F4A 4E75                               rts        
000E3F4C                            
000E3F4C                            _quagEyeAdjToHead:
000E3F4C 43F8 D040                          lea     membushHead,a1
000E3F50 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E3F56 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E3F5C 0668 000A 000C                     add.w   #10,obj.Y(a0)   
000E3F62 4E75                               rts
000E3F64                            
000E3F64                            ; ---------------------------------------------------------------------------
000E3F64                            AniSpr_QuagmireMouth:
000E3F64                            .tbl
000E3F64 0000                               dc.w quagvocal_imglennqua-.tbl
000E3F66 0000                               dc.w quagvocal_beebush-.tbl
000E3F68                            
000E3F68                            quagvocal_imglennqua: 
000E3F68                            
000E3F68                                    ; playback speed delta (wait time)
000E3F68 04                                 dc.b   4
000E3F69                            
000E3F69                                    ; "...im glenn quagmire"
000E3F69 0808 0808 0806 0807 0506+          dc.b   8, 8, 8, 8, 8, 6, 8, 7, 5, 6, 8, 5, 6, 7, 8, 6, 5
000E3F7A                            
000E3F7A                                    ; "...and this is-"
000E3F7A 0808 0808 0806 0706 0706+          dc.b   8, 8, 8, 8, 8, 6, 7, 6, 7, 6, 7
000E3F85                            
000E3F85                                    ; routine chg
000E3F85 FC                                 dc.b   $FC
000E3F86                            
000E3F86                                    even
000E3F86                            
000E3F86                            quagvocal_beebush:
000E3F86                            
000E3F86                                    ; playback speed delta (wait time)
000E3F86 04                                 dc.b   4
000E3F87                            
000E3F87                                    ; "bee bush"
000E3F87 0708 0806 0608 0805 0507+          dc.b   7, 8, 8, 6, 6, 8, 8, 5, 5, 7, 7, 8, 8, 8, 8
000E3F96                            
000E3F96                                    ; loop 8 forever
000E3F96 FE01                               dc.b   $FE, 1
000E3F98                                    even
000E3F98                            
000E3F98                            ; ---------------------------------------------------------------------------      
000E3F98                            ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000E3F98                            ; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
000E3F98                            ; ---------------------------------------------------------------------------  
000E3F98                            
000E3F98                            BbushObj_Dbug:                          
000E3F98 4E75                               rts
000E3F9A                            
000E3F9A                            SprPat_Quagmire:
000E3F9A                                    include "beebush/Objects/SPRPAT_QUAGMIRE.asm"
000E3F9A                            Map_879c:
000E3F9A 0000                       Map_879c_0: 	dc.w Map_879c_12-Map_879c
000E3F9C 0000                       Map_879c_2: 	dc.w Map_879c_13-Map_879c
000E3F9E 0000                       Map_879c_4: 	dc.w Map_879c_3C-Map_879c
000E3FA0 0000                       Map_879c_6: 	dc.w Map_879c_56-Map_879c
000E3FA2 0000                       Map_879c_8: 	dc.w Map_879c_61-Map_879c
000E3FA4 0000                       Map_879c_A: 	dc.w Map_879c_6C-Map_879c
000E3FA6 0000                       Map_879c_C: 	dc.w Map_879c_72-Map_879c
000E3FA8 0000                       Map_879c_E: 	dc.w Map_879c_7D-Map_879c
000E3FAA 0000                       Map_879c_10: 	dc.w Map_879c_88-Map_879c
000E3FAC 00                         Map_879c_12: 	dc.b $0
000E3FAD 08                         Map_879c_13: 	dc.b $8
000E3FAE D20F 0000 E7               	dc.b $D2, $F, $0, $0, $E7
000E3FB3 D20F 0010 07               	dc.b $D2, $F, $0, $10, $7
000E3FB8 F20F 0020 D7               	dc.b $F2, $F, $0, $20, $D7
000E3FBD F20F 0030 F7               	dc.b $F2, $F, $0, $30, $F7
000E3FC2 F207 0040 17               	dc.b $F2, $7, $0, $40, $17
000E3FC7 120E 0048 D7               	dc.b $12, $E, $0, $48, $D7
000E3FCC 120E 0054 F7               	dc.b $12, $E, $0, $54, $F7
000E3FD1 1205 0060 17               	dc.b $12, $5, $0, $60, $17
000E3FD6 05                         Map_879c_3C: 	dc.b $5
000E3FD7 E70F 0064 E7               	dc.b $E7, $F, $0, $64, $E7
000E3FDC 070F 0074 E7               	dc.b $7, $F, $0, $74, $E7
000E3FE1 E70B 0084 07               	dc.b $E7, $B, $0, $84, $7
000E3FE6 070B 0090 07               	dc.b $7, $B, $0, $90, $7
000E3FEB D709 00DD EF               	dc.b $D7, $9, $0, $DD, $EF
000E3FF0 02                         Map_879c_56: 	dc.b $2
000E3FF1 F306 00A8 ED               	dc.b $F3, $6, $0, $A8, $ED
000E3FF6 F306 00AE 01               	dc.b $F3, $6, $0, $AE, $1
000E3FFB 02                         Map_879c_61: 	dc.b $2
000E3FFC F306 009C ED               	dc.b $F3, $6, $0, $9C, $ED
000E4001 F306 00A2 01               	dc.b $F3, $6, $0, $A2, $1
000E4006 01                         Map_879c_6C: 	dc.b $1
000E4007 FD09 00B4 F2               	dc.b $FD, $9, $0, $B4, $F2
000E400C 02                         Map_879c_72: 	dc.b $2
000E400D F70E 00BA F0               	dc.b $F7, $E, $0, $BA, $F0
000E4012 EF00 00C6 08               	dc.b $EF, $0, $0, $C6, $8
000E4017 02                         Map_879c_7D: 	dc.b $2
000E4018 F306 00C7 00               	dc.b $F3, $6, $0, $C7, $0
000E401D FB06 00CD F0               	dc.b $FB, $6, $0, $CD, $F0
000E4022 02                         Map_879c_88: 	dc.b $2
000E4023 FC0D 00D3 EC               	dc.b $FC, $D, $0, $D3, $EC
000E4028 F404 00DB 04               	dc.b $F4, $4, $0, $DB, $4
000E402E 00                         	even
000E402E 00                         	even
000E402E 00                         	even
000E402E                                    include  "beebush/Objects/OBJ_PLAYER.asm"
000E402E                                   
000E402E =00000030                  bbplay.WindowSz        equ     $30
000E402E =00000031                  bbplay.WindowCnt       equ     $31
000E402E =00000034                  bbplay.Xorg            equ     $34
000E402E =00000036                  bbplay.Yorg            equ     $36
000E402E                            
000E402E                            BbushObj_Player:                          
000E402E 7000                               moveq   #0,d0
000E4030 1028 0024                          move.b  obj.Action(a0),d0
000E4034 323B 0000                          move.w  .Index(pc,d0.w),d1
000E4038 4EFB 1000                          jmp     .Index(pc,d1.w)
000E403C                            ; ---------------------------------------------------------------------------
000E403C                            .Index:                                
000E403C 0000                               dc.w BbushPlayer_InitMain-.Index
000E403E 0000                               dc.w BbushPlayer_Main-.Index
000E4040                            ; ---------------------------------------------------------------------------
000E4040                            
000E4040                            BbushPlayer_InitMain:                         
000E4040 5428 0024                          addq.b  #2,obj.Action(a0)
000E4044 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E404A 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E4050 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
000E4058 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E405E 117C 0000 0001                     move.b  #0,obj.Render(a0)
000E4064 317C 014A 0008                     move.w  #160+42+128,obj.X(a0)
000E406A 317C 00E4 000A                     move.w  #100+128,obj.YScr(a0)
000E4070 117C 0002 0019                     move.b  #2,obj.Priority(a0)
000E4076 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E407C 317C 9204 0030                     move.w  #$9204,bbplay.WindowSz(a0)
000E4082 6000                               bra.s   BbushPlayer_Main
000E4084                            
000E4084                            .strCams:
000E4084 2070 6C61 7920 6361 6D42+          dc.b    ' play camB camC camZ   dist                 ', -1
000E40B2 00                                 even
000E40B2                            
000E40B2                            ; ---------------------------------------------------------------------------
000E40B2                            
000E40B2                            BbushPlayer_Main:                           
000E40B2 1838 F604                          move.b  joypad.w,d4         ;SACBRLDU
000E40B6 1A38 F605                          move.b  joypadPress.w,d5    
000E40BA 6100 0000                          bsr.w   _bbplayNormalCtrl 
000E40BE 4EF9 0000 E7E4                     jmp     _objectDraw   
000E40C4                            
000E40C4                            ; ---------------------------------------------------------------------------
000E40C4                            ; Control window vertical location  (VDPREG $12)
000E40C4                            ; ---------------------------------------------------------------------------
000E40C4                            
000E40C4                            _bbplayNormalCtrl:                                                 
000E40C4 0804 0002                          btst    #2,d4
000E40C8 6700                               beq.s   .NoLeft
000E40CA 5278 F700                          addi.w  #1,cameraAPosX
000E40CE 5278 F710                          addi.w  #1,cameraCPosX
000E40D2 53B8 F608                          subi.l  #1,distance
000E40D6 43F9 0000 0000                     lea     AniSpr_QuagmirePlayer,a1
000E40DC 4EF9 0000 0000                     jmp    _objectAnimate
000E40E2                            .NoLeft:                                             
000E40E2 4E75                               rts
000E40E4                            
000E40E4                            AniSpr_QuagmirePlayer:
000E40E4                            .tbl
000E40E4 0000                               dc.w .qaugplaywalk-.tbl
000E40E6                            
000E40E6                            .qaugplaywalk: 
000E40E6 08                                 dc.b   8
000E40E7 0102 0304 0506 07FF                dc.b   1, 2, 3, 4, 5, 6, 7, $FF
000E40F0 00                                 even 
000E40F0                            
000E40F0                            ; ---------------------------------------------------------------------------
000E40F0                            
000E40F0                            _bbplayPrintCams:
000E40F0 4E75                               rts
000E40F2                            
000E40F2                            ; ---------------------------------------------------------------------------
000E40F2                            
000E40F2                            SprPat_BBushPlayer:
000E40F2                                    include "beebush/Objects/SPRPAT_PLAYER.asm"
000E40F2                            Map_ffc1:
000E40F2 0000                       Map_ffc1_0: 	dc.w Map_ffc1_14-Map_ffc1
000E40F4 0000                       Map_ffc1_2: 	dc.w Map_ffc1_15-Map_ffc1
000E40F6 0000                       Map_ffc1_4: 	dc.w Map_ffc1_43-Map_ffc1
000E40F8 0000                       Map_ffc1_6: 	dc.w Map_ffc1_71-Map_ffc1
000E40FA 0000                       Map_ffc1_8: 	dc.w Map_ffc1_9F-Map_ffc1
000E40FC 0000                       Map_ffc1_A: 	dc.w Map_ffc1_CD-Map_ffc1
000E40FE 0000                       Map_ffc1_C: 	dc.w Map_ffc1_FB-Map_ffc1
000E4100 0000                       Map_ffc1_E: 	dc.w Map_ffc1_129-Map_ffc1
000E4102 0000                       Map_ffc1_10: 	dc.w Map_ffc1_157-Map_ffc1
000E4104 0000                       Map_ffc1_12: 	dc.w Map_ffc1_15D-Map_ffc1
000E4106 00                         Map_ffc1_14: 	dc.b $0
000E4107 09                         Map_ffc1_15: 	dc.b $9
000E4108 D10F 0103 EF               	dc.b $D1, $F, $1, $3, $EF
000E410D F309 0113 FB               	dc.b $F3, $9, $1, $13, $FB
000E4112 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E4117 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E411C EE04 007E FC               	dc.b $EE, $4, $0, $7E, $FC
000E4121 000A 0165 ED               	dc.b $0, $A, $1, $65, $ED
000E4126 1806 016E ED               	dc.b $18, $6, $1, $6E, $ED
000E412B 000E 0931 04               	dc.b $0, $E, $9, $31, $4
000E4130 160A 093D 0C               	dc.b $16, $A, $9, $3D, $C
000E4135 09                         Map_ffc1_43: 	dc.b $9
000E4136 D00F 00E3 F1               	dc.b $D0, $F, $0, $E3, $F1
000E413B F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E4140 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E4145 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E414A EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E414F 000A 0165 EE               	dc.b $0, $A, $1, $65, $EE
000E4154 1806 016E EE               	dc.b $18, $6, $1, $6E, $EE
000E4159 000A 0956 04               	dc.b $0, $A, $9, $56, $4
000E415E 1806 095F 0C               	dc.b $18, $6, $9, $5F, $C
000E4163 09                         Map_ffc1_71: 	dc.b $9
000E4164 D00F 00E3 F3               	dc.b $D0, $F, $0, $E3, $F3
000E4169 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E416E E40E 0119 0C               	dc.b $E4, $E, $1, $19, $C
000E4173 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E4178 EE04 007E FE               	dc.b $EE, $4, $0, $7E, $FE
000E417D FF0A 0156 EE               	dc.b $FF, $A, $1, $56, $EE
000E4182 1706 015F EE               	dc.b $17, $6, $1, $5F, $EE
000E4187 000A 0956 05               	dc.b $0, $A, $9, $56, $5
000E418C 1806 095F 0D               	dc.b $18, $6, $9, $5F, $D
000E4191 09                         Map_ffc1_9F: 	dc.b $9
000E4192 D00F 00E3 F5               	dc.b $D0, $F, $0, $E3, $F5
000E4197 F309 0113 FD               	dc.b $F3, $9, $1, $13, $FD
000E419C E40E 0119 0D               	dc.b $E4, $E, $1, $19, $D
000E41A1 E40E 0919 E0               	dc.b $E4, $E, $9, $19, $E0
000E41A6 EE04 007E FF               	dc.b $EE, $4, $0, $7E, $FF
000E41AB FF0A 0174 EF               	dc.b $FF, $A, $1, $74, $EF
000E41B0 1706 017D EF               	dc.b $17, $6, $1, $7D, $EF
000E41B5 000A 0956 06               	dc.b $0, $A, $9, $56, $6
000E41BA 1806 095F 0E               	dc.b $18, $6, $9, $5F, $E
000E41BF 09                         Map_ffc1_CD: 	dc.b $9
000E41C0 D10F 00F3 F7               	dc.b $D1, $F, $0, $F3, $F7
000E41C5 F309 0113 FE               	dc.b $F3, $9, $1, $13, $FE
000E41CA E40E 0119 0E               	dc.b $E4, $E, $1, $19, $E
000E41CF E40E 0919 E1               	dc.b $E4, $E, $9, $19, $E1
000E41D4 EE04 007E 00               	dc.b $EE, $4, $0, $7E, $0
000E41D9 FF0E 0131 E8               	dc.b $FF, $E, $1, $31, $E8
000E41DE 1706 013D E8               	dc.b $17, $6, $1, $3D, $E8
000E41E3 000A 0956 07               	dc.b $0, $A, $9, $56, $7
000E41E8 1806 095F 0F               	dc.b $18, $6, $9, $5F, $F
000E41ED 09                         Map_ffc1_FB: 	dc.b $9
000E41EE D10F 00E3 F3               	dc.b $D1, $F, $0, $E3, $F3
000E41F3 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E41F8 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E41FD E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E4202 EE04 007E FB               	dc.b $EE, $4, $0, $7E, $FB
000E4207 000A 0156 EC               	dc.b $0, $A, $1, $56, $EC
000E420C 1806 015F EC               	dc.b $18, $6, $1, $5F, $EC
000E4211 100B 0943 0B               	dc.b $10, $B, $9, $43, $B
000E4216 0009 094F 04               	dc.b $0, $9, $9, $4F, $4
000E421B 09                         Map_ffc1_129: 	dc.b $9
000E421C D00F 00E3 F2               	dc.b $D0, $F, $0, $E3, $F2
000E4221 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E4226 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E422B E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E4230 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E4235 000A 0165 EC               	dc.b $0, $A, $1, $65, $EC
000E423A 1806 016E EC               	dc.b $18, $6, $1, $6E, $EC
000E423F 000A 0974 04               	dc.b $0, $A, $9, $74, $4
000E4244 1806 097D 0C               	dc.b $18, $6, $9, $7D, $C
000E4249 01                         Map_ffc1_157: 	dc.b $1
000E424A F00F 0183 F0               	dc.b $F0, $F, $1, $83, $F0
000E424F 01                         Map_ffc1_15D: 	dc.b $1
000E4250 F00F 0193 F0               	dc.b $F0, $F, $1, $93, $F0
000E4256 00                         	even
000E4256 00                         	even
000E4256 00                         	even
000E4256                            
000E4256                            ; ---------------------------------------------------------------------------
000E4256                            ; Animate an object based on an animation script
000E4256                            ; !!!TODO: document script
000E4256                            ; ---------------------------------------------------------------------------
000E4256                            
000E4256                            _objectAnimate:                         
000E4256 7000                               moveq   #0,d0
000E4258 1028 001C                          move.b  obj.Anim(a0),d0
000E425C B028 001D                          cmp.b   obj.LastAnim(a0),d0
000E4260 6700                               beq.s   .DoAnim
000E4262 1140 001D                          move.b  d0,obj.LastAnim(a0)
000E4266 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E426C 117C 0000 001E                     move.b  #0,obj.FrameTimer(a0)
000E4272                            
000E4272                            .DoAnim:                               
000E4272 D040                               add.w   d0,d0
000E4274 D2F1 0000                          adda.w  (a1,d0.w),a1
000E4278 5328 001E                          subq.b  #1,obj.FrameTimer(a0)
000E427C 6A00                               bpl.s   .Exit
000E427E 1151 001E                          move.b  (a1),obj.FrameTimer(a0)
000E4282 7200                               moveq   #0,d1
000E4284 1228 001B                          move.b  obj.AnimFrame(a0),d1
000E4288 1031 1001                          move.b  1(a1,d1.w),d0
000E428C 6B00                               bmi.s   .HandleFlags
000E428E                            
000E428E                            .Finish:                               
000E428E 1200                               move.b  d0,d1
000E4290 0200 001F                          andi.b  #$1F,d0
000E4294 1140 001A                          move.b  d0,obj.Frame(a0)
000E4298 1028 0022                          move.b  obj.Status(a0),d0
000E429C 0200 0003                          andi.b  #3,d0
000E42A0 0228 00FC 0001                     andi.b  #$FC,obj.Render(a0)
000E42A6 EA09                               lsr.b   #5,d1
000E42A8 B101                               eor.b   d0,d1
000E42AA 8328 0001                          or.b    d1,obj.Render(a0)
000E42AE 5228 001B                          addq.b  #1,obj.AnimFrame(a0)
000E42B2                            
000E42B2                            .Exit:                                 
000E42B2 4E75                               rts
000E42B4                            
000E42B4                            .HandleFlags:                          
000E42B4 5200                               addq.b  #1,d0
000E42B6 6600                               bne.s   .NotLoop
000E42B8 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E42BE 1029 0001                          move.b  1(a1),d0
000E42C2 60CA                               bra.s   .Finish
000E42C4                            
000E42C4                            .NotLoop:                              
000E42C4 5200                               addq.b  #1,d0
000E42C6 6600                               bne.s   .NotBack
000E42C8 1031 1002                          move.b  2(a1,d1.w),d0
000E42CC 9128 001B                          sub.b   d0,obj.AnimFrame(a0)
000E42D0 9200                               sub.b   d0,d1
000E42D2 1031 1001                          move.b  1(a1,d1.w),d0
000E42D6 60B6                               bra.s   .Finish
000E42D8                            
000E42D8                            .NotBack:                              
000E42D8 5200                               addq.b  #1,d0
000E42DA 6600                               bne.s   .NotChgAni
000E42DC 1171 1002 001C                     move.b  2(a1,d1.w),obj.Anim(a0)
000E42E2                            
000E42E2                            .NotChgAni:                            
000E42E2 5200                               addq.b  #1,d0
000E42E4 6600                               bne.s   .NotRoutine
000E42E6 5428 0024                          addq.b  #2,obj.Action(a0)
000E42EA                            
000E42EA                            .NotRoutine:                           
000E42EA 5200                               addq.b  #1,d0
000E42EC 6600                               bne.s   .NotReset
000E42EE 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E42F4 4228 0025                          clr.b   obj.SubAction(a0)
000E42F8                            
000E42F8                            .NotReset:                             
000E42F8 4E75                               rts
000E42F8 4E75                               rts
000E42FA                            
000E42FA                            ; ---------------------------------------------------------------------------
000E42FA                            
000E42FA                            _beebushDbugLoad:
000E42FA 4E75                               rts
000E42FC                            ; ---------------------------------------------------------------------------   
000E42FC                            ; VBlank code relocation from main file (called from Jmptos)
000E42FC                            ; ---------------------------------------------------------------------------
000E42FC                            
000E42FC                            VBLANK_BEEBUSH:                               
000E42FC 4EB8 1B54                          jsr   ReadJoypads
000E4300                            
000E4300 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E4308                            .WaitZ80:                              
000E4308 0839 0000 00A1 1100                btst    #0,Z80BUS
000E4310 66F6                               bne.s   .WaitZ80
000E4312                            
000E4312 33FC 8B00 00C0 0004                move.w  #$8B00+%0000,VDPCTRL
000E436C 23F8 F61A 00C0 0000                move.l  mainAPosX.w,VDPDATA
000E4374                            
000E4374 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E437C 4E75                               rts
000E437E                            
000E437E                            ; ---------------------------------------------------------------------------
000E437E                            
000E437E                            VBLANK_BEEBUSHSCR:                               
000E437E 4EB8 1B54                          jsr  ReadJoypads
000E4382                            
000E4382 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E438A                            .WaitZ80:                              
000E438A 0839 0000 00A1 1100                btst    #0,Z80BUS
000E4392 66F6                               bne.s   .WaitZ80
000E4394                            
000E4394 33FC 8B03 00C0 0004                move.w  #$8B00+%0011,VDPCTRL
000E4408                            
000E4408 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E4410 4E75                               rts
000E4410 4E75                               rts
000E4412                            ; end of 'ROM'
000E4412                            EndOfRom:
000E4412                            
000E4412                            
