00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B10                            		even
00000B10                            
00000B10                            ; ===========================================================================
00000B10                            
00000B10                            loc_B10:				; XREF: Vectors
00000B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B14 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B18 6700                       		beq.s	loc_B88
00000B1A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B20 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B2A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B32 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B38 6700                       		beq.s	loc_B42
00000B3A 303C 0700                  		move.w	#$700,d0
00000B3E                            
00000B3E                            loc_B3E:
00000B3E 51C8 FFFE                  		dbf	d0,loc_B3E
00000B42                            
00000B42                            loc_B42:
00000B42 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B46 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B4C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B52 0240 003E                  		andi.w	#$3E,d0
00000B56 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B5A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B5E                            
00000B5E                            loc_B5E:				; XREF: loc_B88
00000B5E 4EB9 0000 0000             		jsr	sub_71B4C
00000B64                            
00000B64                            loc_B64:				; XREF: loc_D50
00000B64 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B68 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B6C 4E73                       		rte	
00000B6E                            ; ===========================================================================
00000B6E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B72 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B76 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B7A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B7E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B82 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B86 0000                       		dc.w loc_E72-off_B6E
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_B88:				; XREF: loc_B10; off_B6E
00000B88 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B8E 6700                       		beq.s	loc_B9A
00000B90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B96 6600 FFC6                  		bne.w	loc_B5E
00000B9A                            
00000B9A                            loc_B9A:
00000B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BA0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000BAA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BB0 6700                       		beq.s	loc_BBA
00000BB2 303C 0700                  		move.w	#$700,d0
00000BB6                            
00000BB6                            loc_BB6:
00000BB6 51C8 FFFE                  		dbf	d0,loc_BB6
00000BBA                            
00000BBA                            loc_BBA:
00000BBA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BC8                            
00000BC8                            loc_BC8:
00000BC8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD0 66F6                       		bne.s	loc_BC8
00000BD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD6 6600                       		bne.s	loc_BFE
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC C000                  		move.w	#$C000,(a5)
00000BF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 6000                       		bra.s	loc_C22
00000BFE                            ; ===========================================================================
00000BFE                            
00000BFE                            loc_BFE:				; XREF: loc_BC8
00000BFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C10 3ABC 977F                  		move.w	#$977F,(a5)
00000C14 3ABC C000                  		move.w	#$C000,(a5)
00000C18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C22                            
00000C22                            loc_C22:				; XREF: loc_BC8
00000C22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C2E 6000 FF2E                  		bra.w	loc_B5E
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            loc_C32:				; XREF: off_B6E
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36                            
00000C36                            loc_C36:				; XREF: off_B6E
00000C36 4A78 F614                  		tst.w	($FFFFF614).w
00000C3A 6700 0000                  		beq.w	locret_C42
00000C3E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C42                            
00000C42                            locret_C42:
00000C42 4E75                       		rts	
00000C44                            ; ===========================================================================
00000C44                            
00000C44                            loc_C44:				; XREF: off_B6E
00000C44 6100 0000                  		bsr.w	sub_106E
00000C48 6100 0000                  		bsr.w	sub_6886
00000C4C 6100 0000                  		bsr.w	sub_1642
00000C50 4A78 F614                  		tst.w	($FFFFF614).w
00000C54 6700 0000                  		beq.w	locret_C5C
00000C58 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5C                            
00000C5C                            locret_C5C:
00000C5C 4E75                       		rts	
00000C5E                            ; ===========================================================================
00000C5E                            
00000C5E                            loc_C5E:				; XREF: off_B6E
00000C5E 6100 0000                  		bsr.w	sub_106E
00000C62 4E75                       		rts	
00000C64                            ; ===========================================================================
00000C64                            
00000C64                            loc_C64:				; XREF: off_B6E
00000C64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C6A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C6E                            
00000C6E                            loc_C6E:				; XREF: off_B6E
00000C6E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C76                            
00000C76                            loc_C76:
00000C76 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C7E 66F6                       		bne.s	loc_C76		; if not, branch
00000C80 6100 0000                  		bsr.w	ReadJoypads
00000C84 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C88 6600                       		bne.s	loc_CB0
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 6000                       		bra.s	loc_CD4
00000CB0                            ; ===========================================================================
00000CB0                            
00000CB0                            loc_CB0:				; XREF: loc_C76
00000CB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CBC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CC2 3ABC 977F                  		move.w	#$977F,(a5)
00000CC6 3ABC C000                  		move.w	#$C000,(a5)
00000CCA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD4                            
00000CD4                            loc_CD4:				; XREF: loc_C76
00000CD4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CE4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D02 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D08 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D0E 3ABC 977F                  		move.w	#$977F,(a5)
00000D12 3ABC 7800                  		move.w	#$7800,(a5)
00000D16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D20 4A38 F767                  		tst.b	($FFFFF767).w
00000D24 6700                       		beq.s	loc_D50
00000D26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D32 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D38 3ABC 977F                  		move.w	#$977F,(a5)
00000D3C 3ABC 7000                  		move.w	#$7000,(a5)
00000D40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D4A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D50                            
00000D50                            loc_D50:
00000D50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D58 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D5E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D64 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D6A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D70 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D76 6400                       		bcc.s	Demo_Time
00000D78 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D7E 588F                       		addq.l	#4,sp
00000D80 6000 FDE2                  		bra.w	loc_B64
00000D84                            
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            ; Subroutine to	run a demo for an amount of time
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            
00000D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D84                            
00000D84                            
00000D84                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D84 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D88 4EB9 0000 0000             		jsr	AniArt_Load
00000D8E 4EB9 0000 0000             		jsr	HudUpdate
00000D94 6100 0000                  		bsr.w	sub_165E
00000D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D9C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DA0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DA4                            
00000DA4                            Demo_TimeEnd:
00000DA4 4E75                       		rts	
00000DA6                            ; End of function Demo_Time
00000DA6                            
00000DA6                            ; ===========================================================================
00000DA6                            
00000DA6                            loc_DA6:				; XREF: off_B6E
00000DA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DAE                            
00000DAE                            loc_DAE:
00000DAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DB6 66F6                       		bne.s	loc_DAE		; if not, branch
00000DB8 6100 0000                  		bsr.w	ReadJoypads
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E30 6100 0000                  		bsr.w	PalCycle_SS
00000E34 4A38 F767                  		tst.b	($FFFFF767).w
00000E38 6700                       		beq.s	loc_E64
00000E3A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E40 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E46 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4C 3ABC 977F                  		move.w	#$977F,(a5)
00000E50 3ABC 7000                  		move.w	#$7000,(a5)
00000E54 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E5A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E64                            
00000E64                            loc_E64:
00000E64 4A78 F614                  		tst.w	($FFFFF614).w
00000E68 6700 0000                  		beq.w	locret_E70
00000E6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E70                            
00000E70                            locret_E70:
00000E70 4E75                       		rts	
00000E72                            ; ===========================================================================
00000E72                            
00000E72                            loc_E72:				; XREF: off_B6E
00000E72 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7A                            
00000E7A                            loc_E7A:
00000E7A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E82 66F6                       		bne.s	loc_E7A		; if not, branch
00000E84 6100 0000                  		bsr.w	ReadJoypads
00000E88 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8C 6600                       		bne.s	loc_EB4
00000E8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA0 3ABC 977F                  		move.w	#$977F,(a5)
00000EA4 3ABC C000                  		move.w	#$C000,(a5)
00000EA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB2 6000                       		bra.s	loc_ED8
00000EB4                            ; ===========================================================================
00000EB4                            
00000EB4                            loc_EB4:				; XREF: loc_E7A
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8                            
00000ED8                            loc_ED8:				; XREF: loc_E7A
00000ED8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EEE                            
00000EEE                            loc_EEE:
00000EEE 3ABC 977F                  		move.w	#$977F,(a5)
00000EF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F12 3ABC 977F                  		move.w	#$977F,(a5)
00000F16 3ABC 7800                  		move.w	#$7800,(a5)
00000F1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F24 4A38 F767                  		tst.b	($FFFFF767).w
00000F28 6700                       		beq.s	loc_F54
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F36 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7000                  		move.w	#$7000,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F54                            
00000F54                            loc_F54:
00000F54 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F5C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F62 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F68 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F6E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F74 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F78 4EB9 0000 0000             		jsr	AniArt_Load
00000F7E 4EB9 0000 0000             		jsr	HudUpdate
00000F84 6100 0000                  		bsr.w	sub_1642
00000F88 4E75                       		rts	
00000F8A                            ; ===========================================================================
00000F8A                            
00000F8A                            loc_F8A:				; XREF: off_B6E
00000F8A 6100 0000                  		bsr.w	sub_106E
00000F8E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F92 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F98 4E75                       		rts	
00000F9A                            ; ===========================================================================
00000F9A                            
00000F9A                            loc_F9A:				; XREF: off_B6E
00000F9A 6100 0000                  		bsr.w	sub_106E
00000F9E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FA2 6000 0000                  		bra.w	sub_1642
00000FA6                            ; ===========================================================================
00000FA6                            
00000FA6                            loc_FA6:				; XREF: off_B6E
00000FA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FAE                            
00000FAE                            loc_FAE:
00000FAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB6 66F6                       		bne.s	loc_FAE		; if not, branch
00000FB8 6100 0000                  		bsr.w	ReadJoypads
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC 7800                  		move.w	#$7800,(a5)
00000FFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001010 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001030 4A38 F767                  		tst.b	($FFFFF767).w
00001034 6700                       		beq.s	loc_1060
00001036 4BF9 00C0 0004             		lea	($C00004).l,a5
0000103C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001042 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001048 3ABC 977F                  		move.w	#$977F,(a5)
0000104C 3ABC 7000                  		move.w	#$7000,(a5)
00001050 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001056 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001060                            
00001060                            loc_1060:
00001060 4A78 F614                  		tst.w	($FFFFF614).w
00001064 6700 0000                  		beq.w	locret_106C
00001068 5378 F614                  		subq.w	#1,($FFFFF614).w
0000106C                            
0000106C                            locret_106C:
0000106C 4E75                       		rts	
0000106E                            
0000106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000106E                            
0000106E                            
0000106E                            sub_106E:				; XREF: loc_C32; et al
0000106E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001076                            
00001076                            loc_1076:
00001076 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107E 66F6                       		bne.s	loc_1076	; if not, branch
00001080 6100 0000                  		bsr.w	ReadJoypads
00001084 4A38 F64E                  		tst.b	($FFFFF64E).w
00001088 6600                       		bne.s	loc_10B0
0000108A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001090 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001096 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000109C 3ABC 977F                  		move.w	#$977F,(a5)
000010A0 3ABC C000                  		move.w	#$C000,(a5)
000010A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AE 6000                       		bra.s	loc_10D4
000010B0                            ; ===========================================================================
000010B0                            
000010B0                            loc_10B0:				; XREF: sub_106E
000010B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010C2 3ABC 977F                  		move.w	#$977F,(a5)
000010C6 3ABC C000                  		move.w	#$C000,(a5)
000010CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D4                            
000010D4                            loc_10D4:				; XREF: sub_106E
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010E0 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7800                  		move.w	#$7800,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001104 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001124 4E75                       		rts	
00001126                            ; End of function sub_106E
00001126                            
00001126                            ; ---------------------------------------------------------------------------
00001126                            ; Subroutine to	move pallets from the RAM to CRAM
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001126                            
00001126                            
00001126                            PalToCRAM:
00001126 46FC 2700                  		move	#$2700,sr
0000112A 4A78 F644                  		tst.w	($FFFFF644).w
0000112E 6700                       		beq.s	locret_119C
00001130 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001136 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000113A 43F9 00C0 0000             		lea	($C00000).l,a1
00001140 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001144 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000114C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001192 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001196 4A38 F64F                  		tst.b	($FFFFF64F).w
0000119A 6600                       		bne.s	loc_119E
0000119C                            
0000119C                            locret_119C:
0000119C 4E73                       		rte	
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_119E:				; XREF: PalToCRAM
0000119E 4238 F64F                  		clr.b	($FFFFF64F).w
000011A2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011A6 6100 FBDC                  		bsr.w	Demo_Time
000011AA 4EB9 0000 0000             		jsr	sub_71B4C
000011B0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011B4 4E73                       		rte	
000011B6                            ; End of function PalToCRAM
000011B6                            
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            ; Subroutine to	initialise joypads
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            
000011B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B6                            
000011B6                            
000011B6                            JoypadInit:				; XREF: GameClrRAM
000011B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011BE                            
000011BE                            Joypad_WaitZ80:
000011BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011C6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011C8 7040                       		moveq	#$40,d0
000011CA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011D0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011D6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011E4 4E75                       		rts	
000011E6                            ; End of function JoypadInit
000011E6                            
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            ; Subroutine to	read joypad input, and send it to the RAM
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            
000011E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E6                            
000011E6                            
000011E6                            ReadJoypads:
000011E6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011EA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011F0 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011F2 5449                       		addq.w	#2,a1		; do the second	joypad
000011F4                            
000011F4                            Joypad_Read:
000011F4 12BC 0000                  		move.b	#0,(a1)
000011F8 4E71                       		nop	
000011FA 4E71                       		nop	
000011FC 1011                       		move.b	(a1),d0
000011FE E508                       		lsl.b	#2,d0
00001200 0200 00C0                  		andi.b	#$C0,d0
00001204 12BC 0040                  		move.b	#$40,(a1)
00001208 4E71                       		nop	
0000120A 4E71                       		nop	
0000120C 1211                       		move.b	(a1),d1
0000120E 0201 003F                  		andi.b	#$3F,d1
00001212 8001                       		or.b	d1,d0
00001214 4600                       		not.b	d0
00001216 1210                       		move.b	(a0),d1
00001218 B101                       		eor.b	d0,d1
0000121A 10C0                       		move.b	d0,(a0)+
0000121C C200                       		and.b	d0,d1
0000121E 10C1                       		move.b	d1,(a0)+
00001220 4E75                       		rts	
00001222                            ; End of function ReadJoypads
00001222                            
00001222                            
00001222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001222                            
00001222                            
00001222                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001222 41F9 00C0 0004             		lea	($C00004).l,a0
00001228 43F9 00C0 0000             		lea	($C00000).l,a1
0000122E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001234 7E12                       		moveq	#$12,d7
00001236                            
00001236                            VDP_Loop:
00001236 309A                       		move.w	(a2)+,(a0)
00001238 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000123C                            
0000123C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001242 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001246 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124C 7000                       		moveq	#0,d0
0000124E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001258 3E3C 003F                  		move.w	#$3F,d7
0000125C                            
0000125C                            VDP_ClrCRAM:
0000125C 3280                       		move.w	d0,(a1)
0000125E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001262                            
00001262 42B8 F616                  		clr.l	($FFFFF616).w
00001266 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126A 2F01                       		move.l	d1,-(sp)
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 3ABC 8F01                  		move.w	#$8F01,(a5)
00001276 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127C 3ABC 9780                  		move.w	#$9780,(a5)
00001280 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001286 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000128E                            
0000128E                            loc_128E:
0000128E 3215                       		move.w	(a5),d1
00001290 0801 0001                  		btst	#1,d1
00001294 66F8                       		bne.s	loc_128E
00001296                            
00001296 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129A 221F                       		move.l	(sp)+,d1
0000129C 4E75                       		rts	
0000129E                            ; End of function VDPSetupGame
0000129E                            
0000129E                            ; ===========================================================================
0000129E 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012AE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012BE 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C4                            
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            ; Subroutine to	clear the screen
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            
000012C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C4                            
000012C4                            
000012C4                            ClearScreen:
000012C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012CE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D4 3ABC 9780                  		move.w	#$9780,(a5)
000012D8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012DE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E6                            
000012E6                            loc_12E6:
000012E6 3215                       		move.w	(a5),d1
000012E8 0801 0001                  		btst	#1,d1
000012EC 66F8                       		bne.s	loc_12E6
000012EE                            
000012EE 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001302 3ABC 9780                  		move.w	#$9780,(a5)
00001306 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001314                            
00001314                            loc_1314:
00001314 3215                       		move.w	(a5),d1
00001316 0801 0001                  		btst	#1,d1
0000131A 66F8                       		bne.s	loc_1314
0000131C                            
0000131C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001320 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001328 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001330 43F8 F800                  		lea	($FFFFF800).w,a1
00001334 7000                       		moveq	#0,d0
00001336 323C 00A0                  		move.w	#$A0,d1
0000133A                            
0000133A                            loc_133A:
0000133A 22C0                       		move.l	d0,(a1)+
0000133C 51C9 FFFC                  		dbf	d1,loc_133A
00001340                            
00001340 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001344 7000                       		moveq	#0,d0
00001346 323C 0100                  		move.w	#$100,d1
0000134A                            
0000134A                            loc_134A:
0000134A 22C0                       		move.l	d0,(a1)+
0000134C 51C9 FFFC                  		dbf	d1,loc_134A
00001350 4E75                       		rts	
00001352                            ; End of function ClearScreen
00001352                            
00001352                            ; ---------------------------------------------------------------------------
00001352                            ; Subroutine to	load the sound driver
00001352                            ; ---------------------------------------------------------------------------
00001352                            
00001352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001352                            
00001352                            
00001352                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001352 4E71                       		nop	
00001354 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001364 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136A 43F9 00A0 0000             		lea	($A00000).l,a1
00001370 6100 0000                  		bsr.w	KosDec		; decompress
00001374 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137C 4E71                       		nop	
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001394 4E75                       		rts	
00001396                            ; End of function SoundDriverLoad
00001396                            
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutine to	play a sound or	music track
00001396                            ; ---------------------------------------------------------------------------
00001396                            
00001396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001396                            
00001396                            
00001396                            PlaySound:
00001396 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139A 4E75                       		rts	
0000139C                            ; End of function PlaySound
0000139C                            
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a special sound/music (E0-E4)
0000139C                            ;
0000139C                            ; E0 - Fade out
0000139C                            ; E1 - Sega
0000139C                            ; E2 - Speed up
0000139C                            ; E3 - Normal speed
0000139C                            ; E4 - Stop
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            
0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            
0000139C                            
0000139C                            PlaySound_Special:
0000139C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound_Special
000013A2                            
000013A2                            ; ===========================================================================
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Unused sound/music subroutine
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            PlaySound_Unk:
000013A2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A6 4E75                       		rts	
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	pause the game
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            PauseGame:				; XREF: Level_MainLoop; et al
000013A8 4E71                       		nop	
000013AA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013AE 6700                       		beq.s	Unpause		; if not, branch
000013B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B4 6600                       		bne.s	loc_13BE	; if yes, branch
000013B6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013BE                            
000013BE                            loc_13BE:
000013BE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CA                            
000013CA                            loc_13CA:
000013CA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D0 6100 0000                  		bsr.w	DelayProgram
000013D4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013D8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013E8 4E71                       		nop	
000013EA 6000                       		bra.s	loc_1404
000013EC                            ; ===========================================================================
000013EC                            
000013EC                            Pause_ChkBC:				; XREF: PauseGame
000013EC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FC                            
000013FC                            Pause_ChkStart:				; XREF: PauseGame
000013FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001402 67C6                       		beq.s	loc_13CA	; if not, branch
00001404                            
00001404                            loc_1404:				; XREF: PauseGame
00001404 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140A                            
0000140A                            Unpause:				; XREF: PauseGame
0000140A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001410                            
00001410                            Pause_DoNothing:			; XREF: PauseGame
00001410 4E75                       		rts	
00001412                            ; ===========================================================================
00001412                            
00001412                            Pause_SlowMo:				; XREF: PauseGame
00001412 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001418 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000141E 4E75                       		rts	
00001420                            ; End of function PauseGame
00001420                            
00001420                            ; ---------------------------------------------------------------------------
00001420                            ; Subroutine to	display	patterns via the VDP
00001420                            ; ---------------------------------------------------------------------------
00001420                            
00001420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001420                            
00001420                            
00001420                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001420 4DF9 00C0 0000             		lea	($C00000).l,a6
00001426 283C 0080 0000             		move.l	#$800000,d4
0000142C                            
0000142C                            loc_142C:
0000142C 2D40 0004                  		move.l	d0,4(a6)
00001430 3601                       		move.w	d1,d3
00001432                            
00001432                            loc_1432:
00001432 3C99                       		move.w	(a1)+,(a6)
00001434 51CB FFFC                  		dbf	d3,loc_1432
00001438 D084                       		add.l	d4,d0
0000143A 51CA FFF0                  		dbf	d2,loc_142C
0000143E 4E75                       		rts	
00001440                            ; End of function ShowVDPGraphics
00001440                            
00001440                            ; ---------------------------------------------------------------------------
00001440                            ; Nemesis decompression	algorithm
00001440                            ; ---------------------------------------------------------------------------
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec:
00001440 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001444 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144A 49F9 00C0 0000             		lea	($C00000).l,a4
00001450 6000                       		bra.s	loc_145C
00001452                            ; ===========================================================================
00001452 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001456 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145C                            
0000145C                            loc_145C:				; XREF: NemDec
0000145C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001460 3418                       		move.w	(a0)+,d2
00001462 E34A                       		lsl.w	#1,d2
00001464 6400                       		bcc.s	loc_146A
00001466 D6FC 000A                  		adda.w	#$A,a3
0000146A                            
0000146A                            loc_146A:
0000146A E54A                       		lsl.w	#2,d2
0000146C 3A42                       		movea.w	d2,a5
0000146E 7608                       		moveq	#8,d3
00001470 7400                       		moveq	#0,d2
00001472 7800                       		moveq	#0,d4
00001474 6100 0000                  		bsr.w	NemDec4
00001478 1A18                       		move.b	(a0)+,d5
0000147A E145                       		asl.w	#8,d5
0000147C 1A18                       		move.b	(a0)+,d5
0000147E 3C3C 0010                  		move.w	#$10,d6
00001482 6100                       		bsr.s	NemDec2
00001484 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001488 4E75                       		rts	
0000148A                            ; End of function NemDec
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec2:				; XREF: NemDec
0000148A 3E06                       		move.w	d6,d7
0000148C 5147                       		subq.w	#8,d7
0000148E 3205                       		move.w	d5,d1
00001490 EE69                       		lsr.w	d7,d1
00001492 0C01 00FC                  		cmpi.b	#-4,d1
00001496 6400                       		bcc.s	loc_14D6
00001498 0241 00FF                  		andi.w	#$FF,d1
0000149C D241                       		add.w	d1,d1
0000149E 1031 1000                  		move.b	(a1,d1.w),d0
000014A2 4880                       		ext.w	d0
000014A4 9C40                       		sub.w	d0,d6
000014A6 0C46 0009                  		cmpi.w	#9,d6
000014AA 6400                       		bcc.s	loc_14B2
000014AC 5046                       		addq.w	#8,d6
000014AE E145                       		asl.w	#8,d5
000014B0 1A18                       		move.b	(a0)+,d5
000014B2                            
000014B2                            loc_14B2:
000014B2 1231 1001                  		move.b	1(a1,d1.w),d1
000014B6 3001                       		move.w	d1,d0
000014B8 0241 000F                  		andi.w	#$F,d1
000014BC 0240 00F0                  		andi.w	#$F0,d0
000014C0                            
000014C0                            loc_14C0:				; XREF: NemDec3
000014C0 E848                       		lsr.w	#4,d0
000014C2                            
000014C2                            loc_14C2:				; XREF: NemDec3
000014C2 E98C                       		lsl.l	#4,d4
000014C4 8801                       		or.b	d1,d4
000014C6 5343                       		subq.w	#1,d3
000014C8 6600                       		bne.s	loc_14D0
000014CA 4ED3                       		jmp	(a3)
000014CC                            ; End of function NemDec2
000014CC                            
000014CC                            
000014CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CC                            
000014CC                            
000014CC                            NemDec3:				; XREF: loc_1502
000014CC 7800                       		moveq	#0,d4
000014CE 7608                       		moveq	#8,d3
000014D0                            
000014D0                            loc_14D0:				; XREF: NemDec2
000014D0 51C8 FFF0                  		dbf	d0,loc_14C2
000014D4 60B4                       		bra.s	NemDec2
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_14D6:				; XREF: NemDec2
000014D6 5D46                       		subq.w	#6,d6
000014D8 0C46 0009                  		cmpi.w	#9,d6
000014DC 6400                       		bcc.s	loc_14E4
000014DE 5046                       		addq.w	#8,d6
000014E0 E145                       		asl.w	#8,d5
000014E2 1A18                       		move.b	(a0)+,d5
000014E4                            
000014E4                            loc_14E4:				; XREF: NemDec3
000014E4 5F46                       		subq.w	#7,d6
000014E6 3205                       		move.w	d5,d1
000014E8 EC69                       		lsr.w	d6,d1
000014EA 3001                       		move.w	d1,d0
000014EC 0241 000F                  		andi.w	#$F,d1
000014F0 0240 0070                  		andi.w	#$70,d0
000014F4 0C46 0009                  		cmpi.w	#9,d6
000014F8 64C6                       		bcc.s	loc_14C0
000014FA 5046                       		addq.w	#8,d6
000014FC E145                       		asl.w	#8,d5
000014FE 1A18                       		move.b	(a0)+,d5
00001500 60BE                       		bra.s	loc_14C0
00001502                            ; End of function NemDec3
00001502                            
00001502                            ; ===========================================================================
00001502                            
00001502                            loc_1502:				; XREF: NemDec
00001502 2884                       		move.l	d4,(a4)
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66C2                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            ; ===========================================================================
0000150C B982                       		eor.l	d4,d2
0000150E 2882                       		move.l	d2,(a4)
00001510 534D                       		subq.w	#1,a5
00001512 380D                       		move.w	a5,d4
00001514 66B6                       		bne.s	NemDec3
00001516 4E75                       		rts	
00001518                            ; ===========================================================================
00001518                            
00001518                            loc_1518:				; XREF: NemDec
00001518 28C4                       		move.l	d4,(a4)+
0000151A 534D                       		subq.w	#1,a5
0000151C 380D                       		move.w	a5,d4
0000151E 66AC                       		bne.s	NemDec3
00001520 4E75                       		rts	
00001522                            ; ===========================================================================
00001522 B982                       		eor.l	d4,d2
00001524 28C2                       		move.l	d2,(a4)+
00001526 534D                       		subq.w	#1,a5
00001528 380D                       		move.w	a5,d4
0000152A 66A0                       		bne.s	NemDec3
0000152C 4E75                       		rts	
0000152E                            
0000152E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000152E                            
0000152E                            
0000152E                            NemDec4:				; XREF: NemDec
0000152E 1018                       		move.b	(a0)+,d0
00001530                            
00001530                            loc_1530:
00001530 0C00 00FF                  		cmpi.b	#-1,d0
00001534 6600                       		bne.s	loc_1538
00001536 4E75                       		rts	
00001538                            ; ===========================================================================
00001538                            
00001538                            loc_1538:				; XREF: NemDec4
00001538 3E00                       		move.w	d0,d7
0000153A                            
0000153A                            loc_153A:
0000153A 1018                       		move.b	(a0)+,d0
0000153C 0C00 0080                  		cmpi.b	#$80,d0
00001540 64EE                       		bcc.s	loc_1530
00001542 1200                       		move.b	d0,d1
00001544 0247 000F                  		andi.w	#$F,d7
00001548 0241 0070                  		andi.w	#$70,d1
0000154C 8E41                       		or.w	d1,d7
0000154E 0240 000F                  		andi.w	#$F,d0
00001552 1200                       		move.b	d0,d1
00001554 E149                       		lsl.w	#8,d1
00001556 8E41                       		or.w	d1,d7
00001558 7208                       		moveq	#8,d1
0000155A 9240                       		sub.w	d0,d1
0000155C 6600                       		bne.s	loc_1568
0000155E 1018                       		move.b	(a0)+,d0
00001560 D040                       		add.w	d0,d0
00001562 3387 0000                  		move.w	d7,(a1,d0.w)
00001566 60D2                       		bra.s	loc_153A
00001568                            ; ===========================================================================
00001568                            
00001568                            loc_1568:				; XREF: NemDec4
00001568 1018                       		move.b	(a0)+,d0
0000156A E368                       		lsl.w	d1,d0
0000156C D040                       		add.w	d0,d0
0000156E 7A01                       		moveq	#1,d5
00001570 E36D                       		lsl.w	d1,d5
00001572 5345                       		subq.w	#1,d5
00001574                            
00001574                            loc_1574:
00001574 3387 0000                  		move.w	d7,(a1,d0.w)
00001578 5440                       		addq.w	#2,d0
0000157A 51CD FFF8                  		dbf	d5,loc_1574
0000157E 60BA                       		bra.s	loc_153A
00001580                            ; End of function NemDec4
00001580                            
00001580                            ; ---------------------------------------------------------------------------
00001580                            ; Subroutine to	load pattern load cues
00001580                            ; ---------------------------------------------------------------------------
00001580                            
00001580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001580                            
00001580                            
00001580                            LoadPLC:
00001580 48E7 0060                  		movem.l	a1-a2,-(sp)
00001584 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158A D040                       		add.w	d0,d0
0000158C 3031 0000                  		move.w	(a1,d0.w),d0
00001590 43F1 0000                  		lea	(a1,d0.w),a1
00001594 45F8 F680                  		lea	($FFFFF680).w,a2
00001598                            
00001598                            loc_1598:
00001598 4A92                       		tst.l	(a2)
0000159A 6700                       		beq.s	loc_15A0
0000159C 5C4A                       		addq.w	#6,a2
0000159E 60F8                       		bra.s	loc_1598
000015A0                            ; ===========================================================================
000015A0                            
000015A0                            loc_15A0:				; XREF: LoadPLC
000015A0 3019                       		move.w	(a1)+,d0
000015A2 6B00                       		bmi.s	loc_15AC
000015A4                            
000015A4                            loc_15A4:
000015A4 24D9                       		move.l	(a1)+,(a2)+
000015A6 34D9                       		move.w	(a1)+,(a2)+
000015A8 51C8 FFFA                  		dbf	d0,loc_15A4
000015AC                            
000015AC                            loc_15AC:
000015AC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B0 4E75                       		rts	
000015B2                            ; End of function LoadPLC
000015B2                            
000015B2                            
000015B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B2                            
000015B2                            
000015B2                            LoadPLC2:
000015B2 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BC D040                       		add.w	d0,d0
000015BE 3031 0000                  		move.w	(a1,d0.w),d0
000015C2 43F1 0000                  		lea	(a1,d0.w),a1
000015C6 6100                       		bsr.s	ClearPLC
000015C8 45F8 F680                  		lea	($FFFFF680).w,a2
000015CC 3019                       		move.w	(a1)+,d0
000015CE 6B00                       		bmi.s	loc_15D8
000015D0                            
000015D0                            loc_15D0:
000015D0 24D9                       		move.l	(a1)+,(a2)+
000015D2 34D9                       		move.w	(a1)+,(a2)+
000015D4 51C8 FFFA                  		dbf	d0,loc_15D0
000015D8                            
000015D8                            loc_15D8:
000015D8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DC 4E75                       		rts	
000015DE                            ; End of function LoadPLC2
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	clear the pattern load cues
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            ClearPLC:				; XREF: LoadPLC2
000015DE 45F8 F680                  		lea	($FFFFF680).w,a2
000015E2 701F                       		moveq	#$1F,d0
000015E4                            
000015E4                            ClearPLC_Loop:
000015E4 429A                       		clr.l	(a2)+
000015E6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EA 4E75                       		rts	
000015EC                            ; End of function ClearPLC
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	use graphics listed in a pattern load cue
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EC 4AB8 F680                  		tst.l	($FFFFF680).w
000015F0 6700                       		beq.s	locret_1640
000015F2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F6 6600                       		bne.s	locret_1640
000015F8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FC 47F9 0000 1502             		lea	(loc_1502).l,a3
00001602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001606 3418                       		move.w	(a0)+,d2
00001608 6A00                       		bpl.s	loc_160E
0000160A D6FC 000A                  		adda.w	#$A,a3
0000160E                            
0000160E                            loc_160E:
0000160E 0242 7FFF                  		andi.w	#$7FFF,d2
00001612 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001616 6100 FF16                  		bsr.w	NemDec4
0000161A 1A18                       		move.b	(a0)+,d5
0000161C E145                       		asl.w	#8,d5
0000161E 1A18                       		move.b	(a0)+,d5
00001620 7C10                       		moveq	#$10,d6
00001622 7000                       		moveq	#0,d0
00001624 21C8 F680                  		move.l	a0,($FFFFF680).w
00001628 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001630 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001634 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001638 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001640                            
00001640                            locret_1640:
00001640 4E75                       		rts	
00001642                            ; End of function RunPLC_RAM
00001642                            
00001642                            
00001642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001642                            
00001642                            
00001642                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001642 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001646 6700 0000                  		beq.w	locret_16DA
0000164A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001650 7000                       		moveq	#0,d0
00001652 3038 F684                  		move.w	($FFFFF684).w,d0
00001656 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165C 6000                       		bra.s	loc_1676
0000165E                            ; End of function sub_1642
0000165E                            
0000165E                            
0000165E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165E                            
0000165E                            
0000165E                            sub_165E:				; XREF: Demo_Time
0000165E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001662 6700                       		beq.s	locret_16DA
00001664 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001676                            
00001676                            loc_1676:				; XREF: sub_1642
00001676 49F9 00C0 0004             		lea	($C00004).l,a4
0000167C E588                       		lsl.l	#2,d0
0000167E E448                       		lsr.w	#2,d0
00001680 0040 4000                  		ori.w	#$4000,d0
00001684 4840                       		swap	d0
00001686 2880                       		move.l	d0,(a4)
00001688 594C                       		subq.w	#4,a4
0000168A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000168E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001692 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001696 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000169E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA                            
000016AA                            loc_16AA:				; XREF: sub_165E
000016AA 3A7C 0008                  		movea.w	#8,a5
000016AE 6100 FE1C                  		bsr.w	NemDec3
000016B2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B6 6700                       		beq.s	loc_16DC
000016B8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BC 66EC                       		bne.s	loc_16AA
000016BE 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016CE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DA                            
000016DA                            locret_16DA:				; XREF: sub_1642
000016DA 4E75                       		rts	
000016DC                            ; ===========================================================================
000016DC                            
000016DC                            loc_16DC:				; XREF: sub_165E
000016DC 41F8 F680                  		lea	($FFFFF680).w,a0
000016E0 7015                       		moveq	#$15,d0
000016E2                            
000016E2                            loc_16E2:				; XREF: sub_165E
000016E2 20E8 0006                  		move.l	6(a0),(a0)+
000016E6 51C8 FFFA                  		dbf	d0,loc_16E2
000016EA 4E75                       		rts	
000016EC                            ; End of function sub_165E
000016EC                            
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            ; Subroutine to	execute	the pattern load cue
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            RunPLC_ROM:
000016EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F2 D040                       		add.w	d0,d0
000016F4 3031 0000                  		move.w	(a1,d0.w),d0
000016F8 43F1 0000                  		lea	(a1,d0.w),a1
000016FC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016FE                            
000016FE                            RunPLC_Loop:
000016FE 2059                       		movea.l	(a1)+,a0	; get art pointer
00001700 7000                       		moveq	#0,d0
00001702 3019                       		move.w	(a1)+,d0	; get VRAM address
00001704 E588                       		lsl.l	#2,d0		; divide address by $20
00001706 E448                       		lsr.w	#2,d0
00001708 0040 4000                  		ori.w	#$4000,d0
0000170C 4840                       		swap	d0
0000170E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001714 6100 FD2A                  		bsr.w	NemDec		; decompress
00001718 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171C 4E75                       		rts	
0000171E                            ; End of function RunPLC_ROM
0000171E                            
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            ; Enigma decompression algorithm
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            
0000171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171E                            
0000171E                            
0000171E                            EniDec:
0000171E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001722 3640                       		movea.w	d0,a3
00001724 1018                       		move.b	(a0)+,d0
00001726 4880                       		ext.w	d0
00001728 3A40                       		movea.w	d0,a5
0000172A 1818                       		move.b	(a0)+,d4
0000172C E70C                       		lsl.b	#3,d4
0000172E 3458                       		movea.w	(a0)+,a2
00001730 D4CB                       		adda.w	a3,a2
00001732 3858                       		movea.w	(a0)+,a4
00001734 D8CB                       		adda.w	a3,a4
00001736 1A18                       		move.b	(a0)+,d5
00001738 E145                       		asl.w	#8,d5
0000173A 1A18                       		move.b	(a0)+,d5
0000173C 7C10                       		moveq	#$10,d6
0000173E                            
0000173E                            loc_173E:				; XREF: loc_1768
0000173E 7007                       		moveq	#7,d0
00001740 3E06                       		move.w	d6,d7
00001742 9E40                       		sub.w	d0,d7
00001744 3205                       		move.w	d5,d1
00001746 EE69                       		lsr.w	d7,d1
00001748 0241 007F                  		andi.w	#$7F,d1
0000174C 3401                       		move.w	d1,d2
0000174E 0C41 0040                  		cmpi.w	#$40,d1
00001752 6400                       		bcc.s	loc_1758
00001754 7006                       		moveq	#6,d0
00001756 E24A                       		lsr.w	#1,d2
00001758                            
00001758                            loc_1758:
00001758 6100 0000                  		bsr.w	sub_188C
0000175C 0242 000F                  		andi.w	#$F,d2
00001760 E849                       		lsr.w	#4,d1
00001762 D241                       		add.w	d1,d1
00001764 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001768                            ; End of function EniDec
00001768                            
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1768:				; XREF: loc_17B4
00001768 32CA                       		move.w	a2,(a1)+
0000176A 524A                       		addq.w	#1,a2
0000176C 51CA FFFA                  		dbf	d2,loc_1768
00001770 60CC                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1772:				; XREF: loc_17B4
00001772 32CC                       		move.w	a4,(a1)+
00001774 51CA FFFC                  		dbf	d2,loc_1772
00001778 60C4                       		bra.s	loc_173E
0000177A                            ; ===========================================================================
0000177A                            
0000177A                            loc_177A:				; XREF: loc_17B4
0000177A 6100 0000                  		bsr.w	loc_17DC
0000177E                            
0000177E                            loc_177E:
0000177E 32C1                       		move.w	d1,(a1)+
00001780 51CA FFFC                  		dbf	d2,loc_177E
00001784 60B8                       		bra.s	loc_173E
00001786                            ; ===========================================================================
00001786                            
00001786                            loc_1786:				; XREF: loc_17B4
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A                            
0000178A                            loc_178A:
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 5241                       		addq.w	#1,d1
0000178E 51CA FFFA                  		dbf	d2,loc_178A
00001792 60AA                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_1794:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_1798:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 5341                       		subq.w	#1,d1
0000179C 51CA FFFA                  		dbf	d2,loc_1798
000017A0 609C                       		bra.s	loc_173E
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17A2:				; XREF: loc_17B4
000017A2 0C42 000F                  		cmpi.w	#$F,d2
000017A6 6700                       		beq.s	loc_17C4
000017A8                            
000017A8                            loc_17A8:
000017A8 6100 0000                  		bsr.w	loc_17DC
000017AC 32C1                       		move.w	d1,(a1)+
000017AE 51CA FFF8                  		dbf	d2,loc_17A8
000017B2 608A                       		bra.s	loc_173E
000017B4                            ; ===========================================================================
000017B4                            
000017B4                            loc_17B4:				; XREF: EniDec
000017B4 60B2                       		bra.s	loc_1768
000017B6                            ; ===========================================================================
000017B6 60B0                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B8                       		bra.s	loc_1772
000017BA                            ; ===========================================================================
000017BA 60B6                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60BC                       		bra.s	loc_177A
000017BE                            ; ===========================================================================
000017BE 60C6                       		bra.s	loc_1786
000017C0                            ; ===========================================================================
000017C0 60D2                       		bra.s	loc_1794
000017C2                            ; ===========================================================================
000017C2 60DE                       		bra.s	loc_17A2
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_17C4:				; XREF: loc_17A2
000017C4 5348                       		subq.w	#1,a0
000017C6 0C46 0010                  		cmpi.w	#$10,d6
000017CA 6600                       		bne.s	loc_17CE
000017CC 5348                       		subq.w	#1,a0
000017CE                            
000017CE                            loc_17CE:
000017CE 3008                       		move.w	a0,d0
000017D0 E248                       		lsr.w	#1,d0
000017D2 6400                       		bcc.s	loc_17D6
000017D4 5248                       		addq.w	#1,a0
000017D6                            
000017D6                            loc_17D6:
000017D6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DA 4E75                       		rts	
000017DC                            ; ===========================================================================
000017DC                            
000017DC                            loc_17DC:				; XREF: loc_17A2
000017DC 360B                       		move.w	a3,d3
000017DE 1204                       		move.b	d4,d1
000017E0 D201                       		add.b	d1,d1
000017E2 6400                       		bcc.s	loc_17EE
000017E4 5346                       		subq.w	#1,d6
000017E6 0D05                       		btst	d6,d5
000017E8 6700                       		beq.s	loc_17EE
000017EA 0043 8000                  		ori.w	#-$8000,d3
000017EE                            
000017EE                            loc_17EE:
000017EE D201                       		add.b	d1,d1
000017F0 6400                       		bcc.s	loc_17FC
000017F2 5346                       		subq.w	#1,d6
000017F4 0D05                       		btst	d6,d5
000017F6 6700                       		beq.s	loc_17FC
000017F8 0643 4000                  		addi.w	#$4000,d3
000017FC                            
000017FC                            loc_17FC:
000017FC D201                       		add.b	d1,d1
000017FE 6400                       		bcc.s	loc_180A
00001800 5346                       		subq.w	#1,d6
00001802 0D05                       		btst	d6,d5
00001804 6700                       		beq.s	loc_180A
00001806 0643 2000                  		addi.w	#$2000,d3
0000180A                            
0000180A                            loc_180A:
0000180A D201                       		add.b	d1,d1
0000180C 6400                       		bcc.s	loc_1818
0000180E 5346                       		subq.w	#1,d6
00001810 0D05                       		btst	d6,d5
00001812 6700                       		beq.s	loc_1818
00001814 0043 1000                  		ori.w	#$1000,d3
00001818                            
00001818                            loc_1818:
00001818 D201                       		add.b	d1,d1
0000181A 6400                       		bcc.s	loc_1826
0000181C 5346                       		subq.w	#1,d6
0000181E 0D05                       		btst	d6,d5
00001820 6700                       		beq.s	loc_1826
00001822 0043 0800                  		ori.w	#$800,d3
00001826                            
00001826                            loc_1826:
00001826 3205                       		move.w	d5,d1
00001828 3E06                       		move.w	d6,d7
0000182A 9E4D                       		sub.w	a5,d7
0000182C 6400                       		bcc.s	loc_1856
0000182E 3C07                       		move.w	d7,d6
00001830 0646 0010                  		addi.w	#$10,d6
00001834 4447                       		neg.w	d7
00001836 EF69                       		lsl.w	d7,d1
00001838 1A10                       		move.b	(a0),d5
0000183A EF3D                       		rol.b	d7,d5
0000183C DE47                       		add.w	d7,d7
0000183E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001842 D245                       		add.w	d5,d1
00001844                            
00001844                            loc_1844:				; XREF: loc_1868
00001844 300D                       		move.w	a5,d0
00001846 D040                       		add.w	d0,d0
00001848 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184C D243                       		add.w	d3,d1
0000184E 1A18                       		move.b	(a0)+,d5
00001850 E14D                       		lsl.w	#8,d5
00001852 1A18                       		move.b	(a0)+,d5
00001854 4E75                       		rts	
00001856                            ; ===========================================================================
00001856                            
00001856                            loc_1856:				; XREF: loc_1826
00001856 6700                       		beq.s	loc_1868
00001858 EE69                       		lsr.w	d7,d1
0000185A 300D                       		move.w	a5,d0
0000185C D040                       		add.w	d0,d0
0000185E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001862 D243                       		add.w	d3,d1
00001864 300D                       		move.w	a5,d0
00001866 6000                       		bra.s	sub_188C
00001868                            ; ===========================================================================
00001868                            
00001868                            loc_1868:				; XREF: loc_1856
00001868 7C10                       		moveq	#$10,d6
0000186A                            
0000186A                            loc_186A:
0000186A 60D8                       		bra.s	loc_1844
0000186C                            ; ===========================================================================
0000186C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001882 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_188C:				; XREF: EniDec
0000188C 9C40                       		sub.w	d0,d6
0000188E 0C46 0009                  		cmpi.w	#9,d6
00001892 6400                       		bcc.s	locret_189A
00001894 5046                       		addq.w	#8,d6
00001896 E145                       		asl.w	#8,d5
00001898 1A18                       		move.b	(a0)+,d5
0000189A                            
0000189A                            locret_189A:
0000189A 4E75                       		rts	
0000189C                            ; End of function sub_188C
0000189C                            
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            ; Kosinski decompression algorithm
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            KosDec:
0000189C                            
0000189C =FFFFFFFE                  var_2		= -2
0000189C =FFFFFFFF                  var_1		= -1
0000189C                            
0000189C 558F                       		subq.l	#2,sp
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18A8:
000018A8 E24D                       		lsr.w	#1,d5
000018AA 40C6                       		move	sr,d6
000018AC 51CC 0000                  		dbf	d4,loc_18BA
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18BA:
000018BA 44C6                       		move	d6,ccr
000018BC 6400                       		bcc.s	loc_18C2
000018BE 12D8                       		move.b	(a0)+,(a1)+
000018C0 60E6                       		bra.s	loc_18A8
000018C2                            ; ===========================================================================
000018C2                            
000018C2                            loc_18C2:				; XREF: KosDec
000018C2 7600                       		moveq	#0,d3
000018C4 E24D                       		lsr.w	#1,d5
000018C6 40C6                       		move	sr,d6
000018C8 51CC 0000                  		dbf	d4,loc_18D6
000018CC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D0 1E98                       		move.b	(a0)+,(sp)
000018D2 3A17                       		move.w	(sp),d5
000018D4 780F                       		moveq	#$F,d4
000018D6                            
000018D6                            loc_18D6:
000018D6 44C6                       		move	d6,ccr
000018D8 6500                       		bcs.s	loc_1906
000018DA E24D                       		lsr.w	#1,d5
000018DC 51CC 0000                  		dbf	d4,loc_18EA
000018E0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E4 1E98                       		move.b	(a0)+,(sp)
000018E6 3A17                       		move.w	(sp),d5
000018E8 780F                       		moveq	#$F,d4
000018EA                            
000018EA                            loc_18EA:
000018EA E353                       		roxl.w	#1,d3
000018EC E24D                       		lsr.w	#1,d5
000018EE 51CC 0000                  		dbf	d4,loc_18FC
000018F2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F6 1E98                       		move.b	(a0)+,(sp)
000018F8 3A17                       		move.w	(sp),d5
000018FA 780F                       		moveq	#$F,d4
000018FC                            
000018FC                            loc_18FC:
000018FC E353                       		roxl.w	#1,d3
000018FE 5243                       		addq.w	#1,d3
00001900 74FF                       		moveq	#-1,d2
00001902 1418                       		move.b	(a0)+,d2
00001904 6000                       		bra.s	loc_191C
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1906:				; XREF: loc_18C2
00001906 1018                       		move.b	(a0)+,d0
00001908 1218                       		move.b	(a0)+,d1
0000190A 74FF                       		moveq	#-1,d2
0000190C 1401                       		move.b	d1,d2
0000190E EB4A                       		lsl.w	#5,d2
00001910 1400                       		move.b	d0,d2
00001912 0241 0007                  		andi.w	#7,d1
00001916 6700                       		beq.s	loc_1928
00001918 1601                       		move.b	d1,d3
0000191A 5243                       		addq.w	#1,d3
0000191C                            
0000191C                            loc_191C:
0000191C 1031 2000                  		move.b	(a1,d2.w),d0
00001920 12C0                       		move.b	d0,(a1)+
00001922 51CB FFF8                  		dbf	d3,loc_191C
00001926 6080                       		bra.s	loc_18A8
00001928                            ; ===========================================================================
00001928                            
00001928                            loc_1928:				; XREF: loc_1906
00001928 1218                       		move.b	(a0)+,d1
0000192A 6700                       		beq.s	loc_1938
0000192C 0C01 0001                  		cmpi.b	#1,d1
00001930 6700 FF76                  		beq.w	loc_18A8
00001934 1601                       		move.b	d1,d3
00001936 60E4                       		bra.s	loc_191C
00001938                            ; ===========================================================================
00001938                            
00001938                            loc_1938:				; XREF: loc_1928
00001938 548F                       		addq.l	#2,sp
0000193A 4E75                       		rts	
0000193C                            ; End of function KosDec
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Pallet cycling routine loading subroutine
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193C 7400                       		moveq	#0,d2
0000193E 7000                       		moveq	#0,d0
00001940 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001944 D040                       		add.w	d0,d0		; multiply by 2
00001946 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000194A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000194E                            ; End of function PalCycle_Load
0000194E                            
0000194E                            ; ===========================================================================
0000194E                            ; ---------------------------------------------------------------------------
0000194E                            ; Pallet cycling routines
0000194E                            ; ---------------------------------------------------------------------------
0000194E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001950 0000                       		dc.w PalCycle_LZ-PalCycle
00001952 0000                       		dc.w PalCycle_MZ-PalCycle
00001954 0000                       		dc.w PalCycle_SLZ-PalCycle
00001956 0000                       		dc.w PalCycle_SYZ-PalCycle
00001958 0000                       		dc.w PalCycle_SBZ-PalCycle
0000195A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000195C                            
0000195C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195C                            
0000195C                            
0000195C                            PalCycle_Title:				; XREF: TitleScreen
0000195C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001962 6000                       		bra.s	loc_196A
00001964                            ; ===========================================================================
00001964                            
00001964                            PalCycle_GHZ:				; XREF: PalCycle
00001964 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000196A                            
0000196A                            loc_196A:				; XREF: PalCycle_Title
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1990
00001970 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001976 3038 F632                  		move.w	($FFFFF632).w,d0
0000197A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000197E 0240 0003                  		andi.w	#3,d0
00001982 E748                       		lsl.w	#3,d0
00001984 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001988 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000198C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001990                            
00001990                            locret_1990:
00001990 4E75                       		rts	
00001992                            ; End of function PalCycle_Title
00001992                            
00001992                            
00001992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001992                            
00001992                            
00001992                            PalCycle_LZ:				; XREF: PalCycle
00001992 5378 F634                  		subq.w	#1,($FFFFF634).w
00001996 6A00                       		bpl.s	loc_19D8
00001998 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000199E 3038 F632                  		move.w	($FFFFF632).w,d0
000019A2 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A6 0240 0003                  		andi.w	#3,d0
000019AA E748                       		lsl.w	#3,d0
000019AC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019B8 6600                       		bne.s	loc_19C0
000019BA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019C0                            
000019C0                            loc_19C0:
000019C0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019C4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019CC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8                            
000019D8                            loc_19D8:
000019D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019DC 0240 0007                  		andi.w	#7,d0
000019E0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019E4 6700                       		beq.s	locret_1A3A
000019E6 7201                       		moveq	#1,d1
000019E8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019EC 6700                       		beq.s	loc_19F0
000019EE 4441                       		neg.w	d1
000019F0                            
000019F0                            loc_19F0:
000019F0 3038 F650                  		move.w	($FFFFF650).w,d0
000019F4 0240 0003                  		andi.w	#3,d0
000019F8 D041                       		add.w	d1,d0
000019FA 0C40 0003                  		cmpi.w	#3,d0
000019FE 6500                       		bcs.s	loc_1A0A
00001A00 3200                       		move.w	d0,d1
00001A02 7000                       		moveq	#0,d0
00001A04 4A41                       		tst.w	d1
00001A06 6A00                       		bpl.s	loc_1A0A
00001A08 7002                       		moveq	#2,d0
00001A0A                            
00001A0A                            loc_1A0A:
00001A0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A0E D040                       		add.w	d0,d0
00001A10 3200                       		move.w	d0,d1
00001A12 D040                       		add.w	d0,d0
00001A14 D041                       		add.w	d1,d0
00001A16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A3A                            
00001A3A                            locret_1A3A:
00001A3A 4E75                       		rts	
00001A3C                            ; End of function PalCycle_LZ
00001A3C                            
00001A3C                            ; ===========================================================================
00001A3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A44                            ; ===========================================================================
00001A44                            
00001A44                            PalCycle_MZ:				; XREF: PalCycle
00001A44 4E75                       		rts	
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            
00001A46                            PalCycle_SLZ:				; XREF: PalCycle
00001A46 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4A 6A00                       		bpl.s	locret_1A80
00001A4C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A52 3038 F632                  		move.w	($FFFFF632).w,d0
00001A56 5240                       		addq.w	#1,d0
00001A58 0C40 0006                  		cmpi.w	#6,d0
00001A5C 6500                       		bcs.s	loc_1A60
00001A5E 7000                       		moveq	#0,d0
00001A60                            
00001A60                            loc_1A60:
00001A60 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A64 3200                       		move.w	d0,d1
00001A66 D241                       		add.w	d1,d1
00001A68 D041                       		add.w	d1,d0
00001A6A D040                       		add.w	d0,d0
00001A6C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A72 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A76 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A7A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A80                            
00001A80                            locret_1A80:
00001A80 4E75                       		rts	
00001A82                            ; End of function PalCycle_SLZ
00001A82                            
00001A82                            
00001A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A82                            
00001A82                            
00001A82                            PalCycle_SYZ:				; XREF: PalCycle
00001A82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A86 6A00                       		bpl.s	locret_1AC6
00001A88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A96 0240 0003                  		andi.w	#3,d0
00001A9A E548                       		lsl.w	#2,d0
00001A9C 3200                       		move.w	d0,d1
00001A9E D040                       		add.w	d0,d0
00001AA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001AAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001ABC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AC6                            
00001AC6                            locret_1AC6:
00001AC6 4E75                       		rts	
00001AC8                            ; End of function PalCycle_SYZ
00001AC8                            
00001AC8                            
00001AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC8                            
00001AC8                            
00001AC8                            PalCycle_SBZ:				; XREF: PalCycle
00001AC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001ACE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AD2 6700                       		beq.s	loc_1ADA
00001AD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001ADA                            
00001ADA                            loc_1ADA:
00001ADA 43F8 F650                  		lea	($FFFFF650).w,a1
00001ADE 321A                       		move.w	(a2)+,d1
00001AE0                            
00001AE0                            loc_1AE0:
00001AE0 5311                       		subq.b	#1,(a1)
00001AE2 6B00                       		bmi.s	loc_1AEA
00001AE4 5489                       		addq.l	#2,a1
00001AE6 5C8A                       		addq.l	#6,a2
00001AE8 6000                       		bra.s	loc_1B06
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AEA 12DA                       		move.b	(a2)+,(a1)+
00001AEC 1011                       		move.b	(a1),d0
00001AEE 5200                       		addq.b	#1,d0
00001AF0 B01A                       		cmp.b	(a2)+,d0
00001AF2 6500                       		bcs.s	loc_1AF6
00001AF4 7000                       		moveq	#0,d0
00001AF6                            
00001AF6                            loc_1AF6:
00001AF6 12C0                       		move.b	d0,(a1)+
00001AF8 0240 000F                  		andi.w	#$F,d0
00001AFC D040                       		add.w	d0,d0
00001AFE 305A                       		movea.w	(a2)+,a0
00001B00 365A                       		movea.w	(a2)+,a3
00001B02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B06                            
00001B06                            loc_1B06:				; XREF: PalCycle_SBZ
00001B06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0E 6A00                       		bpl.s	locret_1B64
00001B10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B20 6700                       		beq.s	loc_1B2E
00001B22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B2E                            
00001B2E                            loc_1B2E:
00001B2E 72FF                       		moveq	#-1,d1
00001B30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B34 6700                       		beq.s	loc_1B38
00001B36 4441                       		neg.w	d1
00001B38                            
00001B38                            loc_1B38:
00001B38 3038 F632                  		move.w	($FFFFF632).w,d0
00001B3C 0240 0003                  		andi.w	#3,d0
00001B40 D041                       		add.w	d1,d0
00001B42 0C40 0003                  		cmpi.w	#3,d0
00001B46 6500                       		bcs.s	loc_1B52
00001B48 3200                       		move.w	d0,d1
00001B4A 7000                       		moveq	#0,d0
00001B4C 4A41                       		tst.w	d1
00001B4E 6A00                       		bpl.s	loc_1B52
00001B50 7002                       		moveq	#2,d0
00001B52                            
00001B52                            loc_1B52:
00001B52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B56 D040                       		add.w	d0,d0
00001B58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B64                            
00001B64                            locret_1B64:
00001B64 4E75                       		rts	
00001B66                            ; End of function PalCycle_SBZ
00001B66                            
00001B66                            ; ===========================================================================
00001B66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CA6                            
00001CA6                            Pal_SBZCycList:
00001CA6                            	include "_inc\SBZ pallet script 1.asm"
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6                            ; Scrap Brain Zone 1 pallet cycling script
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6 0008                       	dc.w 8			; number of entries - 1
00001CA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CAC FB50                       	dc.w $FB50		; RAM address
00001CAE 0D08                       	dc.b $D, 8
00001CB0 0000                       	dc.w Pal_SBZCyc2
00001CB2 FB52                       	dc.w $FB52
00001CB4 0E08                       	dc.b $E, 8
00001CB6 0000                       	dc.w Pal_SBZCyc3
00001CB8 FB6E                       	dc.w $FB6E
00001CBA 0B08                       	dc.b $B, 8
00001CBC 0000                       	dc.w Pal_SBZCyc5
00001CBE FB70                       	dc.w $FB70
00001CC0 0708                       	dc.b 7,	8
00001CC2 0000                       	dc.w Pal_SBZCyc6
00001CC4 FB72                       	dc.w $FB72
00001CC6 1C10                       	dc.b $1C, $10
00001CC8 0000                       	dc.w Pal_SBZCyc7
00001CCA FB7E                       	dc.w $FB7E
00001CCC 0303                       	dc.b 3,	3
00001CCE 0000                       	dc.w Pal_SBZCyc8
00001CD0 FB78                       	dc.w $FB78
00001CD2 0303                       	dc.b 3,	3
00001CD4 0000                       	dc.w Pal_SBZCyc8+2
00001CD6 FB7A                       	dc.w $FB7A
00001CD8 0303                       	dc.b 3,	3
00001CDA 0000                       	dc.w Pal_SBZCyc8+4
00001CDC FB7C                       	dc.w $FB7C
00001CDE                            	even
00001CDE                            	even
00001CDE                            
00001CDE                            Pal_SBZCycList2:
00001CDE                            	include "_inc\SBZ pallet script 2.asm"
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE                            ; Scrap Brain Zone 2 pallet cycling script
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE 0006                       	dc.w 6
00001CE0 0708                       	dc.b 7,	8
00001CE2 0000                       	dc.w Pal_SBZCyc1
00001CE4 FB50                       	dc.w $FB50
00001CE6 0D08                       	dc.b $D, 8
00001CE8 0000                       	dc.w Pal_SBZCyc2
00001CEA FB52                       	dc.w $FB52
00001CEC 0908                       	dc.b 9,	8
00001CEE 0000                       	dc.w Pal_SBZCyc9
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 0303                       	dc.b 3,	3
00001CFA 0000                       	dc.w Pal_SBZCyc8
00001CFC FB78                       	dc.w $FB78
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8+2
00001D02 FB7A                       	dc.w $FB7A
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+4
00001D08 FB7C                       	dc.w $FB7C
00001D0A                            	even
00001D0A                            	even
00001D0A                            
00001D0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            ; Subroutine to	fade out and fade in
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            
00001DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAC                            
00001DAC                            
00001DAC                            Pal_FadeTo:
00001DAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DB2                            
00001DB2                            Pal_FadeTo2:
00001DB2 7000                       		moveq	#0,d0
00001DB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DBC D0C0                       		adda.w	d0,a0
00001DBE 7200                       		moveq	#0,d1
00001DC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DC4                            
00001DC4                            Pal_ToBlack:
00001DC4 30C1                       		move.w	d1,(a0)+
00001DC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DCA                            
00001DCA 383C 0015                  		move.w	#$15,d4
00001DCE                            
00001DCE                            loc_1DCE:
00001DCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD4 6100 0000                  		bsr.w	DelayProgram
00001DD8 6100                       		bsr.s	Pal_FadeIn
00001DDA 6100 F810                  		bsr.w	RunPLC_RAM
00001DDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_FadeTo
00001DE4                            
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            ; Pallet fade-in subroutine
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF2 D0C0                       		adda.w	d0,a0
00001DF4 D2C0                       		adda.w	d0,a1
00001DF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFA                            
00001DFA                            loc_1DFA:
00001DFA 6100                       		bsr.s	Pal_AddColor
00001DFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E06 6600                       		bne.s	locret_1E24
00001E08 7000                       		moveq	#0,d0
00001E0A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E0E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E12 1038 F626                  		move.b	($FFFFF626).w,d0
00001E16 D0C0                       		adda.w	d0,a0
00001E18 D2C0                       		adda.w	d0,a1
00001E1A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E1E                            
00001E1E                            loc_1E1E:
00001E1E 6100                       		bsr.s	Pal_AddColor
00001E20 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E24                            
00001E24                            locret_1E24:
00001E24 4E75                       		rts	
00001E26                            ; End of function Pal_FadeIn
00001E26                            
00001E26                            
00001E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E26                            
00001E26                            
00001E26                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E26 3419                       		move.w	(a1)+,d2
00001E28 3610                       		move.w	(a0),d3
00001E2A B642                       		cmp.w	d2,d3
00001E2C 6700                       		beq.s	loc_1E4E
00001E2E 3203                       		move.w	d3,d1
00001E30 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E34 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E36 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E38 30C1                       		move.w	d1,(a0)+	; update pallet
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E42 B242                       		cmp.w	d2,d1
00001E44 6200                       		bhi.s	Pal_AddRed
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E4A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E4C 4E75                       		rts	
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1E4E:				; XREF: Pal_AddColor
00001E4E 5448                       		addq.w	#2,a0
00001E50 4E75                       		rts	
00001E52                            ; End of function Pal_AddColor
00001E52                            
00001E52                            
00001E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E52                            
00001E52                            
00001E52                            Pal_FadeFrom:
00001E52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E58 383C 0015                  		move.w	#$15,d4
00001E5C                            
00001E5C                            loc_1E5C:
00001E5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E62 6100 0000                  		bsr.w	DelayProgram
00001E66 6100                       		bsr.s	Pal_FadeOut
00001E68 6100 F782                  		bsr.w	RunPLC_RAM
00001E6C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E70 4E75                       		rts	
00001E72                            ; End of function Pal_FadeFrom
00001E72                            
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Pallet fade-out subroutine
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            
00001E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E72                            
00001E72                            
00001E72                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E72 7000                       		moveq	#0,d0
00001E74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E78 1038 F626                  		move.b	($FFFFF626).w,d0
00001E7C D0C0                       		adda.w	d0,a0
00001E7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E82                            
00001E82                            loc_1E82:
00001E82 6100                       		bsr.s	Pal_DecColor
00001E84 51C8 FFFC                  		dbf	d0,loc_1E82
00001E88                            
00001E88 7000                       		moveq	#0,d0
00001E8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E92 D0C0                       		adda.w	d0,a0
00001E94 1038 F627                  		move.b	($FFFFF627).w,d0
00001E98                            
00001E98                            loc_1E98:
00001E98 6100                       		bsr.s	Pal_DecColor
00001E9A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E9E 4E75                       		rts	
00001EA0                            ; End of function Pal_FadeOut
00001EA0                            
00001EA0                            
00001EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA0                            
00001EA0                            
00001EA0                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EA0 3410                       		move.w	(a0),d2
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 3202                       		move.w	d2,d1
00001EA6 0241 000E                  		andi.w	#$E,d1
00001EAA 6700                       		beq.s	Pal_DecGreen
00001EAC 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EAE 4E75                       		rts	
00001EB0                            ; ===========================================================================
00001EB0                            
00001EB0                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EB0 3202                       		move.w	d2,d1
00001EB2 0241 00E0                  		andi.w	#$E0,d1
00001EB6 6700                       		beq.s	Pal_DecBlue
00001EB8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 0E00                  		andi.w	#$E00,d1
00001EC4 6700                       		beq.s	loc_1ECC
00001EC6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1ECC:				; XREF: Pal_DecColor
00001ECC 5448                       		addq.w	#2,a0
00001ECE 4E75                       		rts	
00001ED0                            ; End of function Pal_DecColor
00001ED0                            
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            ; Subroutine to	fill the pallet	with white (special stage)
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            
00001ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED0                            
00001ED0                            
00001ED0                            Pal_MakeWhite:				; XREF: SpecialStage
00001ED0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001ED6 7000                       		moveq	#0,d0
00001ED8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EE0 D0C0                       		adda.w	d0,a0
00001EE2 323C 0EEE                  		move.w	#$EEE,d1
00001EE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EEA                            
00001EEA                            PalWhite_Loop:
00001EEA 30C1                       		move.w	d1,(a0)+
00001EEC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1EF4:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_WhiteToBlack
00001F00 6100 F6EA                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1EF4
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeWhite
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A D2C0                       		adda.w	d0,a1
00001F1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F20                            
00001F20                            loc_1F20:
00001F20 6100                       		bsr.s	Pal_DecColor2
00001F22 51C8 FFFC                  		dbf	d0,loc_1F20
00001F26                            
00001F26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F2C 6600                       		bne.s	locret_1F4A
00001F2E 7000                       		moveq	#0,d0
00001F30 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F34 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F38 1038 F626                  		move.b	($FFFFF626).w,d0
00001F3C D0C0                       		adda.w	d0,a0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 1038 F627                  		move.b	($FFFFF627).w,d0
00001F44                            
00001F44                            loc_1F44:
00001F44 6100                       		bsr.s	Pal_DecColor2
00001F46 51C8 FFFC                  		dbf	d0,loc_1F44
00001F4A                            
00001F4A                            locret_1F4A:
00001F4A 4E75                       		rts	
00001F4C                            ; End of function Pal_WhiteToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F4C 3419                       		move.w	(a1)+,d2
00001F4E 3610                       		move.w	(a0),d3
00001F50 B642                       		cmp.w	d2,d3
00001F52 6700                       		beq.s	loc_1F78
00001F54 3203                       		move.w	d3,d1
00001F56 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F5A 6500                       		bcs.s	loc_1F64
00001F5C B242                       		cmp.w	d2,d1
00001F5E 6500                       		bcs.s	loc_1F64
00001F60 30C1                       		move.w	d1,(a0)+
00001F62 4E75                       		rts	
00001F64                            ; ===========================================================================
00001F64                            
00001F64                            loc_1F64:				; XREF: Pal_DecColor2
00001F64 3203                       		move.w	d3,d1
00001F66 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F6A 6500                       		bcs.s	loc_1F74
00001F6C B242                       		cmp.w	d2,d1
00001F6E 6500                       		bcs.s	loc_1F74
00001F70 30C1                       		move.w	d1,(a0)+
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_1F74:				; XREF: loc_1F64
00001F74 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F78:				; XREF: Pal_DecColor2
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function Pal_DecColor2
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F82 383C 0015                  		move.w	#$15,d4
00001F86                            
00001F86                            loc_1F86:
00001F86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F8C 6100 0000                  		bsr.w	DelayProgram
00001F90 6100                       		bsr.s	Pal_ToWhite
00001F92 6100 F658                  		bsr.w	RunPLC_RAM
00001F96 51CC FFEE                  		dbf	d4,loc_1F86
00001F9A 4E75                       		rts	
00001F9C                            ; End of function Pal_MakeFlash
00001F9C                            
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FAC:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            loc_1FC2:
00001FC2 6100                       		bsr.s	Pal_AddColor2
00001FC4 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_ToWhite
00001FCA                            
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FCA 3410                       		move.w	(a0),d2
00001FCC 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FD0 6700                       		beq.s	loc_2006
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 000E                  		andi.w	#$E,d1
00001FD8 0C41 000E                  		cmpi.w	#$E,d1
00001FDC 6700                       		beq.s	loc_1FE2
00001FDE 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 00E0                  		andi.w	#$E0,d1
00001FE8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FEC 6700                       		beq.s	loc_1FF4
00001FEE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_1FF4:				; XREF: loc_1FE2
00001FF4 3202                       		move.w	d2,d1
00001FF6 0241 0E00                  		andi.w	#$E00,d1
00001FFA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FFE 6700                       		beq.s	loc_2006
00002000 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            loc_2006:				; XREF: Pal_AddColor2
00002006 5448                       		addq.w	#2,a0
00002008 4E75                       		rts	
0000200A                            ; End of function Pal_AddColor2
0000200A                            
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            ; Pallet cycling routine - Sega	logo
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            
0000200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200A                            
0000200A                            
0000200A                            PalCycle_Sega:				; XREF: SegaScreen
0000200A 4A38 F635                  		tst.b	($FFFFF635).w
0000200E 6600                       		bne.s	loc_206A
00002010 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002014 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000201A 7205                       		moveq	#5,d1
0000201C 3038 F632                  		move.w	($FFFFF632).w,d0
00002020                            
00002020                            loc_2020:
00002020 6A00                       		bpl.s	loc_202A
00002022 5448                       		addq.w	#2,a0
00002024 5341                       		subq.w	#1,d1
00002026 5440                       		addq.w	#2,d0
00002028 60F6                       		bra.s	loc_2020
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_202A:				; XREF: PalCycle_Sega
0000202A 3400                       		move.w	d0,d2
0000202C 0242 001E                  		andi.w	#$1E,d2
00002030 6600                       		bne.s	loc_2034
00002032 5440                       		addq.w	#2,d0
00002034                            
00002034                            loc_2034:
00002034 0C40 0060                  		cmpi.w	#$60,d0
00002038 6400                       		bcc.s	loc_203E
0000203A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000203E                            
0000203E                            loc_203E:
0000203E 5440                       		addq.w	#2,d0
00002040 51C9 FFE8                  		dbf	d1,loc_202A
00002044 3038 F632                  		move.w	($FFFFF632).w,d0
00002048 5440                       		addq.w	#2,d0
0000204A 3400                       		move.w	d0,d2
0000204C 0242 001E                  		andi.w	#$1E,d2
00002050 6600                       		bne.s	loc_2054
00002052 5440                       		addq.w	#2,d0
00002054                            
00002054                            loc_2054:
00002054 0C40 0064                  		cmpi.w	#$64,d0
00002058 6D00                       		blt.s	loc_2062
0000205A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002060 70F4                       		moveq	#-$C,d0
00002062                            
00002062                            loc_2062:
00002062 31C0 F632                  		move.w	d0,($FFFFF632).w
00002066 7001                       		moveq	#1,d0
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_206A:				; XREF: loc_202A
0000206A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000206E 6A00                       		bpl.s	loc_20BC
00002070 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002076 3038 F632                  		move.w	($FFFFF632).w,d0
0000207A 0640 000C                  		addi.w	#$C,d0
0000207E 0C40 0030                  		cmpi.w	#$30,d0
00002082 6500                       		bcs.s	loc_2088
00002084 7000                       		moveq	#0,d0
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_2088:				; XREF: loc_206A
00002088 31C0 F632                  		move.w	d0,($FFFFF632).w
0000208C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002092 41F0 0000                  		lea	(a0,d0.w),a0
00002096 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000209A 22D8                       		move.l	(a0)+,(a1)+
0000209C 22D8                       		move.l	(a0)+,(a1)+
0000209E 3298                       		move.w	(a0)+,(a1)
000020A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020A4 7000                       		moveq	#0,d0
000020A6 722C                       		moveq	#$2C,d1
000020A8                            
000020A8                            loc_20A8:
000020A8 3400                       		move.w	d0,d2
000020AA 0242 001E                  		andi.w	#$1E,d2
000020AE 6600                       		bne.s	loc_20B2
000020B0 5440                       		addq.w	#2,d0
000020B2                            
000020B2                            loc_20B2:
000020B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000020B6 5440                       		addq.w	#2,d0
000020B8 51C9 FFEE                  		dbf	d1,loc_20A8
000020BC                            
000020BC                            loc_20BC:
000020BC 7001                       		moveq	#1,d0
000020BE 4E75                       		rts	
000020C0                            ; End of function PalCycle_Sega
000020C0                            
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000020CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000020FC                            
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            ; Subroutines to load pallets
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            
000020FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FC                            
000020FC                            
000020FC                            PalLoad1:
000020FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002102 E748                       		lsl.w	#3,d0
00002104 D2C0                       		adda.w	d0,a1
00002106 2459                       		movea.l	(a1)+,a2
00002108 3659                       		movea.w	(a1)+,a3
0000210A D6FC 0080                  		adda.w	#$80,a3
0000210E 3E19                       		move.w	(a1)+,d7
00002110                            
00002110                            loc_2110:
00002110 26DA                       		move.l	(a2)+,(a3)+
00002112 51CF FFFC                  		dbf	d7,loc_2110
00002116 4E75                       		rts	
00002118                            ; End of function PalLoad1
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            PalLoad2:
00002118 43F9 0000 0000             		lea	(PalPointers).l,a1
0000211E E748                       		lsl.w	#3,d0
00002120 D2C0                       		adda.w	d0,a1
00002122 2459                       		movea.l	(a1)+,a2
00002124 3659                       		movea.w	(a1)+,a3
00002126 3E19                       		move.w	(a1)+,d7
00002128                            
00002128                            loc_2128:
00002128 26DA                       		move.l	(a2)+,(a3)+
0000212A 51CF FFFC                  		dbf	d7,loc_2128
0000212E 4E75                       		rts	
00002130                            ; End of function PalLoad2
00002130                            
00002130                            ; ---------------------------------------------------------------------------
00002130                            ; Underwater pallet loading subroutine
00002130                            ; ---------------------------------------------------------------------------
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            PalLoad3_Water:
00002130 43F9 0000 0000             		lea	(PalPointers).l,a1
00002136 E748                       		lsl.w	#3,d0
00002138 D2C0                       		adda.w	d0,a1
0000213A 2459                       		movea.l	(a1)+,a2
0000213C 3659                       		movea.w	(a1)+,a3
0000213E 96FC 0080                  		suba.w	#$80,a3
00002142 3E19                       		move.w	(a1)+,d7
00002144                            
00002144                            loc_2144:
00002144 26DA                       		move.l	(a2)+,(a3)+
00002146 51CF FFFC                  		dbf	d7,loc_2144
0000214A 4E75                       		rts	
0000214C                            ; End of function PalLoad3_Water
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            PalLoad4_Water:
0000214C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002152 E748                       		lsl.w	#3,d0
00002154 D2C0                       		adda.w	d0,a1
00002156 2459                       		movea.l	(a1)+,a2
00002158 3659                       		movea.w	(a1)+,a3
0000215A 96FC 0100                  		suba.w	#$100,a3
0000215E 3E19                       		move.w	(a1)+,d7
00002160                            
00002160                            loc_2160:
00002160 26DA                       		move.l	(a2)+,(a3)+
00002162 51CF FFFC                  		dbf	d7,loc_2160
00002166 4E75                       		rts	
00002168                            ; End of function PalLoad4_Water
00002168                            
00002168                            ; ===========================================================================
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168                            PalPointers:
00002168                            	include "_inc\Pallet pointers.asm"
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000216C FB00                       	dc.w $FB00		; RAM address
0000216E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002170 0000 0000                  	dc.l Pal_Title
00002174 FB00                       	dc.w $FB00
00002176 001F                       	dc.w $1F
00002178 0000 0000                  	dc.l Pal_LevelSel
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_Sonic
00002184 FB00                       	dc.w $FB00
00002186 0007                       	dc.w 7
00002188 0000 0000                  	dc.l Pal_GHZ
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_LZ
00002194 FB20                       	dc.w $FB20
00002196 0017                       	dc.w $17
00002198 0000 0000                  	dc.l Pal_MZ
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_SLZ
000021A4 FB20                       	dc.w $FB20
000021A6 0017                       	dc.w $17
000021A8 0000 0000                  	dc.l Pal_SYZ
000021AC FB20                       	dc.w $FB20
000021AE 0017                       	dc.w $17
000021B0 0000 0000                  	dc.l Pal_SBZ1
000021B4 FB20                       	dc.w $FB20
000021B6 0017                       	dc.w $17
000021B8 0000 0000                  	dc.l Pal_Special
000021BC FB00                       	dc.w $FB00
000021BE 001F                       	dc.w $1F
000021C0 0000 0000                  	dc.l Pal_LZWater
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C8 0000 0000                  	dc.l Pal_SBZ3
000021CC FB20                       	dc.w $FB20
000021CE 0017                       	dc.w $17
000021D0 0000 0000                  	dc.l Pal_SBZ3Water
000021D4 FB00                       	dc.w $FB00
000021D6 001F                       	dc.w $1F
000021D8 0000 0000                  	dc.l Pal_SBZ2
000021DC FB20                       	dc.w $FB20
000021DE 0017                       	dc.w $17
000021E0 0000 0000                  	dc.l Pal_LZSonWater
000021E4 FB00                       	dc.w $FB00
000021E6 0007                       	dc.w 7
000021E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021EC FB00                       	dc.w $FB00
000021EE 0007                       	dc.w 7
000021F0 0000 0000                  	dc.l Pal_SpeResult
000021F4 FB00                       	dc.w $FB00
000021F6 001F                       	dc.w $1F
000021F8 0000 0000                  	dc.l Pal_SpeContinue
000021FC FB00                       	dc.w $FB00
000021FE 000F                       	dc.w $F
00002200 0000 0000                  	dc.l Pal_Ending
00002204 FB00                       	dc.w $FB00
00002206 001F                       	dc.w $1F
00002206 001F                       	dc.w $1F
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Pallet data
00002208                            ; ---------------------------------------------------------------------------
00002208                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002288                            Pal_Title:	incbin	pallet\title.bin
00002308                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002388                            Pal_Sonic:	incbin	pallet\sonic.bin
000023A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002408                            Pal_LZ:		incbin	pallet\lz.bin
00002468                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024E8                            Pal_MZ:		incbin	pallet\mz.bin
00002548                            Pal_SLZ:	incbin	pallet\slz.bin
000025A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002608                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002668                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002748                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002828                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002848                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002868                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002928                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            DelayProgram:				; XREF: PauseGame
000029A8 46FC 2300                  		move	#$2300,sr
000029AC                            
000029AC                            loc_29AC:
000029AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000029B0 66FA                       		bne.s	loc_29AC
000029B2 4E75                       		rts	
000029B4                            ; End of function DelayProgram
000029B4                            
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            ; Subroutine to	generate a pseudo-random number	in d0
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            
000029B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B4                            
000029B4                            
000029B4                            RandomNumber:
000029B4 2238 F636                  		move.l	($FFFFF636).w,d1
000029B8 6600                       		bne.s	loc_29C0
000029BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029C0                            
000029C0                            loc_29C0:
000029C0 2001                       		move.l	d1,d0
000029C2 E581                       		asl.l	#2,d1
000029C4 D280                       		add.l	d0,d1
000029C6 E781                       		asl.l	#3,d1
000029C8 D280                       		add.l	d0,d1
000029CA 3001                       		move.w	d1,d0
000029CC 4841                       		swap	d1
000029CE D041                       		add.w	d1,d0
000029D0 3200                       		move.w	d0,d1
000029D2 4841                       		swap	d1
000029D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029D8 4E75                       		rts	
000029DA                            ; End of function RandomNumber
000029DA                            
000029DA                            
000029DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DA                            
000029DA                            
000029DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029DA 0240 00FF                  		andi.w	#$FF,d0
000029DE D040                       		add.w	d0,d0
000029E0 0640 0080                  		addi.w	#$80,d0
000029E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029E8 0440 0080                  		subi.w	#$80,d0
000029EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F0 4E75                       		rts	
000029F2                            ; End of function CalcSine
000029F2                            
000029F2                            ; ===========================================================================
000029F2                            
000029F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002C72                            
00002C72                            ; ===========================================================================
00002C72 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C76 3200                       		move.w	d0,d1
00002C78 4841                       		swap	d1
00002C7A 7000                       		moveq	#0,d0
00002C7C 3200                       		move.w	d0,d1
00002C7E 7407                       		moveq	#7,d2
00002C80                            
00002C80                            loc_2C80:
00002C80 E599                       		rol.l	#2,d1
00002C82 D040                       		add.w	d0,d0
00002C84 5240                       		addq.w	#1,d0
00002C86 9240                       		sub.w	d0,d1
00002C88 6400                       		bcc.s	loc_2C9A
00002C8A D240                       		add.w	d0,d1
00002C8C 5340                       		subq.w	#1,d0
00002C8E 51CA FFF0                  		dbf	d2,loc_2C80
00002C92 E248                       		lsr.w	#1,d0
00002C94 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C98 4E75                       		rts	
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            loc_2C9A:
00002C9A 5240                       		addq.w	#1,d0
00002C9C 51CA FFE2                  		dbf	d2,loc_2C80
00002CA0 E248                       		lsr.w	#1,d0
00002CA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CA6 4E75                       		rts	
00002CA8                            
00002CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA8                            
00002CA8                            
00002CA8                            CalcAngle:
00002CA8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CAC 7600                       		moveq	#0,d3
00002CAE 7800                       		moveq	#0,d4
00002CB0 3601                       		move.w	d1,d3
00002CB2 3802                       		move.w	d2,d4
00002CB4 8843                       		or.w	d3,d4
00002CB6 6700                       		beq.s	loc_2D04
00002CB8 3802                       		move.w	d2,d4
00002CBA 4A43                       		tst.w	d3
00002CBC 6A00 0000                  		bpl.w	loc_2CC2
00002CC0 4443                       		neg.w	d3
00002CC2                            
00002CC2                            loc_2CC2:
00002CC2 4A44                       		tst.w	d4
00002CC4 6A00 0000                  		bpl.w	loc_2CCA
00002CC8 4444                       		neg.w	d4
00002CCA                            
00002CCA                            loc_2CCA:
00002CCA B843                       		cmp.w	d3,d4
00002CCC 6400 0000                  		bcc.w	loc_2CDC
00002CD0 E18C                       		lsl.l	#8,d4
00002CD2 88C3                       		divu.w	d3,d4
00002CD4 7000                       		moveq	#0,d0
00002CD6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CDA 6000                       		bra.s	loc_2CE6
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            loc_2CDC:				; XREF: CalcAngle
00002CDC E18B                       		lsl.l	#8,d3
00002CDE 86C4                       		divu.w	d4,d3
00002CE0 7040                       		moveq	#$40,d0
00002CE2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CE6                            
00002CE6                            loc_2CE6:
00002CE6 4A41                       		tst.w	d1
00002CE8 6A00 0000                  		bpl.w	loc_2CF2
00002CEC 4440                       		neg.w	d0
00002CEE 0640 0080                  		addi.w	#$80,d0
00002CF2                            
00002CF2                            loc_2CF2:
00002CF2 4A42                       		tst.w	d2
00002CF4 6A00 0000                  		bpl.w	loc_2CFE
00002CF8 4440                       		neg.w	d0
00002CFA 0640 0100                  		addi.w	#$100,d0
00002CFE                            
00002CFE                            loc_2CFE:
00002CFE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D02 4E75                       		rts	
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            loc_2D04:				; XREF: CalcAngle
00002D04 303C 0040                  		move.w	#$40,d0
00002D08 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D0C 4E75                       		rts	
00002D0E                            ; End of function CalcAngle
00002D0E                            
00002D0E                            ; ===========================================================================
00002D0E                            
00002D0E                            Angle_Data:	incbin	misc\angles.bin
00002E10                            
00002E10                            ; ===========================================================================
00002E10                            
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            ; Sega screen
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            
00002E10                            SegaScreen:				; XREF: GameModeArray
00002E10 103C 00E4                  		move.b	#$E4,d0
00002E14 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002E18 6100 E7C4                  		bsr.w	ClearPLC
00002E1C 6100 F034                  		bsr.w	Pal_FadeFrom
00002E20 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E26 3CBC 8004                  		move.w	#$8004,(a6)
00002E2A 3CBC 8230                  		move.w	#$8230,(a6)
00002E2E 3CBC 8407                  		move.w	#$8407,(a6)
00002E32 3CBC 8700                  		move.w	#$8700,(a6)
00002E36 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E3A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E3E 46FC 2700                  		move	#$2700,sr
00002E42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E46 0200 00BF                  		andi.b	#$BF,d0
00002E4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E50 6100 E472                  		bsr.w	ClearScreen
00002E54 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E5E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E64 6100 E5DA                  		bsr.w	NemDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E74 303C 0000                  		move.w	#0,d0
00002E78 6100 E8A4                  		bsr.w	EniDec
00002E7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E82 203C 6510 0003             		move.l	#$65100003,d0
00002E88 7217                       		moveq	#$17,d1
00002E8A 7407                       		moveq	#7,d2
00002E8C 6100 E592                  		bsr.w	ShowVDPGraphics
00002E90 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E96 203C 4000 0003             		move.l	#$40000003,d0
00002E9C 7227                       		moveq	#$27,d1
00002E9E 741B                       		moveq	#$1B,d2
00002EA0 6100 E57E                  		bsr.w	ShowVDPGraphics
00002EA4 7000                       		moveq	#0,d0
00002EA6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EAA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EB0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EB6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EBC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EC2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EC6 0000 0040                  		ori.b	#$40,d0
00002ECA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002ED0                            
00002ED0                            Sega_WaitPallet:
00002ED0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED6 6100 FAD0                  		bsr.w	DelayProgram
00002EDA 6100 F12E                  		bsr.w	PalCycle_Sega
00002EDE 66F0                       		bne.s	Sega_WaitPallet
00002EE0                            
00002EE0 103C 00E1                  		move.b	#$E1,d0
00002EE4 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EE8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EEE 6100 FAB8                  		bsr.w	DelayProgram
00002EF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EF8                            
00002EF8                            Sega_WaitEnd:
00002EF8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EFE 6100 FAA8                  		bsr.w	DelayProgram
00002F02 4A78 F614                  		tst.w	($FFFFF614).w
00002F06 6700                       		beq.s	Sega_GotoTitle
00002F08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F0E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F10                            
00002F10                            Sega_GotoTitle:
00002F10 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F16 4E75                       		rts	
00002F18                            ; ===========================================================================
00002F18                            
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            ; Title	screen
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            
00002F18                            TitleScreen:				; XREF: GameModeArray
00002F18 103C 00E4                  		move.b	#$E4,d0
00002F1C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002F20 6100 E6BC                  		bsr.w	ClearPLC
00002F24 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F28 46FC 2700                  		move	#$2700,sr
00002F2C 6100 E424                  		bsr.w	SoundDriverLoad
00002F30 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F36 3CBC 8004                  		move.w	#$8004,(a6)
00002F3A 3CBC 8230                  		move.w	#$8230,(a6)
00002F3E 3CBC 8407                  		move.w	#$8407,(a6)
00002F42 3CBC 9001                  		move.w	#$9001,(a6)
00002F46 3CBC 9200                  		move.w	#$9200,(a6)
00002F4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4E 3CBC 8720                  		move.w	#$8720,(a6)
00002F52 4238 F64E                  		clr.b	($FFFFF64E).w
00002F56 6100 E36C                  		bsr.w	ClearScreen
00002F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F5E 7000                       		moveq	#0,d0
00002F60 323C 07FF                  		move.w	#$7FF,d1
00002F64                            
00002F64                            Title_ClrObjRam:
00002F64 22C0                       		move.l	d0,(a1)+
00002F66 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F6A                            
00002F6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F74 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F7A 6100 E4C4                  		bsr.w	NemDec
00002F7E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F88 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F8E 6100 E4B0                  		bsr.w	NemDec
00002F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F98 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F9E 303C 0000                  		move.w	#0,d0
00002FA2 6100 E77A                  		bsr.w	EniDec
00002FA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FAC 203C 4000 0003             		move.l	#$40000003,d0
00002FB2 7227                       		moveq	#$27,d1
00002FB4 741B                       		moveq	#$1B,d2
00002FB6 6100 E468                  		bsr.w	ShowVDPGraphics
00002FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002FBE 7000                       		moveq	#0,d0
00002FC0 323C 001F                  		move.w	#$1F,d1
00002FC4                            
00002FC4                            Title_ClrPallet:
00002FC4 22C0                       		move.l	d0,(a1)+
00002FC6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FCA                            
00002FCA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FCC 6100 F12E                  		bsr.w	PalLoad1
00002FD0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FDC 4EB9 0000 0000             		jsr	BuildSprites
00002FE2 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FE6 46FC 2700                  		move	#$2700,sr
00002FEA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FF4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FFA 6100 E444                  		bsr.w	NemDec
00002FFE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003008 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000300E 6100 E430                  		bsr.w	NemDec
00003012 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000301C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003022 6100 E41C                  		bsr.w	NemDec
00003026 4DF9 00C0 0000             		lea	($C00000).l,a6
0000302C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003034 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000303A 323C 028F                  		move.w	#$28F,d1
0000303E                            
0000303E                            Title_LoadText:
0000303E 3C9D                       		move.w	(a5)+,(a6)
00003040 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003044                            
00003044 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000304A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003050 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003056 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000305C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003062 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003068 6100 0000                  		bsr.w	LevelSizeLoad
0000306C 6100 0000                  		bsr.w	DeformBgLayer
00003070 43F8 B000                  		lea	($FFFFB000).w,a1
00003074 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000307A 303C 0000                  		move.w	#0,d0
0000307E 6100 E69E                  		bsr.w	EniDec
00003082 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 6100 E80C                  		bsr.w	KosDec
00003092 6100 0000                  		bsr.w	LevelLayoutLoad
00003096 6100 EDBA                  		bsr.w	Pal_FadeFrom
0000309A 46FC 2700                  		move	#$2700,sr
0000309E 6100 E224                  		bsr.w	ClearScreen
000030A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000030AE 47F8 F708                  		lea	($FFFFF708).w,a3
000030B2 49F8 A440                  		lea	($FFFFA440).w,a4
000030B6 343C 6000                  		move.w	#$6000,d2
000030BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000030BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030C4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030CA 303C 0000                  		move.w	#0,d0
000030CE 6100 E64E                  		bsr.w	EniDec
000030D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030D8 203C 4206 0003             		move.l	#$42060003,d0
000030DE 7221                       		moveq	#$21,d1
000030E0 7415                       		moveq	#$15,d2
000030E2 6100 E33C                  		bsr.w	ShowVDPGraphics
000030E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030F6 6100 E348                  		bsr.w	NemDec
000030FA 7001                       		moveq	#1,d0		; load title screen pallet
000030FC 6100 EFFE                  		bsr.w	PalLoad1
00003100 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003104 6100 E296                  		bsr.w	PlaySound_Special
00003108 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000310E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003114 43F8 D080                  		lea	($FFFFD080).w,a1
00003118 7000                       		moveq	#0,d0
0000311A 323C 0007                  		move.w	#7,d1
0000311E                            
0000311E                            Title_ClrObjRam2:
0000311E 22C0                       		move.l	d0,(a1)+
00003120 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003124                            
00003124 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000312A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003130 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003136 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000313C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003142 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003148 4EB9 0000 0000             		jsr	ObjectsLoad
0000314E 6100 0000                  		bsr.w	DeformBgLayer
00003152 4EB9 0000 0000             		jsr	BuildSprites
00003158 7000                       		moveq	#0,d0
0000315A 6100 E456                  		bsr.w	LoadPLC2
0000315E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003164 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 EC32                  		bsr.w	Pal_FadeTo
0000317C                            
0000317C                            loc_317C:
0000317C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003182 6100 F824                  		bsr.w	DelayProgram
00003186 4EB9 0000 0000             		jsr	ObjectsLoad
0000318C 6100 0000                  		bsr.w	DeformBgLayer
00003190 4EB9 0000 0000             		jsr	BuildSprites
00003196 6100 E7C4                  		bsr.w	PalCycle_Title
0000319A 6100 E450                  		bsr.w	RunPLC_RAM
0000319E 3038 D008                  		move.w	($FFFFD008).w,d0
000031A2 5440                       		addq.w	#2,d0
000031A4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000031A8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000031AC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000031AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000031B4 4E75                       		rts	
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            Title_ChkRegion:
000031B6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000031BA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000031BC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031C2 6000                       		bra.s	Title_EnterCheat
000031C4                            ; ===========================================================================
000031C4                            
000031C4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031C4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031CA                            
000031CA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031CA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031CE D0C0                       		adda.w	d0,a0
000031D0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031D4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031D8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031DA 6600                       		bne.s	loc_3210	; if not, branch
000031DC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031E0 4A00                       		tst.b	d0
000031E2 6600                       		bne.s	Title_CountC
000031E4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031E8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031EC E249                       		lsr.w	#1,d1
000031EE 0241 0003                  		andi.w	#3,d1
000031F2 6700                       		beq.s	Title_PlayRing
000031F4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031F8 6A00                       		bpl.s	Title_PlayRing
000031FA 7201                       		moveq	#1,d1
000031FC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003200                            
00003200                            Title_PlayRing:
00003200 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003206 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000320A 6100 E190                  		bsr.w	PlaySound_Special
0000320E 6000                       		bra.s	Title_CountC
00003210                            ; ===========================================================================
00003210                            
00003210                            loc_3210:				; XREF: Title_EnterCheat
00003210 4A00                       		tst.b	d0
00003212 6700                       		beq.s	Title_CountC
00003214 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000321A 6700                       		beq.s	Title_CountC
0000321C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003222                            
00003222                            Title_CountC:
00003222 1038 F605                  		move.b	($FFFFF605).w,d0
00003226 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000322A 6700                       		beq.s	loc_3230	; if not, branch
0000322C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003230                            
00003230                            loc_3230:
00003230 4A78 F614                  		tst.w	($FFFFF614).w
00003234 6700 0000                  		beq.w	Demo
00003238 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000323E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003242                            
00003242                            Title_ChkLevSel:
00003242 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003246 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000324A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003250 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003254 7002                       		moveq	#2,d0
00003256 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000325A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000325E 7000                       		moveq	#0,d0
00003260 323C 00DF                  		move.w	#$DF,d1
00003264                            
00003264                            Title_ClrScroll:
00003264 22C0                       		move.l	d0,(a1)+
00003266 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000326A                            
0000326A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000326E 46FC 2700                  		move	#$2700,sr
00003272 4DF9 00C0 0000             		lea	($C00000).l,a6
00003278 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003282 323C 03FF                  		move.w	#$3FF,d1
00003286                            
00003286                            Title_ClrVram:
00003286 2C80                       		move.l	d0,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000328C                            
0000328C 6100 0000                  		bsr.w	LevSelTextLoad
00003290                            
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Level	Select
00003290                            ; ---------------------------------------------------------------------------
00003290                            
00003290                            LevelSelect:
00003290 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003296 6100 F710                  		bsr.w	DelayProgram
0000329A 6100 0000                  		bsr.w	LevSelControls
0000329E 6100 E34C                  		bsr.w	RunPLC_RAM
000032A2 4AB8 F680                  		tst.l	($FFFFF680).w
000032A6 66E8                       		bne.s	LevelSelect
000032A8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000032AE 67E0                       		beq.s	LevelSelect	; if not, branch
000032B0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000032B4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032BA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000032BE 0640 0080                  		addi.w	#$80,d0
000032C2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032C6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032C8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032CC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032CE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032D2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032D4                            
000032D4                            LevSel_NoCheat:
000032D4 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032D8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032DE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032E0                            
000032E0                            LevSel_PlaySnd:
000032E0 6100 E0BA                  		bsr.w	PlaySound_Special
000032E4 60AA                       		bra.s	LevelSelect
000032E6                            ; ===========================================================================
000032E6                            
000032E6                            LevSel_Ending:				; XREF: LevelSelect
000032E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032F2 4E75                       		rts	
000032F4                            ; ===========================================================================
000032F4                            
000032F4                            LevSel_Credits:				; XREF: LevelSelect
000032F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032FA 103C 0091                  		move.b	#$91,d0
000032FE 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
00003302 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003308 4E75                       		rts	
0000330A                            ; ===========================================================================
0000330A                            
0000330A                            LevSel_Level_SS:			; XREF: LevelSelect
0000330A D040                       		add.w	d0,d0
0000330C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003310 6B00 FF7E                  		bmi.w	LevelSelect
00003314 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003318 6600                       		bne.s	LevSel_Level	; if not, branch
0000331A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003320 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003324 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332A 7000                       		moveq	#0,d0
0000332C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003330 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003334 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003338 4E75                       		rts	
0000333A                            ; ===========================================================================
0000333A                            
0000333A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000333A 0240 3FFF                  		andi.w	#$3FFF,d0
0000333E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003342                            
00003342                            PlayLevel:				; XREF: ROM:00003246j ...
00003342 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003348 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000334E 7000                       		moveq	#0,d0
00003350 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003354 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003358 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000335C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003360 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003364 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003368 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000336C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003370 103C 00E0                  		move.b	#$E0,d0
00003374 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            LSelectPointers:
0000337A                            		incbin	misc\ls_point.bin
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            LevelSelectCode_J:
000033A4                            		incbin	misc\ls_jcode.bin
000033AA                            		even
000033AA                            
000033AA                            LevelSelectCode_US:
000033AA                            		incbin	misc\ls_ucode.bin
000033B0                            		even
000033B0                            ; ===========================================================================
000033B0                            
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            ; Demo mode
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            
000033B0                            Demo:					; XREF: TitleScreen
000033B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000033B6                            
000033B6                            loc_33B6:				; XREF: loc_33E4
000033B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033BC 6100 F5EA                  		bsr.w	DelayProgram
000033C0 6100 0000                  		bsr.w	DeformBgLayer
000033C4 6100 E576                  		bsr.w	PalCycle_Load
000033C8 6100 E222                  		bsr.w	RunPLC_RAM
000033CC 3038 D008                  		move.w	($FFFFD008).w,d0
000033D0 5440                       		addq.w	#2,d0
000033D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DA 6500                       		bcs.s	loc_33E4
000033DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033E2 4E75                       		rts	
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            loc_33E4:				; XREF: Demo
000033E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033EA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033EE 4A78 F614                  		tst.w	($FFFFF614).w
000033F2 6600 FFC2                  		bne.w	loc_33B6
000033F6 103C 00E0                  		move.b	#$E0,d0
000033FA 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003402 0240 0007                  		andi.w	#7,d0
00003406 D040                       		add.w	d0,d0
00003408 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003410 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003414 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000341A 6500                       		bcs.s	loc_3422	; if yes, branch
0000341C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003422                            
00003422                            loc_3422:
00003422 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003428 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000342E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003432 6600                       		bne.s	Demo_Level	; if not, branch
00003434 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000343A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000343E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003442                            
00003442                            Demo_Level:
00003442 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003448 7000                       		moveq	#0,d0
0000344A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000344E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003452 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003456 4E75                       		rts	
00003458                            ; ===========================================================================
00003458                            ; ---------------------------------------------------------------------------
00003458                            ; Levels used in demos
00003458                            ; ---------------------------------------------------------------------------
00003458                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003460                            		even
00003460                            
00003460                            ; ---------------------------------------------------------------------------
00003460                            ; Subroutine to	change what you're selecting in the level select
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003460                            
00003460                            
00003460                            LevSelControls:				; XREF: LevelSelect
00003460 1238 F605                  		move.b	($FFFFF605).w,d1
00003464 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003468 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000346A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000346E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003470                            
00003470                            LevSel_UpDown:
00003470 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003476 1238 F604                  		move.b	($FFFFF604).w,d1
0000347A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000347E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003480 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003484 0801 0000                  		btst	#0,d1		; is up	pressed?
00003488 6700                       		beq.s	LevSel_Down	; if not, branch
0000348A 5340                       		subq.w	#1,d0		; move up 1 selection
0000348C 6400                       		bcc.s	LevSel_Down
0000348E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003490                            
00003490                            LevSel_Down:
00003490 0801 0001                  		btst	#1,d1		; is down pressed?
00003494 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003496 5240                       		addq.w	#1,d0		; move down 1 selection
00003498 0C40 0015                  		cmpi.w	#$15,d0
0000349C 6500                       		bcs.s	LevSel_Refresh
0000349E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034A0                            
000034A0                            LevSel_Refresh:
000034A0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000034A4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034A8 4E75                       		rts	
000034AA                            ; ===========================================================================
000034AA                            
000034AA                            LevSel_SndTest:				; XREF: LevSelControls
000034AA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000034B0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034B2 1238 F605                  		move.b	($FFFFF605).w,d1
000034B6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000034BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034C0 0801 0002                  		btst	#2,d1		; is left pressed?
000034C4 6700                       		beq.s	LevSel_Right	; if not, branch
000034C6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034C8 6400                       		bcc.s	LevSel_Right
000034CA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034CC                            
000034CC                            LevSel_Right:
000034CC 0801 0003                  		btst	#3,d1		; is right pressed?
000034D0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034D2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034D4 0C40 0050                  		cmpi.w	#$50,d0
000034D8 6500                       		bcs.s	LevSel_Refresh2
000034DA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034DC                            
000034DC                            LevSel_Refresh2:
000034DC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034E0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034E4                            
000034E4                            LevSel_NoMove:
000034E4 4E75                       		rts	
000034E6                            ; End of function LevSelControls
000034E6                            
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            ; Subroutine to load level select text
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            
000034E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034E6                            
000034E6                            
000034E6                            LevSelTextLoad:				; XREF: TitleScreen
000034E6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034F2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034F8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034FC 7214                       		moveq	#$14,d1		; number of lines of text
000034FE                            
000034FE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034FE 2D44 0004                  		move.l	d4,4(a6)
00003502 6100 0000                  		bsr.w	LevSel_ChgLine
00003506 0684 0080 0000             		addi.l	#$800000,d4
0000350C 51C9 FFF0                  		dbf	d1,loc_34FE
00003510 7000                       		moveq	#0,d0
00003512 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003516 3200                       		move.w	d0,d1
00003518 283C 6210 0003             		move.l	#$62100003,d4
0000351E EF48                       		lsl.w	#7,d0
00003520 4840                       		swap	d0
00003522 D880                       		add.l	d0,d4
00003524 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000352A E749                       		lsl.w	#3,d1
0000352C 3001                       		move.w	d1,d0
0000352E D241                       		add.w	d1,d1
00003530 D240                       		add.w	d0,d1
00003532 D2C1                       		adda.w	d1,a1
00003534 363C C680                  		move.w	#$C680,d3
00003538 2D44 0004                  		move.l	d4,4(a6)
0000353C 6100 0000                  		bsr.w	LevSel_ChgLine
00003540 363C E680                  		move.w	#$E680,d3
00003544 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000354A 6600                       		bne.s	loc_3550
0000354C 363C C680                  		move.w	#$C680,d3
00003550                            
00003550                            loc_3550:
00003550 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000355A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000355E 0640 0080                  		addi.w	#$80,d0
00003562 1400                       		move.b	d0,d2
00003564 E808                       		lsr.b	#4,d0
00003566 6100 0000                  		bsr.w	LevSel_ChgSnd
0000356A 1002                       		move.b	d2,d0
0000356C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003570 4E75                       		rts	
00003572                            ; End of function LevSelTextLoad
00003572                            
00003572                            
00003572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003572                            
00003572                            
00003572                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003572 0240 000F                  		andi.w	#$F,d0
00003576 0C00 000A                  		cmpi.b	#$A,d0
0000357A 6500                       		bcs.s	loc_3580
0000357C 5E00                       		addi.b	#7,d0
0000357E                            
0000357E                            loc_3580:
0000357E D043                       		add.w	d3,d0
00003580 3C80                       		move.w	d0,(a6)
00003582 4E75                       		rts	
00003584                            ; End of function LevSel_ChgSnd
00003584                            
00003584                            
00003584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003584                            
00003584                            
00003584                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003584 7417                       		moveq	#$17,d2		; number of characters per line
00003586                            
00003586                            loc_3588:
00003586 7000                       		moveq	#0,d0
00003588 1019                       		move.b	(a1)+,d0
0000358A 6A00                       		bpl.s	loc_3598
0000358C 3CBC 0000                  		move.w	#0,(a6)
00003590 51CA FFF4                  		dbf	d2,loc_3588
00003594 4E75                       		rts	
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3598:				; XREF: LevSel_ChgLine
00003596 D043                       		add.w	d3,d0
00003598 3C80                       		move.w	d0,(a6)
0000359A 51CA FFEA                  		dbf	d2,loc_3588
0000359E 4E75                       		rts	
000035A0                            ; End of function LevSel_ChgLine
000035A0                            
000035A0                            ; ===========================================================================
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            ; Level	select menu text
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            LevelMenuText:	incbin	misc\menutext.bin
00003798                            		even
00003798                            ; ---------------------------------------------------------------------------
00003798                            ; Music	playlist
00003798                            ; ---------------------------------------------------------------------------
00003798                            MusicList:	incbin	misc\muslist1.bin
000037A0                            		even
000037A0                            ; ===========================================================================
000037A0                            
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            ; Level
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            
000037A0                            Level:					; XREF: GameModeArray
000037A0 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000037A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037AA 6B00                       		bmi.s	loc_37B6
000037AC 103C 00E0                  		move.b	#$E0,d0
000037B0 6100 DBEA                  		bsr.w	PlaySound_Special ; fade out music
000037B4                            
000037B4                            loc_37B6:
000037B4 6100 DE28                  		bsr.w	ClearPLC
000037B8 6100 E698                  		bsr.w	Pal_FadeFrom
000037BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037C0 6B00                       		bmi.s	Level_ClrRam
000037C2 46FC 2700                  		move	#$2700,sr
000037C6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037D0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037D6 6100 DC68                  		bsr.w	NemDec
000037DA 46FC 2300                  		move	#$2300,sr
000037DE 7000                       		moveq	#0,d0
000037E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037E4 E948                       		lsl.w	#4,d0
000037E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037EC 45F2 0000                  		lea	(a2,d0.w),a2
000037F0 7000                       		moveq	#0,d0
000037F2 1012                       		move.b	(a2),d0
000037F4 6700                       		beq.s	loc_37FC
000037F6 6100 DD88                  		bsr.w	LoadPLC		; load level patterns
000037FA                            
000037FA                            loc_37FC:
000037FA 7001                       		moveq	#1,d0
000037FC 6100 DD82                  		bsr.w	LoadPLC		; load standard	patterns
00003800                            
00003800                            Level_ClrRam:
00003800 43F8 D000                  		lea	($FFFFD000).w,a1
00003804 7000                       		moveq	#0,d0
00003806 323C 07FF                  		move.w	#$7FF,d1
0000380A                            
0000380A                            Level_ClrObjRam:
0000380A 22C0                       		move.l	d0,(a1)+
0000380C 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003810                            
00003810 43F8 F628                  		lea	($FFFFF628).w,a1
00003814 7000                       		moveq	#0,d0
00003816 323C 0015                  		move.w	#$15,d1
0000381A                            
0000381A                            Level_ClrVars:
0000381A 22C0                       		move.l	d0,(a1)+
0000381C 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003820                            
00003820 43F8 F700                  		lea	($FFFFF700).w,a1
00003824 7000                       		moveq	#0,d0
00003826 323C 003F                  		move.w	#$3F,d1
0000382A                            
0000382A                            Level_ClrVars2:
0000382A 22C0                       		move.l	d0,(a1)+
0000382C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003830                            
00003830 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003834 7000                       		moveq	#0,d0
00003836 323C 0047                  		move.w	#$47,d1
0000383A                            
0000383A                            Level_ClrVars3:
0000383A 22C0                       		move.l	d0,(a1)+
0000383C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003840                            
00003840 46FC 2700                  		move	#$2700,sr
00003844 6100 DA7E                  		bsr.w	ClearScreen
00003848 4DF9 00C0 0004             		lea	($C00004).l,a6
0000384E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003852 3CBC 8230                  		move.w	#$8230,(a6)
00003856 3CBC 8407                  		move.w	#$8407,(a6)
0000385A 3CBC 857C                  		move.w	#$857C,(a6)
0000385E 3CBC 9001                  		move.w	#$9001,(a6)
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8720                  		move.w	#$8720,(a6)
0000386A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003870 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000387A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000387C 3CBC 8014                  		move.w	#$8014,(a6)
00003880 7000                       		moveq	#0,d0
00003882 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003886 D040                       		add.w	d0,d0
00003888 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000388E 3031 0000                  		move.w	(a1,d0.w),d0
00003892 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003896 31C0 F648                  		move.w	d0,($FFFFF648).w
0000389A 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000389E 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000038A2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000038A6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000038AC                            
000038AC                            Level_LoadPal:
000038AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000038B2 46FC 2300                  		move	#$2300,sr
000038B6 7003                       		moveq	#3,d0
000038B8 6100 E85E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038C2 6600                       		bne.s	Level_GetBgm	; if not, branch
000038C4 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038C6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038CC 6600                       		bne.s	Level_WaterPal	; if not, branch
000038CE 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038D0                            
000038D0                            Level_WaterPal:
000038D0 6100 E85E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038D4 4A38 FE30                  		tst.b	($FFFFFE30).w
000038D8 6700                       		beq.s	Level_GetBgm
000038DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038E0                            
000038E0                            Level_GetBgm:
000038E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038E4 6B00                       		bmi.s	loc_3946
000038E6 7000                       		moveq	#0,d0
000038E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038F2 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038F4 7005                       		moveq	#5,d0		; move 5 to d0
000038F6                            
000038F6                            Level_BgmNotLZ4:
000038F6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038FC 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038FE 7006                       		moveq	#6,d0		; move 6 to d0
00003900                            
00003900                            Level_PlayBgm:
00003900 43F9 0000 3798             		lea	(MusicList).l,a1 ; load	music playlist
00003906 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000390A 6100 DA8A                  		bsr.w	PlaySound	; play music
0000390E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003914                            
00003914                            Level_TtlCard:
00003914 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000391A 6100 F08C                  		bsr.w	DelayProgram
0000391E 4EB9 0000 0000             		jsr	ObjectsLoad
00003924 4EB9 0000 0000             		jsr	BuildSprites
0000392A 6100 DCC0                  		bsr.w	RunPLC_RAM
0000392E 3038 D108                  		move.w	($FFFFD108).w,d0
00003932 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003936 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003938 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000393C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000393E 4EB9 0000 0000             		jsr	Hud_Base
00003944                            
00003944                            loc_3946:
00003944 7003                       		moveq	#3,d0
00003946 6100 E7B4                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000394A 6100 0000                  		bsr.w	LevelSizeLoad
0000394E 6100 0000                  		bsr.w	DeformBgLayer
00003952 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003958 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000395C 6100 0000                  		bsr.w	LoadTilesFromStart
00003960 4EB9 0000 0000             		jsr	FloorLog_Unk
00003966 6100 0000                  		bsr.w	ColIndexLoad
0000396A 6100 0000                  		bsr.w	LZWaterEffects
0000396E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003974 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003978 6B00                       		bmi.s	Level_ChkDebug
0000397A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003980                            
00003980                            Level_ChkDebug:
00003980 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003984 6700                       		beq.s	Level_ChkWater	; if not, branch
00003986 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000398C 6700                       		beq.s	Level_ChkWater	; if not, branch
0000398E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003994                            
00003994                            Level_ChkWater:
00003994 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000399A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000039A0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A6 6600                       		bne.s	Level_LoadObj	; if not, branch
000039A8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039AE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039B4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039BA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039C0                            
000039C0                            Level_LoadObj:
000039C0 4EB9 0000 0000             		jsr	ObjPosLoad
000039C6 4EB9 0000 0000             		jsr	ObjectsLoad
000039CC 4EB9 0000 0000             		jsr	BuildSprites
000039D2 7000                       		moveq	#0,d0
000039D4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039D8 6600                       		bne.s	loc_39E8	; if yes, branch
000039DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039E2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039E6                            
000039E6                            loc_39E8:
000039E6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039EA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039EE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039F2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039F6                            		; move.b	d0,($FFFFFE2F).w
000039F6 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000039FC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003A00 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A04 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A08 6100 0000                  		bsr.w	OscillateNumInit
00003A0C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A12 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A18 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A1E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A24 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A2A 7000                       		moveq	#0,d0
00003A2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A30 E548                       		lsl.w	#2,d0
00003A32 2271 0000                  		movea.l	(a1,d0.w),a1
00003A36 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A3A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A3C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A42 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A46 5340                       		subq.w	#1,d0
00003A48 E548                       		lsl.w	#2,d0
00003A4A 2271 0000                  		movea.l	(a1,d0.w),a1
00003A4E                            
00003A4E                            Level_Demo:
00003A4E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A54 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A58 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A62 6A00                       		bpl.s	Level_ChkWaterPal
00003A64 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A6A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A70 6600                       		bne.s	Level_ChkWaterPal
00003A72 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A78                            
00003A78                            Level_ChkWaterPal:
00003A78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A7E 6600                       		bne.s	Level_Delay	; if not, branch
00003A80 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A82 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A88 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A8A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A8C                            
00003A8C                            Level_WaterPal2:
00003A8C 6100 E6BE                  		bsr.w	PalLoad4_Water
00003A90                            
00003A90                            Level_Delay:
00003A90 323C 0003                  		move.w	#3,d1
00003A94                            
00003A94                            Level_DelayLoop:
00003A94 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A9A 6100 EF0C                  		bsr.w	DelayProgram
00003A9E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003AA2                            
00003AA2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AA8 6100 E308                  		bsr.w	Pal_FadeTo2
00003AAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AB0 6B00                       		bmi.s	Level_ClrCardArt
00003AB2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AB6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003ABA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003ABE 5838 D164                  		addq.b	#4,($FFFFD164).w
00003AC2 6000                       		bra.s	Level_StartGame
00003AC4                            ; ===========================================================================
00003AC4                            
00003AC4                            Level_ClrCardArt:
00003AC4 7002                       		moveq	#2,d0
00003AC6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
00003ACC 7000                       		moveq	#0,d0
00003ACE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AD2 0640 0015                  		addi.w	#$15,d0
00003AD6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003ADC                            
00003ADC                            Level_StartGame:
00003ADC 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003AE2                            
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            ; Main level loop (when	all title card and loading sequences are finished)
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            
00003AE2                            Level_MainLoop:
00003AE2 6100 D8C4                  		bsr.w	PauseGame
00003AE6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AEC 6100 EEBA                  		bsr.w	DelayProgram
00003AF0 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AF4 6100 0000                  		bsr.w	MoveSonicInDemo
00003AF8 6100 0000                  		bsr.w	LZWaterEffects
00003AFC 4EB9 0000 0000             		jsr	ObjectsLoad
00003B02 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B06 6600                       		bne.s	loc_3B10
00003B08 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B0E 6400                       		bcc.s	loc_3B14
00003B10                            
00003B10                            loc_3B10:
00003B10 6100 0000                  		bsr.w	DeformBgLayer
00003B14                            
00003B14                            loc_3B14:
00003B14 4EB9 0000 0000             		jsr	BuildSprites
00003B1A 4EB9 0000 0000             		jsr	ObjPosLoad
00003B20 6100 DE1A                  		bsr.w	PalCycle_Load
00003B24 6100 DAC6                  		bsr.w	RunPLC_RAM
00003B28 6100 0000                  		bsr.w	OscillateNumDo
00003B2C 6100 0000                  		bsr.w	ChangeRingFrame
00003B30 6100 0000                  		bsr.w	SignpostArtLoad
00003B34 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B3A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B3C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B40 6600 FC5E                  		bne.w	Level		; if yes, branch
00003B44 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B4A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B4E 4E75                       		rts	
00003B50                            ; ===========================================================================
00003B50                            
00003B50                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B50 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B54 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B56 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B5A 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B5C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B62 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B66 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B6C 4E75                       		rts	
00003B6E                            ; ===========================================================================
00003B6E                            
00003B6E                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B6E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B74 6600                       		bne.s	loc_3B88	; if not, branch
00003B76 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B7C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B80 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B82 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B88                            
00003B88                            loc_3B88:
00003B88 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B8E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B94 4278 F794                  		clr.w	($FFFFF794).w
00003B98                            
00003B98                            loc_3B98:
00003B98 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B9E 6100 EE08                  		bsr.w	DelayProgram
00003BA2 6100 0000                  		bsr.w	MoveSonicInDemo
00003BA6 4EB9 0000 0000             		jsr	ObjectsLoad
00003BAC 4EB9 0000 0000             		jsr	BuildSprites
00003BB2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BB8 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BBC 6A00                       		bpl.s	loc_3BC8
00003BBE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BC4 6100 E2AC                  		bsr.w	Pal_FadeOut
00003BC8                            
00003BC8                            loc_3BC8:
00003BC8 4A78 F614                  		tst.w	($FFFFF614).w
00003BCC 66CA                       		bne.s	loc_3B98
00003BCE 4E75                       		rts	
00003BD0                            ; ===========================================================================
00003BD0                            ; ---------------------------------------------------------------------------
00003BD0                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BD0                            ; ---------------------------------------------------------------------------
00003BD0                            
00003BD0                            LZWaterEffects:				; XREF: Level
00003BD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BD6 6600                       		bne.s	locret_3C28	; if not, branch
00003BD8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BDE 6400                       		bcc.s	LZMoveWater
00003BE0 6100 0000                  		bsr.w	LZWindTunnels
00003BE4 6100 0000                  		bsr.w	LZWaterSlides
00003BE8 6100 0000                  		bsr.w	LZDynamicWater
00003BEC                            
00003BEC                            LZMoveWater:
00003BEC 4238 F64E                  		clr.b	($FFFFF64E).w
00003BF0 7000                       		moveq	#0,d0
00003BF2 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BF6 E248                       		lsr.w	#1,d0
00003BF8 D078 F648                  		add.w	($FFFFF648).w,d0
00003BFC 31C0 F646                  		move.w	d0,($FFFFF646).w
00003C00 3038 F646                  		move.w	($FFFFF646).w,d0
00003C04 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C08 6400                       		bcc.s	loc_3C1A
00003C0A 4A40                       		tst.w	d0
00003C0C 6A00                       		bpl.s	loc_3C1A
00003C0E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C14 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C1A                            
00003C1A                            loc_3C1A:
00003C1A 0C40 00DF                  		cmpi.w	#$DF,d0
00003C1E 6500                       		bcs.s	loc_3C24
00003C20 303C 00DF                  		move.w	#$DF,d0
00003C24                            
00003C24                            loc_3C24:
00003C24 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C28                            
00003C28                            locret_3C28:
00003C28 4E75                       		rts	
00003C2A                            ; ===========================================================================
00003C2A                            ; ---------------------------------------------------------------------------
00003C2A                            ; Labyrinth default water heights
00003C2A                            ; ---------------------------------------------------------------------------
00003C2A                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C32                            		even
00003C32                            ; ===========================================================================
00003C32                            
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            ; Labyrinth dynamic water routines
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            
00003C32                            LZDynamicWater:				; XREF: LZWaterEffects
00003C32 7000                       		moveq	#0,d0
00003C34 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C38 D040                       		add.w	d0,d0
00003C3A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C3E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C42 7200                       		moveq	#0,d1
00003C44 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C48 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C4C 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C50 6700                       		beq.s	locret_3C5A
00003C52 6400                       		bcc.s	loc_3C56
00003C54 4441                       		neg.w	d1
00003C56                            
00003C56                            loc_3C56:
00003C56 D378 F648                  		add.w	d1,($FFFFF648).w
00003C5A                            
00003C5A                            locret_3C5A:
00003C5A 4E75                       		rts	
00003C5C                            ; ===========================================================================
00003C5C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C5E 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C60 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C62 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C64                            ; ===========================================================================
00003C64                            
00003C64                            DynWater_LZ1:				; XREF: DynWater_Index
00003C64 3038 F700                  		move.w	($FFFFF700).w,d0
00003C68 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C6C 6600                       		bne.s	loc_3CD0
00003C6E 323C 00B8                  		move.w	#$B8,d1
00003C72 0C40 0600                  		cmpi.w	#$600,d0
00003C76 6500                       		bcs.s	loc_3CB4
00003C78 323C 0108                  		move.w	#$108,d1
00003C7C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C82 6500                       		bcs.s	loc_3CBA
00003C84 0C40 0C00                  		cmpi.w	#$C00,d0
00003C88 6500                       		bcs.s	loc_3CB4
00003C8A 323C 0318                  		move.w	#$318,d1
00003C8E 0C40 1080                  		cmpi.w	#$1080,d0
00003C92 6500                       		bcs.s	loc_3CB4
00003C94 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C9A 323C 05C8                  		move.w	#$5C8,d1
00003C9E 0C40 1380                  		cmpi.w	#$1380,d0
00003CA2 6500                       		bcs.s	loc_3CB4
00003CA4 323C 03A8                  		move.w	#$3A8,d1
00003CA8 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CAC 6600                       		bne.s	loc_3CB4
00003CAE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CB4                            
00003CB4                            loc_3CB4:
00003CB4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CB8 4E75                       		rts	
00003CBA                            ; ===========================================================================
00003CBA                            
00003CBA                            loc_3CBA:				; XREF: DynWater_LZ1
00003CBA 0C40 0C80                  		cmpi.w	#$C80,d0
00003CBE 65F4                       		bcs.s	loc_3CB4
00003CC0 323C 00E8                  		move.w	#$E8,d1
00003CC4 0C40 1500                  		cmpi.w	#$1500,d0
00003CC8 65EA                       		bcs.s	loc_3CB4
00003CCA 323C 0108                  		move.w	#$108,d1
00003CCE 60E4                       		bra.s	loc_3CB4
00003CD0                            ; ===========================================================================
00003CD0                            
00003CD0                            loc_3CD0:				; XREF: DynWater_LZ1
00003CD0 5302                       		subq.b	#1,d2
00003CD2 6600                       		bne.s	locret_3CF4
00003CD4 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CDA 6400                       		bcc.s	locret_3CF4
00003CDC 323C 03A8                  		move.w	#$3A8,d1
00003CE0 0C40 1300                  		cmpi.w	#$1300,d0
00003CE4 6500                       		bcs.s	loc_3CF0
00003CE6 323C 0108                  		move.w	#$108,d1
00003CEA 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CF0                            
00003CF0                            loc_3CF0:
00003CF0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF4                            
00003CF4                            locret_3CF4:
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            DynWater_LZ2:				; XREF: DynWater_Index
00003CF6 3038 F700                  		move.w	($FFFFF700).w,d0
00003CFA 323C 0328                  		move.w	#$328,d1
00003CFE 0C40 0500                  		cmpi.w	#$500,d0
00003D02 6500                       		bcs.s	loc_3D12
00003D04 323C 03C8                  		move.w	#$3C8,d1
00003D08 0C40 0B00                  		cmpi.w	#$B00,d0
00003D0C 6500                       		bcs.s	loc_3D12
00003D0E 323C 0428                  		move.w	#$428,d1
00003D12                            
00003D12                            loc_3D12:
00003D12 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D16 4E75                       		rts	
00003D18                            ; ===========================================================================
00003D18                            
00003D18                            DynWater_LZ3:				; XREF: DynWater_Index
00003D18 3038 F700                  		move.w	($FFFFF700).w,d0
00003D1C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D20 6600                       		bne.s	loc_3D5E
00003D22 323C 0900                  		move.w	#$900,d1
00003D26 0C40 0600                  		cmpi.w	#$600,d0
00003D2A 6500                       		bcs.s	loc_3D54
00003D2C 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D32 6500                       		bcs.s	loc_3D54
00003D34 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D3A 6400                       		bcc.s	loc_3D54
00003D3C 323C 04C8                  		move.w	#$4C8,d1
00003D40 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D46 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D4C 303C 00B7                  		move.w	#$B7,d0
00003D50 6100 D64A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D54                            
00003D54                            loc_3D54:
00003D54 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D58 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D5C 4E75                       		rts	
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            loc_3D5E:				; XREF: DynWater_LZ3
00003D5E 5302                       		subq.b	#1,d2
00003D60 6600                       		bne.s	loc_3DA8
00003D62 323C 04C8                  		move.w	#$4C8,d1
00003D66 0C40 0770                  		cmpi.w	#$770,d0
00003D6A 6500                       		bcs.s	loc_3DA2
00003D6C 323C 0308                  		move.w	#$308,d1
00003D70 0C40 1400                  		cmpi.w	#$1400,d0
00003D74 6500                       		bcs.s	loc_3DA2
00003D76 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D7C 6700                       		beq.s	loc_3D8E
00003D7E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D84 6400                       		bcc.s	loc_3D8E
00003D86 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D8C 6400                       		bcc.s	loc_3DA2
00003D8E                            
00003D8E                            loc_3D8E:
00003D8E 323C 0508                  		move.w	#$508,d1
00003D92 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D96 0C40 1770                  		cmpi.w	#$1770,d0
00003D9A 6500                       		bcs.s	loc_3DA2
00003D9C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DA2                            
00003DA2                            loc_3DA2:
00003DA2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DA6 4E75                       		rts	
00003DA8                            ; ===========================================================================
00003DA8                            
00003DA8                            loc_3DA8:
00003DA8 5302                       		subq.b	#1,d2
00003DAA 6600                       		bne.s	loc_3DD2
00003DAC 323C 0508                  		move.w	#$508,d1
00003DB0 0C40 1860                  		cmpi.w	#$1860,d0
00003DB4 6500                       		bcs.s	loc_3DCC
00003DB6 323C 0188                  		move.w	#$188,d1
00003DBA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBE 6400                       		bcc.s	loc_3DC6
00003DC0 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC4 6600                       		bne.s	loc_3DCC
00003DC6                            
00003DC6                            loc_3DC6:
00003DC6 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DCC                            
00003DCC                            loc_3DCC:
00003DCC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD0 4E75                       		rts	
00003DD2                            ; ===========================================================================
00003DD2                            
00003DD2                            loc_3DD2:
00003DD2 5302                       		subq.b	#1,d2
00003DD4 6600                       		bne.s	loc_3E0E
00003DD6 323C 0188                  		move.w	#$188,d1
00003DDA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DDE 6500                       		bcs.s	loc_3E04
00003DE0 323C 0900                  		move.w	#$900,d1
00003DE4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DE8 6500                       		bcs.s	loc_3E04
00003DEA 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DF0 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DF6 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DFC 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003E02 4E75                       		rts	
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_3E04:
00003E04 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E08 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E0C 4E75                       		rts	
00003E0E                            ; ===========================================================================
00003E0E                            
00003E0E                            loc_3E0E:
00003E0E 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E12 6500                       		bcs.s	locret_3E1A
00003E14 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E1A                            
00003E1A                            locret_3E1A:
00003E1A 4E75                       		rts	
00003E1C                            ; ===========================================================================
00003E1C                            
00003E1C                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E1C 323C 0228                  		move.w	#$228,d1
00003E20 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E26 6500                       		bcs.s	loc_3E2C
00003E28 323C 04C8                  		move.w	#$4C8,d1
00003E2C                            
00003E2C                            loc_3E2C:
00003E2C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E30 4E75                       		rts
00003E32                            
00003E32                            ; ---------------------------------------------------------------------------
00003E32                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E32                            ; ---------------------------------------------------------------------------
00003E32                            
00003E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E32                            
00003E32                            
00003E32                            LZWindTunnels:				; XREF: LZWaterEffects
00003E32 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E36 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E3A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E40 7000                       		moveq	#0,d0
00003E42 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E46 E748                       		lsl.w	#3,d0
00003E48 D4C0                       		adda.w	d0,a2
00003E4A 7200                       		moveq	#0,d1
00003E4C 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E50 6600                       		bne.s	loc_3E56
00003E52 7201                       		moveq	#1,d1
00003E54 514A                       		subq.w	#8,a2
00003E56                            
00003E56                            loc_3E56:
00003E56 43F8 D000                  		lea	($FFFFD000).w,a1
00003E5A                            
00003E5A                            LZWind_Loop:
00003E5A 3029 0008                  		move.w	8(a1),d0
00003E5E B052                       		cmp.w	(a2),d0
00003E60 6500 0000                  		bcs.w	loc_3EF4
00003E64 B06A 0004                  		cmp.w	4(a2),d0
00003E68 6400 0000                  		bcc.w	loc_3EF4
00003E6C 3429 000C                  		move.w	$C(a1),d2
00003E70 B46A 0002                  		cmp.w	2(a2),d2
00003E74 6500                       		bcs.s	loc_3EF4
00003E76 B46A 0006                  		cmp.w	6(a2),d2
00003E7A 6400                       		bcc.s	loc_3EF4
00003E7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E80 0200 003F                  		andi.b	#$3F,d0
00003E84 6600                       		bne.s	loc_3E90
00003E86 303C 00D0                  		move.w	#$D0,d0
00003E8A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E90                            
00003E90                            loc_3E90:
00003E90 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E94 6600 0000                  		bne.w	locret_3F0A
00003E98 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E9E 6400                       		bcc.s	loc_3F06
00003EA0 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EA6 0440 0080                  		subi.w	#$80,d0
00003EAA B052                       		cmp.w	(a2),d0
00003EAC 6400                       		bcc.s	LZWind_Move
00003EAE 7002                       		moveq	#2,d0
00003EB0 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EB6 6600                       		bne.s	loc_3EBA
00003EB8 4440                       		neg.w	d0
00003EBA                            
00003EBA                            loc_3EBA:
00003EBA D169 000C                  		add.w	d0,$C(a1)
00003EBE                            
00003EBE                            LZWind_Move:
00003EBE 5869 0008                  		addq.w	#4,8(a1)
00003EC2 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EC8 337C 0000 0012             		move.w	#0,$12(a1)
00003ECE 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003ED4 08E9 0001 0022             		bset	#1,$22(a1)
00003EDA 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EE0 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EE2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EE6                            
00003EE6                            LZWind_MoveDown:
00003EE6 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EEC 6700                       		beq.s	locret_3EF2	; if not, branch
00003EEE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003EF2                            
00003EF2                            locret_3EF2:
00003EF2 4E75                       		rts	
00003EF4                            ; ===========================================================================
00003EF4                            
00003EF4                            loc_3EF4:				; XREF: LZWindTunnels
00003EF4 504A                       		addq.w	#8,a2
00003EF6 51C9 FF62                  		dbf	d1,LZWind_Loop
00003EFA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EFE 6700                       		beq.s	locret_3F0A
00003F00 137C 0000 001C             		move.b	#0,$1C(a1)
00003F06                            
00003F06                            loc_3F06:
00003F06 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F0A                            
00003F0A                            locret_3F0A:
00003F0A 4E75                       		rts	
00003F0C                            ; End of function LZWindTunnels
00003F0C                            
00003F0C                            ; ===========================================================================
00003F0C 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F14 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F26 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F34                            					; XREF: LZWindTunnels
00003F34                            		even
00003F34                            
00003F34                            ; ---------------------------------------------------------------------------
00003F34                            ; Labyrinth Zone water slide subroutine
00003F34                            ; ---------------------------------------------------------------------------
00003F34                            
00003F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F34                            
00003F34                            
00003F34                            LZWaterSlides:				; XREF: LZWaterEffects
00003F34 43F8 D000                  		lea	($FFFFD000).w,a1
00003F38 0829 0001 0022             		btst	#1,$22(a1)
00003F3E 6600                       		bne.s	loc_3F6A
00003F40 3029 000C                  		move.w	$C(a1),d0
00003F44 E248                       		lsr.w	#1,d0
00003F46 0240 0380                  		andi.w	#$380,d0
00003F4A 1229 0008                  		move.b	8(a1),d1
00003F4E 0241 007F                  		andi.w	#$7F,d1
00003F52 D041                       		add.w	d1,d0
00003F54 45F8 A400                  		lea	($FFFFA400).w,a2
00003F58 1032 0000                  		move.b	(a2,d0.w),d0
00003F5C 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F60 7206                       		moveq	#6,d1
00003F62                            
00003F62                            loc_3F62:
00003F62 B022                       		cmp.b	-(a2),d0
00003F64 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F68 6700                       		beq.s	LZSlide_Move
00003F6A                            
00003F6A                            loc_3F6A:
00003F6A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F6E 6700                       		beq.s	locret_3F7A
00003F70 337C 0005 003E             		move.w	#5,$3E(a1)
00003F76 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F7A                            
00003F7A                            locret_3F7A:
00003F7A 4E75                       		rts	
00003F7C                            ; ===========================================================================
00003F7C                            
00003F7C                            LZSlide_Move:				; XREF: LZWaterSlides
00003F7C 0C41 0003                  		cmpi.w	#3,d1
00003F80 6400                       		bcc.s	loc_3F84
00003F82 4E71                       		nop	
00003F84                            
00003F84                            loc_3F84:
00003F84 08A9 0000 0022             		bclr	#0,$22(a1)
00003F8A 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F8E 1340 0014                  		move.b	d0,$14(a1)
00003F92 6A00                       		bpl.s	loc_3F9A
00003F94 08E9 0000 0022             		bset	#0,$22(a1)
00003F9A                            
00003F9A                            loc_3F9A:
00003F9A 4229 0015                  		clr.b	$15(a1)
00003F9E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FA4 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FAA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FAE 0200 001F                  		andi.b	#$1F,d0
00003FB2 6600                       		bne.s	locret_3FBE
00003FB4 303C 00D0                  		move.w	#$D0,d0
00003FB8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play water sound
00003FBE                            
00003FBE                            locret_3FBE:
00003FBE 4E75                       		rts	
00003FC0                            ; End of function LZWaterSlides
00003FC0                            
00003FC0                            ; ===========================================================================
00003FC0 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FCF 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FD0                            		even
00003FD0                            
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            ; Subroutine to	move Sonic in demo mode
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            
00003FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FD0                            
00003FD0                            
00003FD0                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FD0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FD4 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FD6 4E75                       		rts	
00003FD8                            ; ===========================================================================
00003FD8                            
00003FD8                            ; This is an unused subroutine for recording a demo
00003FD8                            
00003FD8                            MoveDemo_Record:
00003FD8 43F9 0008 0000             		lea	($80000).l,a1
00003FDE 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE2 D2C0                       		adda.w	d0,a1
00003FE4 1038 F604                  		move.b	($FFFFF604).w,d0
00003FE8 B011                       		cmp.b	(a1),d0
00003FEA 6600                       		bne.s	loc_3FFA
00003FEC 5229 0001                  		addq.b	#1,1(a1)
00003FF0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FF6 6700                       		beq.s	loc_3FFA
00003FF8 4E75                       		rts	
00003FFA                            ; ===========================================================================
00003FFA                            
00003FFA                            loc_3FFA:				; XREF: MoveDemo_Record
00003FFA 1340 0002                  		move.b	d0,2(a1)
00003FFE 137C 0000 0003             		move.b	#0,3(a1)
00004004 5478 F790                  		addq.w	#2,($FFFFF790).w
00004008 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000400E 4E75                       		rts	
00004010                            ; ===========================================================================
00004010                            
00004010                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004010 4A38 F604                  		tst.b	($FFFFF604).w
00004014 6A00                       		bpl.s	loc_4022
00004016 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000401A 6B00                       		bmi.s	loc_4022
0000401C 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004022                            
00004022                            loc_4022:
00004022 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004028 7000                       		moveq	#0,d0
0000402A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000402E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004034 6600                       		bne.s	loc_4038
00004036 7006                       		moveq	#6,d0
00004038                            
00004038                            loc_4038:
00004038 E548                       		lsl.w	#2,d0
0000403A 2271 0000                  		movea.l	(a1,d0.w),a1
0000403E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004042 6A00                       		bpl.s	loc_4056
00004044 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000404A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000404E 5340                       		subq.w	#1,d0
00004050 E548                       		lsl.w	#2,d0
00004052 2271 0000                  		movea.l	(a1,d0.w),a1
00004056                            
00004056                            loc_4056:
00004056 3038 F790                  		move.w	($FFFFF790).w,d0
0000405A D2C0                       		adda.w	d0,a1
0000405C 1011                       		move.b	(a1),d0
0000405E 41F8 F604                  		lea	($FFFFF604).w,a0
00004062 1200                       		move.b	d0,d1
00004064 1410                       		move.b	(a0),d2
00004066 B500                       		eor.b	d2,d0
00004068 10C1                       		move.b	d1,(a0)+
0000406A C001                       		and.b	d1,d0
0000406C 10C0                       		move.b	d0,(a0)+
0000406E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004072 6400                       		bcc.s	locret_407E
00004074 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000407A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000407E                            
0000407E                            locret_407E:
0000407E 4E75                       		rts	
00004080                            ; End of function MoveSonicInDemo
00004080                            
00004080                            ; ===========================================================================
00004080                            ; ---------------------------------------------------------------------------
00004080                            ; Demo sequence	pointers
00004080                            ; ---------------------------------------------------------------------------
00004080                            Demo_Index:
00004080                            	include "_inc\Demo pointers for intro.asm"
00004080                            ; ---------------------------------------------------------------------------
00004080                            ; Demo sequence	pointers
00004080                            ; ---------------------------------------------------------------------------
00004080 0000 0000                  	dc.l Demo_GHZ
00004084 0000 0000                  	dc.l Demo_GHZ
00004088 0000 0000                  	dc.l Demo_MZ
0000408C 0000 0000                  	dc.l Demo_MZ
00004090 0000 0000                  	dc.l Demo_SYZ
00004094 0000 0000                  	dc.l Demo_SYZ
00004098 0000 0000                  	dc.l Demo_SS
0000409C 0000 0000                  	dc.l Demo_SS
0000409C 0000 0000                  	dc.l Demo_SS
000040A0                            
000040A0                            Demo_EndIndex:
000040A0                            	include "_inc\Demo pointers for ending.asm"
000040A0                            ; ---------------------------------------------------------------------------
000040A0                            ; Demo (ending) sequence pointers
000040A0                            ; ---------------------------------------------------------------------------
000040A0 0000 0000                  	dc.l Demo_EndGHZ1
000040A4 0000 0000                  	dc.l Demo_EndMZ
000040A8 0000 0000                  	dc.l Demo_EndSYZ
000040AC 0000 0000                  	dc.l Demo_EndLZ
000040B0 0000 0000                  	dc.l Demo_EndSLZ
000040B4 0000 0000                  	dc.l Demo_EndSBZ1
000040B8 0000 0000                  	dc.l Demo_EndSBZ2
000040BC 0000 0000                  	dc.l Demo_EndGHZ2
000040BC 0000 0000                  	dc.l Demo_EndGHZ2
000040C0                            
000040C0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040D0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040E0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040F0                            		even
000040F0                            
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            ; Collision index loading subroutine
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            
000040F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040F0                            
000040F0                            
000040F0                            ColIndexLoad:				; XREF: Level
000040F0 7000                       		moveq	#0,d0
000040F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F6 E548                       		lsl.w	#2,d0
000040F8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040FE 4E75                       		rts	
00004100                            ; End of function ColIndexLoad
00004100                            
00004100                            ; ===========================================================================
00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointers
00004100                            ; ---------------------------------------------------------------------------
00004100                            ColPointers:
00004100                            	include "_inc\Collision index pointers.asm"
00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointers
00004100                            ; ---------------------------------------------------------------------------
00004100 0000 0000                  	dc.l Col_GHZ
00004104 0000 0000                  	dc.l Col_LZ
00004108 0000 0000                  	dc.l Col_MZ
0000410C 0000 0000                  	dc.l Col_SLZ
00004110 0000 0000                  	dc.l Col_SYZ
00004114 0000 0000                  	dc.l Col_SBZ
00004114 0000 0000                  	dc.l Col_SBZ
00004118                            
00004118                            ; ---------------------------------------------------------------------------
00004118                            ; Oscillating number subroutine
00004118                            ; ---------------------------------------------------------------------------
00004118                            
00004118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004118                            
00004118                            
00004118                            OscillateNumInit:			; XREF: Level
00004118 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000411C 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004122 7220                       		moveq	#$20,d1
00004124                            
00004124                            Osc_Loop:
00004124 32DA                       		move.w	(a2)+,(a1)+
00004126 51C9 FFFC                  		dbf	d1,Osc_Loop
0000412A 4E75                       		rts	
0000412C                            ; End of function OscillateNumInit
0000412C                            
0000412C                            ; ===========================================================================
0000412C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004130 0000 0080                  		dc.w 0,	$80
00004134 0000 0080                  		dc.w 0,	$80
00004138 0000 0080                  		dc.w 0,	$80
0000413C 0000 0080                  		dc.w 0,	$80
00004140 0000 0080                  		dc.w 0,	$80
00004144 0000 0080                  		dc.w 0,	$80
00004148 0000 0080                  		dc.w 0,	$80
0000414C 0000 0080                  		dc.w 0,	$80
00004150 0000 50F0                  		dc.w 0,	$50F0
00004154 011E 2080                  		dc.w $11E, $2080
00004158 00B4 3080                  		dc.w $B4, $3080
0000415C 010E 5080                  		dc.w $10E, $5080
00004160 01C2 7080                  		dc.w $1C2, $7080
00004164 0276 0080                  		dc.w $276, $80
00004168 0000 0080                  		dc.w 0,	$80
0000416C 0000                       		dc.w 0
0000416E                            		even
0000416E                            
0000416E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000416E                            
0000416E                            
0000416E                            OscillateNumDo:				; XREF: Level
0000416E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004174 6400                       		bcc.s	locret_41C4
00004176 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000417A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004180 3619                       		move.w	(a1)+,d3
00004182 720F                       		moveq	#$F,d1
00004184                            
00004184                            loc_4184:
00004184 341A                       		move.w	(a2)+,d2
00004186 381A                       		move.w	(a2)+,d4
00004188 0303                       		btst	d1,d3
0000418A 6600                       		bne.s	loc_41A4
0000418C 3029 0002                  		move.w	2(a1),d0
00004190 D042                       		add.w	d2,d0
00004192 3340 0002                  		move.w	d0,2(a1)
00004196 D151                       		add.w	d0,0(a1)
00004198 B811                       		cmp.b	0(a1),d4
0000419A 6200                       		bhi.s	loc_41BA
0000419C 03C3                       		bset	d1,d3
0000419E 6000                       		bra.s	loc_41BA
000041A0                            ; ===========================================================================
000041A0                            
000041A0                            loc_41A4:				; XREF: OscillateNumDo
000041A0 3029 0002                  		move.w	2(a1),d0
000041A4 9042                       		sub.w	d2,d0
000041A6 3340 0002                  		move.w	d0,2(a1)
000041AA D151                       		add.w	d0,0(a1)
000041AC B811                       		cmp.b	0(a1),d4
000041AE 6300                       		bls.s	loc_41BA
000041B0 0383                       		bclr	d1,d3
000041B2                            
000041B2                            loc_41BA:
000041B2 5849                       		addq.w	#4,a1
000041B4 51C9 FFCE                  		dbf	d1,loc_4184
000041B8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041BC                            
000041BC                            locret_41C4:
000041BC 4E75                       		rts	
000041BE                            ; End of function OscillateNumDo
000041BE                            
000041BE                            ; ===========================================================================
000041BE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041C2 0002 0018                  		dc.w 2,	$18
000041C6 0002 0020                  		dc.w 2,	$20
000041CA 0002 0030                  		dc.w 2,	$30
000041CE 0004 0020                  		dc.w 4,	$20
000041D2 0008 0008                  		dc.w 8,	8
000041D6 0008 0040                  		dc.w 8,	$40
000041DA 0004 0040                  		dc.w 4,	$40
000041DE 0002 0050                  		dc.w 2,	$50
000041E2 0002 0050                  		dc.w 2,	$50
000041E6 0002 0020                  		dc.w 2,	$20
000041EA 0003 0030                  		dc.w 3,	$30
000041EE 0005 0050                  		dc.w 5,	$50
000041F2 0007 0070                  		dc.w 7,	$70
000041F6 0002 0010                  		dc.w 2,	$10
000041FA 0002 0010                  		dc.w 2,	$10
000041FE                            		even
000041FE                            
000041FE                            ; ---------------------------------------------------------------------------
000041FE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041FE                            ; ---------------------------------------------------------------------------
000041FE                            
000041FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FE                            
000041FE                            
000041FE                            ChangeRingFrame:			; XREF: Level
000041FE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004202 6A00                       		bpl.s	loc_421C
00004204 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000420A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000420E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004214                            
00004214                            loc_421C:
00004214 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004218 6A00                       		bpl.s	loc_4232
0000421A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004220 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004224 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000422A                            
0000422A                            loc_4232:
0000422A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000422E 6A00                       		bpl.s	loc_4250
00004230 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004236 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000423A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004240 6500                       		bcs.s	loc_4250
00004242 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004248                            
00004248                            loc_4250:
00004248 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000424C 6700                       		beq.s	locret_4272
0000424E 7000                       		moveq	#0,d0
00004250 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004254 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004258 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000425C EF58                       		rol.w	#7,d0
0000425E 0240 0003                  		andi.w	#3,d0
00004262 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004266 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000426A                            
0000426A                            locret_4272:
0000426A 4E75                       		rts	
0000426C                            ; End of function ChangeRingFrame
0000426C                            
0000426C                            ; ---------------------------------------------------------------------------
0000426C                            ; End-of-act signpost pattern loading subroutine
0000426C                            ; ---------------------------------------------------------------------------
0000426C                            
0000426C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000426C                            
0000426C                            
0000426C                            SignpostArtLoad:			; XREF: Level
0000426C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004270 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004274 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000427A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000427C 3038 F700                  		move.w	($FFFFF700).w,d0
00004280 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004284 0441 0100                  		subi.w	#$100,d1
00004288 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000428A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000428C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004290 6700                       		beq.s	Signpost_Exit
00004292 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004296 6700                       		beq.s	Signpost_Exit
00004298 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000429C 7012                       		moveq	#$12,d0
0000429E 6000 D312                  		bra.w	LoadPLC2	; load signpost	patterns
000042A2                            ; ===========================================================================
000042A2                            
000042A2                            Signpost_Exit:
000042A2 4E75                       		rts	
000042A4                            ; End of function SignpostArtLoad
000042A4                            
000042A4                            ; ===========================================================================
000042A4                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004324                            Demo_MZ:	incbin	demodata\i_mz.bin
00004454                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044D4                            Demo_SS:	incbin	demodata\i_ss.bin
000045D4                            ; ===========================================================================
000045D4                            
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Special Stage
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            
000045D4                            SpecialStage:				; XREF: GameModeArray
000045D4 303C 00CA                  		move.w	#$CA,d0
000045D8 6100 CDC2                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045DC 6100 D99E                  		bsr.w	Pal_MakeFlash
000045E0 46FC 2700                  		move	#$2700,sr
000045E4 4DF9 00C0 0004             		lea	($C00004).l,a6
000045EA 3CBC 8B03                  		move.w	#$8B03,(a6)
000045EE 3CBC 8004                  		move.w	#$8004,(a6)
000045F2 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045F8 3CBC 9011                  		move.w	#$9011,(a6)
000045FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004600 0200 00BF                  		andi.b	#$BF,d0
00004604 33C0 00C0 0004             		move.w	d0,($C00004).l
0000460A 6100 CCB8                  		bsr.w	ClearScreen
0000460E 46FC 2300                  		move	#$2300,sr
00004612 4BF9 00C0 0004             		lea	($C00004).l,a5
00004618 3ABC 8F01                  		move.w	#$8F01,(a5)
0000461C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004622 3ABC 9780                  		move.w	#$9780,(a5)
00004626 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000462C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004634                            
00004634                            loc_463C:
00004634 3215                       		move.w	(a5),d1
00004636 0801 0001                  		btst	#1,d1
0000463A 66F8                       		bne.s	loc_463C
0000463C 3ABC 8F02                  		move.w	#$8F02,(a5)
00004640 6100 0000                  		bsr.w	SS_BGLoad
00004644 7014                       		moveq	#$14,d0
00004646 6100 D0A4                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000464A 43F8 D000                  		lea	($FFFFD000).w,a1
0000464E 7000                       		moveq	#0,d0
00004650 323C 07FF                  		move.w	#$7FF,d1
00004654                            
00004654                            SS_ClrObjRam:
00004654 22C0                       		move.l	d0,(a1)+
00004656 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000465A                            
0000465A 43F8 F700                  		lea	($FFFFF700).w,a1
0000465E 7000                       		moveq	#0,d0
00004660 323C 003F                  		move.w	#$3F,d1
00004664                            
00004664                            SS_ClrRam:
00004664 22C0                       		move.l	d0,(a1)+
00004666 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000466A                            
0000466A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000466E 7000                       		moveq	#0,d0
00004670 323C 0027                  		move.w	#$27,d1
00004674                            
00004674                            SS_ClrRam2:
00004674 22C0                       		move.l	d0,(a1)+
00004676 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000467A                            
0000467A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000467E 7000                       		moveq	#0,d0
00004680 323C 007F                  		move.w	#$7F,d1
00004684                            
00004684                            SS_ClrNemRam:
00004684 22C0                       		move.l	d0,(a1)+
00004686 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000468A                            
0000468A 4238 F64E                  		clr.b	($FFFFF64E).w
0000468E 4278 FE02                  		clr.w	($FFFFFE02).w
00004692 700A                       		moveq	#$A,d0
00004694 6100 DA66                  		bsr.w	PalLoad1	; load special stage pallet
00004698 4EB9 0000 0000             		jsr	SS_Load
0000469E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046A6 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046AE 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046B4 6100 0000                  		bsr.w	PalCycle_SS
000046B8 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046BC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046C2 303C 0089                  		move.w	#$89,d0
000046C6 6100 CCCE                  		bsr.w	PlaySound	; play special stage BG	music
000046CA 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046D0 43F9 0000 4080             		lea	(Demo_Index).l,a1
000046D6 7006                       		moveq	#6,d0
000046D8 E548                       		lsl.w	#2,d0
000046DA 2271 0000                  		movea.l	(a1,d0.w),a1
000046DE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046E4 5338 F792                  		subq.b	#1,($FFFFF792).w
000046E8 4278 FE20                  		clr.w	($FFFFFE20).w
000046EC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046F0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046F6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046FC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004700 6700                       		beq.s	SS_NoDebug	; if not, branch
00004702 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004708 6700                       		beq.s	SS_NoDebug	; if not, branch
0000470A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004710                            
00004710                            SS_NoDebug:
00004710 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004714 0000 0040                  		ori.b	#$40,d0
00004718 33C0 00C0 0004             		move.w	d0,($C00004).l
0000471E 6100 D7B0                  		bsr.w	Pal_MakeWhite
00004722                            
00004722                            ; ---------------------------------------------------------------------------
00004722                            ; Main Special Stage loop
00004722                            ; ---------------------------------------------------------------------------
00004722                            
00004722                            SS_MainLoop:
00004722 6100 CC84                  		bsr.w	PauseGame
00004726 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000472C 6100 E27A                  		bsr.w	DelayProgram
00004730 6100 F89E                  		bsr.w	MoveSonicInDemo
00004734 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000473A 4EB9 0000 0000             		jsr	ObjectsLoad
00004740 4EB9 0000 0000             		jsr	BuildSprites
00004746 4EB9 0000 0000             		jsr	SS_ShowLayout
0000474C 6100 0000                  		bsr.w	SS_BGAnimate
00004750 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004754 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004756 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000475A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000475E                            
0000475E                            SS_ChkEnd:
0000475E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004764 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004768                            
00004768 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000476C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004770 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004776 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000477C 6500                       		bcs.s	SS_End		; if not, branch
0000477E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004782                            
00004782                            SS_End:
00004782 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004788 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000478E 4278 F794                  		clr.w	($FFFFF794).w
00004792                            
00004792                            SS_EndLoop:
00004792 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004798 6100 E20E                  		bsr.w	DelayProgram
0000479C 6100 F832                  		bsr.w	MoveSonicInDemo
000047A0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047A6 4EB9 0000 0000             		jsr	ObjectsLoad
000047AC 4EB9 0000 0000             		jsr	BuildSprites
000047B2 4EB9 0000 0000             		jsr	SS_ShowLayout
000047B8 6100 0000                  		bsr.w	SS_BGAnimate
000047BC 5378 F794                  		subq.w	#1,($FFFFF794).w
000047C0 6A00                       		bpl.s	loc_47D4
000047C2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047C8 6100 D7D2                  		bsr.w	Pal_ToWhite
000047CC                            
000047CC                            loc_47D4:
000047CC 4A78 F614                  		tst.w	($FFFFF614).w
000047D0 66C0                       		bne.s	SS_EndLoop
000047D2                            
000047D2 46FC 2700                  		move	#$2700,sr
000047D6 4DF9 00C0 0004             		lea	($C00004).l,a6
000047DC 3CBC 8230                  		move.w	#$8230,(a6)
000047E0 3CBC 8407                  		move.w	#$8407,(a6)
000047E4 3CBC 9001                  		move.w	#$9001,(a6)
000047E8 6100 CADA                  		bsr.w	ClearScreen
000047EC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047F6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047FC 6100 CC42                  		bsr.w	NemDec
00004800 4EB9 0000 0000             		jsr	Hud_Base
00004806 46FC 2300                  		move	#$2300,sr
0000480A 7011                       		moveq	#$11,d0
0000480C 6100 D90A                  		bsr.w	PalLoad2	; load results screen pallet
00004810 7000                       		moveq	#0,d0
00004812 6100 CD9E                  		bsr.w	LoadPLC2
00004816 701B                       		moveq	#$1B,d0
00004818 6100 CD66                  		bsr.w	LoadPLC		; load results screen patterns
0000481C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004822 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004828 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000482C C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004830 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004834 303C 008E                  		move.w	#$8E,d0
00004838 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000483E 43F8 D000                  		lea	($FFFFD000).w,a1
00004842 7000                       		moveq	#0,d0
00004844 323C 07FF                  		move.w	#$7FF,d1
00004848                            
00004848                            SS_EndClrObjRam:
00004848 22C0                       		move.l	d0,(a1)+
0000484A 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000484E                            
0000484E 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004854                            
00004854                            SS_NormalExit:
00004854 6100 CB52                  		bsr.w	PauseGame
00004858 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000485E 6100 E148                  		bsr.w	DelayProgram
00004862 4EB9 0000 0000             		jsr	ObjectsLoad
00004868 4EB9 0000 0000             		jsr	BuildSprites
0000486E 6100 CD7C                  		bsr.w	RunPLC_RAM
00004872 4A78 FE02                  		tst.w	($FFFFFE02).w
00004876 67DC                       		beq.s	SS_NormalExit
00004878 4AB8 F680                  		tst.l	($FFFFF680).w
0000487C 66D6                       		bne.s	SS_NormalExit
0000487E 303C 00CA                  		move.w	#$CA,d0
00004882 6100 CB18                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004886 6100 D6F4                  		bsr.w	Pal_MakeFlash
0000488A 4E75                       		rts	
0000488C                            ; ===========================================================================
0000488C                            
0000488C                            SS_ToSegaScreen:
0000488C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004892 4E75                       		rts
00004894                            
00004894                            ; ---------------------------------------------------------------------------
00004894                            ; Special stage	background loading subroutine
00004894                            ; ---------------------------------------------------------------------------
00004894                            
00004894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004894                            
00004894                            
00004894                            SS_BGLoad:				; XREF: SpecialStage
00004894 43F9 00FF 0000             		lea	($FF0000).l,a1
0000489A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000048A0 303C 4051                  		move.w	#$4051,d0
000048A4 6100 CE78                  		bsr.w	EniDec
000048A8 263C 5000 0001             		move.l	#$50000001,d3
000048AE 45F9 00FF 0080             		lea	($FF0080).l,a2
000048B4 7E06                       		moveq	#6,d7
000048B6                            
000048B6                            loc_48BE:
000048B6 2003                       		move.l	d3,d0
000048B8 7C03                       		moveq	#3,d6
000048BA 7800                       		moveq	#0,d4
000048BC 0C47 0003                  		cmpi.w	#3,d7
000048C0 6400                       		bcc.s	loc_48CC
000048C2 7801                       		moveq	#1,d4
000048C4                            
000048C4                            loc_48CC:
000048C4 7A07                       		moveq	#7,d5
000048C6                            
000048C6                            loc_48CE:
000048C6 224A                       		movea.l	a2,a1
000048C8 0A04 0001                  		eori.b	#1,d4
000048CC 6600                       		bne.s	loc_48E2
000048CE 0C47 0006                  		cmpi.w	#6,d7
000048D2 6600                       		bne.s	loc_48F2
000048D4 43F9 00FF 0000             		lea	($FF0000).l,a1
000048DA                            
000048DA                            loc_48E2:
000048DA 48E7 F800                  		movem.l	d0-d4,-(sp)
000048DE 7207                       		moveq	#7,d1
000048E0 7407                       		moveq	#7,d2
000048E2 6100 CB3C                  		bsr.w	ShowVDPGraphics
000048E6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048EA                            
000048EA                            loc_48F2:
000048EA 0680 0010 0000             		addi.l	#$100000,d0
000048F0 51CD FFD4                  		dbf	d5,loc_48CE
000048F4 0680 0380 0000             		addi.l	#$3800000,d0
000048FA 0A04 0001                  		eori.b	#1,d4
000048FE 51CE FFC4                  		dbf	d6,loc_48CC
00004902 0683 1000 0000             		addi.l	#$10000000,d3
00004908 6A00                       		bpl.s	loc_491C
0000490A 4843                       		swap	d3
0000490C 0683 0000 C000             		addi.l	#$C000,d3
00004912 4843                       		swap	d3
00004914                            
00004914                            loc_491C:
00004914 D4FC 0080                  		adda.w	#$80,a2
00004918 51CF FF9C                  		dbf	d7,loc_48BE
0000491C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004922 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004928 303C 4000                  		move.w	#$4000,d0
0000492C 6100 CDF0                  		bsr.w	EniDec
00004930 43F9 00FF 0000             		lea	($FF0000).l,a1
00004936 203C 4000 0003             		move.l	#$40000003,d0
0000493C 723F                       		moveq	#$3F,d1
0000493E 741F                       		moveq	#$1F,d2
00004940 6100 CADE                  		bsr.w	ShowVDPGraphics
00004944 43F9 00FF 0000             		lea	($FF0000).l,a1
0000494A 203C 5000 0003             		move.l	#$50000003,d0
00004950 723F                       		moveq	#$3F,d1
00004952 743F                       		moveq	#$3F,d2
00004954 6100 CACA                  		bsr.w	ShowVDPGraphics
00004958 4E75                       		rts	
0000495A                            ; End of function SS_BGLoad
0000495A                            
0000495A                            ; ---------------------------------------------------------------------------
0000495A                            ; Pallet cycling routine - special stage
0000495A                            ; ---------------------------------------------------------------------------
0000495A                            
0000495A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000495A                            
0000495A                            
0000495A                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000495A 4A78 F63A                  		tst.w	($FFFFF63A).w
0000495E 6600                       		bne.s	locret_49E6
00004960 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004964 6A00                       		bpl.s	locret_49E6
00004966 4DF9 00C0 0004             		lea	($C00004).l,a6
0000496C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004970 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004974 0240 001F                  		andi.w	#$1F,d0
00004978 E548                       		lsl.w	#2,d0
0000497A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004980 D0C0                       		adda.w	d0,a0
00004982 1018                       		move.b	(a0)+,d0
00004984 6A00                       		bpl.s	loc_4992
00004986 303C 01FF                  		move.w	#$1FF,d0
0000498A                            
0000498A                            loc_4992:
0000498A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000498E 7000                       		moveq	#0,d0
00004990 1018                       		move.b	(a0)+,d0
00004992 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004996 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000499C 43F1 0000                  		lea	(a1,d0.w),a1
000049A0 303C 8200                  		move.w	#-$7E00,d0
000049A4 1019                       		move.b	(a1)+,d0
000049A6 3C80                       		move.w	d0,(a6)
000049A8 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049AC 303C 8400                  		move.w	#-$7C00,d0
000049B0 1018                       		move.b	(a0)+,d0
000049B2 3C80                       		move.w	d0,(a6)
000049B4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049BE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049C6 7000                       		moveq	#0,d0
000049C8 1018                       		move.b	(a0)+,d0
000049CA 6B00                       		bmi.s	loc_49E8
000049CC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049D2 D2C0                       		adda.w	d0,a1
000049D4 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049D8 24D9                       		move.l	(a1)+,(a2)+
000049DA 24D9                       		move.l	(a1)+,(a2)+
000049DC 24D9                       		move.l	(a1)+,(a2)+
000049DE                            
000049DE                            locret_49E6:
000049DE 4E75                       		rts	
000049E0                            ; ===========================================================================
000049E0                            
000049E0                            loc_49E8:				; XREF: PalCycle_SS
000049E0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049E4 0C40 008A                  		cmpi.w	#$8A,d0
000049E8 6500                       		bcs.s	loc_49F4
000049EA 5241                       		addq.w	#1,d1
000049EC                            
000049EC                            loc_49F4:
000049EC C2FC 002A                  		mulu.w	#$2A,d1
000049F0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049F6 D2C1                       		adda.w	d1,a1
000049F8 0240 007F                  		andi.w	#$7F,d0
000049FC 0880 0000                  		bclr	#0,d0
00004A00 6700                       		beq.s	loc_4A18
00004A02 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A06 24D1                       		move.l	(a1),(a2)+
00004A08 24E9 0004                  		move.l	4(a1),(a2)+
00004A0C 24E9 0008                  		move.l	8(a1),(a2)+
00004A10                            
00004A10                            loc_4A18:
00004A10 D2FC 000C                  		adda.w	#$C,a1
00004A14 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A18 0C40 000A                  		cmpi.w	#$A,d0
00004A1C 6500                       		bcs.s	loc_4A2E
00004A1E 0440 000A                  		subi.w	#$A,d0
00004A22 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A26                            
00004A26                            loc_4A2E:
00004A26 3200                       		move.w	d0,d1
00004A28 D040                       		add.w	d0,d0
00004A2A D041                       		add.w	d1,d0
00004A2C D2C0                       		adda.w	d0,a1
00004A2E 24D9                       		move.l	(a1)+,(a2)+
00004A30 34D9                       		move.w	(a1)+,(a2)+
00004A32 4E75                       		rts	
00004A34                            ; End of function PalCycle_SS
00004A34                            
00004A34                            ; ===========================================================================
00004A34 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A44                            					; XREF: PalCycle_SS
00004A44 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A54 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A64 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A74 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A84 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A94 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AA4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AB4                            		even
00004AB4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AC2                            					; XREF: PalCycle_SS
00004AC2                            		even
00004AC2                            
00004AC2                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B0A                            		even
00004B0A                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BDC                            		even
00004BDC                            
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            ; Subroutine to	make the special stage background animated
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            
00004BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BDC                            
00004BDC                            
00004BDC                            SS_BGAnimate:				; XREF: SpecialStage
00004BDC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BE0 6600                       		bne.s	loc_4BF6
00004BE2 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BE8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BEE                            
00004BEE                            loc_4BF6:
00004BEE 0C40 0008                  		cmpi.w	#8,d0
00004BF2 6400                       		bcc.s	loc_4C4E
00004BF4 0C40 0006                  		cmpi.w	#6,d0
00004BF8 6600                       		bne.s	loc_4C10
00004BFA 5278 F718                  		addq.w	#1,($FFFFF718).w
00004BFE 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C02 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C08                            
00004C08                            loc_4C10:
00004C08 7000                       		moveq	#0,d0
00004C0A 3038 F708                  		move.w	($FFFFF708).w,d0
00004C0E 4440                       		neg.w	d0
00004C10 4840                       		swap	d0
00004C12 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C18 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C1C 7609                       		moveq	#9,d3
00004C1E                            
00004C1E                            loc_4C26:
00004C1E 302B 0002                  		move.w	2(a3),d0
00004C22 6100 DDB6                  		bsr.w	CalcSine
00004C26 7400                       		moveq	#0,d2
00004C28 1419                       		move.b	(a1)+,d2
00004C2A C1C2                       		muls.w	d2,d0
00004C2C E080                       		asr.l	#8,d0
00004C2E 36C0                       		move.w	d0,(a3)+
00004C30 1419                       		move.b	(a1)+,d2
00004C32 4882                       		ext.w	d2
00004C34 D55B                       		add.w	d2,(a3)+
00004C36 51CB FFE6                  		dbf	d3,loc_4C26
00004C3A 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C3E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C44 6000                       		bra.s	loc_4C7E
00004C46                            ; ===========================================================================
00004C46                            
00004C46                            loc_4C4E:				; XREF: SS_BGAnimate
00004C46 0C40 000C                  		cmpi.w	#$C,d0
00004C4A 6600                       		bne.s	loc_4C74
00004C4C 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C50 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C54 243C 0001 8000             		move.l	#$18000,d2
00004C5A 7206                       		moveq	#6,d1
00004C5C                            
00004C5C                            loc_4C64:
00004C5C 2013                       		move.l	(a3),d0
00004C5E 9082                       		sub.l	d2,d0
00004C60 26C0                       		move.l	d0,(a3)+
00004C62 0482 0000 2000             		subi.l	#$2000,d2
00004C68 51C9 FFF2                  		dbf	d1,loc_4C64
00004C6C                            
00004C6C                            loc_4C74:
00004C6C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C70 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C76                            
00004C76                            loc_4C7E:
00004C76 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C7A 3038 F718                  		move.w	($FFFFF718).w,d0
00004C7E 4440                       		neg.w	d0
00004C80 4840                       		swap	d0
00004C82 7600                       		moveq	#0,d3
00004C84 161A                       		move.b	(a2)+,d3
00004C86 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C8A 4442                       		neg.w	d2
00004C8C 0242 00FF                  		andi.w	#$FF,d2
00004C90 E54A                       		lsl.w	#2,d2
00004C92                            
00004C92                            loc_4C9A:
00004C92 301B                       		move.w	(a3)+,d0
00004C94 544B                       		addq.w	#2,a3
00004C96 7200                       		moveq	#0,d1
00004C98 121A                       		move.b	(a2)+,d1
00004C9A 5341                       		subq.w	#1,d1
00004C9C                            
00004C9C                            loc_4CA4:
00004C9C 2380 2000                  		move.l	d0,(a1,d2.w)
00004CA0 5842                       		addq.w	#4,d2
00004CA2 0242 03FC                  		andi.w	#$3FC,d2
00004CA6 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CAA 51CB FFE6                  		dbf	d3,loc_4C9A
00004CAE 4E75                       		rts	
00004CB0                            ; End of function SS_BGAnimate
00004CB0                            
00004CB0                            ; ===========================================================================
00004CB0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CBC                            		even
00004CBC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CC4                            		even
00004CC4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CD8                            		even
00004CD8                            					; XREF: SS_BGAnimate
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; Continue screen
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            ContinueScreen:				; XREF: GameModeArray
00004CD8 6100 D178                  		bsr.w	Pal_FadeFrom
00004CDC 46FC 2700                  		move	#$2700,sr
00004CE0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CE4 0200 00BF                  		andi.b	#$BF,d0
00004CE8 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CEE 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CF4 3CBC 8004                  		move.w	#$8004,(a6)
00004CF8 3CBC 8700                  		move.w	#$8700,(a6)
00004CFC 6100 C5C6                  		bsr.w	ClearScreen
00004D00 43F8 D000                  		lea	($FFFFD000).w,a1
00004D04 7000                       		moveq	#0,d0
00004D06 323C 07FF                  		move.w	#$7FF,d1
00004D0A                            
00004D0A                            Cont_ClrObjRam:
00004D0A 22C0                       		move.l	d0,(a1)+
00004D0C 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D10                            
00004D10 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D1A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D20 6100 C71E                  		bsr.w	NemDec
00004D24 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D2E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D34 6100 C70A                  		bsr.w	NemDec
00004D38 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D42 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D48 6100 C6F6                  		bsr.w	NemDec
00004D4C 720A                       		moveq	#10,d1
00004D4E 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D54 7012                       		moveq	#$12,d0
00004D56 6100 D3A4                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D5A 103C 0090                  		move.b	#$90,d0
00004D5E 6100 C636                  		bsr.w	PlaySound	; play continue	music
00004D62 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D68 42B8 F700                  		clr.l	($FFFFF700).w
00004D6C 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D74 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D7A 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D80 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D86 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D8C 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D92 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004D98 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004D9E 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA4 4EB9 0000 0000             		jsr	BuildSprites
00004DAA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DAE 0000 0040                  		ori.b	#$40,d0
00004DB2 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DB8 6100 CFF2                  		bsr.w	Pal_FadeTo
00004DBC                            
00004DBC                            ; ---------------------------------------------------------------------------
00004DBC                            ; Continue screen main loop
00004DBC                            ; ---------------------------------------------------------------------------
00004DBC                            
00004DBC                            Cont_MainLoop:
00004DBC 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DC2 6100 DBE4                  		bsr.w	DelayProgram
00004DC6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DCC 6400                       		bcc.s	loc_4DF2
00004DCE 46FC 2700                  		move	#$2700,sr
00004DD2 3238 F614                  		move.w	($FFFFF614).w,d1
00004DD6 82FC 003C                  		divu.w	#$3C,d1
00004DDA 0281 0000 000F             		andi.l	#$F,d1
00004DE0 4EB9 0000 0000             		jsr	ContScrCounter
00004DE6 46FC 2300                  		move	#$2300,sr
00004DEA                            
00004DEA                            loc_4DF2:
00004DEA 4EB9 0000 0000             		jsr	ObjectsLoad
00004DF0 4EB9 0000 0000             		jsr	BuildSprites
00004DF6 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004DFC 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004DFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E04 64B6                       		bcc.s	Cont_MainLoop
00004E06 4A78 F614                  		tst.w	($FFFFF614).w
00004E0A 6600 FFB0                  		bne.w	Cont_MainLoop
00004E0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E14 4E75                       		rts	
00004E16                            ; ===========================================================================
00004E16                            
00004E16                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E16 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E1C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E22 7000                       		moveq	#0,d0
00004E24 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E28 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E2C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E30 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E34 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E38 4E75                       		rts	
00004E3A                            ; ===========================================================================
00004E3A                            
00004E3A                            ; ---------------------------------------------------------------------------
00004E3A                            ; Object 80 - Continue screen elements
00004E3A                            ; ---------------------------------------------------------------------------
00004E3A                            
00004E3A                            Obj80:					; XREF: Obj_Index
00004E3A 7000                       		moveq	#0,d0
00004E3C 1028 0024                  		move.b	$24(a0),d0
00004E40 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E44 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E48                            ; ===========================================================================
00004E48 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E4A 0000                       		dc.w Obj80_Display-Obj80_Index
00004E4C 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E4E 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E50                            ; ===========================================================================
00004E50                            
00004E50                            Obj80_Main:				; XREF: Obj80_Index
00004E50 5428 0024                  		addq.b	#2,$24(a0)
00004E54 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E5C 317C 8500 0002             		move.w	#$8500,2(a0)
00004E62 117C 0000 0001             		move.b	#0,1(a0)
00004E68 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E6E 317C 0120 0008             		move.w	#$120,8(a0)
00004E74 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E7A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E80                            
00004E80                            Obj80_Display:				; XREF: Obj80_Index
00004E80 4EF9 0000 0000             		jmp	DisplaySprite
00004E86                            ; ===========================================================================
00004E86                            Obj80_MiniSonicPos:
00004E86 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004E98 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EA4                            ; ===========================================================================
00004EA4                            
00004EA4                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EA4 2248                       		movea.l	a0,a1
00004EA6 45F9 0000 4E86             		lea	(Obj80_MiniSonicPos).l,a2
00004EAC 7200                       		moveq	#0,d1
00004EAE 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EB2 5501                       		subq.b	#2,d1
00004EB4 6400                       		bcc.s	loc_4EC4
00004EB6 4EF9 0000 0000             		jmp	DeleteObject
00004EBC                            ; ===========================================================================
00004EBC                            
00004EBC                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EBC 7601                       		moveq	#1,d3
00004EBE 0C01 000E                  		cmpi.b	#$E,d1
00004EC2 6500                       		bcs.s	loc_4ED0
00004EC4 7600                       		moveq	#0,d3
00004EC6 720E                       		moveq	#$E,d1
00004EC8                            
00004EC8                            loc_4ED0:
00004EC8 1401                       		move.b	d1,d2
00004ECA 0202 0001                  		andi.b	#1,d2
00004ECE                            
00004ECE                            Obj80_MiniSonLoop:
00004ECE 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004ED2 335A 0008                  		move.w	(a2)+,8(a1)
00004ED6 4A02                       		tst.b	d2
00004ED8 6700                       		beq.s	loc_4EEA
00004EDA 0469 000A 0008             		subi.w	#$A,8(a1)
00004EE0                            
00004EE0                            loc_4EEA:
00004EE0 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EE6 137C 0006 001A             		move.b	#6,$1A(a1)
00004EEC 137C 0006 0024             		move.b	#6,$24(a1)
00004EF2 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004EFA 337C 8551 0002             		move.w	#$8551,2(a1)
00004F00 137C 0000 0001             		move.b	#0,1(a1)
00004F06 43E9 0040                  		lea	$40(a1),a1
00004F0A 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F0E 43E9 FFC0                  		lea	-$40(a1),a1
00004F12 1343 0028                  		move.b	d3,$28(a1)
00004F16                            
00004F16                            Obj80_ChkType:				; XREF: Obj80_Index
00004F16 4A28 0028                  		tst.b	$28(a0)
00004F1A 6700                       		beq.s	loc_4F40
00004F1C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F22 6500                       		bcs.s	loc_4F40
00004F24 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F28 0200 0001                  		andi.b	#1,d0
00004F2C 6600                       		bne.s	loc_4F40
00004F2E 4A78 D010                  		tst.w	($FFFFD010).w
00004F32 6600                       		bne.s	Obj80_Delete
00004F34 4E75                       		rts	
00004F36                            ; ===========================================================================
00004F36                            
00004F36                            loc_4F40:				; XREF: Obj80_ChkType
00004F36 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F3A 0200 000F                  		andi.b	#$F,d0
00004F3E 6600                       		bne.s	Obj80_Display2
00004F40 0868 0000 001A             		bchg	#0,$1A(a0)
00004F46                            
00004F46                            Obj80_Display2:
00004F46 4EF9 0000 0000             		jmp	DisplaySprite
00004F4C                            ; ===========================================================================
00004F4C                            
00004F4C                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F4C 4EF9 0000 0000             		jmp	DeleteObject
00004F52                            ; ===========================================================================
00004F52                            
00004F52                            ; ---------------------------------------------------------------------------
00004F52                            ; Object 81 - Sonic on the continue screen
00004F52                            ; ---------------------------------------------------------------------------
00004F52                            
00004F52                            Obj81:					; XREF: Obj_Index
00004F52 7000                       		moveq	#0,d0
00004F54 1028 0024                  		move.b	$24(a0),d0
00004F58 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F5C 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F60 4EF9 0000 0000             		jmp	DisplaySprite
00004F66                            ; ===========================================================================
00004F66 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F68 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F6A 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F6C 0000                       		dc.w Obj81_Run-Obj81_Index
00004F6E                            ; ===========================================================================
00004F6E                            
00004F6E                            Obj81_Main:				; XREF: Obj81_Index
00004F6E 5428 0024                  		addq.b	#2,$24(a0)
00004F72 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F78 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F7E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F86 317C 0780 0002             		move.w	#$780,2(a0)
00004F8C 117C 0004 0001             		move.b	#4,1(a0)
00004F92 117C 0002 0018             		move.b	#2,$18(a0)
00004F98 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004F9E 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FA4                            
00004FA4                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FA4 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FAA 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FAC 5428 0024                  		addq.b	#2,$24(a0)
00004FB0 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FB4 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FBC 317C 8500 0002             		move.w	#$8500,2(a0)
00004FC2 117C 0000 001C             		move.b	#0,$1C(a0)
00004FC8 6000                       		bra.s	Obj81_Animate
00004FCA                            ; ===========================================================================
00004FCA                            
00004FCA                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FCA 4EB9 0000 0000             		jsr	SpeedToPos
00004FD0 4EB9 0000 0000             		jsr	Sonic_Animate
00004FD6 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FDC                            ; ===========================================================================
00004FDC                            
00004FDC                            Obj81_Animate:				; XREF: Obj81_Index
00004FDC 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FE0 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FE2 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FE8 4EF9 0000 0000             		jmp	AnimateSprite
00004FEE                            ; ===========================================================================
00004FEE                            
00004FEE                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FEE 5428 0024                  		addq.b	#2,$24(a0)
00004FF2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FFA 317C 0780 0002             		move.w	#$780,2(a0)
00005000 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005006 4268 0014                  		clr.w	$14(a0)
0000500A 5168 000C                  		subq.w	#8,$C(a0)
0000500E 103C 00E0                  		move.b	#$E0,d0
00005012 6100 C388                  		bsr.w	PlaySound_Special ; fade out music
00005016                            
00005016                            Obj81_Run:				; XREF: Obj81_Index
00005016 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000501C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000501E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005024 6000                       		bra.s	Obj81_ShowRun
00005026                            ; ===========================================================================
00005026                            
00005026                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005026 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000502C                            
0000502C                            Obj81_ShowRun:				; XREF: Obj81_Run
0000502C 4EB9 0000 0000             		jsr	SpeedToPos
00005032 4EB9 0000 0000             		jsr	Sonic_Animate
00005038 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000503E                            ; ===========================================================================
0000503E                            Ani_obj81:
0000503E                            	include "_anim\obj81.asm"
0000503E                            ; ---------------------------------------------------------------------------
0000503E                            ; Animation script - Sonic on the continue screen
0000503E                            ; ---------------------------------------------------------------------------
0000503E 0000                       		dc.w byte_504A-Ani_obj81
00005040 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000504C 00                         		even
0000504C 00                         		even
0000504C                            
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; Sprite mappings - Continue screen
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            Map_obj80:
0000504C                            	include "_maps\obj80.asm"
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; Sprite mappings - Continue screen
0000504C                            ; ---------------------------------------------------------------------------
0000504C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005050 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005054 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005058 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000505C 0B                         byte_5066:	dc.b $B
0000505D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005062 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005067 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000506C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005071 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005076 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000507B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005080 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005085 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000508A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000508F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005094 03                         byte_509E:	dc.b 3
00005095 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000509A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000509F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050A4 03                         byte_50AE:	dc.b 3
000050A5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050AA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050AF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050B4 03                         byte_50BE:	dc.b 3
000050B5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050BA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050BF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050C4 02                         byte_50CE:	dc.b 2
000050C5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050CA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050CF 01                         byte_50D9:	dc.b 1
000050D0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050D5 01                         byte_50DF:	dc.b 1
000050D6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050DC 00                         		even
000050DC 00                         		even
000050DC                            
000050DC                            ; ===========================================================================
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            ; Ending sequence in Green Hill	Zone
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            
000050DC                            EndingSequence:				; XREF: GameModeArray
000050DC 103C 00E4                  		move.b	#$E4,d0
000050E0 6100 C2BA                  		bsr.w	PlaySound_Special ; stop music
000050E4 6100 CD6C                  		bsr.w	Pal_FadeFrom
000050E8 43F8 D000                  		lea	($FFFFD000).w,a1
000050EC 7000                       		moveq	#0,d0
000050EE 323C 07FF                  		move.w	#$7FF,d1
000050F2                            
000050F2                            End_ClrObjRam:
000050F2 22C0                       		move.l	d0,(a1)+
000050F4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000050F8                            
000050F8 43F8 F628                  		lea	($FFFFF628).w,a1
000050FC 7000                       		moveq	#0,d0
000050FE 323C 0015                  		move.w	#$15,d1
00005102                            
00005102                            End_ClrRam:
00005102 22C0                       		move.l	d0,(a1)+
00005104 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005108                            
00005108 43F8 F700                  		lea	($FFFFF700).w,a1
0000510C 7000                       		moveq	#0,d0
0000510E 323C 003F                  		move.w	#$3F,d1
00005112                            
00005112                            End_ClrRam2:
00005112 22C0                       		move.l	d0,(a1)+
00005114 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005118                            
00005118 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000511C 7000                       		moveq	#0,d0
0000511E 323C 0047                  		move.w	#$47,d1
00005122                            
00005122                            End_ClrRam3:
00005122 22C0                       		move.l	d0,(a1)+
00005124 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005128                            
00005128 46FC 2700                  		move	#$2700,sr
0000512C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005130 0200 00BF                  		andi.b	#$BF,d0
00005134 33C0 00C0 0004             		move.w	d0,($C00004).l
0000513A 6100 C188                  		bsr.w	ClearScreen
0000513E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005144 3CBC 8B03                  		move.w	#$8B03,(a6)
00005148 3CBC 8230                  		move.w	#$8230,(a6)
0000514C 3CBC 8407                  		move.w	#$8407,(a6)
00005150 3CBC 857C                  		move.w	#$857C,(a6)
00005154 3CBC 9001                  		move.w	#$9001,(a6)
00005158 3CBC 8004                  		move.w	#$8004,(a6)
0000515C 3CBC 8720                  		move.w	#$8720,(a6)
00005160 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005166 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000516A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005170 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005176 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000517C 6700                       		beq.s	End_LoadData	; if yes, branch
0000517E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005184                            
00005184                            End_LoadData:
00005184 701C                       		moveq	#$1C,d0
00005186 6100 C564                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000518A 4EB9 0000 0000             		jsr	Hud_Base
00005190 6100 0000                  		bsr.w	LevelSizeLoad
00005194 6100 0000                  		bsr.w	DeformBgLayer
00005198 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000519E 6100 0000                  		bsr.w	MainLoadBlockLoad
000051A2 6100 0000                  		bsr.w	LoadTilesFromStart
000051A6 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051AE 46FC 2300                  		move	#$2300,sr
000051B2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051B8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051BC 6100 C6DE                  		bsr.w	KosDec
000051C0 7003                       		moveq	#3,d0
000051C2 6100 CF38                  		bsr.w	PalLoad1	; load Sonic's pallet
000051C6 303C 008B                  		move.w	#$8B,d0
000051CA 6100 C1CA                  		bsr.w	PlaySound	; play ending sequence music
000051CE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051D4 6700                       		beq.s	End_LoadSonic	; if not, branch
000051D6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051DC                            
000051DC                            End_LoadSonic:
000051DC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051E2 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051E8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051EE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051F4 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000051FA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005200 4EB9 0000 0000             		jsr	ObjPosLoad
00005206 4EB9 0000 0000             		jsr	ObjectsLoad
0000520C 4EB9 0000 0000             		jsr	BuildSprites
00005212 7000                       		moveq	#0,d0
00005214 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005218 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000521C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005220 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005224 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005228 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000522C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005230 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005234 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005238 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000523C 6100 EEDA                  		bsr.w	OscillateNumInit
00005240 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005246 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000524C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005252 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005258 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000525E 6100 D748                  		bsr.w	DelayProgram
00005262 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005266 0000 0040                  		ori.b	#$40,d0
0000526A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005270 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005276 6100 CB34                  		bsr.w	Pal_FadeTo
0000527A                            
0000527A                            ; ---------------------------------------------------------------------------
0000527A                            ; Main ending sequence loop
0000527A                            ; ---------------------------------------------------------------------------
0000527A                            
0000527A                            End_MainLoop:
0000527A 6100 C12C                  		bsr.w	PauseGame
0000527E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005284 6100 D722                  		bsr.w	DelayProgram
00005288 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000528C 6100 0000                  		bsr.w	End_MoveSonic
00005290 4EB9 0000 0000             		jsr	ObjectsLoad
00005296 6100 0000                  		bsr.w	DeformBgLayer
0000529A 4EB9 0000 0000             		jsr	BuildSprites
000052A0 4EB9 0000 0000             		jsr	ObjPosLoad
000052A6 6100 C694                  		bsr.w	PalCycle_Load
000052AA 6100 EEC2                  		bsr.w	OscillateNumDo
000052AE 6100 EF4E                  		bsr.w	ChangeRingFrame
000052B2 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052B8 6700                       		beq.s	loc_52DA	; if yes, branch
000052BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052C0 103C 0091                  		move.b	#$91,d0
000052C4 6100 C0D6                  		bsr.w	PlaySound_Special ; play credits music
000052C8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052CE 4E75                       		rts	
000052D0                            ; ===========================================================================
000052D0                            
000052D0                            loc_52DA:
000052D0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052D4 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052D8                            
000052D8 4278 FE02                  		clr.w	($FFFFFE02).w
000052DC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052E2 4278 F794                  		clr.w	($FFFFF794).w
000052E6                            
000052E6                            End_AllEmlds:				; XREF: loc_5334
000052E6 6100 C0C0                  		bsr.w	PauseGame
000052EA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052F0 6100 D6B6                  		bsr.w	DelayProgram
000052F4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052F8 6100 0000                  		bsr.w	End_MoveSonic
000052FC 4EB9 0000 0000             		jsr	ObjectsLoad
00005302 6100 0000                  		bsr.w	DeformBgLayer
00005306 4EB9 0000 0000             		jsr	BuildSprites
0000530C 4EB9 0000 0000             		jsr	ObjPosLoad
00005312 6100 EE5A                  		bsr.w	OscillateNumDo
00005316 6100 EEE6                  		bsr.w	ChangeRingFrame
0000531A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000531E 6A00                       		bpl.s	loc_5334
00005320 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005326 6100 CC74                  		bsr.w	Pal_ToWhite
0000532A                            
0000532A                            loc_5334:
0000532A 4A78 FE02                  		tst.w	($FFFFFE02).w
0000532E 6700 FFB6                  		beq.w	End_AllEmlds
00005332 4278 FE02                  		clr.w	($FFFFFE02).w
00005336 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000533C 4BF9 00C0 0004             		lea	($C00004).l,a5
00005342 4DF9 00C0 0000             		lea	($C00000).l,a6
00005348 47F8 F700                  		lea	($FFFFF700).w,a3
0000534C 49F8 A400                  		lea	($FFFFA400).w,a4
00005350 343C 4000                  		move.w	#$4000,d2
00005354 6100 0000                  		bsr.w	LoadTilesFromStart2
00005358 7013                       		moveq	#$13,d0
0000535A 6100 CDA0                  		bsr.w	PalLoad1	; load ending pallet
0000535E 6100 CB70                  		bsr.w	Pal_MakeWhite
00005362 6000 FF16                  		bra.w	End_MainLoop
00005366                            
00005366                            ; ---------------------------------------------------------------------------
00005366                            ; Subroutine controlling Sonic on the ending sequence
00005366                            ; ---------------------------------------------------------------------------
00005366                            
00005366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005366                            
00005366                            
00005366                            End_MoveSonic:				; XREF: End_MainLoop
00005366 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000536A 6600                       		bne.s	End_MoveSonic2
0000536C 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005372 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005374 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005378 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000537E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005384 4E75                       		rts	
00005386                            ; ===========================================================================
00005386                            
00005386                            End_MoveSonic2:				; XREF: End_MoveSonic
00005386 5500                       		subq.b	#2,d0
00005388 6600                       		bne.s	End_MoveSonic3
0000538A 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005390 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005392 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005396 7000                       		moveq	#0,d0
00005398 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000539C 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053A0 31C0 D014                  		move.w	d0,($FFFFD014).w
000053A4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053AA 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053B0 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053B6 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053BC 4E75                       		rts	
000053BE                            ; ===========================================================================
000053BE                            
000053BE                            End_MoveSonic3:				; XREF: End_MoveSonic
000053BE 5500                       		subq.b	#2,d0
000053C0 6600                       		bne.s	End_MoveSonExit
000053C2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C6 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053CC 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053D2 4278 D024                  		clr.w	($FFFFD024).w
000053D6                            
000053D6                            End_MoveSonExit:
000053D6 4E75                       		rts	
000053D8                            ; End of function End_MoveSonic
000053D8                            
000053D8                            ; ===========================================================================
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            ; Object 87 - Sonic on ending sequence
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            
000053D8                            Obj87:					; XREF: Obj_Index
000053D8 7000                       		moveq	#0,d0
000053DA 1028 0025                  		move.b	$25(a0),d0
000053DE 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053E2 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053E6 4EF9 0000 0000             		jmp	DisplaySprite
000053EC                            ; ===========================================================================
000053EC 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053F0 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053F4 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000053F8 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000053FC 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005400                            ; ===========================================================================
00005400                            
00005400                            Obj87_Main:				; XREF: Obj87_Index
00005400 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005406 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005408 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000540E 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005414 4E75                       		rts	
00005416                            ; ===========================================================================
00005416                            
00005416                            Obj87_Main2:				; XREF: Obj87_Main
00005416 5428 0025                  		addq.b	#2,$25(a0)
0000541A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005422 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005428 117C 0004 0001             		move.b	#4,1(a0)
0000542E 4228 0022                  		clr.b	$22(a0)
00005432 117C 0002 0018             		move.b	#2,$18(a0)
00005438 117C 0000 001A             		move.b	#0,$1A(a0)
0000543E 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005444                            
00005444                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005444 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005448 6600                       		bne.s	Obj87_Wait
0000544A 5428 0025                  		addq.b	#2,$25(a0)
0000544E 317C 0001 001C             		move.w	#1,$1C(a0)
00005454 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000545A                            
0000545A                            Obj87_Wait:
0000545A 4E75                       		rts	
0000545C                            ; ===========================================================================
0000545C                            
0000545C                            Obj87_LookUp:				; XREF: Obj87_Index
0000545C 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005464 6600                       		bne.s	locret_5480
00005466 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000546C 317C 005A 0030             		move.w	#$5A,$30(a0)
00005472 5428 0025                  		addq.b	#2,$25(a0)
00005476                            
00005476                            locret_5480:
00005476 4E75                       		rts	
00005478                            ; ===========================================================================
00005478                            
00005478                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005478 5368 0030                  		subq.w	#1,$30(a0)
0000547C 6600                       		bne.s	Obj87_Wait2
0000547E 43F8 D400                  		lea	($FFFFD400).w,a1
00005482 323C 00FF                  		move.w	#$FF,d1
00005486                            
00005486                            Obj87_ClrLoop:
00005486 4299                       		clr.l	(a1)+
00005488 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000548C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005492 5428 0025                  		addq.b	#2,$25(a0)
00005496 117C 0001 001C             		move.b	#1,$1C(a0)
0000549C 317C 003C 0030             		move.w	#$3C,$30(a0)
000054A2                            
000054A2                            Obj87_Wait2:
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054A4 5368 0030                  		subq.w	#1,$30(a0)
000054A8 6600                       		bne.s	Obj87_Wait3
000054AA 5428 0025                  		addq.b	#2,$25(a0)
000054AE 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054B4 117C 0002 001C             		move.b	#2,$1C(a0)
000054BA 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054C0                            
000054C0                            Obj87_Wait3:
000054C0 4E75                       		rts	
000054C2                            ; ===========================================================================
000054C2                            
000054C2                            Obj87_Animate:				; XREF: Obj87_Index
000054C2 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054C8 4EF9 0000 0000             		jmp	AnimateSprite
000054CE                            ; ===========================================================================
000054CE                            
000054CE                            Obj87_Leap:				; XREF: Obj87_Index
000054CE 5368 0030                  		subq.w	#1,$30(a0)
000054D2 6600                       		bne.s	Obj87_Wait4
000054D4 5428 0025                  		addq.b	#2,$25(a0)
000054D8 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054E0 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054E6 117C 0004 0001             		move.b	#4,1(a0)
000054EC 4228 0022                  		clr.b	$22(a0)
000054F0 117C 0002 0018             		move.b	#2,$18(a0)
000054F6 117C 0005 001A             		move.b	#5,$1A(a0)
000054FC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005502 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005508 60B8                       		bra.s	Obj87_Animate
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            Obj87_Wait4:				; XREF: Obj87_Leap
0000550A 4E75                       		rts	
0000550C                            ; ===========================================================================
0000550C                            Ani_obj87:
0000550C                            	include "_anim\obj87.asm"
0000550C                            ; ---------------------------------------------------------------------------
0000550C                            ; Animation script - Sonic on the ending sequence
0000550C                            ; ---------------------------------------------------------------------------
0000550C 0000                       		dc.w byte_551C-Ani_obj87
0000550E 0000                       		dc.w byte_552A-Ani_obj87
00005510 0000                       		dc.w byte_5534-Ani_obj87
00005512 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005520 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000552A 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005532                            		even
00005532                            		even
00005532                            
00005532                            ; ===========================================================================
00005532                            ; ---------------------------------------------------------------------------
00005532                            ; Object 88 - chaos emeralds on	the ending sequence
00005532                            ; ---------------------------------------------------------------------------
00005532                            
00005532                            Obj88:					; XREF: Obj_Index
00005532 7000                       		moveq	#0,d0
00005534 1028 0024                  		move.b	$24(a0),d0
00005538 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000553C 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005540 4EF9 0000 0000             		jmp	DisplaySprite
00005546                            ; ===========================================================================
00005546 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005548 0000                       		dc.w Obj88_Move-Obj88_Index
0000554A                            ; ===========================================================================
0000554A                            
0000554A                            Obj88_Main:				; XREF: Obj88_Index
0000554A 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005550 6700                       		beq.s	Obj88_Main2
00005552 588F                       		addq.l	#4,sp
00005554 4E75                       		rts	
00005556                            ; ===========================================================================
00005556                            
00005556                            Obj88_Main2:				; XREF: Obj88_Main
00005556 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000555C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005562 2248                       		movea.l	a0,a1
00005564 7600                       		moveq	#0,d3
00005566 7401                       		moveq	#1,d2
00005568 7205                       		moveq	#5,d1
0000556A                            
0000556A                            Obj88_MainLoop:
0000556A 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000556E 5429 0024                  		addq.b	#2,$24(a1)
00005572 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000557A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005580 137C 0004 0001             		move.b	#4,1(a1)
00005586 137C 0001 0018             		move.b	#1,$18(a1)
0000558C 3368 0008 0038             		move.w	8(a0),$38(a1)
00005592 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005598 1342 001C                  		move.b	d2,$1C(a1)
0000559C 1342 001A                  		move.b	d2,$1A(a1)
000055A0 5202                       		addq.b	#1,d2
000055A2 1343 0026                  		move.b	d3,$26(a1)
000055A6 0603 002A                  		addi.b	#$2A,d3
000055AA 43E9 0040                  		lea	$40(a1),a1
000055AE 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055B2                            
000055B2                            Obj88_Move:				; XREF: Obj88_Index
000055B2 3028 003E                  		move.w	$3E(a0),d0
000055B6 D168 0026                  		add.w	d0,$26(a0)
000055BA 1028 0026                  		move.b	$26(a0),d0
000055BE 4EB9 0000 29DA             		jsr	(CalcSine).l
000055C4 7800                       		moveq	#0,d4
000055C6 1828 003C                  		move.b	$3C(a0),d4
000055CA C3C4                       		muls.w	d4,d1
000055CC E081                       		asr.l	#8,d1
000055CE C1C4                       		muls.w	d4,d0
000055D0 E080                       		asr.l	#8,d0
000055D2 D268 0038                  		add.w	$38(a0),d1
000055D6 D068 003A                  		add.w	$3A(a0),d0
000055DA 3141 0008                  		move.w	d1,8(a0)
000055DE 3140 000C                  		move.w	d0,$C(a0)
000055E2 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055E8 6700                       		beq.s	loc_55FA
000055EA 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055F0                            
000055F0                            loc_55FA:
000055F0 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055F6 6700                       		beq.s	loc_5608
000055F8 0668 0020 003E             		addi.w	#$20,$3E(a0)
000055FE                            
000055FE                            loc_5608:
000055FE 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005604 6700                       		beq.s	locret_5614
00005606 5368 003A                  		subq.w	#1,$3A(a0)
0000560A                            
0000560A                            locret_5614:
0000560A 4E75                       		rts	
0000560C                            ; ===========================================================================
0000560C                            ; ---------------------------------------------------------------------------
0000560C                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000560C                            ; ---------------------------------------------------------------------------
0000560C                            
0000560C                            Obj89:					; XREF: Obj_Index
0000560C 7000                       		moveq	#0,d0
0000560E 1028 0024                  		move.b	$24(a0),d0
00005612 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005616 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000561A                            ; ===========================================================================
0000561A 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000561C 0000                       		dc.w Obj89_Move-Obj89_Index
0000561E 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005620                            ; ===========================================================================
00005620                            
00005620                            Obj89_Main:				; XREF: Obj89_Index
00005620 5428 0024                  		addq.b	#2,$24(a0)
00005624 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000562A 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005630 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005638 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000563E 117C 0000 0001             		move.b	#0,1(a0)
00005644 117C 0000 0018             		move.b	#0,$18(a0)
0000564A                            
0000564A                            Obj89_Move:				; XREF: Obj89_Index
0000564A 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005650 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005652 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005658 4EB9 0000 0000             		jsr	DisplaySprite
0000565E                            ; ===========================================================================
0000565E                            
0000565E                            Obj89_Delay:				; XREF: Obj89_Move
0000565E 5428 0024                  		addq.b	#2,$24(a0)
00005662 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005668                            
00005668                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005668 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000566C 6A00                       		bpl.s	Obj89_Display
0000566E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005674                            
00005674                            Obj89_Display:
00005674 4EB9 0000 0000             		jsr	DisplaySprite
0000567A                            ; ===========================================================================
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            ; Sprite mappings - Sonic on the ending	sequence
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            Map_obj87:
0000567A                            	include "_maps\obj87.asm"
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            ; Sprite mappings - Sonic on the ending	sequence
0000567A                            ; ---------------------------------------------------------------------------
0000567A 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000567E 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005682 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005686 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000568A 02                         byte_5690:	dc.b 2
0000568B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005690 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005695 03                         byte_569B:	dc.b 3
00005696 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000569B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056A0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056A5 02                         byte_56AB:	dc.b 2
000056A6 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056AB FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056B0 02                         byte_56B6:	dc.b 2
000056B1 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056B6 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056BB 02                         byte_56C1:	dc.b 2
000056BC EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056C1 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056C6 03                         byte_56CC:	dc.b 3
000056C7 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056CC EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056D1 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056D6 07                         byte_56DC:	dc.b 7
000056D7 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056DC BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056E1 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056E6 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056EB DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056F0 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056F5 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056FA 18                         byte_5700:	dc.b $18
000056FB 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005700 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005705 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000570A 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000570F A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005714 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005719 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000571E A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005723 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005728 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000572D A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005732 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005737 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000573C B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005741 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005746 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000574B D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005750 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005755 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000575A E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000575F D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005764 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005769 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000576E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005774 00                         		even
00005774 00                         		even
00005774                            
00005774                            ; ---------------------------------------------------------------------------
00005774                            ; Sprite mappings - chaos emeralds on the ending sequence
00005774                            ; ---------------------------------------------------------------------------
00005774                            Map_obj88:
00005774                            	include "_maps\obj88.asm"
00005774                            ; ---------------------------------------------------------------------------
00005774                            ; Sprite mappings - chaos emeralds on the ending sequence
00005774                            ; ---------------------------------------------------------------------------
00005774 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005778 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000577C 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005780 0000                       		dc.w byte_57AC-Map_obj88
00005782 01                         byte_5788:	dc.b 1
00005783 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005788 01                         byte_578E:	dc.b 1
00005789 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000578E 01                         byte_5794:	dc.b 1
0000578F F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005794 01                         byte_579A:	dc.b 1
00005795 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000579A 01                         byte_57A0:	dc.b 1
0000579B F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057A0 01                         byte_57A6:	dc.b 1
000057A1 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057A6 01                         byte_57AC:	dc.b 1
000057A7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057AC                            		even
000057AC                            		even
000057AC                            
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            Map_obj89:
000057AC                            	include "_maps\obj89.asm"
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC 0000                       		dc.w byte_57B4-Map_obj89
000057AE 03                         byte_57B4:	dc.b 3
000057AF F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057B4 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057B9 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057BE                            		even
000057BE                            		even
000057BE                            
000057BE                            ; ===========================================================================
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            ; Credits ending sequence
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            
000057BE                            Credits:				; XREF: GameModeArray
000057BE 6100 BE1E                  		bsr.w	ClearPLC
000057C2 6100 C68E                  		bsr.w	Pal_FadeFrom
000057C6 4DF9 00C0 0004             		lea	($C00004).l,a6
000057CC 3CBC 8004                  		move.w	#$8004,(a6)
000057D0 3CBC 8230                  		move.w	#$8230,(a6)
000057D4 3CBC 8407                  		move.w	#$8407,(a6)
000057D8 3CBC 9001                  		move.w	#$9001,(a6)
000057DC 3CBC 9200                  		move.w	#$9200,(a6)
000057E0 3CBC 8B03                  		move.w	#$8B03,(a6)
000057E4 3CBC 8720                  		move.w	#$8720,(a6)
000057E8 4238 F64E                  		clr.b	($FFFFF64E).w
000057EC 6100 BAD6                  		bsr.w	ClearScreen
000057F0 43F8 D000                  		lea	($FFFFD000).w,a1
000057F4 7000                       		moveq	#0,d0
000057F6 323C 07FF                  		move.w	#$7FF,d1
000057FA                            
000057FA                            Cred_ClrObjRam:
000057FA 22C0                       		move.l	d0,(a1)+
000057FC 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005800                            
00005800 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000580A 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005810 6100 BC2E                  		bsr.w	NemDec
00005814 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005818 7000                       		moveq	#0,d0
0000581A 323C 001F                  		move.w	#$1F,d1
0000581E                            
0000581E                            Cred_ClrPallet:
0000581E 22C0                       		move.l	d0,(a1)+
00005820 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005824                            
00005824 7003                       		moveq	#3,d0
00005826 6100 C8D4                  		bsr.w	PalLoad1	; load Sonic's pallet
0000582A 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005830 4EB9 0000 0000             		jsr	ObjectsLoad
00005836 4EB9 0000 0000             		jsr	BuildSprites
0000583C 6100 0000                  		bsr.w	EndingDemoLoad
00005840 7000                       		moveq	#0,d0
00005842 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005846 E948                       		lsl.w	#4,d0
00005848 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000584E 45F2 0000                  		lea	(a2,d0.w),a2
00005852 7000                       		moveq	#0,d0
00005854 1012                       		move.b	(a2),d0
00005856 6700                       		beq.s	loc_5862
00005858 6100 BD26                  		bsr.w	LoadPLC		; load level patterns
0000585C                            
0000585C                            loc_5862:
0000585C 7001                       		moveq	#1,d0
0000585E 6100 BD20                  		bsr.w	LoadPLC		; load standard	level patterns
00005862 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005868 6100 C542                  		bsr.w	Pal_FadeTo
0000586C                            
0000586C                            Cred_WaitLoop:
0000586C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005872 6100 D134                  		bsr.w	DelayProgram
00005876 6100 BD74                  		bsr.w	RunPLC_RAM
0000587A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
0000587E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005880 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005884 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005886 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000588C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005890 4E75                       		rts	
00005892                            
00005892                            ; ---------------------------------------------------------------------------
00005892                            ; Ending sequence demo loading subroutine
00005892                            ; ---------------------------------------------------------------------------
00005892                            
00005892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005892                            
00005892                            
00005892                            EndingDemoLoad:				; XREF: Credits
00005892 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005896 0240 000F                  		andi.w	#$F,d0
0000589A D040                       		add.w	d0,d0
0000589C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058A0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058A4 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058A8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058AE 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058B0 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058B6 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058BC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058C2 7000                       		moveq	#0,d0
000058C4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058C8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058CC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058D0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058DA 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058DC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058E2 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058E6 303C 0008                  		move.w	#8,d0
000058EA                            
000058EA                            EndDemo_LampLoad:
000058EA 24D9                       		move.l	(a1)+,(a2)+
000058EC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058F0                            
000058F0                            EndDemo_Exit:
000058F0 4E75                       		rts	
000058F2                            ; End of function EndingDemoLoad
000058F2                            
000058F2                            ; ===========================================================================
000058F2                            ; ---------------------------------------------------------------------------
000058F2                            ; Levels used in the end sequence demos
000058F2                            ; ---------------------------------------------------------------------------
000058F2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005902                            
00005902                            ; ---------------------------------------------------------------------------
00005902                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005902                            ; ---------------------------------------------------------------------------
00005902                            EndDemo_LampVar:
00005902 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005904 0A00 062C 000D             		dc.w $A00, $62C, $D
0000590A 0000 0000                  		dc.l 0
0000590E 0000                       		dc.b 0,	0
00005910 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005924 0101                       		dc.b 1,	1
00005926                            ; ===========================================================================
00005926                            ; ---------------------------------------------------------------------------
00005926                            ; "TRY AGAIN" and "END"	screens
00005926                            ; ---------------------------------------------------------------------------
00005926                            
00005926                            TryAgainEnd:				; XREF: Credits
00005926 6100 BCB6                  		bsr.w	ClearPLC
0000592A 6100 C526                  		bsr.w	Pal_FadeFrom
0000592E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005934 3CBC 8004                  		move.w	#$8004,(a6)
00005938 3CBC 8230                  		move.w	#$8230,(a6)
0000593C 3CBC 8407                  		move.w	#$8407,(a6)
00005940 3CBC 9001                  		move.w	#$9001,(a6)
00005944 3CBC 9200                  		move.w	#$9200,(a6)
00005948 3CBC 8B03                  		move.w	#$8B03,(a6)
0000594C 3CBC 8720                  		move.w	#$8720,(a6)
00005950 4238 F64E                  		clr.b	($FFFFF64E).w
00005954 6100 B96E                  		bsr.w	ClearScreen
00005958 43F8 D000                  		lea	($FFFFD000).w,a1
0000595C 7000                       		moveq	#0,d0
0000595E 323C 07FF                  		move.w	#$7FF,d1
00005962                            
00005962                            TryAg_ClrObjRam:
00005962 22C0                       		move.l	d0,(a1)+
00005964 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005968                            
00005968 701D                       		moveq	#$1D,d0
0000596A 6100 BD80                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000596E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005972 7000                       		moveq	#0,d0
00005974 323C 001F                  		move.w	#$1F,d1
00005978                            
00005978                            TryAg_ClrPallet:
00005978 22C0                       		move.l	d0,(a1)+
0000597A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000597E                            
0000597E 7013                       		moveq	#$13,d0
00005980 6100 C77A                  		bsr.w	PalLoad1	; load ending pallet
00005984 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005988 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000598E 4EB9 0000 0000             		jsr	ObjectsLoad
00005994 4EB9 0000 0000             		jsr	BuildSprites
0000599A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059A0 6100 C40A                  		bsr.w	Pal_FadeTo
000059A4                            
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            ; "TRY AGAIN" and "END"	screen main loop
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            TryAg_MainLoop:
000059A4 6100 BA02                  		bsr.w	PauseGame
000059A8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059AE 6100 CFF8                  		bsr.w	DelayProgram
000059B2 4EB9 0000 0000             		jsr	ObjectsLoad
000059B8 4EB9 0000 0000             		jsr	BuildSprites
000059BE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059C4 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059C6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059CA 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059CC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059D2 67D0                       		beq.s	TryAg_MainLoop
000059D4                            
000059D4                            TryAg_Exit:
000059D4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059DA 4E75                       		rts	
000059DC                            
000059DC                            ; ===========================================================================
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            
000059DC                            Obj8B:					; XREF: Obj_Index
000059DC 7000                       		moveq	#0,d0
000059DE 1028 0024                  		move.b	$24(a0),d0
000059E2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059E6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059EA 4EF9 0000 0000             		jmp	DisplaySprite
000059F0                            ; ===========================================================================
000059F0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059F2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059F4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059F6 0000                       		dc.w loc_5A8E-Obj8B_Index
000059F8                            ; ===========================================================================
000059F8                            
000059F8                            Obj8B_Main:				; XREF: Obj8B_Index
000059F8 5428 0024                  		addq.b	#2,$24(a0)
000059FC 317C 0120 0008             		move.w	#$120,8(a0)
00005A02 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A08 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A10 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A16 117C 0000 0001             		move.b	#0,1(a0)
00005A1C 117C 0002 0018             		move.b	#2,$18(a0)
00005A22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A28 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A2E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A30 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A36 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A3C 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A42 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A48                            
00005A48                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A48 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A4E 4EF9 0000 0000             		jmp	AnimateSprite
00005A54                            ; ===========================================================================
00005A54                            
00005A54                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A54 5428 0024                  		addq.b	#2,$24(a0)
00005A58 7002                       		moveq	#2,d0
00005A5A 0828 0000 001C             		btst	#0,$1C(a0)
00005A60 6700                       		beq.s	loc_5A6A
00005A62 4440                       		neg.w	d0
00005A64                            
00005A64                            loc_5A6A:
00005A64 43F8 D800                  		lea	($FFFFD800).w,a1
00005A68 7205                       		moveq	#5,d1
00005A6A                            
00005A6A                            loc_5A70:
00005A6A 1340 003E                  		move.b	d0,$3E(a1)
00005A6E 3400                       		move.w	d0,d2
00005A70 E742                       		asl.w	#3,d2
00005A72 D529 0026                  		add.b	d2,$26(a1)
00005A76 43E9 0040                  		lea	$40(a1),a1
00005A7A 51C9 FFEE                  		dbf	d1,loc_5A70
00005A7E 5228 001A                  		addq.b	#1,$1A(a0)
00005A82 317C 0070 0030             		move.w	#112,$30(a0)
00005A88                            
00005A88                            loc_5A8E:				; XREF: Obj8B_Index
00005A88 5368 0030                  		subq.w	#1,$30(a0)
00005A8C 6A00                       		bpl.s	locret_5AA0
00005A8E 0868 0000 001C             		bchg	#0,$1C(a0)
00005A94 117C 0002 0024             		move.b	#2,$24(a0)
00005A9A                            
00005A9A                            locret_5AA0:
00005A9A 4E75                       		rts	
00005A9C                            ; ===========================================================================
00005A9C                            Ani_obj8B:
00005A9C                            	include "_anim\obj8B.asm"
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C 0000                       		dc.w byte_5AA8-Ani_obj8B
00005A9E 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AA0 0000                       		dc.w byte_5AB0-Ani_obj8B
00005AA2 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005AA6 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AAA 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005ABC                            		even
00005ABC                            		even
00005ABC                            
00005ABC                            ; ===========================================================================
00005ABC                            ; ---------------------------------------------------------------------------
00005ABC                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005ABC                            ; ---------------------------------------------------------------------------
00005ABC                            
00005ABC                            Obj8C:					; XREF: Obj_Index
00005ABC 7000                       		moveq	#0,d0
00005ABE 1028 0024                  		move.b	$24(a0),d0
00005AC2 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005AC6 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005ACA 4EF9 0000 0000             		jmp	DisplaySprite
00005AD0                            ; ===========================================================================
00005AD0 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005AD2 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005AD4                            ; ===========================================================================
00005AD4                            
00005AD4                            Obj8C_Main:				; XREF: Obj8C_Index
00005AD4 2248                       		movea.l	a0,a1
00005AD6 7400                       		moveq	#0,d2
00005AD8 7600                       		moveq	#0,d3
00005ADA 7205                       		moveq	#5,d1
00005ADC 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005AE0                            
00005AE0                            Obj8C_MakeEms:				; XREF: loc_5B42
00005AE0 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005AE4 5429 0024                  		addq.b	#2,$24(a1)
00005AE8 237C 0000 5774 0004        		move.l	#Map_obj88,4(a1)
00005AF0 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AF6 137C 0000 0001             		move.b	#0,1(a1)
00005AFC 137C 0001 0018             		move.b	#1,$18(a1)
00005B02 337C 0104 0008             		move.w	#$104,8(a1)
00005B08 337C 0120 0038             		move.w	#$120,$38(a1)
00005B0E 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B14 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B1A 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B20 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B24                            
00005B24                            Obj8C_ChkEms:
00005B24 7000                       		moveq	#0,d0
00005B26 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B2A 5340                       		subq.w	#1,d0
00005B2C 6500                       		bcs.s	loc_5B42
00005B2E                            
00005B2E                            Obj8C_ChkEmLoop:
00005B2E B433 0000                  		cmp.b	(a3,d0.w),d2
00005B32 6600                       		bne.s	loc_5B3E
00005B34 5202                       		addq.b	#1,d2
00005B36 60EC                       		bra.s	Obj8C_ChkEms
00005B38                            ; ===========================================================================
00005B38                            
00005B38                            loc_5B3E:
00005B38 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B3C                            
00005B3C                            loc_5B42:
00005B3C 1342 001A                  		move.b	d2,$1A(a1)
00005B40 5229 001A                  		addq.b	#1,$1A(a1)
00005B44 5202                       		addq.b	#1,d2
00005B46 137C 0080 0026             		move.b	#$80,$26(a1)
00005B4C 1343 001E                  		move.b	d3,$1E(a1)
00005B50 1343 001F                  		move.b	d3,$1F(a1)
00005B54 0643 000A                  		addi.w	#$A,d3
00005B58 43E9 0040                  		lea	$40(a1),a1
00005B5C 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B60                            
00005B60                            Obj8C_Move:				; XREF: Obj8C_Index
00005B60 4A68 003E                  		tst.w	$3E(a0)
00005B64 6700                       		beq.s	locret_5BBA
00005B66 4A28 001E                  		tst.b	$1E(a0)
00005B6A 6700                       		beq.s	loc_5B78
00005B6C 5328 001E                  		subq.b	#1,$1E(a0)
00005B70 6600                       		bne.s	loc_5B80
00005B72                            
00005B72                            loc_5B78:
00005B72 3028 003E                  		move.w	$3E(a0),d0
00005B76 D168 0026                  		add.w	d0,$26(a0)
00005B7A                            
00005B7A                            loc_5B80:
00005B7A 1028 0026                  		move.b	$26(a0),d0
00005B7E 6700                       		beq.s	loc_5B8C
00005B80 0C00 0080                  		cmpi.b	#$80,d0
00005B84 6600                       		bne.s	loc_5B96
00005B86                            
00005B86                            loc_5B8C:
00005B86 4268 003E                  		clr.w	$3E(a0)
00005B8A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B90                            
00005B90                            loc_5B96:
00005B90 4EB9 0000 29DA             		jsr	(CalcSine).l
00005B96 7800                       		moveq	#0,d4
00005B98 1828 003C                  		move.b	$3C(a0),d4
00005B9C C3C4                       		muls.w	d4,d1
00005B9E E081                       		asr.l	#8,d1
00005BA0 C1C4                       		muls.w	d4,d0
00005BA2 E080                       		asr.l	#8,d0
00005BA4 D268 0038                  		add.w	$38(a0),d1
00005BA8 D068 003A                  		add.w	$3A(a0),d0
00005BAC 3141 0008                  		move.w	d1,8(a0)
00005BB0 3140 000A                  		move.w	d0,$A(a0)
00005BB4                            
00005BB4                            locret_5BBA:
00005BB4 4E75                       		rts	
00005BB6                            ; ===========================================================================
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            Map_obj8B:
00005BB6                            	include "_maps\obj8B.asm"
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BBA 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BBE 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BC2 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BC6 08                         byte_5BCC:	dc.b 8
00005BC7 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BCC F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BD1 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BD6 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BDB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BE0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BE5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BEA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BEF 08                         byte_5BF5:	dc.b 8
00005BF0 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BF5 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BFA E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005BFF F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C04 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C09 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C0E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C13 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C18 08                         byte_5C1E:	dc.b 8
00005C19 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C1E F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C23 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C28 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C2D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C32 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C37 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C3C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C41 08                         byte_5C47:	dc.b 8
00005C42 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C47 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C4C E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C51 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C56 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C5B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C60 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C65 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C6A 0C                         byte_5C70:	dc.b $C
00005C6B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C70 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C75 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C7A 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C7F ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C84 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C89 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C8E 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C93 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C98 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005C9D 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CA2 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CA7 0A                         byte_5CAD:	dc.b $A
00005CA8 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CAD DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CB2 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CB7 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CBC DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CC1 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CC6 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CCB 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CD0 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CD5 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CDA 0A                         byte_5CE0:	dc.b $A
00005CDB C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CE0 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CE5 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CEA C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CEF E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CF4 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CF9 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CFE 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D03 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D08 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D0D 0C                         byte_5D13:	dc.b $C
00005D0E F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D13 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D18 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D1D 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D22 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D27 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D2C 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D31 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D36 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D3B 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D40 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D45 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D4A                            		even
00005D4A                            		even
00005D4A                            
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            ; Ending sequence demos
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D78                            		even
00005D78                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DB8                            		even
00005DB8                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DE8                            		even
00005DE8                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E18                            		even
00005E18                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E38                            		even
00005E38                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E58                            		even
00005E58                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E88                            		even
00005E88                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EB8                            		even
00005EB8                            
00005EB8                            ; ---------------------------------------------------------------------------
00005EB8                            ; Subroutine to	load level boundaries and start	locations
00005EB8                            ; ---------------------------------------------------------------------------
00005EB8                            
00005EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EB8                            
00005EB8                            
00005EB8                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EB8 7000                       		moveq	#0,d0
00005EBA 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EBE 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EC2 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EC6 11C0 F748                  		move.b	d0,($FFFFF748).w
00005ECA 11C0 F742                  		move.b	d0,($FFFFF742).w
00005ECE 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005ED2 ED08                       		lsl.b	#6,d0
00005ED4 E848                       		lsr.w	#4,d0
00005ED6 3200                       		move.w	d0,d1
00005ED8 D040                       		add.w	d0,d0
00005EDA D041                       		add.w	d1,d0
00005EDC 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EE0 3018                       		move.w	(a0)+,d0
00005EE2 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EE6 2018                       		move.l	(a0)+,d0
00005EE8 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EEC 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EF0 2018                       		move.l	(a0)+,d0
00005EF2 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005EF6 21C0 F724                  		move.l	d0,($FFFFF724).w
00005EFA 3038 F728                  		move.w	($FFFFF728).w,d0
00005EFE 0640 0240                  		addi.w	#$240,d0
00005F02 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F06 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F0C 3018                       		move.w	(a0)+,d0
00005F0E 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F12 6000 0000                  		bra.w	LevSz_ChkLamp
00005F16                            ; ===========================================================================
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            ; Level size array and ending start location array
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006066                            		even
00006066                            
00006066                            EndingStLocArray:
00006066                            		incbin	misc\sloc_end.bin
00006086                            		even
00006086                            
00006086                            ; ===========================================================================
00006086                            
00006086                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006086 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000608A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000608C 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006092 3238 D008                  		move.w	($FFFFD008).w,d1
00006096 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000609A 6000                       		bra.s	loc_60D0
0000609C                            ; ===========================================================================
0000609C                            
0000609C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000609C 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060A0 ED08                       		lsl.b	#6,d0
000060A2 E848                       		lsr.w	#4,d0
000060A4 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060AC 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060B2 5340                       		subq.w	#1,d0
000060B4 E548                       		lsl.w	#2,d0
000060B6 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060BA                            
000060BA                            LevSz_SonicPos:
000060BA 7200                       		moveq	#0,d1
000060BC 3219                       		move.w	(a1)+,d1
000060BE 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060C2 7000                       		moveq	#0,d0
000060C4 3011                       		move.w	(a1),d0
000060C6 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060CA                            
000060CA                            loc_60D0:				; XREF: LevSz_ChkLamp
000060CA 0441 00A0                  		subi.w	#$A0,d1
000060CE 6400                       		bcc.s	loc_60D8
000060D0 7200                       		moveq	#0,d1
000060D2                            
000060D2                            loc_60D8:
000060D2 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060D6 B242                       		cmp.w	d2,d1
000060D8 6500                       		bcs.s	loc_60E2
000060DA 3202                       		move.w	d2,d1
000060DC                            
000060DC                            loc_60E2:
000060DC 31C1 F700                  		move.w	d1,($FFFFF700).w
000060E0 0440 0060                  		subi.w	#$60,d0
000060E4 6400                       		bcc.s	loc_60EE
000060E6 7000                       		moveq	#0,d0
000060E8                            
000060E8                            loc_60EE:
000060E8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060EC 6D00                       		blt.s	loc_60F8
000060EE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060F2                            
000060F2                            loc_60F8:
000060F2 31C0 F704                  		move.w	d0,($FFFFF704).w
000060F6 6100 0000                  		bsr.w	BgScrollSpeed
000060FA 7000                       		moveq	#0,d0
000060FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006100 E508                       		lsl.b	#2,d0
00006102 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006108 6000 0000                  		bra.w	LevSz_Unk
0000610C                            ; ===========================================================================
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            ; Sonic	start location array
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            StartLocArray:	incbin	misc\sloc_lev.bin
0000617C                            		even
0000617C                            
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000617C                            ; loop,	loop, tunnel, tunnel
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            LoopTileNums:	incbin	misc\loopnums.bin
00006198                            		even
00006198                            
00006198                            ; ===========================================================================
00006198                            
00006198                            LevSz_Unk:				; XREF: LevelSizeLoad
00006198 7000                       		moveq	#0,d0
0000619A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000619E E748                       		lsl.w	#3,d0
000061A0 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000061A4 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061A8 24D9                       		move.l	(a1)+,(a2)+
000061AA 24D9                       		move.l	(a1)+,(a2)+
000061AC 4E75                       		rts	
000061AE                            ; End of function LevelSizeLoad
000061AE                            
000061AE                            ; ===========================================================================
000061AE 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061B6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061BE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061CE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061DE 0070 0100 0100 0100        		dc.l $700100, $1000100
000061E6                            
000061E6                            ; ---------------------------------------------------------------------------
000061E6                            ; Subroutine to	set scroll speed of some backgrounds
000061E6                            ; ---------------------------------------------------------------------------
000061E6                            
000061E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061E6                            
000061E6                            
000061E6                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061E6 4A38 FE30                  		tst.b	($FFFFFE30).w
000061EA 6600                       		bne.s	loc_6206
000061EC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061F0 31C0 F714                  		move.w	d0,($FFFFF714).w
000061F4 31C1 F708                  		move.w	d1,($FFFFF708).w
000061F8 31C1 F710                  		move.w	d1,($FFFFF710).w
000061FC 31C1 F718                  		move.w	d1,($FFFFF718).w
00006200                            
00006200                            loc_6206:
00006200 7400                       		moveq	#0,d2
00006202 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006206 D442                       		add.w	d2,d2
00006208 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000620C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006210                            ; End of function BgScrollSpeed
00006210                            
00006210                            ; ===========================================================================
00006210 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006214 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006218 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000621C 0000                       		dc.w BgScroll_End-BgScroll_Index
0000621E                            ; ===========================================================================
0000621E                            
0000621E                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000621E 6000 0000                  		bra.w	Deform_GHZ
00006222                            ; ===========================================================================
00006222                            
00006222                            BgScroll_LZ:				; XREF: BgScroll_Index
00006222 E280                       		asr.l	#1,d0
00006224 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006228 4E75                       		rts	
0000622A                            ; ===========================================================================
0000622A                            
0000622A                            BgScroll_MZ:				; XREF: BgScroll_Index
0000622A 4E75                       		rts	
0000622C                            ; ===========================================================================
0000622C                            
0000622C                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000622C E280                       		asr.l	#1,d0
0000622E 0640 00C0                  		addi.w	#$C0,d0
00006232 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006236 4E75                       		rts	
00006238                            ; ===========================================================================
00006238                            
00006238                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006238 E980                       		asl.l	#4,d0
0000623A 2400                       		move.l	d0,d2
0000623C E380                       		asl.l	#1,d0
0000623E D082                       		add.l	d2,d0
00006240 E080                       		asr.l	#8,d0
00006242 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006246 31C0 F714                  		move.w	d0,($FFFFF714).w
0000624A 4E75                       		rts	
0000624C                            ; ===========================================================================
0000624C                            
0000624C                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000624C E980                       		asl.l	#4,d0
0000624E E380                       		asl.l	#1,d0
00006250 E080                       		asr.l	#8,d0
00006252 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006256 4E75                       		rts	
00006258                            ; ===========================================================================
00006258                            
00006258                            BgScroll_End:				; XREF: BgScroll_Index
00006258 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000625E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006264 4E75                       		rts	
00006266                            ; ===========================================================================
00006266 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000626C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006272 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006278 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000627E 4E75                       		rts
00006280                            
00006280                            ; ---------------------------------------------------------------------------
00006280                            ; Background layer deformation subroutines
00006280                            ; ---------------------------------------------------------------------------
00006280                            
00006280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006280                            
00006280                            
00006280                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006280 4A38 F744                  		tst.b	($FFFFF744).w
00006284 6700                       		beq.s	loc_628E
00006286 4E75                       		rts	
00006288                            ; ===========================================================================
00006288                            
00006288                            loc_628E:
00006288 4278 F754                  		clr.w	($FFFFF754).w
0000628C 4278 F756                  		clr.w	($FFFFF756).w
00006290 4278 F758                  		clr.w	($FFFFF758).w
00006294 4278 F75A                  		clr.w	($FFFFF75A).w
00006298 6100 0000                  		bsr.w	ScrollHoriz
0000629C 6100 0000                  		bsr.w	ScrollVertical
000062A0 6100 0000                  		bsr.w	DynScrResizeLoad
000062A4 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062AA 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062B0 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062BC 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062C2 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062C8 7000                       		moveq	#0,d0
000062CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062CE D040                       		add.w	d0,d0
000062D0 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062D4 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062D8                            ; End of function DeformBgLayer
000062D8                            
000062D8                            ; ===========================================================================
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            ; Offset index for background layer deformation	code
000062D8                            ; ---------------------------------------------------------------------------
000062D8 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062DC 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062E0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062E4 0000                       		dc.w Deform_GHZ-Deform_Index
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            ; Green	Hill Zone background layer deformation code
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            
000062E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062E6                            
000062E6                            
000062E6                            Deform_GHZ:				; XREF: Deform_Index
000062E6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062EA 48C4                       		ext.l	d4
000062EC EB84                       		asl.l	#5,d4
000062EE 2204                       		move.l	d4,d1
000062F0 E384                       		asl.l	#1,d4
000062F2 D881                       		add.l	d1,d4
000062F4 7A00                       		moveq	#0,d5
000062F6 6100 0000                  		bsr.w	ScrollBlock1
000062FA 6100 0000                  		bsr.w	ScrollBlock4
000062FE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006302 3038 F704                  		move.w	($FFFFF704).w,d0
00006306 0240 07FF                  		andi.w	#$7FF,d0
0000630A EA48                       		lsr.w	#5,d0
0000630C 4440                       		neg.w	d0
0000630E 0640 0026                  		addi.w	#$26,d0
00006312 31C0 F714                  		move.w	d0,($FFFFF714).w
00006316 3800                       		move.w	d0,d4
00006318 6100 0000                  		bsr.w	ScrollBlock3
0000631C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006322 323C 006F                  		move.w	#$6F,d1
00006326 9244                       		sub.w	d4,d1
00006328 3038 F700                  		move.w	($FFFFF700).w,d0
0000632C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006332 6600                       		bne.s	loc_633C
00006334 7000                       		moveq	#0,d0
00006336                            
00006336                            loc_633C:
00006336 4440                       		neg.w	d0
00006338 4840                       		swap	d0
0000633A 3038 F708                  		move.w	($FFFFF708).w,d0
0000633E 4440                       		neg.w	d0
00006340                            
00006340                            loc_6346:
00006340 22C0                       		move.l	d0,(a1)+
00006342 51C9 FFFC                  		dbf	d1,loc_6346
00006346 323C 0027                  		move.w	#$27,d1
0000634A 3038 F710                  		move.w	($FFFFF710).w,d0
0000634E 4440                       		neg.w	d0
00006350                            
00006350                            loc_6356:
00006350 22C0                       		move.l	d0,(a1)+
00006352 51C9 FFFC                  		dbf	d1,loc_6356
00006356 3038 F710                  		move.w	($FFFFF710).w,d0
0000635A 0640 0000                  		addi.w	#0,d0
0000635E 3438 F700                  		move.w	($FFFFF700).w,d2
00006362 0642 FE00                  		addi.w	#-$200,d2
00006366 9440                       		sub.w	d0,d2
00006368 48C2                       		ext.l	d2
0000636A E182                       		asl.l	#8,d2
0000636C 85FC 0068                  		divs.w	#$68,d2
00006370 48C2                       		ext.l	d2
00006372 E182                       		asl.l	#8,d2
00006374 7600                       		moveq	#0,d3
00006376 3600                       		move.w	d0,d3
00006378 323C 0047                  		move.w	#$47,d1
0000637C D244                       		add.w	d4,d1
0000637E                            
0000637E                            loc_6384:
0000637E 3003                       		move.w	d3,d0
00006380 4440                       		neg.w	d0
00006382 22C0                       		move.l	d0,(a1)+
00006384 4843                       		swap	d3
00006386 D682                       		add.l	d2,d3
00006388 4843                       		swap	d3
0000638A 51C9 FFF2                  		dbf	d1,loc_6384
0000638E 4E75                       		rts	
00006390                            ; End of function Deform_GHZ
00006390                            
00006390                            ; ---------------------------------------------------------------------------
00006390                            ; Labyrinth Zone background layer deformation code
00006390                            ; ---------------------------------------------------------------------------
00006390                            
00006390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006390                            
00006390                            
00006390                            Deform_LZ:				; XREF: Deform_Index
00006390 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006394 48C4                       		ext.l	d4
00006396 EF84                       		asl.l	#7,d4
00006398 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000639C 48C5                       		ext.l	d5
0000639E EF85                       		asl.l	#7,d5
000063A0 6100 0000                  		bsr.w	ScrollBlock1
000063A4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063AE 323C 00DF                  		move.w	#$DF,d1
000063B2 3038 F700                  		move.w	($FFFFF700).w,d0
000063B6 4440                       		neg.w	d0
000063B8 4840                       		swap	d0
000063BA 3038 F708                  		move.w	($FFFFF708).w,d0
000063BE 4440                       		neg.w	d0
000063C0                            
000063C0                            loc_63C6:
000063C0 22C0                       		move.l	d0,(a1)+
000063C2 51C9 FFFC                  		dbf	d1,loc_63C6
000063C6 3038 F646                  		move.w	($FFFFF646).w,d0
000063CA 9078 F704                  		sub.w	($FFFFF704).w,d0
000063CE 4E75                       		rts	
000063D0                            ; End of function Deform_LZ
000063D0                            
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            ; Marble Zone background layer deformation code
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            
000063D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D0                            
000063D0                            
000063D0                            Deform_MZ:				; XREF: Deform_Index
000063D0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063D4 48C4                       		ext.l	d4
000063D6 ED84                       		asl.l	#6,d4
000063D8 2204                       		move.l	d4,d1
000063DA E384                       		asl.l	#1,d4
000063DC D881                       		add.l	d1,d4
000063DE 7A00                       		moveq	#0,d5
000063E0 6100 0000                  		bsr.w	ScrollBlock1
000063E4 303C 0200                  		move.w	#$200,d0
000063E8 3238 F704                  		move.w	($FFFFF704).w,d1
000063EC 0441 01C8                  		subi.w	#$1C8,d1
000063F0 6500                       		bcs.s	loc_6402
000063F2 3401                       		move.w	d1,d2
000063F4 D241                       		add.w	d1,d1
000063F6 D242                       		add.w	d2,d1
000063F8 E441                       		asr.w	#2,d1
000063FA D041                       		add.w	d1,d0
000063FC                            
000063FC                            loc_6402:
000063FC 31C0 F714                  		move.w	d0,($FFFFF714).w
00006400 6100 0000                  		bsr.w	ScrollBlock3
00006404 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000640A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000640E 323C 00DF                  		move.w	#$DF,d1
00006412 3038 F700                  		move.w	($FFFFF700).w,d0
00006416 4440                       		neg.w	d0
00006418 4840                       		swap	d0
0000641A 3038 F708                  		move.w	($FFFFF708).w,d0
0000641E 4440                       		neg.w	d0
00006420                            
00006420                            loc_6426:
00006420 22C0                       		move.l	d0,(a1)+
00006422 51C9 FFFC                  		dbf	d1,loc_6426
00006426 4E75                       		rts	
00006428                            ; End of function Deform_MZ
00006428                            
00006428                            ; ---------------------------------------------------------------------------
00006428                            ; Star Light Zone background layer deformation code
00006428                            ; ---------------------------------------------------------------------------
00006428                            
00006428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006428                            
00006428                            
00006428                            Deform_SLZ:				; XREF: Deform_Index
00006428 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000642C 48C4                       		ext.l	d4
0000642E EB84                       		asl.l	#5,d4
00006430 2204                       		move.l	d4,d1
00006432 E384                       		asl.l	#1,d4
00006434 D881                       		add.l	d1,d4
00006436 7A00                       		moveq	#0,d5
00006438 6100 0000                  		bsr.w	ScrollBlock1
0000643C 6100 0000                  		bsr.w	ScrollBlock3
00006440 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006444                            	;	move.w	($FFFFF704).w,d0
00006444                            	;	andi.w	#$7FF,d0
00006444 EA48                       		lsr.w	#5,d0
00006446 4440                       		neg.w	d0
00006448 0640 0026                  		addi.w	#$26,d0
0000644C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006450 3800                       		move.w	d0,d4
00006452                            	;	bsr.w	ScrollBlock3
00006452 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006458 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000645C                            
0000645C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006460 4440                       		neg.w	d0			; negate (positive to negative)
00006462 4840                       		swap	d0			; send to the left side of d0
00006464 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006468 45F8 A800                  		lea	($FFFFA800).w,a2
0000646C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006472 069A 0000 C000             		addi.l	#$C000,(a2)+
00006478 3038 A800                  		move.w	($FFFFA800).w,d0
0000647C 4440                       		neg.w	d0			; negate (positive to negative)
0000647E E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006480 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006484                            slz_DeformLoop_1:
00006484 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006486 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000648A                            
0000648A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000648E 4440                       		neg.w	d0			; negate (positive to negative)
00006490 4840                       		swap	d0			; send to the left side of d0
00006492 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006496 45F8 A800                  		lea	($FFFFA800).w,a2
0000649A 069A 0000 5000             		addi.l	#$5000,(a2)+
000064A0 069A 0000 C000             		addi.l	#$C000,(a2)+
000064A6 3038 A800                  		move.w	($FFFFA800).w,d0
000064AA 4440                       		neg.w	d0			; negate (positive to negative)
000064AC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000064AE 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064B2                            slz_DeformLoop_2:
000064B2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064B4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000064B8                            
000064B8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064BC 4440                       		neg.w	d0			; negate (positive to negative)
000064BE 4840                       		swap	d0			; send to the left side of d0
000064C0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064C4 45F8 A800                  		lea	($FFFFA800).w,a2
000064C8 069A 0000 5000             		addi.l	#$5000,(a2)+
000064CE 069A 0000 C000             		addi.l	#$C000,(a2)+
000064D4 3038 A800                  		move.w	($FFFFA800).w,d0
000064D8 4440                       		neg.w	d0			; negate (positive to negative)
000064DA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000064DC 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064E0                            slz_DeformLoop_3:
000064E0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064E2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000064E6                            
000064E6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064EA 4440                       		neg.w	d0			; negate (positive to negative)
000064EC 4840                       		swap	d0			; send to the left side of d0
000064EE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064F2 45F8 A800                  		lea	($FFFFA800).w,a2
000064F6 069A 0000 5000             		addi.l	#$5000,(a2)+
000064FC 069A 0000 C000             		addi.l	#$C000,(a2)+
00006502 3038 A800                  		move.w	($FFFFA800).w,d0
00006506 4440                       		neg.w	d0			; negate (positive to negative)
00006508 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000650A 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000650E                            slz_DeformLoop_4:
0000650E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006510 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006514                            
00006514 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006518 4440                       		neg.w	d0			; negate (positive to negative)
0000651A 4840                       		swap	d0			; send to the left side of d0
0000651C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006520 45F8 A800                  		lea	($FFFFA800).w,a2
00006524 069A 0000 5000             		addi.l	#$5000,(a2)+
0000652A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006530 3038 A800                  		move.w	($FFFFA800).w,d0
00006534 4440                       		neg.w	d0			; negate (positive to negative)
00006536 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006538 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000653C                            slz_DeformLoop_5:
0000653C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000653E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006542                            
00006542 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006546 4440                       		neg.w	d0			; negate (positive to negative)
00006548 4840                       		swap	d0			; send to the left side of d0
0000654A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000654E 4440                       		neg.w	d0			; negate (positive to negative)
00006550 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006552 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006556                            slz_DeformLoop_6:
00006556 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006558 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000655C                            
0000655C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006560 4440                       		neg.w	d0			; negate (positive to negative)
00006562 4840                       		swap	d0			; send to the left side of d0
00006564 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006568 4440                       		neg.w	d0			; negate (positive to negative)
0000656A EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000656C 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006570                            slz_DeformLoop_7:
00006570 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006572 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006576                            
00006576 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000657A 4440                       		neg.w	d0			; negate (positive to negative)
0000657C 4840                       		swap	d0			; send to the left side of d0
0000657E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006582 4440                       		neg.w	d0			; negate (positive to negative)
00006584 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006586 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000658A                            slz_DeformLoop_8:
0000658A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000658C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006590                            
00006590 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006594 4440                       		neg.w	d0			; negate (positive to negative)
00006596 4840                       		swap	d0			; send to the left side of d0
00006598 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000659C 4440                       		neg.w	d0			; negate (positive to negative)
0000659E EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000065A0 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065A4                            slz_DeformLoop_9:
000065A4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065A6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000065AA                            
000065AA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065AE 4440                       		neg.w	d0			; negate (positive to negative)
000065B0 4840                       		swap	d0			; send to the left side of d0
000065B2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065B6 4440                       		neg.w	d0			; negate (positive to negative)
000065B8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000065BA 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065BE                            slz_DeformLoop_10:
000065BE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065C0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000065C4                            
000065C4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065C8 4440                       		neg.w	d0			; negate (positive to negative)
000065CA 4840                       		swap	d0			; send to the left side of d0
000065CC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065D0 4440                       		neg.w	d0			; negate (positive to negative)
000065D2 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000065D4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065D8                            slz_DeformLoop_11:
000065D8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065DA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000065DE                            
000065DE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065E2 4440                       		neg.w	d0			; negate (positive to negative)
000065E4 4840                       		swap	d0			; send to the left side of d0
000065E6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065EA 4440                       		neg.w	d0			; negate (positive to negative)
000065EC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000065EE 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065F2                            slz_DeformLoop_12:
000065F2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065F4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000065F8                            
000065F8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065FC 4440                       		neg.w	d0			; negate (positive to negative)
000065FE 4840                       		swap	d0			; send to the left side of d0
00006600 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006604 4440                       		neg.w	d0			; negate (positive to negative)
00006606 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006608 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000660C                            slz_DeformLoop_13:
0000660C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000660E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006612 4E75                       		rts	
00006614                            ; End of function Deform_SLZ
00006614 4E75                       		rts	
00006616                            ; End of function Deform_SLZ_2
00006616                            
00006616                            ; ---------------------------------------------------------------------------
00006616                            ; Spring Yard Zone background layer deformation	code
00006616                            ; ---------------------------------------------------------------------------
00006616                            
00006616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006616                            
00006616                            
00006616                            Deform_SYZ:				; XREF: Deform_Index
00006616 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000661A 48C4                       		ext.l	d4
0000661C ED84                       		asl.l	#6,d4
0000661E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006622 48C5                       		ext.l	d5
00006624 E985                       		asl.l	#4,d5
00006626 2205                       		move.l	d5,d1
00006628 E385                       		asl.l	#1,d5
0000662A DA81                       		add.l	d1,d5
0000662C 6100 0000                  		bsr.w	ScrollBlock1
00006630 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006636 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000663A 323C 00DF                  		move.w	#$DF,d1
0000663E 3038 F700                  		move.w	($FFFFF700).w,d0
00006642 4440                       		neg.w	d0
00006644 4840                       		swap	d0
00006646 3038 F708                  		move.w	($FFFFF708).w,d0
0000664A 4440                       		neg.w	d0
0000664C                            
0000664C                            loc_653C:
0000664C 22C0                       		move.l	d0,(a1)+
0000664E 51C9 FFFC                  		dbf	d1,loc_653C
00006652 4E75                       		rts	
00006654                            ; End of function Deform_SYZ
00006654                            
00006654                            ; ---------------------------------------------------------------------------
00006654                            ; Scrap	Brain Zone background layer deformation	code
00006654                            ; ---------------------------------------------------------------------------
00006654                            
00006654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006654                            
00006654                            
00006654                            Deform_SBZ:				; XREF: Deform_Index
00006654 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006658 48C4                       		ext.l	d4
0000665A ED84                       		asl.l	#6,d4
0000665C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006660 48C5                       		ext.l	d5
00006662 E985                       		asl.l	#4,d5
00006664 E385                       		asl.l	#1,d5
00006666 6100 0000                  		bsr.w	ScrollBlock1
0000666A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006670 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006674 323C 00DF                  		move.w	#$DF,d1
00006678 3038 F700                  		move.w	($FFFFF700).w,d0
0000667C 4440                       		neg.w	d0
0000667E 4840                       		swap	d0
00006680 3038 F708                  		move.w	($FFFFF708).w,d0
00006684 4440                       		neg.w	d0
00006686                            
00006686                            loc_6576:
00006686 22C0                       		move.l	d0,(a1)+
00006688 51C9 FFFC                  		dbf	d1,loc_6576
0000668C 4E75                       		rts	
0000668E                            ; End of function Deform_SBZ
0000668E                            
0000668E                            ; ---------------------------------------------------------------------------
0000668E                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000668E                            ; ---------------------------------------------------------------------------
0000668E                            
0000668E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000668E                            
0000668E                            
0000668E                            ScrollHoriz:				; XREF: DeformBgLayer
0000668E 3838 F700                  		move.w	($FFFFF700).w,d4
00006692 6100                       		bsr.s	ScrollHoriz2
00006694 3038 F700                  		move.w	($FFFFF700).w,d0
00006698 0240 0010                  		andi.w	#$10,d0
0000669C 1238 F74A                  		move.b	($FFFFF74A).w,d1
000066A0 B300                       		eor.b	d1,d0
000066A2 6600                       		bne.s	locret_65B0
000066A4 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000066AA 3038 F700                  		move.w	($FFFFF700).w,d0
000066AE 9044                       		sub.w	d4,d0
000066B0 6A00                       		bpl.s	loc_65AA
000066B2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000066B8 4E75                       		rts	
000066BA                            ; ===========================================================================
000066BA                            
000066BA                            loc_65AA:
000066BA 08F8 0003 F754             		bset	#3,($FFFFF754).w
000066C0                            
000066C0                            locret_65B0:
000066C0 4E75                       		rts	
000066C2                            ; End of function ScrollHoriz
000066C2                            
000066C2                            
000066C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C2                            
000066C2                            
000066C2                            ScrollHoriz2:				; XREF: ScrollHoriz
000066C2 3038 D008                  		move.w	($FFFFD008).w,d0
000066C6 9078 F700                  		sub.w	($FFFFF700).w,d0
000066CA 0440 0090                  		subi.w	#$90,d0
000066CE 6500                       		bcs.s	loc_65F6
000066D0 0440 0010                  		subi.w	#$10,d0
000066D4 6400                       		bcc.s	loc_65CC
000066D6 4278 F73A                  		clr.w	($FFFFF73A).w
000066DA 4E75                       		rts	
000066DC                            ; ===========================================================================
000066DC                            
000066DC                            loc_65CC:
000066DC 0C40 0010                  		cmpi.w	#$10,d0
000066E0 6500                       		bcs.s	loc_65D6
000066E2 303C 0010                  		move.w	#$10,d0
000066E6                            
000066E6                            loc_65D6:
000066E6 D078 F700                  		add.w	($FFFFF700).w,d0
000066EA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000066EE 6D00                       		blt.s	loc_65E4
000066F0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000066F4                            
000066F4                            loc_65E4:
000066F4 3200                       		move.w	d0,d1
000066F6 9278 F700                  		sub.w	($FFFFF700).w,d1
000066FA E141                       		asl.w	#8,d1
000066FC 31C0 F700                  		move.w	d0,($FFFFF700).w
00006700 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006704 4E75                       		rts	
00006706                            ; ===========================================================================
00006706                            
00006706                            loc_65F6:				; XREF: ScrollHoriz2
00006706 D078 F700                  		add.w	($FFFFF700).w,d0
0000670A B078 F728                  		cmp.w	($FFFFF728).w,d0
0000670E 6EE4                       		bgt.s	loc_65E4
00006710 3038 F728                  		move.w	($FFFFF728).w,d0
00006714 60DE                       		bra.s	loc_65E4
00006716                            ; End of function ScrollHoriz2
00006716                            
00006716                            ; ===========================================================================
00006716 4A40                       		tst.w	d0
00006718 6A00                       		bpl.s	loc_6610
0000671A 303C FFFE                  		move.w	#-2,d0
0000671E 60E6                       		bra.s	loc_65F6
00006720                            ; ===========================================================================
00006720                            
00006720                            loc_6610:
00006720 303C 0002                  		move.w	#2,d0
00006724 60B6                       		bra.s	loc_65CC
00006726                            
00006726                            ; ---------------------------------------------------------------------------
00006726                            ; Subroutine to	scroll the level vertically as Sonic moves
00006726                            ; ---------------------------------------------------------------------------
00006726                            
00006726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006726                            
00006726                            
00006726                            ScrollVertical:				; XREF: DeformBgLayer
00006726 7200                       		moveq	#0,d1
00006728 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000672C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006730 0838 0002 D022             		btst	#2,($FFFFD022).w
00006736 6700                       		beq.s	loc_662A
00006738 5B40                       		subq.w	#5,d0
0000673A                            
0000673A                            loc_662A:
0000673A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006740 6700                       		beq.s	loc_664A
00006742 0640 0020                  		addi.w	#$20,d0
00006746 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000674A 6500                       		bcs.s	loc_6696
0000674C 0440 0040                  		subi.w	#$40,d0
00006750 6400                       		bcc.s	loc_6696
00006752 4A38 F75C                  		tst.b	($FFFFF75C).w
00006756 6600                       		bne.s	loc_66A8
00006758 6000                       		bra.s	loc_6656
0000675A                            ; ===========================================================================
0000675A                            
0000675A                            loc_664A:
0000675A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000675E 6600                       		bne.s	loc_665C
00006760 4A38 F75C                  		tst.b	($FFFFF75C).w
00006764 6600                       		bne.s	loc_66A8
00006766                            
00006766                            loc_6656:
00006766 4278 F73C                  		clr.w	($FFFFF73C).w
0000676A 4E75                       		rts	
0000676C                            ; ===========================================================================
0000676C                            
0000676C                            loc_665C:
0000676C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006772 6600                       		bne.s	loc_6684
00006774 3238 D014                  		move.w	($FFFFD014).w,d1
00006778 6A00                       		bpl.s	loc_666C
0000677A 4441                       		neg.w	d1
0000677C                            
0000677C                            loc_666C:
0000677C 0C41 0800                  		cmpi.w	#$800,d1
00006780 6400                       		bcc.s	loc_6696
00006782 323C 0600                  		move.w	#$600,d1
00006786 0C40 0006                  		cmpi.w	#6,d0
0000678A 6E00                       		bgt.s	loc_66F6
0000678C 0C40 FFFA                  		cmpi.w	#-6,d0
00006790 6D00                       		blt.s	loc_66C0
00006792 6000                       		bra.s	loc_66AE
00006794                            ; ===========================================================================
00006794                            
00006794                            loc_6684:
00006794 323C 0200                  		move.w	#$200,d1
00006798 0C40 0002                  		cmpi.w	#2,d0
0000679C 6E00                       		bgt.s	loc_66F6
0000679E 0C40 FFFE                  		cmpi.w	#-2,d0
000067A2 6D00                       		blt.s	loc_66C0
000067A4 6000                       		bra.s	loc_66AE
000067A6                            ; ===========================================================================
000067A6                            
000067A6                            loc_6696:
000067A6 323C 1000                  		move.w	#$1000,d1
000067AA 0C40 0010                  		cmpi.w	#$10,d0
000067AE 6E00                       		bgt.s	loc_66F6
000067B0 0C40 FFF0                  		cmpi.w	#-$10,d0
000067B4 6D00                       		blt.s	loc_66C0
000067B6 6000                       		bra.s	loc_66AE
000067B8                            ; ===========================================================================
000067B8                            
000067B8                            loc_66A8:
000067B8 7000                       		moveq	#0,d0
000067BA 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000067BE                            
000067BE                            loc_66AE:
000067BE 7200                       		moveq	#0,d1
000067C0 3200                       		move.w	d0,d1
000067C2 D278 F704                  		add.w	($FFFFF704).w,d1
000067C6 4A40                       		tst.w	d0
000067C8 6A00 0000                  		bpl.w	loc_6700
000067CC 6000 0000                  		bra.w	loc_66CC
000067D0                            ; ===========================================================================
000067D0                            
000067D0                            loc_66C0:
000067D0 4441                       		neg.w	d1
000067D2 48C1                       		ext.l	d1
000067D4 E181                       		asl.l	#8,d1
000067D6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000067DA 4841                       		swap	d1
000067DC                            
000067DC                            loc_66CC:
000067DC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000067E0 6E00                       		bgt.s	loc_6724
000067E2 0C41 FF00                  		cmpi.w	#-$100,d1
000067E6 6E00                       		bgt.s	loc_66F0
000067E8 0241 07FF                  		andi.w	#$7FF,d1
000067EC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000067F2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000067F8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000067FE 6000                       		bra.s	loc_6724
00006800                            ; ===========================================================================
00006800                            
00006800                            loc_66F0:
00006800 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006804 6000                       		bra.s	loc_6724
00006806                            ; ===========================================================================
00006806                            
00006806                            loc_66F6:
00006806 48C1                       		ext.l	d1
00006808 E181                       		asl.l	#8,d1
0000680A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000680E 4841                       		swap	d1
00006810                            
00006810                            loc_6700:
00006810 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006814 6D00                       		blt.s	loc_6724
00006816 0441 0800                  		subi.w	#$800,d1
0000681A 6500                       		bcs.s	loc_6720
0000681C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006822 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006828 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000682E 6000                       		bra.s	loc_6724
00006830                            ; ===========================================================================
00006830                            
00006830                            loc_6720:
00006830 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006834                            
00006834                            loc_6724:
00006834 3838 F704                  		move.w	($FFFFF704).w,d4
00006838 4841                       		swap	d1
0000683A 2601                       		move.l	d1,d3
0000683C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006840 E09B                       		ror.l	#8,d3
00006842 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006846 21C1 F704                  		move.l	d1,($FFFFF704).w
0000684A 3038 F704                  		move.w	($FFFFF704).w,d0
0000684E 0240 0010                  		andi.w	#$10,d0
00006852 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006856 B300                       		eor.b	d1,d0
00006858 6600                       		bne.s	locret_6766
0000685A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006860 3038 F704                  		move.w	($FFFFF704).w,d0
00006864 9044                       		sub.w	d4,d0
00006866 6A00                       		bpl.s	loc_6760
00006868 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000686E 4E75                       		rts	
00006870                            ; ===========================================================================
00006870                            
00006870                            loc_6760:
00006870 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006876                            
00006876                            locret_6766:
00006876 4E75                       		rts	
00006878                            ; End of function ScrollVertical
00006878                            
00006878                            
00006878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006878                            
00006878                            
00006878                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006878 2438 F708                  		move.l	($FFFFF708).w,d2
0000687C 2002                       		move.l	d2,d0
0000687E D084                       		add.l	d4,d0
00006880 21C0 F708                  		move.l	d0,($FFFFF708).w
00006884 2200                       		move.l	d0,d1
00006886 4841                       		swap	d1
00006888 0241 0010                  		andi.w	#$10,d1
0000688C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006890 B701                       		eor.b	d3,d1
00006892 6600                       		bne.s	loc_679C
00006894 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000689A 9082                       		sub.l	d2,d0
0000689C 6A00                       		bpl.s	loc_6796
0000689E 08F8 0002 F756             		bset	#2,($FFFFF756).w
000068A4 6000                       		bra.s	loc_679C
000068A6                            ; ===========================================================================
000068A6                            
000068A6                            loc_6796:
000068A6 08F8 0003 F756             		bset	#3,($FFFFF756).w
000068AC                            
000068AC                            loc_679C:
000068AC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068B0 2003                       		move.l	d3,d0
000068B2 D085                       		add.l	d5,d0
000068B4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068B8 2200                       		move.l	d0,d1
000068BA 4841                       		swap	d1
000068BC 0241 0010                  		andi.w	#$10,d1
000068C0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000068C4 B501                       		eor.b	d2,d1
000068C6 6600                       		bne.s	locret_67D0
000068C8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000068CE 9083                       		sub.l	d3,d0
000068D0 6A00                       		bpl.s	loc_67CA
000068D2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000068D8 4E75                       		rts	
000068DA                            ; ===========================================================================
000068DA                            
000068DA                            loc_67CA:
000068DA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000068E0                            
000068E0                            locret_67D0:
000068E0 4E75                       		rts	
000068E2                            ; End of function ScrollBlock1
000068E2                            
000068E2                            
000068E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E2                            
000068E2                            
000068E2                            ScrollBlock2:				; XREF: Deform_SLZ
000068E2 2438 F708                  		move.l	($FFFFF708).w,d2
000068E6 2002                       		move.l	d2,d0
000068E8 D084                       		add.l	d4,d0
000068EA 21C0 F708                  		move.l	d0,($FFFFF708).w
000068EE 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068F2 2003                       		move.l	d3,d0
000068F4 D085                       		add.l	d5,d0
000068F6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068FA 2200                       		move.l	d0,d1
000068FC 4841                       		swap	d1
000068FE 0241 0010                  		andi.w	#$10,d1
00006902 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006906 B501                       		eor.b	d2,d1
00006908 6600                       		bne.s	locret_6812
0000690A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006910 9083                       		sub.l	d3,d0
00006912 6A00                       		bpl.s	loc_680C
00006914 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000691A 4E75                       		rts	
0000691C                            ; ===========================================================================
0000691C                            
0000691C                            loc_680C:
0000691C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006922                            
00006922                            locret_6812:
00006922 4E75                       		rts	
00006924                            ; End of function ScrollBlock2
00006924                            
00006924                            
00006924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006924                            
00006924                            
00006924                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006924 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006928 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000692C 3200                       		move.w	d0,d1
0000692E 0241 0010                  		andi.w	#$10,d1
00006932 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006936 B501                       		eor.b	d2,d1
00006938 6600                       		bne.s	locret_6842
0000693A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006940 9043                       		sub.w	d3,d0
00006942 6A00                       		bpl.s	loc_683C
00006944 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000694A 4E75                       		rts	
0000694C                            ; ===========================================================================
0000694C                            
0000694C                            loc_683C:
0000694C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006952                            
00006952                            locret_6842:
00006952 4E75                       		rts	
00006954                            ; End of function ScrollBlock3
00006954                            
00006954                            
00006954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006954                            
00006954                            
00006954                            ScrollBlock4:				; XREF: Deform_GHZ
00006954 3438 F710                  		move.w	($FFFFF710).w,d2
00006958 3638 F714                  		move.w	($FFFFF714).w,d3
0000695C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006960 48C0                       		ext.l	d0
00006962 EF80                       		asl.l	#7,d0
00006964 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006968 3038 F710                  		move.w	($FFFFF710).w,d0
0000696C 0240 0010                  		andi.w	#$10,d0
00006970 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006974 B300                       		eor.b	d1,d0
00006976 6600                       		bne.s	locret_6884
00006978 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000697E 3038 F710                  		move.w	($FFFFF710).w,d0
00006982 9042                       		sub.w	d2,d0
00006984 6A00                       		bpl.s	loc_687E
00006986 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000698C 6000                       		bra.s	locret_6884
0000698E                            ; ===========================================================================
0000698E                            
0000698E                            loc_687E:
0000698E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006994                            
00006994                            locret_6884:
00006994 4E75                       		rts	
00006996                            ; End of function ScrollBlock4
00006996                            
00006996                            
00006996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006996                            
00006996                            
00006996                            sub_6886:				; XREF: loc_C44
00006996 4BF9 00C0 0004             		lea	($C00004).l,a5
0000699C 4DF9 00C0 0000             		lea	($C00000).l,a6
000069A2 45F8 F756                  		lea	($FFFFF756).w,a2
000069A6 47F8 F708                  		lea	($FFFFF708).w,a3
000069AA 49F8 A440                  		lea	($FFFFA440).w,a4
000069AE 343C 6000                  		move.w	#$6000,d2
000069B2 6100 0000                  		bsr.w	sub_6954
000069B6 45F8 F758                  		lea	($FFFFF758).w,a2
000069BA 47F8 F710                  		lea	($FFFFF710).w,a3
000069BE 6000 0000                  		bra.w	sub_69F4
000069C2                            ; End of function sub_6886
000069C2                            
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            ; Subroutine to	display	correct	tiles as you move
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            
000069C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C2                            
000069C2                            
000069C2                            LoadTilesAsYouMove:			; XREF: Demo_Time
000069C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000069C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000069CE 45F8 FF32                  		lea	($FFFFFF32).w,a2
000069D2 47F8 FF18                  		lea	($FFFFFF18).w,a3
000069D6 49F8 A440                  		lea	($FFFFA440).w,a4
000069DA 343C 6000                  		move.w	#$6000,d2
000069DE 6100 0000                  		bsr.w	sub_6954
000069E2 45F8 FF34                  		lea	($FFFFFF34).w,a2
000069E6 47F8 FF20                  		lea	($FFFFFF20).w,a3
000069EA 6100 0000                  		bsr.w	sub_69F4
000069EE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000069F2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000069F6 49F8 A400                  		lea	($FFFFA400).w,a4
000069FA 343C 4000                  		move.w	#$4000,d2
000069FE 4A12                       		tst.b	(a2)
00006A00 6700                       		beq.s	locret_6952
00006A02 0892 0000                  		bclr	#0,(a2)
00006A06 6700                       		beq.s	loc_6908
00006A08 78F0                       		moveq	#-$10,d4
00006A0A 7AF0                       		moveq	#-$10,d5
00006A0C 6100 0000                  		bsr.w	sub_6C20
00006A10 78F0                       		moveq	#-$10,d4
00006A12 7AF0                       		moveq	#-$10,d5
00006A14 6100 0000                  		bsr.w	sub_6AD8
00006A18                            
00006A18                            loc_6908:
00006A18 0892 0001                  		bclr	#1,(a2)
00006A1C 6700                       		beq.s	loc_6922
00006A1E 383C 00E0                  		move.w	#$E0,d4
00006A22 7AF0                       		moveq	#-$10,d5
00006A24 6100 0000                  		bsr.w	sub_6C20
00006A28 383C 00E0                  		move.w	#$E0,d4
00006A2C 7AF0                       		moveq	#-$10,d5
00006A2E 6100 0000                  		bsr.w	sub_6AD8
00006A32                            
00006A32                            loc_6922:
00006A32 0892 0002                  		bclr	#2,(a2)
00006A36 6700                       		beq.s	loc_6938
00006A38 78F0                       		moveq	#-$10,d4
00006A3A 7AF0                       		moveq	#-$10,d5
00006A3C 6100 0000                  		bsr.w	sub_6C20
00006A40 78F0                       		moveq	#-$10,d4
00006A42 7AF0                       		moveq	#-$10,d5
00006A44 6100 0000                  		bsr.w	sub_6B04
00006A48                            
00006A48                            loc_6938:
00006A48 0892 0003                  		bclr	#3,(a2)
00006A4C 6700                       		beq.s	locret_6952
00006A4E 78F0                       		moveq	#-$10,d4
00006A50 3A3C 0140                  		move.w	#$140,d5
00006A54 6100 0000                  		bsr.w	sub_6C20
00006A58 78F0                       		moveq	#-$10,d4
00006A5A 3A3C 0140                  		move.w	#$140,d5
00006A5E 6100 0000                  		bsr.w	sub_6B04
00006A62                            
00006A62                            locret_6952:
00006A62 4E75                       		rts	
00006A64                            ; End of function LoadTilesAsYouMove
00006A64                            
00006A64                            
00006A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A64                            
00006A64                            
00006A64                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006A64 4A12                       		tst.b	(a2)
00006A66 6700 0000                  		beq.w	locret_69F2
00006A6A 0892 0000                  		bclr	#0,(a2)
00006A6E 6700                       		beq.s	loc_6972
00006A70 78F0                       		moveq	#-$10,d4
00006A72 7AF0                       		moveq	#-$10,d5
00006A74 6100 0000                  		bsr.w	sub_6C20
00006A78 78F0                       		moveq	#-$10,d4
00006A7A 7AF0                       		moveq	#-$10,d5
00006A7C 7C1F                       		moveq	#$1F,d6
00006A7E 6100 0000                  		bsr.w	sub_6ADA
00006A82                            
00006A82                            loc_6972:
00006A82 0892 0001                  		bclr	#1,(a2)
00006A86 6700                       		beq.s	loc_698E
00006A88 383C 00E0                  		move.w	#$E0,d4
00006A8C 7AF0                       		moveq	#-$10,d5
00006A8E 6100 0000                  		bsr.w	sub_6C20
00006A92 383C 00E0                  		move.w	#$E0,d4
00006A96 7AF0                       		moveq	#-$10,d5
00006A98 7C1F                       		moveq	#$1F,d6
00006A9A 6100 0000                  		bsr.w	sub_6ADA
00006A9E                            
00006A9E                            loc_698E:
00006A9E 0892 0002                  		bclr	#2,(a2)
00006AA2 6700                       		beq.s	loc_69BE
00006AA4 78F0                       		moveq	#-$10,d4
00006AA6 7AF0                       		moveq	#-$10,d5
00006AA8 6100 0000                  		bsr.w	sub_6C20
00006AAC 78F0                       		moveq	#-$10,d4
00006AAE 7AF0                       		moveq	#-$10,d5
00006AB0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AB4 322B 0004                  		move.w	4(a3),d1
00006AB8 0241 FFF0                  		andi.w	#-$10,d1
00006ABC 9C41                       		sub.w	d1,d6
00006ABE 6D00                       		blt.s	loc_69BE
00006AC0 E84E                       		lsr.w	#4,d6
00006AC2 0C46 000F                  		cmpi.w	#$F,d6
00006AC6 6500                       		bcs.s	loc_69BA
00006AC8 7C0F                       		moveq	#$F,d6
00006ACA                            
00006ACA                            loc_69BA:
00006ACA 6100 0000                  		bsr.w	sub_6B06
00006ACE                            
00006ACE                            loc_69BE:
00006ACE 0892 0003                  		bclr	#3,(a2)
00006AD2 6700                       		beq.s	locret_69F2
00006AD4 78F0                       		moveq	#-$10,d4
00006AD6 3A3C 0140                  		move.w	#$140,d5
00006ADA 6100 0000                  		bsr.w	sub_6C20
00006ADE 78F0                       		moveq	#-$10,d4
00006AE0 3A3C 0140                  		move.w	#$140,d5
00006AE4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AE8 322B 0004                  		move.w	4(a3),d1
00006AEC 0241 FFF0                  		andi.w	#-$10,d1
00006AF0 9C41                       		sub.w	d1,d6
00006AF2 6D00                       		blt.s	locret_69F2
00006AF4 E84E                       		lsr.w	#4,d6
00006AF6 0C46 000F                  		cmpi.w	#$F,d6
00006AFA 6500                       		bcs.s	loc_69EE
00006AFC 7C0F                       		moveq	#$F,d6
00006AFE                            
00006AFE                            loc_69EE:
00006AFE 6100 0000                  		bsr.w	sub_6B06
00006B02                            
00006B02                            locret_69F2:
00006B02 4E75                       		rts	
00006B04                            ; End of function sub_6954
00006B04                            
00006B04                            
00006B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B04                            
00006B04                            
00006B04                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006B04 4A12                       		tst.b	(a2)
00006B06 6700 0000                  		beq.w	locret_6A80
00006B0A 0892 0002                  		bclr	#2,(a2)
00006B0E 6700                       		beq.s	loc_6A3E
00006B10 0C53 0010                  		cmpi.w	#$10,(a3)
00006B14 6500                       		bcs.s	loc_6A3E
00006B16 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B1A 322B 0004                  		move.w	4(a3),d1
00006B1E 0241 FFF0                  		andi.w	#-$10,d1
00006B22 9841                       		sub.w	d1,d4
00006B24 3F04                       		move.w	d4,-(sp)
00006B26 7AF0                       		moveq	#-$10,d5
00006B28 6100 0000                  		bsr.w	sub_6C20
00006B2C 381F                       		move.w	(sp)+,d4
00006B2E 7AF0                       		moveq	#-$10,d5
00006B30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B34 322B 0004                  		move.w	4(a3),d1
00006B38 0241 FFF0                  		andi.w	#-$10,d1
00006B3C 9C41                       		sub.w	d1,d6
00006B3E 6D00                       		blt.s	loc_6A3E
00006B40 E84E                       		lsr.w	#4,d6
00006B42 0446 000E                  		subi.w	#$E,d6
00006B46 6400                       		bcc.s	loc_6A3E
00006B48 4446                       		neg.w	d6
00006B4A 6100 0000                  		bsr.w	sub_6B06
00006B4E                            
00006B4E                            loc_6A3E:
00006B4E 0892 0003                  		bclr	#3,(a2)
00006B52 6700                       		beq.s	locret_6A80
00006B54 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B58 322B 0004                  		move.w	4(a3),d1
00006B5C 0241 FFF0                  		andi.w	#-$10,d1
00006B60 9841                       		sub.w	d1,d4
00006B62 3F04                       		move.w	d4,-(sp)
00006B64 3A3C 0140                  		move.w	#$140,d5
00006B68 6100 0000                  		bsr.w	sub_6C20
00006B6C 381F                       		move.w	(sp)+,d4
00006B6E 3A3C 0140                  		move.w	#$140,d5
00006B72 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B76 322B 0004                  		move.w	4(a3),d1
00006B7A 0241 FFF0                  		andi.w	#-$10,d1
00006B7E 9C41                       		sub.w	d1,d6
00006B80 6D00                       		blt.s	locret_6A80
00006B82 E84E                       		lsr.w	#4,d6
00006B84 0446 000E                  		subi.w	#$E,d6
00006B88 6400                       		bcc.s	locret_6A80
00006B8A 4446                       		neg.w	d6
00006B8C 6100 0000                  		bsr.w	sub_6B06
00006B90                            
00006B90                            locret_6A80:
00006B90 4E75                       		rts	
00006B92                            ; End of function sub_69F4
00006B92                            
00006B92                            ; ===========================================================================
00006B92 4A12                       		tst.b	(a2)
00006B94 6700                       		beq.s	locret_6AD6
00006B96 0892 0002                  		bclr	#2,(a2)
00006B9A 6700                       		beq.s	loc_6AAC
00006B9C 383C 00D0                  		move.w	#$D0,d4
00006BA0 322B 0004                  		move.w	4(a3),d1
00006BA4 0241 FFF0                  		andi.w	#-$10,d1
00006BA8 9841                       		sub.w	d1,d4
00006BAA 3F04                       		move.w	d4,-(sp)
00006BAC 7AF0                       		moveq	#-$10,d5
00006BAE 6100 0000                  		bsr.w	sub_6C3C
00006BB2 381F                       		move.w	(sp)+,d4
00006BB4 7AF0                       		moveq	#-$10,d5
00006BB6 7C02                       		moveq	#2,d6
00006BB8 6100 0000                  		bsr.w	sub_6B06
00006BBC                            
00006BBC                            loc_6AAC:
00006BBC 0892 0003                  		bclr	#3,(a2)
00006BC0 6700                       		beq.s	locret_6AD6
00006BC2 383C 00D0                  		move.w	#$D0,d4
00006BC6 322B 0004                  		move.w	4(a3),d1
00006BCA 0241 FFF0                  		andi.w	#-$10,d1
00006BCE 9841                       		sub.w	d1,d4
00006BD0 3F04                       		move.w	d4,-(sp)
00006BD2 3A3C 0140                  		move.w	#$140,d5
00006BD6 6100 0000                  		bsr.w	sub_6C3C
00006BDA 381F                       		move.w	(sp)+,d4
00006BDC 3A3C 0140                  		move.w	#$140,d5
00006BE0 7C02                       		moveq	#2,d6
00006BE2 6100 0000                  		bsr.w	sub_6B06
00006BE6                            
00006BE6                            locret_6AD6:
00006BE6 4E75                       		rts	
00006BE8                            
00006BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE8                            
00006BE8                            
00006BE8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006BE8 7C15                       		moveq	#$15,d6
00006BEA                            ; End of function sub_6AD8
00006BEA                            
00006BEA                            
00006BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BEA                            
00006BEA                            
00006BEA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006BEA 2E3C 0080 0000             		move.l	#$800000,d7
00006BF0 2200                       		move.l	d0,d1
00006BF2                            
00006BF2                            loc_6AE2:
00006BF2 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006BF6 6100 0000                  		bsr.w	sub_6BD6
00006BFA 2001                       		move.l	d1,d0
00006BFC 6100 0000                  		bsr.w	sub_6B32
00006C00 5801                       		addq.b	#4,d1
00006C02 0201 007F                  		andi.b	#$7F,d1
00006C06 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C0A 0645 0010                  		addi.w	#$10,d5
00006C0E 51CE FFE2                  		dbf	d6,loc_6AE2
00006C12 4E75                       		rts	
00006C14                            ; End of function sub_6ADA
00006C14                            
00006C14                            
00006C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C14                            
00006C14                            
00006C14                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006C14 7C0F                       		moveq	#$F,d6
00006C16                            ; End of function sub_6B04
00006C16                            
00006C16                            
00006C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C16                            
00006C16                            
00006C16                            sub_6B06:				; XREF: sub_6954
00006C16 2E3C 0080 0000             		move.l	#$800000,d7
00006C1C 2200                       		move.l	d0,d1
00006C1E                            
00006C1E                            loc_6B0E:
00006C1E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006C22 6100 0000                  		bsr.w	sub_6BD6
00006C26 2001                       		move.l	d1,d0
00006C28 6100 0000                  		bsr.w	sub_6B32
00006C2C 0641 0100                  		addi.w	#$100,d1
00006C30 0241 0FFF                  		andi.w	#$FFF,d1
00006C34 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C38 0644 0010                  		addi.w	#$10,d4
00006C3C 51CE FFE0                  		dbf	d6,loc_6B0E
00006C40 4E75                       		rts	
00006C42                            ; End of function sub_6B06
00006C42                            
00006C42                            
00006C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C42                            
00006C42                            
00006C42                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006C42 8042                       		or.w	d2,d0
00006C44 4840                       		swap	d0
00006C46 0810 0004                  		btst	#4,(a0)
00006C4A 6600                       		bne.s	loc_6B6E
00006C4C 0810 0003                  		btst	#3,(a0)
00006C50 6600                       		bne.s	loc_6B4E
00006C52 2A80                       		move.l	d0,(a5)
00006C54 2C99                       		move.l	(a1)+,(a6)
00006C56 D087                       		add.l	d7,d0
00006C58 2A80                       		move.l	d0,(a5)
00006C5A 2C99                       		move.l	(a1)+,(a6)
00006C5C 4E75                       		rts	
00006C5E                            ; ===========================================================================
00006C5E                            
00006C5E                            loc_6B4E:
00006C5E 2A80                       		move.l	d0,(a5)
00006C60 2819                       		move.l	(a1)+,d4
00006C62 0A84 0800 0800             		eori.l	#$8000800,d4
00006C68 4844                       		swap	d4
00006C6A 2C84                       		move.l	d4,(a6)
00006C6C D087                       		add.l	d7,d0
00006C6E 2A80                       		move.l	d0,(a5)
00006C70 2819                       		move.l	(a1)+,d4
00006C72 0A84 0800 0800             		eori.l	#$8000800,d4
00006C78 4844                       		swap	d4
00006C7A 2C84                       		move.l	d4,(a6)
00006C7C 4E75                       		rts	
00006C7E                            ; ===========================================================================
00006C7E                            
00006C7E                            loc_6B6E:
00006C7E 0810 0003                  		btst	#3,(a0)
00006C82 6600                       		bne.s	loc_6B90
00006C84 2A80                       		move.l	d0,(a5)
00006C86 2A19                       		move.l	(a1)+,d5
00006C88 2819                       		move.l	(a1)+,d4
00006C8A 0A84 1000 1000             		eori.l	#$10001000,d4
00006C90 2C84                       		move.l	d4,(a6)
00006C92 D087                       		add.l	d7,d0
00006C94 2A80                       		move.l	d0,(a5)
00006C96 0A85 1000 1000             		eori.l	#$10001000,d5
00006C9C 2C85                       		move.l	d5,(a6)
00006C9E 4E75                       		rts	
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_6B90:
00006CA0 2A80                       		move.l	d0,(a5)
00006CA2 2A19                       		move.l	(a1)+,d5
00006CA4 2819                       		move.l	(a1)+,d4
00006CA6 0A84 1800 1800             		eori.l	#$18001800,d4
00006CAC 4844                       		swap	d4
00006CAE 2C84                       		move.l	d4,(a6)
00006CB0 D087                       		add.l	d7,d0
00006CB2 2A80                       		move.l	d0,(a5)
00006CB4 0A85 1800 1800             		eori.l	#$18001800,d5
00006CBA 4845                       		swap	d5
00006CBC 2C85                       		move.l	d5,(a6)
00006CBE 4E75                       		rts	
00006CC0                            ; End of function sub_6B32
00006CC0                            
00006CC0                            ; ===========================================================================
00006CC0 4E75                       		rts	
00006CC2                            ; ===========================================================================
00006CC2 2A80                       		move.l	d0,(a5)
00006CC4 3A3C 2000                  		move.w	#$2000,d5
00006CC8 3819                       		move.w	(a1)+,d4
00006CCA D845                       		add.w	d5,d4
00006CCC 3C84                       		move.w	d4,(a6)
00006CCE 3819                       		move.w	(a1)+,d4
00006CD0 D845                       		add.w	d5,d4
00006CD2 3C84                       		move.w	d4,(a6)
00006CD4 D087                       		add.l	d7,d0
00006CD6 2A80                       		move.l	d0,(a5)
00006CD8 3819                       		move.w	(a1)+,d4
00006CDA D845                       		add.w	d5,d4
00006CDC 3C84                       		move.w	d4,(a6)
00006CDE 3819                       		move.w	(a1)+,d4
00006CE0 D845                       		add.w	d5,d4
00006CE2 3C84                       		move.w	d4,(a6)
00006CE4 4E75                       		rts	
00006CE6                            
00006CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE6                            
00006CE6                            
00006CE6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006CE6 43F8 B000                  		lea	($FFFFB000).w,a1
00006CEA D86B 0004                  		add.w	4(a3),d4
00006CEE DA53                       		add.w	(a3),d5
00006CF0 3604                       		move.w	d4,d3
00006CF2 E24B                       		lsr.w	#1,d3
00006CF4 0243 0380                  		andi.w	#$380,d3
00006CF8 E64D                       		lsr.w	#3,d5
00006CFA 3005                       		move.w	d5,d0
00006CFC EA48                       		lsr.w	#5,d0
00006CFE 0240 007F                  		andi.w	#$7F,d0
00006D02 D043                       		add.w	d3,d0
00006D04 76FF                       		moveq	#-1,d3
00006D06 1634 0000                  		move.b	(a4,d0.w),d3
00006D0A 6700                       		beq.s	locret_6C1E
00006D0C 5303                       		subq.b	#1,d3
00006D0E 0243 007F                  		andi.w	#$7F,d3
00006D12 EE5B                       		ror.w	#7,d3
00006D14 D844                       		add.w	d4,d4
00006D16 0244 01E0                  		andi.w	#$1E0,d4
00006D1A 0245 001E                  		andi.w	#$1E,d5
00006D1E D644                       		add.w	d4,d3
00006D20 D645                       		add.w	d5,d3
00006D22 2043                       		movea.l	d3,a0
00006D24 3610                       		move.w	(a0),d3
00006D26 0243 03FF                  		andi.w	#$3FF,d3
00006D2A E74B                       		lsl.w	#3,d3
00006D2C D2C3                       		adda.w	d3,a1
00006D2E                            
00006D2E                            locret_6C1E:
00006D2E 4E75                       		rts	
00006D30                            ; End of function sub_6BD6
00006D30                            
00006D30                            
00006D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D30                            
00006D30                            
00006D30                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006D30 D86B 0004                  		add.w	4(a3),d4
00006D34 DA53                       		add.w	(a3),d5
00006D36 0244 00F0                  		andi.w	#$F0,d4
00006D3A 0245 01F0                  		andi.w	#$1F0,d5
00006D3E E94C                       		lsl.w	#4,d4
00006D40 E44D                       		lsr.w	#2,d5
00006D42 D845                       		add.w	d5,d4
00006D44 7003                       		moveq	#3,d0
00006D46 4840                       		swap	d0
00006D48 3004                       		move.w	d4,d0
00006D4A 4E75                       		rts	
00006D4C                            ; End of function sub_6C20
00006D4C                            
00006D4C                            
00006D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D4C                            ; not used
00006D4C                            
00006D4C                            
00006D4C                            sub_6C3C:
00006D4C D86B 0004                  		add.w	4(a3),d4
00006D50 DA53                       		add.w	(a3),d5
00006D52 0244 00F0                  		andi.w	#$F0,d4
00006D56 0245 01F0                  		andi.w	#$1F0,d5
00006D5A E94C                       		lsl.w	#4,d4
00006D5C E44D                       		lsr.w	#2,d5
00006D5E D845                       		add.w	d5,d4
00006D60 7002                       		moveq	#2,d0
00006D62 4840                       		swap	d0
00006D64 3004                       		move.w	d4,d0
00006D66 4E75                       		rts	
00006D68                            ; End of function sub_6C3C
00006D68                            
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Subroutine to	load tiles as soon as the level	appears
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006D68 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D6E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D74 47F8 F700                  		lea	($FFFFF700).w,a3
00006D78 49F8 A400                  		lea	($FFFFA400).w,a4
00006D7C 343C 4000                  		move.w	#$4000,d2
00006D80 6100                       		bsr.s	LoadTilesFromStart2
00006D82 47F8 F708                  		lea	($FFFFF708).w,a3
00006D86 49F8 A440                  		lea	($FFFFA440).w,a4
00006D8A 343C 6000                  		move.w	#$6000,d2
00006D8E                            ; End of function LoadTilesFromStart
00006D8E                            
00006D8E                            
00006D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D8E                            
00006D8E                            
00006D8E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006D8E 78F0                       		moveq	#-$10,d4
00006D90 7C0F                       		moveq	#$F,d6
00006D92                            
00006D92                            loc_6C82:
00006D92 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006D96 7A00                       		moveq	#0,d5
00006D98 3204                       		move.w	d4,d1
00006D9A 6100 FF94                  		bsr.w	sub_6C20
00006D9E 3801                       		move.w	d1,d4
00006DA0 7A00                       		moveq	#0,d5
00006DA2 7C1F                       		moveq	#$1F,d6
00006DA4 6100 FE44                  		bsr.w	sub_6ADA
00006DA8 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006DAC 0644 0010                  		addi.w	#$10,d4
00006DB0 51CE FFE0                  		dbf	d6,loc_6C82
00006DB4 4E75                       		rts	
00006DB6                            ; End of function LoadTilesFromStart2
00006DB6                            
00006DB6                            ; ---------------------------------------------------------------------------
00006DB6                            ; Main Load Block loading subroutine
00006DB6                            ; ---------------------------------------------------------------------------
00006DB6                            
00006DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB6                            
00006DB6                            
00006DB6                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006DB6 7000                       		moveq	#0,d0
00006DB8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006DBC E948                       		lsl.w	#4,d0
00006DBE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006DC4 45F2 0000                  		lea	(a2,d0.w),a2
00006DC8 2F0A                       		move.l	a2,-(sp)
00006DCA 588A                       		addq.l	#4,a2
00006DCC 205A                       		movea.l	(a2)+,a0
00006DCE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006DD2 303C 0000                  		move.w	#0,d0
00006DD6 6100 A946                  		bsr.w	EniDec
00006DDA 205A                       		movea.l	(a2)+,a0
00006DDC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006DE2 6100 AAB8                  		bsr.w	KosDec
00006DE6 6100 0000                  		bsr.w	LevelLayoutLoad
00006DEA 301A                       		move.w	(a2)+,d0
00006DEC 3012                       		move.w	(a2),d0
00006DEE 0240 00FF                  		andi.w	#$FF,d0
00006DF2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006DF8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006DFA 700C                       		moveq	#$C,d0		; use SB3 pallet
00006DFC                            
00006DFC                            MLB_ChkSBZPal:
00006DFC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006E02 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006E04 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006E0A 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006E0C                            
00006E0C                            MLB_UsePal0E:
00006E0C 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006E0E                            
00006E0E                            MLB_NormalPal:
00006E0E 6100 B2EC                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006E12 245F                       		movea.l	(sp)+,a2
00006E14 584A                       		addq.w	#4,a2
00006E16 7000                       		moveq	#0,d0
00006E18 1012                       		move.b	(a2),d0
00006E1A 6700                       		beq.s	locret_6D10
00006E1C 6100 A762                  		bsr.w	LoadPLC		; load pattern load cues
00006E20                            
00006E20                            locret_6D10:
00006E20 4E75                       		rts	
00006E22                            ; End of function MainLoadBlockLoad
00006E22                            
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            ; Level	layout loading subroutine
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            
00006E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E22                            
00006E22                            
00006E22                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006E22 47F8 A400                  		lea	($FFFFA400).w,a3
00006E26 323C 01FF                  		move.w	#$1FF,d1
00006E2A 7000                       		moveq	#0,d0
00006E2C                            
00006E2C                            LevLoad_ClrRam:
00006E2C 26C0                       		move.l	d0,(a3)+
00006E2E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006E32                            
00006E32 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006E36 7200                       		moveq	#0,d1
00006E38 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006E3C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006E40 7202                       		moveq	#2,d1
00006E42                            ; End of function LevelLayoutLoad
00006E42                            
00006E42                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006E42                            
00006E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E42                            
00006E42                            
00006E42                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006E42 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E46 ED08                       		lsl.b	#6,d0
00006E48 EA48                       		lsr.w	#5,d0
00006E4A 3400                       		move.w	d0,d2
00006E4C D040                       		add.w	d0,d0
00006E4E D042                       		add.w	d2,d0
00006E50 D041                       		add.w	d1,d0
00006E52 43F9 0000 0000             		lea	(Level_Index).l,a1
00006E58 3031 0000                  		move.w	(a1,d0.w),d0
00006E5C 43F1 0000                  		lea	(a1,d0.w),a1
00006E60 7200                       		moveq	#0,d1
00006E62 3401                       		move.w	d1,d2
00006E64 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006E66 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006E68                            
00006E68                            LevLoad_NumRows:
00006E68 3001                       		move.w	d1,d0
00006E6A 204B                       		movea.l	a3,a0
00006E6C                            
00006E6C                            LevLoad_Row:
00006E6C 10D9                       		move.b	(a1)+,(a0)+
00006E6E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006E72 47EB 0080                  		lea	$80(a3),a3	; do next row
00006E76 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006E7A 4E75                       		rts	
00006E7C                            ; End of function LevelLayoutLoad2
00006E7C                            
00006E7C                            ; ---------------------------------------------------------------------------
00006E7C                            ; Dynamic screen resize	loading	subroutine
00006E7C                            ; ---------------------------------------------------------------------------
00006E7C                            
00006E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7C                            
00006E7C                            
00006E7C                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006E7C 7000                       		moveq	#0,d0
00006E7E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006E82 D040                       		add.w	d0,d0
00006E84 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006E88 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006E8C 7202                       		moveq	#2,d1
00006E8E 3038 F726                  		move.w	($FFFFF726).w,d0
00006E92 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006E96 6700                       		beq.s	locret_6DAA
00006E98 6400                       		bcc.s	loc_6DAC
00006E9A 4441                       		neg.w	d1
00006E9C 3038 F704                  		move.w	($FFFFF704).w,d0
00006EA0 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006EA4 6300                       		bls.s	loc_6DA0
00006EA6 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006EAA 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006EB0                            
00006EB0                            loc_6DA0:
00006EB0 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006EB4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EBA                            
00006EBA                            locret_6DAA:
00006EBA 4E75                       		rts	
00006EBC                            ; ===========================================================================
00006EBC                            
00006EBC                            loc_6DAC:				; XREF: DynScrResizeLoad
00006EBC 3038 F704                  		move.w	($FFFFF704).w,d0
00006EC0 5040                       		addq.w	#8,d0
00006EC2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EC6 6500                       		bcs.s	loc_6DC4
00006EC8 0838 0001 D022             		btst	#1,($FFFFD022).w
00006ECE 6700                       		beq.s	loc_6DC4
00006ED0 D241                       		add.w	d1,d1
00006ED2 D241                       		add.w	d1,d1
00006ED4                            
00006ED4                            loc_6DC4:
00006ED4 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006ED8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EDE 4E75                       		rts	
00006EE0                            ; End of function DynScrResizeLoad
00006EE0                            
00006EE0                            ; ===========================================================================
00006EE0                            ; ---------------------------------------------------------------------------
00006EE0                            ; Offset index for dynamic screen resizing
00006EE0                            ; ---------------------------------------------------------------------------
00006EE0 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006EE4 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006EE8 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006EEC 0000                       		dc.w Resize_Ending-Resize_Index
00006EEE                            ; ===========================================================================
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            ; Green	Hill Zone dynamic screen resizing
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            
00006EEE                            Resize_GHZ:				; XREF: Resize_Index
00006EEE 7000                       		moveq	#0,d0
00006EF0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EF4 D040                       		add.w	d0,d0
00006EF6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006EFA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006EFE                            ; ===========================================================================
00006EFE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006F00 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006F02 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006F04                            ; ===========================================================================
00006F04                            
00006F04                            Resize_GHZ1:
00006F04 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006F0A 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006F10 6500                       		bcs.s	locret_6E08	; if not, branch
00006F12 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006F18                            
00006F18                            locret_6E08:
00006F18 4E75                       		rts	
00006F1A                            ; ===========================================================================
00006F1A                            
00006F1A                            Resize_GHZ2:
00006F1A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F20 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006F26 6500                       		bcs.s	locret_6E3A
00006F28 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006F2E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006F34 6500                       		bcs.s	locret_6E3A
00006F36 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F3C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006F42 6500                       		bcs.s	locret_6E3A
00006F44 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F4A                            
00006F4A                            locret_6E3A:
00006F4A 4E75                       		rts	
00006F4C                            ; ===========================================================================
00006F4C                            
00006F4C                            Resize_GHZ3:
00006F4C 7000                       		moveq	#0,d0
00006F4E 1038 F742                  		move.b	($FFFFF742).w,d0
00006F52 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006F56 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006F5A                            ; ===========================================================================
00006F5A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006F5C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006F5E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006F60                            ; ===========================================================================
00006F60                            
00006F60                            Resize_GHZ3main:
00006F60 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F66 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006F6C 6500                       		bcs.s	locret_6E96
00006F6E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006F74 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006F7A 6500                       		bcs.s	locret_6E96
00006F7C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006F82 6500                       		bcs.s	loc_6E98
00006F84 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F8A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006F90 6400                       		bcc.s	loc_6E8E
00006F92 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006F98 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006F9E                            
00006F9E                            loc_6E8E:
00006F9E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006FA4 6400                       		bcc.s	loc_6E98
00006FA6                            
00006FA6                            locret_6E96:
00006FA6 4E75                       		rts	
00006FA8                            ; ===========================================================================
00006FA8                            
00006FA8                            loc_6E98:
00006FA8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006FAE 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FB2 4E75                       		rts	
00006FB4                            ; ===========================================================================
00006FB4                            
00006FB4                            Resize_GHZ3boss:
00006FB4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006FBA 6400                       		bcc.s	loc_6EB0
00006FBC 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FC0                            
00006FC0                            loc_6EB0:
00006FC0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006FC6 6500                       		bcs.s	locret_6EE8
00006FC8 6100 0000                  		bsr.w	SingleObjLoad
00006FCC 6600                       		bne.s	loc_6ED0
00006FCE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006FD2 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006FD8 337C 0280 000C             		move.w	#$280,$C(a1)
00006FDE                            
00006FDE                            loc_6ED0:
00006FDE 303C 008C                  		move.w	#$8C,d0
00006FE2 6100 A3B2                  		bsr.w	PlaySound	; play boss music
00006FE6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006FEC 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FF0 7011                       		moveq	#$11,d0
00006FF2 6000 A58C                  		bra.w	LoadPLC		; load boss patterns
00006FF6                            ; ===========================================================================
00006FF6                            
00006FF6                            locret_6EE8:
00006FF6 4E75                       		rts	
00006FF8                            ; ===========================================================================
00006FF8                            
00006FF8                            Resize_GHZ3end:
00006FF8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006FFE 4E75                       		rts	
00007000                            ; ===========================================================================
00007000                            ; ---------------------------------------------------------------------------
00007000                            ; Labyrinth Zone dynamic screen	resizing
00007000                            ; ---------------------------------------------------------------------------
00007000                            
00007000                            Resize_LZ:				; XREF: Resize_Index
00007000 7000                       		moveq	#0,d0
00007002 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007006 D040                       		add.w	d0,d0
00007008 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000700C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007010                            ; ===========================================================================
00007010 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007012 0000                       		dc.w Resize_LZ12-Resize_LZx
00007014 0000                       		dc.w Resize_LZ3-Resize_LZx
00007016 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007018                            ; ===========================================================================
00007018                            
00007018                            Resize_LZ12:
00007018 4E75                       		rts	
0000701A                            ; ===========================================================================
0000701A                            
0000701A                            Resize_LZ3:
0000701A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000701E 6700                       		beq.s	loc_6F28	; if not, branch
00007020 43F8 A506                  		lea	($FFFFA506).w,a1
00007024 0C11 0007                  		cmpi.b	#7,(a1)
00007028 6700                       		beq.s	loc_6F28
0000702A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000702E 303C 00B7                  		move.w	#$B7,d0
00007032 6100 A368                  		bsr.w	PlaySound_Special ; play rumbling sound
00007036                            
00007036                            loc_6F28:
00007036 4A38 F742                  		tst.b	($FFFFF742).w
0000703A 6600                       		bne.s	locret_6F64
0000703C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007042 6500                       		bcs.s	locret_6F62
00007044 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000704A 6400                       		bcc.s	locret_6F62
0000704C 6100 0000                  		bsr.w	SingleObjLoad
00007050 6600                       		bne.s	loc_6F4A
00007052 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007056                            
00007056                            loc_6F4A:
00007056 303C 008C                  		move.w	#$8C,d0
0000705A 6100 A33A                  		bsr.w	PlaySound	; play boss music
0000705E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007064 5438 F742                  		addq.b	#2,($FFFFF742).w
00007068 7011                       		moveq	#$11,d0
0000706A 6000 A514                  		bra.w	LoadPLC		; load boss patterns
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            locret_6F62:
0000706E 4E75                       		rts	
00007070                            ; ===========================================================================
00007070                            
00007070                            locret_6F64:
00007070 4E75                       		rts	
00007072                            ; ===========================================================================
00007072                            
00007072                            Resize_SBZ3:
00007072 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007078 6500                       		bcs.s	locret_6F8C
0000707A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007080 6400                       		bcc.s	locret_6F8C	; if not, branch
00007082 4238 FE30                  		clr.b	($FFFFFE30).w
00007086 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000708C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007092 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007098                            
00007098                            locret_6F8C:
00007098 4E75                       		rts	
0000709A                            ; ===========================================================================
0000709A                            ; ---------------------------------------------------------------------------
0000709A                            ; Marble Zone dynamic screen resizing
0000709A                            ; ---------------------------------------------------------------------------
0000709A                            
0000709A                            Resize_MZ:				; XREF: Resize_Index
0000709A 7000                       		moveq	#0,d0
0000709C 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070A0 D040                       		add.w	d0,d0
000070A2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000070A6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000070AA                            ; ===========================================================================
000070AA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000070AC 0000                       		dc.w Resize_MZ2-Resize_MZx
000070AE 0000                       		dc.w Resize_MZ3-Resize_MZx
000070B0                            ; ===========================================================================
000070B0                            
000070B0                            Resize_MZ1:
000070B0 7000                       		moveq	#0,d0
000070B2 1038 F742                  		move.b	($FFFFF742).w,d0
000070B6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000070BA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000070BE                            ; ===========================================================================
000070BE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000070C0 0000                       		dc.w loc_6FEA-off_6FB2
000070C2 0000                       		dc.w loc_702E-off_6FB2
000070C4 0000                       		dc.w loc_7050-off_6FB2
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            loc_6FBA:
000070C6 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000070CC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000070D2 6500                       		bcs.s	locret_6FE8
000070D4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000070DA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000070E0 6500                       		bcs.s	locret_6FE8
000070E2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000070E8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070EE 6500                       		bcs.s	locret_6FE8
000070F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000070F4                            
000070F4                            locret_6FE8:
000070F4 4E75                       		rts	
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            loc_6FEA:
000070F6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070FC 6400                       		bcc.s	loc_6FF8
000070FE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            loc_6FF8:
00007104 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000710A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007110 6400                       		bcc.s	locret_702C
00007112 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007118 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000711E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007124 6400                       		bcc.s	locret_702C
00007126 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000712C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007132 6500                       		bcs.s	locret_702C
00007134 5438 F742                  		addq.b	#2,($FFFFF742).w
00007138                            
00007138                            locret_702C:
00007138 4E75                       		rts	
0000713A                            ; ===========================================================================
0000713A                            
0000713A                            loc_702E:
0000713A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007140 6400                       		bcc.s	loc_703C
00007142 5538 F742                  		subq.b	#2,($FFFFF742).w
00007146 4E75                       		rts	
00007148                            ; ===========================================================================
00007148                            
00007148                            loc_703C:
00007148 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000714E 6500                       		bcs.s	locret_704E
00007150 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007156 5438 F742                  		addq.b	#2,($FFFFF742).w
0000715A                            
0000715A                            locret_704E:
0000715A 4E75                       		rts	
0000715C                            ; ===========================================================================
0000715C                            
0000715C                            loc_7050:
0000715C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007162 6500                       		bcs.s	locret_7072
00007164 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000716A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007170 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007176 6500                       		bcs.s	locret_7072
00007178 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000717E                            
0000717E                            locret_7072:
0000717E 4E75                       		rts	
00007180                            ; ===========================================================================
00007180                            
00007180                            Resize_MZ2:
00007180 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007186 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000718C 6500                       		bcs.s	locret_7088
0000718E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007194                            
00007194                            locret_7088:
00007194 4E75                       		rts	
00007196                            ; ===========================================================================
00007196                            
00007196                            Resize_MZ3:
00007196 7000                       		moveq	#0,d0
00007198 1038 F742                  		move.b	($FFFFF742).w,d0
0000719C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000071A0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000071A4                            ; ===========================================================================
000071A4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000071A6 0000                       		dc.w Resize_MZ3end-off_7098
000071A8                            ; ===========================================================================
000071A8                            
000071A8                            Resize_MZ3boss:
000071A8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000071AE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000071B4 6500                       		bcs.s	locret_70E8
000071B6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000071BC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000071C2 6500                       		bcs.s	locret_70E8
000071C4 6100 0000                  		bsr.w	SingleObjLoad
000071C8 6600                       		bne.s	loc_70D0
000071CA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000071CE 337C 19F0 0008             		move.w	#$19F0,8(a1)
000071D4 337C 022C 000C             		move.w	#$22C,$C(a1)
000071DA                            
000071DA                            loc_70D0:
000071DA 303C 008C                  		move.w	#$8C,d0
000071DE 6100 A1B6                  		bsr.w	PlaySound	; play boss music
000071E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000071EC 7011                       		moveq	#$11,d0
000071EE 6000 A390                  		bra.w	LoadPLC		; load boss patterns
000071F2                            ; ===========================================================================
000071F2                            
000071F2                            locret_70E8:
000071F2 4E75                       		rts	
000071F4                            ; ===========================================================================
000071F4                            
000071F4                            Resize_MZ3end:
000071F4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071FA 4E75                       		rts	
000071FC                            ; ===========================================================================
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            ; Star Light Zone dynamic screen resizing
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            
000071FC                            Resize_SLZ:				; XREF: Resize_Index
000071FC 7000                       		moveq	#0,d0
000071FE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007202 D040                       		add.w	d0,d0
00007204 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007208 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000720C                            ; ===========================================================================
0000720C 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000720E 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007210 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007212                            ; ===========================================================================
00007212                            
00007212                            Resize_SLZ12:
00007212 4E75                       		rts	
00007214                            ; ===========================================================================
00007214                            
00007214                            Resize_SLZ3:
00007214 7000                       		moveq	#0,d0
00007216 1038 F742                  		move.b	($FFFFF742).w,d0
0000721A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000721E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007222                            ; ===========================================================================
00007222 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007224 0000                       		dc.w Resize_SLZ3boss-off_7118
00007226 0000                       		dc.w Resize_SLZ3end-off_7118
00007228                            ; ===========================================================================
00007228                            
00007228                            Resize_SLZ3main:
00007228 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000722E 6500                       		bcs.s	locret_7130
00007230 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007236 5438 F742                  		addq.b	#2,($FFFFF742).w
0000723A                            
0000723A                            locret_7130:
0000723A 4E75                       		rts	
0000723C                            ; ===========================================================================
0000723C                            
0000723C                            Resize_SLZ3boss:
0000723C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007242 6500                       		bcs.s	locret_715C
00007244 6100 0000                  		bsr.w	SingleObjLoad
00007248 6600                       		bne.s	loc_7144
0000724A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000724E                            
0000724E                            loc_7144:
0000724E 303C 008C                  		move.w	#$8C,d0
00007252 6100 A142                  		bsr.w	PlaySound	; play boss music
00007256 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000725C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007260 7011                       		moveq	#$11,d0
00007262 6000 A31C                  		bra.w	LoadPLC		; load boss patterns
00007266                            ; ===========================================================================
00007266                            
00007266                            locret_715C:
00007266 4E75                       		rts	
00007268                            ; ===========================================================================
00007268                            
00007268                            Resize_SLZ3end:
00007268 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000726E 4E75                       		rts
00007270 4E75                       		rts
00007272                            ; ===========================================================================
00007272                            ; ---------------------------------------------------------------------------
00007272                            ; Spring Yard Zone dynamic screen resizing
00007272                            ; ---------------------------------------------------------------------------
00007272                            
00007272                            Resize_SYZ:				; XREF: Resize_Index
00007272 7000                       		moveq	#0,d0
00007274 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007278 D040                       		add.w	d0,d0
0000727A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000727E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007282                            ; ===========================================================================
00007282 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007284 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007286 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007288                            ; ===========================================================================
00007288                            
00007288                            Resize_SYZ1:
00007288 4E75                       		rts	
0000728A                            ; ===========================================================================
0000728A                            
0000728A                            Resize_SYZ2:
0000728A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007290 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007296 6500                       		bcs.s	locret_71A2
00007298 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000729E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000072A4 6500                       		bcs.s	locret_71A2
000072A6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000072AC                            
000072AC                            locret_71A2:
000072AC 4E75                       		rts	
000072AE                            ; ===========================================================================
000072AE                            
000072AE                            Resize_SYZ3:
000072AE 7000                       		moveq	#0,d0
000072B0 1038 F742                  		move.b	($FFFFF742).w,d0
000072B4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000072B8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000072BC                            ; ===========================================================================
000072BC 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000072BE 0000                       		dc.w Resize_SYZ3boss-off_71B2
000072C0 0000                       		dc.w Resize_SYZ3end-off_71B2
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_SYZ3main:
000072C2 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000072C8 6500                       		bcs.s	locret_71CE
000072CA 6100 0000                  		bsr.w	SingleObjLoad
000072CE 6600                       		bne.s	locret_71CE
000072D0 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000072D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000072D8                            
000072D8                            locret_71CE:
000072D8 4E75                       		rts	
000072DA                            ; ===========================================================================
000072DA                            
000072DA                            Resize_SYZ3boss:
000072DA 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000072E0 6500                       		bcs.s	locret_7200
000072E2 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000072E8 6100 0000                  		bsr.w	SingleObjLoad
000072EC 6600                       		bne.s	loc_71EC
000072EE 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000072F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000072F6                            
000072F6                            loc_71EC:
000072F6 303C 008C                  		move.w	#$8C,d0
000072FA 6100 A09A                  		bsr.w	PlaySound	; play boss music
000072FE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007304 7011                       		moveq	#$11,d0
00007306 6000 A278                  		bra.w	LoadPLC		; load boss patterns
0000730A                            ; ===========================================================================
0000730A                            
0000730A                            locret_7200:
0000730A 4E75                       		rts	
0000730C                            ; ===========================================================================
0000730C                            
0000730C                            Resize_SYZ3end:
0000730C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007312 4E75                       		rts	
00007314                            ; ===========================================================================
00007314                            ; ---------------------------------------------------------------------------
00007314                            ; Scrap	Brain Zone dynamic screen resizing
00007314                            ; ---------------------------------------------------------------------------
00007314                            
00007314                            Resize_SBZ:				; XREF: Resize_Index
00007314 7000                       		moveq	#0,d0
00007316 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000731A D040                       		add.w	d0,d0
0000731C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007320 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007324                            ; ===========================================================================
00007324 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007326 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007328 0000                       		dc.w Resize_FZ-Resize_SBZx
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            Resize_SBZ1:
0000732A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007330 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007336 6500                       		bcs.s	locret_7242
00007338 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000733E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007344 6500                       		bcs.s	locret_7242
00007346 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000734C                            
0000734C                            locret_7242:
0000734C 4E75                       		rts	
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            Resize_SBZ2:
0000734E 7000                       		moveq	#0,d0
00007350 1038 F742                  		move.b	($FFFFF742).w,d0
00007354 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000735E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007360 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007362 0000                       		dc.w Resize_SBZ2end-off_7252
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_SBZ2main:
00007364 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000736A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007370 6500                       		bcs.s	locret_727A
00007372 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007378 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000737E 6500                       		bcs.s	locret_727A
00007380 5438 F742                  		addq.b	#2,($FFFFF742).w
00007384                            
00007384                            locret_727A:
00007384 4E75                       		rts	
00007386                            ; ===========================================================================
00007386                            
00007386                            Resize_SBZ2boss:
00007386 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000738C 6500                       		bcs.s	locret_7298
0000738E 6100 0000                  		bsr.w	SingleObjLoad
00007392 6600                       		bne.s	locret_7298
00007394 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000739C 701E                       		moveq	#$1E,d0
0000739E 6000 A1E0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            locret_7298:
000073A2 4E75                       		rts	
000073A4                            ; ===========================================================================
000073A4                            
000073A4                            Resize_SBZ2boss2:
000073A4 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000073AA 6500                       		bcs.s	loc_72B6
000073AC 6100 0000                  		bsr.w	SingleObjLoad
000073B0 6600                       		bne.s	loc_72B0
000073B2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000073B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000073BA                            
000073BA                            loc_72B0:
000073BA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073C0                            
000073C0                            loc_72B6:
000073C0 6000                       		bra.s	loc_72C2
000073C2                            ; ===========================================================================
000073C2                            
000073C2                            Resize_SBZ2end:
000073C2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000073C8 6500                       		bcs.s	loc_72C2
000073CA 4E75                       		rts	
000073CC                            ; ===========================================================================
000073CC                            
000073CC                            loc_72C2:
000073CC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073D2 4E75                       		rts	
000073D4                            ; ===========================================================================
000073D4                            
000073D4                            Resize_FZ:
000073D4 7000                       		moveq	#0,d0
000073D6 1038 F742                  		move.b	($FFFFF742).w,d0
000073DA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000073DE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000073E2                            ; ===========================================================================
000073E2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000073E6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000073EA 0000                       		dc.w Resize_FZend2-off_72D8
000073EC                            ; ===========================================================================
000073EC                            
000073EC                            Resize_FZmain:
000073EC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000073F2 6500                       		bcs.s	loc_72F4
000073F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000073F8 701F                       		moveq	#$1F,d0
000073FA 6100 A184                  		bsr.w	LoadPLC		; load FZ boss patterns
000073FE                            
000073FE                            loc_72F4:
000073FE 60CC                       		bra.s	loc_72C2
00007400                            ; ===========================================================================
00007400                            
00007400                            Resize_FZboss:
00007400 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007406 6500                       		bcs.s	loc_7312
00007408 6100 0000                  		bsr.w	SingleObjLoad
0000740C 6600                       		bne.s	loc_7312
0000740E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007412 5438 F742                  		addq.b	#2,($FFFFF742).w
00007416 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000741C                            
0000741C                            loc_7312:
0000741C 60AE                       		bra.s	loc_72C2
0000741E                            ; ===========================================================================
0000741E                            
0000741E                            Resize_FZend:
0000741E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007424 6500                       		bcs.s	loc_7320
00007426 5438 F742                  		addq.b	#2,($FFFFF742).w
0000742A                            
0000742A                            loc_7320:
0000742A 60A0                       		bra.s	loc_72C2
0000742C                            ; ===========================================================================
0000742C                            
0000742C                            locret_7322:
0000742C 4E75                       		rts	
0000742E                            ; ===========================================================================
0000742E                            
0000742E                            Resize_FZend2:
0000742E 609C                       		bra.s	loc_72C2
00007430                            ; ===========================================================================
00007430                            ; ---------------------------------------------------------------------------
00007430                            ; Ending sequence dynamic screen resizing (empty)
00007430                            ; ---------------------------------------------------------------------------
00007430                            
00007430                            Resize_Ending:				; XREF: Resize_Index
00007430 4E75                       		rts	
00007432                            ; ===========================================================================
00007432                            ; ---------------------------------------------------------------------------
00007432                            ; Object 11 - GHZ bridge
00007432                            ; ---------------------------------------------------------------------------
00007432                            
00007432                            Obj11:					; XREF: Obj_Index
00007432 7000                       		moveq	#0,d0
00007434 1028 0024                  		move.b	$24(a0),d0
00007438 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000743C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007440                            ; ===========================================================================
00007440 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007444 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007448 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000744C                            ; ===========================================================================
0000744C                            
0000744C                            Obj11_Main:				; XREF: Obj11_Index
0000744C 5428 0024                  		addq.b	#2,$24(a0)
00007450 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007458 317C 438E 0002             		move.w	#$438E,2(a0)
0000745E 117C 0004 0001             		move.b	#4,1(a0)
00007464 117C 0003 0018             		move.b	#3,$18(a0)
0000746A 117C 0080 0019             		move.b	#$80,$19(a0)
00007470 3428 000C                  		move.w	$C(a0),d2
00007474 3628 0008                  		move.w	8(a0),d3
00007478 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000747A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000747E 7200                       		moveq	#0,d1
00007480 1212                       		move.b	(a2),d1		; copy a2 to d1
00007482 14FC 0000                  		move.b	#0,(a2)+
00007486 3001                       		move.w	d1,d0
00007488 E248                       		lsr.w	#1,d0
0000748A E948                       		lsl.w	#4,d0
0000748C 9640                       		sub.w	d0,d3
0000748E 5501                       		subq.b	#2,d1
00007490 6500                       		bcs.s	Obj11_Action
00007492                            
00007492                            Obj11_MakeBdg:
00007492 6100 0000                  		bsr.w	SingleObjLoad
00007496 6600                       		bne.s	Obj11_Action
00007498 5228 0028                  		addq.b	#1,$28(a0)
0000749C B668 0008                  		cmp.w	8(a0),d3
000074A0 6600                       		bne.s	loc_73B8
000074A2 0643 0010                  		addi.w	#$10,d3
000074A6 3142 000C                  		move.w	d2,$C(a0)
000074AA 3142 003C                  		move.w	d2,$3C(a0)
000074AE 3A08                       		move.w	a0,d5
000074B0 0445 D000                  		subi.w	#-$3000,d5
000074B4 EC4D                       		lsr.w	#6,d5
000074B6 0245 007F                  		andi.w	#$7F,d5
000074BA 14C5                       		move.b	d5,(a2)+
000074BC 5228 0028                  		addq.b	#1,$28(a0)
000074C0                            
000074C0                            loc_73B8:				; XREF: ROM:00007398j
000074C0 3A09                       		move.w	a1,d5
000074C2 0445 D000                  		subi.w	#-$3000,d5
000074C6 EC4D                       		lsr.w	#6,d5
000074C8 0245 007F                  		andi.w	#$7F,d5
000074CC 14C5                       		move.b	d5,(a2)+
000074CE 137C 000A 0024             		move.b	#$A,$24(a1)
000074D4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000074D6 3342 000C                  		move.w	d2,$C(a1)
000074DA 3342 003C                  		move.w	d2,$3C(a1)
000074DE 3343 0008                  		move.w	d3,8(a1)
000074E2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000074EA 337C 438E 0002             		move.w	#$438E,2(a1)
000074F0 137C 0004 0001             		move.b	#4,1(a1)
000074F6 137C 0003 0018             		move.b	#3,$18(a1)
000074FC 137C 0008 0019             		move.b	#8,$19(a1)
00007502 0643 0010                  		addi.w	#$10,d3
00007506 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000750A                            
0000750A                            Obj11_Action:				; XREF: Obj11_Index
0000750A 6100                       		bsr.s	Obj11_Solid
0000750C 4A28 003E                  		tst.b	$3E(a0)
00007510 6700                       		beq.s	Obj11_Display
00007512 5928 003E                  		subq.b	#4,$3E(a0)
00007516 6100 0000                  		bsr.w	Obj11_Bend
0000751A                            
0000751A                            Obj11_Display:
0000751A 6100 0000                  		bsr.w	DisplaySprite
0000751E 6000 0000                  		bra.w	Obj11_ChkDel
00007522                            
00007522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007522                            
00007522                            
00007522                            Obj11_Solid:				; XREF: Obj11_Action
00007522 7200                       		moveq	#0,d1
00007524 1228 0028                  		move.b	$28(a0),d1
00007528 E749                       		lsl.w	#3,d1
0000752A 3401                       		move.w	d1,d2
0000752C 5041                       		addq.w	#8,d1
0000752E D442                       		add.w	d2,d2
00007530 43F8 D000                  		lea	($FFFFD000).w,a1
00007534 4A69 0012                  		tst.w	$12(a1)
00007538 6B00 0000                  		bmi.w	locret_751E
0000753C 3029 0008                  		move.w	8(a1),d0
00007540 9068 0008                  		sub.w	8(a0),d0
00007544 D041                       		add.w	d1,d0
00007546 6B00 0000                  		bmi.w	locret_751E
0000754A B042                       		cmp.w	d2,d0
0000754C 6400 0000                  		bcc.w	locret_751E
00007550 6000                       		bra.s	Platform2
00007552                            ; End of function Obj11_Solid
00007552                            
00007552                            ; ---------------------------------------------------------------------------
00007552                            ; Platform subroutine
00007552                            ; ---------------------------------------------------------------------------
00007552                            
00007552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007552                            
00007552                            
00007552                            PlatformObject:
00007552 43F8 D000                  		lea	($FFFFD000).w,a1
00007556 4A69 0012                  		tst.w	$12(a1)
0000755A 6B00 0000                  		bmi.w	locret_751E
0000755E 3029 0008                  		move.w	8(a1),d0
00007562 9068 0008                  		sub.w	8(a0),d0
00007566 D041                       		add.w	d1,d0
00007568 6B00 0000                  		bmi.w	locret_751E
0000756C D241                       		add.w	d1,d1
0000756E B041                       		cmp.w	d1,d0
00007570 6400 0000                  		bcc.w	locret_751E
00007574                            
00007574                            Platform2:
00007574 3028 000C                  		move.w	$C(a0),d0
00007578 5140                       		subq.w	#8,d0
0000757A                            
0000757A                            Platform3:
0000757A 3429 000C                  		move.w	$C(a1),d2
0000757E 1229 0016                  		move.b	$16(a1),d1
00007582 4881                       		ext.w	d1
00007584 D242                       		add.w	d2,d1
00007586 5841                       		addq.w	#4,d1
00007588 9041                       		sub.w	d1,d0
0000758A 6200 0000                  		bhi.w	locret_751E
0000758E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007592 6500 0000                  		bcs.w	locret_751E
00007596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000759A 6B00 0000                  		bmi.w	locret_751E
0000759E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000075A4 6400 0000                  		bcc.w	locret_751E
000075A8 D440                       		add.w	d0,d2
000075AA 5642                       		addq.w	#3,d2
000075AC 3342 000C                  		move.w	d2,$C(a1)
000075B0 5428 0024                  		addq.b	#2,$24(a0)
000075B4                            
000075B4                            loc_74AE:
000075B4 0829 0003 0022             		btst	#3,$22(a1)
000075BA 6700                       		beq.s	loc_74DC
000075BC 7000                       		moveq	#0,d0
000075BE 1029 003D                  		move.b	$3D(a1),d0
000075C2 ED48                       		lsl.w	#6,d0
000075C4 0680 00FF D000             		addi.l	#$FFD000,d0
000075CA 2440                       		movea.l	d0,a2
000075CC 08AA 0003 0022             		bclr	#3,$22(a2)
000075D2 422A 0025                  		clr.b	$25(a2)
000075D6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000075DC 6600                       		bne.s	loc_74DC
000075DE 552A 0024                  		subq.b	#2,$24(a2)
000075E2                            
000075E2                            loc_74DC:
000075E2 3008                       		move.w	a0,d0
000075E4 0440 D000                  		subi.w	#-$3000,d0
000075E8 EC48                       		lsr.w	#6,d0
000075EA 0240 007F                  		andi.w	#$7F,d0
000075EE 1340 003D                  		move.b	d0,$3D(a1)
000075F2 137C 0000 0026             		move.b	#0,$26(a1)
000075F8 337C 0000 0012             		move.w	#0,$12(a1)
000075FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007604 0829 0001 0022             		btst	#1,$22(a1)
0000760A 6700                       		beq.s	loc_7512
0000760C 2F08                       		move.l	a0,-(sp)
0000760E 2049                       		movea.l	a1,a0
00007610 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007616 205F                       		movea.l	(sp)+,a0
00007618                            
00007618                            loc_7512:
00007618 08E9 0003 0022             		bset	#3,$22(a1)
0000761E 08E8 0003 0022             		bset	#3,$22(a0)
00007624                            
00007624                            locret_751E:
00007624 4E75                       		rts	
00007626                            ; End of function PlatformObject
00007626                            
00007626                            ; ---------------------------------------------------------------------------
00007626                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007626                            ; ---------------------------------------------------------------------------
00007626                            
00007626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007626                            
00007626                            
00007626                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007626 43F8 D000                  		lea	($FFFFD000).w,a1
0000762A 4A69 0012                  		tst.w	$12(a1)
0000762E 6B00 FFF4                  		bmi.w	locret_751E
00007632 3029 0008                  		move.w	8(a1),d0
00007636 9068 0008                  		sub.w	8(a0),d0
0000763A D041                       		add.w	d1,d0
0000763C 6BE6                       		bmi.s	locret_751E
0000763E D241                       		add.w	d1,d1
00007640 B041                       		cmp.w	d1,d0
00007642 64E0                       		bcc.s	locret_751E
00007644 0828 0000 0001             		btst	#0,1(a0)
0000764A 6700                       		beq.s	loc_754A
0000764C 4640                       		not.w	d0
0000764E D041                       		add.w	d1,d0
00007650                            
00007650                            loc_754A:
00007650 E248                       		lsr.w	#1,d0
00007652 7600                       		moveq	#0,d3
00007654 1632 0000                  		move.b	(a2,d0.w),d3
00007658 3028 000C                  		move.w	$C(a0),d0
0000765C 9043                       		sub.w	d3,d0
0000765E 6000 FF1A                  		bra.w	Platform3
00007662                            ; End of function SlopeObject
00007662                            
00007662                            
00007662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007662                            
00007662                            
00007662                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007662 43F8 D000                  		lea	($FFFFD000).w,a1
00007666 4A69 0012                  		tst.w	$12(a1)
0000766A 6B00 FFB8                  		bmi.w	locret_751E
0000766E 3029 0008                  		move.w	8(a1),d0
00007672 9068 0008                  		sub.w	8(a0),d0
00007676 D041                       		add.w	d1,d0
00007678 6B00 FFAA                  		bmi.w	locret_751E
0000767C D241                       		add.w	d1,d1
0000767E B041                       		cmp.w	d1,d0
00007680 6400 FFA2                  		bcc.w	locret_751E
00007684 3028 000C                  		move.w	$C(a0),d0
00007688 9043                       		sub.w	d3,d0
0000768A 6000 FEEE                  		bra.w	Platform3
0000768E                            ; End of function Obj15_Solid
0000768E                            
0000768E                            ; ===========================================================================
0000768E                            
0000768E                            Obj11_Action2:				; XREF: Obj11_Index
0000768E 6100                       		bsr.s	Obj11_WalkOff
00007690 6100 0000                  		bsr.w	DisplaySprite
00007694 6000 0000                  		bra.w	Obj11_ChkDel
00007698                            
00007698                            ; ---------------------------------------------------------------------------
00007698                            ; Subroutine allowing Sonic to walk off a bridge
00007698                            ; ---------------------------------------------------------------------------
00007698                            
00007698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007698                            
00007698                            
00007698                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007698 7200                       		moveq	#0,d1
0000769A 1228 0028                  		move.b	$28(a0),d1
0000769E E749                       		lsl.w	#3,d1
000076A0 3401                       		move.w	d1,d2
000076A2 5041                       		addq.w	#8,d1
000076A4 6100                       		bsr.s	ExitPlatform2
000076A6 6400                       		bcc.s	locret_75BE
000076A8 E848                       		lsr.w	#4,d0
000076AA 1140 003F                  		move.b	d0,$3F(a0)
000076AE 1028 003E                  		move.b	$3E(a0),d0
000076B2 0C00 0040                  		cmpi.b	#$40,d0
000076B6 6700                       		beq.s	loc_75B6
000076B8 5828 003E                  		addq.b	#4,$3E(a0)
000076BC                            
000076BC                            loc_75B6:
000076BC 6100 0000                  		bsr.w	Obj11_Bend
000076C0 6100 0000                  		bsr.w	Obj11_MoveSonic
000076C4                            
000076C4                            locret_75BE:
000076C4 4E75                       		rts	
000076C6                            ; End of function Obj11_WalkOff
000076C6                            
000076C6                            ; ---------------------------------------------------------------------------
000076C6                            ; Subroutine allowing Sonic to walk or jump off	a platform
000076C6                            ; ---------------------------------------------------------------------------
000076C6                            
000076C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C6                            
000076C6                            
000076C6                            ExitPlatform:
000076C6 3401                       		move.w	d1,d2
000076C8                            
000076C8                            ExitPlatform2:
000076C8 D442                       		add.w	d2,d2
000076CA 43F8 D000                  		lea	($FFFFD000).w,a1
000076CE 0829 0001 0022             		btst	#1,$22(a1)
000076D4 6600                       		bne.s	loc_75E0
000076D6 3029 0008                  		move.w	8(a1),d0
000076DA 9068 0008                  		sub.w	8(a0),d0
000076DE D041                       		add.w	d1,d0
000076E0 6B00                       		bmi.s	loc_75E0
000076E2 B042                       		cmp.w	d2,d0
000076E4 6500                       		bcs.s	locret_75F2
000076E6                            
000076E6                            loc_75E0:
000076E6 08A9 0003 0022             		bclr	#3,$22(a1)
000076EC 117C 0002 0024             		move.b	#2,$24(a0)
000076F2 08A8 0003 0022             		bclr	#3,$22(a0)
000076F8                            
000076F8                            locret_75F2:
000076F8 4E75                       		rts	
000076FA                            ; End of function ExitPlatform
000076FA                            
000076FA                            
000076FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076FA                            
000076FA                            
000076FA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000076FA 7000                       		moveq	#0,d0
000076FC 1028 003F                  		move.b	$3F(a0),d0
00007700 1030 0029                  		move.b	$29(a0,d0.w),d0
00007704 ED48                       		lsl.w	#6,d0
00007706 0680 00FF D000             		addi.l	#$FFD000,d0
0000770C 2440                       		movea.l	d0,a2
0000770E 43F8 D000                  		lea	($FFFFD000).w,a1
00007712 302A 000C                  		move.w	$C(a2),d0
00007716 5140                       		subq.w	#8,d0
00007718 7200                       		moveq	#0,d1
0000771A 1229 0016                  		move.b	$16(a1),d1
0000771E 9041                       		sub.w	d1,d0
00007720 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007724 4E75                       		rts	
00007726                            ; End of function Obj11_MoveSonic
00007726                            
00007726                            
00007726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007726                            
00007726                            
00007726                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007726 1028 003E                  		move.b	$3E(a0),d0
0000772A 6100 B2AE                  		bsr.w	CalcSine
0000772E 3800                       		move.w	d0,d4
00007730 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007736 7000                       		moveq	#0,d0
00007738 1028 0028                  		move.b	$28(a0),d0
0000773C E948                       		lsl.w	#4,d0
0000773E 7600                       		moveq	#0,d3
00007740 1628 003F                  		move.b	$3F(a0),d3
00007744 3403                       		move.w	d3,d2
00007746 D640                       		add.w	d0,d3
00007748 7A00                       		moveq	#0,d5
0000774A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007750 1A35 3000                  		move.b	(a5,d3.w),d5
00007754 0243 000F                  		andi.w	#$F,d3
00007758 E94B                       		lsl.w	#4,d3
0000775A 47F4 3000                  		lea	(a4,d3.w),a3
0000775E 45E8 0029                  		lea	$29(a0),a2
00007762                            
00007762                            loc_765C:
00007762 7000                       		moveq	#0,d0
00007764 101A                       		move.b	(a2)+,d0
00007766 ED48                       		lsl.w	#6,d0
00007768 0680 00FF D000             		addi.l	#$FFD000,d0
0000776E 2240                       		movea.l	d0,a1
00007770 7000                       		moveq	#0,d0
00007772 101B                       		move.b	(a3)+,d0
00007774 5240                       		addq.w	#1,d0
00007776 C0C5                       		mulu.w	d5,d0
00007778 C0C4                       		mulu.w	d4,d0
0000777A 4840                       		swap	d0
0000777C D069 003C                  		add.w	$3C(a1),d0
00007780 3340 000C                  		move.w	d0,$C(a1)
00007784 51CA FFDC                  		dbf	d2,loc_765C
00007788 7000                       		moveq	#0,d0
0000778A 1028 0028                  		move.b	$28(a0),d0
0000778E 7600                       		moveq	#0,d3
00007790 1628 003F                  		move.b	$3F(a0),d3
00007794 5203                       		addq.b	#1,d3
00007796 9600                       		sub.b	d0,d3
00007798 4403                       		neg.b	d3
0000779A 6B00                       		bmi.s	locret_76CA
0000779C 3403                       		move.w	d3,d2
0000779E E94B                       		lsl.w	#4,d3
000077A0 47F4 3000                  		lea	(a4,d3.w),a3
000077A4 D6C2                       		adda.w	d2,a3
000077A6 5342                       		subq.w	#1,d2
000077A8 6500                       		bcs.s	locret_76CA
000077AA                            
000077AA                            loc_76A4:
000077AA 7000                       		moveq	#0,d0
000077AC 101A                       		move.b	(a2)+,d0
000077AE ED48                       		lsl.w	#6,d0
000077B0 0680 00FF D000             		addi.l	#$FFD000,d0
000077B6 2240                       		movea.l	d0,a1
000077B8 7000                       		moveq	#0,d0
000077BA 1023                       		move.b	-(a3),d0
000077BC 5240                       		addq.w	#1,d0
000077BE C0C5                       		mulu.w	d5,d0
000077C0 C0C4                       		mulu.w	d4,d0
000077C2 4840                       		swap	d0
000077C4 D069 003C                  		add.w	$3C(a1),d0
000077C8 3340 000C                  		move.w	d0,$C(a1)
000077CC 51CA FFDC                  		dbf	d2,loc_76A4
000077D0                            
000077D0                            locret_76CA:
000077D0 4E75                       		rts	
000077D2                            ; End of function Obj11_Bend
000077D2                            
000077D2                            ; ===========================================================================
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            ; GHZ bridge-bending data
000077D2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000078E2                            		even
000078E2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000079E2                            		even
000079E2                            
000079E2                            ; ===========================================================================
000079E2                            
000079E2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000079E2 3028 0008                  		move.w	8(a0),d0
000079E6 0240 FF80                  		andi.w	#$FF80,d0
000079EA 3238 F700                  		move.w	($FFFFF700).w,d1
000079EE 0441 0080                  		subi.w	#$80,d1
000079F2 0241 FF80                  		andi.w	#$FF80,d1
000079F6 9041                       		sub.w	d1,d0
000079F8 0C40 0280                  		cmpi.w	#$280,d0
000079FC 6200 0000                  		bhi.w	Obj11_DelAll
00007A00 4E75                       		rts	
00007A02                            ; ===========================================================================
00007A02                            
00007A02                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007A02 7400                       		moveq	#0,d2
00007A04 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007A08 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007A0A 5302                       		subq.b	#1,d2		; subtract 1
00007A0C 6500                       		bcs.s	Obj11_Delete
00007A0E                            
00007A0E                            Obj11_DelLoop:
00007A0E 7000                       		moveq	#0,d0
00007A10 101A                       		move.b	(a2)+,d0
00007A12 ED48                       		lsl.w	#6,d0
00007A14 0680 00FF D000             		addi.l	#$FFD000,d0
00007A1A 2240                       		movea.l	d0,a1
00007A1C B048                       		cmp.w	a0,d0
00007A1E 6700                       		beq.s	loc_791E
00007A20 6100 0000                  		bsr.w	DeleteObject2
00007A24                            
00007A24                            loc_791E:
00007A24 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007A28                            
00007A28                            Obj11_Delete:
00007A28 6100 0000                  		bsr.w	DeleteObject
00007A2C 4E75                       		rts	
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            Obj11_Delete2:				; XREF: Obj11_Index
00007A2E 6100 0000                  		bsr.w	DeleteObject
00007A32 4E75                       		rts	
00007A34                            ; ===========================================================================
00007A34                            
00007A34                            Obj11_Display2:				; XREF: Obj11_Index
00007A34 6100 0000                  		bsr.w	DisplaySprite
00007A38 4E75                       		rts	
00007A3A                            ; ===========================================================================
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            ; Sprite mappings - GHZ	bridge
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            Map_obj11:
00007A3A                            	include "_maps\obj11.asm"
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            ; Sprite mappings - GHZ	bridge
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007A3E 0000                       		dc.w byte_794B-Map_obj11
00007A40 01                         byte_793A:	dc.b 1
00007A41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007A46 02                         byte_7940:	dc.b 2
00007A47 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007A4C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007A51 01                         byte_794B:	dc.b 1
00007A52 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007A58 00                         		even
00007A58 00                         		even
00007A58                            
00007A58                            ; ===========================================================================
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007A58                            ;	    - spiked ball on a chain (SBZ)
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            
00007A58                            Obj15:					; XREF: Obj_Index
00007A58 7000                       		moveq	#0,d0
00007A5A 1028 0024                  		move.b	$24(a0),d0
00007A5E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007A62 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007A66                            ; ===========================================================================
00007A66 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007A6A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007A6E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007A72 0000                       		dc.w Obj15_Action-Obj15_Index
00007A74                            ; ===========================================================================
00007A74                            
00007A74                            Obj15_Main:				; XREF: Obj15_Index
00007A74 5428 0024                  		addq.b	#2,$24(a0)
00007A78 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007A80 317C 4380 0002             		move.w	#$4380,2(a0)
00007A86 117C 0004 0001             		move.b	#4,1(a0)
00007A8C 117C 0003 0018             		move.b	#3,$18(a0)
00007A92 117C 0018 0019             		move.b	#$18,$19(a0)
00007A98 117C 0008 0016             		move.b	#8,$16(a0)
00007A9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007AA4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007AAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007AB0 6600                       		bne.s	Obj15_NotSLZ
00007AB2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007ABA 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007AC0 117C 0020 0019             		move.b	#$20,$19(a0)
00007AC6 117C 0010 0016             		move.b	#$10,$16(a0)
00007ACC 117C 0099 0020             		move.b	#$99,$20(a0)
00007AD2                            
00007AD2                            Obj15_NotSLZ:
00007AD2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007AD8 6600                       		bne.s	Obj15_SetLength
00007ADA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007AE2 317C 0391 0002             		move.w	#$391,2(a0)
00007AE8 117C 0018 0019             		move.b	#$18,$19(a0)
00007AEE 117C 0018 0016             		move.b	#$18,$16(a0)
00007AF4 117C 0086 0020             		move.b	#$86,$20(a0)
00007AFA 117C 000C 0024             		move.b	#$C,$24(a0)
00007B00                            
00007B00                            Obj15_SetLength:
00007B00 1810                       		move.b	0(a0),d4
00007B02 7200                       		moveq	#0,d1
00007B04 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007B08 1212                       		move.b	(a2),d1		; move a2 to d1
00007B0A 3F01                       		move.w	d1,-(sp)
00007B0C 0241 000F                  		andi.w	#$F,d1
00007B10 14FC 0000                  		move.b	#0,(a2)+
00007B14 3601                       		move.w	d1,d3
00007B16 E94B                       		lsl.w	#4,d3
00007B18 5003                       		addq.b	#8,d3
00007B1A 1143 003C                  		move.b	d3,$3C(a0)
00007B1E 5103                       		subq.b	#8,d3
00007B20 4A28 001A                  		tst.b	$1A(a0)
00007B24 6700                       		beq.s	Obj15_MakeChain
00007B26 5003                       		addq.b	#8,d3
00007B28 5341                       		subq.w	#1,d1
00007B2A                            
00007B2A                            Obj15_MakeChain:
00007B2A 6100 0000                  		bsr.w	SingleObjLoad
00007B2E 6600                       		bne.s	loc_7A92
00007B30 5228 0028                  		addq.b	#1,$28(a0)
00007B34 3A09                       		move.w	a1,d5
00007B36 0445 D000                  		subi.w	#-$3000,d5
00007B3A EC4D                       		lsr.w	#6,d5
00007B3C 0245 007F                  		andi.w	#$7F,d5
00007B40 14C5                       		move.b	d5,(a2)+
00007B42 137C 000A 0024             		move.b	#$A,$24(a1)
00007B48 1284                       		move.b	d4,0(a1)	; load swinging	object
00007B4A 2368 0004 0004             		move.l	4(a0),4(a1)
00007B50 3368 0002 0002             		move.w	2(a0),2(a1)
00007B56 08A9 0006 0002             		bclr	#6,2(a1)
00007B5C 137C 0004 0001             		move.b	#4,1(a1)
00007B62 137C 0004 0018             		move.b	#4,$18(a1)
00007B68 137C 0008 0019             		move.b	#8,$19(a1)
00007B6E 137C 0001 001A             		move.b	#1,$1A(a1)
00007B74 1343 003C                  		move.b	d3,$3C(a1)
00007B78 0403 0010                  		subi.b	#$10,d3
00007B7C 6400                       		bcc.s	loc_7A8E
00007B7E 137C 0002 001A             		move.b	#2,$1A(a1)
00007B84 137C 0003 0018             		move.b	#3,$18(a1)
00007B8A 08E9 0006 0002             		bset	#6,2(a1)
00007B90                            
00007B90                            loc_7A8E:
00007B90 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007B94                            
00007B94                            loc_7A92:
00007B94 3A08                       		move.w	a0,d5
00007B96 0445 D000                  		subi.w	#-$3000,d5
00007B9A EC4D                       		lsr.w	#6,d5
00007B9C 0245 007F                  		andi.w	#$7F,d5
00007BA0 14C5                       		move.b	d5,(a2)+
00007BA2 317C 4080 0026             		move.w	#$4080,$26(a0)
00007BA8 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007BAE 321F                       		move.w	(sp)+,d1
00007BB0 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007BB4 6700                       		beq.s	loc_7AD4	; if not, branch
00007BB6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007BBE 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007BC4 117C 0001 001A             		move.b	#1,$1A(a0)
00007BCA 117C 0002 0018             		move.b	#2,$18(a0)
00007BD0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007BD6                            
00007BD6                            loc_7AD4:
00007BD6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007BDC 6700                       		beq.s	Obj15_Action	; if yes, branch
00007BDE                            
00007BDE                            Obj15_SetSolid:				; XREF: Obj15_Index
00007BDE 7200                       		moveq	#0,d1
00007BE0 1228 0019                  		move.b	$19(a0),d1
00007BE4 7600                       		moveq	#0,d3
00007BE6 1628 0016                  		move.b	$16(a0),d3
00007BEA 6100 FA76                  		bsr.w	Obj15_Solid
00007BEE                            
00007BEE                            Obj15_Action:				; XREF: Obj15_Index
00007BEE 6100 0000                  		bsr.w	Obj15_Move
00007BF2 6100 0000                  		bsr.w	DisplaySprite
00007BF6 6000 0000                  		bra.w	Obj15_ChkDel
00007BFA                            ; ===========================================================================
00007BFA                            
00007BFA                            Obj15_Action2:				; XREF: Obj15_Index
00007BFA 7200                       		moveq	#0,d1
00007BFC 1228 0019                  		move.b	$19(a0),d1
00007C00 6100 FAC4                  		bsr.w	ExitPlatform
00007C04 3F28 0008                  		move.w	8(a0),-(sp)
00007C08 6100 0000                  		bsr.w	Obj15_Move
00007C0C 341F                       		move.w	(sp)+,d2
00007C0E 7600                       		moveq	#0,d3
00007C10 1628 0016                  		move.b	$16(a0),d3
00007C14 5203                       		addq.b	#1,d3
00007C16 6100 0000                  		bsr.w	MvSonicOnPtfm
00007C1A 6100 0000                  		bsr.w	DisplaySprite
00007C1E 6000 0000                  		bra.w	Obj15_ChkDel
00007C22                            
00007C22 4E75                       		rts
00007C24                            
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            ; Subroutine to	change Sonic's position with a platform
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            
00007C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C24                            
00007C24                            
00007C24                            MvSonicOnPtfm:
00007C24 43F8 D000                  		lea	($FFFFD000).w,a1
00007C28 3028 000C                  		move.w	$C(a0),d0
00007C2C 9043                       		sub.w	d3,d0
00007C2E 6000                       		bra.s	MvSonic2
00007C30                            ; End of function MvSonicOnPtfm
00007C30                            
00007C30                            ; ---------------------------------------------------------------------------
00007C30                            ; Subroutine to	change Sonic's position with a platform
00007C30                            ; ---------------------------------------------------------------------------
00007C30                            
00007C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C30                            
00007C30                            
00007C30                            MvSonicOnPtfm2:
00007C30 43F8 D000                  		lea	($FFFFD000).w,a1
00007C34 3028 000C                  		move.w	$C(a0),d0
00007C38 0440 0009                  		subi.w	#9,d0
00007C3C                            
00007C3C                            MvSonic2:
00007C3C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C40 6B00                       		bmi.s	locret_7B62
00007C42 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007C48 6400                       		bcc.s	locret_7B62
00007C4A 4A78 FE08                  		tst.w	($FFFFFE08).w
00007C4E 6600                       		bne.s	locret_7B62
00007C50 7200                       		moveq	#0,d1
00007C52 1229 0016                  		move.b	$16(a1),d1
00007C56 9041                       		sub.w	d1,d0
00007C58 3340 000C                  		move.w	d0,$C(a1)
00007C5C 9468 0008                  		sub.w	8(a0),d2
00007C60 9569 0008                  		sub.w	d2,8(a1)
00007C64                            
00007C64                            locret_7B62:
00007C64 4E75                       		rts	
00007C66                            ; End of function MvSonicOnPtfm2
00007C66                            
00007C66                            
00007C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C66                            
00007C66                            
00007C66                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007C66 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007C6A 323C 0080                  		move.w	#$80,d1
00007C6E 0828 0000 0022             		btst	#0,$22(a0)
00007C74 6700                       		beq.s	loc_7B78
00007C76 4440                       		neg.w	d0
00007C78 D041                       		add.w	d1,d0
00007C7A                            
00007C7A                            loc_7B78:
00007C7A 6000                       		bra.s	Obj15_Move2
00007C7C                            ; End of function Obj15_Move
00007C7C                            
00007C7C                            
00007C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C7C                            
00007C7C                            
00007C7C                            Obj48_Move:				; XREF: Obj48_Display2
00007C7C 4A28 003D                  		tst.b	$3D(a0)
00007C80 6600                       		bne.s	loc_7B9C
00007C82 3028 003E                  		move.w	$3E(a0),d0
00007C86 5040                       		addq.w	#8,d0
00007C88 3140 003E                  		move.w	d0,$3E(a0)
00007C8C D168 0026                  		add.w	d0,$26(a0)
00007C90 0C40 0200                  		cmpi.w	#$200,d0
00007C94 6600                       		bne.s	loc_7BB6
00007C96 117C 0001 003D             		move.b	#1,$3D(a0)
00007C9C 6000                       		bra.s	loc_7BB6
00007C9E                            ; ===========================================================================
00007C9E                            
00007C9E                            loc_7B9C:
00007C9E 3028 003E                  		move.w	$3E(a0),d0
00007CA2 5140                       		subq.w	#8,d0
00007CA4 3140 003E                  		move.w	d0,$3E(a0)
00007CA8 D168 0026                  		add.w	d0,$26(a0)
00007CAC 0C40 FE00                  		cmpi.w	#-$200,d0
00007CB0 6600                       		bne.s	loc_7BB6
00007CB2 117C 0000 003D             		move.b	#0,$3D(a0)
00007CB8                            
00007CB8                            loc_7BB6:
00007CB8 1028 0026                  		move.b	$26(a0),d0
00007CBC                            ; End of function Obj48_Move
00007CBC                            
00007CBC                            
00007CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBC                            
00007CBC                            
00007CBC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007CBC 6100 AD1C                  		bsr.w	CalcSine
00007CC0 3428 0038                  		move.w	$38(a0),d2
00007CC4 3628 003A                  		move.w	$3A(a0),d3
00007CC8 45E8 0028                  		lea	$28(a0),a2
00007CCC 7C00                       		moveq	#0,d6
00007CCE 1C1A                       		move.b	(a2)+,d6
00007CD0                            
00007CD0                            loc_7BCE:
00007CD0 7800                       		moveq	#0,d4
00007CD2 181A                       		move.b	(a2)+,d4
00007CD4 ED4C                       		lsl.w	#6,d4
00007CD6 0684 00FF D000             		addi.l	#$FFD000,d4
00007CDC 2244                       		movea.l	d4,a1
00007CDE 7800                       		moveq	#0,d4
00007CE0 1829 003C                  		move.b	$3C(a1),d4
00007CE4 2A04                       		move.l	d4,d5
00007CE6 C9C0                       		muls.w	d0,d4
00007CE8 E084                       		asr.l	#8,d4
00007CEA CBC1                       		muls.w	d1,d5
00007CEC E085                       		asr.l	#8,d5
00007CEE D842                       		add.w	d2,d4
00007CF0 DA43                       		add.w	d3,d5
00007CF2 3344 000C                  		move.w	d4,$C(a1)
00007CF6 3345 0008                  		move.w	d5,8(a1)
00007CFA 51CE FFD4                  		dbf	d6,loc_7BCE
00007CFE 4E75                       		rts	
00007D00                            ; End of function Obj15_Move2
00007D00                            
00007D00                            ; ===========================================================================
00007D00                            
00007D00                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007D00 3028 003A                  		move.w	$3A(a0),d0
00007D04 0240 FF80                  		andi.w	#$FF80,d0
00007D08 3238 F700                  		move.w	($FFFFF700).w,d1
00007D0C 0441 0080                  		subi.w	#$80,d1
00007D10 0241 FF80                  		andi.w	#$FF80,d1
00007D14 9041                       		sub.w	d1,d0
00007D16 0C40 0280                  		cmpi.w	#$280,d0
00007D1A 6200 0000                  		bhi.w	Obj15_DelAll
00007D1E 4E75                       		rts	
00007D20                            ; ===========================================================================
00007D20                            
00007D20                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007D20 7400                       		moveq	#0,d2
00007D22 45E8 0028                  		lea	$28(a0),a2
00007D26 141A                       		move.b	(a2)+,d2
00007D28                            
00007D28                            Obj15_DelLoop:
00007D28 7000                       		moveq	#0,d0
00007D2A 101A                       		move.b	(a2)+,d0
00007D2C ED48                       		lsl.w	#6,d0
00007D2E 0680 00FF D000             		addi.l	#$FFD000,d0
00007D34 2240                       		movea.l	d0,a1
00007D36 6100 0000                  		bsr.w	DeleteObject2
00007D3A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007D3E 4E75                       		rts	
00007D40                            ; ===========================================================================
00007D40                            
00007D40                            Obj15_Delete:				; XREF: Obj15_Index
00007D40 6100 0000                  		bsr.w	DeleteObject
00007D44 4E75                       		rts	
00007D46                            ; ===========================================================================
00007D46                            
00007D46                            Obj15_Display:				; XREF: Obj15_Index
00007D46 6000 0000                  		bra.w	DisplaySprite
00007D4A                            ; ===========================================================================
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            Map_obj15:
00007D4A                            	include "_maps\obj15ghz.asm"
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A 0000                       		dc.w byte_7C4E-Map_obj15
00007D4C 0000                       		dc.w byte_7C59-Map_obj15
00007D4E 0000                       		dc.w byte_7C5F-Map_obj15
00007D50 02                         byte_7C4E:	dc.b 2
00007D51 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007D56 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007D5B 01                         byte_7C59:	dc.b 1
00007D5C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D61 01                         byte_7C5F:	dc.b 1
00007D62 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007D68 00                         		even
00007D68 00                         		even
00007D68                            
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Sprite mappings - SLZ	swinging platforms
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            Map_obj15a:
00007D68                            	include "_maps\obj15slz.asm"
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Sprite mappings - SLZ	swinging platforms
00007D68                            ; ---------------------------------------------------------------------------
00007D68 0000                       		dc.w byte_7C6C-Map_obj15a
00007D6A 0000                       		dc.w byte_7C95-Map_obj15a
00007D6C 0000                       		dc.w byte_7C9B-Map_obj15a
00007D6E 08                         byte_7C6C:	dc.b 8
00007D6F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007D74 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007D79 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007D7E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007D83 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007D88 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007D8D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007D92 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007D97 01                         byte_7C95:	dc.b 1
00007D98 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007D9D 01                         byte_7C9B:	dc.b 1
00007D9E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj17:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007DB4 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB6 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB8 0000                       		dc.w Obj17_Delete-Obj17_Index
00007DBA 0000                       		dc.w Obj17_Display-Obj17_Index
00007DBC                            ; ===========================================================================
00007DBC                            
00007DBC                            Obj17_Main:				; XREF: Obj17_Index
00007DBC 5428 0024                  		addq.b	#2,$24(a0)
00007DC0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007DC8 317C 4398 0002             		move.w	#$4398,2(a0)
00007DCE 117C 0007 0022             		move.b	#7,$22(a0)
00007DD4 117C 0004 0001             		move.b	#4,1(a0)
00007DDA 117C 0003 0018             		move.b	#3,$18(a0)
00007DE0 117C 0008 0019             		move.b	#8,$19(a0)
00007DE6 3428 000C                  		move.w	$C(a0),d2
00007DEA 3628 0008                  		move.w	8(a0),d3
00007DEE 1810                       		move.b	0(a0),d4
00007DF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007DF4 7200                       		moveq	#0,d1
00007DF6 1212                       		move.b	(a2),d1		; move a2 to d1
00007DF8 14FC 0000                  		move.b	#0,(a2)+
00007DFC 3001                       		move.w	d1,d0
00007DFE E248                       		lsr.w	#1,d0
00007E00 E948                       		lsl.w	#4,d0
00007E02 9640                       		sub.w	d0,d3
00007E04 5501                       		subq.b	#2,d1
00007E06 6500                       		bcs.s	Obj17_Action
00007E08 7C00                       		moveq	#0,d6
00007E0A                            
00007E0A                            Obj17_MakeHelix:
00007E0A 6100 0000                  		bsr.w	SingleObjLoad
00007E0E 6600                       		bne.s	Obj17_Action
00007E10 5228 0028                  		addq.b	#1,$28(a0)
00007E14 3A09                       		move.w	a1,d5
00007E16 0445 D000                  		subi.w	#$D000,d5
00007E1A EC4D                       		lsr.w	#6,d5
00007E1C 0245 007F                  		andi.w	#$7F,d5
00007E20 14C5                       		move.b	d5,(a2)+
00007E22 137C 0008 0024             		move.b	#8,$24(a1)
00007E28 1284                       		move.b	d4,0(a1)
00007E2A 3342 000C                  		move.w	d2,$C(a1)
00007E2E 3343 0008                  		move.w	d3,8(a1)
00007E32 2368 0004 0004             		move.l	4(a0),4(a1)
00007E38 337C 4398 0002             		move.w	#$4398,2(a1)
00007E3E 137C 0004 0001             		move.b	#4,1(a1)
00007E44 137C 0003 0018             		move.b	#3,$18(a1)
00007E4A 137C 0008 0019             		move.b	#8,$19(a1)
00007E50 1346 003E                  		move.b	d6,$3E(a1)
00007E54 5206                       		addq.b	#1,d6
00007E56 0206 0007                  		andi.b	#7,d6
00007E5A 0643 0010                  		addi.w	#$10,d3
00007E5E B668 0008                  		cmp.w	8(a0),d3
00007E62 6600                       		bne.s	loc_7D78
00007E64 1146 003E                  		move.b	d6,$3E(a0)
00007E68 5206                       		addq.b	#1,d6
00007E6A 0206 0007                  		andi.b	#7,d6
00007E6E 0643 0010                  		addi.w	#$10,d3
00007E72 5228 0028                  		addq.b	#1,$28(a0)
00007E76                            
00007E76                            loc_7D78:
00007E76 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007E7A                            
00007E7A                            Obj17_Action:				; XREF: Obj17_Index
00007E7A 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007E7E 6100 0000                  		bsr.w	DisplaySprite
00007E82 6000 0000                  		bra.w	Obj17_ChkDel
00007E86                            
00007E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E86                            
00007E86                            
00007E86                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007E86 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007E8A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007E90 D028 003E                  		add.b	$3E(a0),d0
00007E94 0200 0007                  		andi.b	#7,d0
00007E98 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007E9C 6600                       		bne.s	locret_7DA6
00007E9E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007EA4                            
00007EA4                            locret_7DA6:
00007EA4 4E75                       		rts	
00007EA6                            ; End of function Obj17_RotateSpikes
00007EA6                            
00007EA6                            ; ===========================================================================
00007EA6                            
00007EA6                            Obj17_ChkDel:				; XREF: Obj17_Action
00007EA6 3028 0008                  		move.w	8(a0),d0
00007EAA 0240 FF80                  		andi.w	#$FF80,d0
00007EAE 3238 F700                  		move.w	($FFFFF700).w,d1
00007EB2 0441 0080                  		subi.w	#$80,d1
00007EB6 0241 FF80                  		andi.w	#$FF80,d1
00007EBA 9041                       		sub.w	d1,d0
00007EBC 0C40 0280                  		cmpi.w	#$280,d0
00007EC0 6200 0000                  		bhi.w	Obj17_DelAll
00007EC4 4E75                       		rts	
00007EC6                            ; ===========================================================================
00007EC6                            
00007EC6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007EC6 7400                       		moveq	#0,d2
00007EC8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007ECC 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007ECE 5502                       		subq.b	#2,d2
00007ED0 6500                       		bcs.s	Obj17_Delete
00007ED2                            
00007ED2                            Obj17_DelLoop:
00007ED2 7000                       		moveq	#0,d0
00007ED4 101A                       		move.b	(a2)+,d0
00007ED6 ED48                       		lsl.w	#6,d0
00007ED8 0680 00FF D000             		addi.l	#$FFD000,d0
00007EDE 2240                       		movea.l	d0,a1
00007EE0 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007EE4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007EE8                            
00007EE8                            Obj17_Delete:				; XREF: Obj17_Index
00007EE8 6100 0000                  		bsr.w	DeleteObject
00007EEC 4E75                       		rts	
00007EEE                            ; ===========================================================================
00007EEE                            
00007EEE                            Obj17_Display:				; XREF: Obj17_Index
00007EEE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007EF2 6000 0000                  		bra.w	DisplaySprite
00007EF6                            ; ===========================================================================
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            Map_obj17:
00007EF6                            	include "_maps\obj17.asm"
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007EFA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007EFE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007F02 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007F06 01                         byte_7E08:	dc.b 1
00007F07 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007F0C 01                         byte_7E0E:	dc.b 1
00007F0D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007F12 01                         byte_7E14:	dc.b 1
00007F13 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007F18 01                         byte_7E1A:	dc.b 1
00007F19 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007F1E 01                         byte_7E20:	dc.b 1
00007F1F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007F24 01                         byte_7E26:	dc.b 1
00007F25 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007F2A 01                         byte_7E2C:	dc.b 1
00007F2B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007F30                            		even
00007F30                            		even
00007F30                            
00007F30                            ; ===========================================================================
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            
00007F30                            Obj18:					; XREF: Obj_Index
00007F30 7000                       		moveq	#0,d0
00007F32 1028 0024                  		move.b	$24(a0),d0
00007F36 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007F3A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007F3E                            ; ===========================================================================
00007F3E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007F40 0000                       		dc.w Obj18_Solid-Obj18_Index
00007F42 0000                       		dc.w Obj18_Action2-Obj18_Index
00007F44 0000                       		dc.w Obj18_Delete-Obj18_Index
00007F46 0000                       		dc.w Obj18_Action-Obj18_Index
00007F48                            ; ===========================================================================
00007F48                            
00007F48                            Obj18_Main:				; XREF: Obj18_Index
00007F48 5428 0024                  		addq.b	#2,$24(a0)
00007F4C 317C 4000 0002             		move.w	#$4000,2(a0)
00007F52 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007F5A 117C 0020 0019             		move.b	#$20,$19(a0)
00007F60 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007F66 6600                       		bne.s	Obj18_NotSYZ
00007F68 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007F70 117C 0020 0019             		move.b	#$20,$19(a0)
00007F76                            
00007F76                            Obj18_NotSYZ:
00007F76 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F7C 6600                       		bne.s	Obj18_NotSLZ
00007F7E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007F86 117C 0020 0019             		move.b	#$20,$19(a0)
00007F8C 317C 4000 0002             		move.w	#$4000,2(a0)
00007F92 117C 0003 0028             		move.b	#3,$28(a0)
00007F98                            
00007F98                            Obj18_NotSLZ:
00007F98 117C 0004 0001             		move.b	#4,1(a0)
00007F9E 117C 0004 0018             		move.b	#4,$18(a0)
00007FA4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007FAA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007FB0 3168 0008 0032             		move.w	8(a0),$32(a0)
00007FB6 317C 0080 0026             		move.w	#$80,$26(a0)
00007FBC 7200                       		moveq	#0,d1
00007FBE 1028 0028                  		move.b	$28(a0),d0
00007FC2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007FC6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007FC8 5201                       		addq.b	#1,d1		; use frame #1
00007FCA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007FD0                            
00007FD0                            Obj18_SetFrame:
00007FD0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007FD4                            
00007FD4                            Obj18_Solid:				; XREF: Obj18_Index
00007FD4 4A28 0038                  		tst.b	$38(a0)
00007FD8 6700                       		beq.s	loc_7EE0
00007FDA 5928 0038                  		subq.b	#4,$38(a0)
00007FDE                            
00007FDE                            loc_7EE0:
00007FDE 7200                       		moveq	#0,d1
00007FE0 1228 0019                  		move.b	$19(a0),d1
00007FE4 6100 F56C                  		bsr.w	PlatformObject
00007FE8                            
00007FE8                            Obj18_Action:				; XREF: Obj18_Index
00007FE8 6100 0000                  		bsr.w	Obj18_Move
00007FEC 6100 0000                  		bsr.w	Obj18_Nudge
00007FF0 6100 0000                  		bsr.w	DisplaySprite
00007FF4 6000 0000                  		bra.w	Obj18_ChkDel
00007FF8                            ; ===========================================================================
00007FF8                            
00007FF8                            Obj18_Action2:				; XREF: Obj18_Index
00007FF8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007FFE 6700                       		beq.s	loc_7F06
00008000 5828 0038                  		addq.b	#4,$38(a0)
00008004                            
00008004                            loc_7F06:
00008004 7200                       		moveq	#0,d1
00008006 1228 0019                  		move.b	$19(a0),d1
0000800A 6100 F6BA                  		bsr.w	ExitPlatform
0000800E 3F28 0008                  		move.w	8(a0),-(sp)
00008012 6100 0000                  		bsr.w	Obj18_Move
00008016 6100 0000                  		bsr.w	Obj18_Nudge
0000801A 341F                       		move.w	(sp)+,d2
0000801C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008020 6100 0000                  		bsr.w	DisplaySprite
00008024 6000 0000                  		bra.w	Obj18_ChkDel
00008028                            
00008028 4E75                       		rts
0000802A                            
0000802A                            ; ---------------------------------------------------------------------------
0000802A                            ; Subroutine to	move platform slightly when you	stand on it
0000802A                            ; ---------------------------------------------------------------------------
0000802A                            
0000802A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000802A                            
0000802A                            
0000802A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000802A 1028 0038                  		move.b	$38(a0),d0
0000802E 6100 A9AA                  		bsr.w	CalcSine
00008032 323C 0400                  		move.w	#$400,d1
00008036 C1C1                       		muls.w	d1,d0
00008038 4840                       		swap	d0
0000803A D068 002C                  		add.w	$2C(a0),d0
0000803E 3140 000C                  		move.w	d0,$C(a0)
00008042 4E75                       		rts	
00008044                            ; End of function Obj18_Nudge
00008044                            
00008044                            ; ---------------------------------------------------------------------------
00008044                            ; Subroutine to	move platforms
00008044                            ; ---------------------------------------------------------------------------
00008044                            
00008044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008044                            
00008044                            
00008044                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008044 7000                       		moveq	#0,d0
00008046 1028 0028                  		move.b	$28(a0),d0
0000804A 0240 000F                  		andi.w	#$F,d0
0000804E D040                       		add.w	d0,d0
00008050 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008054 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008058                            ; End of function Obj18_Move
00008058                            
00008058                            ; ===========================================================================
00008058 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000805C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008060 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008064 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008068 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000806C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008070 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008072                            ; ===========================================================================
00008072                            
00008072                            Obj18_Type00:
00008072 4E75                       		rts			; platform 00 doesn't move
00008074                            ; ===========================================================================
00008074                            
00008074                            Obj18_Type05:
00008074 3028 0032                  		move.w	$32(a0),d0
00008078 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000807C 4401                       		neg.b	d1		; reverse platform-motion
0000807E 0601 0040                  		addi.b	#$40,d1
00008082 6000                       		bra.s	Obj18_01_Move
00008084                            ; ===========================================================================
00008084                            
00008084                            Obj18_Type01:
00008084 3028 0032                  		move.w	$32(a0),d0
00008088 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000808C 0401 0040                  		subi.b	#$40,d1
00008090                            
00008090                            Obj18_01_Move:
00008090 4881                       		ext.w	d1
00008092 D041                       		add.w	d1,d0
00008094 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008098 6000 0000                  		bra.w	Obj18_ChgMotion
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            Obj18_Type0C:
0000809C 3028 0034                  		move.w	$34(a0),d0
000080A0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080A4 4401                       		neg.b	d1		; reverse platform-motion
000080A6 0601 0030                  		addi.b	#$30,d1
000080AA 6000                       		bra.s	Obj18_02_Move
000080AC                            ; ===========================================================================
000080AC                            
000080AC                            Obj18_Type0B:
000080AC 3028 0034                  		move.w	$34(a0),d0
000080B0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080B4 0401 0030                  		subi.b	#$30,d1
000080B8 6000                       		bra.s	Obj18_02_Move
000080BA                            ; ===========================================================================
000080BA                            
000080BA                            Obj18_Type06:
000080BA 3028 0034                  		move.w	$34(a0),d0
000080BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080C2 4401                       		neg.b	d1		; reverse platform-motion
000080C4 0601 0040                  		addi.b	#$40,d1
000080C8 6000                       		bra.s	Obj18_02_Move
000080CA                            ; ===========================================================================
000080CA                            
000080CA                            Obj18_Type02:
000080CA 3028 0034                  		move.w	$34(a0),d0
000080CE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080D2 0401 0040                  		subi.b	#$40,d1
000080D6                            
000080D6                            Obj18_02_Move:
000080D6 4881                       		ext.w	d1
000080D8 D041                       		add.w	d1,d0
000080DA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000080DE 6000 0000                  		bra.w	Obj18_ChgMotion
000080E2                            ; ===========================================================================
000080E2                            
000080E2                            Obj18_Type03:
000080E2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000080E6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000080E8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000080EE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000080F0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000080F6                            
000080F6                            Obj18_03_NoMove:
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            Obj18_03_Wait:
000080F8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000080FC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000080FE 317C 0020 003A             		move.w	#32,$3A(a0)
00008104 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008108 4E75                       		rts	
0000810A                            ; ===========================================================================
0000810A                            
0000810A                            Obj18_Type04:
0000810A 4A68 003A                  		tst.w	$3A(a0)
0000810E 6700                       		beq.s	loc_8048
00008110 5368 003A                  		subq.w	#1,$3A(a0)
00008114 6600                       		bne.s	loc_8048
00008116 0828 0003 0022             		btst	#3,$22(a0)
0000811C 6700                       		beq.s	loc_8042
0000811E 08E9 0001 0022             		bset	#1,$22(a1)
00008124 08A9 0003 0022             		bclr	#3,$22(a1)
0000812A 137C 0002 0024             		move.b	#2,$24(a1)
00008130 08A8 0003 0022             		bclr	#3,$22(a0)
00008136 4228 0025                  		clr.b	$25(a0)
0000813A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008140                            
00008140                            loc_8042:
00008140 117C 0008 0024             		move.b	#8,$24(a0)
00008146                            
00008146                            loc_8048:
00008146 2628 002C                  		move.l	$2C(a0),d3
0000814A 3028 0012                  		move.w	$12(a0),d0
0000814E 48C0                       		ext.l	d0
00008150 E180                       		asl.l	#8,d0
00008152 D680                       		add.l	d0,d3
00008154 2143 002C                  		move.l	d3,$2C(a0)
00008158 0668 0038 0012             		addi.w	#$38,$12(a0)
0000815E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008162 0640 00E0                  		addi.w	#$E0,d0
00008166 B068 002C                  		cmp.w	$2C(a0),d0
0000816A 6400                       		bcc.s	locret_8074
0000816C 117C 0006 0024             		move.b	#6,$24(a0)
00008172                            
00008172                            locret_8074:
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            Obj18_Type07:
00008174 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008178 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000817A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000817E 7000                       		moveq	#0,d0
00008180 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008184 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008186 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000818A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000818C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008192                            
00008192                            Obj18_07_NoMove:
00008192 4E75                       		rts	
00008194                            ; ===========================================================================
00008194                            
00008194                            Obj18_07_Wait:
00008194 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008198 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000819A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000819E 4E75                       		rts	
000081A0                            ; ===========================================================================
000081A0                            
000081A0                            Obj18_Type08:
000081A0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000081A4 3028 0034                  		move.w	$34(a0),d0
000081A8 0440 0200                  		subi.w	#$200,d0
000081AC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000081B0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000081B2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000081B6                            
000081B6                            Obj18_08_NoStop:
000081B6 4E75                       		rts	
000081B8                            ; ===========================================================================
000081B8                            
000081B8                            Obj18_Type0A:
000081B8 3028 0034                  		move.w	$34(a0),d0
000081BC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000081C0 0401 0040                  		subi.b	#$40,d1
000081C4 4881                       		ext.w	d1
000081C6 E241                       		asr.w	#1,d1
000081C8 D041                       		add.w	d1,d0
000081CA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000081CE                            
000081CE                            Obj18_ChgMotion:
000081CE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000081D4 4E75                       		rts	
000081D6                            ; ===========================================================================
000081D6                            
000081D6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000081D6 3028 0032                  		move.w	$32(a0),d0
000081DA 0240 FF80                  		andi.w	#$FF80,d0
000081DE 3238 F700                  		move.w	($FFFFF700).w,d1
000081E2 0441 0080                  		subi.w	#$80,d1
000081E6 0241 FF80                  		andi.w	#$FF80,d1
000081EA 9041                       		sub.w	d1,d0
000081EC 0C40 0280                  		cmpi.w	#$280,d0
000081F0 6200                       		bhi.s	Obj18_Delete
000081F2 4E75                       		rts	
000081F4                            ; ===========================================================================
000081F4                            
000081F4                            Obj18_Delete:				; XREF: Obj18_Index
000081F4 6000 0000                  		bra.w	DeleteObject
000081F8                            ; ===========================================================================
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            ; Sprite mappings - unused
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            Map_obj18x:
000081F8                            	include "_maps\obj18x.asm"
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            ; Sprite mappings - unused
000081F8                            ; ---------------------------------------------------------------------------
000081F8 0000                       		dc.w byte_80FE-Map_obj18x
000081FA 0000                       		dc.w byte_8109-Map_obj18x
000081FC 02                         byte_80FE:	dc.b 2
000081FD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008202 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008207 0A                         byte_8109:	dc.b $A
00008208 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000820D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008212 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008217 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000821C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008221 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008226 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000822B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008230 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008235 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000823A                            		even
0000823A                            		even
0000823A                            
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Sprite mappings - GHZ	platforms
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            Map_obj18:
0000823A                            	include "_maps\obj18ghz.asm"
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Sprite mappings - GHZ	platforms
0000823A                            ; ---------------------------------------------------------------------------
0000823A 0000                       		dc.w byte_8140-Map_obj18
0000823C 0000                       		dc.w byte_8155-Map_obj18
0000823E 04                         byte_8140:	dc.b 4
0000823F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008244 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008249 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000824E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008253 0A                         byte_8155:	dc.b $A
00008254 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008259 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000825E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008263 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008268 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000826D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008272 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008277 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000827C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008281 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008286                            		even
00008286                            		even
00008286                            
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - SYZ	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286                            Map_obj18a:
00008286                            	include "_maps\obj18syz.asm"
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - SYZ	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286 0000                       		dc.w byte_818A-Map_obj18a
00008288 03                         byte_818A:	dc.b 3
00008289 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000828E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008293 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008298                            		even
00008298                            		even
00008298                            
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	platforms
00008298                            ; ---------------------------------------------------------------------------
00008298                            Map_obj18b:
00008298                            	include "_maps\obj18slz.asm"
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	platforms
00008298                            ; ---------------------------------------------------------------------------
00008298 0000                       		dc.w byte_819C-Map_obj18b
0000829A 02                         byte_819C:	dc.b 2
0000829B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000082A0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000082A6 00                         		even
000082A6 00                         		even
000082A6                            
000082A6                            ; ===========================================================================
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Object 19 - blank
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            
000082A6                            Obj19:					; XREF: Obj_Index
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            Map_obj48:
000082A8                            	include "_maps\obj48.asm"
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A8                            ; ---------------------------------------------------------------------------
000082A8 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000082AC 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000082B0 06                         byte_81B2:	dc.b 6
000082B1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000082B6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000082BB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000082C0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000082C5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000082CA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000082CF 04                         byte_81D1:	dc.b 4
000082D0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000082D5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000082DA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000082DF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000082E4 04                         byte_81E6:	dc.b 4
000082E5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000082EA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000082EF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000082F4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000082F9 04                         byte_81FB:	dc.b 4
000082FA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000082FF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008304 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008309 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000830E                            		even
0000830E                            		even
0000830E                            
0000830E                            ; ===========================================================================
0000830E                            ; ---------------------------------------------------------------------------
0000830E                            ; Object 1A - GHZ collapsing ledge
0000830E                            ; ---------------------------------------------------------------------------
0000830E                            
0000830E                            Obj1A:					; XREF: Obj_Index
0000830E 7000                       		moveq	#0,d0
00008310 1028 0024                  		move.b	$24(a0),d0
00008314 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008318 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000831C                            ; ===========================================================================
0000831C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008320 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008324 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008328                            ; ===========================================================================
00008328                            
00008328                            Obj1A_Main:				; XREF: Obj1A_Index
00008328 5428 0024                  		addq.b	#2,$24(a0)
0000832C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008334 317C 4000 0002             		move.w	#$4000,2(a0)
0000833A 0028 0004 0001             		ori.b	#4,1(a0)
00008340 117C 0004 0018             		move.b	#4,$18(a0)
00008346 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000834C 117C 0064 0019             		move.b	#$64,$19(a0)
00008352 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008358 117C 0038 0016             		move.b	#$38,$16(a0)
0000835E 08E8 0004 0001             		bset	#4,1(a0)
00008364                            
00008364                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008364 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008368 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000836A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000836E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008372 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008376                            
00008376                            Obj1A_Slope:
00008376 323C 0030                  		move.w	#$30,d1
0000837A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008380 6100 F2A4                  		bsr.w	SlopeObject
00008384 6000 0000                  		bra.w	MarkObjGone
00008388                            ; ===========================================================================
00008388                            
00008388                            Obj1A_Touch:				; XREF: Obj1A_Index
00008388 4A28 0038                  		tst.b	$38(a0)
0000838C 6700 0000                  		beq.w	loc_847A
00008390 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008396 5328 0038                  		subq.b	#1,$38(a0)
0000839A                            
0000839A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000839A                            
0000839A                            
0000839A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000839A 323C 0030                  		move.w	#$30,d1
0000839E 6100 F326                  		bsr.w	ExitPlatform
000083A2 323C 0030                  		move.w	#$30,d1
000083A6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000083AC 3428 0008                  		move.w	8(a0),d2
000083B0 6100 0000                  		bsr.w	SlopeObject2
000083B4 6000 0000                  		bra.w	MarkObjGone
000083B8                            ; End of function Obj1A_WalkOff
000083B8                            
000083B8                            ; ===========================================================================
000083B8                            
000083B8                            Obj1A_Display:				; XREF: Obj1A_Index
000083B8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083BC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000083BE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083C2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000083C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083CA 6000 0000                  		bra.w	DisplaySprite
000083CE                            ; ===========================================================================
000083CE                            
000083CE                            loc_82D0:				; XREF: Obj1A_Display
000083CE 5328 0038                  		subq.b	#1,$38(a0)
000083D2 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000083D6 43F8 D000                  		lea	($FFFFD000).w,a1
000083DA 0829 0003 0022             		btst	#3,$22(a1)
000083E0 6700                       		beq.s	loc_82FC
000083E2 4A28 0038                  		tst.b	$38(a0)
000083E6 6600                       		bne.s	locret_8308
000083E8 08A9 0003 0022             		bclr	#3,$22(a1)
000083EE 08A9 0005 0022             		bclr	#5,$22(a1)
000083F4 137C 0001 001D             		move.b	#1,$1D(a1)
000083FA                            
000083FA                            loc_82FC:
000083FA 117C 0000 003A             		move.b	#0,$3A(a0)
00008400 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008406                            
00008406                            locret_8308:
00008406 4E75                       		rts	
00008408                            ; ===========================================================================
00008408                            
00008408                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008408 6100 0000                  		bsr.w	ObjectFall
0000840C 6100 0000                  		bsr.w	DisplaySprite
00008410 4A28 0001                  		tst.b	1(a0)
00008414 6A00                       		bpl.s	Obj1A_Delete
00008416 4E75                       		rts	
00008418                            ; ===========================================================================
00008418                            
00008418                            Obj1A_Delete:				; XREF: Obj1A_Index
00008418 6100 0000                  		bsr.w	DeleteObject
0000841C 4E75                       		rts	
0000841E                            ; ===========================================================================
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            
0000841E                            Obj53:					; XREF: Obj_Index
0000841E 7000                       		moveq	#0,d0
00008420 1028 0024                  		move.b	$24(a0),d0
00008424 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008428 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000842C                            ; ===========================================================================
0000842C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008430 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008434 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008438                            ; ===========================================================================
00008438                            
00008438                            Obj53_Main:				; XREF: Obj53_Index
00008438 5428 0024                  		addq.b	#2,$24(a0)
0000843C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008444 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000844A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008450 6600                       		bne.s	Obj53_NotSLZ
00008452 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008458 5428 001A                  		addq.b	#2,$1A(a0)
0000845C                            
0000845C                            Obj53_NotSLZ:
0000845C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008462 6600                       		bne.s	Obj53_NotSBZ
00008464 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000846A                            
0000846A                            Obj53_NotSBZ:
0000846A 0028 0004 0001             		ori.b	#4,1(a0)
00008470 117C 0004 0018             		move.b	#4,$18(a0)
00008476 117C 0007 0038             		move.b	#7,$38(a0)
0000847C 117C 0044 0019             		move.b	#$44,$19(a0)
00008482                            
00008482                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008482 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008486 6700                       		beq.s	Obj53_Solid	; if not, branch
00008488 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000848C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008490 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008494                            
00008494                            Obj53_Solid:
00008494 323C 0020                  		move.w	#$20,d1
00008498 6100 F0B8                  		bsr.w	PlatformObject
0000849C 4A28 0028                  		tst.b	$28(a0)
000084A0 6A00                       		bpl.s	Obj53_MarkAsGone
000084A2 0829 0003 0022             		btst	#3,$22(a1)
000084A8 6700                       		beq.s	Obj53_MarkAsGone
000084AA 08A8 0000 0001             		bclr	#0,1(a0)
000084B0 3029 0008                  		move.w	8(a1),d0
000084B4 9068 0008                  		sub.w	8(a0),d0
000084B8 6400                       		bcc.s	Obj53_MarkAsGone
000084BA 08E8 0000 0001             		bset	#0,1(a0)
000084C0                            
000084C0                            Obj53_MarkAsGone:
000084C0 6000 0000                  		bra.w	MarkObjGone
000084C4                            ; ===========================================================================
000084C4                            
000084C4                            Obj53_Touch:				; XREF: Obj53_Index
000084C4 4A28 0038                  		tst.b	$38(a0)
000084C8 6700 0000                  		beq.w	loc_8458
000084CC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000084D2 5328 0038                  		subq.b	#1,$38(a0)
000084D6                            
000084D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D6                            
000084D6                            
000084D6                            Obj53_WalkOff:				; XREF: Obj53_Index
000084D6 323C 0020                  		move.w	#$20,d1
000084DA 6100 F1EA                  		bsr.w	ExitPlatform
000084DE 3428 0008                  		move.w	8(a0),d2
000084E2 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000084E6 6000 0000                  		bra.w	MarkObjGone
000084EA                            ; End of function Obj53_WalkOff
000084EA                            
000084EA                            ; ===========================================================================
000084EA                            
000084EA                            Obj53_Display:				; XREF: Obj53_Index
000084EA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000084EE 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000084F0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000084F4 6600 0000                  		bne.w	loc_8402	; if yes, branch
000084F8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000084FC 6000 0000                  		bra.w	DisplaySprite
00008500                            ; ===========================================================================
00008500                            
00008500                            loc_8402:
00008500 5328 0038                  		subq.b	#1,$38(a0)
00008504 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008508 43F8 D000                  		lea	($FFFFD000).w,a1
0000850C 0829 0003 0022             		btst	#3,$22(a1)
00008512 6700                       		beq.s	loc_842E
00008514 4A28 0038                  		tst.b	$38(a0)
00008518 6600                       		bne.s	locret_843A
0000851A 08A9 0003 0022             		bclr	#3,$22(a1)
00008520 08A9 0005 0022             		bclr	#5,$22(a1)
00008526 137C 0001 001D             		move.b	#1,$1D(a1)
0000852C                            
0000852C                            loc_842E:
0000852C 117C 0000 003A             		move.b	#0,$3A(a0)
00008532 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008538                            
00008538                            locret_843A:
00008538 4E75                       		rts	
0000853A                            ; ===========================================================================
0000853A                            
0000853A                            Obj53_TimeZero:				; XREF: Obj53_Display
0000853A 6100 0000                  		bsr.w	ObjectFall
0000853E 6100 0000                  		bsr.w	DisplaySprite
00008542 4A28 0001                  		tst.b	1(a0)
00008546 6A00                       		bpl.s	Obj53_Delete
00008548 4E75                       		rts	
0000854A                            ; ===========================================================================
0000854A                            
0000854A                            Obj53_Delete:				; XREF: Obj53_Index
0000854A 6100 0000                  		bsr.w	DeleteObject
0000854E 4E75                       		rts	
00008550                            ; ===========================================================================
00008550                            
00008550                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008550 117C 0000 003A             		move.b	#0,$3A(a0)
00008556                            
00008556                            loc_8458:				; XREF: Obj53_Touch
00008556 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000855C 0828 0000 0028             		btst	#0,$28(a0)
00008562 6700                       		beq.s	loc_846C
00008564 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000856A                            
0000856A                            loc_846C:
0000856A 7207                       		moveq	#7,d1
0000856C 5228 001A                  		addq.b	#1,$1A(a0)
00008570 6000                       		bra.s	loc_8486
00008572                            ; ===========================================================================
00008572                            
00008572                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008572 117C 0000 003A             		move.b	#0,$3A(a0)
00008578                            
00008578                            loc_847A:				; XREF: Obj1A_Touch
00008578 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000857E 7218                       		moveq	#$18,d1
00008580 5428 001A                  		addq.b	#2,$1A(a0)
00008584                            
00008584                            loc_8486:				; XREF: Obj53_Collapse
00008584 7000                       		moveq	#0,d0
00008586 1028 001A                  		move.b	$1A(a0),d0
0000858A D040                       		add.w	d0,d0
0000858C 2668 0004                  		movea.l	4(a0),a3
00008590 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008594 524B                       		addq.w	#1,a3
00008596 08E8 0005 0001             		bset	#5,1(a0)
0000859C 1810                       		move.b	0(a0),d4
0000859E 1A28 0001                  		move.b	1(a0),d5
000085A2 2248                       		movea.l	a0,a1
000085A4 6000                       		bra.s	loc_84B2
000085A6                            ; ===========================================================================
000085A6                            
000085A6                            loc_84AA:
000085A6 6100 0000                  		bsr.w	SingleObjLoad
000085AA 6600                       		bne.s	loc_84F2
000085AC 5A4B                       		addq.w	#5,a3
000085AE                            
000085AE                            loc_84B2:
000085AE 137C 0006 0024             		move.b	#6,$24(a1)
000085B4 1284                       		move.b	d4,0(a1)
000085B6 234B 0004                  		move.l	a3,4(a1)
000085BA 1345 0001                  		move.b	d5,1(a1)
000085BE 3368 0008 0008             		move.w	8(a0),8(a1)
000085C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000085CA 3368 0002 0002             		move.w	2(a0),2(a1)
000085D0 1368 0018 0018             		move.b	$18(a0),$18(a1)
000085D6 1368 0019 0019             		move.b	$19(a0),$19(a1)
000085DC 135C 0038                  		move.b	(a4)+,$38(a1)
000085E0 B3C8                       		cmpa.l	a0,a1
000085E2 6400                       		bcc.s	loc_84EE
000085E4 6100 0000                  		bsr.w	DisplaySprite2
000085E8                            
000085E8                            loc_84EE:
000085E8 51C9 FFBC                  		dbf	d1,loc_84AA
000085EC                            
000085EC                            loc_84F2:
000085EC 6100 0000                  		bsr.w	DisplaySprite
000085F0 303C 00B9                  		move.w	#$B9,d0
000085F4 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000085FA                            ; ===========================================================================
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000860A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008614 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000861C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008624                            
00008624                            ; ---------------------------------------------------------------------------
00008624                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008624                            ; ---------------------------------------------------------------------------
00008624                            
00008624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008624                            
00008624                            
00008624                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008624 43F8 D000                  		lea	($FFFFD000).w,a1
00008628 0829 0003 0022             		btst	#3,$22(a1)
0000862E 6700                       		beq.s	locret_856E
00008630 3029 0008                  		move.w	8(a1),d0
00008634 9068 0008                  		sub.w	8(a0),d0
00008638 D041                       		add.w	d1,d0
0000863A E248                       		lsr.w	#1,d0
0000863C 0828 0000 0001             		btst	#0,1(a0)
00008642 6700                       		beq.s	loc_854E
00008644 4640                       		not.w	d0
00008646 D041                       		add.w	d1,d0
00008648                            
00008648                            loc_854E:
00008648 7200                       		moveq	#0,d1
0000864A 1232 0000                  		move.b	(a2,d0.w),d1
0000864E 3028 000C                  		move.w	$C(a0),d0
00008652 9041                       		sub.w	d1,d0
00008654 7200                       		moveq	#0,d1
00008656 1229 0016                  		move.b	$16(a1),d1
0000865A 9041                       		sub.w	d1,d0
0000865C 3340 000C                  		move.w	d0,$C(a1)
00008660 9468 0008                  		sub.w	8(a0),d2
00008664 9569 0008                  		sub.w	d2,8(a1)
00008668                            
00008668                            locret_856E:
00008668 4E75                       		rts	
0000866A                            ; End of function SlopeObject2
0000866A                            
0000866A                            ; ===========================================================================
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            ; Collision data for GHZ collapsing ledge
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            Obj1A_SlopeData:
0000866A                            		incbin	misc\ghzledge.bin
0000869A                            		even
0000869A                            
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            ; Sprite mappings - GHZ	collapsing ledge
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            Map_obj1A:
0000869A                            	include "_maps\obj1A.asm"
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            ; Sprite mappings - GHZ	collapsing ledge
0000869A                            ; ---------------------------------------------------------------------------
0000869A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000869E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000086A2 10                         byte_85A8:	dc.b $10
000086A3 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000086A8 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086AD E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000086B2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000086B7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086BC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000086C1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000086C6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000086CB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086D0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000086D5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000086DA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000086DF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000086E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000086E9 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000086EE 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086F3 10                         byte_85F9:	dc.b $10
000086F4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000086F9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086FE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008703 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008708 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000870D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008712 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008717 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000871C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008721 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008726 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000872B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008730 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008735 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000873A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000873F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008744 19                         byte_864A:	dc.b $19
00008745 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000874A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000874F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008754 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008759 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000875E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008763 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008768 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000876D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008772 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008777 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000877C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008781 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008786 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000878B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008790 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008795 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000879A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000879F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000087A4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000087A9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000087AE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000087B3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000087B8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000087BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000087C2 19                         byte_86C8:	dc.b $19
000087C3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000087C8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000087CD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000087D2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000087D7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000087DC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000087E1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000087E6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000087EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000087F0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000087F5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000087FA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000087FF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008804 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008809 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000880E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008813 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008818 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000881D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008822 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008827 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000882C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008831 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008836 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000883B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008840                            		even
00008840                            		even
00008840                            
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008840                            ; ---------------------------------------------------------------------------
00008840                            Map_obj53:
00008840                            	include "_maps\obj53.asm"
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008840                            ; ---------------------------------------------------------------------------
00008840 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008844 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008848 04                         byte_874E:	dc.b 4
00008849 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000884E 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008853 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008858 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000885D 08                         byte_8763:	dc.b 8
0000885E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008863 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008868 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000886D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008872 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008877 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000887C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008881 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008886 04                         byte_878C:	dc.b 4
00008887 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000888C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008891 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008896 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000889B 08                         byte_87A1:	dc.b 8
0000889C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000088A1 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000088A6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000088AB F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000088B0 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000088B5 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000088BA 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000088BF 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000088C4                            		even
000088C4                            		even
000088C4                            
000088C4                            ; ===========================================================================
000088C4                            ; ---------------------------------------------------------------------------
000088C4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000088C4                            ; ---------------------------------------------------------------------------
000088C4                            
000088C4                            Obj1C:					; XREF: Obj_Index
000088C4 7000                       		moveq	#0,d0
000088C6 1028 0024                  		move.b	$24(a0),d0
000088CA 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000088CE 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000088D2                            ; ===========================================================================
000088D2 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000088D4 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000088D6                            ; ===========================================================================
000088D6                            
000088D6                            Obj1C_Main:				; XREF: Obj1C_Index
000088D6 5428 0024                  		addq.b	#2,$24(a0)
000088DA 7000                       		moveq	#0,d0
000088DC 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000088E0 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000088E4 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000088E8 2159 0004                  		move.l	(a1)+,4(a0)
000088EC 3159 0002                  		move.w	(a1)+,2(a0)
000088F0 0028 0004 0001             		ori.b	#4,1(a0)
000088F6 1159 001A                  		move.b	(a1)+,$1A(a0)
000088FA 1159 0019                  		move.b	(a1)+,$19(a0)
000088FE 1159 0018                  		move.b	(a1)+,$18(a0)
00008902 1159 0020                  		move.b	(a1)+,$20(a0)
00008906                            
00008906                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008906 3028 0008                  		move.w	8(a0),d0
0000890A 0240 FF80                  		andi.w	#$FF80,d0
0000890E 3238 F700                  		move.w	($FFFFF700).w,d1
00008912 0441 0080                  		subi.w	#$80,d1
00008916 0241 FF80                  		andi.w	#$FF80,d1
0000891A 9041                       		sub.w	d1,d0
0000891C 0C40 0280                  		cmpi.w	#$280,d0
00008920 6200 0000                  		bhi.w	DeleteObject
00008924 6000 0000                  		bra.w	DisplaySprite
00008928                            ; ===========================================================================
00008928                            ; ---------------------------------------------------------------------------
00008928                            ; Variables for	object $1C are stored in an array
00008928                            ; ---------------------------------------------------------------------------
00008928 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000892C 44D8                       		dc.w $44D8		; VRAM setting
0000892E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008932 0000 0000                  		dc.l Map_obj1C
00008936 44D8                       		dc.w $44D8
00008938 0008 0200                  		dc.b 0,	8, 2, 0
0000893C 0000 0000                  		dc.l Map_obj1C
00008940 44D8                       		dc.w $44D8
00008942 0008 0200                  		dc.b 0,	8, 2, 0
00008946 0000 7A3A                  		dc.l Map_obj11
0000894A 438E                       		dc.w $438E
0000894C 0110 0100                  		dc.b 1,	$10, 1,	0
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Sprite mappings - SLZ	lava thrower
00008950                            ; ---------------------------------------------------------------------------
00008950                            Map_obj1C:
00008950                            	include "_maps\obj1C.asm"
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Sprite mappings - SLZ	lava thrower
00008950                            ; ---------------------------------------------------------------------------
00008950 0000                       		dc.w byte_8858-Map_obj1C
00008952 01                         byte_8858:	dc.b 1
00008953 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008958                            		even
00008958                            		even
00008958                            
00008958                            ; ===========================================================================
00008958                            ; ---------------------------------------------------------------------------
00008958                            ; Object 1D - switch that activates when Sonic touches it
00008958                            ; (this	is not used anywhere in	the game)
00008958                            ; ---------------------------------------------------------------------------
00008958                            
00008958                            Obj1D:					; XREF: Obj_Index
00008958 7000                       		moveq	#0,d0
0000895A 1028 0024                  		move.b	$24(a0),d0
0000895E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008962 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008966                            ; ===========================================================================
00008966 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008968 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000896A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000896C                            ; ===========================================================================
0000896C                            
0000896C                            Obj1D_Main:				; XREF: Obj1D_Index
0000896C 5428 0024                  		addq.b	#2,$24(a0)
00008970 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008978 317C 4000 0002             		move.w	#$4000,2(a0)
0000897E 117C 0004 0001             		move.b	#4,1(a0)
00008984 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000898A 117C 0010 0019             		move.b	#$10,$19(a0)
00008990 117C 0005 0018             		move.b	#5,$18(a0)
00008996                            
00008996                            Obj1D_Action:				; XREF: Obj1D_Index
00008996 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000899C 323C 0010                  		move.w	#$10,d1
000089A0 6100 0000                  		bsr.w	Obj1D_ChkTouch
000089A4 6700                       		beq.s	Obj1D_ChkDel
000089A6 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000089AA 7001                       		moveq	#1,d0
000089AC 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000089B0                            
000089B0                            Obj1D_ChkDel:
000089B0 6100 0000                  		bsr.w	DisplaySprite
000089B4 3028 0008                  		move.w	8(a0),d0
000089B8 0240 FF80                  		andi.w	#$FF80,d0
000089BC 3238 F700                  		move.w	($FFFFF700).w,d1
000089C0 0441 0080                  		subi.w	#$80,d1
000089C4 0241 FF80                  		andi.w	#$FF80,d1
000089C8 9041                       		sub.w	d1,d0
000089CA 0C40 0280                  		cmpi.w	#$280,d0
000089CE 6200 0000                  		bhi.w	Obj1D_Delete
000089D2 4E75                       		rts	
000089D4                            ; ===========================================================================
000089D4                            
000089D4                            Obj1D_Delete:				; XREF: Obj1D_Index
000089D4 6100 0000                  		bsr.w	DeleteObject
000089D8 4E75                       		rts	
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            ; Subroutine to	check if Sonic touches the object
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            
000089DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089DA                            
000089DA                            
000089DA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000089DA 43F8 D000                  		lea	($FFFFD000).w,a1
000089DE 3029 0008                  		move.w	8(a1),d0
000089E2 9068 0008                  		sub.w	8(a0),d0
000089E6 D041                       		add.w	d1,d0
000089E8 6B00                       		bmi.s	loc_8918
000089EA D241                       		add.w	d1,d1
000089EC B041                       		cmp.w	d1,d0
000089EE 6400                       		bcc.s	loc_8918
000089F0 3429 000C                  		move.w	$C(a1),d2
000089F4 1229 0016                  		move.b	$16(a1),d1
000089F8 4881                       		ext.w	d1
000089FA D242                       		add.w	d2,d1
000089FC 3028 000C                  		move.w	$C(a0),d0
00008A00 0440 0010                  		subi.w	#$10,d0
00008A04 9041                       		sub.w	d1,d0
00008A06 6200                       		bhi.s	loc_8918
00008A08 0C40 FFF0                  		cmpi.w	#-$10,d0
00008A0C 6500                       		bcs.s	loc_8918
00008A0E 70FF                       		moveq	#-1,d0
00008A10 4E75                       		rts	
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            loc_8918:
00008A12 7000                       		moveq	#0,d0
00008A14 4E75                       		rts	
00008A16                            ; End of function Obj1D_ChkTouch
00008A16                            
00008A16                            ; ===========================================================================
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Sprite mappings - object 1D
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            Map_obj1D:
00008A16                            	include "_maps\obj1D.asm"
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Sprite mappings - object 1D
00008A16                            ; ---------------------------------------------------------------------------
00008A16 0000                       		dc.w byte_891E-Map_obj1D
00008A18 04                         byte_891E:	dc.b 4
00008A19 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008A1E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008A23 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008A28 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008A2E 00                         		even
00008A2E 00                         		even
00008A2E                            
00008A2E                            ; ===========================================================================
00008A2E                            ; ---------------------------------------------------------------------------
00008A2E                            ; Object 2A - doors (SBZ)
00008A2E                            ; ---------------------------------------------------------------------------
00008A2E                            
00008A2E                            Obj2A:					; XREF: Obj_Index
00008A2E 7000                       		moveq	#0,d0
00008A30 1028 0024                  		move.b	$24(a0),d0
00008A34 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008A38 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008A3C                            ; ===========================================================================
00008A3C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008A3E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008A40                            ; ===========================================================================
00008A40                            
00008A40                            Obj2A_Main:				; XREF: Obj2A_Index
00008A40 5428 0024                  		addq.b	#2,$24(a0)
00008A44 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008A4C 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008A52 0028 0004 0001             		ori.b	#4,1(a0)
00008A58 117C 0008 0019             		move.b	#8,$19(a0)
00008A5E 117C 0004 0018             		move.b	#4,$18(a0)
00008A64                            
00008A64                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008A64 323C 0040                  		move.w	#$40,d1
00008A68 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008A6C 3038 D008                  		move.w	($FFFFD008).w,d0
00008A70 D041                       		add.w	d1,d0
00008A72 B068 0008                  		cmp.w	8(a0),d0
00008A76 6500                       		bcs.s	Obj2A_Animate
00008A78 9041                       		sub.w	d1,d0
00008A7A 9041                       		sub.w	d1,d0
00008A7C B068 0008                  		cmp.w	8(a0),d0
00008A80 6400                       		bcc.s	Obj2A_Animate
00008A82 D041                       		add.w	d1,d0
00008A84 B068 0008                  		cmp.w	8(a0),d0
00008A88 6400                       		bcc.s	loc_899A
00008A8A 0828 0000 0022             		btst	#0,$22(a0)
00008A90 6600                       		bne.s	Obj2A_Animate
00008A92 6000                       		bra.s	Obj2A_Open
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            loc_899A:				; XREF: Obj2A_OpenShut
00008A94 0828 0000 0022             		btst	#0,$22(a0)
00008A9A 6700                       		beq.s	Obj2A_Animate
00008A9C                            
00008A9C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008A9C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008AA2                            
00008AA2                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008AA2 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008AA8 6100 0000                  		bsr.w	AnimateSprite
00008AAC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008AB0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008AB2 323C 0011                  		move.w	#$11,d1
00008AB6 343C 0020                  		move.w	#$20,d2
00008ABA 3602                       		move.w	d2,d3
00008ABC 5243                       		addq.w	#1,d3
00008ABE 3828 0008                  		move.w	8(a0),d4
00008AC2 6100 0000                  		bsr.w	SolidObject
00008AC6                            
00008AC6                            Obj2A_MarkAsUsed:
00008AC6 6000 0000                  		bra.w	MarkObjGone
00008ACA                            ; ===========================================================================
00008ACA                            Ani_obj2A:
00008ACA                            	include "_anim\obj2A.asm"
00008ACA                            ; ---------------------------------------------------------------------------
00008ACA                            ; Animation script - doors (SBZ)
00008ACA                            ; ---------------------------------------------------------------------------
00008ACA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008ACC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008ACE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008ADA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008AE6                            		even
00008AE6                            		even
00008AE6                            
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Sprite mappings - doors (SBZ)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            Map_obj2A:
00008AE6                            	include "_maps\obj2A.asm"
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Sprite mappings - doors (SBZ)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008AEA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008AEE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008AF2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008AF6 0000                       		dc.w byte_8A56-Map_obj2A
00008AF8 02                         byte_89FE:	dc.b 2
00008AF9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008AFE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008B03 02                         byte_8A09:	dc.b 2
00008B04 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008B09 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008B0E 02                         byte_8A14:	dc.b 2
00008B0F D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008B14 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008B19 02                         byte_8A1F:	dc.b 2
00008B1A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008B1F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008B24 02                         byte_8A2A:	dc.b 2
00008B25 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008B2A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008B2F 02                         byte_8A35:	dc.b 2
00008B30 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008B35 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008B3A 02                         byte_8A40:	dc.b 2
00008B3B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008B40 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008B45 02                         byte_8A4B:	dc.b 2
00008B46 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008B4B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008B50 02                         byte_8A56:	dc.b 2
00008B51 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008B56 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008B5C 00                         		even
00008B5C 00                         		even
00008B5C                            
00008B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B5C                            
00008B5C                            
00008B5C                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008B5C 6100 0000                  		bsr.w	Obj44_SolidWall2
00008B60 6700                       		beq.s	loc_8AA8
00008B62 6B00 0000                  		bmi.w	loc_8AC4
00008B66 4A40                       		tst.w	d0
00008B68 6700 0000                  		beq.w	loc_8A92
00008B6C 6B00                       		bmi.s	loc_8A7C
00008B6E 4A69 0010                  		tst.w	$10(a1)
00008B72 6B00                       		bmi.s	loc_8A92
00008B74 6000                       		bra.s	loc_8A82
00008B76                            ; ===========================================================================
00008B76                            
00008B76                            loc_8A7C:
00008B76 4A69 0010                  		tst.w	$10(a1)
00008B7A 6A00                       		bpl.s	loc_8A92
00008B7C                            
00008B7C                            loc_8A82:
00008B7C 9169 0008                  		sub.w	d0,8(a1)
00008B80 337C 0000 0014             		move.w	#0,$14(a1)
00008B86 337C 0000 0010             		move.w	#0,$10(a1)
00008B8C                            
00008B8C                            loc_8A92:
00008B8C 0829 0001 0022             		btst	#1,$22(a1)
00008B92 6600                       		bne.s	loc_8AB6
00008B94 08E9 0005 0022             		bset	#5,$22(a1)
00008B9A 08E8 0005 0022             		bset	#5,$22(a0)
00008BA0 4E75                       		rts	
00008BA2                            ; ===========================================================================
00008BA2                            
00008BA2                            loc_8AA8:
00008BA2 0828 0005 0022             		btst	#5,$22(a0)
00008BA8 6700                       		beq.s	locret_8AC2
00008BAA 337C 0001 001C             		move.w	#1,$1C(a1)
00008BB0                            
00008BB0                            loc_8AB6:
00008BB0 08A8 0005 0022             		bclr	#5,$22(a0)
00008BB6 08A9 0005 0022             		bclr	#5,$22(a1)
00008BBC                            
00008BBC                            locret_8AC2:
00008BBC 4E75                       		rts	
00008BBE                            ; ===========================================================================
00008BBE                            
00008BBE                            loc_8AC4:
00008BBE 4A69 0012                  		tst.w	$12(a1)
00008BC2 6A00                       		bpl.s	locret_8AD8
00008BC4 4A43                       		tst.w	d3
00008BC6 6A00                       		bpl.s	locret_8AD8
00008BC8 9769 000C                  		sub.w	d3,$C(a1)
00008BCC 337C 0000 0012             		move.w	#0,$12(a1)
00008BD2                            
00008BD2                            locret_8AD8:
00008BD2 4E75                       		rts	
00008BD4                            ; End of function Obj44_SolidWall
00008BD4                            
00008BD4                            
00008BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BD4                            
00008BD4                            
00008BD4                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008BD4 43F8 D000                  		lea	($FFFFD000).w,a1
00008BD8 3029 0008                  		move.w	8(a1),d0
00008BDC 9068 0008                  		sub.w	8(a0),d0
00008BE0 D041                       		add.w	d1,d0
00008BE2 6B00                       		bmi.s	loc_8B48
00008BE4 3601                       		move.w	d1,d3
00008BE6 D643                       		add.w	d3,d3
00008BE8 B043                       		cmp.w	d3,d0
00008BEA 6200                       		bhi.s	loc_8B48
00008BEC 1629 0016                  		move.b	$16(a1),d3
00008BF0 4883                       		ext.w	d3
00008BF2 D443                       		add.w	d3,d2
00008BF4 3629 000C                  		move.w	$C(a1),d3
00008BF8 9668 000C                  		sub.w	$C(a0),d3
00008BFC D642                       		add.w	d2,d3
00008BFE 6B00                       		bmi.s	loc_8B48
00008C00 3802                       		move.w	d2,d4
00008C02 D844                       		add.w	d4,d4
00008C04 B644                       		cmp.w	d4,d3
00008C06 6400                       		bcc.s	loc_8B48
00008C08 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0C 6B00                       		bmi.s	loc_8B48
00008C0E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C14 6400                       		bcc.s	loc_8B48
00008C16 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C1A 6600                       		bne.s	loc_8B48
00008C1C 3A00                       		move.w	d0,d5
00008C1E B240                       		cmp.w	d0,d1
00008C20 6400                       		bcc.s	loc_8B30
00008C22 D241                       		add.w	d1,d1
00008C24 9041                       		sub.w	d1,d0
00008C26 3A00                       		move.w	d0,d5
00008C28 4445                       		neg.w	d5
00008C2A                            
00008C2A                            loc_8B30:
00008C2A 3203                       		move.w	d3,d1
00008C2C B443                       		cmp.w	d3,d2
00008C2E 6400                       		bcc.s	loc_8B3C
00008C30 9644                       		sub.w	d4,d3
00008C32 3203                       		move.w	d3,d1
00008C34 4441                       		neg.w	d1
00008C36                            
00008C36                            loc_8B3C:
00008C36 BA41                       		cmp.w	d1,d5
00008C38 6200                       		bhi.s	loc_8B44
00008C3A 7801                       		moveq	#1,d4
00008C3C 4E75                       		rts	
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            loc_8B44:
00008C3E 78FF                       		moveq	#-1,d4
00008C40 4E75                       		rts	
00008C42                            ; ===========================================================================
00008C42                            
00008C42                            loc_8B48:
00008C42 7800                       		moveq	#0,d4
00008C44 4E75                       		rts	
00008C46                            ; End of function Obj44_SolidWall2
00008C46                            
00008C46                            ; ===========================================================================
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            ; Object 1E - Ball Hog enemy (SBZ)
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            
00008C46                            Obj1E:					; XREF: Obj_Index
00008C46 7000                       		moveq	#0,d0
00008C48 1028 0024                  		move.b	$24(a0),d0
00008C4C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008C50 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008C54                            ; ===========================================================================
00008C54 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008C56 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008C58                            ; ===========================================================================
00008C58                            
00008C58                            Obj1E_Main:				; XREF: Obj1E_Index
00008C58 117C 0013 0016             		move.b	#$13,$16(a0)
00008C5E 117C 0008 0017             		move.b	#8,$17(a0)
00008C64 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008C6C 317C 2302 0002             		move.w	#$2302,2(a0)
00008C72 117C 0004 0001             		move.b	#4,1(a0)
00008C78 117C 0004 0018             		move.b	#4,$18(a0)
00008C7E 117C 0005 0020             		move.b	#5,$20(a0)
00008C84 117C 000C 0019             		move.b	#$C,$19(a0)
00008C8A 6100 0000                  		bsr.w	ObjectFall
00008C8E 4EB9 0000 0000             		jsr	ObjHitFloor
00008C94 4A41                       		tst.w	d1
00008C96 6A00                       		bpl.s	locret_8BAC
00008C98 D368 000C                  		add.w	d1,$C(a0)
00008C9C 317C 0000 0012             		move.w	#0,$12(a0)
00008CA2 5428 0024                  		addq.b	#2,$24(a0)
00008CA6                            
00008CA6                            locret_8BAC:
00008CA6 4E75                       		rts	
00008CA8                            ; ===========================================================================
00008CA8                            
00008CA8                            Obj1E_Action:				; XREF: Obj1E_Index
00008CA8 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008CAE 6100 0000                  		bsr.w	AnimateSprite
00008CB2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008CB8 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008CBA 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008CBE 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008CC0 6000                       		bra.s	Obj1E_MarkAsGone
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008CC2 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008CC6                            
00008CC6                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008CC6 6000 0000                  		bra.w	MarkObjGone
00008CCA                            ; ===========================================================================
00008CCA                            
00008CCA                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008CCA 117C 0001 0032             		move.b	#1,$32(a0)
00008CD0 6100 0000                  		bsr.w	SingleObjLoad
00008CD4 6600                       		bne.s	loc_8C1A
00008CD6 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008CDA 3368 0008 0008             		move.w	8(a0),8(a1)
00008CE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008CE6 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008CEC 337C 0000 0012             		move.w	#0,$12(a1)
00008CF2 70FC                       		moveq	#-4,d0
00008CF4 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008CFA 6700                       		beq.s	loc_8C0A	; if not, branch
00008CFC 4440                       		neg.w	d0
00008CFE 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008D02                            
00008D02                            loc_8C0A:
00008D02 D169 0008                  		add.w	d0,8(a1)
00008D06 0669 000C 000C             		addi.w	#$C,$C(a1)
00008D0C 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008D12                            
00008D12                            loc_8C1A:
00008D12 60B2                       		bra.s	Obj1E_MarkAsGone
00008D14                            ; ===========================================================================
00008D14                            ; ---------------------------------------------------------------------------
00008D14                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008D14                            ; ---------------------------------------------------------------------------
00008D14                            
00008D14                            Obj20:					; XREF: Obj_Index
00008D14 7000                       		moveq	#0,d0
00008D16 1028 0024                  		move.b	$24(a0),d0
00008D1A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008D1E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008D22                            ; ===========================================================================
00008D22 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008D24 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008D26                            ; ===========================================================================
00008D26                            
00008D26                            Obj20_Main:				; XREF: Obj20_Index
00008D26 5428 0024                  		addq.b	#2,$24(a0)
00008D2A 117C 0007 0016             		move.b	#7,$16(a0)
00008D30 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008D38 317C 2302 0002             		move.w	#$2302,2(a0)
00008D3E 117C 0004 0001             		move.b	#4,1(a0)
00008D44 117C 0003 0018             		move.b	#3,$18(a0)
00008D4A 117C 0087 0020             		move.b	#$87,$20(a0)
00008D50 117C 0008 0019             		move.b	#8,$19(a0)
00008D56 7000                       		moveq	#0,d0
00008D58 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008D5C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008D60 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008D64 117C 0004 001A             		move.b	#4,$1A(a0)
00008D6A                            
00008D6A                            Obj20_Bounce:				; XREF: Obj20_Index
00008D6A 4EB9 0000 0000             		jsr	ObjectFall
00008D70 4A68 0012                  		tst.w	$12(a0)
00008D74 6B00                       		bmi.s	Obj20_ChkExplode
00008D76 4EB9 0000 0000             		jsr	ObjHitFloor
00008D7C 4A41                       		tst.w	d1
00008D7E 6A00                       		bpl.s	Obj20_ChkExplode
00008D80 D368 000C                  		add.w	d1,$C(a0)
00008D84 317C FD00 0012             		move.w	#-$300,$12(a0)
00008D8A 4A03                       		tst.b	d3
00008D8C 6700                       		beq.s	Obj20_ChkExplode
00008D8E 6B00                       		bmi.s	loc_8CA4
00008D90 4A68 0010                  		tst.w	$10(a0)
00008D94 6A00                       		bpl.s	Obj20_ChkExplode
00008D96 4468 0010                  		neg.w	$10(a0)
00008D9A 6000                       		bra.s	Obj20_ChkExplode
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            loc_8CA4:				; XREF: Obj20_Bounce
00008D9C 4A68 0010                  		tst.w	$10(a0)
00008DA0 6B00                       		bmi.s	Obj20_ChkExplode
00008DA2 4468 0010                  		neg.w	$10(a0)
00008DA6                            
00008DA6                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008DA6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008DAA 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008DAC 10BC 0024                  		move.b	#$24,0(a0)
00008DB0 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008DB4 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008DBA 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008DBE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DC2 6A00                       		bpl.s	Obj20_Display
00008DC4 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008DCA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008DD0                            
00008DD0                            Obj20_Display:
00008DD0 6100 0000                  		bsr.w	DisplaySprite
00008DD4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008DD8 0640 00E0                  		addi.w	#$E0,d0
00008DDC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008DE0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008DE4 4E75                       		rts	
00008DE6                            ; ===========================================================================
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            ; Object 24 - explosion	from a destroyed monitor
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            
00008DE6                            Obj24:					; XREF: Obj_Index
00008DE6 7000                       		moveq	#0,d0
00008DE8 1028 0024                  		move.b	$24(a0),d0
00008DEC 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008DF0 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008DF4                            ; ===========================================================================
00008DF4 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008DF6 0000                       		dc.w Obj24_Animate-Obj24_Index
00008DF8                            ; ===========================================================================
00008DF8                            
00008DF8                            Obj24_Main:				; XREF: Obj24_Index
00008DF8 5428 0024                  		addq.b	#2,$24(a0)
00008DFC 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008E04 317C 041C 0002             		move.w	#$41C,2(a0)
00008E0A 117C 0004 0001             		move.b	#4,1(a0)
00008E10 117C 0001 0018             		move.b	#1,$18(a0)
00008E16 117C 0000 0020             		move.b	#0,$20(a0)
00008E1C 117C 000C 0019             		move.b	#$C,$19(a0)
00008E22 117C 0009 001E             		move.b	#9,$1E(a0)
00008E28 117C 0000 001A             		move.b	#0,$1A(a0)
00008E2E 303C 00A5                  		move.w	#$A5,d0
00008E32 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play explosion sound
00008E38                            
00008E38                            Obj24_Animate:				; XREF: Obj24_Index
00008E38 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008E3C 6A00                       		bpl.s	Obj24_Display
00008E3E 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008E44 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008E48 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008E4E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008E52                            
00008E52                            Obj24_Display:
00008E52 6000 0000                  		bra.w	DisplaySprite
00008E56                            ; ===========================================================================
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            ; Object 27 - explosion	from a destroyed enemy
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            
00008E56                            Obj27:					; XREF: Obj_Index
00008E56 7000                       		moveq	#0,d0
00008E58 1028 0024                  		move.b	$24(a0),d0
00008E5C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008E60 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008E64                            ; ===========================================================================
00008E64 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008E66 0000                       		dc.w Obj27_Main-Obj27_Index
00008E68 0000                       		dc.w Obj27_Animate-Obj27_Index
00008E6A                            ; ===========================================================================
00008E6A                            
00008E6A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008E6A 5428 0024                  		addq.b	#2,$24(a0)
00008E6E 6100 0000                  		bsr.w	SingleObjLoad
00008E72 6600                       		bne.s	Obj27_Main
00008E74 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008E78 3368 0008 0008             		move.w	8(a0),8(a1)
00008E7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008E84 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008E8A                            
00008E8A                            Obj27_Main:				; XREF: Obj27_Index
00008E8A 5428 0024                  		addq.b	#2,$24(a0)
00008E8E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008E96 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008E9C 117C 0004 0001             		move.b	#4,1(a0)
00008EA2 117C 0001 0018             		move.b	#1,$18(a0)
00008EA8 117C 0000 0020             		move.b	#0,$20(a0)
00008EAE 117C 000C 0019             		move.b	#$C,$19(a0)
00008EB4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008EBA 117C 0000 001A             		move.b	#0,$1A(a0)
00008EC0 303C 00C1                  		move.w	#$C1,d0
00008EC4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008ECA                            
00008ECA                            Obj27_Animate:				; XREF: Obj27_Index
00008ECA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008ECE 6A00                       		bpl.s	Obj27_Display
00008ED0 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008ED6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008EDA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008EE0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008EE4                            
00008EE4                            Obj27_Display:
00008EE4 6000 0000                  		bra.w	DisplaySprite
00008EE8                            ; ===========================================================================
00008EE8                            ; ---------------------------------------------------------------------------
00008EE8                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008EE8                            ; ---------------------------------------------------------------------------
00008EE8                            
00008EE8                            Obj3F:					; XREF: Obj_Index
00008EE8 7000                       		moveq	#0,d0
00008EEA 1028 0024                  		move.b	$24(a0),d0
00008EEE 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008EF2 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008EF6                            ; ===========================================================================
00008EF6 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008EF8 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            Obj3F_Main:				; XREF: Obj3F_Index
00008EFA 5428 0024                  		addq.b	#2,$24(a0)
00008EFE 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008F06 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008F0C 117C 0004 0001             		move.b	#4,1(a0)
00008F12 117C 0001 0018             		move.b	#1,$18(a0)
00008F18 117C 0000 0020             		move.b	#0,$20(a0)
00008F1E 117C 000C 0019             		move.b	#$C,$19(a0)
00008F24 117C 0007 001E             		move.b	#7,$1E(a0)
00008F2A 117C 0000 001A             		move.b	#0,$1A(a0)
00008F30 303C 00C4                  		move.w	#$C4,d0
00008F34 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008F3A                            ; ===========================================================================
00008F3A                            Ani_obj1E:
00008F3A                            	include "_anim\obj1E.asm"
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            ; Animation script - doors (SBZ)
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A 0000                       		dc.w byte_8E4A-Ani_obj1E
00008F3C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008F54 00                         		even
00008F54 00                         		even
00008F54                            
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            Map_obj1E:
00008F54                            	include "_maps\obj1E.asm"
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F54                            ; ---------------------------------------------------------------------------
00008F54 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008F58 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008F5C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008F60 02                         byte_8E6E:	dc.b 2
00008F61 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F66 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008F6B 02                         byte_8E79:	dc.b 2
00008F6C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F71 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008F76 02                         byte_8E84:	dc.b 2
00008F77 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008F7C 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008F81 02                         byte_8E8F:	dc.b 2
00008F82 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008F87 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008F8C 01                         byte_8E9A:	dc.b 1
00008F8D F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008F92 01                         byte_8EA0:	dc.b 1
00008F93 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008F98                            		even
00008F98                            		even
00008F98                            
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Sprite mappings - explosion
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            Map_obj24:
00008F98                            	include "_maps\obj24.asm"
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Sprite mappings - explosion
00008F98                            ; ---------------------------------------------------------------------------
00008F98 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008F9C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008FA0 01                         byte_8EAE:	dc.b 1
00008FA1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008FA6 01                         byte_8EB4:	dc.b 1
00008FA7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008FAC 01                         byte_8EBA:	dc.b 1
00008FAD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008FB2 01                         byte_8EC0:	dc.b 1
00008FB3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008FB8                            		even
00008FB8                            		even
00008FB8                            
00008FB8                            ; ---------------------------------------------------------------------------
00008FB8                            ; Sprite mappings - explosion
00008FB8                            ; ---------------------------------------------------------------------------
00008FB8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008FBC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008FC0 0000                       		dc.w byte_8EF7-Map_obj27
00008FC2 01                         byte_8ED0:	dc.b 1
00008FC3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008FC8 01                         byte_8ED6:	dc.b 1
00008FC9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008FCE 01                         byte_8EDC:	dc.b 1
00008FCF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008FD4 04                         byte_8EE2:	dc.b 4
00008FD5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008FDA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008FDF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008FE4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008FE9 04                         byte_8EF7:	dc.b 4
00008FEA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008FEF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008FF4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008FF9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008FFE                            		even
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE                            ; Sprite mappings - explosion from when	a boss is destroyed
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009000 0000                       		dc.w byte_8F16-Map_obj3F
00009002 0000                       		dc.w byte_8F1C-Map_obj3F
00009004 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009006 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009008 01                         byte_8F16:	dc.b 1
00009009 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000900E 01                         byte_8F1C:	dc.b 1
0000900F F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009014                            		even
00009014                            ; ===========================================================================
00009014                            ; ---------------------------------------------------------------------------
00009014                            ; Object 28 - animals
00009014                            ; ---------------------------------------------------------------------------
00009014                            
00009014                            Obj28:					; XREF: Obj_Index
00009014 7000                       		moveq	#0,d0
00009016 1028 0024                  		move.b	$24(a0),d0
0000901A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000901E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009022                            ; ===========================================================================
00009022 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009026 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000902A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000902E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009032 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009036 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000903A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000903E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009042 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009046 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000904A 0000                       		dc.w loc_92D6-Obj28_Index
0000904C                            
0000904C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009058                            
00009058 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000905C 0000 0000                  		dc.l Map_obj28
00009060 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009064 0000 0000                  		dc.l Map_obj28a		; mappings address
00009068 FE80 FD00                  		dc.w $FE80, $FD00
0000906C 0000 0000                  		dc.l Map_obj28
00009070 FEC0 FE80                  		dc.w $FEC0, $FE80
00009074 0000 0000                  		dc.l Map_obj28a
00009078 FE40 FD00                  		dc.w $FE40, $FD00
0000907C 0000 0000                  		dc.l Map_obj28b
00009080 FD00 FC00                  		dc.w $FD00, $FC00
00009084 0000 0000                  		dc.l Map_obj28a
00009088 FD80 FC80                  		dc.w $FD80, $FC80
0000908C 0000 0000                  		dc.l Map_obj28b
00009090                            
00009090 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000090A0 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000090B0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000090BC                            
000090BC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000090D0 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000090E4 0000 0000                  		dc.l Map_obj28b
000090E8                            
000090E8 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000090FA 0565 05B3                  		dc.w $565, $5B3
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            Obj28_Ending:				; XREF: Obj28_Index
000090FE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009102 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009106 7000                       		moveq	#0,d0
00009108 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000910C D040                       		add.w	d0,d0		; multiply d0 by 2
0000910E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009112 0440 0014                  		subi.w	#$14,d0
00009116 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000911C D040                       		add.w	d0,d0
0000911E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009124 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009128 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000912E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009134 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000913A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009140 117C 000C 0016             		move.b	#$C,$16(a0)
00009146 117C 0004 0001             		move.b	#4,1(a0)
0000914C 08E8 0000 0001             		bset	#0,1(a0)
00009152 117C 0006 0018             		move.b	#6,$18(a0)
00009158 117C 0008 0019             		move.b	#8,$19(a0)
0000915E 117C 0007 001E             		move.b	#7,$1E(a0)
00009164 6000 0000                  		bra.w	DisplaySprite
00009168                            ; ===========================================================================
00009168                            
00009168                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009168 5428 0024                  		addq.b	#2,$24(a0)
0000916C 6100 9846                  		bsr.w	RandomNumber
00009170 0240 0001                  		andi.w	#1,d0
00009174 7200                       		moveq	#0,d1
00009176 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000917A D241                       		add.w	d1,d1
0000917C D240                       		add.w	d0,d1
0000917E 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009182 1031 1000                  		move.b	(a1,d1.w),d0
00009186 1140 0030                  		move.b	d0,$30(a0)
0000918A E748                       		lsl.w	#3,d0
0000918C 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009190 D2C0                       		adda.w	d0,a1
00009192 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009196 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000919A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000919E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000091A4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000091AA 6700                       		beq.s	loc_90C0	; if yes, branch
000091AC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000091B2                            
000091B2                            loc_90C0:
000091B2 117C 000C 0016             		move.b	#$C,$16(a0)
000091B8 117C 0004 0001             		move.b	#4,1(a0)
000091BE 08E8 0000 0001             		bset	#0,1(a0)
000091C4 117C 0006 0018             		move.b	#6,$18(a0)
000091CA 117C 0008 0019             		move.b	#8,$19(a0)
000091D0 117C 0007 001E             		move.b	#7,$1E(a0)
000091D6 117C 0002 001A             		move.b	#2,$1A(a0)
000091DC 317C FC00 0012             		move.w	#-$400,$12(a0)
000091E2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000091E6 6600                       		bne.s	loc_911C
000091E8 6100 0000                  		bsr.w	SingleObjLoad
000091EC 6600                       		bne.s	Obj28_Display
000091EE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000091F2 3368 0008 0008             		move.w	8(a0),8(a1)
000091F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091FE 3028 003E                  		move.w	$3E(a0),d0
00009202 E248                       		lsr.w	#1,d0
00009204 1340 001A                  		move.b	d0,$1A(a1)
00009208                            
00009208                            Obj28_Display:
00009208 6000 0000                  		bra.w	DisplaySprite
0000920C                            ; ===========================================================================
0000920C                            
0000920C                            loc_911C:
0000920C 117C 0012 0024             		move.b	#$12,$24(a0)
00009212 4268 0010                  		clr.w	$10(a0)
00009216 6000 0000                  		bra.w	DisplaySprite
0000921A                            ; ===========================================================================
0000921A                            
0000921A                            loc_912A:				; XREF: Obj28_Index
0000921A 4A28 0001                  		tst.b	1(a0)
0000921E 6A00 0000                  		bpl.w	DeleteObject
00009222 6100 0000                  		bsr.w	ObjectFall
00009226 4A68 0012                  		tst.w	$12(a0)
0000922A 6B00                       		bmi.s	loc_9180
0000922C 4EB9 0000 0000             		jsr	ObjHitFloor
00009232 4A41                       		tst.w	d1
00009234 6A00                       		bpl.s	loc_9180
00009236 D368 000C                  		add.w	d1,$C(a0)
0000923A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009240 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009246 117C 0001 001A             		move.b	#1,$1A(a0)
0000924C 1028 0030                  		move.b	$30(a0),d0
00009250 D000                       		add.b	d0,d0
00009252 5800                       		addq.b	#4,d0
00009254 1140 0024                  		move.b	d0,$24(a0)
00009258 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000925C 6700                       		beq.s	loc_9180
0000925E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009264 6700                       		beq.s	loc_9180
00009266 4468 0010                  		neg.w	$10(a0)
0000926A 0868 0000 0001             		bchg	#0,1(a0)
00009270                            
00009270                            loc_9180:
00009270 6000 0000                  		bra.w	DisplaySprite
00009274                            ; ===========================================================================
00009274                            
00009274                            loc_9184:				; XREF: Obj28_Index
00009274 6100 0000                  		bsr.w	ObjectFall
00009278 117C 0001 001A             		move.b	#1,$1A(a0)
0000927E 4A68 0012                  		tst.w	$12(a0)
00009282 6B00                       		bmi.s	loc_91AE
00009284 117C 0000 001A             		move.b	#0,$1A(a0)
0000928A 4EB9 0000 0000             		jsr	ObjHitFloor
00009290 4A41                       		tst.w	d1
00009292 6A00                       		bpl.s	loc_91AE
00009294 D368 000C                  		add.w	d1,$C(a0)
00009298 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000929E                            
0000929E                            loc_91AE:
0000929E 4A28 0028                  		tst.b	$28(a0)
000092A2 6600                       		bne.s	loc_9224
000092A4 4A28 0001                  		tst.b	1(a0)
000092A8 6A00 0000                  		bpl.w	DeleteObject
000092AC 6000 0000                  		bra.w	DisplaySprite
000092B0                            ; ===========================================================================
000092B0                            
000092B0                            loc_91C0:				; XREF: Obj28_Index
000092B0 6100 0000                  		bsr.w	SpeedToPos
000092B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000092BA 4A68 0012                  		tst.w	$12(a0)
000092BE 6B00                       		bmi.s	loc_91FC
000092C0 4EB9 0000 0000             		jsr	ObjHitFloor
000092C6 4A41                       		tst.w	d1
000092C8 6A00                       		bpl.s	loc_91FC
000092CA D368 000C                  		add.w	d1,$C(a0)
000092CE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092D4 4A28 0028                  		tst.b	$28(a0)
000092D8 6700                       		beq.s	loc_91FC
000092DA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000092E0 6700                       		beq.s	loc_91FC
000092E2 4468 0010                  		neg.w	$10(a0)
000092E6 0868 0000 0001             		bchg	#0,1(a0)
000092EC                            
000092EC                            loc_91FC:
000092EC 5328 001E                  		subq.b	#1,$1E(a0)
000092F0 6A00                       		bpl.s	loc_9212
000092F2 117C 0001 001E             		move.b	#1,$1E(a0)
000092F8 5228 001A                  		addq.b	#1,$1A(a0)
000092FC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009302                            
00009302                            loc_9212:
00009302 4A28 0028                  		tst.b	$28(a0)
00009306 6600                       		bne.s	loc_9224
00009308 4A28 0001                  		tst.b	1(a0)
0000930C 6A00 0000                  		bpl.w	DeleteObject
00009310 6000 0000                  		bra.w	DisplaySprite
00009314                            ; ===========================================================================
00009314                            
00009314                            loc_9224:				; XREF: Obj28_Index
00009314 3028 0008                  		move.w	8(a0),d0
00009318 9078 D008                  		sub.w	($FFFFD008).w,d0
0000931C 6500                       		bcs.s	loc_923C
0000931E 0440 0180                  		subi.w	#$180,d0
00009322 6A00                       		bpl.s	loc_923C
00009324 4A28 0001                  		tst.b	1(a0)
00009328 6A00 0000                  		bpl.w	DeleteObject
0000932C                            
0000932C                            loc_923C:
0000932C 6000 0000                  		bra.w	DisplaySprite
00009330                            ; ===========================================================================
00009330                            
00009330                            loc_9240:				; XREF: Obj28_Index
00009330 4A28 0001                  		tst.b	1(a0)
00009334 6A00 0000                  		bpl.w	DeleteObject
00009338 5368 0036                  		subq.w	#1,$36(a0)
0000933C 6600 0000                  		bne.w	loc_925C
00009340 117C 0002 0024             		move.b	#2,$24(a0)
00009346 117C 0003 0018             		move.b	#3,$18(a0)
0000934C                            
0000934C                            loc_925C:
0000934C 6000 0000                  		bra.w	DisplaySprite
00009350                            ; ===========================================================================
00009350                            
00009350                            loc_9260:				; XREF: Obj28_Index
00009350 6100 0000                  		bsr.w	sub_9404
00009354 6400                       		bcc.s	loc_927C
00009356 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000935C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009362 117C 000E 0024             		move.b	#$E,$24(a0)
00009368 6000 FF46                  		bra.w	loc_91C0
0000936C                            ; ===========================================================================
0000936C                            
0000936C                            loc_927C:
0000936C 6000 FFA6                  		bra.w	loc_9224
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_9280:				; XREF: Obj28_Index
00009370 6100 0000                  		bsr.w	sub_9404
00009374 6A00                       		bpl.s	loc_92B6
00009376 4268 0010                  		clr.w	$10(a0)
0000937A 4268 0032                  		clr.w	$32(a0)
0000937E 6100 0000                  		bsr.w	SpeedToPos
00009382 0668 0018 0012             		addi.w	#$18,$12(a0)
00009388 6100 0000                  		bsr.w	loc_93C4
0000938C 6100 0000                  		bsr.w	loc_93EC
00009390 5328 001E                  		subq.b	#1,$1E(a0)
00009394 6A00                       		bpl.s	loc_92B6
00009396 117C 0001 001E             		move.b	#1,$1E(a0)
0000939C 5228 001A                  		addq.b	#1,$1A(a0)
000093A0 0228 0001 001A             		andi.b	#1,$1A(a0)
000093A6                            
000093A6                            loc_92B6:
000093A6 6000 FF6C                  		bra.w	loc_9224
000093AA                            ; ===========================================================================
000093AA                            
000093AA                            loc_92BA:				; XREF: Obj28_Index
000093AA 6100 0000                  		bsr.w	sub_9404
000093AE 6A00                       		bpl.s	loc_9310
000093B0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000093B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093BC 117C 0004 0024             		move.b	#4,$24(a0)
000093C2 6000 FEB0                  		bra.w	loc_9184
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            loc_92D6:				; XREF: Obj28_Index
000093C6 6100 0000                  		bsr.w	ObjectFall
000093CA 117C 0001 001A             		move.b	#1,$1A(a0)
000093D0 4A68 0012                  		tst.w	$12(a0)
000093D4 6B00                       		bmi.s	loc_9310
000093D6 117C 0000 001A             		move.b	#0,$1A(a0)
000093DC 4EB9 0000 0000             		jsr	ObjHitFloor
000093E2 4A41                       		tst.w	d1
000093E4 6A00                       		bpl.s	loc_9310
000093E6 4628 0029                  		not.b	$29(a0)
000093EA 6600                       		bne.s	loc_9306
000093EC 4468 0010                  		neg.w	$10(a0)
000093F0 0868 0000 0001             		bchg	#0,1(a0)
000093F6                            
000093F6                            loc_9306:
000093F6 D368 000C                  		add.w	d1,$C(a0)
000093FA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009400                            
00009400                            loc_9310:
00009400 6000 FF12                  		bra.w	loc_9224
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_9314:				; XREF: Obj28_Index
00009404 6100 0000                  		bsr.w	sub_9404
00009408 6A00                       		bpl.s	loc_932E
0000940A 4268 0010                  		clr.w	$10(a0)
0000940E 4268 0032                  		clr.w	$32(a0)
00009412 6100 0000                  		bsr.w	ObjectFall
00009416 6100 0000                  		bsr.w	loc_93C4
0000941A 6100 0000                  		bsr.w	loc_93EC
0000941E                            
0000941E                            loc_932E:
0000941E 6000 FEF4                  		bra.w	loc_9224
00009422                            ; ===========================================================================
00009422                            
00009422                            loc_9332:				; XREF: Obj28_Index
00009422 6100 0000                  		bsr.w	sub_9404
00009426 6A00                       		bpl.s	loc_936C
00009428 6100 0000                  		bsr.w	ObjectFall
0000942C 117C 0001 001A             		move.b	#1,$1A(a0)
00009432 4A68 0012                  		tst.w	$12(a0)
00009436 6B00                       		bmi.s	loc_936C
00009438 117C 0000 001A             		move.b	#0,$1A(a0)
0000943E 4EB9 0000 0000             		jsr	ObjHitFloor
00009444 4A41                       		tst.w	d1
00009446 6A00                       		bpl.s	loc_936C
00009448 4468 0010                  		neg.w	$10(a0)
0000944C 0868 0000 0001             		bchg	#0,1(a0)
00009452 D368 000C                  		add.w	d1,$C(a0)
00009456 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000945C                            
0000945C                            loc_936C:
0000945C 6000 FEB6                  		bra.w	loc_9224
00009460                            ; ===========================================================================
00009460                            
00009460                            loc_9370:				; XREF: Obj28_Index
00009460 6100 0000                  		bsr.w	sub_9404
00009464 6A00                       		bpl.s	loc_93C0
00009466 6100 0000                  		bsr.w	SpeedToPos
0000946A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009470 4A68 0012                  		tst.w	$12(a0)
00009474 6B00                       		bmi.s	loc_93AA
00009476 4EB9 0000 0000             		jsr	ObjHitFloor
0000947C 4A41                       		tst.w	d1
0000947E 6A00                       		bpl.s	loc_93AA
00009480 4628 0029                  		not.b	$29(a0)
00009484 6600                       		bne.s	loc_93A0
00009486 4468 0010                  		neg.w	$10(a0)
0000948A 0868 0000 0001             		bchg	#0,1(a0)
00009490                            
00009490                            loc_93A0:
00009490 D368 000C                  		add.w	d1,$C(a0)
00009494 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000949A                            
0000949A                            loc_93AA:
0000949A 5328 001E                  		subq.b	#1,$1E(a0)
0000949E 6A00                       		bpl.s	loc_93C0
000094A0 117C 0001 001E             		move.b	#1,$1E(a0)
000094A6 5228 001A                  		addq.b	#1,$1A(a0)
000094AA 0228 0001 001A             		andi.b	#1,$1A(a0)
000094B0                            
000094B0                            loc_93C0:
000094B0 6000 FE62                  		bra.w	loc_9224
000094B4                            ; ===========================================================================
000094B4                            
000094B4                            loc_93C4:
000094B4 117C 0001 001A             		move.b	#1,$1A(a0)
000094BA 4A68 0012                  		tst.w	$12(a0)
000094BE 6B00                       		bmi.s	locret_93EA
000094C0 117C 0000 001A             		move.b	#0,$1A(a0)
000094C6 4EB9 0000 0000             		jsr	ObjHitFloor
000094CC 4A41                       		tst.w	d1
000094CE 6A00                       		bpl.s	locret_93EA
000094D0 D368 000C                  		add.w	d1,$C(a0)
000094D4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094DA                            
000094DA                            locret_93EA:
000094DA 4E75                       		rts	
000094DC                            ; ===========================================================================
000094DC                            
000094DC                            loc_93EC:
000094DC 08E8 0000 0001             		bset	#0,1(a0)
000094E2 3028 0008                  		move.w	8(a0),d0
000094E6 9078 D008                  		sub.w	($FFFFD008).w,d0
000094EA 6400                       		bcc.s	locret_9402
000094EC 08A8 0000 0001             		bclr	#0,1(a0)
000094F2                            
000094F2                            locret_9402:
000094F2 4E75                       		rts	
000094F4                            
000094F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094F4                            
000094F4                            
000094F4                            sub_9404:
000094F4 3038 D008                  		move.w	($FFFFD008).w,d0
000094F8 9068 0008                  		sub.w	8(a0),d0
000094FC 0440 00B8                  		subi.w	#$B8,d0
00009500 4E75                       		rts	
00009502                            ; End of function sub_9404
00009502                            
00009502                            ; ===========================================================================
00009502                            ; ---------------------------------------------------------------------------
00009502                            ; Object 29 - points that appear when you destroy something
00009502                            ; ---------------------------------------------------------------------------
00009502                            
00009502                            Obj29:					; XREF: Obj_Index
00009502 7000                       		moveq	#0,d0
00009504 1028 0024                  		move.b	$24(a0),d0
00009508 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000950C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009510 6000 0000                  		bra.w	DisplaySprite
00009514                            ; ===========================================================================
00009514 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009516 0000                       		dc.w Obj29_Slower-Obj29_Index
00009518                            ; ===========================================================================
00009518                            
00009518                            Obj29_Main:				; XREF: Obj29_Index
00009518 5428 0024                  		addq.b	#2,$24(a0)
0000951C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009524 317C 2797 0002             		move.w	#$2797,2(a0)
0000952A 117C 0004 0001             		move.b	#4,1(a0)
00009530 117C 0001 0018             		move.b	#1,$18(a0)
00009536 117C 0008 0019             		move.b	#8,$19(a0)
0000953C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009542                            
00009542                            Obj29_Slower:				; XREF: Obj29_Index
00009542 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009546 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000954A 6100 0000                  		bsr.w	SpeedToPos
0000954E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009554 4E75                       		rts	
00009556                            ; ===========================================================================
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - animals
00009556                            ; ---------------------------------------------------------------------------
00009556                            Map_obj28:
00009556                            	include "_maps\obj28.asm"
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - animals
00009556                            ; ---------------------------------------------------------------------------
00009556 0000                       		dc.w byte_9472-Map_obj28
00009558 0000                       		dc.w byte_9478-Map_obj28
0000955A 0000                       		dc.w byte_946C-Map_obj28
0000955C 01                         byte_946C:	dc.b 1
0000955D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009562 01                         byte_9472:	dc.b 1
00009563 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009568 01                         byte_9478:	dc.b 1
00009569 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000956E                            		even
0000956E                            		even
0000956E                            
0000956E                            Map_obj28a:
0000956E                            	include "_maps\obj28a.asm"
0000956E                            ; ---------------------------------------------------------------------------
0000956E                            ; Sprite mappings - animals
0000956E                            ; ---------------------------------------------------------------------------
0000956E 0000                       		dc.w byte_948A-Map_obj28a
00009570 0000                       		dc.w byte_9490-Map_obj28a
00009572 0000                       		dc.w byte_9484-Map_obj28a
00009574 01                         byte_9484:	dc.b 1
00009575 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000957A 01                         byte_948A:	dc.b 1
0000957B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009580 01                         byte_9490:	dc.b 1
00009581 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009586                            		even
00009586                            		even
00009586                            
00009586                            Map_obj28b:
00009586                            	include "_maps\obj28b.asm"
00009586                            ; ---------------------------------------------------------------------------
00009586                            ; Sprite mappings - animals
00009586                            ; ---------------------------------------------------------------------------
00009586 0000                       		dc.w byte_94A2-Map_obj28b
00009588 0000                       		dc.w byte_94A8-Map_obj28b
0000958A 0000                       		dc.w byte_949C-Map_obj28b
0000958C 01                         byte_949C:	dc.b 1
0000958D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009592 01                         byte_94A2:	dc.b 1
00009593 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009598 01                         byte_94A8:	dc.b 1
00009599 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000959E                            		even
0000959E                            		even
0000959E                            
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Sprite mappings - points that	appear when you	destroy	something
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            Map_obj29:
0000959E                            	include "_maps\obj29.asm"
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Sprite mappings - points that	appear when you	destroy	something
0000959E                            ; ---------------------------------------------------------------------------
0000959E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000095A2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000095A6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000095AA 0000                       		dc.w byte_94E5-Map_obj29
000095AC 01                         byte_94BC:	dc.b 1
000095AD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000095B2 01                         byte_94C2:	dc.b 1
000095B3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000095B8 01                         byte_94C8:	dc.b 1
000095B9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000095BE 01                         byte_94CE:	dc.b 1
000095BF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000095C4 01                         byte_94D4:	dc.b 1
000095C5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000095CA 02                         byte_94DA:	dc.b 2
000095CB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000095D0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000095D5 02                         byte_94E5:	dc.b 2
000095D6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000095DB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000095E0                            		even
000095E0                            		even
000095E0                            
000095E0                            ; ===========================================================================
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            
000095E0                            Obj1F:					; XREF: Obj_Index
000095E0 7000                       		moveq	#0,d0
000095E2 1028 0024                  		move.b	$24(a0),d0
000095E6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000095EA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000095EE                            ; ===========================================================================
000095EE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000095F0 0000                       		dc.w Obj1F_Action-Obj1F_Index
000095F2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000095F4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000095F6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000095F8                            ; ===========================================================================
000095F8                            
000095F8                            Obj1F_Main:				; XREF: Obj1F_Index
000095F8 117C 0010 0016             		move.b	#$10,$16(a0)
000095FE 117C 0008 0017             		move.b	#8,$17(a0)
00009604 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000960C 317C 0400 0002             		move.w	#$400,2(a0)
00009612 117C 0004 0001             		move.b	#4,1(a0)
00009618 117C 0003 0018             		move.b	#3,$18(a0)
0000961E 117C 0006 0020             		move.b	#6,$20(a0)
00009624 117C 0015 0019             		move.b	#$15,$19(a0)
0000962A 6100 0000                  		bsr.w	ObjectFall
0000962E 4EB9 0000 0000             		jsr	ObjHitFloor
00009634 4A41                       		tst.w	d1
00009636 6A00                       		bpl.s	locret_955A
00009638 D368 000C                  		add.w	d1,$C(a0)
0000963C 1143 0026                  		move.b	d3,$26(a0)
00009640 317C 0000 0012             		move.w	#0,$12(a0)
00009646 5428 0024                  		addq.b	#2,$24(a0)
0000964A                            
0000964A                            locret_955A:
0000964A 4E75                       		rts	
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            Obj1F_Action:				; XREF: Obj1F_Index
0000964C 7000                       		moveq	#0,d0
0000964E 1028 0025                  		move.b	$25(a0),d0
00009652 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009656 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000965A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009660 6100 0000                  		bsr.w	AnimateSprite
00009664 6000 0000                  		bra.w	MarkObjGone
00009668                            ; ===========================================================================
00009668 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000966A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000966C                            ; ===========================================================================
0000966C                            
0000966C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000966C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009670 6A00                       		bpl.s	locret_95B6
00009672 4A28 0001                  		tst.b	1(a0)
00009676 6A00                       		bpl.s	Obj1F_Move
00009678 0868 0001 0032             		bchg	#1,$32(a0)
0000967E 6600                       		bne.s	Obj1F_MakeFire
00009680                            
00009680                            Obj1F_Move:
00009680 5428 0025                  		addq.b	#2,$25(a0)
00009684 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000968A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009690 6100 0000                  		bsr.w	Obj1F_SetAni
00009694 5600                       		addq.b	#3,d0
00009696 1140 001C                  		move.b	d0,$1C(a0)
0000969A 0868 0000 0022             		bchg	#0,$22(a0)
000096A0 6600                       		bne.s	locret_95B6
000096A2 4468 0010                  		neg.w	$10(a0)		; change direction
000096A6                            
000096A6                            locret_95B6:
000096A6 4E75                       		rts	
000096A8                            ; ===========================================================================
000096A8                            
000096A8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000096A8 317C 003B 0030             		move.w	#$3B,$30(a0)
000096AE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000096B4 6100 0000                  		bsr.w	SingleObjLoad
000096B8 6600                       		bne.s	Obj1F_MakeFire2
000096BA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000096BE 137C 0006 0024             		move.b	#6,$24(a1)
000096C4 3368 0008 0008             		move.w	8(a0),8(a1)
000096CA 0469 0010 0008             		subi.w	#$10,8(a1)
000096D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096D6 337C FF00 0010             		move.w	#-$100,$10(a1)
000096DC                            
000096DC                            Obj1F_MakeFire2:
000096DC 6100 0000                  		bsr.w	SingleObjLoad
000096E0 6600                       		bne.s	locret_9618
000096E2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000096E6 137C 0006 0024             		move.b	#6,$24(a1)
000096EC 3368 0008 0008             		move.w	8(a0),8(a1)
000096F2 0669 0010 0008             		addi.w	#$10,8(a1)
000096F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096FE 337C 0100 0010             		move.w	#$100,$10(a1)
00009704                            
00009704                            locret_9618:
00009704 4E75                       		rts	
00009706                            ; ===========================================================================
00009706                            
00009706                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009706 5368 0030                  		subq.w	#1,$30(a0)
0000970A 6B00                       		bmi.s	loc_966E
0000970C 6100 0000                  		bsr.w	SpeedToPos
00009710 0868 0000 0032             		bchg	#0,$32(a0)
00009716 6600                       		bne.s	loc_9654
00009718 3628 0008                  		move.w	8(a0),d3
0000971C 0643 0010                  		addi.w	#$10,d3
00009720 0828 0000 0022             		btst	#0,$22(a0)
00009726 6700                       		beq.s	loc_9640
00009728 0443 0020                  		subi.w	#$20,d3
0000972C                            
0000972C                            loc_9640:
0000972C 4EB9 0000 0000             		jsr	ObjHitFloor2
00009732 0C41 FFF8                  		cmpi.w	#-8,d1
00009736 6D00                       		blt.s	loc_966E
00009738 0C41 000C                  		cmpi.w	#$C,d1
0000973C 6C00                       		bge.s	loc_966E
0000973E 4E75                       		rts	
00009740                            ; ===========================================================================
00009740                            
00009740                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009740 4EB9 0000 0000             		jsr	ObjHitFloor
00009746 D368 000C                  		add.w	d1,$C(a0)
0000974A 1143 0026                  		move.b	d3,$26(a0)
0000974E 6100 0000                  		bsr.w	Obj1F_SetAni
00009752 5600                       		addq.b	#3,d0
00009754 1140 001C                  		move.b	d0,$1C(a0)
00009758 4E75                       		rts	
0000975A                            ; ===========================================================================
0000975A                            
0000975A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000975A 5528 0025                  		subq.b	#2,$25(a0)
0000975E 317C 003B 0030             		move.w	#59,$30(a0)
00009764 317C 0000 0010             		move.w	#0,$10(a0)
0000976A 6100 0000                  		bsr.w	Obj1F_SetAni
0000976E 1140 001C                  		move.b	d0,$1C(a0)
00009772 4E75                       		rts	
00009774                            ; ---------------------------------------------------------------------------
00009774                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009774                            ; ---------------------------------------------------------------------------
00009774                            
00009774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009774                            
00009774                            
00009774                            Obj1F_SetAni:				; XREF: loc_966E
00009774 7000                       		moveq	#0,d0
00009776 1628 0026                  		move.b	$26(a0),d3
0000977A 6B00                       		bmi.s	loc_96A4
0000977C 0C03 0006                  		cmpi.b	#6,d3
00009780 6500                       		bcs.s	locret_96A2
00009782 7001                       		moveq	#1,d0
00009784 0828 0000 0022             		btst	#0,$22(a0)
0000978A 6600                       		bne.s	locret_96A2
0000978C 7002                       		moveq	#2,d0
0000978E                            
0000978E                            locret_96A2:
0000978E 4E75                       		rts	
00009790                            ; ===========================================================================
00009790                            
00009790                            loc_96A4:				; XREF: Obj1F_SetAni
00009790 0C03 00FA                  		cmpi.b	#-6,d3
00009794 6200                       		bhi.s	locret_96B6
00009796 7002                       		moveq	#2,d0
00009798 0828 0000 0022             		btst	#0,$22(a0)
0000979E 6600                       		bne.s	locret_96B6
000097A0 7001                       		moveq	#1,d0
000097A2                            
000097A2                            locret_96B6:
000097A2 4E75                       		rts	
000097A4                            ; End of function Obj1F_SetAni
000097A4                            
000097A4                            ; ===========================================================================
000097A4                            
000097A4                            Obj1F_Delete:				; XREF: Obj1F_Index
000097A4 6100 0000                  		bsr.w	DeleteObject
000097A8 4E75                       		rts	
000097AA                            ; ===========================================================================
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            ; Sub-object - missile that the	Crabmeat throws
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            
000097AA                            Obj1F_BallMain:				; XREF: Obj1F_Index
000097AA 5428 0024                  		addq.b	#2,$24(a0)
000097AE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000097B6 317C 0400 0002             		move.w	#$400,2(a0)
000097BC 117C 0004 0001             		move.b	#4,1(a0)
000097C2 117C 0003 0018             		move.b	#3,$18(a0)
000097C8 117C 0087 0020             		move.b	#$87,$20(a0)
000097CE 117C 0008 0019             		move.b	#8,$19(a0)
000097D4 317C FC00 0012             		move.w	#-$400,$12(a0)
000097DA 117C 0007 001C             		move.b	#7,$1C(a0)
000097E0                            
000097E0                            Obj1F_BallMove:				; XREF: Obj1F_Index
000097E0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000097E6 6100 0000                  		bsr.w	AnimateSprite
000097EA 6100 0000                  		bsr.w	ObjectFall
000097EE 6100 0000                  		bsr.w	DisplaySprite
000097F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097F6 0640 00E0                  		addi.w	#$E0,d0
000097FA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000097FE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009800 4E75                       		rts	
00009802                            ; ===========================================================================
00009802                            
00009802                            Obj1F_Delete2:
00009802 6000 0000                  		bra.w	DeleteObject
00009806                            ; ===========================================================================
00009806                            Ani_obj1F:
00009806                            	include "_anim\obj1F.asm"
00009806                            ; ---------------------------------------------------------------------------
00009806                            ; Animation script - Crabmeat enemy
00009806                            ; ---------------------------------------------------------------------------
00009806 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000980C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009812 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009816 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000981A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000981E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009822 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009828 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000982E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009834 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009838 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000983C                            		even
0000983C                            		even
0000983C                            
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            Map_obj1F:
0000983C                            	include "_maps\obj1F.asm"
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983C                            ; ---------------------------------------------------------------------------
0000983C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009840 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009844 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009848 0000                       		dc.w byte_97D7-Map_obj1F
0000984A 04                         byte_975E:	dc.b 4
0000984B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009850 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009855 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000985A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000985F 04                         byte_9773:	dc.b 4
00009860 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009865 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000986A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000986F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009874 04                         byte_9788:	dc.b 4
00009875 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000987A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000987F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009884 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009889 04                         byte_979D:	dc.b 4
0000988A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000988F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009894 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009899 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000989E 06                         byte_97B2:	dc.b 6
0000989F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
000098A4 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
000098A9 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
000098AE F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
000098B3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
000098B8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000098BD 01                         byte_97D1:	dc.b 1
000098BE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000098C3 01                         byte_97D7:	dc.b 1
000098C4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
000098CA 00                         		even
000098CA 00                         		even
000098CA                            
000098CA                            ; ===========================================================================
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            
000098CA                            Obj22:					; XREF: Obj_Index
000098CA 7000                       		moveq	#0,d0
000098CC 1028 0024                  		move.b	$24(a0),d0
000098D0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000098D4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000098D8                            ; ===========================================================================
000098D8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000098DA 0000                       		dc.w Obj22_Action-Obj22_Index
000098DC 0000                       		dc.w Obj22_Delete-Obj22_Index
000098DE                            ; ===========================================================================
000098DE                            
000098DE                            Obj22_Main:				; XREF: Obj22_Index
000098DE 5428 0024                  		addq.b	#2,$24(a0)
000098E2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000098EA 317C 0444 0002             		move.w	#$444,2(a0)
000098F0 117C 0004 0001             		move.b	#4,1(a0)
000098F6 117C 0003 0018             		move.b	#3,$18(a0)
000098FC 117C 0008 0020             		move.b	#8,$20(a0)
00009902 117C 0018 0019             		move.b	#$18,$19(a0)
00009908                            
00009908                            Obj22_Action:				; XREF: Obj22_Index
00009908 7000                       		moveq	#0,d0
0000990A 1028 0025                  		move.b	$25(a0),d0
0000990E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009912 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009916 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000991C 6100 0000                  		bsr.w	AnimateSprite
00009920 6000 0000                  		bra.w	MarkObjGone
00009924                            ; ===========================================================================
00009924 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009926 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009928                            ; ===========================================================================
00009928                            
00009928                            Obj22_Move:				; XREF: Obj22_Index2
00009928 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000992C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000992E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009934 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009936 5428 0025                  		addq.b	#2,$25(a0)
0000993A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009940 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009946 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000994C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009952 6600                       		bne.s	locret_986C	; if not, branch
00009954 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009958                            
00009958                            locret_986C:
00009958 4E75                       		rts	
0000995A                            ; ===========================================================================
0000995A                            
0000995A                            Obj22_Fire:				; XREF: Obj22_Move
0000995A 6100 0000                  		bsr.w	SingleObjLoad
0000995E 6600                       		bne.s	locret_98D0
00009960 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009964 3368 0008 0008             		move.w	8(a0),8(a1)
0000996A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009970 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009976 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000997C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009982 303C 0018                  		move.w	#$18,d0
00009986 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000998C 6600                       		bne.s	loc_98AA	; if not, branch
0000998E 4440                       		neg.w	d0
00009990 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009994                            
00009994                            loc_98AA:
00009994 D169 0008                  		add.w	d0,8(a1)
00009998 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000999E 337C 000E 0032             		move.w	#$E,$32(a1)
000099A4 2348 003C                  		move.l	a0,$3C(a1)
000099A8 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
000099AE 317C 003B 0032             		move.w	#$3B,$32(a0)
000099B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
000099BA                            
000099BA                            locret_98D0:
000099BA 4E75                       		rts	
000099BC                            ; ===========================================================================
000099BC                            
000099BC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000099BC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000099C0 6B00                       		bmi.s	Obj22_ChgDir
000099C2 6100 0000                  		bsr.w	SpeedToPos
000099C6 4A28 0034                  		tst.b	$34(a0)
000099CA 6600                       		bne.s	locret_992A
000099CC 3038 D008                  		move.w	($FFFFD008).w,d0
000099D0 9068 0008                  		sub.w	8(a0),d0
000099D4 6A00                       		bpl.s	Obj22_SetNrSonic
000099D6 4440                       		neg.w	d0
000099D8                            
000099D8                            Obj22_SetNrSonic:
000099D8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000099DC 6400                       		bcc.s	locret_992A	; if not, branch
000099DE 4A28 0001                  		tst.b	1(a0)
000099E2 6A00                       		bpl.s	locret_992A
000099E4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000099EA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000099F0 6000                       		bra.s	Obj22_Stop
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000099F2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000099F8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000099FE 317C 003B 0032             		move.w	#59,$32(a0)
00009A04                            
00009A04                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009A04 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009A08 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009A0E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009A14                            
00009A14                            locret_992A:
00009A14 4E75                       		rts	
00009A16                            ; ===========================================================================
00009A16                            
00009A16                            Obj22_Delete:				; XREF: Obj22_Index
00009A16 6100 0000                  		bsr.w	DeleteObject
00009A1A 4E75                       		rts	
00009A1C                            ; ===========================================================================
00009A1C                            ; ---------------------------------------------------------------------------
00009A1C                            ; Object 23 - missile that Buzz	Bomber throws
00009A1C                            ; ---------------------------------------------------------------------------
00009A1C                            
00009A1C                            Obj23:					; XREF: Obj_Index
00009A1C 7000                       		moveq	#0,d0
00009A1E 1028 0024                  		move.b	$24(a0),d0
00009A22 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009A26 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009A2A                            ; ===========================================================================
00009A2A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009A2C 0000                       		dc.w Obj23_Animate-Obj23_Index
00009A2E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009A30 0000                       		dc.w Obj23_Delete-Obj23_Index
00009A32 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009A34                            ; ===========================================================================
00009A34                            
00009A34                            Obj23_Main:				; XREF: Obj23_Index
00009A34 5368 0032                  		subq.w	#1,$32(a0)
00009A38 6A00                       		bpl.s	Obj23_ChkCancel
00009A3A 5428 0024                  		addq.b	#2,$24(a0)
00009A3E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009A46 317C 2444 0002             		move.w	#$2444,2(a0)
00009A4C 117C 0004 0001             		move.b	#4,1(a0)
00009A52 117C 0003 0018             		move.b	#3,$18(a0)
00009A58 117C 0008 0019             		move.b	#8,$19(a0)
00009A5E 0228 0003 0022             		andi.b	#3,$22(a0)
00009A64 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009A68 6700                       		beq.s	Obj23_Animate	; if not, branch
00009A6A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009A70 117C 0087 0020             		move.b	#$87,$20(a0)
00009A76 117C 0001 001C             		move.b	#1,$1C(a0)
00009A7C 6000                       		bra.s	Obj23_Animate2
00009A7E                            ; ===========================================================================
00009A7E                            
00009A7E                            Obj23_Animate:				; XREF: Obj23_Index
00009A7E 6100                       		bsr.s	Obj23_ChkCancel
00009A80 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A86 6100 0000                  		bsr.w	AnimateSprite
00009A8A 6000 0000                  		bra.w	DisplaySprite
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009A8E                            ; destroyed, and if it has, then cancel	the missile
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            
00009A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A8E                            
00009A8E                            
00009A8E                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009A8E 2268 003C                  		movea.l	$3C(a0),a1
00009A92 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009A96 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009A98 4E75                       		rts	
00009A9A                            ; End of function Obj23_ChkCancel
00009A9A                            
00009A9A                            ; ===========================================================================
00009A9A                            
00009A9A                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009A9A 0828 0007 0022             		btst	#7,$22(a0)
00009AA0 6600                       		bne.s	Obj23_Explode
00009AA2 117C 0087 0020             		move.b	#$87,$20(a0)
00009AA8 117C 0001 001C             		move.b	#1,$1C(a0)
00009AAE 6100 0000                  		bsr.w	SpeedToPos
00009AB2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AB8 6100 0000                  		bsr.w	AnimateSprite
00009ABC 6100 0000                  		bsr.w	DisplaySprite
00009AC0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009AC4 0640 00E0                  		addi.w	#$E0,d0
00009AC8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009ACC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009ACE 4E75                       		rts	
00009AD0                            ; ===========================================================================
00009AD0                            
00009AD0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009AD0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009AD4 117C 0000 0024             		move.b	#0,$24(a0)
00009ADA 6000 F30A                  		bra.w	Obj24
00009ADE                            ; ===========================================================================
00009ADE                            
00009ADE                            Obj23_Delete:				; XREF: Obj23_Index
00009ADE 6100 0000                  		bsr.w	DeleteObject
00009AE2 4E75                       		rts	
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj23_FromNewt:				; XREF: Obj23_Index
00009AE4 4A28 0001                  		tst.b	1(a0)
00009AE8 6AF4                       		bpl.s	Obj23_Delete
00009AEA 6100 0000                  		bsr.w	SpeedToPos
00009AEE                            
00009AEE                            Obj23_Animate2:				; XREF: Obj23_Main
00009AEE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AF4 6100 0000                  		bsr.w	AnimateSprite
00009AF8 6100 0000                  		bsr.w	DisplaySprite
00009AFC 4E75                       		rts	
00009AFE                            ; ===========================================================================
00009AFE                            Ani_obj22:
00009AFE                            	include "_anim\obj22.asm"
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE                            ; Animation script - Buzz Bomber enemy
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE 0000                       		dc.w byte_9A1E-Ani_obj22
00009B00 0000                       		dc.w byte_9A22-Ani_obj22
00009B02 0000                       		dc.w byte_9A26-Ani_obj22
00009B04 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009B08 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009B0C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009B10                            		even
00009B10                            		even
00009B10                            
00009B10                            Ani_obj23:
00009B10                            	include "_anim\obj23.asm"
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Animation script - missile that Buzz Bomber throws
00009B10                            ; ---------------------------------------------------------------------------
00009B10 0000                       		dc.w byte_9A2E-Ani_obj23
00009B12 0000                       		dc.w byte_9A32-Ani_obj23
00009B14 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009B18 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009B1C                            		even
00009B1C                            		even
00009B1C                            
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            ; Sprite mappings - Buzz Bomber	enemy
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            Map_obj22:
00009B1C                            	include "_maps\obj22.asm"
00009B1C                            Map_e97a:
00009B1C 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009B1E 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009B20 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009B22 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009B24 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009B26 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009B28 06                         Map_e97a_C: 	dc.b $6
00009B29 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B2E F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B33 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B38 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B3D F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009B42 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009B47 06                         Map_e97a_2B: 	dc.b $6
00009B48 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B4D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B52 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B57 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B5C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009B61 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009B66 07                         Map_e97a_4A: 	dc.b $7
00009B67 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009B6C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B71 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B76 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B7B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B80 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009B85 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009B8A 07                         Map_e97a_6E: 	dc.b $7
00009B8B 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009B90 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B95 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B9A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B9F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009BA4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009BA9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009BAE 06                         Map_e97a_92: 	dc.b $6
00009BAF F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009BB4 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009BB9 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009BBE 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009BC3 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009BC8 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009BCD 04                         Map_e97a_B1: 	dc.b $4
00009BCE F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009BD3 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009BD8 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009BDD 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009BE2                            	even
00009BE2                            	even
00009BE2                            
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2                            ; Sprite mappings - missile that Buzz Bomber throws
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2                            Map_obj23:
00009BE2                            	include "_maps\obj23.asm"
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2                            ; Sprite mappings - missile that Buzz Bomber throws
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009BE6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009BEA 01                         byte_9B0E:	dc.b 1
00009BEB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009BF0 01                         byte_9B14:	dc.b 1
00009BF1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009BF6 01                         byte_9B1A:	dc.b 1
00009BF7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009BFC 01                         byte_9B20:	dc.b 1
00009BFD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009C02                            		even
00009C02                            		even
00009C02                            
00009C02                            ; ===========================================================================
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Object 25 - rings
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            
00009C02                            Obj25:					; XREF: Obj_Index
00009C02 7000                       		moveq	#0,d0
00009C04 1028 0024                  		move.b	$24(a0),d0
00009C08 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009C0C 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009C10                            ; ===========================================================================
00009C10 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009C12 0000                       		dc.w Obj25_Animate-Obj25_Index
00009C14 0000                       		dc.w Obj25_Collect-Obj25_Index
00009C16 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009C18 0000                       		dc.w Obj25_Delete-Obj25_Index
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            ; Distances between rings (format: horizontal, vertical)
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009C1C 1800                       		dc.b $18, 0		; horizontal normal
00009C1E 2000                       		dc.b $20, 0		; horizontal wide
00009C20 0010                       		dc.b 0,	$10		; vertical tight
00009C22 0018                       		dc.b 0,	$18		; vertical normal
00009C24 0020                       		dc.b 0,	$20		; vertical wide
00009C26 1010                       		dc.b $10, $10		; diagonal
00009C28 1818                       		dc.b $18, $18
00009C2A 2020                       		dc.b $20, $20
00009C2C F010                       		dc.b $F0, $10
00009C2E E818                       		dc.b $E8, $18
00009C30 E020                       		dc.b $E0, $20
00009C32 1008                       		dc.b $10, 8
00009C34 1810                       		dc.b $18, $10
00009C36 F008                       		dc.b $F0, 8
00009C38 E810                       		dc.b $E8, $10
00009C3A                            ; ===========================================================================
00009C3A                            
00009C3A                            Obj25_Main:				; XREF: Obj25_Index
00009C3A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C3E 7000                       		moveq	#0,d0
00009C40 1028 0023                  		move.b	$23(a0),d0
00009C44 45F2 0002                  		lea	2(a2,d0.w),a2
00009C48 1812                       		move.b	(a2),d4
00009C4A 1228 0028                  		move.b	$28(a0),d1
00009C4E 1001                       		move.b	d1,d0
00009C50 0241 0007                  		andi.w	#7,d1
00009C54 0C41 0007                  		cmpi.w	#7,d1
00009C58 6600                       		bne.s	loc_9B80
00009C5A 7206                       		moveq	#6,d1
00009C5C                            
00009C5C                            loc_9B80:
00009C5C 4841                       		swap	d1
00009C5E 323C 0000                  		move.w	#0,d1
00009C62 E808                       		lsr.b	#4,d0
00009C64 D040                       		add.w	d0,d0
00009C66 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009C6A 4885                       		ext.w	d5
00009C6C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009C70 4886                       		ext.w	d6
00009C72 2248                       		movea.l	a0,a1
00009C74 3428 0008                  		move.w	8(a0),d2
00009C78 3628 000C                  		move.w	$C(a0),d3
00009C7C E20C                       		lsr.b	#1,d4
00009C7E 6500                       		bcs.s	loc_9C02
00009C80 0892 0007                  		bclr	#7,(a2)
00009C84 6000                       		bra.s	loc_9BBA
00009C86                            ; ===========================================================================
00009C86                            
00009C86                            Obj25_MakeRings:
00009C86 4841                       		swap	d1
00009C88 E20C                       		lsr.b	#1,d4
00009C8A 6500                       		bcs.s	loc_9C02
00009C8C 0892 0007                  		bclr	#7,(a2)
00009C90 6100 0000                  		bsr.w	SingleObjLoad
00009C94 6600                       		bne.s	loc_9C0E
00009C96                            
00009C96                            loc_9BBA:				; XREF: Obj25_Main
00009C96 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009C9A 5429 0024                  		addq.b	#2,$24(a1)
00009C9E 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009CA2 3368 0008 0032             		move.w	8(a0),$32(a1)
00009CA8 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009CAC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CB4 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CBA 137C 0004 0001             		move.b	#4,1(a1)
00009CC0 137C 0002 0018             		move.b	#2,$18(a1)
00009CC6 137C 0047 0020             		move.b	#$47,$20(a1)
00009CCC 137C 0008 0019             		move.b	#8,$19(a1)
00009CD2 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009CD8 1341 0034                  		move.b	d1,$34(a1)
00009CDC                            
00009CDC                            loc_9C02:
00009CDC 5241                       		addq.w	#1,d1
00009CDE D445                       		add.w	d5,d2		; add ring spacing value to d2
00009CE0 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009CE2 4841                       		swap	d1
00009CE4 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009CE8                            
00009CE8                            loc_9C0E:
00009CE8 0812 0000                  		btst	#0,(a2)
00009CEC 6600 0000                  		bne.w	DeleteObject
00009CF0                            
00009CF0                            Obj25_Animate:				; XREF: Obj25_Index
00009CF0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009CF6 6100 0000                  		bsr.w	DisplaySprite
00009CFA 3028 0032                  		move.w	$32(a0),d0
00009CFE 0240 FF80                  		andi.w	#$FF80,d0
00009D02 3238 F700                  		move.w	($FFFFF700).w,d1
00009D06 0441 0080                  		subi.w	#$80,d1
00009D0A 0241 FF80                  		andi.w	#$FF80,d1
00009D0E 9041                       		sub.w	d1,d0
00009D10 0C40 0280                  		cmpi.w	#$280,d0
00009D14 6200                       		bhi.s	Obj25_Delete
00009D16 4E75                       		rts	
00009D18                            ; ===========================================================================
00009D18                            
00009D18                            Obj25_Collect:				; XREF: Obj25_Index
00009D18 5428 0024                  		addq.b	#2,$24(a0)
00009D1C 117C 0000 0020             		move.b	#0,$20(a0)
00009D22 117C 0001 0018             		move.b	#1,$18(a0)
00009D28 6100 0000                  		bsr.w	CollectRing
00009D2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009D30 7000                       		moveq	#0,d0
00009D32 1028 0023                  		move.b	$23(a0),d0
00009D36 1228 0034                  		move.b	$34(a0),d1
00009D3A 03F2 0002                  		bset	d1,2(a2,d0.w)
00009D3E                            
00009D3E                            Obj25_Sparkle:				; XREF: Obj25_Index
00009D3E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009D44 6100 0000                  		bsr.w	AnimateSprite
00009D48 6000 0000                  		bra.w	DisplaySprite
00009D4C                            ; ===========================================================================
00009D4C                            
00009D4C                            Obj25_Delete:				; XREF: Obj25_Index
00009D4C 6000 0000                  		bra.w	DeleteObject
00009D50                            
00009D50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D50                            
00009D50                            
00009D50                            CollectRing:				; XREF: Obj25_Collect
00009D50 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009D54 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009D5A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009D5E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009D64 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D66 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009D6C 6700                       		beq.s	loc_9CA4
00009D6E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009D74 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D76 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009D7C 6600                       		bne.s	Obj25_PlaySnd
00009D7E                            
00009D7E                            loc_9CA4:
00009D7E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009D82 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009D86 303C 0088                  		move.w	#$88,d0		; play extra life music
00009D8A                            
00009D8A                            Obj25_PlaySnd:
00009D8A 4EF9 0000 139C             		jmp	(PlaySound_Special).l
00009D90                            ; End of function CollectRing
00009D90                            
00009D90                            ; ===========================================================================
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            ; Object 37 - rings flying out of Sonic	when he's hit
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            
00009D90                            Obj37:					; XREF: Obj_Index
00009D90 7000                       		moveq	#0,d0
00009D92 1028 0024                  		move.b	$24(a0),d0
00009D96 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009D9A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009D9E                            ; ===========================================================================
00009D9E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009DA0 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009DA2 0000                       		dc.w Obj37_Collect-Obj37_Index
00009DA4 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009DA6 0000                       		dc.w Obj37_Delete-Obj37_Index
00009DA8                            ; ===========================================================================
00009DA8                            
00009DA8                            Obj37_CountRings:			; XREF: Obj37_Index
00009DA8 2248                       		movea.l	a0,a1
00009DAA 7A00                       		moveq	#0,d5
00009DAC 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009DB0 7020                       		moveq	#32,d0
00009DB2 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009DB4 6500                       		bcs.s	loc_9CDE	; if not, branch
00009DB6 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009DB8                            
00009DB8                            loc_9CDE:
00009DB8 5345                       		subq.w	#1,d5
00009DBA 383C 0288                  		move.w	#$288,d4
00009DBE 6000                       		bra.s	Obj37_MakeRings
00009DC0                            ; ===========================================================================
00009DC0                            
00009DC0                            Obj37_Loop:
00009DC0 6100 0000                  		bsr.w	SingleObjLoad
00009DC4 6600 0000                  		bne.w	Obj37_ResetCounter
00009DC8                            
00009DC8                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009DC8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009DCC 5429 0024                  		addq.b	#2,$24(a1)
00009DD0 137C 0008 0016             		move.b	#8,$16(a1)
00009DD6 137C 0008 0017             		move.b	#8,$17(a1)
00009DDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009DE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DE8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009DF0 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009DF6 137C 0004 0001             		move.b	#4,1(a1)
00009DFC 137C 0003 0018             		move.b	#3,$18(a1)
00009E02 137C 0047 0020             		move.b	#$47,$20(a1)
00009E08 137C 0008 0019             		move.b	#8,$19(a1)
00009E0E 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009E14 4A44                       		tst.w	d4
00009E16 6B00                       		bmi.s	loc_9D62
00009E18 3004                       		move.w	d4,d0
00009E1A 6100 8BBE                  		bsr.w	CalcSine
00009E1E 3404                       		move.w	d4,d2
00009E20 E04A                       		lsr.w	#8,d2
00009E22 E560                       		asl.w	d2,d0
00009E24 E561                       		asl.w	d2,d1
00009E26 3400                       		move.w	d0,d2
00009E28 3601                       		move.w	d1,d3
00009E2A 0604 0010                  		addi.b	#$10,d4
00009E2E 6400                       		bcc.s	loc_9D62
00009E30 0444 0080                  		subi.w	#$80,d4
00009E34 6400                       		bcc.s	loc_9D62
00009E36 383C 0288                  		move.w	#$288,d4
00009E3A                            
00009E3A                            loc_9D62:
00009E3A 3342 0010                  		move.w	d2,$10(a1)
00009E3E 3343 0012                  		move.w	d3,$12(a1)
00009E42 4442                       		neg.w	d2
00009E44 4444                       		neg.w	d4
00009E46 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009E4A                            
00009E4A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009E4A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009E50 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009E56 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009E5C 303C 00C6                  		move.w	#$C6,d0
00009E60 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009E66                            
00009E66                            Obj37_Bounce:				; XREF: Obj37_Index
00009E66 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009E6C 6100 0000                  		bsr.w	SpeedToPos
00009E70 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E76 6B00                       		bmi.s	Obj37_ChkDel
00009E78 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009E7C D007                       		add.b	d7,d0
00009E7E 0200 0003                  		andi.b	#3,d0
00009E82 6600                       		bne.s	Obj37_ChkDel
00009E84 4EB9 0000 0000             		jsr	ObjHitFloor
00009E8A 4A41                       		tst.w	d1
00009E8C 6A00                       		bpl.s	Obj37_ChkDel
00009E8E D368 000C                  		add.w	d1,$C(a0)
00009E92 3028 0012                  		move.w	$12(a0),d0
00009E96 E440                       		asr.w	#2,d0
00009E98 9168 0012                  		sub.w	d0,$12(a0)
00009E9C 4468 0012                  		neg.w	$12(a0)
00009EA0                            
00009EA0                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009EA0 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009EA4 6700                       		beq.s	Obj37_Delete
00009EA6 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EAA 0640 00E0                  		addi.w	#$E0,d0
00009EAE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009EB2 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009EB4 6000 0000                  		bra.w	DisplaySprite
00009EB8                            ; ===========================================================================
00009EB8                            
00009EB8                            Obj37_Collect:				; XREF: Obj37_Index
00009EB8 5428 0024                  		addq.b	#2,$24(a0)
00009EBC 117C 0000 0020             		move.b	#0,$20(a0)
00009EC2 117C 0001 0018             		move.b	#1,$18(a0)
00009EC8 6100 FE86                  		bsr.w	CollectRing
00009ECC                            
00009ECC                            Obj37_Sparkle:				; XREF: Obj37_Index
00009ECC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009ED2 6100 0000                  		bsr.w	AnimateSprite
00009ED6 6000 0000                  		bra.w	DisplaySprite
00009EDA                            ; ===========================================================================
00009EDA                            
00009EDA                            Obj37_Delete:				; XREF: Obj37_Index
00009EDA 6000 0000                  		bra.w	DeleteObject
00009EDE                            ; ===========================================================================
00009EDE                            ; ---------------------------------------------------------------------------
00009EDE                            ; Object 4B - giant ring for entry to special stage
00009EDE                            ; ---------------------------------------------------------------------------
00009EDE                            
00009EDE                            Obj4B:					; XREF: Obj_Index
00009EDE 7000                       		moveq	#0,d0
00009EE0 1028 0024                  		move.b	$24(a0),d0
00009EE4 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009EE8 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009EEC                            ; ===========================================================================
00009EEC 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009EEE 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009EF0 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009EF2 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009EF4                            ; ===========================================================================
00009EF4                            
00009EF4                            Obj4B_Main:				; XREF: Obj4B_Index
00009EF4 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009EFC 317C 2400 0002             		move.w	#$2400,2(a0)
00009F02 0028 0004 0001             		ori.b	#4,1(a0)
00009F08 117C 0040 0019             		move.b	#$40,$19(a0)
00009F0E 4A28 0001                  		tst.b	1(a0)
00009F12 6A00                       		bpl.s	Obj4B_Animate
00009F14 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009F1A 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009F1E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009F24 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009F26 4E75                       		rts	
00009F28                            ; ===========================================================================
00009F28                            
00009F28                            Obj4B_Okay:				; XREF: Obj4B_Main
00009F28 5428 0024                  		addq.b	#2,$24(a0)
00009F2C 117C 0002 0018             		move.b	#2,$18(a0)
00009F32 117C 0052 0020             		move.b	#$52,$20(a0)
00009F38 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009F3E                            
00009F3E                            Obj4B_Animate:				; XREF: Obj4B_Index
00009F3E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009F44 3028 0008                  		move.w	8(a0),d0
00009F48 0240 FF80                  		andi.w	#$FF80,d0
00009F4C 3238 F700                  		move.w	($FFFFF700).w,d1
00009F50 0441 0080                  		subi.w	#$80,d1
00009F54 0241 FF80                  		andi.w	#$FF80,d1
00009F58 9041                       		sub.w	d1,d0
00009F5A 0C40 0280                  		cmpi.w	#$280,d0
00009F5E 6200 0000                  		bhi.w	DeleteObject
00009F62 6000 0000                  		bra.w	DisplaySprite
00009F66                            ; ===========================================================================
00009F66                            
00009F66                            Obj4B_Collect:				; XREF: Obj4B_Index
00009F66 5528 0024                  		subq.b	#2,$24(a0)
00009F6A 117C 0000 0020             		move.b	#0,$20(a0)
00009F70 6100 0000                  		bsr.w	SingleObjLoad
00009F74 6600 0000                  		bne.w	Obj4B_PlaySnd
00009F78 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009F7C 3368 0008 0008             		move.w	8(a0),8(a1)
00009F82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F88 2348 003C                  		move.l	a0,$3C(a1)
00009F8C 3038 D008                  		move.w	($FFFFD008).w,d0
00009F90 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009F94 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009F96 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009F9C                            
00009F9C                            Obj4B_PlaySnd:
00009F9C 303C 00C3                  		move.w	#$C3,d0
00009FA0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009FA6 6096                       		bra.s	Obj4B_Animate
00009FA8                            ; ===========================================================================
00009FA8                            
00009FA8                            Obj4B_Delete:				; XREF: Obj4B_Index
00009FA8 6000 0000                  		bra.w	DeleteObject
00009FAC                            ; ===========================================================================
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Object 7C - flash effect when	you collect the	giant ring
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            
00009FAC                            Obj7C:					; XREF: Obj_Index
00009FAC 7000                       		moveq	#0,d0
00009FAE 1028 0024                  		move.b	$24(a0),d0
00009FB2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009FB6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009FBA                            ; ===========================================================================
00009FBA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009FBC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009FBE 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009FC0                            ; ===========================================================================
00009FC0                            
00009FC0                            Obj7C_Main:				; XREF: Obj7C_Index
00009FC0 5428 0024                  		addq.b	#2,$24(a0)
00009FC4 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009FCC 317C 2462 0002             		move.w	#$2462,2(a0)
00009FD2 0028 0004 0001             		ori.b	#4,1(a0)
00009FD8 117C 0000 0018             		move.b	#0,$18(a0)
00009FDE 117C 0020 0019             		move.b	#$20,$19(a0)
00009FE4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009FEA                            
00009FEA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009FEA 6100                       		bsr.s	Obj7C_Collect
00009FEC 3028 0008                  		move.w	8(a0),d0
00009FF0 0240 FF80                  		andi.w	#$FF80,d0
00009FF4 3238 F700                  		move.w	($FFFFF700).w,d1
00009FF8 0441 0080                  		subi.w	#$80,d1
00009FFC 0241 FF80                  		andi.w	#$FF80,d1
0000A000 9041                       		sub.w	d1,d0
0000A002 0C40 0280                  		cmpi.w	#$280,d0
0000A006 6200 0000                  		bhi.w	DeleteObject
0000A00A 6000 0000                  		bra.w	DisplaySprite
0000A00E                            
0000A00E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A00E                            
0000A00E                            
0000A00E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A00E 5328 001E                  		subq.b	#1,$1E(a0)
0000A012 6A00                       		bpl.s	locret_9F76
0000A014 117C 0001 001E             		move.b	#1,$1E(a0)
0000A01A 5228 001A                  		addq.b	#1,$1A(a0)
0000A01E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A024 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A026 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A02C 6600                       		bne.s	locret_9F76	; if not, branch
0000A02E 2268 003C                  		movea.l	$3C(a0),a1
0000A032 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A038 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A03E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A044 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A048 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A04C                            
0000A04C                            locret_9F76:
0000A04C 4E75                       		rts	
0000A04E                            ; ===========================================================================
0000A04E                            
0000A04E                            Obj7C_End:				; XREF: Obj7C_Collect
0000A04E 5428 0024                  		addq.b	#2,$24(a0)
0000A052 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A058 588F                       		addq.l	#4,sp
0000A05A 4E75                       		rts	
0000A05C                            ; End of function Obj7C_Collect
0000A05C                            
0000A05C                            ; ===========================================================================
0000A05C                            
0000A05C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A05C 6000 0000                  		bra.w	DeleteObject
0000A060                            ; ===========================================================================
0000A060                            Ani_obj25:
0000A060                            	include "_anim\obj25.asm"
0000A060                            ; ---------------------------------------------------------------------------
0000A060                            ; Animation script - ring
0000A060                            ; ---------------------------------------------------------------------------
0000A060 0000                       		dc.w byte_9F8C-Ani_obj25
0000A062 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A068                            		even
0000A068                            		even
0000A068                            
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            ; Sprite mappings - rings
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            Map_obj25:
0000A068                            	include "_maps\obj25.asm"
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            ; Sprite mappings - rings
0000A068                            ; ---------------------------------------------------------------------------
0000A068 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A06C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A070 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A074 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A078 01                         byte_9FA2:	dc.b 1
0000A079 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A07E 01                         byte_9FA8:	dc.b 1
0000A07F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A084 01                         byte_9FAE:	dc.b 1
0000A085 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A08A 01                         byte_9FB4:	dc.b 1
0000A08B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A090 01                         byte_9FBA:	dc.b 1
0000A091 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A096 01                         byte_9FC0:	dc.b 1
0000A097 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A09C 01                         byte_9FC6:	dc.b 1
0000A09D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A0A2 01                         byte_9FCC:	dc.b 1
0000A0A3 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A0A8                            		even
0000A0A8                            		even
0000A0A8                            
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8                            ; Sprite mappings - giant ring
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8                            Map_obj4B:
0000A0A8                            	include "_maps\obj4B.asm"
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8                            ; Sprite mappings - giant ring
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A0AC 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A0B0 0A                         byte_9FDA:	dc.b $A
0000A0B1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A0B6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A0BB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A0C0 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A0C5 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A0CA F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A0CF 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A0D4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A0D9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A0DE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A0E3 08                         byte_A00D:	dc.b 8
0000A0E4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A0E9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A0EE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A0F3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A0F8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A0FD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A102 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A107 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A10C 04                         byte_A036:	dc.b 4
0000A10D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A112 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A117 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A11C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A121 08                         byte_A04B:	dc.b 8
0000A122 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A127 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A12C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A131 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A136 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A13B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A140 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A145 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A14A                            		even
0000A14A                            		even
0000A14A                            
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            Map_obj7C:
0000A14A                            	include "_maps\obj7C.asm"
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A14E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A152 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A156 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A15A 02                         byte_A084:	dc.b 2
0000A15B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A160 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A165 04                         byte_A08F:	dc.b 4
0000A166 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A16B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A170 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A175 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A17A 04                         byte_A0A4:	dc.b 4
0000A17B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A180 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A185 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A18A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A18F 04                         byte_A0B9:	dc.b 4
0000A190 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A195 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A19A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A19F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A1A4 04                         byte_A0CE:	dc.b 4
0000A1A5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A1AA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A1AF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A1B4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A1B9 04                         byte_A0E3:	dc.b 4
0000A1BA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A1BF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A1C4 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A1C9 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A1CE 02                         byte_A0F8:	dc.b 2
0000A1CF E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A1D4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A1D9 04                         byte_A103:	dc.b 4
0000A1DA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A1DF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A1E4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A1E9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A1EE                            		even
0000A1EE                            		even
0000A1EE                            
0000A1EE                            ; ===========================================================================
0000A1EE                            ; ---------------------------------------------------------------------------
0000A1EE                            ; Object 26 - monitors
0000A1EE                            ; ---------------------------------------------------------------------------
0000A1EE                            
0000A1EE                            Obj26:					; XREF: Obj_Index
0000A1EE 7000                       		moveq	#0,d0
0000A1F0 1028 0024                  		move.b	$24(a0),d0
0000A1F4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A1F8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A1FC                            ; ===========================================================================
0000A1FC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A1FE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A200 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A202 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A204 0000                       		dc.w Obj26_Display-Obj26_Index
0000A206                            ; ===========================================================================
0000A206                            
0000A206                            Obj26_Main:				; XREF: Obj26_Index
0000A206 5428 0024                  		addq.b	#2,$24(a0)
0000A20A 117C 000E 0016             		move.b	#$E,$16(a0)
0000A210 117C 000E 0017             		move.b	#$E,$17(a0)
0000A216 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A21E 317C 0680 0002             		move.w	#$680,2(a0)
0000A224 117C 0004 0001             		move.b	#4,1(a0)
0000A22A 117C 0003 0018             		move.b	#3,$18(a0)
0000A230 117C 000F 0019             		move.b	#$F,$19(a0)
0000A236 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A23A 7000                       		moveq	#0,d0
0000A23C 1028 0023                  		move.b	$23(a0),d0
0000A240 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A246 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A24C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A24E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A254 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A25A 4E75                       		rts	
0000A25C                            ; ===========================================================================
0000A25C                            
0000A25C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A25C 117C 0046 0020             		move.b	#$46,$20(a0)
0000A262 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A268                            
0000A268                            Obj26_Solid:				; XREF: Obj26_Index
0000A268 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A26C 6700                       		beq.s	loc_A1EC	; if not, branch
0000A26E 5500                       		subq.b	#2,d0
0000A270 6600                       		bne.s	Obj26_Fall
0000A272 7200                       		moveq	#0,d1
0000A274 1228 0019                  		move.b	$19(a0),d1
0000A278 0641 000B                  		addi.w	#$B,d1
0000A27C 6100 D448                  		bsr.w	ExitPlatform
0000A280 0829 0003 0022             		btst	#3,$22(a1)
0000A286 6600 0000                  		bne.w	loc_A1BC
0000A28A 4228 0025                  		clr.b	$25(a0)
0000A28E 6000 0000                  		bra.w	Obj26_Animate
0000A292                            ; ===========================================================================
0000A292                            
0000A292                            loc_A1BC:				; XREF: Obj26_Solid
0000A292 363C 0010                  		move.w	#$10,d3
0000A296 3428 0008                  		move.w	8(a0),d2
0000A29A 6100 D988                  		bsr.w	MvSonicOnPtfm
0000A29E 6000 0000                  		bra.w	Obj26_Animate
0000A2A2                            ; ===========================================================================
0000A2A2                            
0000A2A2                            Obj26_Fall:				; XREF: Obj26_Solid
0000A2A2 6100 0000                  		bsr.w	ObjectFall
0000A2A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2AC 4A41                       		tst.w	d1
0000A2AE 6A00 0000                  		bpl.w	Obj26_Animate
0000A2B2 D368 000C                  		add.w	d1,$C(a0)
0000A2B6 4268 0012                  		clr.w	$12(a0)
0000A2BA 4228 0025                  		clr.b	$25(a0)
0000A2BE 6000 0000                  		bra.w	Obj26_Animate
0000A2C2                            ; ===========================================================================
0000A2C2                            
0000A2C2                            loc_A1EC:				; XREF: Obj26_Solid
0000A2C2 323C 001A                  		move.w	#$1A,d1
0000A2C6 343C 000F                  		move.w	#$F,d2
0000A2CA 6100 0000                  		bsr.w	Obj26_SolidSides
0000A2CE 6700 0000                  		beq.w	loc_A25C
0000A2D2 4A69 0012                  		tst.w	$12(a1)
0000A2D6 6B00                       		bmi.s	loc_A20A
0000A2D8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A2DE 6700                       		beq.s	loc_A25C	; if yes, branch
0000A2E0                            
0000A2E0                            loc_A20A:
0000A2E0 4A41                       		tst.w	d1
0000A2E2 6A00                       		bpl.s	loc_A220
0000A2E4 9769 000C                  		sub.w	d3,$C(a1)
0000A2E8 6100 D2CA                  		bsr.w	loc_74AE
0000A2EC 117C 0002 0025             		move.b	#2,$25(a0)
0000A2F2 6000 0000                  		bra.w	Obj26_Animate
0000A2F6                            ; ===========================================================================
0000A2F6                            
0000A2F6                            loc_A220:
0000A2F6 4A40                       		tst.w	d0
0000A2F8 6700 0000                  		beq.w	loc_A246
0000A2FC 6B00                       		bmi.s	loc_A230
0000A2FE 4A69 0010                  		tst.w	$10(a1)
0000A302 6B00                       		bmi.s	loc_A246
0000A304 6000                       		bra.s	loc_A236
0000A306                            ; ===========================================================================
0000A306                            
0000A306                            loc_A230:
0000A306 4A69 0010                  		tst.w	$10(a1)
0000A30A 6A00                       		bpl.s	loc_A246
0000A30C                            
0000A30C                            loc_A236:
0000A30C 9169 0008                  		sub.w	d0,8(a1)
0000A310 337C 0000 0014             		move.w	#0,$14(a1)
0000A316 337C 0000 0010             		move.w	#0,$10(a1)
0000A31C                            
0000A31C                            loc_A246:
0000A31C 0829 0001 0022             		btst	#1,$22(a1)
0000A322 6600                       		bne.s	loc_A26A
0000A324 08E9 0005 0022             		bset	#5,$22(a1)
0000A32A 08E8 0005 0022             		bset	#5,$22(a0)
0000A330 6000                       		bra.s	Obj26_Animate
0000A332                            ; ===========================================================================
0000A332                            
0000A332                            loc_A25C:
0000A332 0828 0005 0022             		btst	#5,$22(a0)
0000A338 6700                       		beq.s	Obj26_Animate
0000A33A 337C 0001 001C             		move.w	#1,$1C(a1)
0000A340                            
0000A340                            loc_A26A:
0000A340 08A8 0005 0022             		bclr	#5,$22(a0)
0000A346 08A9 0005 0022             		bclr	#5,$22(a1)
0000A34C                            
0000A34C                            Obj26_Animate:				; XREF: Obj26_Index
0000A34C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A352 6100 0000                  		bsr.w	AnimateSprite
0000A356                            
0000A356                            Obj26_Display:				; XREF: Obj26_Index
0000A356 6100 0000                  		bsr.w	DisplaySprite
0000A35A 3028 0008                  		move.w	8(a0),d0
0000A35E 0240 FF80                  		andi.w	#$FF80,d0
0000A362 3238 F700                  		move.w	($FFFFF700).w,d1
0000A366 0441 0080                  		subi.w	#$80,d1
0000A36A 0241 FF80                  		andi.w	#$FF80,d1
0000A36E 9041                       		sub.w	d1,d0
0000A370 0C40 0280                  		cmpi.w	#$280,d0
0000A374 6200 0000                  		bhi.w	DeleteObject
0000A378 4E75                       		rts	
0000A37A                            ; ===========================================================================
0000A37A                            
0000A37A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A37A 5428 0024                  		addq.b	#2,$24(a0)
0000A37E 117C 0000 0020             		move.b	#0,$20(a0)
0000A384 6100 0000                  		bsr.w	SingleObjLoad
0000A388 6600                       		bne.s	Obj26_Explode
0000A38A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A38E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A394 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A39A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A3A0                            
0000A3A0                            Obj26_Explode:
0000A3A0 6100 0000                  		bsr.w	SingleObjLoad
0000A3A4 6600                       		bne.s	Obj26_SetBroken
0000A3A6 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A3AA 5429 0024                  		addq.b	#2,$24(a1)
0000A3AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3BA                            
0000A3BA                            Obj26_SetBroken:
0000A3BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3BE 7000                       		moveq	#0,d0
0000A3C0 1028 0023                  		move.b	$23(a0),d0
0000A3C4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A3CA 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A3D0 6000 0000                  		bra.w	DisplaySprite
0000A3D4                            ; ===========================================================================
0000A3D4                            ; ---------------------------------------------------------------------------
0000A3D4                            ; Object 2E - contents of monitors
0000A3D4                            ; ---------------------------------------------------------------------------
0000A3D4                            
0000A3D4                            Obj2E:					; XREF: Obj_Index
0000A3D4 7000                       		moveq	#0,d0
0000A3D6 1028 0024                  		move.b	$24(a0),d0
0000A3DA 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A3DE 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A3E2 6000 0000                  		bra.w	DisplaySprite
0000A3E6                            ; ===========================================================================
0000A3E6 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A3E8 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A3EA 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            Obj2E_Main:				; XREF: Obj2E_Index
0000A3EC 5428 0024                  		addq.b	#2,$24(a0)
0000A3F0 317C 0680 0002             		move.w	#$680,2(a0)
0000A3F6 117C 0024 0001             		move.b	#$24,1(a0)
0000A3FC 117C 0003 0018             		move.b	#3,$18(a0)
0000A402 117C 0008 0019             		move.b	#8,$19(a0)
0000A408 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A40E 7000                       		moveq	#0,d0
0000A410 1028 001C                  		move.b	$1C(a0),d0
0000A414 5400                       		addq.b	#2,d0
0000A416 1140 001A                  		move.b	d0,$1A(a0)
0000A41A 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A420 D000                       		add.b	d0,d0
0000A422 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A426 5249                       		addq.w	#1,a1
0000A428 2149 0004                  		move.l	a1,4(a0)
0000A42C                            
0000A42C                            Obj2E_Move:				; XREF: Obj2E_Index
0000A42C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A430 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A434 6100 0000                  		bsr.w	SpeedToPos
0000A438 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A43E 4E75                       		rts	
0000A440                            ; ===========================================================================
0000A440                            
0000A440                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A440 5428 0024                  		addq.b	#2,$24(a0)
0000A444 317C 001D 001E             		move.w	#29,$1E(a0)
0000A44A 1028 001C                  		move.b	$1C(a0),d0
0000A44E 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A452 6600                       		bne.s	Obj2E_ChkSonic
0000A454 4E75                       		rts			; Eggman monitor does nothing
0000A456                            ; ===========================================================================
0000A456                            
0000A456                            Obj2E_ChkSonic:
0000A456 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A45A 6600                       		bne.s	Obj2E_ChkShoes
0000A45C                            
0000A45C                            ExtraLife:
0000A45C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A460 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A464 303C 0088                  		move.w	#$88,d0
0000A468 4EF9 0000 1396             		jmp	(PlaySound).l	; play extra life music
0000A46E                            ; ===========================================================================
0000A46E                            
0000A46E                            Obj2E_ChkShoes:
0000A46E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A472 6600                       		bne.s	Obj2E_ChkShield
0000A474 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A47A 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A480 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A486 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A48C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A492 303C 00E2                  		move.w	#$E2,d0
0000A496 4EF9 0000 1396             		jmp	(PlaySound).l	; Speed	up the music
0000A49C                            ; ===========================================================================
0000A49C                            
0000A49C                            Obj2E_ChkShield:
0000A49C 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A4A0 6600                       		bne.s	Obj2E_ChkInvinc
0000A4A2 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A4A8 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A4AE 303C 00AF                  		move.w	#$AF,d0
0000A4B2 4EF9 0000 1396             		jmp	(PlaySound).l	; play shield sound
0000A4B8                            ; ===========================================================================
0000A4B8                            
0000A4B8                            Obj2E_ChkInvinc:
0000A4B8 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A4BC 6600                       		bne.s	Obj2E_ChkRings
0000A4BE 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A4C4 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A4CA 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A4D0 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A4D6 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A4DC 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A4E2 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A4E8 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A4EE 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A4F4 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A4FA 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A4FE 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A500 303C 0087                  		move.w	#$87,d0
0000A504 4EF9 0000 1396             		jmp	(PlaySound).l	; play invincibility music
0000A50A                            ; ===========================================================================
0000A50A                            
0000A50A                            Obj2E_NoMusic:
0000A50A 4E75                       		rts	
0000A50C                            ; ===========================================================================
0000A50C                            
0000A50C                            Obj2E_ChkRings:
0000A50C 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A510 6600                       		bne.s	Obj2E_ChkS
0000A512 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A518 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A51E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A524 6500                       		bcs.s	Obj2E_RingSound
0000A526 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A52C 6700 FF2E                  		beq.w	ExtraLife
0000A530 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A536 6500                       		bcs.s	Obj2E_RingSound
0000A538 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A53E 6700 FF1C                  		beq.w	ExtraLife
0000A542                            
0000A542                            Obj2E_RingSound:
0000A542 303C 00B5                  		move.w	#$B5,d0
0000A546 4EF9 0000 1396             		jmp	(PlaySound).l	; play ring sound
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Obj2E_ChkS:
0000A54C 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A550 6600                       		bne.s	Obj2E_ChkEnd
0000A552                            		; nop	
0000A552 7201                       		moveq	#1,d1
0000A554 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A558                            
0000A558                            Obj2E_ChkEnd:
0000A558 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A55A                            ; ===========================================================================
0000A55A                            
0000A55A                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A55A 5368 001E                  		subq.w	#1,$1E(a0)
0000A55E 6B00 0000                  		bmi.w	DeleteObject
0000A562 4E75                       		rts	
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            ; Subroutine to	make the sides of a monitor solid
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            
0000A564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A564                            
0000A564                            
0000A564                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A564 43F8 D000                  		lea	($FFFFD000).w,a1
0000A568 3029 0008                  		move.w	8(a1),d0
0000A56C 9068 0008                  		sub.w	8(a0),d0
0000A570 D041                       		add.w	d1,d0
0000A572 6B00                       		bmi.s	loc_A4E6
0000A574 3601                       		move.w	d1,d3
0000A576 D643                       		add.w	d3,d3
0000A578 B043                       		cmp.w	d3,d0
0000A57A 6200                       		bhi.s	loc_A4E6
0000A57C 1629 0016                  		move.b	$16(a1),d3
0000A580 4883                       		ext.w	d3
0000A582 D443                       		add.w	d3,d2
0000A584 3629 000C                  		move.w	$C(a1),d3
0000A588 9668 000C                  		sub.w	$C(a0),d3
0000A58C D642                       		add.w	d2,d3
0000A58E 6B00                       		bmi.s	loc_A4E6
0000A590 D442                       		add.w	d2,d2
0000A592 B642                       		cmp.w	d2,d3
0000A594 6400                       		bcc.s	loc_A4E6
0000A596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A59A 6B00                       		bmi.s	loc_A4E6
0000A59C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A5A2 6400                       		bcc.s	loc_A4E6
0000A5A4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A5A8 6600                       		bne.s	loc_A4E6
0000A5AA B240                       		cmp.w	d0,d1
0000A5AC 6400                       		bcc.s	loc_A4DC
0000A5AE D241                       		add.w	d1,d1
0000A5B0 9041                       		sub.w	d1,d0
0000A5B2                            
0000A5B2                            loc_A4DC:
0000A5B2 0C43 0010                  		cmpi.w	#$10,d3
0000A5B6 6500                       		bcs.s	loc_A4EA
0000A5B8                            
0000A5B8                            loc_A4E2:
0000A5B8 7201                       		moveq	#1,d1
0000A5BA 4E75                       		rts	
0000A5BC                            ; ===========================================================================
0000A5BC                            
0000A5BC                            loc_A4E6:
0000A5BC 7200                       		moveq	#0,d1
0000A5BE 4E75                       		rts	
0000A5C0                            ; ===========================================================================
0000A5C0                            
0000A5C0                            loc_A4EA:
0000A5C0 7200                       		moveq	#0,d1
0000A5C2 1228 0019                  		move.b	$19(a0),d1
0000A5C6 5841                       		addq.w	#4,d1
0000A5C8 3401                       		move.w	d1,d2
0000A5CA D442                       		add.w	d2,d2
0000A5CC D269 0008                  		add.w	8(a1),d1
0000A5D0 9268 0008                  		sub.w	8(a0),d1
0000A5D4 6BE2                       		bmi.s	loc_A4E2
0000A5D6 B242                       		cmp.w	d2,d1
0000A5D8 64DE                       		bcc.s	loc_A4E2
0000A5DA 72FF                       		moveq	#-1,d1
0000A5DC 4E75                       		rts	
0000A5DE                            ; End of function Obj26_SolidSides
0000A5DE                            
0000A5DE                            ; ===========================================================================
0000A5DE                            Ani_obj26:
0000A5DE                            	include "_anim\obj26.asm"
0000A5DE                            ; ---------------------------------------------------------------------------
0000A5DE                            ; Animation script - monitors
0000A5DE                            ; ---------------------------------------------------------------------------
0000A5DE 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A5E4 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A5EA 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A5F0 0000                       		dc.w byte_A582-Ani_obj26
0000A5F2 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A5F8 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A604 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A610 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A61C 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A628 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A634 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A640 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A64C 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A658 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A660                            		even
0000A660                            		even
0000A660                            
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - monitors
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            Map_obj26:
0000A660                            	include "_maps\obj26.asm"
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - monitors
0000A660                            ; ---------------------------------------------------------------------------
0000A660 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A664 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A668 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A66C 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A670 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A674 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A678 01                         byte_A5A2:	dc.b 1			; static monitor
0000A679 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A67E 02                         byte_A5A8:	dc.b 2			; static monitor
0000A67F F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A684 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A689 02                         byte_A5B3:	dc.b 2			; static monitor
0000A68A F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A68F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A694 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A695 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A69A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A69F 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A6A0 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A6A5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6AA 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A6AB F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A6B0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6B5 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A6B6 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A6BB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6C0 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A6C1 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A6C6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6CB 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A6CC F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A6D1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6D6 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A6D7 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A6DC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6E1 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A6E2 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A6E7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6EC 01                         byte_A616:	dc.b 1			; broken monitor
0000A6ED FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A6F2                            		even
0000A6F2                            		even
0000A6F2                            
0000A6F2                            ; ===========================================================================
0000A6F2                            ; ---------------------------------------------------------------------------
0000A6F2                            ; Object 0E - Sonic on the title screen
0000A6F2                            ; ---------------------------------------------------------------------------
0000A6F2                            
0000A6F2                            Obj0E:					; XREF: Obj_Index
0000A6F2 7000                       		moveq	#0,d0
0000A6F4 1028 0024                  		move.b	$24(a0),d0
0000A6F8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A6FC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A700                            ; ===========================================================================
0000A700 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A702 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A704 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A706 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A708                            ; ===========================================================================
0000A708                            
0000A708                            Obj0E_Main:				; XREF: Obj0E_Index
0000A708 5428 0024                  		addq.b	#2,$24(a0)
0000A70C 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A712 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A718 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A720 317C 2300 0002             		move.w	#$2300,2(a0)
0000A726 117C 0001 0018             		move.b	#1,$18(a0)
0000A72C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A732 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A738 6100 0000                  		bsr.w	AnimateSprite
0000A73C                            
0000A73C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A73C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A740 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A742 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A746 6000 0000                  		bra.w	DisplaySprite
0000A74A                            ; ===========================================================================
0000A74A                            
0000A74A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A74A 4E75                       		rts	
0000A74C                            ; ===========================================================================
0000A74C                            
0000A74C                            Obj0E_Move:				; XREF: Obj0E_Index
0000A74C 5168 000A                  		subq.w	#8,$A(a0)
0000A750 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A756 6600                       		bne.s	Obj0E_Display
0000A758 5428 0024                  		addq.b	#2,$24(a0)
0000A75C                            
0000A75C                            Obj0E_Display:
0000A75C 6000 0000                  		bra.w	DisplaySprite
0000A760                            ; ===========================================================================
0000A760 4E75                       		rts	
0000A762                            ; ===========================================================================
0000A762                            
0000A762                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A762 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A768 6100 0000                  		bsr.w	AnimateSprite
0000A76C 6000 0000                  		bra.w	DisplaySprite
0000A770                            ; ===========================================================================
0000A770 4E75                       		rts	
0000A772                            ; ===========================================================================
0000A772                            ; ---------------------------------------------------------------------------
0000A772                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A772                            ; ---------------------------------------------------------------------------
0000A772                            
0000A772                            Obj0F:					; XREF: Obj_Index
0000A772 7000                       		moveq	#0,d0
0000A774 1028 0024                  		move.b	$24(a0),d0
0000A778 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A77C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A780 6000 0000                  		bra.w	DisplaySprite
0000A784                            ; ===========================================================================
0000A784 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A786 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A788 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A78A                            ; ===========================================================================
0000A78A                            
0000A78A                            Obj0F_Main:				; XREF: Obj0F_Index
0000A78A 5428 0024                  		addq.b	#2,$24(a0)
0000A78E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A794 317C 0130 000A             		move.w	#$130,$A(a0)
0000A79A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A7A2 317C 0200 0002             		move.w	#$200,2(a0)
0000A7A8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A7AE 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A7B0 5428 0024                  		addq.b	#2,$24(a0)
0000A7B4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A7BA 6600                       		bne.s	locret_A6F8	; if not, branch
0000A7BC 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A7C2 317C 0170 0008             		move.w	#$170,8(a0)
0000A7C8 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A7CE                            
0000A7CE                            locret_A6F8:				; XREF: Obj0F_Index
0000A7CE 4E75                       		rts	
0000A7D0                            ; ===========================================================================
0000A7D0                            
0000A7D0                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A7D0 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A7D6 6000 0000                  		bra.w	AnimateSprite
0000A7DA                            ; ===========================================================================
0000A7DA                            Ani_obj0E:
0000A7DA                            	include "_anim\obj0E.asm"
0000A7DA                            ; ---------------------------------------------------------------------------
0000A7DA                            ; Animation script - Sonic on the title screen
0000A7DA                            ; ---------------------------------------------------------------------------
0000A7DA 0000                       		dc.w byte_A706-Ani_obj0E
0000A7DC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A7E8                            		even
0000A7E8                            		even
0000A7E8                            
0000A7E8                            Ani_obj0F:
0000A7E8                            	include "_anim\obj0F.asm"
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8 0000                       		dc.w byte_A714-Ani_obj0F
0000A7EA 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A7EE                            		even
0000A7EE                            		even
0000A7EE                            
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            ; Subroutine to	animate	a sprite using an animation script
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            
0000A7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7EE                            
0000A7EE                            
0000A7EE                            AnimateSprite:
0000A7EE 7000                       		moveq	#0,d0
0000A7F0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A7F4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A7F8 6700                       		beq.s	Anim_Run	; if not, branch
0000A7FA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A7FE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A804 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A80A                            
0000A80A                            Anim_Run:
0000A80A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A80E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A810 D040                       		add.w	d0,d0
0000A812 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A816 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A81A 7200                       		moveq	#0,d1
0000A81C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A820 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A824 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A826                            
0000A826                            Anim_Next:
0000A826 1200                       		move.b	d0,d1
0000A828 0200 001F                  		andi.b	#$1F,d0
0000A82C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A830 1028 0022                  		move.b	$22(a0),d0
0000A834 E719                       		rol.b	#3,d1
0000A836 B101                       		eor.b	d0,d1
0000A838 0201 0003                  		andi.b	#3,d1
0000A83C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A842 8328 0001                  		or.b	d1,1(a0)
0000A846 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A84A                            
0000A84A                            Anim_Wait:
0000A84A 4E75                       		rts	
0000A84C                            ; ===========================================================================
0000A84C                            
0000A84C                            Anim_End_FF:
0000A84C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A84E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A850 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A856 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A85A 60CA                       		bra.s	Anim_Next
0000A85C                            ; ===========================================================================
0000A85C                            
0000A85C                            Anim_End_FE:
0000A85C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A85E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A860 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A864 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A868 9200                       		sub.b	d0,d1
0000A86A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A86E 60B6                       		bra.s	Anim_Next
0000A870                            ; ===========================================================================
0000A870                            
0000A870                            Anim_End_FD:
0000A870 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A872 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A874 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A87A                            
0000A87A                            Anim_End_FC:
0000A87A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A87C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A87E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A882                            
0000A882                            Anim_End_FB:
0000A882 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A884 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A886 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A88C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A890                            
0000A890                            Anim_End_FA:
0000A890 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A892 6600                       		bne.s	Anim_End	; if not, branch
0000A894 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A898                            
0000A898                            Anim_End:
0000A898 4E75                       		rts	
0000A89A                            ; End of function AnimateSprite
0000A89A                            
0000A89A                            ; ===========================================================================
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            Map_obj0F:
0000A89A                            	include "_maps\obj0F.asm"
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A 0000                       		dc.w byte_A7CD-Map_obj0F
0000A89C 0000                       		dc.w byte_A7CC-Map_obj0F
0000A89E 0000                       		dc.w byte_A7EB-Map_obj0F
0000A8A0 0000                       		dc.w byte_A882-Map_obj0F
0000A8A2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A8A3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A8A8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A8AD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A8B2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A8B7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A8BC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A8C1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A8C2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8C7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8CC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8DB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8F4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8F9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8FE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A903 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A908 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A90D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A912 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A917 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A91C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A921 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A926 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A92B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A930 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A935 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A944 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A949 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A94E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A953 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A958 01                         byte_A882:	dc.b 1			; "TM"
0000A959 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A95E                            		even
0000A95E                            		even
0000A95E                            
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            ; Sprite mappings - Sonic on the title screen
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            Map_obj0E:
0000A95E                            	include "_maps\obj0E.asm"
0000A95E                            ; ================================================================================
0000A95E                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 15:54:10 GMT-0500 (Central Daylight Time)
0000A95E                            ; ================================================================================
0000A95E                            
0000A95E                            DATANHL9WDDYR1:
0000A95E 0000 0000                  	dc.w DATANHL9WDDYR1_0-DATANHL9WDDYR1, DATANHL9WDDYR1_1-DATANHL9WDDYR1
0000A962 0000 0000                  	dc.w DATANHL9WDDYR1_2-DATANHL9WDDYR1, DATANHL9WDDYR1_3-DATANHL9WDDYR1
0000A966 0000 0000                  	dc.w DATANHL9WDDYR1_4-DATANHL9WDDYR1, DATANHL9WDDYR1_5-DATANHL9WDDYR1
0000A96A 0000 0000                  	dc.w DATANHL9WDDYR1_6-DATANHL9WDDYR1, DATANHL9WDDYR1_7-DATANHL9WDDYR1
0000A96E 0A                         DATANHL9WDDYR1_0: dc.b $A
0000A96F 0808 0000 08               	dc.b $8, $8, $0, $0, $8
0000A974 100F 0003 08               	dc.b $10, $F, $0, $3, $8
0000A979 100F 0013 28               	dc.b $10, $F, $0, $13, $28
0000A97E 300E 0023 08               	dc.b $30, $E, $0, $23, $8
0000A983 300E 002F 28               	dc.b $30, $E, $0, $2F, $28
0000A988 480D 003B 00               	dc.b $48, $D, $0, $3B, $0
0000A98D 4809 0043 20               	dc.b $48, $9, $0, $43, $20
0000A992 4800 0049 38               	dc.b $48, $0, $0, $49, $38
0000A997 580C 004A 08               	dc.b $58, $C, $0, $4A, $8
0000A99C 5800 004E 28               	dc.b $58, $0, $0, $4E, $28
0000A9A1 0F                         DATANHL9WDDYR1_1: dc.b $F
0000A9A2 480E 01BD 20               	dc.b $48, $E, $1, $BD, $20
0000A9A7 3805 01C9 38               	dc.b $38, $5, $1, $C9, $38
0000A9AC 4000 01CD 30               	dc.b $40, $0, $1, $CD, $30
0000A9B1 4800 01CE 40               	dc.b $48, $0, $1, $CE, $40
0000A9B6 6000 01CF 20               	dc.b $60, $0, $1, $CF, $20
0000A9BB 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000A9C0 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000A9C5 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000A9CA 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000A9CF 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000A9D4 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000A9D9 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000A9DE 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000A9E3 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000A9E8 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000A9ED 11                         DATANHL9WDDYR1_2: dc.b $11
0000A9EE 380E 01BD 28               	dc.b $38, $E, $1, $BD, $28
0000A9F3 2805 01C9 40               	dc.b $28, $5, $1, $C9, $40
0000A9F8 3000 01CD 38               	dc.b $30, $0, $1, $CD, $38
0000A9FD 3800 01CE 48               	dc.b $38, $0, $1, $CE, $48
0000AA02 5000 01CF 28               	dc.b $50, $0, $1, $CF, $28
0000AA07 200F 01A9 08               	dc.b $20, $F, $1, $A9, $8
0000AA0C 2003 01B9 28               	dc.b $20, $3, $1, $B9, $28
0000AA11 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000AA16 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000AA1B 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AA20 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AA25 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AA2A 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AA2F 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AA34 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AA39 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AA3E 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AA43 0D                         DATANHL9WDDYR1_3: dc.b $D
0000AA44 100F 00A3 08               	dc.b $10, $F, $0, $A3, $8
0000AA49 0808 00B3 28               	dc.b $8, $8, $0, $B3, $28
0000AA4E 100F 00B6 28               	dc.b $10, $F, $0, $B6, $28
0000AA53 1800 00C6 48               	dc.b $18, $0, $0, $C6, $48
0000AA58 2006 00C7 48               	dc.b $20, $6, $0, $C7, $48
0000AA5D 3800 00CD 48               	dc.b $38, $0, $0, $CD, $48
0000AA62 300D 00CE 08               	dc.b $30, $D, $0, $CE, $8
0000AA67 300E 00D6 28               	dc.b $30, $E, $0, $D6, $28
0000AA6C 400B 00E2 10               	dc.b $40, $B, $0, $E2, $10
0000AA71 4808 00EE 28               	dc.b $48, $8, $0, $EE, $28
0000AA76 5001 00F1 08               	dc.b $50, $1, $0, $F1, $8
0000AA7B 5004 00F3 28               	dc.b $50, $4, $0, $F3, $28
0000AA80 5800 00F5 28               	dc.b $58, $0, $0, $F5, $28
0000AA85 0B                         DATANHL9WDDYR1_4: dc.b $B
0000AA86 080F 00F6 10               	dc.b $8, $F, $0, $F6, $10
0000AA8B 080B 0106 30               	dc.b $8, $B, $1, $6, $30
0000AA90 1006 0112 48               	dc.b $10, $6, $1, $12, $48
0000AA95 280E 0118 18               	dc.b $28, $E, $1, $18, $18
0000AA9A 280E 0124 38               	dc.b $28, $E, $1, $24, $38
0000AA9F 2801 0130 10               	dc.b $28, $1, $1, $30, $10
0000AAA4 400E 0132 10               	dc.b $40, $E, $1, $32, $10
0000AAA9 4006 013E 30               	dc.b $40, $6, $1, $3E, $30
0000AAAE 4004 0144 40               	dc.b $40, $4, $1, $44, $40
0000AAB3 4800 0146 40               	dc.b $48, $0, $1, $46, $40
0000AAB8 5808 0147 18               	dc.b $58, $8, $1, $47, $18
0000AABD 13                         DATANHL9WDDYR1_5: dc.b $13
0000AABE 280E 01E4 38               	dc.b $28, $E, $1, $E4, $38
0000AAC3 1805 01F0 48               	dc.b $18, $5, $1, $F0, $48
0000AAC8 4008 01F4 38               	dc.b $40, $8, $1, $F4, $38
0000AACD 4804 01F7 38               	dc.b $48, $4, $1, $F7, $38
0000AAD2 100F 014A 10               	dc.b $10, $F, $1, $4A, $10
0000AAD7 0804 015A 20               	dc.b $8, $4, $1, $5A, $20
0000AADC 000B 015C 30               	dc.b $0, $B, $1, $5C, $30
0000AAE1 0800 0168 48               	dc.b $8, $0, $1, $68, $48
0000AAE6 1800 0169 48               	dc.b $18, $0, $1, $69, $48
0000AAEB 1805 016A 00               	dc.b $18, $5, $1, $6A, $0
0000AAF0 2802 016E 08               	dc.b $28, $2, $1, $6E, $8
0000AAF5 300F 0171 10               	dc.b $30, $F, $1, $71, $10
0000AAFA 200D 0181 30               	dc.b $20, $D, $1, $81, $30
0000AAFF 2001 0189 50               	dc.b $20, $1, $1, $89, $50
0000AB04 3008 018B 30               	dc.b $30, $8, $1, $8B, $30
0000AB09 380E 018E 30               	dc.b $38, $E, $1, $8E, $30
0000AB0E 500D 019A 08               	dc.b $50, $D, $1, $9A, $8
0000AB13 500C 01A2 28               	dc.b $50, $C, $1, $A2, $28
0000AB18 5808 01A6 28               	dc.b $58, $8, $1, $A6, $28
0000AB1D 0F                         DATANHL9WDDYR1_6: dc.b $F
0000AB1E EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AB23 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AB28 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AB2D EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AB32 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AB37 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AB3C EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AB41 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AB46 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AB4B EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AB50 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000AB55 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000AB5A EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000AB5F 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000AB64 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000AB69 0F                         DATANHL9WDDYR1_7: dc.b $F
0000AB6A EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AB6F 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AB74 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AB79 EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AB7E 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AB83 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AB88 EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AB8D 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AB92 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AB97 EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AB9C 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000ABA1 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000ABA6 EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000ABAB 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000ABB0 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000ABB6 00                         	even
0000ABB6 00                         	even
0000ABB6                            
0000ABB6                            ; ===========================================================================
0000ABB6                            ; ---------------------------------------------------------------------------
0000ABB6                            ; Object 2B - Chopper enemy (GHZ)
0000ABB6                            ; ---------------------------------------------------------------------------
0000ABB6                            
0000ABB6                            Obj2B:					; XREF: Obj_Index
0000ABB6 7000                       		moveq	#0,d0
0000ABB8 1028 0024                  		move.b	$24(a0),d0
0000ABBC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000ABC0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000ABC4 6000 0000                  		bra.w	MarkObjGone
0000ABC8                            ; ===========================================================================
0000ABC8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000ABCA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000ABCC                            ; ===========================================================================
0000ABCC                            
0000ABCC                            Obj2B_Main:				; XREF: Obj2B_Index
0000ABCC 5428 0024                  		addq.b	#2,$24(a0)
0000ABD0 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000ABD8 317C 047B 0002             		move.w	#$47B,2(a0)
0000ABDE 117C 0004 0001             		move.b	#4,1(a0)
0000ABE4 117C 0004 0018             		move.b	#4,$18(a0)
0000ABEA 117C 0009 0020             		move.b	#9,$20(a0)
0000ABF0 117C 0010 0019             		move.b	#$10,$19(a0)
0000ABF6 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000ABFC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AC02                            
0000AC02                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AC02 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AC08 6100 FBE4                  		bsr.w	AnimateSprite
0000AC0C 6100 0000                  		bsr.w	SpeedToPos
0000AC10 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AC16 3028 0030                  		move.w	$30(a0),d0
0000AC1A B068 000C                  		cmp.w	$C(a0),d0
0000AC1E 6400                       		bcc.s	Obj2B_ChgAni
0000AC20 3140 000C                  		move.w	d0,$C(a0)
0000AC24 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC2A                            
0000AC2A                            Obj2B_ChgAni:
0000AC2A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AC30 0440 00C0                  		subi.w	#$C0,d0
0000AC34 B068 000C                  		cmp.w	$C(a0),d0
0000AC38 6400                       		bcc.s	locret_ABB6
0000AC3A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AC40 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AC44 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AC46 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AC4C                            
0000AC4C                            locret_ABB6:
0000AC4C 4E75                       		rts	
0000AC4E                            ; ===========================================================================
0000AC4E                            Ani_obj2B:
0000AC4E                            	include "_anim\obj2B.asm"
0000AC4E                            ; ---------------------------------------------------------------------------
0000AC4E                            ; Animation script - Chopper enemy
0000AC4E                            ; ---------------------------------------------------------------------------
0000AC4E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AC50 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AC52 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AC54 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AC58 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AC5C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AC60 00                         		even
0000AC60 00                         		even
0000AC60                            
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60                            ; Sprite mappings - Chopper enemy (GHZ)
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60                            Map_obj2B:
0000AC60                            	include "_maps\obj2B.asm"
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60                            ; Sprite mappings - Chopper enemy (GHZ)
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60 0000                       		dc.w byte_ABCE-Map_obj2B
0000AC62 0000                       		dc.w byte_ABD4-Map_obj2B
0000AC64 01                         byte_ABCE:	dc.b 1
0000AC65 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000AC6A 01                         byte_ABD4:	dc.b 1
0000AC6B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000AC70                            		even
0000AC70                            		even
0000AC70                            
0000AC70                            ; ===========================================================================
0000AC70                            ; ---------------------------------------------------------------------------
0000AC70                            ; Object 2C - Jaws enemy (LZ)
0000AC70                            ; ---------------------------------------------------------------------------
0000AC70                            
0000AC70                            Obj2C:					; XREF: Obj_Index
0000AC70 7000                       		moveq	#0,d0
0000AC72 1028 0024                  		move.b	$24(a0),d0
0000AC76 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000AC7A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000AC7E                            ; ===========================================================================
0000AC7E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000AC80 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000AC82                            ; ===========================================================================
0000AC82                            
0000AC82                            Obj2C_Main:				; XREF: Obj2C_Index
0000AC82 5428 0024                  		addq.b	#2,$24(a0)
0000AC86 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000AC8E 317C 2486 0002             		move.w	#$2486,2(a0)
0000AC94 0028 0004 0001             		ori.b	#4,1(a0)
0000AC9A 117C 000A 0020             		move.b	#$A,$20(a0)
0000ACA0 117C 0004 0018             		move.b	#4,$18(a0)
0000ACA6 117C 0010 0019             		move.b	#$10,$19(a0)
0000ACAC 7000                       		moveq	#0,d0
0000ACAE 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ACB2 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ACB4 5340                       		subq.w	#1,d0
0000ACB6 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ACBA 3140 0032                  		move.w	d0,$32(a0)
0000ACBE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000ACC4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000ACCA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000ACCC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000ACD0                            
0000ACD0                            Obj2C_Turn:				; XREF: Obj2C_Index
0000ACD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000ACD4 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000ACD6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000ACDC 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000ACE0 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000ACE6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ACEC                            
0000ACEC                            Obj2C_Animate:
0000ACEC 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000ACF2 6100 FAFA                  		bsr.w	AnimateSprite
0000ACF6 6100 0000                  		bsr.w	SpeedToPos
0000ACFA 6000 0000                  		bra.w	MarkObjGone
0000ACFE                            ; ===========================================================================
0000ACFE                            Ani_obj2C:
0000ACFE                            	include "_anim\obj2C.asm"
0000ACFE                            ; ---------------------------------------------------------------------------
0000ACFE                            ; Animation script - Jaws enemy
0000ACFE                            ; ---------------------------------------------------------------------------
0000ACFE 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AD00 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AD06                            		even
0000AD06                            		even
0000AD06                            
0000AD06                            ; ---------------------------------------------------------------------------
0000AD06                            ; Sprite mappings - Jaws enemy (LZ)
0000AD06                            ; ---------------------------------------------------------------------------
0000AD06                            Map_obj2C:
0000AD06                            	include "_maps\obj2C.asm"
0000AD06                            ; ---------------------------------------------------------------------------
0000AD06                            ; Sprite mappings - Jaws enemy (LZ)
0000AD06                            ; ---------------------------------------------------------------------------
0000AD06 0000                       		dc.w byte_AC78-Map_obj2C
0000AD08 0000                       		dc.w byte_AC83-Map_obj2C
0000AD0A 0000                       		dc.w byte_AC8E-Map_obj2C
0000AD0C 0000                       		dc.w byte_AC99-Map_obj2C
0000AD0E 02                         byte_AC78:	dc.b 2
0000AD0F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD14 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AD19 02                         byte_AC83:	dc.b 2
0000AD1A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD1F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AD24 02                         byte_AC8E:	dc.b 2
0000AD25 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD2A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AD2F 02                         byte_AC99:	dc.b 2
0000AD30 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD35 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AD3A                            		even
0000AD3A                            		even
0000AD3A                            
0000AD3A                            ; ===========================================================================
0000AD3A                            ; ---------------------------------------------------------------------------
0000AD3A                            ; Object 2D - Burrobot enemy (LZ)
0000AD3A                            ; ---------------------------------------------------------------------------
0000AD3A                            
0000AD3A                            Obj2D:					; XREF: Obj_Index
0000AD3A 7000                       		moveq	#0,d0
0000AD3C 1028 0024                  		move.b	$24(a0),d0
0000AD40 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AD44 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AD48                            ; ===========================================================================
0000AD48 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AD4A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AD4C                            ; ===========================================================================
0000AD4C                            
0000AD4C                            Obj2D_Main:				; XREF: Obj2D_Index
0000AD4C 5428 0024                  		addq.b	#2,$24(a0)
0000AD50 117C 0013 0016             		move.b	#$13,$16(a0)
0000AD56 117C 0008 0017             		move.b	#8,$17(a0)
0000AD5C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000AD64 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000AD6A 0028 0004 0001             		ori.b	#4,1(a0)
0000AD70 117C 0004 0018             		move.b	#4,$18(a0)
0000AD76 117C 0005 0020             		move.b	#5,$20(a0)
0000AD7C 117C 000C 0019             		move.b	#$C,$19(a0)
0000AD82 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000AD86 117C 0002 001C             		move.b	#2,$1C(a0)
0000AD8C                            
0000AD8C                            Obj2D_Action:				; XREF: Obj2D_Index
0000AD8C 7000                       		moveq	#0,d0
0000AD8E 1028 0025                  		move.b	$25(a0),d0
0000AD92 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000AD96 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000AD9A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ADA0 6100 FA4C                  		bsr.w	AnimateSprite
0000ADA4 6000 0000                  		bra.w	MarkObjGone
0000ADA8                            ; ===========================================================================
0000ADA8 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ADAA 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ADAC 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ADAE 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ADB0                            ; ===========================================================================
0000ADB0                            
0000ADB0                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ADB0 5368 0030                  		subq.w	#1,$30(a0)
0000ADB4 6A00                       		bpl.s	locret_AD42
0000ADB6 5428 0025                  		addq.b	#2,$25(a0)
0000ADBA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ADC0 317C 0080 0010             		move.w	#$80,$10(a0)
0000ADC6 117C 0001 001C             		move.b	#1,$1C(a0)
0000ADCC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000ADD2 6700                       		beq.s	locret_AD42
0000ADD4 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000ADD8                            
0000ADD8                            locret_AD42:
0000ADD8 4E75                       		rts	
0000ADDA                            ; ===========================================================================
0000ADDA                            
0000ADDA                            Obj2D_Move:				; XREF: Obj2D_Index2
0000ADDA 5368 0030                  		subq.w	#1,$30(a0)
0000ADDE 6B00                       		bmi.s	loc_AD84
0000ADE0 6100 0000                  		bsr.w	SpeedToPos
0000ADE4 0868 0000 0032             		bchg	#0,$32(a0)
0000ADEA 6600                       		bne.s	loc_AD78
0000ADEC 3628 0008                  		move.w	8(a0),d3
0000ADF0 0643 000C                  		addi.w	#$C,d3
0000ADF4 0828 0000 0022             		btst	#0,$22(a0)
0000ADFA 6600                       		bne.s	loc_AD6A
0000ADFC 0443 0018                  		subi.w	#$18,d3
0000AE00                            
0000AE00                            loc_AD6A:
0000AE00 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AE06 0C41 000C                  		cmpi.w	#$C,d1
0000AE0A 6C00                       		bge.s	loc_AD84
0000AE0C 4E75                       		rts	
0000AE0E                            ; ===========================================================================
0000AE0E                            
0000AE0E                            loc_AD78:				; XREF: Obj2D_Move
0000AE0E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE14 D368 000C                  		add.w	d1,$C(a0)
0000AE18 4E75                       		rts	
0000AE1A                            ; ===========================================================================
0000AE1A                            
0000AE1A                            loc_AD84:				; XREF: Obj2D_Move
0000AE1A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AE20 6700                       		beq.s	loc_ADA4
0000AE22 5528 0025                  		subq.b	#2,$25(a0)
0000AE26 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AE2C 317C 0000 0010             		move.w	#0,$10(a0)
0000AE32 117C 0000 001C             		move.b	#0,$1C(a0)
0000AE38 4E75                       		rts	
0000AE3A                            ; ===========================================================================
0000AE3A                            
0000AE3A                            loc_ADA4:
0000AE3A 5428 0025                  		addq.b	#2,$25(a0)
0000AE3E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE44 117C 0002 001C             		move.b	#2,$1C(a0)
0000AE4A 4E75                       		rts	
0000AE4C                            ; ===========================================================================
0000AE4C                            
0000AE4C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AE4C 6100 0000                  		bsr.w	SpeedToPos
0000AE50 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE56 6B00                       		bmi.s	locret_ADF0
0000AE58 117C 0003 001C             		move.b	#3,$1C(a0)
0000AE5E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE64 4A41                       		tst.w	d1
0000AE66 6A00                       		bpl.s	locret_ADF0
0000AE68 D368 000C                  		add.w	d1,$C(a0)
0000AE6C 317C 0000 0012             		move.w	#0,$12(a0)
0000AE72 117C 0001 001C             		move.b	#1,$1C(a0)
0000AE78 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AE7E 5528 0025                  		subq.b	#2,$25(a0)
0000AE82 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AE86                            
0000AE86                            locret_ADF0:
0000AE86 4E75                       		rts	
0000AE88                            ; ===========================================================================
0000AE88                            
0000AE88                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AE88 343C 0060                  		move.w	#$60,d2
0000AE8C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AE90 6400                       		bcc.s	locret_AE20
0000AE92 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AE96 9068 000C                  		sub.w	$C(a0),d0
0000AE9A 6400                       		bcc.s	locret_AE20
0000AE9C 0C40 FF80                  		cmpi.w	#-$80,d0
0000AEA0 6500                       		bcs.s	locret_AE20
0000AEA2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AEA6 6600                       		bne.s	locret_AE20
0000AEA8 5528 0025                  		subq.b	#2,$25(a0)
0000AEAC 3141 0010                  		move.w	d1,$10(a0)
0000AEB0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AEB6                            
0000AEB6                            locret_AE20:
0000AEB6 4E75                       		rts	
0000AEB8                            
0000AEB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEB8                            
0000AEB8                            
0000AEB8                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000AEB8 323C 0080                  		move.w	#$80,d1
0000AEBC 08E8 0000 0022             		bset	#0,$22(a0)
0000AEC2 3038 D008                  		move.w	($FFFFD008).w,d0
0000AEC6 9068 0008                  		sub.w	8(a0),d0
0000AECA 6400                       		bcc.s	loc_AE40
0000AECC 4440                       		neg.w	d0
0000AECE 4441                       		neg.w	d1
0000AED0 08A8 0000 0022             		bclr	#0,$22(a0)
0000AED6                            
0000AED6                            loc_AE40:
0000AED6 B042                       		cmp.w	d2,d0
0000AED8 4E75                       		rts	
0000AEDA                            ; End of function Obj2D_ChkSonic2
0000AEDA                            
0000AEDA                            ; ===========================================================================
0000AEDA                            Ani_obj2D:
0000AEDA                            	include "_anim\obj2D.asm"
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            ; Animation script - Burrobot enemy
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AEDC 0000                       		dc.w byte_AE50-Ani_obj2D
0000AEDE 0000                       		dc.w byte_AE54-Ani_obj2D
0000AEE0 0000                       		dc.w byte_AE58-Ani_obj2D
0000AEE2 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AEE6 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AEEA 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AEEE 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AEF2 00                         		even
0000AEF2 00                         		even
0000AEF2                            
0000AEF2                            ; ---------------------------------------------------------------------------
0000AEF2                            ; Sprite mappings - Burrobot enemy (LZ)
0000AEF2                            ; ---------------------------------------------------------------------------
0000AEF2                            Map_obj2D:
0000AEF2                            	include "_maps\obj2D.asm"
0000AEF2                            ; ---------------------------------------------------------------------------
0000AEF2                            ; Sprite mappings - Burrobot enemy (LZ)
0000AEF2                            ; ---------------------------------------------------------------------------
0000AEF2 0000                       		dc.w byte_AE6A-Map_obj2D
0000AEF4 0000                       		dc.w byte_AE75-Map_obj2D
0000AEF6 0000                       		dc.w byte_AE80-Map_obj2D
0000AEF8 0000                       		dc.w byte_AE8B-Map_obj2D
0000AEFA 0000                       		dc.w byte_AE96-Map_obj2D
0000AEFC 0000                       		dc.w byte_AEA1-Map_obj2D
0000AEFE 0000                       		dc.w byte_AEAC-Map_obj2D
0000AF00 02                         byte_AE6A:	dc.b 2
0000AF01 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AF06 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF0B 02                         byte_AE75:	dc.b 2
0000AF0C EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF11 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AF16 02                         byte_AE80:	dc.b 2
0000AF17 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AF1C 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AF21 02                         byte_AE8B:	dc.b 2
0000AF22 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AF27 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AF2C 02                         byte_AE96:	dc.b 2
0000AF2D E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AF32 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AF37 02                         byte_AEA1:	dc.b 2
0000AF38 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AF3D F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AF42 02                         byte_AEAC:	dc.b 2
0000AF43 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF48 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF4E 00                         		even
0000AF4E 00                         		even
0000AF4E                            
0000AF4E                            ; ===========================================================================
0000AF4E                            ; ---------------------------------------------------------------------------
0000AF4E                            ; Object 2F - large moving platforms (MZ)
0000AF4E                            ; ---------------------------------------------------------------------------
0000AF4E                            
0000AF4E                            Obj2F:					; XREF: Obj_Index
0000AF4E 7000                       		moveq	#0,d0
0000AF50 1028 0024                  		move.b	$24(a0),d0
0000AF54 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AF58 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AF5C                            ; ===========================================================================
0000AF5C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AF5E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AF60                            
0000AF60 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AF62 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AF64 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AF66 0140                       		dc.b 1,	$40
0000AF68 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AF6A 0220                       		dc.b 2,	$20
0000AF6C                            ; ===========================================================================
0000AF6C                            
0000AF6C                            Obj2F_Main:				; XREF: Obj2F_Index
0000AF6C 5428 0024                  		addq.b	#2,$24(a0)
0000AF70 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AF78 317C C000 0002             		move.w	#$C000,2(a0)
0000AF7E 117C 0004 0001             		move.b	#4,1(a0)
0000AF84 117C 0005 0018             		move.b	#5,$18(a0)
0000AF8A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AF90 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AF96 7000                       		moveq	#0,d0
0000AF98 1028 0028                  		move.b	$28(a0),d0
0000AF9C E448                       		lsr.w	#2,d0
0000AF9E 0240 001C                  		andi.w	#$1C,d0
0000AFA2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AFA6 3019                       		move.w	(a1)+,d0
0000AFA8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AFAC 214A 0030                  		move.l	a2,$30(a0)
0000AFB0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFB4 1151 0019                  		move.b	(a1),$19(a0)
0000AFB8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AFBE 117C 0040 0016             		move.b	#$40,$16(a0)
0000AFC4 08E8 0004 0001             		bset	#4,1(a0)
0000AFCA                            
0000AFCA                            Obj2F_Action:				; XREF: Obj2F_Index
0000AFCA 6100 0000                  		bsr.w	Obj2F_Types
0000AFCE 4A28 0025                  		tst.b	$25(a0)
0000AFD2 6700                       		beq.s	Obj2F_Solid
0000AFD4 7200                       		moveq	#0,d1
0000AFD6 1228 0019                  		move.b	$19(a0),d1
0000AFDA 0641 000B                  		addi.w	#$B,d1
0000AFDE 6100 C6E6                  		bsr.w	ExitPlatform
0000AFE2 0829 0003 0022             		btst	#3,$22(a1)
0000AFE8 6600 0000                  		bne.w	Obj2F_Slope
0000AFEC 4228 0025                  		clr.b	$25(a0)
0000AFF0 6000                       		bra.s	Obj2F_Display
0000AFF2                            ; ===========================================================================
0000AFF2                            
0000AFF2                            Obj2F_Slope:				; XREF: Obj2F_Action
0000AFF2 7200                       		moveq	#0,d1
0000AFF4 1228 0019                  		move.b	$19(a0),d1
0000AFF8 0641 000B                  		addi.w	#$B,d1
0000AFFC 2468 0030                  		movea.l	$30(a0),a2
0000B000 3428 0008                  		move.w	8(a0),d2
0000B004 6100 D61E                  		bsr.w	SlopeObject2
0000B008 6000                       		bra.s	Obj2F_Display
0000B00A                            ; ===========================================================================
0000B00A                            
0000B00A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B00A 7200                       		moveq	#0,d1
0000B00C 1228 0019                  		move.b	$19(a0),d1
0000B010 0641 000B                  		addi.w	#$B,d1
0000B014 343C 0020                  		move.w	#$20,d2
0000B018 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B01E 6600                       		bne.s	loc_AF8E
0000B020 343C 0030                  		move.w	#$30,d2
0000B024                            
0000B024                            loc_AF8E:
0000B024 2468 0030                  		movea.l	$30(a0),a2
0000B028 6100 0000                  		bsr.w	SolidObject2F
0000B02C                            
0000B02C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B02C 6100 0000                  		bsr.w	DisplaySprite
0000B030 6000 0000                  		bra.w	Obj2F_ChkDel
0000B034                            
0000B034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B034                            
0000B034                            
0000B034                            Obj2F_Types:				; XREF: Obj2F_Action
0000B034 7000                       		moveq	#0,d0
0000B036 1028 0028                  		move.b	$28(a0),d0
0000B03A 0240 0007                  		andi.w	#7,d0
0000B03E D040                       		add.w	d0,d0
0000B040 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B044 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B048                            ; End of function Obj2F_Types
0000B048                            
0000B048                            ; ===========================================================================
0000B048 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B04A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B04C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B04E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B050 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B052 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B054                            ; ===========================================================================
0000B054                            
0000B054                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B054 4E75                       		rts			; type 00 platform doesn't move
0000B056                            ; ===========================================================================
0000B056                            
0000B056                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B056 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B05A 323C 0020                  		move.w	#$20,d1
0000B05E 6000                       		bra.s	Obj2F_Move
0000B060                            ; ===========================================================================
0000B060                            
0000B060                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B060 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B064 323C 0030                  		move.w	#$30,d1
0000B068 6000                       		bra.s	Obj2F_Move
0000B06A                            ; ===========================================================================
0000B06A                            
0000B06A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B06A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B06E 323C 0040                  		move.w	#$40,d1
0000B072 6000                       		bra.s	Obj2F_Move
0000B074                            ; ===========================================================================
0000B074                            
0000B074                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B074 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B078 323C 0060                  		move.w	#$60,d1
0000B07C                            
0000B07C                            Obj2F_Move:
0000B07C 0828 0003 0028             		btst	#3,$28(a0)
0000B082 6700                       		beq.s	loc_AFF2
0000B084 4440                       		neg.w	d0
0000B086 D041                       		add.w	d1,d0
0000B088                            
0000B088                            loc_AFF2:
0000B088 3228 002C                  		move.w	$2C(a0),d1
0000B08C 9240                       		sub.w	d0,d1
0000B08E 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B092 4E75                       		rts	
0000B094                            ; ===========================================================================
0000B094                            
0000B094                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B094 1028 0034                  		move.b	$34(a0),d0
0000B098 4A28 0025                  		tst.b	$25(a0)
0000B09C 6600                       		bne.s	loc_B010
0000B09E 5500                       		subq.b	#2,d0
0000B0A0 6400                       		bcc.s	loc_B01C
0000B0A2 7000                       		moveq	#0,d0
0000B0A4 6000                       		bra.s	loc_B01C
0000B0A6                            ; ===========================================================================
0000B0A6                            
0000B0A6                            loc_B010:
0000B0A6 5800                       		addq.b	#4,d0
0000B0A8 0C00 0040                  		cmpi.b	#$40,d0
0000B0AC 6500                       		bcs.s	loc_B01C
0000B0AE 103C 0040                  		move.b	#$40,d0
0000B0B2                            
0000B0B2                            loc_B01C:
0000B0B2 1140 0034                  		move.b	d0,$34(a0)
0000B0B6 4EB9 0000 29DA             		jsr	(CalcSine).l
0000B0BC E848                       		lsr.w	#4,d0
0000B0BE 3200                       		move.w	d0,d1
0000B0C0 D068 002C                  		add.w	$2C(a0),d0
0000B0C4 3140 000C                  		move.w	d0,$C(a0)
0000B0C8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B0CE 6600                       		bne.s	loc_B07A
0000B0D0 4A28 0035                  		tst.b	$35(a0)
0000B0D4 6600                       		bne.s	loc_B07A
0000B0D6 117C 0001 0035             		move.b	#1,$35(a0)
0000B0DC 6100 0000                  		bsr.w	SingleObjLoad2
0000B0E0 6600                       		bne.s	loc_B07A
0000B0E2 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B0E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B0EC 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B0F2 5069 002C                  		addq.w	#8,$2C(a1)
0000B0F6 5769 002C                  		subq.w	#3,$2C(a1)
0000B0FA 0469 0040 0008             		subi.w	#$40,8(a1)
0000B100 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B106 2348 0038                  		move.l	a0,$38(a1)
0000B10A 2448                       		movea.l	a0,a2
0000B10C 6100                       		bsr.s	sub_B09C
0000B10E                            
0000B10E                            loc_B07A:
0000B10E 7400                       		moveq	#0,d2
0000B110 45E8 0036                  		lea	$36(a0),a2
0000B114 141A                       		move.b	(a2)+,d2
0000B116 5302                       		subq.b	#1,d2
0000B118 6500                       		bcs.s	locret_B09A
0000B11A                            
0000B11A                            loc_B086:
0000B11A 7000                       		moveq	#0,d0
0000B11C 101A                       		move.b	(a2)+,d0
0000B11E ED48                       		lsl.w	#6,d0
0000B120 0640 D000                  		addi.w	#-$3000,d0
0000B124 3240                       		movea.w	d0,a1
0000B126 3341 003C                  		move.w	d1,$3C(a1)
0000B12A 51CA FFEE                  		dbf	d2,loc_B086
0000B12E                            
0000B12E                            locret_B09A:
0000B12E 4E75                       		rts	
0000B130                            
0000B130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B130                            
0000B130                            
0000B130                            sub_B09C:
0000B130 45EA 0036                  		lea	$36(a2),a2
0000B134 7000                       		moveq	#0,d0
0000B136 1012                       		move.b	(a2),d0
0000B138 5212                       		addq.b	#1,(a2)
0000B13A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B13E 3009                       		move.w	a1,d0
0000B140 0440 D000                  		subi.w	#-$3000,d0
0000B144 EC48                       		lsr.w	#6,d0
0000B146 0240 007F                  		andi.w	#$7F,d0
0000B14A 1480                       		move.b	d0,(a2)
0000B14C 4E75                       		rts	
0000B14E                            ; End of function sub_B09C
0000B14E                            
0000B14E                            ; ===========================================================================
0000B14E                            
0000B14E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B14E 4A28 0035                  		tst.b	$35(a0)
0000B152 6700                       		beq.s	loc_B0C6
0000B154 4A28 0001                  		tst.b	1(a0)
0000B158 6A00                       		bpl.s	Obj2F_DelFlames
0000B15A                            
0000B15A                            loc_B0C6:
0000B15A 3028 002A                  		move.w	$2A(a0),d0
0000B15E 0240 FF80                  		andi.w	#$FF80,d0
0000B162 3238 F700                  		move.w	($FFFFF700).w,d1
0000B166 0441 0080                  		subi.w	#$80,d1
0000B16A 0241 FF80                  		andi.w	#$FF80,d1
0000B16E 9041                       		sub.w	d1,d0
0000B170 0C40 0280                  		cmpi.w	#$280,d0
0000B174 6200 0000                  		bhi.w	DeleteObject
0000B178 4E75                       		rts	
0000B17A                            ; ===========================================================================
0000B17A                            
0000B17A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B17A 7400                       		moveq	#0,d2
0000B17C                            
0000B17C                            loc_B0E8:
0000B17C 45E8 0036                  		lea	$36(a0),a2
0000B180 1412                       		move.b	(a2),d2
0000B182 421A                       		clr.b	(a2)+
0000B184 5302                       		subq.b	#1,d2
0000B186 6500                       		bcs.s	locret_B116
0000B188                            
0000B188                            loc_B0F4:
0000B188 7000                       		moveq	#0,d0
0000B18A 1012                       		move.b	(a2),d0
0000B18C 421A                       		clr.b	(a2)+
0000B18E ED48                       		lsl.w	#6,d0
0000B190 0640 D000                  		addi.w	#-$3000,d0
0000B194 3240                       		movea.w	d0,a1
0000B196 6100 0000                  		bsr.w	DeleteObject2
0000B19A 51CA FFEC                  		dbf	d2,loc_B0F4
0000B19E 117C 0000 0035             		move.b	#0,$35(a0)
0000B1A4 117C 0000 0034             		move.b	#0,$34(a0)
0000B1AA                            
0000B1AA                            locret_B116:
0000B1AA 4E75                       		rts	
0000B1AC                            ; ===========================================================================
0000B1AC                            ; ---------------------------------------------------------------------------
0000B1AC                            ; Collision data for large moving platforms (MZ)
0000B1AC                            ; ---------------------------------------------------------------------------
0000B1AC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B1F8                            		even
0000B1F8                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B224                            		even
0000B224                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B270                            		even
0000B270                            ; ===========================================================================
0000B270                            ; ---------------------------------------------------------------------------
0000B270                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B270                            ; (appears when	you walk on sinking platforms)
0000B270                            ; ---------------------------------------------------------------------------
0000B270                            
0000B270                            Obj35:					; XREF: Obj_Index
0000B270 7000                       		moveq	#0,d0
0000B272 1028 0024                  		move.b	$24(a0),d0
0000B276 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B27A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B27E                            ; ===========================================================================
0000B27E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B280 0000                       		dc.w loc_B238-Obj35_Index
0000B282 0000                       		dc.w Obj35_Move-Obj35_Index
0000B284                            ; ===========================================================================
0000B284                            
0000B284                            Obj35_Main:				; XREF: Obj35_Index
0000B284 5428 0024                  		addq.b	#2,$24(a0)
0000B288 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B290 317C 0345 0002             		move.w	#$345,2(a0)
0000B296 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B29C 117C 0004 0001             		move.b	#4,1(a0)
0000B2A2 117C 0001 0018             		move.b	#1,$18(a0)
0000B2A8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B2AE 117C 0008 0019             		move.b	#8,$19(a0)
0000B2B4 303C 00C8                  		move.w	#$C8,d0
0000B2B8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000B2BE 4A28 0028                  		tst.b	$28(a0)
0000B2C2 6700                       		beq.s	loc_B238
0000B2C4 5428 0024                  		addq.b	#2,$24(a0)
0000B2C8 6000 0000                  		bra.w	Obj35_Move
0000B2CC                            ; ===========================================================================
0000B2CC                            
0000B2CC                            loc_B238:				; XREF: Obj35_Index
0000B2CC 2268 0030                  		movea.l	$30(a0),a1
0000B2D0 3228 0008                  		move.w	8(a0),d1
0000B2D4 9268 002A                  		sub.w	$2A(a0),d1
0000B2D8 0641 000C                  		addi.w	#$C,d1
0000B2DC 3001                       		move.w	d1,d0
0000B2DE E248                       		lsr.w	#1,d0
0000B2E0 1031 0000                  		move.b	(a1,d0.w),d0
0000B2E4 4440                       		neg.w	d0
0000B2E6 D068 002C                  		add.w	$2C(a0),d0
0000B2EA 3400                       		move.w	d0,d2
0000B2EC D068 003C                  		add.w	$3C(a0),d0
0000B2F0 3140 000C                  		move.w	d0,$C(a0)
0000B2F4 0C41 0084                  		cmpi.w	#$84,d1
0000B2F8 6400                       		bcc.s	loc_B2B0
0000B2FA 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B302 0C41 0080                  		cmpi.w	#$80,d1
0000B306 6400                       		bcc.s	loc_B2B0
0000B308 2028 0008                  		move.l	8(a0),d0
0000B30C 0680 0008 0000             		addi.l	#$80000,d0
0000B312 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B318 6600                       		bne.s	loc_B2B0
0000B31A 6100 0000                  		bsr.w	SingleObjLoad2
0000B31E 6600                       		bne.s	loc_B2B0
0000B320 12BC 0035                  		move.b	#$35,0(a1)
0000B324 3368 0008 0008             		move.w	8(a0),8(a1)
0000B32A 3342 002C                  		move.w	d2,$2C(a1)
0000B32E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B334 137C 0001 0028             		move.b	#1,$28(a1)
0000B33A 2468 0038                  		movea.l	$38(a0),a2
0000B33E 6100 FDF0                  		bsr.w	sub_B09C
0000B342                            
0000B342                            loc_B2B0:
0000B342 6000                       		bra.s	Obj35_Animate
0000B344                            ; ===========================================================================
0000B344                            
0000B344                            Obj35_Move:				; XREF: Obj35_Index
0000B344 3028 002C                  		move.w	$2C(a0),d0
0000B348 D068 003C                  		add.w	$3C(a0),d0
0000B34C 3140 000C                  		move.w	d0,$C(a0)
0000B350                            
0000B350                            Obj35_Animate:				; XREF: loc_B238
0000B350 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B356 6100 F496                  		bsr.w	AnimateSprite
0000B35A 6000 0000                  		bra.w	DisplaySprite
0000B35E                            ; ===========================================================================
0000B35E                            Ani_obj35:
0000B35E                            	include "_anim\obj35.asm"
0000B35E                            ; ---------------------------------------------------------------------------
0000B35E                            ; Animation script - fireball that sits on the	floor (MZ)
0000B35E                            ; ---------------------------------------------------------------------------
0000B35E 0000                       		dc.w byte_B2CE-Ani_obj35
0000B360 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B366                            		even
0000B366                            		even
0000B366                            
0000B366                            ; ---------------------------------------------------------------------------
0000B366                            ; Sprite mappings - large moving platforms (MZ)
0000B366                            ; ---------------------------------------------------------------------------
0000B366                            Map_obj2F:
0000B366                            	include "_maps\obj2F.asm"
0000B366                            ; ---------------------------------------------------------------------------
0000B366                            ; Sprite mappings - large moving platforms (MZ)
0000B366                            ; ---------------------------------------------------------------------------
0000B366 0000                       		dc.w byte_B2DA-Map_obj2F
0000B368 0000                       		dc.w byte_B31C-Map_obj2F
0000B36A 0000                       		dc.w byte_B34F-Map_obj2F
0000B36C 0D                         byte_B2DA:	dc.b $D
0000B36D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B372 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B377 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B37C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B381 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B386 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B38B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B390 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B395 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B39A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B39F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B3A4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B3A9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B3AE 0A                         byte_B31C:	dc.b $A
0000B3AF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B3B4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B3B9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3BE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B3C3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B3C8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3CD C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B3D2 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B3D7 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B3DC E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B3E1 06                         byte_B34F:	dc.b 6
0000B3E2 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B3E7 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3EC 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B3F1 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B3F6 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B3FB 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B400                            		even
0000B400                            		even
0000B400                            
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            Map_obj14:
0000B400                            	include "_maps\obj14.asm"
0000B400                            ; ---------------------------------------------------------------------------
0000B400                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B400                            ; ---------------------------------------------------------------------------
0000B400 0000                       		dc.w byte_B37A-Map_obj14
0000B402 0000                       		dc.w byte_B380-Map_obj14
0000B404 0000                       		dc.w byte_B386-Map_obj14
0000B406 0000                       		dc.w byte_B38C-Map_obj14
0000B408 0000                       		dc.w byte_B392-Map_obj14
0000B40A 0000                       		dc.w byte_B398-Map_obj14
0000B40C 01                         byte_B37A:	dc.b 1
0000B40D E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B412 01                         byte_B380:	dc.b 1
0000B413 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B418 01                         byte_B386:	dc.b 1
0000B419 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B41E 01                         byte_B38C:	dc.b 1
0000B41F F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B424 01                         byte_B392:	dc.b 1
0000B425 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B42A 01                         byte_B398:	dc.b 1
0000B42B F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B430                            		even
0000B430                            		even
0000B430                            
0000B430                            ; ===========================================================================
0000B430                            ; ---------------------------------------------------------------------------
0000B430                            ; Object 30 - large green glassy blocks	(MZ)
0000B430                            ; ---------------------------------------------------------------------------
0000B430                            
0000B430                            Obj30:					; XREF: Obj_Index
0000B430 7000                       		moveq	#0,d0
0000B432 1028 0024                  		move.b	$24(a0),d0
0000B436 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B43A 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B43E 3028 0008                  		move.w	8(a0),d0
0000B442 0240 FF80                  		andi.w	#$FF80,d0
0000B446 3238 F700                  		move.w	($FFFFF700).w,d1
0000B44A 0441 0080                  		subi.w	#$80,d1
0000B44E 0241 FF80                  		andi.w	#$FF80,d1
0000B452 9041                       		sub.w	d1,d0
0000B454 0C40 0280                  		cmpi.w	#$280,d0
0000B458 6200 0000                  		bhi.w	Obj30_Delete
0000B45C 6000 0000                  		bra.w	DisplaySprite
0000B460                            ; ===========================================================================
0000B460                            
0000B460                            Obj30_Delete:
0000B460 6000 0000                  		bra.w	DeleteObject
0000B464                            ; ===========================================================================
0000B464 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B466 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B468 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B46A 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B46C 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B46E                            
0000B46E 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B471 0400 01                    		dc.b 4,	0, 1
0000B474 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B477 0800 01                    		dc.b 8,	0, 1
0000B47A                            ; ===========================================================================
0000B47A                            
0000B47A                            Obj30_Main:				; XREF: Obj30_Index
0000B47A 45F9 0000 B46E             		lea	(Obj30_Vars1).l,a2
0000B480 7201                       		moveq	#1,d1
0000B482 117C 0048 0016             		move.b	#$48,$16(a0)
0000B488 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B48E 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B490 45F9 0000 B474             		lea	(Obj30_Vars2).l,a2
0000B496 7201                       		moveq	#1,d1
0000B498 117C 0038 0016             		move.b	#$38,$16(a0)
0000B49E                            
0000B49E                            loc_B40C:
0000B49E 2248                       		movea.l	a0,a1
0000B4A0 6000                       		bra.s	Obj30_Load	; load main object
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            Obj30_Loop:
0000B4A2 6100 0000                  		bsr.w	SingleObjLoad2
0000B4A6 6600                       		bne.s	loc_B480
0000B4A8                            
0000B4A8                            Obj30_Load:				; XREF: Obj30_Main
0000B4A8 135A 0024                  		move.b	(a2)+,$24(a1)
0000B4AC 12BC 0030                  		move.b	#$30,0(a1)
0000B4B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4B6 101A                       		move.b	(a2)+,d0
0000B4B8 4880                       		ext.w	d0
0000B4BA D068 000C                  		add.w	$C(a0),d0
0000B4BE 3340 000C                  		move.w	d0,$C(a1)
0000B4C2 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B4CA 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B4D0 137C 0004 0001             		move.b	#4,1(a1)
0000B4D6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B4DC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B4E2 137C 0020 0019             		move.b	#$20,$19(a1)
0000B4E8 137C 0004 0018             		move.b	#4,$18(a1)
0000B4EE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B4F2 2348 003C                  		move.l	a0,$3C(a1)
0000B4F6 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B4FA                            
0000B4FA 137C 0010 0019             		move.b	#$10,$19(a1)
0000B500 137C 0003 0018             		move.b	#3,$18(a1)
0000B506 5029 0028                  		addq.b	#8,$28(a1)
0000B50A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B510                            
0000B510                            loc_B480:
0000B510 317C 0090 0032             		move.w	#$90,$32(a0)
0000B516 08E8 0004 0001             		bset	#4,1(a0)
0000B51C                            
0000B51C                            Obj30_Block012:				; XREF: Obj30_Index
0000B51C 6100 0000                  		bsr.w	Obj30_Types
0000B520 323C 002B                  		move.w	#$2B,d1
0000B524 343C 0048                  		move.w	#$48,d2
0000B528 363C 0049                  		move.w	#$49,d3
0000B52C 3828 0008                  		move.w	8(a0),d4
0000B530 6000 0000                  		bra.w	SolidObject
0000B534                            ; ===========================================================================
0000B534                            
0000B534                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B534 2268 003C                  		movea.l	$3C(a0),a1
0000B538 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B53E 6000 0000                  		bra.w	Obj30_Types
0000B542                            ; ===========================================================================
0000B542                            
0000B542                            Obj30_Block34:				; XREF: Obj30_Index
0000B542 6100 0000                  		bsr.w	Obj30_Types
0000B546 323C 002B                  		move.w	#$2B,d1
0000B54A 343C 0038                  		move.w	#$38,d2
0000B54E 363C 0039                  		move.w	#$39,d3
0000B552 3828 0008                  		move.w	8(a0),d4
0000B556 6000 0000                  		bra.w	SolidObject
0000B55A                            ; ===========================================================================
0000B55A                            
0000B55A                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B55A 2268 003C                  		movea.l	$3C(a0),a1
0000B55E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B564 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B56A 6000 0002                  		bra.w	*+4
0000B56E                            
0000B56E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B56E                            
0000B56E                            
0000B56E                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B56E 7000                       		moveq	#0,d0
0000B570 1028 0028                  		move.b	$28(a0),d0
0000B574 0240 0007                  		andi.w	#7,d0
0000B578 D040                       		add.w	d0,d0
0000B57A 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B57E 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B582                            ; End of function Obj30_Types
0000B582                            
0000B582                            ; ===========================================================================
0000B582 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B584 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B586 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B588 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B58A 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B58C 4E75                       		rts	
0000B58E                            ; ===========================================================================
0000B58E                            
0000B58E                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B58E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B592 323C 0040                  		move.w	#$40,d1
0000B596 6000                       		bra.s	loc_B514
0000B598                            ; ===========================================================================
0000B598                            
0000B598                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B598 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B59C 323C 0040                  		move.w	#$40,d1
0000B5A0 4440                       		neg.w	d0
0000B5A2 D041                       		add.w	d1,d0
0000B5A4                            
0000B5A4                            loc_B514:				; XREF: Obj30_Type01
0000B5A4 0828 0003 0028             		btst	#3,$28(a0)
0000B5AA 6700                       		beq.s	loc_B526
0000B5AC 4440                       		neg.w	d0
0000B5AE D041                       		add.w	d1,d0
0000B5B0 E208                       		lsr.b	#1,d0
0000B5B2 0640 0020                  		addi.w	#$20,d0
0000B5B6                            
0000B5B6                            loc_B526:
0000B5B6 6000 0000                  		bra.w	loc_B5EE
0000B5BA                            ; ===========================================================================
0000B5BA                            
0000B5BA                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B5BA 0828 0003 0028             		btst	#3,$28(a0)
0000B5C0 6700                       		beq.s	loc_B53E
0000B5C2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5C6 0440 0010                  		subi.w	#$10,d0
0000B5CA 6000 0000                  		bra.w	loc_B5EE
0000B5CE                            ; ===========================================================================
0000B5CE                            
0000B5CE                            loc_B53E:
0000B5CE 0828 0003 0022             		btst	#3,$22(a0)
0000B5D4 6600                       		bne.s	loc_B54E
0000B5D6 08A8 0000 0034             		bclr	#0,$34(a0)
0000B5DC 6000                       		bra.s	loc_B582
0000B5DE                            ; ===========================================================================
0000B5DE                            
0000B5DE                            loc_B54E:
0000B5DE 4A28 0034                  		tst.b	$34(a0)
0000B5E2 6600                       		bne.s	loc_B582
0000B5E4 117C 0001 0034             		move.b	#1,$34(a0)
0000B5EA 08E8 0000 0035             		bset	#0,$35(a0)
0000B5F0 6700                       		beq.s	loc_B582
0000B5F2 08E8 0007 0034             		bset	#7,$34(a0)
0000B5F8 317C 0010 0036             		move.w	#$10,$36(a0)
0000B5FE 117C 000A 0038             		move.b	#$A,$38(a0)
0000B604 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B60A 6600                       		bne.s	loc_B582
0000B60C 317C 0040 0036             		move.w	#$40,$36(a0)
0000B612                            
0000B612                            loc_B582:
0000B612 4A28 0034                  		tst.b	$34(a0)
0000B616 6A00                       		bpl.s	loc_B5AA
0000B618 4A28 0038                  		tst.b	$38(a0)
0000B61C 6700                       		beq.s	loc_B594
0000B61E 5328 0038                  		subq.b	#1,$38(a0)
0000B622 6600                       		bne.s	loc_B5AA
0000B624                            
0000B624                            loc_B594:
0000B624 4A68 0032                  		tst.w	$32(a0)
0000B628 6700                       		beq.s	loc_B5A4
0000B62A 5368 0032                  		subq.w	#1,$32(a0)
0000B62E 5368 0036                  		subq.w	#1,$36(a0)
0000B632 6600                       		bne.s	loc_B5AA
0000B634                            
0000B634                            loc_B5A4:
0000B634 08A8 0007 0034             		bclr	#7,$34(a0)
0000B63A                            
0000B63A                            loc_B5AA:
0000B63A 3028 0032                  		move.w	$32(a0),d0
0000B63E 6000                       		bra.s	loc_B5EE
0000B640                            ; ===========================================================================
0000B640                            
0000B640                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B640 0828 0003 0028             		btst	#3,$28(a0)
0000B646 6700                       		beq.s	Obj30_ChkSwitch
0000B648 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B64C 0440 0010                  		subi.w	#$10,d0
0000B650 6000                       		bra.s	loc_B5EE
0000B652                            ; ===========================================================================
0000B652                            
0000B652                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B652 4A28 0034                  		tst.b	$34(a0)
0000B656 6600                       		bne.s	loc_B5E0
0000B658 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B65C 7000                       		moveq	#0,d0
0000B65E 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B662 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B664 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B668 6700                       		beq.s	loc_B5EA	; if not, branch
0000B66A 117C 0001 0034             		move.b	#1,$34(a0)
0000B670                            
0000B670                            loc_B5E0:
0000B670 4A68 0032                  		tst.w	$32(a0)
0000B674 6700                       		beq.s	loc_B5EA
0000B676 5568 0032                  		subq.w	#2,$32(a0)
0000B67A                            
0000B67A                            loc_B5EA:
0000B67A 3028 0032                  		move.w	$32(a0),d0
0000B67E                            
0000B67E                            loc_B5EE:
0000B67E 3228 0030                  		move.w	$30(a0),d1
0000B682 9240                       		sub.w	d0,d1
0000B684 3141 000C                  		move.w	d1,$C(a0)
0000B688 4E75                       		rts	
0000B68A                            ; ===========================================================================
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            Map_obj30:
0000B68A                            	include "_maps\obj30.asm"
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B68A                            ; ---------------------------------------------------------------------------
0000B68A 0000                       		dc.w byte_B600-Map_obj30
0000B68C 0000                       		dc.w byte_B63D-Map_obj30
0000B68E 0000                       		dc.w byte_B648-Map_obj30
0000B690 0C                         byte_B600:	dc.b $C
0000B691 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B696 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B69B C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B6A0 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B6A5 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B6AA E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B6AF 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B6B4 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B6B9 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B6BE 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B6C3 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B6C8 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B6CD 02                         byte_B63D:	dc.b 2
0000B6CE 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B6D3 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B6D8 0A                         byte_B648:	dc.b $A
0000B6D9 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B6DE C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B6E3 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B6E8 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B6ED F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B6F2 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B6F7 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B6FC 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B701 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B706 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B70C 00                         		even
0000B70C 00                         		even
0000B70C                            
0000B70C                            ; ===========================================================================
0000B70C                            ; ---------------------------------------------------------------------------
0000B70C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B70C                            ; ---------------------------------------------------------------------------
0000B70C                            
0000B70C                            Obj31:					; XREF: Obj_Index
0000B70C 7000                       		moveq	#0,d0
0000B70E 1028 0024                  		move.b	$24(a0),d0
0000B712 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B716 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B71A                            ; ===========================================================================
0000B71A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B71C 0000                       		dc.w loc_B798-Obj31_Index
0000B71E 0000                       		dc.w loc_B7FE-Obj31_Index
0000B720 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B722 0000                       		dc.w loc_B7E2-Obj31_Index
0000B724                            
0000B724 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B726 0100                       		dc.b 1,	0
0000B728                            
0000B728 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B72B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B72E 08CC 03                    		dc.b 8,	$CC, 3
0000B731 06F0 02                    		dc.b 6,	$F0, 2
0000B734                            
0000B734 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B738 5000 7800                  		dc.w $5000, $7800
0000B73C 3800 5800                  		dc.w $3800, $5800
0000B740 B800                       		dc.w $B800
0000B742                            ; ===========================================================================
0000B742                            
0000B742                            Obj31_Main:				; XREF: Obj31_Index
0000B742 7000                       		moveq	#0,d0
0000B744 1028 0028                  		move.b	$28(a0),d0
0000B748 6A00                       		bpl.s	loc_B6CE
0000B74A 0240 007F                  		andi.w	#$7F,d0
0000B74E D040                       		add.w	d0,d0
0000B750 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B754 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B758 101A                       		move.b	(a2)+,d0
0000B75A 1140 0028                  		move.b	d0,$28(a0)
0000B75E                            
0000B75E                            loc_B6CE:
0000B75E 0200 000F                  		andi.b	#$F,d0
0000B762 D040                       		add.w	d0,d0
0000B764 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B768 4A40                       		tst.w	d0
0000B76A 6600                       		bne.s	loc_B6E0
0000B76C 3142 0032                  		move.w	d2,$32(a0)
0000B770                            
0000B770                            loc_B6E0:
0000B770 45F9 0000 B728             		lea	(Obj31_Var).l,a2
0000B776 2248                       		movea.l	a0,a1
0000B778 7203                       		moveq	#3,d1
0000B77A 6000                       		bra.s	Obj31_MakeStomper
0000B77C                            ; ===========================================================================
0000B77C                            
0000B77C                            Obj31_Loop:
0000B77C 6100 0000                  		bsr.w	SingleObjLoad2
0000B780 6600 0000                  		bne.w	Obj31_SetSize
0000B784                            
0000B784                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B784 135A 0024                  		move.b	(a2)+,$24(a1)
0000B788 12BC 0031                  		move.b	#$31,0(a1)
0000B78C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B792 101A                       		move.b	(a2)+,d0
0000B794 4880                       		ext.w	d0
0000B796 D068 000C                  		add.w	$C(a0),d0
0000B79A 3340 000C                  		move.w	d0,$C(a1)
0000B79E 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B7A6 337C 0300 0002             		move.w	#$300,2(a1)
0000B7AC 137C 0004 0001             		move.b	#4,1(a1)
0000B7B2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B7B8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B7BE 137C 0010 0019             		move.b	#$10,$19(a1)
0000B7C4 3342 0034                  		move.w	d2,$34(a1)
0000B7C8 137C 0004 0018             		move.b	#4,$18(a1)
0000B7CE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B7D2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B7D8 6600                       		bne.s	loc_B76A
0000B7DA 5341                       		subq.w	#1,d1
0000B7DC 1028 0028                  		move.b	$28(a0),d0
0000B7E0 0240 00F0                  		andi.w	#$F0,d0
0000B7E4 0C40 0020                  		cmpi.w	#$20,d0
0000B7E8 679A                       		beq.s	Obj31_MakeStomper
0000B7EA 137C 0038 0019             		move.b	#$38,$19(a1)
0000B7F0 137C 0090 0020             		move.b	#$90,$20(a1)
0000B7F6 5241                       		addq.w	#1,d1
0000B7F8                            
0000B7F8                            loc_B76A:
0000B7F8 2348 003C                  		move.l	a0,$3C(a1)
0000B7FC 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B800                            
0000B800 137C 0003 0018             		move.b	#3,$18(a1)
0000B806                            
0000B806                            Obj31_SetSize:
0000B806 7000                       		moveq	#0,d0
0000B808 1028 0028                  		move.b	$28(a0),d0
0000B80C E648                       		lsr.w	#3,d0
0000B80E 0200 000E                  		andi.b	#$E,d0
0000B812 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B816 115A 0019                  		move.b	(a2)+,$19(a0)
0000B81A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B81E 6000                       		bra.s	loc_B798
0000B820                            ; ===========================================================================
0000B820 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B822 3009                       		dc.b $30, 9
0000B824 100A                       		dc.b $10, $A
0000B826                            ; ===========================================================================
0000B826                            
0000B826                            loc_B798:				; XREF: Obj31_Index
0000B826 6100 0000                  		bsr.w	Obj31_Types
0000B82A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B830 7200                       		moveq	#0,d1
0000B832 1228 0019                  		move.b	$19(a0),d1
0000B836 0641 000B                  		addi.w	#$B,d1
0000B83A 343C 000C                  		move.w	#$C,d2
0000B83E 363C 000D                  		move.w	#$D,d3
0000B842 3828 0008                  		move.w	8(a0),d4
0000B846 6100 0000                  		bsr.w	SolidObject
0000B84A 0828 0003 0022             		btst	#3,$22(a0)
0000B850 6700                       		beq.s	Obj31_Display
0000B852 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B858 6400                       		bcc.s	Obj31_Display
0000B85A 2448                       		movea.l	a0,a2
0000B85C 41F8 D000                  		lea	($FFFFD000).w,a0
0000B860 4EB9 0000 0000             		jsr	KillSonic
0000B866 204A                       		movea.l	a2,a0
0000B868                            
0000B868                            Obj31_Display:
0000B868 6100 0000                  		bsr.w	DisplaySprite
0000B86C 6000 0000                  		bra.w	Obj31_ChkDel
0000B870                            ; ===========================================================================
0000B870                            
0000B870                            loc_B7E2:				; XREF: Obj31_Index
0000B870 117C 0080 0016             		move.b	#$80,$16(a0)
0000B876 08E8 0004 0001             		bset	#4,1(a0)
0000B87C 2268 003C                  		movea.l	$3C(a0),a1
0000B880 1029 0032                  		move.b	$32(a1),d0
0000B884 EA08                       		lsr.b	#5,d0
0000B886 5600                       		addq.b	#3,d0
0000B888 1140 001A                  		move.b	d0,$1A(a0)
0000B88C                            
0000B88C                            loc_B7FE:				; XREF: Obj31_Index
0000B88C 2268 003C                  		movea.l	$3C(a0),a1
0000B890 7000                       		moveq	#0,d0
0000B892 1029 0032                  		move.b	$32(a1),d0
0000B896 D068 0030                  		add.w	$30(a0),d0
0000B89A 3140 000C                  		move.w	d0,$C(a0)
0000B89E                            
0000B89E                            Obj31_Display2:				; XREF: Obj31_Index
0000B89E 6100 0000                  		bsr.w	DisplaySprite
0000B8A2                            
0000B8A2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B8A2 3028 0008                  		move.w	8(a0),d0
0000B8A6 0240 FF80                  		andi.w	#$FF80,d0
0000B8AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8AE 0441 0080                  		subi.w	#$80,d1
0000B8B2 0241 FF80                  		andi.w	#$FF80,d1
0000B8B6 9041                       		sub.w	d1,d0
0000B8B8 0C40 0280                  		cmpi.w	#$280,d0
0000B8BC 6200 0000                  		bhi.w	DeleteObject
0000B8C0 4E75                       		rts	
0000B8C2                            ; ===========================================================================
0000B8C2                            
0000B8C2                            Obj31_Types:				; XREF: loc_B798
0000B8C2 1028 0028                  		move.b	$28(a0),d0
0000B8C6 0240 000F                  		andi.w	#$F,d0
0000B8CA D040                       		add.w	d0,d0
0000B8CC 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B8D0 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B8D4                            ; ===========================================================================
0000B8D4 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B8D6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8D8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8DA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B8DC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8DE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B8E0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8E2                            ; ===========================================================================
0000B8E2                            
0000B8E2                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B8E2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B8E6 7000                       		moveq	#0,d0
0000B8E8 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B8EC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B8F0 6700                       		beq.s	loc_B8A8	; if not, branch
0000B8F2 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B8F6 6A00                       		bpl.s	loc_B872
0000B8F8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B8FE 6700                       		beq.s	loc_B8A0
0000B900                            
0000B900                            loc_B872:
0000B900 4A68 0032                  		tst.w	$32(a0)
0000B904 6700                       		beq.s	loc_B8A0
0000B906 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B90A 0200 000F                  		andi.b	#$F,d0
0000B90E 6600                       		bne.s	loc_B892
0000B910 4A28 0001                  		tst.b	1(a0)
0000B914 6A00                       		bpl.s	loc_B892
0000B916 303C 00C7                  		move.w	#$C7,d0
0000B91A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B920                            
0000B920                            loc_B892:
0000B920 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B926 6400                       		bcc.s	Obj31_Restart
0000B928 317C 0000 0032             		move.w	#0,$32(a0)
0000B92E                            
0000B92E                            loc_B8A0:
0000B92E 317C 0000 0012             		move.w	#0,$12(a0)
0000B934 6000                       		bra.s	Obj31_Restart
0000B936                            ; ===========================================================================
0000B936                            
0000B936                            loc_B8A8:				; XREF: Obj31_Type00
0000B936 3228 0034                  		move.w	$34(a0),d1
0000B93A B268 0032                  		cmp.w	$32(a0),d1
0000B93E 6700                       		beq.s	Obj31_Restart
0000B940 3028 0012                  		move.w	$12(a0),d0
0000B944 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B94A D168 0032                  		add.w	d0,$32(a0)
0000B94E B268 0032                  		cmp.w	$32(a0),d1
0000B952 6200                       		bhi.s	Obj31_Restart
0000B954 3141 0032                  		move.w	d1,$32(a0)
0000B958 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B95E 4A28 0001                  		tst.b	1(a0)
0000B962 6A00                       		bpl.s	Obj31_Restart
0000B964 303C 00BD                  		move.w	#$BD,d0
0000B968 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B96E                            
0000B96E                            Obj31_Restart:
0000B96E 7000                       		moveq	#0,d0
0000B970 1028 0032                  		move.b	$32(a0),d0
0000B974 D068 0030                  		add.w	$30(a0),d0
0000B978 3140 000C                  		move.w	d0,$C(a0)
0000B97C 4E75                       		rts	
0000B97E                            ; ===========================================================================
0000B97E                            
0000B97E                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B97E 4A68 0036                  		tst.w	$36(a0)
0000B982 6700                       		beq.s	loc_B938
0000B984 4A68 0038                  		tst.w	$38(a0)
0000B988 6700                       		beq.s	loc_B902
0000B98A 5368 0038                  		subq.w	#1,$38(a0)
0000B98E 6000                       		bra.s	loc_B97C
0000B990                            ; ===========================================================================
0000B990                            
0000B990                            loc_B902:
0000B990 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B994 0200 000F                  		andi.b	#$F,d0
0000B998 6600                       		bne.s	loc_B91C
0000B99A 4A28 0001                  		tst.b	1(a0)
0000B99E 6A00                       		bpl.s	loc_B91C
0000B9A0 303C 00C7                  		move.w	#$C7,d0
0000B9A4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B9AA                            
0000B9AA                            loc_B91C:
0000B9AA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B9B0 6400                       		bcc.s	loc_B97C
0000B9B2 317C 0000 0032             		move.w	#0,$32(a0)
0000B9B8 317C 0000 0012             		move.w	#0,$12(a0)
0000B9BE 317C 0000 0036             		move.w	#0,$36(a0)
0000B9C4 6000                       		bra.s	loc_B97C
0000B9C6                            ; ===========================================================================
0000B9C6                            
0000B9C6                            loc_B938:				; XREF: Obj31_Type01
0000B9C6 3228 0034                  		move.w	$34(a0),d1
0000B9CA B268 0032                  		cmp.w	$32(a0),d1
0000B9CE 6700                       		beq.s	loc_B97C
0000B9D0 3028 0012                  		move.w	$12(a0),d0
0000B9D4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B9DA D168 0032                  		add.w	d0,$32(a0)
0000B9DE B268 0032                  		cmp.w	$32(a0),d1
0000B9E2 6200                       		bhi.s	loc_B97C
0000B9E4 3141 0032                  		move.w	d1,$32(a0)
0000B9E8 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B9EE 317C 0001 0036             		move.w	#1,$36(a0)
0000B9F4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000B9FA 4A28 0001                  		tst.b	1(a0)
0000B9FE 6A00                       		bpl.s	loc_B97C
0000BA00 303C 00BD                  		move.w	#$BD,d0
0000BA04 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BA0A                            
0000BA0A                            loc_B97C:
0000BA0A 6000 FF62                  		bra.w	Obj31_Restart
0000BA0E                            ; ===========================================================================
0000BA0E                            
0000BA0E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BA0E 3038 D008                  		move.w	($FFFFD008).w,d0
0000BA12 9068 0008                  		sub.w	8(a0),d0
0000BA16 6400                       		bcc.s	loc_B98C
0000BA18 4440                       		neg.w	d0
0000BA1A                            
0000BA1A                            loc_B98C:
0000BA1A 0C40 0090                  		cmpi.w	#$90,d0
0000BA1E 6400                       		bcc.s	loc_B996
0000BA20 5228 0028                  		addq.b	#1,$28(a0)
0000BA24                            
0000BA24                            loc_B996:
0000BA24 6000 FF48                  		bra.w	Obj31_Restart
0000BA28                            ; ===========================================================================
0000BA28                            ; ---------------------------------------------------------------------------
0000BA28                            ; Object 45 - spiked metal block from beta version (MZ)
0000BA28                            ; ---------------------------------------------------------------------------
0000BA28                            
0000BA28                            Obj45:					; XREF: Obj_Index
0000BA28 7000                       		moveq	#0,d0
0000BA2A 1028 0024                  		move.b	$24(a0),d0
0000BA2E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BA32 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BA36                            ; ===========================================================================
0000BA36 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BA38 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BA3A 0000                       		dc.w loc_BA8E-Obj45_Index
0000BA3C 0000                       		dc.w Obj45_Display-Obj45_Index
0000BA3E 0000                       		dc.w loc_BA7A-Obj45_Index
0000BA40                            
0000BA40 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BA43 04E4 01                    		dc.b	4, $E4,	  1
0000BA46 0834 03                    		dc.b	8, $34,	  3
0000BA49 0628 02                    		dc.b	6, $28,	  2
0000BA4C                            
0000BA4C 3800                       word_B9BE:	dc.w $3800
0000BA4E A000                       		dc.w -$6000
0000BA50 5000                       		dc.w $5000
0000BA52                            ; ===========================================================================
0000BA52                            
0000BA52                            Obj45_Main:				; XREF: Obj45_Index
0000BA52 7000                       		moveq	#0,d0
0000BA54 1028 0028                  		move.b	$28(a0),d0
0000BA58 D040                       		add.w	d0,d0
0000BA5A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BA5E 45F9 0000 BA40             		lea	(Obj45_Var).l,a2
0000BA64 2248                       		movea.l	a0,a1
0000BA66 7203                       		moveq	#3,d1
0000BA68 6000                       		bra.s	Obj45_Load
0000BA6A                            ; ===========================================================================
0000BA6A                            
0000BA6A                            Obj45_Loop:
0000BA6A 6100 0000                  		bsr.w	SingleObjLoad2
0000BA6E 6600                       		bne.s	loc_BA52
0000BA70                            
0000BA70                            Obj45_Load:				; XREF: Obj45_Main
0000BA70 135A 0024                  		move.b	(a2)+,$24(a1)
0000BA74 12BC 0045                  		move.b	#$45,0(a1)
0000BA78 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BA7E 101A                       		move.b	(a2)+,d0
0000BA80 4880                       		ext.w	d0
0000BA82 D068 0008                  		add.w	8(a0),d0
0000BA86 3340 0008                  		move.w	d0,8(a1)
0000BA8A 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BA92 337C 0300 0002             		move.w	#$300,2(a1)
0000BA98 137C 0004 0001             		move.b	#4,1(a1)
0000BA9E 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BAA4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BAAA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAB0 137C 0020 0019             		move.b	#$20,$19(a1)
0000BAB6 3342 0034                  		move.w	d2,$34(a1)
0000BABA 137C 0004 0018             		move.b	#4,$18(a1)
0000BAC0 0C12 0001                  		cmpi.b	#1,(a2)
0000BAC4 6600                       		bne.s	loc_BA40
0000BAC6 137C 0091 0020             		move.b	#$91,$20(a1)
0000BACC                            
0000BACC                            loc_BA40:
0000BACC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BAD0 2348 003C                  		move.l	a0,$3C(a1)
0000BAD4 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BAD8                            
0000BAD8 137C 0003 0018             		move.b	#3,$18(a1)
0000BADE                            
0000BADE                            loc_BA52:
0000BADE 117C 0010 0019             		move.b	#$10,$19(a0)
0000BAE4                            
0000BAE4                            Obj45_Solid:				; XREF: Obj45_Index
0000BAE4 3F28 0008                  		move.w	8(a0),-(sp)
0000BAE8 6100 0000                  		bsr.w	Obj45_Move
0000BAEC 323C 0017                  		move.w	#$17,d1
0000BAF0 343C 0020                  		move.w	#$20,d2
0000BAF4 363C 0020                  		move.w	#$20,d3
0000BAF8 381F                       		move.w	(sp)+,d4
0000BAFA 6100 0000                  		bsr.w	SolidObject
0000BAFE 6100 0000                  		bsr.w	DisplaySprite
0000BB02 6000 0000                  		bra.w	Obj45_ChkDel
0000BB06                            ; ===========================================================================
0000BB06                            
0000BB06                            loc_BA7A:				; XREF: Obj45_Index
0000BB06 2268 003C                  		movea.l	$3C(a0),a1
0000BB0A 1029 0032                  		move.b	$32(a1),d0
0000BB0E 0600 0010                  		addi.b	#$10,d0
0000BB12 EA08                       		lsr.b	#5,d0
0000BB14 5600                       		addq.b	#3,d0
0000BB16 1140 001A                  		move.b	d0,$1A(a0)
0000BB1A                            
0000BB1A                            loc_BA8E:				; XREF: Obj45_Index
0000BB1A 2268 003C                  		movea.l	$3C(a0),a1
0000BB1E 7000                       		moveq	#0,d0
0000BB20 1029 0032                  		move.b	$32(a1),d0
0000BB24 4440                       		neg.w	d0
0000BB26 D068 0030                  		add.w	$30(a0),d0
0000BB2A 3140 0008                  		move.w	d0,8(a0)
0000BB2E                            
0000BB2E                            Obj45_Display:				; XREF: Obj45_Index
0000BB2E 6100 0000                  		bsr.w	DisplaySprite
0000BB32                            
0000BB32                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BB32 3028 003A                  		move.w	$3A(a0),d0
0000BB36 0240 FF80                  		andi.w	#$FF80,d0
0000BB3A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB3E 0441 0080                  		subi.w	#$80,d1
0000BB42 0241 FF80                  		andi.w	#$FF80,d1
0000BB46 9041                       		sub.w	d1,d0
0000BB48 0C40 0280                  		cmpi.w	#$280,d0
0000BB4C 6200 0000                  		bhi.w	DeleteObject
0000BB50 4E75                       		rts	
0000BB52                            
0000BB52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB52                            
0000BB52                            
0000BB52                            Obj45_Move:				; XREF: Obj45_Solid
0000BB52 7000                       		moveq	#0,d0
0000BB54 1028 0028                  		move.b	$28(a0),d0
0000BB58 D040                       		add.w	d0,d0
0000BB5A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BB5E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BB62                            ; End of function Obj45_Move
0000BB62                            
0000BB62                            ; ===========================================================================
0000BB62 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BB64 0000                       		dc.w loc_BADA-off_BAD6
0000BB66                            ; ===========================================================================
0000BB66                            
0000BB66                            loc_BADA:				; XREF: off_BAD6
0000BB66 4A68 0036                  		tst.w	$36(a0)
0000BB6A 6700                       		beq.s	loc_BB08
0000BB6C 4A68 0038                  		tst.w	$38(a0)
0000BB70 6700                       		beq.s	loc_BAEC
0000BB72 5368 0038                  		subq.w	#1,$38(a0)
0000BB76 6000                       		bra.s	loc_BB3C
0000BB78                            ; ===========================================================================
0000BB78                            
0000BB78                            loc_BAEC:
0000BB78 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BB7E 6400                       		bcc.s	loc_BB3C
0000BB80 317C 0000 0032             		move.w	#0,$32(a0)
0000BB86 317C 0000 0010             		move.w	#0,$10(a0)
0000BB8C 317C 0000 0036             		move.w	#0,$36(a0)
0000BB92 6000                       		bra.s	loc_BB3C
0000BB94                            ; ===========================================================================
0000BB94                            
0000BB94                            loc_BB08:				; XREF: loc_BADA
0000BB94 3228 0034                  		move.w	$34(a0),d1
0000BB98 B268 0032                  		cmp.w	$32(a0),d1
0000BB9C 6700                       		beq.s	loc_BB3C
0000BB9E 3028 0010                  		move.w	$10(a0),d0
0000BBA2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BBA8 D168 0032                  		add.w	d0,$32(a0)
0000BBAC B268 0032                  		cmp.w	$32(a0),d1
0000BBB0 6200                       		bhi.s	loc_BB3C
0000BBB2 3141 0032                  		move.w	d1,$32(a0)
0000BBB6 317C 0000 0010             		move.w	#0,$10(a0)
0000BBBC 317C 0001 0036             		move.w	#1,$36(a0)
0000BBC2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BBC8                            
0000BBC8                            loc_BB3C:
0000BBC8 7000                       		moveq	#0,d0
0000BBCA 1028 0032                  		move.b	$32(a0),d0
0000BBCE 4440                       		neg.w	d0
0000BBD0 D068 0030                  		add.w	$30(a0),d0
0000BBD4 3140 0008                  		move.w	d0,8(a0)
0000BBD8 4E75                       		rts	
0000BBDA                            ; ===========================================================================
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA                            Map_obj31:
0000BBDA                            	include "_maps\obj31.asm"
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA 0000                       		dc.w byte_BB64-Map_obj31
0000BBDC 0000                       		dc.w byte_BB7E-Map_obj31
0000BBDE 0000                       		dc.w byte_BB98-Map_obj31
0000BBE0 0000                       		dc.w byte_BB9E-Map_obj31
0000BBE2 0000                       		dc.w byte_BBA9-Map_obj31
0000BBE4 0000                       		dc.w byte_BBBE-Map_obj31
0000BBE6 0000                       		dc.w byte_BBDD-Map_obj31
0000BBE8 0000                       		dc.w byte_BC06-Map_obj31
0000BBEA 0000                       		dc.w byte_BC06-Map_obj31
0000BBEC 0000                       		dc.w byte_BC39-Map_obj31
0000BBEE 0000                       		dc.w byte_BC53-Map_obj31
0000BBF0 05                         byte_BB64:	dc.b 5
0000BBF1 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BBF6 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BBFB EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC00 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BC05 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BC0A 05                         byte_BB7E:	dc.b 5
0000BC0B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BC10 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BC15 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BC1A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BC1F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BC24 01                         byte_BB98:	dc.b 1
0000BC25 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BC2A 02                         byte_BB9E:	dc.b 2
0000BC2B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC30 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC35 04                         byte_BBA9:	dc.b 4
0000BC36 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC3B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC40 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC45 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC4A 06                         byte_BBBE:	dc.b 6
0000BC4B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC50 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC55 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC5A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC5F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC64 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC69 08                         byte_BBDD:	dc.b 8
0000BC6A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BC6F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BC74 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC79 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC7E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC83 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC88 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC8D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC92 0A                         byte_BC06:	dc.b $A
0000BC93 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BC98 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BC9D A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCA2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCA7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCAC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCB1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCB6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCBB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCC0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCC5 05                         byte_BC39:	dc.b 5
0000BCC6 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BCCB F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BCD0 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BCD5 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BCDA EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BCDF 01                         byte_BC53:	dc.b 1
0000BCE0 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BCE6 00                         		even
0000BCE6 00                         		even
0000BCE6                            
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            Map_obj45:
0000BCE6                            	include "_maps\obj45.asm"
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6 0000                       		dc.w byte_BC6C-Map_obj45
0000BCE8 0000                       		dc.w byte_BC7C-Map_obj45
0000BCEA 0000                       		dc.w byte_BC8C-Map_obj45
0000BCEC 0000                       		dc.w byte_BC92-Map_obj45
0000BCEE 0000                       		dc.w byte_BC9D-Map_obj45
0000BCF0 0000                       		dc.w byte_BCB2-Map_obj45
0000BCF2 0000                       		dc.w byte_BCD1-Map_obj45
0000BCF4 0000                       		dc.w byte_BCFA-Map_obj45
0000BCF6 0000                       		dc.w byte_BCFA-Map_obj45
0000BCF8 03                         byte_BC6C:	dc.b 3
0000BCF9 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BCFE 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BD03 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BD08 03                         byte_BC7C:	dc.b 3
0000BD09 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BD0E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BD13 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BD18 01                         byte_BC8C:	dc.b 1
0000BD19 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BD1E 02                         byte_BC92:	dc.b 2
0000BD1F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD24 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD29 04                         byte_BC9D:	dc.b 4
0000BD2A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD2F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD34 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD39 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD3E 06                         byte_BCB2:	dc.b 6
0000BD3F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD44 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD49 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD4E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD53 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD58 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BD5D 08                         byte_BCD1:	dc.b 8
0000BD5E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD63 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD68 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD6D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD72 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD77 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BD7C F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BD81 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BD86 08                         byte_BCFA:	dc.b 8
0000BD87 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD8C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD91 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD96 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD9B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDA0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDA5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDAA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDAF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BDB4 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BDBA 00                         		even
0000BDBA 00                         		even
0000BDBA                            
0000BDBA                            ; ===========================================================================
0000BDBA                            ; ---------------------------------------------------------------------------
0000BDBA                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BDBA                            ; ---------------------------------------------------------------------------
0000BDBA                            
0000BDBA                            Obj32:					; XREF: Obj_Index
0000BDBA 7000                       		moveq	#0,d0
0000BDBC 1028 0024                  		move.b	$24(a0),d0
0000BDC0 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BDC4 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BDC8                            ; ===========================================================================
0000BDC8 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BDCA 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BDCC                            ; ===========================================================================
0000BDCC                            
0000BDCC                            Obj32_Main:				; XREF: Obj32_Index
0000BDCC 5428 0024                  		addq.b	#2,$24(a0)
0000BDD0 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BDD8 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BDDE 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BDE4 6700                       		beq.s	loc_BD60
0000BDE6 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BDEC                            
0000BDEC                            loc_BD60:
0000BDEC 117C 0004 0001             		move.b	#4,1(a0)
0000BDF2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDF8 117C 0004 0018             		move.b	#4,$18(a0)
0000BDFE 5668 000C                  		addq.w	#3,$C(a0)
0000BE02                            
0000BE02                            Obj32_Pressed:				; XREF: Obj32_Index
0000BE02 4A28 0001                  		tst.b	1(a0)
0000BE06 6A00                       		bpl.s	Obj32_Display
0000BE08 323C 001B                  		move.w	#$1B,d1
0000BE0C 343C 0005                  		move.w	#5,d2
0000BE10 363C 0005                  		move.w	#5,d3
0000BE14 3828 0008                  		move.w	8(a0),d4
0000BE18 6100 0000                  		bsr.w	SolidObject
0000BE1C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BE22 1028 0028                  		move.b	$28(a0),d0
0000BE26 0240 000F                  		andi.w	#$F,d0
0000BE2A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BE2E 47F3 0000                  		lea	(a3,d0.w),a3
0000BE32 7600                       		moveq	#0,d3
0000BE34 0828 0006 0028             		btst	#6,$28(a0)
0000BE3A 6700                       		beq.s	loc_BDB2
0000BE3C 7607                       		moveq	#7,d3
0000BE3E                            
0000BE3E                            loc_BDB2:
0000BE3E 4A28 0028                  		tst.b	$28(a0)
0000BE42 6A00                       		bpl.s	loc_BDBE
0000BE44 6100 0000                  		bsr.w	Obj32_MZBlock
0000BE48 6600                       		bne.s	loc_BDC8
0000BE4A                            
0000BE4A                            loc_BDBE:
0000BE4A 4A28 0025                  		tst.b	$25(a0)
0000BE4E 6600                       		bne.s	loc_BDC8
0000BE50 0793                       		bclr	d3,(a3)
0000BE52 6000                       		bra.s	loc_BDDE
0000BE54                            ; ===========================================================================
0000BE54                            
0000BE54                            loc_BDC8:
0000BE54 4A13                       		tst.b	(a3)
0000BE56 6600                       		bne.s	loc_BDD6
0000BE58 303C 00CD                  		move.w	#$CD,d0
0000BE5C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play switch sound
0000BE62                            
0000BE62                            loc_BDD6:
0000BE62 07D3                       		bset	d3,(a3)
0000BE64 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BE6A                            
0000BE6A                            loc_BDDE:
0000BE6A 0828 0005 0028             		btst	#5,$28(a0)
0000BE70 6700                       		beq.s	Obj32_Display
0000BE72 5328 001E                  		subq.b	#1,$1E(a0)
0000BE76 6A00                       		bpl.s	Obj32_Display
0000BE78 117C 0007 001E             		move.b	#7,$1E(a0)
0000BE7E 0868 0001 001A             		bchg	#1,$1A(a0)
0000BE84                            
0000BE84                            Obj32_Display:
0000BE84 6100 0000                  		bsr.w	DisplaySprite
0000BE88 3028 0008                  		move.w	8(a0),d0
0000BE8C 0240 FF80                  		andi.w	#$FF80,d0
0000BE90 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE94 0441 0080                  		subi.w	#$80,d1
0000BE98 0241 FF80                  		andi.w	#$FF80,d1
0000BE9C 9041                       		sub.w	d1,d0
0000BE9E 0C40 0280                  		cmpi.w	#$280,d0
0000BEA2 6200 0000                  		bhi.w	Obj32_Delete
0000BEA6 4E75                       		rts	
0000BEA8                            ; ===========================================================================
0000BEA8                            
0000BEA8                            Obj32_Delete:
0000BEA8 6100 0000                  		bsr.w	DeleteObject
0000BEAC 4E75                       		rts	
0000BEAE                            
0000BEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEAE                            
0000BEAE                            
0000BEAE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BEAE 3F03                       		move.w	d3,-(sp)
0000BEB0 3428 0008                  		move.w	8(a0),d2
0000BEB4 3628 000C                  		move.w	$C(a0),d3
0000BEB8 0442 0010                  		subi.w	#$10,d2
0000BEBC 5143                       		subq.w	#8,d3
0000BEBE 383C 0020                  		move.w	#$20,d4
0000BEC2 3A3C 0010                  		move.w	#$10,d5
0000BEC6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BECA 3C3C 005F                  		move.w	#$5F,d6
0000BECE                            
0000BECE                            Obj32_MZLoop:
0000BECE 4A29 0001                  		tst.b	1(a1)
0000BED2 6A00                       		bpl.s	loc_BE4E
0000BED4 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BED8 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BEDA                            
0000BEDA                            loc_BE4E:
0000BEDA 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BEDE 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BEE2                            
0000BEE2 361F                       		move.w	(sp)+,d3
0000BEE4 7000                       		moveq	#0,d0
0000BEE6                            
0000BEE6                            locret_BE5A:
0000BEE6 4E75                       		rts	
0000BEE8                            ; ===========================================================================
0000BEE8 1010                       Obj32_MZData:	dc.b $10, $10
0000BEEA                            ; ===========================================================================
0000BEEA                            
0000BEEA                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BEEA 7001                       		moveq	#1,d0
0000BEEC 0240 003F                  		andi.w	#$3F,d0
0000BEF0 D040                       		add.w	d0,d0
0000BEF2 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BEF6 121A                       		move.b	(a2)+,d1
0000BEF8 4881                       		ext.w	d1
0000BEFA 3029 0008                  		move.w	8(a1),d0
0000BEFE 9041                       		sub.w	d1,d0
0000BF00 9042                       		sub.w	d2,d0
0000BF02 6400                       		bcc.s	loc_BE80
0000BF04 D241                       		add.w	d1,d1
0000BF06 D041                       		add.w	d1,d0
0000BF08 6500                       		bcs.s	loc_BE84
0000BF0A 60CE                       		bra.s	loc_BE4E
0000BF0C                            ; ===========================================================================
0000BF0C                            
0000BF0C                            loc_BE80:
0000BF0C B044                       		cmp.w	d4,d0
0000BF0E 62CA                       		bhi.s	loc_BE4E
0000BF10                            
0000BF10                            loc_BE84:
0000BF10 121A                       		move.b	(a2)+,d1
0000BF12 4881                       		ext.w	d1
0000BF14 3029 000C                  		move.w	$C(a1),d0
0000BF18 9041                       		sub.w	d1,d0
0000BF1A 9043                       		sub.w	d3,d0
0000BF1C 6400                       		bcc.s	loc_BE9A
0000BF1E D241                       		add.w	d1,d1
0000BF20 D041                       		add.w	d1,d0
0000BF22 6500                       		bcs.s	loc_BE9E
0000BF24 60B4                       		bra.s	loc_BE4E
0000BF26                            ; ===========================================================================
0000BF26                            
0000BF26                            loc_BE9A:
0000BF26 B045                       		cmp.w	d5,d0
0000BF28 62B0                       		bhi.s	loc_BE4E
0000BF2A                            
0000BF2A                            loc_BE9E:
0000BF2A 361F                       		move.w	(sp)+,d3
0000BF2C 7001                       		moveq	#1,d0
0000BF2E 4E75                       		rts	
0000BF30                            ; End of function Obj32_MZBlock
0000BF30                            
0000BF30                            ; ===========================================================================
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30                            Map_obj32:
0000BF30                            	include "_maps\obj32.asm"
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30 0000                       		dc.w byte_BEAC-Map_obj32
0000BF32 0000                       		dc.w byte_BEB7-Map_obj32
0000BF34 0000                       		dc.w byte_BEC2-Map_obj32
0000BF36 0000                       		dc.w byte_BEB7-Map_obj32
0000BF38 02                         byte_BEAC:	dc.b 2
0000BF39 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BF3E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BF43 02                         byte_BEB7:	dc.b 2
0000BF44 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BF49 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BF4E 02                         byte_BEC2:	dc.b 2
0000BF4F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BF54 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BF59 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BF5E                            		even
0000BF5E                            		even
0000BF5E                            
0000BF5E                            ; ===========================================================================
0000BF5E                            ; ---------------------------------------------------------------------------
0000BF5E                            ; Object 33 - pushable blocks (MZ, LZ)
0000BF5E                            ; ---------------------------------------------------------------------------
0000BF5E                            
0000BF5E                            Obj33:					; XREF: Obj_Index
0000BF5E 7000                       		moveq	#0,d0
0000BF60 1028 0024                  		move.b	$24(a0),d0
0000BF64 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BF68 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BF6C                            ; ===========================================================================
0000BF6C 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BF6E 0000                       		dc.w loc_BF6E-Obj33_Index
0000BF70 0000                       		dc.w loc_C02C-Obj33_Index
0000BF72                            
0000BF72 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BF74 4001                       		dc.b $40, 1
0000BF76                            ; ===========================================================================
0000BF76                            
0000BF76                            Obj33_Main:				; XREF: Obj33_Index
0000BF76 5428 0024                  		addq.b	#2,$24(a0)
0000BF7A 117C 000F 0016             		move.b	#$F,$16(a0)
0000BF80 117C 000F 0017             		move.b	#$F,$17(a0)
0000BF86 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BF8E 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BF94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BF9A 6600                       		bne.s	loc_BF16
0000BF9C 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BFA2                            
0000BFA2                            loc_BF16:
0000BFA2 117C 0004 0001             		move.b	#4,1(a0)
0000BFA8 117C 0003 0018             		move.b	#3,$18(a0)
0000BFAE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BFB4 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BFBA 7000                       		moveq	#0,d0
0000BFBC 1028 0028                  		move.b	$28(a0),d0
0000BFC0 D040                       		add.w	d0,d0
0000BFC2 0240 000E                  		andi.w	#$E,d0
0000BFC6 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000BFCA 115A 0019                  		move.b	(a2)+,$19(a0)
0000BFCE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BFD2 4A28 0028                  		tst.b	$28(a0)
0000BFD6 6700                       		beq.s	Obj33_ChkGone
0000BFD8 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000BFDE                            
0000BFDE                            Obj33_ChkGone:
0000BFDE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BFE2 7000                       		moveq	#0,d0
0000BFE4 1028 0023                  		move.b	$23(a0),d0
0000BFE8 6700                       		beq.s	loc_BF6E
0000BFEA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BFF0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BFF6 6600 0000                  		bne.w	DeleteObject
0000BFFA                            
0000BFFA                            loc_BF6E:				; XREF: Obj33_Index
0000BFFA 4A28 0032                  		tst.b	$32(a0)
0000BFFE 6600 0000                  		bne.w	loc_C046
0000C002 7200                       		moveq	#0,d1
0000C004 1228 0019                  		move.b	$19(a0),d1
0000C008 0641 000B                  		addi.w	#$B,d1
0000C00C 343C 0010                  		move.w	#$10,d2
0000C010 363C 0011                  		move.w	#$11,d3
0000C014 3828 0008                  		move.w	8(a0),d4
0000C018 6100 0000                  		bsr.w	loc_C186
0000C01C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C022 6600                       		bne.s	loc_BFC6	; if not, branch
0000C024 08A8 0007 0028             		bclr	#7,$28(a0)
0000C02A 3028 0008                  		move.w	8(a0),d0
0000C02E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C032 6500                       		bcs.s	loc_BFC6
0000C034 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C038 6400                       		bcc.s	loc_BFC6
0000C03A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C03E 0440 001C                  		subi.w	#$1C,d0
0000C042 3140 000C                  		move.w	d0,$C(a0)
0000C046 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C04C 08E8 0007 0028             		bset	#7,$28(a0)
0000C052                            
0000C052                            loc_BFC6:
0000C052 3028 0008                  		move.w	8(a0),d0
0000C056 0240 FF80                  		andi.w	#$FF80,d0
0000C05A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C05E 0441 0080                  		subi.w	#$80,d1
0000C062 0241 FF80                  		andi.w	#$FF80,d1
0000C066 9041                       		sub.w	d1,d0
0000C068 0C40 0280                  		cmpi.w	#$280,d0
0000C06C 6200                       		bhi.s	loc_BFE6
0000C06E 6000 0000                  		bra.w	DisplaySprite
0000C072                            ; ===========================================================================
0000C072                            
0000C072                            loc_BFE6:
0000C072 3028 0034                  		move.w	$34(a0),d0
0000C076 0240 FF80                  		andi.w	#$FF80,d0
0000C07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C07E 0441 0080                  		subi.w	#$80,d1
0000C082 0241 FF80                  		andi.w	#$FF80,d1
0000C086 9041                       		sub.w	d1,d0
0000C088 0C40 0280                  		cmpi.w	#$280,d0
0000C08C 6200                       		bhi.s	loc_C016
0000C08E 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C094 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C09A 117C 0004 0024             		move.b	#4,$24(a0)
0000C0A0 6000                       		bra.s	loc_C02C
0000C0A2                            ; ===========================================================================
0000C0A2                            
0000C0A2                            loc_C016:
0000C0A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C0A6 7000                       		moveq	#0,d0
0000C0A8 1028 0023                  		move.b	$23(a0),d0
0000C0AC 6700                       		beq.s	loc_C028
0000C0AE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C0B4                            
0000C0B4                            loc_C028:
0000C0B4 6000 0000                  		bra.w	DeleteObject
0000C0B8                            ; ===========================================================================
0000C0B8                            
0000C0B8                            loc_C02C:				; XREF: Obj33_Index
0000C0B8 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C0BC 6700                       		beq.s	locret_C044
0000C0BE 117C 0002 0024             		move.b	#2,$24(a0)
0000C0C4 4228 0032                  		clr.b	$32(a0)
0000C0C8 4268 0010                  		clr.w	$10(a0)
0000C0CC 4268 0012                  		clr.w	$12(a0)
0000C0D0                            
0000C0D0                            locret_C044:
0000C0D0 4E75                       		rts	
0000C0D2                            ; ===========================================================================
0000C0D2                            
0000C0D2                            loc_C046:				; XREF: loc_BF6E
0000C0D2 3F28 0008                  		move.w	8(a0),-(sp)
0000C0D6 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C0DC 6400                       		bcc.s	loc_C056
0000C0DE 6100 0000                  		bsr.w	SpeedToPos
0000C0E2                            
0000C0E2                            loc_C056:
0000C0E2 0828 0001 0022             		btst	#1,$22(a0)
0000C0E8 6700                       		beq.s	loc_C0A0
0000C0EA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C0F0 4EB9 0000 0000             		jsr	ObjHitFloor
0000C0F6 4A41                       		tst.w	d1
0000C0F8 6A00 0000                  		bpl.w	loc_C09E
0000C0FC D368 000C                  		add.w	d1,$C(a0)
0000C100 4268 0012                  		clr.w	$12(a0)
0000C104 08A8 0001 0022             		bclr	#1,$22(a0)
0000C10A 3011                       		move.w	(a1),d0
0000C10C 0240 03FF                  		andi.w	#$3FF,d0
0000C110 0C40 016A                  		cmpi.w	#$16A,d0
0000C114 6500                       		bcs.s	loc_C09E
0000C116 3028 0030                  		move.w	$30(a0),d0
0000C11A E640                       		asr.w	#3,d0
0000C11C 3140 0010                  		move.w	d0,$10(a0)
0000C120 117C 0001 0032             		move.b	#1,$32(a0)
0000C126 4268 000E                  		clr.w	$E(a0)
0000C12A                            
0000C12A                            loc_C09E:
0000C12A 6000                       		bra.s	loc_C0E6
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            loc_C0A0:
0000C12C 4A68 0010                  		tst.w	$10(a0)
0000C130 6700 0000                  		beq.w	loc_C0D6
0000C134 6B00                       		bmi.s	loc_C0BC
0000C136 7600                       		moveq	#0,d3
0000C138 1628 0019                  		move.b	$19(a0),d3
0000C13C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C142 4A41                       		tst.w	d1		; has block touched a wall?
0000C144 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C146 6000                       		bra.s	loc_C0E6
0000C148                            ; ===========================================================================
0000C148                            
0000C148                            loc_C0BC:
0000C148 7600                       		moveq	#0,d3
0000C14A 1628 0019                  		move.b	$19(a0),d3
0000C14E 4643                       		not.w	d3
0000C150 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C156 4A41                       		tst.w	d1		; has block touched a wall?
0000C158 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C15A 6000                       		bra.s	loc_C0E6
0000C15C                            ; ===========================================================================
0000C15C                            
0000C15C                            Obj33_StopPush:
0000C15C 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C160 6000                       		bra.s	loc_C0E6
0000C162                            ; ===========================================================================
0000C162                            
0000C162                            loc_C0D6:
0000C162 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C16A 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C170 6400                       		bcc.s	loc_C104
0000C172                            
0000C172                            loc_C0E6:
0000C172 7200                       		moveq	#0,d1
0000C174 1228 0019                  		move.b	$19(a0),d1
0000C178 0641 000B                  		addi.w	#$B,d1
0000C17C 343C 0010                  		move.w	#$10,d2
0000C180 363C 0011                  		move.w	#$11,d3
0000C184 381F                       		move.w	(sp)+,d4
0000C186 6100 0000                  		bsr.w	loc_C186
0000C18A 6100                       		bsr.s	Obj33_ChkLava
0000C18C 6000 FEC4                  		bra.w	loc_BFC6
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            loc_C104:
0000C190 381F                       		move.w	(sp)+,d4
0000C192 43F8 D000                  		lea	($FFFFD000).w,a1
0000C196 08A9 0003 0022             		bclr	#3,$22(a1)
0000C19C 08A8 0003 0022             		bclr	#3,$22(a0)
0000C1A2 6000 FECE                  		bra.w	loc_BFE6
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            Obj33_ChkLava:
0000C1A6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C1AC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C1AE 343C FFE0                  		move.w	#-$20,d2
0000C1B2 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C1B8 6700                       		beq.s	Obj33_LoadLava
0000C1BA 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C1C0 6700                       		beq.s	Obj33_LoadLava
0000C1C2 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C1C8 6700                       		beq.s	Obj33_LoadLava
0000C1CA 4E75                       		rts	
0000C1CC                            ; ===========================================================================
0000C1CC                            
0000C1CC                            Obj33_ChkLava2:
0000C1CC 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C1D2 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C1D4 343C 0020                  		move.w	#$20,d2
0000C1D8 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C1DE 6700                       		beq.s	Obj33_LoadLava
0000C1E0 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C1E6 6700                       		beq.s	Obj33_LoadLava
0000C1E8                            
0000C1E8                            Obj33_NoLava:
0000C1E8 4E75                       		rts	
0000C1EA                            ; ===========================================================================
0000C1EA                            
0000C1EA                            Obj33_LoadLava:
0000C1EA 6100 0000                  		bsr.w	SingleObjLoad
0000C1EE 6600                       		bne.s	locret_C184
0000C1F0 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C1F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1FA D569 0008                  		add.w	d2,8(a1)
0000C1FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C204 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C20A 2348 003C                  		move.l	a0,$3C(a1)
0000C20E                            
0000C20E                            locret_C184:
0000C20E 4E75                       		rts	
0000C210                            ; ===========================================================================
0000C210                            
0000C210                            loc_C186:				; XREF: loc_BF6E
0000C210 1028 0025                  		move.b	$25(a0),d0
0000C214 6700 0000                  		beq.w	loc_C218
0000C218 5500                       		subq.b	#2,d0
0000C21A 6600                       		bne.s	loc_C1AA
0000C21C 6100 B4A8                  		bsr.w	ExitPlatform
0000C220 0829 0003 0022             		btst	#3,$22(a1)
0000C226 6600                       		bne.s	loc_C1A4
0000C228 4228 0025                  		clr.b	$25(a0)
0000C22C 4E75                       		rts	
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            loc_C1A4:
0000C22E 3404                       		move.w	d4,d2
0000C230 6000 B9F2                  		bra.w	MvSonicOnPtfm
0000C234                            ; ===========================================================================
0000C234                            
0000C234                            loc_C1AA:
0000C234 5500                       		subq.b	#2,d0
0000C236 6600                       		bne.s	loc_C1F2
0000C238 6100 0000                  		bsr.w	SpeedToPos
0000C23C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C242 4EB9 0000 0000             		jsr	ObjHitFloor
0000C248 4A41                       		tst.w	d1
0000C24A 6A00 0000                  		bpl.w	locret_C1F0
0000C24E D368 000C                  		add.w	d1,$C(a0)
0000C252 4268 0012                  		clr.w	$12(a0)
0000C256 4228 0025                  		clr.b	$25(a0)
0000C25A 3011                       		move.w	(a1),d0
0000C25C 0240 03FF                  		andi.w	#$3FF,d0
0000C260 0C40 016A                  		cmpi.w	#$16A,d0
0000C264 6500                       		bcs.s	locret_C1F0
0000C266 3028 0030                  		move.w	$30(a0),d0
0000C26A E640                       		asr.w	#3,d0
0000C26C 3140 0010                  		move.w	d0,$10(a0)
0000C270 117C 0001 0032             		move.b	#1,$32(a0)
0000C276 4268 000E                  		clr.w	$E(a0)
0000C27A                            
0000C27A                            locret_C1F0:
0000C27A 4E75                       		rts	
0000C27C                            ; ===========================================================================
0000C27C                            
0000C27C                            loc_C1F2:
0000C27C 6100 0000                  		bsr.w	SpeedToPos
0000C280 3028 0008                  		move.w	8(a0),d0
0000C284 0240 000C                  		andi.w	#$C,d0
0000C288 6600 0000                  		bne.w	locret_C2E4
0000C28C 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C292 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C298 4268 0010                  		clr.w	$10(a0)
0000C29C 5528 0025                  		subq.b	#2,$25(a0)
0000C2A0 4E75                       		rts	
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            loc_C218:
0000C2A2 6100 0000                  		bsr.w	loc_FAC8
0000C2A6 4A44                       		tst.w	d4
0000C2A8 6700 0000                  		beq.w	locret_C2E4
0000C2AC 6B00 0000                  		bmi.w	locret_C2E4
0000C2B0 4A28 0032                  		tst.b	$32(a0)
0000C2B4 6700                       		beq.s	loc_C230
0000C2B6 6000 0000                  		bra.w	locret_C2E4
0000C2BA                            ; ===========================================================================
0000C2BA                            
0000C2BA                            loc_C230:
0000C2BA 4A40                       		tst.w	d0
0000C2BC 6700 0000                  		beq.w	locret_C2E4
0000C2C0 6B00                       		bmi.s	loc_C268
0000C2C2 0829 0000 0022             		btst	#0,$22(a1)
0000C2C8 6600 0000                  		bne.w	locret_C2E4
0000C2CC 3F00                       		move.w	d0,-(sp)
0000C2CE 7600                       		moveq	#0,d3
0000C2D0 1628 0019                  		move.b	$19(a0),d3
0000C2D4 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C2DA 301F                       		move.w	(sp)+,d0
0000C2DC 4A41                       		tst.w	d1
0000C2DE 6B00 0000                  		bmi.w	locret_C2E4
0000C2E2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C2EA 7001                       		moveq	#1,d0
0000C2EC 323C 0040                  		move.w	#$40,d1
0000C2F0 6000                       		bra.s	loc_C294
0000C2F2                            ; ===========================================================================
0000C2F2                            
0000C2F2                            loc_C268:
0000C2F2 0829 0000 0022             		btst	#0,$22(a1)
0000C2F8 6700                       		beq.s	locret_C2E4
0000C2FA 3F00                       		move.w	d0,-(sp)
0000C2FC 7600                       		moveq	#0,d3
0000C2FE 1628 0019                  		move.b	$19(a0),d3
0000C302 4643                       		not.w	d3
0000C304 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C30A 301F                       		move.w	(sp)+,d0
0000C30C 4A41                       		tst.w	d1
0000C30E 6B00                       		bmi.s	locret_C2E4
0000C310 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C318 70FF                       		moveq	#-1,d0
0000C31A 323C FFC0                  		move.w	#-$40,d1
0000C31E                            
0000C31E                            loc_C294:
0000C31E 43F8 D000                  		lea	($FFFFD000).w,a1
0000C322 D169 0008                  		add.w	d0,8(a1)
0000C326 3341 0014                  		move.w	d1,$14(a1)
0000C32A 337C 0000 0010             		move.w	#0,$10(a1)
0000C330 3F00                       		move.w	d0,-(sp)
0000C332 303C 00A7                  		move.w	#$A7,d0
0000C336 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C33C 301F                       		move.w	(sp)+,d0
0000C33E 4A28 0028                  		tst.b	$28(a0)
0000C342 6B00                       		bmi.s	locret_C2E4
0000C344 3F00                       		move.w	d0,-(sp)
0000C346 4EB9 0000 0000             		jsr	ObjHitFloor
0000C34C 301F                       		move.w	(sp)+,d0
0000C34E 0C41 0004                  		cmpi.w	#4,d1
0000C352 6F00                       		ble.s	loc_C2E0
0000C354 317C 0400 0010             		move.w	#$400,$10(a0)
0000C35A 4A40                       		tst.w	d0
0000C35C 6A00                       		bpl.s	loc_C2D8
0000C35E 4468 0010                  		neg.w	$10(a0)
0000C362                            
0000C362                            loc_C2D8:
0000C362 117C 0006 0025             		move.b	#6,$25(a0)
0000C368 6000                       		bra.s	locret_C2E4
0000C36A                            ; ===========================================================================
0000C36A                            
0000C36A                            loc_C2E0:
0000C36A D368 000C                  		add.w	d1,$C(a0)
0000C36E                            
0000C36E                            locret_C2E4:
0000C36E 4E75                       		rts	
0000C370                            ; ===========================================================================
0000C370                            ; ---------------------------------------------------------------------------
0000C370                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C370                            ; ---------------------------------------------------------------------------
0000C370                            Map_obj33:
0000C370                            	include "_maps\obj33.asm"
0000C370                            ; ---------------------------------------------------------------------------
0000C370                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C370                            ; ---------------------------------------------------------------------------
0000C370 0000                       		dc.w byte_C2EA-Map_obj33
0000C372 0000                       		dc.w byte_C2F0-Map_obj33
0000C374 01                         byte_C2EA:	dc.b 1
0000C375 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C37A 04                         byte_C2F0:	dc.b 4
0000C37B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C380 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C385 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C38A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C390 00                         		even
0000C390 00                         		even
0000C390                            
0000C390                            ; ===========================================================================
0000C390                            ; ---------------------------------------------------------------------------
0000C390                            ; Object 34 - zone title cards
0000C390                            ; ---------------------------------------------------------------------------
0000C390                            
0000C390                            Obj34:					; XREF: Obj_Index
0000C390 7000                       		moveq	#0,d0
0000C392 1028 0024                  		move.b	$24(a0),d0
0000C396 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C39A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C39E                            ; ===========================================================================
0000C39E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C3A0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C3A2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3A4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3A6                            ; ===========================================================================
0000C3A6                            
0000C3A6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C3A6 2248                       		movea.l	a0,a1
0000C3A8 7000                       		moveq	#0,d0
0000C3AA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3AE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C3B4 6600                       		bne.s	Obj34_CheckFZ
0000C3B6 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C3B8                            
0000C3B8                            Obj34_CheckFZ:
0000C3B8 3400                       		move.w	d0,d2
0000C3BA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C3C0 6600                       		bne.s	Obj34_LoadConfig
0000C3C2 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C3C4 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C3C6                            
0000C3C6                            Obj34_LoadConfig:
0000C3C6 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C3CC E948                       		lsl.w	#4,d0
0000C3CE D6C0                       		adda.w	d0,a3
0000C3D0 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C3D6 7203                       		moveq	#3,d1
0000C3D8                            
0000C3D8                            Obj34_Loop:
0000C3D8 12BC 0034                  		move.b	#$34,0(a1)
0000C3DC 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C3E0 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C3E4 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C3E8 335A 000A                  		move.w	(a2)+,$A(a1)
0000C3EC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C3F0 101A                       		move.b	(a2)+,d0
0000C3F2 6600                       		bne.s	Obj34_ActNumber
0000C3F4 1002                       		move.b	d2,d0
0000C3F6                            
0000C3F6                            Obj34_ActNumber:
0000C3F6 0C00 0007                  		cmpi.b	#7,d0
0000C3FA 6600                       		bne.s	Obj34_MakeSprite
0000C3FC D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C400 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C406 6600                       		bne.s	Obj34_MakeSprite
0000C408 5300                       		subq.b	#1,d0
0000C40A                            
0000C40A                            Obj34_MakeSprite:
0000C40A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C40E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C416 337C 8580 0002             		move.w	#$8580,2(a1)
0000C41C 137C 0078 0019             		move.b	#$78,$19(a1)
0000C422 137C 0000 0001             		move.b	#0,1(a1)
0000C428 137C 0000 0018             		move.b	#0,$18(a1)
0000C42E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C434 43E9 0040                  		lea	$40(a1),a1	; next object
0000C438 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C43C                            
0000C43C                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C43C 7210                       		moveq	#$10,d1		; set horizontal speed
0000C43E 3028 0030                  		move.w	$30(a0),d0
0000C442 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C446 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C448 6C00                       		bge.s	Obj34_Move
0000C44A 4441                       		neg.w	d1
0000C44C                            
0000C44C                            Obj34_Move:
0000C44C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C450                            
0000C450                            loc_C3C8:
0000C450 3028 0008                  		move.w	8(a0),d0
0000C454 6B00                       		bmi.s	locret_C3D8
0000C456 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C45A 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C45C 6000 0000                  		bra.w	DisplaySprite
0000C460                            ; ===========================================================================
0000C460                            
0000C460                            locret_C3D8:
0000C460 4E75                       		rts	
0000C462                            ; ===========================================================================
0000C462                            
0000C462                            Obj34_Wait:				; XREF: Obj34_Index
0000C462 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C466 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C468 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C46C 6000 0000                  		bra.w	DisplaySprite
0000C470                            ; ===========================================================================
0000C470                            
0000C470                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C470 4A28 0001                  		tst.b	1(a0)
0000C474 6A00                       		bpl.s	Obj34_ChangeArt
0000C476 7220                       		moveq	#$20,d1
0000C478 3028 0032                  		move.w	$32(a0),d0
0000C47C B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C480 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C482 6C00                       		bge.s	Obj34_Move2
0000C484 4441                       		neg.w	d1
0000C486                            
0000C486                            Obj34_Move2:
0000C486 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C48A 3028 0008                  		move.w	8(a0),d0
0000C48E 6B00                       		bmi.s	locret_C412
0000C490 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C494 6400                       		bcc.s	locret_C412	; if yes, branch
0000C496 6000 0000                  		bra.w	DisplaySprite
0000C49A                            ; ===========================================================================
0000C49A                            
0000C49A                            locret_C412:
0000C49A 4E75                       		rts	
0000C49C                            ; ===========================================================================
0000C49C                            
0000C49C                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C49C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C4A2 6600                       		bne.s	Obj34_Delete
0000C4A4 7002                       		moveq	#2,d0
0000C4A6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
0000C4AC 7000                       		moveq	#0,d0
0000C4AE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C4B2 0640 0015                  		addi.w	#$15,d0
0000C4B6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns
0000C4BC                            
0000C4BC                            Obj34_Delete:
0000C4BC 6000 0000                  		bra.w	DeleteObject
0000C4C0                            ; ===========================================================================
0000C4C0 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C4C2 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C4C4 00E4                       		dc.w $E4
0000C4C6 0206                       		dc.b 2,	6
0000C4C8 00EA                       		dc.w $EA
0000C4CA 0207                       		dc.b 2,	7
0000C4CC 00E0                       		dc.w $E0
0000C4CE 020A                       		dc.b 2,	$A
0000C4D0                            ; ---------------------------------------------------------------------------
0000C4D0                            ; Title	card configuration data
0000C4D0                            ; Format:
0000C4D0                            ; 4 bytes per item (YYYY XXXX)
0000C4D0                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C4D0                            ; ---------------------------------------------------------------------------
0000C4D0 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C4E0 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C4F0 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C500 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C510 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C520 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C530 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C540                            ; ===========================================================================
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            
0000C540                            Obj39:					; XREF: Obj_Index
0000C540 7000                       		moveq	#0,d0
0000C542 1028 0024                  		move.b	$24(a0),d0
0000C546 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C54A 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C54E                            ; ===========================================================================
0000C54E 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C550 0000                       		dc.w loc_C50C-Obj39_Index
0000C552 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C554                            ; ===========================================================================
0000C554                            
0000C554                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C554 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C558 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C55A 4E75                       		rts	
0000C55C                            ; ===========================================================================
0000C55C                            
0000C55C                            Obj39_Main:
0000C55C 5428 0024                  		addq.b	#2,$24(a0)
0000C560 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C566 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C56C 6700                       		beq.s	loc_C4EC	; if not, branch
0000C56E 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C574                            
0000C574                            loc_C4EC:
0000C574 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C57A 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C582 317C 855E 0002             		move.w	#$855E,2(a0)
0000C588 117C 0000 0001             		move.b	#0,1(a0)
0000C58E 117C 0000 0018             		move.b	#0,$18(a0)
0000C594                            
0000C594                            loc_C50C:				; XREF: Obj39_Index
0000C594 7210                       		moveq	#$10,d1		; set horizontal speed
0000C596 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C59C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C59E 6500                       		bcs.s	Obj39_Move
0000C5A0 4441                       		neg.w	d1
0000C5A2                            
0000C5A2                            Obj39_Move:
0000C5A2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5A6 6000 0000                  		bra.w	DisplaySprite
0000C5AA                            ; ===========================================================================
0000C5AA                            
0000C5AA                            Obj39_SetWait:				; XREF: Obj39_Main
0000C5AA 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C5B0 5428 0024                  		addq.b	#2,$24(a0)
0000C5B4 4E75                       		rts	
0000C5B6                            ; ===========================================================================
0000C5B6                            
0000C5B6                            Obj39_Wait:				; XREF: Obj39_Index
0000C5B6 1038 F605                  		move.b	($FFFFF605).w,d0
0000C5BA 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C5BE 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C5C0 0828 0000 001A             		btst	#0,$1A(a0)
0000C5C6 6600                       		bne.s	Obj39_Display
0000C5C8 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C5CC 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C5CE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C5D2 6000 0000                  		bra.w	DisplaySprite
0000C5D6                            ; ===========================================================================
0000C5D6                            
0000C5D6                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C5D6 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C5DA 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C5DC 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C5E2 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C5E6 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C5E8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C5EE 6000                       		bra.s	Obj39_Display
0000C5F0                            ; ===========================================================================
0000C5F0                            
0000C5F0                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C5F0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C5F6                            
0000C5F6                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C5F6 6000 0000                  		bra.w	DisplaySprite
0000C5FA                            ; ===========================================================================
0000C5FA                            ; ---------------------------------------------------------------------------
0000C5FA                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C5FA                            ; ---------------------------------------------------------------------------
0000C5FA                            
0000C5FA                            Obj3A:					; XREF: Obj_Index
0000C5FA 7000                       		moveq	#0,d0
0000C5FC 1028 0024                  		move.b	$24(a0),d0
0000C600 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C604 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C608                            ; ===========================================================================
0000C608 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C60A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C60C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C60E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C610 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C612 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C614 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C616 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C618 0000                       		dc.w loc_C766-Obj3A_Index
0000C61A                            ; ===========================================================================
0000C61A                            
0000C61A                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C61A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C61E 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C620 4E75                       		rts	
0000C622                            ; ===========================================================================
0000C622                            
0000C622                            Obj3A_Main:
0000C622 2248                       		movea.l	a0,a1
0000C624 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C62A 7206                       		moveq	#6,d1
0000C62C                            
0000C62C                            Obj3A_Loop:
0000C62C 12BC 003A                  		move.b	#$3A,0(a1)
0000C630 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C634 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C638 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C63C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C640 135A 0024                  		move.b	(a2)+,$24(a1)
0000C644 101A                       		move.b	(a2)+,d0
0000C646 0C00 0006                  		cmpi.b	#6,d0
0000C64A 6600                       		bne.s	loc_C5CA
0000C64C D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C650                            
0000C650                            loc_C5CA:
0000C650 1340 001A                  		move.b	d0,$1A(a1)
0000C654 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C65C 337C 8580 0002             		move.w	#$8580,2(a1)
0000C662 137C 0000 0001             		move.b	#0,1(a1)
0000C668 43E9 0040                  		lea	$40(a1),a1
0000C66C 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C670                            
0000C670                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C670 7210                       		moveq	#$10,d1		; set horizontal speed
0000C672 3028 0030                  		move.w	$30(a0),d0
0000C676 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C67A 6700                       		beq.s	loc_C61A	; if yes, branch
0000C67C 6C00                       		bge.s	Obj3A_Move
0000C67E 4441                       		neg.w	d1
0000C680                            
0000C680                            Obj3A_Move:
0000C680 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C684                            
0000C684                            loc_C5FE:				; XREF: loc_C61A
0000C684 3028 0008                  		move.w	8(a0),d0
0000C688 6B00                       		bmi.s	locret_C60E
0000C68A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C68E 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C690 6000 0000                  		bra.w	DisplaySprite
0000C694                            ; ===========================================================================
0000C694                            
0000C694                            locret_C60E:
0000C694 4E75                       		rts	
0000C696                            ; ===========================================================================
0000C696                            
0000C696                            loc_C610:				; XREF: loc_C61A
0000C696 117C 000E 0024             		move.b	#$E,$24(a0)
0000C69C 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C6A0                            ; ===========================================================================
0000C6A0                            
0000C6A0                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C6A0 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C6A6 67EE                       		beq.s	loc_C610
0000C6A8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6AE 66D4                       		bne.s	loc_C5FE
0000C6B0 5428 0024                  		addq.b	#2,$24(a0)
0000C6B4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C6BA                            
0000C6BA                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C6BA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C6BE 6600                       		bne.s	Obj3A_Display
0000C6C0 5428 0024                  		addq.b	#2,$24(a0)
0000C6C4                            
0000C6C4                            Obj3A_Display:
0000C6C4 6000 0000                  		bra.w	DisplaySprite
0000C6C8                            ; ===========================================================================
0000C6C8                            
0000C6C8                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C6C8 6100 0000                  		bsr.w	DisplaySprite
0000C6CC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C6D2 7000                       		moveq	#0,d0
0000C6D4 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C6D8 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C6DA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C6DE 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C6E4                            
0000C6E4                            Obj3A_RingBonus:
0000C6E4 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C6E8 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C6EA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C6EE 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C6F4                            
0000C6F4                            Obj3A_ChkBonus:
0000C6F4 4A40                       		tst.w	d0		; is there any bonus?
0000C6F6 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C6F8 303C 00C5                  		move.w	#$C5,d0
0000C6FC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C702 5428 0024                  		addq.b	#2,$24(a0)
0000C706 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C70C 6600                       		bne.s	Obj3A_SetDelay
0000C70E 5828 0024                  		addq.b	#4,$24(a0)
0000C712                            
0000C712                            Obj3A_SetDelay:
0000C712 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C718                            
0000C718                            locret_C692:
0000C718 4E75                       		rts	
0000C71A                            ; ===========================================================================
0000C71A                            
0000C71A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C71A 4EB9 0000 0000             		jsr	AddPoints
0000C720 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C724 0200 0003                  		andi.b	#3,d0
0000C728 66EE                       		bne.s	locret_C692
0000C72A 303C 00CD                  		move.w	#$CD,d0
0000C72E 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C734                            ; ===========================================================================
0000C734                            
0000C734                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C734 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C738 0240 0007                  		andi.w	#7,d0
0000C73C E748                       		lsl.w	#3,d0
0000C73E 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C742 0241 0003                  		andi.w	#3,d1
0000C746 D241                       		add.w	d1,d1
0000C748 D041                       		add.w	d1,d0
0000C74A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C74E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C752 4A40                       		tst.w	d0
0000C754 6600                       		bne.s	Obj3A_ChkSS
0000C756 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C75C 6000                       		bra.s	Obj3A_Display2
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C75E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C762 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C766 6700                       		beq.s	loc_C6EA	; if not, branch
0000C768 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C76E 6000                       		bra.s	Obj3A_Display2
0000C770                            ; ===========================================================================
0000C770                            
0000C770                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C770 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C776                            
0000C776                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C776 6000 0000                  		bra.w	DisplaySprite
0000C77A                            ; ===========================================================================
0000C77A                            ; ---------------------------------------------------------------------------
0000C77A                            ; Level	order array
0000C77A                            ; ---------------------------------------------------------------------------
0000C77A                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C7AA                            		even
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C7AA 7220                       		moveq	#$20,d1		; set horizontal speed
0000C7AC 3028 0032                  		move.w	$32(a0),d0
0000C7B0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C7B4 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C7B6 6C00                       		bge.s	Obj3A_Move2
0000C7B8 4441                       		neg.w	d1
0000C7BA                            
0000C7BA                            Obj3A_Move2:
0000C7BA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C7BE 3028 0008                  		move.w	8(a0),d0
0000C7C2 6B00                       		bmi.s	locret_C748
0000C7C4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C7C8 6400                       		bcc.s	locret_C748	; if yes, branch
0000C7CA 6000 0000                  		bra.w	DisplaySprite
0000C7CE                            ; ===========================================================================
0000C7CE                            
0000C7CE                            locret_C748:
0000C7CE 4E75                       		rts	
0000C7D0                            ; ===========================================================================
0000C7D0                            
0000C7D0                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C7D0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C7D6 6600 0000                  		bne.w	DeleteObject
0000C7DA 5428 0024                  		addq.b	#2,$24(a0)
0000C7DE 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C7E2 303C 008D                  		move.w	#$8D,d0
0000C7E6 4EF9 0000 1396             		jmp	(PlaySound).l	; play FZ music
0000C7EC                            ; ===========================================================================
0000C7EC                            
0000C7EC                            loc_C766:				; XREF: Obj3A_Index
0000C7EC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C7F0 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C7F6 6700 0000                  		beq.w	DeleteObject
0000C7FA 4E75                       		rts	
0000C7FC                            ; ===========================================================================
0000C7FC 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C802 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C804 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C80A 0201                       		dc.b 2,	1
0000C80C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C812 0206                       		dc.b 2,	6
0000C814 0520 0120 00EC             		dc.w $520, $120, $EC
0000C81A 0202                       		dc.b 2,	2
0000C81C 0540 0120 00FC             		dc.w $540, $120, $FC
0000C822 0203                       		dc.b 2,	3
0000C824 0560 0120 010C             		dc.w $560, $120, $10C
0000C82A 0204                       		dc.b 2,	4
0000C82C 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C832 0205                       		dc.b 2,	5
0000C834                            ; ===========================================================================
0000C834                            ; ---------------------------------------------------------------------------
0000C834                            ; Object 7E - special stage results screen
0000C834                            ; ---------------------------------------------------------------------------
0000C834                            
0000C834                            Obj7E:					; XREF: Obj_Index
0000C834 7000                       		moveq	#0,d0
0000C836 1028 0024                  		move.b	$24(a0),d0
0000C83A 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C83E 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C842                            ; ===========================================================================
0000C842 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C844 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C846 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C848 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C84A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C84C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C84E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C850 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C852 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C854 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C856 0000                       		dc.w loc_C91A-Obj7E_Index
0000C858                            ; ===========================================================================
0000C858                            
0000C858                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C858 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C85C 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C85E 4E75                       		rts	
0000C860                            ; ===========================================================================
0000C860                            
0000C860                            Obj7E_Main:
0000C860 2248                       		movea.l	a0,a1
0000C862 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C868 7203                       		moveq	#3,d1
0000C86A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C870 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C872 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C874                            
0000C874                            Obj7E_Loop:
0000C874 12BC 007E                  		move.b	#$7E,0(a1)
0000C878 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C87C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C880 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C884 135A 0024                  		move.b	(a2)+,$24(a1)
0000C888 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C88C 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C894 337C 8580 0002             		move.w	#$8580,2(a1)
0000C89A 137C 0000 0001             		move.b	#0,1(a1)
0000C8A0 43E9 0040                  		lea	$40(a1),a1
0000C8A4 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C8A8                            
0000C8A8 7007                       		moveq	#7,d0
0000C8AA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C8AE 6700                       		beq.s	loc_C842
0000C8B0 7000                       		moveq	#0,d0
0000C8B2 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C8B6 6600                       		bne.s	loc_C842	; if not, branch
0000C8B8 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C8BA 317C 0018 0008             		move.w	#$18,8(a0)
0000C8C0 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C8C6                            
0000C8C6                            loc_C842:
0000C8C6 1140 001A                  		move.b	d0,$1A(a0)
0000C8CA                            
0000C8CA                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C8CA 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8CC 3028 0030                  		move.w	$30(a0),d0
0000C8D0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C8D4 6700                       		beq.s	loc_C86C	; if yes, branch
0000C8D6 6C00                       		bge.s	Obj7E_Move
0000C8D8 4441                       		neg.w	d1
0000C8DA                            
0000C8DA                            Obj7E_Move:
0000C8DA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8DE                            
0000C8DE                            loc_C85A:				; XREF: loc_C86C
0000C8DE 3028 0008                  		move.w	8(a0),d0
0000C8E2 6B00                       		bmi.s	locret_C86A
0000C8E4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8E8 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C8EA 6000 0000                  		bra.w	DisplaySprite
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            locret_C86A:
0000C8EE 4E75                       		rts	
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C8F0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C8F6 66E6                       		bne.s	loc_C85A
0000C8F8 5428 0024                  		addq.b	#2,$24(a0)
0000C8FC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C902 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C908                            
0000C908                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C908 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C90C 6600                       		bne.s	Obj7E_Display
0000C90E 5428 0024                  		addq.b	#2,$24(a0)
0000C912                            
0000C912                            Obj7E_Display:
0000C912 6000 0000                  		bra.w	DisplaySprite
0000C916                            ; ===========================================================================
0000C916                            
0000C916                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C916 6100 0000                  		bsr.w	DisplaySprite
0000C91A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C920 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C924 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C926 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C92C 700A                       		moveq	#10,d0		; add 10 to score
0000C92E 4EB9 0000 0000             		jsr	AddPoints
0000C934 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C938 0200 0003                  		andi.b	#3,d0
0000C93C 6600                       		bne.s	locret_C8EA
0000C93E 303C 00CD                  		move.w	#$CD,d0
0000C942 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C948                            ; ===========================================================================
0000C948                            
0000C948                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C948 303C 00C5                  		move.w	#$C5,d0
0000C94C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C952 5428 0024                  		addq.b	#2,$24(a0)
0000C956 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C95C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C962 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C964 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C96A 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C96E                            
0000C96E                            locret_C8EA:
0000C96E 4E75                       		rts	
0000C970                            ; ===========================================================================
0000C970                            
0000C970                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C970 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C976 6000 0000                  		bra.w	DisplaySprite
0000C97A                            ; ===========================================================================
0000C97A                            
0000C97A                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C97A 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C980 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C986 303C 00BF                  		move.w	#$BF,d0
0000C98A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play continues music
0000C990 5428 0024                  		addq.b	#2,$24(a0)
0000C994 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C99A 6000 0000                  		bra.w	DisplaySprite
0000C99E                            ; ===========================================================================
0000C99E                            
0000C99E                            loc_C91A:				; XREF: Obj7E_Index
0000C99E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9A2 0200 000F                  		andi.b	#$F,d0
0000C9A6 6600                       		bne.s	Obj7E_Display2
0000C9A8 0868 0000 001A             		bchg	#0,$1A(a0)
0000C9AE                            
0000C9AE                            Obj7E_Display2:
0000C9AE 6000 0000                  		bra.w	DisplaySprite
0000C9B2                            ; ===========================================================================
0000C9B2 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C9B8 0200                       		dc.b 2,	0		; rountine number, frame number
0000C9BA 0320 0120 0118             		dc.w $320, $120, $118
0000C9C0 0201                       		dc.b 2,	1
0000C9C2 0360 0120 0128             		dc.w $360, $120, $128
0000C9C8 0202                       		dc.b 2,	2
0000C9CA 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000C9D0 0203                       		dc.b 2,	3
0000C9D2 03A0 0120 0138             		dc.w $3A0, $120, $138
0000C9D8 0206                       		dc.b 2,	6
0000C9DA                            ; ===========================================================================
0000C9DA                            ; ---------------------------------------------------------------------------
0000C9DA                            ; Object 7F - chaos emeralds from the special stage results screen
0000C9DA                            ; ---------------------------------------------------------------------------
0000C9DA                            
0000C9DA                            Obj7F:					; XREF: Obj_Index
0000C9DA 7000                       		moveq	#0,d0
0000C9DC 1028 0024                  		move.b	$24(a0),d0
0000C9E0 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000C9E4 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000C9E8                            ; ===========================================================================
0000C9E8 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000C9EA 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000C9EC                            
0000C9EC                            ; ---------------------------------------------------------------------------
0000C9EC                            ; X-axis positions for chaos emeralds
0000C9EC                            ; ---------------------------------------------------------------------------
0000C9EC 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000C9F8                            ; ===========================================================================
0000C9F8                            
0000C9F8                            Obj7F_Main:				; XREF: Obj7F_Index
0000C9F8 2248                       		movea.l	a0,a1
0000C9FA 45F9 0000 C9EC             		lea	(Obj7F_PosData).l,a2
0000CA00 7400                       		moveq	#0,d2
0000CA02 7200                       		moveq	#0,d1
0000CA04 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CA08 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CA0A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CA0E                            
0000CA0E                            Obj7F_Loop:
0000CA0E 12BC 007F                  		move.b	#$7F,0(a1)
0000CA12 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CA16 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CA1C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CA20 1633 2000                  		move.b	(a3,d2.w),d3
0000CA24 1343 001A                  		move.b	d3,$1A(a1)
0000CA28 1343 001C                  		move.b	d3,$1C(a1)
0000CA2C 5202                       		addq.b	#1,d2
0000CA2E 5429 0024                  		addq.b	#2,$24(a1)
0000CA32 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CA3A 337C 8541 0002             		move.w	#$8541,2(a1)
0000CA40 137C 0000 0001             		move.b	#0,1(a1)
0000CA46 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA4A 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CA4E                            
0000CA4E                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CA4E 1028 001A                  		move.b	$1A(a0),d0
0000CA52 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CA58 0C00 0006                  		cmpi.b	#6,d0
0000CA5C 6600                       		bne.s	Obj7F_Display
0000CA5E 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CA64                            
0000CA64                            Obj7F_Display:
0000CA64 6000 0000                  		bra.w	DisplaySprite
0000CA68                            ; ===========================================================================
0000CA68                            ; ---------------------------------------------------------------------------
0000CA68                            ; Sprite mappings - zone title cards
0000CA68                            ; ---------------------------------------------------------------------------
0000CA68 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CA6A 0000                       		dc.w byte_CA2C-Map_obj34
0000CA6C 0000                       		dc.w byte_CA5A-Map_obj34
0000CA6E 0000                       		dc.w byte_CA7A-Map_obj34
0000CA70 0000                       		dc.w byte_CAA8-Map_obj34
0000CA72 0000                       		dc.w byte_CADC-Map_obj34
0000CA74 0000                       		dc.w byte_CB10-Map_obj34
0000CA76 0000                       		dc.w byte_CB26-Map_obj34
0000CA78 0000                       		dc.w byte_CB31-Map_obj34
0000CA7A 0000                       		dc.w byte_CB3C-Map_obj34
0000CA7C 0000                       		dc.w byte_CB47-Map_obj34
0000CA7E 0000                       		dc.w byte_CB8A-Map_obj34
0000CA80 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CA81 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CA86 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CA8B F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CA90 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CA95 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CA9A F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CA9F F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CAA4 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CAA9 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CAAE F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CAB3 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CAB8 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CABD 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CABE F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CAC3 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CAC8 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CACD F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CAD2 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CAD7 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CADC F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CAE1 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CAE6 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CAEB F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CAF0 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CAF5 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CAFA F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CAFF F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CB04 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CB09 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CB0E F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CB13 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CB18 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CB1D F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CB22 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CB27 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CB2C 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CB2D F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CB32 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CB37 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CB3C F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CB41 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CB46 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CB47 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CB4C F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CB51 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CB56 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CB5B F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CB60 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CB65 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CB6A F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CB6F F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CB74 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CB79 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CB7E F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CB83 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CB88 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CB8D F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CB92 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CB97 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CB9C 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CB9D F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CBA2 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CBA7 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CBAC F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CBB1 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CBB6 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CBBB F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CBC0 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CBC5 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CBCA F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CBCF F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000CBD4 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000CBD9 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000CBDE F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000CBE3 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000CBE8 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000CBED F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000CBF2 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000CBF7 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000CBFC F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000CC01 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000CC06 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000CC07 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000CC0C F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000CC11 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000CC16 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CC1B F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000CC20 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CC25 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000CC2A 04                         byte_CB10:	dc.b 4			; ZONE
0000CC2B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CC30 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CC35 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CC3A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CC3F 00                         		dc.b 0
0000CC40 02                         byte_CB26:	dc.b 2			; ACT 1
0000CC41 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC46 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CC4B 02                         byte_CB31:	dc.b 2			; ACT 2
0000CC4C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC51 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CC56 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CC57 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC5C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CC61 0D                         byte_CB47:	dc.b $D			; Oval
0000CC62 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CC67 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CC6C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CC71 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CC76 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CC7B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CC80 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CC85 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CC8A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CC8F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CC94 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CC99 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CC9E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CCA3 00                         		dc.b 0
0000CCA4 05                         byte_CB8A:	dc.b 5			; FINAL
0000CCA5 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CCAA F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CCAF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CCB4 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CCB9 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CCBE                            		even
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            Map_obj39:
0000CCBE                            	include "_maps\obj39.asm"
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE 0000                       		dc.w byte_CBAC-Map_obj39
0000CCC0 0000                       		dc.w byte_CBB7-Map_obj39
0000CCC2 0000                       		dc.w byte_CBC2-Map_obj39
0000CCC4 0000                       		dc.w byte_CBCD-Map_obj39
0000CCC6 02                         byte_CBAC:	dc.b 2
0000CCC7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CCCC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CCD1 02                         byte_CBB7:	dc.b 2
0000CCD2 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CCD7 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CCDC 02                         byte_CBC2:	dc.b 2
0000CCDD F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CCE2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CCE7 02                         byte_CBCD:	dc.b 2
0000CCE8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CCED F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CCF2                            		even
0000CCF2                            		even
0000CCF2                            
0000CCF2                            ; ---------------------------------------------------------------------------
0000CCF2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CCF2                            ; ---------------------------------------------------------------------------
0000CCF2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CCF4 0000                       		dc.w byte_CC13-Map_obj3A
0000CCF6 0000                       		dc.w byte_CC32-Map_obj3A
0000CCF8 0000                       		dc.w byte_CC51-Map_obj3A
0000CCFA 0000                       		dc.w byte_CC75-Map_obj3A
0000CCFC FF6F                       		dc.w byte_CB47-Map_obj3A
0000CCFE FF4E                       		dc.w byte_CB26-Map_obj3A
0000CD00 FF59                       		dc.w byte_CB31-Map_obj3A
0000CD02 FF64                       		dc.w byte_CB3C-Map_obj3A
0000CD04 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000CD05 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000CD0A F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000CD0F F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000CD14 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000CD19 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000CD1E F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000CD23 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000CD28 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000CD2D F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000CD32 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000CD37 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000CD3C F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000CD41 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000CD46 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000CD4B F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000CD50 06                         byte_CC13:	dc.b 6			; PASSED
0000CD51 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CD56 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CD5B F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CD60 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CD65 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CD6A F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CD6F 06                         byte_CC32:	dc.b 6			; SCORE
0000CD70 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CD75 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CD7A F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CD7F F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CD84 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CD89 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CD8E 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CD8F F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CD94 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CD99 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CD9E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDA3 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDA8 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CDAD F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDB2 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CDB3 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CDB8 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDBD F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDC2 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDC7 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDCC F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CDD1 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDD6                            		even
0000CDD6                            ; ---------------------------------------------------------------------------
0000CDD6                            ; Sprite mappings - special stage results screen
0000CDD6                            ; ---------------------------------------------------------------------------
0000CDD6 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CDD8 0000                       		dc.w byte_CCEE-Map_obj7E
0000CDDA 0000                       		dc.w byte_CD0D-Map_obj7E
0000CDDC FE8B                       		dc.w byte_CB47-Map_obj7E
0000CDDE 0000                       		dc.w byte_CD31-Map_obj7E
0000CDE0 0000                       		dc.w byte_CD46-Map_obj7E
0000CDE2 0000                       		dc.w byte_CD5B-Map_obj7E
0000CDE4 0000                       		dc.w byte_CD6B-Map_obj7E
0000CDE6 0000                       		dc.w byte_CDA8-Map_obj7E
0000CDE8 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CDE9 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CDEE F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CDF3 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CDF8 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CDFD F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CE02 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CE07 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CE0C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CE11 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CE16 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CE1B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CE20 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CE25 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CE2A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CE2B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CE30 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CE35 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CE3A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CE3F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CE44 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CE49 07                         byte_CD0D:	dc.b 7
0000CE4A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CE4F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CE54 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CE59 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CE5E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CE63 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CE68 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CE6D 04                         byte_CD31:	dc.b 4
0000CE6E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE73 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE78 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE7D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CE82 04                         byte_CD46:	dc.b 4
0000CE83 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE88 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE8D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE92 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CE97 03                         byte_CD5B:	dc.b 3
0000CE98 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE9D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CEA2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CEA7 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CEA8 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CEAD F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CEB2 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CEB7 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CEBC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CEC1 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CEC6 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CECB F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CED0 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CED5 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CEDA F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CEDF F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CEE4 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CEE5 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CEEA F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CEEF F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CEF4 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CEF9 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CEFE F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CF03 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CF08 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CF0D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CF12 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CF17 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CF1C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CF21 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CF26 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CF2B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CF30                            		even
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30                            Map_obj7F:
0000CF30                            	include "_maps\obj7F.asm"
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30 0000                       		dc.w byte_CE02-Map_obj7F
0000CF32 0000                       		dc.w byte_CE08-Map_obj7F
0000CF34 0000                       		dc.w byte_CE0E-Map_obj7F
0000CF36 0000                       		dc.w byte_CE14-Map_obj7F
0000CF38 0000                       		dc.w byte_CE1A-Map_obj7F
0000CF3A 0000                       		dc.w byte_CE20-Map_obj7F
0000CF3C 0000                       		dc.w byte_CE26-Map_obj7F
0000CF3E 01                         byte_CE02:	dc.b 1
0000CF3F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CF44 01                         byte_CE08:	dc.b 1
0000CF45 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF4A 01                         byte_CE0E:	dc.b 1
0000CF4B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CF50 01                         byte_CE14:	dc.b 1
0000CF51 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CF56 01                         byte_CE1A:	dc.b 1
0000CF57 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CF5C 01                         byte_CE20:	dc.b 1
0000CF5D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CF62 00                         byte_CE26:	dc.b 0			; Blank frame
0000CF64 00                         		even
0000CF64 00                         		even
0000CF64                            
0000CF64                            ; ===========================================================================
0000CF64                            ; ---------------------------------------------------------------------------
0000CF64                            ; Object 36 - spikes
0000CF64                            ; ---------------------------------------------------------------------------
0000CF64                            
0000CF64                            Obj36:					; XREF: Obj_Index
0000CF64 7000                       		moveq	#0,d0
0000CF66 1028 0024                  		move.b	$24(a0),d0
0000CF6A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CF6E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CF72                            ; ===========================================================================
0000CF72 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CF74 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CF76                            
0000CF76 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CF78 0110                       		dc.b 1,	$10
0000CF7A 0204                       		dc.b 2,	4
0000CF7C 031C                       		dc.b 3,	$1C
0000CF7E 0440                       		dc.b 4,	$40
0000CF80 0510                       		dc.b 5,	$10
0000CF82                            ; ===========================================================================
0000CF82                            
0000CF82                            Obj36_Main:				; XREF: Obj36_Index
0000CF82 5428 0024                  		addq.b	#2,$24(a0)
0000CF86 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CF8E 317C 051B 0002             		move.w	#$51B,2(a0)
0000CF94 0028 0004 0001             		ori.b	#4,1(a0)
0000CF9A 117C 0004 0018             		move.b	#4,$18(a0)
0000CFA0 1028 0028                  		move.b	$28(a0),d0
0000CFA4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CFAA 0240 00F0                  		andi.w	#$F0,d0
0000CFAE 43F9 0000 CF76             		lea	(Obj36_Var).l,a1
0000CFB4 E648                       		lsr.w	#3,d0
0000CFB6 D2C0                       		adda.w	d0,a1
0000CFB8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CFBC 1159 0019                  		move.b	(a1)+,$19(a0)
0000CFC0 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CFC6 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CFCC                            
0000CFCC                            Obj36_Solid:				; XREF: Obj36_Index
0000CFCC 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CFD0 343C 0004                  		move.w	#4,d2
0000CFD4 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CFDA 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CFDC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CFE2 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CFE4 343C 0014                  		move.w	#$14,d2
0000CFE8                            
0000CFE8                            ; Spikes types $1x and $5x face	sideways
0000CFE8                            
0000CFE8                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CFE8 323C 001B                  		move.w	#$1B,d1
0000CFEC 3602                       		move.w	d2,d3
0000CFEE 5243                       		addq.w	#1,d3
0000CFF0 3828 0008                  		move.w	8(a0),d4
0000CFF4 6100 0000                  		bsr.w	SolidObject
0000CFF8 0828 0003 0022             		btst	#3,$22(a0)
0000CFFE 6600                       		bne.s	Obj36_Display
0000D000 0C44 0001                  		cmpi.w	#1,d4
0000D004 6700                       		beq.s	Obj36_Hurt
0000D006 6000                       		bra.s	Obj36_Display
0000D008                            ; ===========================================================================
0000D008                            
0000D008                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D008                            
0000D008                            Obj36_Upright:				; XREF: Obj36_Solid
0000D008 7200                       		moveq	#0,d1
0000D00A 1228 0019                  		move.b	$19(a0),d1
0000D00E 0641 000B                  		addi.w	#$B,d1
0000D012 343C 0010                  		move.w	#$10,d2
0000D016 363C 0011                  		move.w	#$11,d3
0000D01A 3828 0008                  		move.w	8(a0),d4
0000D01E 6100 0000                  		bsr.w	SolidObject
0000D022 0828 0003 0022             		btst	#3,$22(a0)
0000D028 6600                       		bne.s	Obj36_Hurt
0000D02A 4A44                       		tst.w	d4
0000D02C 6A00                       		bpl.s	Obj36_Display
0000D02E                            
0000D02E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D02E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D032 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D034 2F08                       		move.l	a0,-(sp)
0000D036 2448                       		movea.l	a0,a2
0000D038 41F8 D000                  		lea	($FFFFD000).w,a0
0000D03C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D042 6400                       		bcc.s	loc_CF20
0000D044 2628 000C                  		move.l	$C(a0),d3
0000D048 3028 0012                  		move.w	$12(a0),d0
0000D04C 48C0                       		ext.l	d0
0000D04E E180                       		asl.l	#8,d0
0000D050 9680                       		sub.l	d0,d3
0000D052 2143 000C                  		move.l	d3,$C(a0)
0000D056 4EB9 0000 0000             		jsr	HurtSonic
0000D05C                            
0000D05C                            loc_CF20:
0000D05C 205F                       		movea.l	(sp)+,a0
0000D05E                            
0000D05E                            Obj36_Display:
0000D05E 6100 0000                  		bsr.w	DisplaySprite
0000D062 3028 0030                  		move.w	$30(a0),d0
0000D066 0240 FF80                  		andi.w	#$FF80,d0
0000D06A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D06E 0441 0080                  		subi.w	#$80,d1
0000D072 0241 FF80                  		andi.w	#$FF80,d1
0000D076 9041                       		sub.w	d1,d0
0000D078 0C40 0280                  		cmpi.w	#$280,d0
0000D07C 6200 0000                  		bhi.w	DeleteObject
0000D080 4E75                       		rts	
0000D082                            ; ===========================================================================
0000D082                            
0000D082                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D082 7000                       		moveq	#0,d0
0000D084 1028 0028                  		move.b	$28(a0),d0
0000D088 D040                       		add.w	d0,d0
0000D08A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D08E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D092                            ; ===========================================================================
0000D092 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D094 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D096 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D098                            ; ===========================================================================
0000D098                            
0000D098                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D098 4E75                       		rts			; don't move the object
0000D09A                            ; ===========================================================================
0000D09A                            
0000D09A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D09A 6100 0000                  		bsr.w	Obj36_Wait
0000D09E 7000                       		moveq	#0,d0
0000D0A0 1028 0034                  		move.b	$34(a0),d0
0000D0A4 D068 0032                  		add.w	$32(a0),d0
0000D0A8 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D0AC 4E75                       		rts	
0000D0AE                            ; ===========================================================================
0000D0AE                            
0000D0AE                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D0AE 6100 0000                  		bsr.w	Obj36_Wait
0000D0B2 7000                       		moveq	#0,d0
0000D0B4 1028 0034                  		move.b	$34(a0),d0
0000D0B8 D068 0030                  		add.w	$30(a0),d0
0000D0BC 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D0C0 4E75                       		rts	
0000D0C2                            ; ===========================================================================
0000D0C2                            
0000D0C2                            Obj36_Wait:
0000D0C2 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D0C6 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D0C8 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D0CC 6600                       		bne.s	locret_CFE6
0000D0CE 4A28 0001                  		tst.b	1(a0)
0000D0D2 6A00                       		bpl.s	locret_CFE6
0000D0D4 303C 00B6                  		move.w	#$B6,d0
0000D0D8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D0DE 6000                       		bra.s	locret_CFE6
0000D0E0                            ; ===========================================================================
0000D0E0                            
0000D0E0                            loc_CFA4:
0000D0E0 4A68 0036                  		tst.w	$36(a0)
0000D0E4 6700                       		beq.s	loc_CFC6
0000D0E6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D0EC 6400                       		bcc.s	locret_CFE6
0000D0EE 317C 0000 0034             		move.w	#0,$34(a0)
0000D0F4 317C 0000 0036             		move.w	#0,$36(a0)
0000D0FA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D100 6000                       		bra.s	locret_CFE6
0000D102                            ; ===========================================================================
0000D102                            
0000D102                            loc_CFC6:
0000D102 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D108 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D10E 6500                       		bcs.s	locret_CFE6
0000D110 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D116 317C 0001 0036             		move.w	#1,$36(a0)
0000D11C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D122                            
0000D122                            locret_CFE6:
0000D122 4E75                       		rts	
0000D124                            ; ===========================================================================
0000D124                            ; ---------------------------------------------------------------------------
0000D124                            ; Sprite mappings - spikes
0000D124                            ; ---------------------------------------------------------------------------
0000D124                            Map_obj36:
0000D124                            	include "_maps\obj36.asm"
0000D124                            ; ---------------------------------------------------------------------------
0000D124                            ; Sprite mappings - spikes
0000D124                            ; ---------------------------------------------------------------------------
0000D124 0000                       		dc.w byte_CFF4-Map_obj36
0000D126 0000                       		dc.w byte_D004-Map_obj36
0000D128 0000                       		dc.w byte_D014-Map_obj36
0000D12A 0000                       		dc.w byte_D01A-Map_obj36
0000D12C 0000                       		dc.w byte_D02A-Map_obj36
0000D12E 0000                       		dc.w byte_D049-Map_obj36
0000D130 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D131 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D136 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D13B F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D140 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D141 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D146 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D14B 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D150 01                         byte_D014:	dc.b 1			; 1 spike
0000D151 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D156 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D157 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D15C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D161 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D166 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D167 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D16C F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D171 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D176 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D17B F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D180 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D185 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D186 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D18C 00                         		even
0000D18C 00                         		even
0000D18C                            
0000D18C                            ; ===========================================================================
0000D18C                            ; ---------------------------------------------------------------------------
0000D18C                            ; Object 3B - purple rock (GHZ)
0000D18C                            ; ---------------------------------------------------------------------------
0000D18C                            
0000D18C                            Obj3B:					; XREF: Obj_Index
0000D18C 7000                       		moveq	#0,d0
0000D18E 1028 0024                  		move.b	$24(a0),d0
0000D192 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D196 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D19A                            ; ===========================================================================
0000D19A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D19C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D19E                            ; ===========================================================================
0000D19E                            
0000D19E                            Obj3B_Main:				; XREF: Obj3B_Index
0000D19E 5428 0024                  		addq.b	#2,$24(a0)
0000D1A2 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D1AA 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D1B0 117C 0004 0001             		move.b	#4,1(a0)
0000D1B6 117C 0013 0019             		move.b	#$13,$19(a0)
0000D1BC 117C 0004 0018             		move.b	#4,$18(a0)
0000D1C2                            
0000D1C2                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D1C2 323C 001B                  		move.w	#$1B,d1
0000D1C6 343C 0010                  		move.w	#$10,d2
0000D1CA 363C 0010                  		move.w	#$10,d3
0000D1CE 3828 0008                  		move.w	8(a0),d4
0000D1D2 6100 0000                  		bsr.w	SolidObject
0000D1D6 6100 0000                  		bsr.w	DisplaySprite
0000D1DA 3028 0008                  		move.w	8(a0),d0
0000D1DE 0240 FF80                  		andi.w	#$FF80,d0
0000D1E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D1E6 0441 0080                  		subi.w	#$80,d1
0000D1EA 0241 FF80                  		andi.w	#$FF80,d1
0000D1EE 9041                       		sub.w	d1,d0
0000D1F0 0C40 0280                  		cmpi.w	#$280,d0
0000D1F4 6200 0000                  		bhi.w	DeleteObject
0000D1F8 4E75                       		rts	
0000D1FA                            ; ===========================================================================
0000D1FA                            ; ---------------------------------------------------------------------------
0000D1FA                            ; Object 49 - waterfall	sound effect (GHZ)
0000D1FA                            ; ---------------------------------------------------------------------------
0000D1FA                            
0000D1FA                            Obj49:					; XREF: Obj_Index
0000D1FA 7000                       		moveq	#0,d0
0000D1FC 1028 0024                  		move.b	$24(a0),d0
0000D200 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D204 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D208                            ; ===========================================================================
0000D208 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D20A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D20C                            ; ===========================================================================
0000D20C                            
0000D20C                            Obj49_Main:				; XREF: Obj49_Index
0000D20C 5428 0024                  		addq.b	#2,$24(a0)
0000D210 117C 0004 0001             		move.b	#4,1(a0)
0000D216                            
0000D216                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D216 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D21A 0200 003F                  		andi.b	#$3F,d0
0000D21E 6600                       		bne.s	Obj49_ChkDel
0000D220 303C 00D0                  		move.w	#$D0,d0
0000D224 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D22A                            
0000D22A                            Obj49_ChkDel:
0000D22A 3028 0008                  		move.w	8(a0),d0
0000D22E 0240 FF80                  		andi.w	#$FF80,d0
0000D232 3238 F700                  		move.w	($FFFFF700).w,d1
0000D236 0441 0080                  		subi.w	#$80,d1
0000D23A 0241 FF80                  		andi.w	#$FF80,d1
0000D23E 9041                       		sub.w	d1,d0
0000D240 0C40 0280                  		cmpi.w	#$280,d0
0000D244 6200 0000                  		bhi.w	DeleteObject
0000D248 4E75                       		rts	
0000D24A                            ; ===========================================================================
0000D24A                            ; ---------------------------------------------------------------------------
0000D24A                            ; Sprite mappings - purple rock	(GHZ)
0000D24A                            ; ---------------------------------------------------------------------------
0000D24A                            Map_obj3B:
0000D24A                            	include "_maps\obj3B.asm"
0000D24A                            ; ---------------------------------------------------------------------------
0000D24A                            ; Sprite mappings - purple rock	(GHZ)
0000D24A                            ; ---------------------------------------------------------------------------
0000D24A 0000                       		dc.w byte_D110-Map_obj3B
0000D24C 02                         byte_D110:	dc.b 2
0000D24D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D252 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D258 00                         		even
0000D258 00                         		even
0000D258                            
0000D258                            ; ===========================================================================
0000D258                            ; ---------------------------------------------------------------------------
0000D258                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D258                            ; ---------------------------------------------------------------------------
0000D258                            
0000D258                            Obj3C:					; XREF: Obj_Index
0000D258 7000                       		moveq	#0,d0
0000D25A 1028 0024                  		move.b	$24(a0),d0
0000D25E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D262 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D266 6000 0000                  		bra.w	MarkObjGone
0000D26A                            ; ===========================================================================
0000D26A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D26C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D26E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D270                            ; ===========================================================================
0000D270                            
0000D270                            Obj3C_Main:				; XREF: Obj3C_Index
0000D270 5428 0024                  		addq.b	#2,$24(a0)
0000D274 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D27C 317C 450F 0002             		move.w	#$450F,2(a0)
0000D282 117C 0004 0001             		move.b	#4,1(a0)
0000D288 117C 0010 0019             		move.b	#$10,$19(a0)
0000D28E 117C 0004 0018             		move.b	#4,$18(a0)
0000D294 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D29A                            
0000D29A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D29A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D2A0 323C 001B                  		move.w	#$1B,d1
0000D2A4 343C 0020                  		move.w	#$20,d2
0000D2A8 363C 0020                  		move.w	#$20,d3
0000D2AC 3828 0008                  		move.w	8(a0),d4
0000D2B0 6100 0000                  		bsr.w	SolidObject
0000D2B4 0828 0005 0022             		btst	#5,$22(a0)
0000D2BA 6600                       		bne.s	Obj3C_ChkRoll
0000D2BC                            
0000D2BC                            locret_D180:
0000D2BC 4E75                       		rts	
0000D2BE                            ; ===========================================================================
0000D2BE                            
0000D2BE                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D2BE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D2C4 66F6                       		bne.s	locret_D180	; if not, branch
0000D2C6 3028 0030                  		move.w	$30(a0),d0
0000D2CA 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D2CC 4440                       		neg.w	d0
0000D2CE                            
0000D2CE                            Obj3C_ChkSpeed:
0000D2CE 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D2D2 65E8                       		bcs.s	locret_D180	; if not, branch
0000D2D4 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D2DA 5869 0008                  		addq.w	#4,8(a1)
0000D2DE 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D2E4 3028 0008                  		move.w	8(a0),d0
0000D2E8 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D2EC 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D2EE 5169 0008                  		subq.w	#8,8(a1)
0000D2F2 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D2F8                            
0000D2F8                            Obj3C_Smash:
0000D2F8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D2FE 08A8 0005 0022             		bclr	#5,$22(a0)
0000D304 08A9 0005 0022             		bclr	#5,$22(a1)
0000D30A 7207                       		moveq	#7,d1		; load 8 fragments
0000D30C 343C 0070                  		move.w	#$70,d2
0000D310 6100                       		bsr.s	SmashObject
0000D312                            
0000D312                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D312 6100 0000                  		bsr.w	SpeedToPos
0000D316 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D31C 6100 0000                  		bsr.w	DisplaySprite
0000D320 4A28 0001                  		tst.b	1(a0)
0000D324 6A00 0000                  		bpl.w	DeleteObject
0000D328 4E75                       		rts	
0000D32A                            
0000D32A                            ; ---------------------------------------------------------------------------
0000D32A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D32A                            ; ---------------------------------------------------------------------------
0000D32A                            
0000D32A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D32A                            
0000D32A                            
0000D32A                            SmashObject:				; XREF: Obj3C_Smash
0000D32A 7000                       		moveq	#0,d0
0000D32C 1028 001A                  		move.b	$1A(a0),d0
0000D330 D040                       		add.w	d0,d0
0000D332 2668 0004                  		movea.l	4(a0),a3
0000D336 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D33A 524B                       		addq.w	#1,a3
0000D33C 08E8 0005 0001             		bset	#5,1(a0)
0000D342 1810                       		move.b	0(a0),d4
0000D344 1A28 0001                  		move.b	1(a0),d5
0000D348 2248                       		movea.l	a0,a1
0000D34A 6000                       		bra.s	Smash_LoadFrag
0000D34C                            ; ===========================================================================
0000D34C                            
0000D34C                            Smash_Loop:
0000D34C 6100 0000                  		bsr.w	SingleObjLoad
0000D350 6600                       		bne.s	Smash_PlaySnd
0000D352 5A4B                       		addq.w	#5,a3
0000D354                            
0000D354                            Smash_LoadFrag:				; XREF: SmashObject
0000D354 137C 0004 0024             		move.b	#4,$24(a1)
0000D35A 1284                       		move.b	d4,0(a1)
0000D35C 234B 0004                  		move.l	a3,4(a1)
0000D360 1345 0001                  		move.b	d5,1(a1)
0000D364 3368 0008 0008             		move.w	8(a0),8(a1)
0000D36A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D370 3368 0002 0002             		move.w	2(a0),2(a1)
0000D376 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D37C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D382 335C 0010                  		move.w	(a4)+,$10(a1)
0000D386 335C 0012                  		move.w	(a4)+,$12(a1)
0000D38A B3C8                       		cmpa.l	a0,a1
0000D38C 6400                       		bcc.s	loc_D268
0000D38E 2F08                       		move.l	a0,-(sp)
0000D390 2049                       		movea.l	a1,a0
0000D392 6100 0000                  		bsr.w	SpeedToPos
0000D396 D568 0012                  		add.w	d2,$12(a0)
0000D39A 205F                       		movea.l	(sp)+,a0
0000D39C 6100 0000                  		bsr.w	DisplaySprite2
0000D3A0                            
0000D3A0                            loc_D268:
0000D3A0 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D3A4                            
0000D3A4                            Smash_PlaySnd:
0000D3A4 303C 00CB                  		move.w	#$CB,d0
0000D3A8 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D3AE                            ; End of function SmashObject
0000D3AE                            
0000D3AE                            ; ===========================================================================
0000D3AE                            ; Smashed block	fragment speeds
0000D3AE                            ;
0000D3AE 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D3B2 0600 FF00                  		dc.w $600, $FF00
0000D3B6 0600 0100                  		dc.w $600, $100
0000D3BA 0400 0500                  		dc.w $400, $500
0000D3BE 0600 FA00                  		dc.w $600, $FA00
0000D3C2 0800 FE00                  		dc.w $800, $FE00
0000D3C6 0800 0200                  		dc.w $800, $200
0000D3CA 0600 0600                  		dc.w $600, $600
0000D3CE                            
0000D3CE FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D3D2 F800 FE00                  		dc.w $F800, $FE00
0000D3D6 F800 0200                  		dc.w $F800, $200
0000D3DA FA00 0600                  		dc.w $FA00, $600
0000D3DE FC00 FB00                  		dc.w $FC00, $FB00
0000D3E2 FA00 FF00                  		dc.w $FA00, $FF00
0000D3E6 FA00 0100                  		dc.w $FA00, $100
0000D3EA FC00 0500                  		dc.w $FC00, $500
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            Map_obj3C:
0000D3EE                            	include "_maps\obj3C.asm"
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE 0000                       		dc.w byte_D2BC-Map_obj3C
0000D3F0 0000                       		dc.w byte_D2E5-Map_obj3C
0000D3F2 0000                       		dc.w byte_D30E-Map_obj3C
0000D3F4 08                         byte_D2BC:	dc.b 8
0000D3F5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D3FA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D3FF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D404 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D409 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D40E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D413 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D418 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D41D 08                         byte_D2E5:	dc.b 8
0000D41E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D423 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D428 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D42D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D432 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D437 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D43C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D441 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D446 08                         byte_D30E:	dc.b 8
0000D447 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D44C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D451 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D456 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D45B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D460 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D465 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D46A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D470 00                         		even
0000D470 00                         		even
0000D470                            
0000D470                            ; ---------------------------------------------------------------------------
0000D470                            ; Object code loading subroutine
0000D470                            ; ---------------------------------------------------------------------------
0000D470                            
0000D470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D470                            
0000D470                            
0000D470                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D470 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D474 7E7F                       		moveq	#$7F,d7
0000D476 7000                       		moveq	#0,d0
0000D478 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D47E 6400                       		bcc.s	loc_D362
0000D480                            
0000D480                            loc_D348:
0000D480 1010                       		move.b	(a0),d0		; load object number from RAM
0000D482 6700                       		beq.s	loc_D358
0000D484 D040                       		add.w	d0,d0
0000D486 D040                       		add.w	d0,d0
0000D488 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D48C 4E91                       		jsr	(a1)		; run the object's code
0000D48E 7000                       		moveq	#0,d0
0000D490                            
0000D490                            loc_D358:
0000D490 41E8 0040                  		lea	$40(a0),a0	; next object
0000D494 51CF FFEA                  		dbf	d7,loc_D348
0000D498 4E75                       		rts	
0000D49A                            ; ===========================================================================
0000D49A                            
0000D49A                            loc_D362:
0000D49A 7E1F                       		moveq	#$1F,d7
0000D49C 61E2                       		bsr.s	loc_D348
0000D49E 7E5F                       		moveq	#$5F,d7
0000D4A0                            
0000D4A0                            loc_D368:
0000D4A0 7000                       		moveq	#0,d0
0000D4A2 1010                       		move.b	(a0),d0
0000D4A4 6700                       		beq.s	loc_D378
0000D4A6 4A28 0001                  		tst.b	1(a0)
0000D4AA 6A00                       		bpl.s	loc_D378
0000D4AC 6100 0000                  		bsr.w	DisplaySprite
0000D4B0                            
0000D4B0                            loc_D378:
0000D4B0 41E8 0040                  		lea	$40(a0),a0
0000D4B4                            
0000D4B4                            loc_D37C:
0000D4B4 51CF FFEA                  		dbf	d7,loc_D368
0000D4B8 4E75                       		rts	
0000D4BA                            ; End of function ObjectsLoad
0000D4BA                            
0000D4BA                            ; ===========================================================================
0000D4BA                            ; ---------------------------------------------------------------------------
0000D4BA                            ; Object pointers
0000D4BA                            ; ---------------------------------------------------------------------------
0000D4BA                            Obj_Index:
0000D4BA                            	include "_inc\Object pointers.asm"
0000D4BA                            ; ---------------------------------------------------------------------------
0000D4BA                            ; Object pointers
0000D4BA                            ; ---------------------------------------------------------------------------
0000D4BA 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D4CA 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D4DA 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D4EA 0000 0000 0000 A6F2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D4FA 0000 7432 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D50A 0000 7A58 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D51A 0000 82A6 0000 830E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D52A 0000 8958 0000 8C46 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D53A 0000 0000 0000 98CA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D54A 0000 9C02 0000 A1EE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D55A 0000 9502 0000 8A2E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D56A 0000 AD3A 0000 A3D4 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D57A 0000 B70C 0000 BDBA 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D58A 0000 B270 0000 CF64 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D59A 0000 C540 0000 C5FA 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D5AA 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D5BA 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D5CA 0000 BA28 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D5DA 0000 D1FA 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D5EA 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D5FA 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D60A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D61A 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D62A 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D63A 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D64A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D65A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D66A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D67A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D68A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D69A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D6AA 0000 0000 0000 C834 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D6BA 0000 4F52 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D6CA 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D6DA 0000 560C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D6DA 0000 560C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D6EA                            
0000D6EA                            ; ---------------------------------------------------------------------------
0000D6EA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D6EA                            ; ---------------------------------------------------------------------------
0000D6EA                            
0000D6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6EA                            
0000D6EA                            
0000D6EA                            ObjectFall:
0000D6EA 2428 0008                  		move.l	8(a0),d2
0000D6EE 2628 000C                  		move.l	$C(a0),d3
0000D6F2 3028 0010                  		move.w	$10(a0),d0
0000D6F6 48C0                       		ext.l	d0
0000D6F8 E180                       		asl.l	#8,d0
0000D6FA D480                       		add.l	d0,d2
0000D6FC 3028 0012                  		move.w	$12(a0),d0
0000D700 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D706 48C0                       		ext.l	d0
0000D708 E180                       		asl.l	#8,d0
0000D70A D680                       		add.l	d0,d3
0000D70C 2142 0008                  		move.l	d2,8(a0)
0000D710 2143 000C                  		move.l	d3,$C(a0)
0000D714 4E75                       		rts	
0000D716                            ; End of function ObjectFall
0000D716                            
0000D716                            ; ---------------------------------------------------------------------------
0000D716                            ; Subroutine translating object	speed to update	object position
0000D716                            ; ---------------------------------------------------------------------------
0000D716                            
0000D716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D716                            
0000D716                            
0000D716                            SpeedToPos:
0000D716 2428 0008                  		move.l	8(a0),d2
0000D71A 2628 000C                  		move.l	$C(a0),d3
0000D71E 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D722 48C0                       		ext.l	d0
0000D724 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D726 D480                       		add.l	d0,d2		; add to x-axis	position
0000D728 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D72C 48C0                       		ext.l	d0
0000D72E E180                       		asl.l	#8,d0		; multiply by $100
0000D730 D680                       		add.l	d0,d3		; add to y-axis	position
0000D732 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D736 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D73A 4E75                       		rts	
0000D73C                            ; End of function SpeedToPos
0000D73C                            
0000D73C                            ; ---------------------------------------------------------------------------
0000D73C                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D73C                            ; ---------------------------------------------------------------------------
0000D73C                            
0000D73C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D73C                            
0000D73C                            
0000D73C                            DisplaySprite:
0000D73C 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D740 3028 0018                  		move.w	$18(a0),d0
0000D744 E248                       		lsr.w	#1,d0
0000D746 0240 0380                  		andi.w	#$380,d0
0000D74A D2C0                       		adda.w	d0,a1
0000D74C 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D750 6400                       		bcc.s	locret_D620
0000D752 5451                       		addq.w	#2,(a1)
0000D754 D2D1                       		adda.w	(a1),a1
0000D756 3288                       		move.w	a0,(a1)
0000D758                            
0000D758                            locret_D620:
0000D758 4E75                       		rts	
0000D75A                            ; End of function DisplaySprite
0000D75A                            
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            
0000D75A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D75A                            
0000D75A                            
0000D75A                            DisplaySprite2:
0000D75A 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D75E 3029 0018                  		move.w	$18(a1),d0
0000D762 E248                       		lsr.w	#1,d0
0000D764 0240 0380                  		andi.w	#$380,d0
0000D768 D4C0                       		adda.w	d0,a2
0000D76A 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D76E 6400                       		bcc.s	locret_D63E
0000D770 5452                       		addq.w	#2,(a2)
0000D772 D4D2                       		adda.w	(a2),a2
0000D774 3489                       		move.w	a1,(a2)
0000D776                            
0000D776                            locret_D63E:
0000D776 4E75                       		rts	
0000D778                            ; End of function DisplaySprite2
0000D778                            
0000D778                            ; ---------------------------------------------------------------------------
0000D778                            ; Subroutine to	delete an object
0000D778                            ; ---------------------------------------------------------------------------
0000D778                            
0000D778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D778                            
0000D778                            
0000D778                            DeleteObject:
0000D778 2248                       		movea.l	a0,a1
0000D77A                            
0000D77A                            DeleteObject2:
0000D77A 7200                       		moveq	#0,d1
0000D77C 700F                       		moveq	#$F,d0
0000D77E                            
0000D77E                            loc_D646:
0000D77E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D780 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D784 4E75                       		rts	
0000D786                            ; End of function DeleteObject
0000D786                            
0000D786                            ; ===========================================================================
0000D786 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D78A 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D78E 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D792 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            
0000D796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D796                            
0000D796                            
0000D796                            BuildSprites:				; XREF: TitleScreen; et al
0000D796 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D79A 7A00                       		moveq	#0,d5
0000D79C 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D7A0 7E07                       		moveq	#7,d7
0000D7A2                            
0000D7A2                            loc_D66A:
0000D7A2 4A54                       		tst.w	(a4)
0000D7A4 6700 0000                  		beq.w	loc_D72E
0000D7A8 7C02                       		moveq	#2,d6
0000D7AA                            
0000D7AA                            loc_D672:
0000D7AA 3074 6000                  		movea.w	(a4,d6.w),a0
0000D7AE 4A10                       		tst.b	(a0)
0000D7B0 6700 0000                  		beq.w	loc_D726
0000D7B4 08A8 0007 0001             		bclr	#7,1(a0)
0000D7BA 1028 0001                  		move.b	1(a0),d0
0000D7BE 1800                       		move.b	d0,d4
0000D7C0 0240 000C                  		andi.w	#$C,d0
0000D7C4 6700                       		beq.s	loc_D6DE
0000D7C6 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D7CA 7000                       		moveq	#0,d0
0000D7CC 1028 0019                  		move.b	$19(a0),d0
0000D7D0 3628 0008                  		move.w	8(a0),d3
0000D7D4 9651                       		sub.w	(a1),d3
0000D7D6 3203                       		move.w	d3,d1
0000D7D8 D240                       		add.w	d0,d1
0000D7DA 6B00 0000                  		bmi.w	loc_D726
0000D7DE 3203                       		move.w	d3,d1
0000D7E0 9240                       		sub.w	d0,d1
0000D7E2 0C41 0140                  		cmpi.w	#$140,d1
0000D7E6 6C00                       		bge.s	loc_D726
0000D7E8 0643 0080                  		addi.w	#$80,d3
0000D7EC 0804 0004                  		btst	#4,d4
0000D7F0 6700                       		beq.s	loc_D6E8
0000D7F2 7000                       		moveq	#0,d0
0000D7F4 1028 0016                  		move.b	$16(a0),d0
0000D7F8 3428 000C                  		move.w	$C(a0),d2
0000D7FC 9469 0004                  		sub.w	4(a1),d2
0000D800 3202                       		move.w	d2,d1
0000D802 D240                       		add.w	d0,d1
0000D804 6B00                       		bmi.s	loc_D726
0000D806 3202                       		move.w	d2,d1
0000D808 9240                       		sub.w	d0,d1
0000D80A 0C41 00E0                  		cmpi.w	#$E0,d1
0000D80E 6C00                       		bge.s	loc_D726
0000D810 0642 0080                  		addi.w	#$80,d2
0000D814 6000                       		bra.s	loc_D700
0000D816                            ; ===========================================================================
0000D816                            
0000D816                            loc_D6DE:
0000D816 3428 000A                  		move.w	$A(a0),d2
0000D81A 3628 0008                  		move.w	8(a0),d3
0000D81E 6000                       		bra.s	loc_D700
0000D820                            ; ===========================================================================
0000D820                            
0000D820                            loc_D6E8:
0000D820 3428 000C                  		move.w	$C(a0),d2
0000D824 9469 0004                  		sub.w	4(a1),d2
0000D828 0642 0080                  		addi.w	#$80,d2
0000D82C 0C42 0060                  		cmpi.w	#$60,d2
0000D830 6500                       		bcs.s	loc_D726
0000D832 0C42 0180                  		cmpi.w	#$180,d2
0000D836 6400                       		bcc.s	loc_D726
0000D838                            
0000D838                            loc_D700:
0000D838 2268 0004                  		movea.l	4(a0),a1
0000D83C 7200                       		moveq	#0,d1
0000D83E 0804 0005                  		btst	#5,d4
0000D842 6600                       		bne.s	loc_D71C
0000D844 1228 001A                  		move.b	$1A(a0),d1
0000D848 D201                       		add.b	d1,d1
0000D84A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D84E 1219                       		move.b	(a1)+,d1
0000D850 5301                       		subq.b	#1,d1
0000D852 6B00                       		bmi.s	loc_D720
0000D854                            
0000D854                            loc_D71C:
0000D854 6100 0000                  		bsr.w	sub_D750
0000D858                            
0000D858                            loc_D720:
0000D858 08E8 0007 0001             		bset	#7,1(a0)
0000D85E                            
0000D85E                            loc_D726:
0000D85E 5446                       		addq.w	#2,d6
0000D860 5554                       		subq.w	#2,(a4)
0000D862 6600 FF46                  		bne.w	loc_D672
0000D866                            
0000D866                            loc_D72E:
0000D866 49EC 0080                  		lea	$80(a4),a4
0000D86A 51CF FF36                  		dbf	d7,loc_D66A
0000D86E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D872 0C05 0050                  		cmpi.b	#$50,d5
0000D876 6700                       		beq.s	loc_D748
0000D878 24BC 0000 0000             		move.l	#0,(a2)
0000D87E 4E75                       		rts	
0000D880                            ; ===========================================================================
0000D880                            
0000D880                            loc_D748:
0000D880 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D886 4E75                       		rts	
0000D888                            ; End of function BuildSprites
0000D888                            
0000D888                            
0000D888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D888                            
0000D888                            
0000D888                            sub_D750:				; XREF: BuildSprites
0000D888 3668 0002                  		movea.w	2(a0),a3
0000D88C 0804 0000                  		btst	#0,d4
0000D890 6600                       		bne.s	loc_D796
0000D892 0804 0001                  		btst	#1,d4
0000D896 6600 0000                  		bne.w	loc_D7E4
0000D89A                            ; End of function sub_D750
0000D89A                            
0000D89A                            
0000D89A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D89A                            
0000D89A                            
0000D89A                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D89A 0C05 0050                  		cmpi.b	#$50,d5
0000D89E 6700                       		beq.s	locret_D794
0000D8A0 1019                       		move.b	(a1)+,d0
0000D8A2 4880                       		ext.w	d0
0000D8A4 D042                       		add.w	d2,d0
0000D8A6 34C0                       		move.w	d0,(a2)+
0000D8A8 14D9                       		move.b	(a1)+,(a2)+
0000D8AA 5205                       		addq.b	#1,d5
0000D8AC 14C5                       		move.b	d5,(a2)+
0000D8AE 1019                       		move.b	(a1)+,d0
0000D8B0 E148                       		lsl.w	#8,d0
0000D8B2 1019                       		move.b	(a1)+,d0
0000D8B4 D04B                       		add.w	a3,d0
0000D8B6 34C0                       		move.w	d0,(a2)+
0000D8B8 1019                       		move.b	(a1)+,d0
0000D8BA 4880                       		ext.w	d0
0000D8BC D043                       		add.w	d3,d0
0000D8BE 0240 01FF                  		andi.w	#$1FF,d0
0000D8C2 6600                       		bne.s	loc_D78E
0000D8C4 5240                       		addq.w	#1,d0
0000D8C6                            
0000D8C6                            loc_D78E:
0000D8C6 34C0                       		move.w	d0,(a2)+
0000D8C8 51C9 FFD0                  		dbf	d1,sub_D762
0000D8CC                            
0000D8CC                            locret_D794:
0000D8CC 4E75                       		rts	
0000D8CE                            ; End of function sub_D762
0000D8CE                            
0000D8CE                            ; ===========================================================================
0000D8CE                            
0000D8CE                            loc_D796:
0000D8CE 0804 0001                  		btst	#1,d4
0000D8D2 6600 0000                  		bne.w	loc_D82A
0000D8D6                            
0000D8D6                            loc_D79E:
0000D8D6 0C05 0050                  		cmpi.b	#$50,d5
0000D8DA 6700                       		beq.s	locret_D7E2
0000D8DC 1019                       		move.b	(a1)+,d0
0000D8DE 4880                       		ext.w	d0
0000D8E0 D042                       		add.w	d2,d0
0000D8E2 34C0                       		move.w	d0,(a2)+
0000D8E4 1819                       		move.b	(a1)+,d4
0000D8E6 14C4                       		move.b	d4,(a2)+
0000D8E8 5205                       		addq.b	#1,d5
0000D8EA 14C5                       		move.b	d5,(a2)+
0000D8EC 1019                       		move.b	(a1)+,d0
0000D8EE E148                       		lsl.w	#8,d0
0000D8F0 1019                       		move.b	(a1)+,d0
0000D8F2 D04B                       		add.w	a3,d0
0000D8F4 0A40 0800                  		eori.w	#$800,d0
0000D8F8 34C0                       		move.w	d0,(a2)+
0000D8FA 1019                       		move.b	(a1)+,d0
0000D8FC 4880                       		ext.w	d0
0000D8FE 4440                       		neg.w	d0
0000D900 D804                       		add.b	d4,d4
0000D902 0244 0018                  		andi.w	#$18,d4
0000D906 5044                       		addq.w	#8,d4
0000D908 9044                       		sub.w	d4,d0
0000D90A D043                       		add.w	d3,d0
0000D90C 0240 01FF                  		andi.w	#$1FF,d0
0000D910 6600                       		bne.s	loc_D7DC
0000D912 5240                       		addq.w	#1,d0
0000D914                            
0000D914                            loc_D7DC:
0000D914 34C0                       		move.w	d0,(a2)+
0000D916 51C9 FFBE                  		dbf	d1,loc_D79E
0000D91A                            
0000D91A                            locret_D7E2:
0000D91A 4E75                       		rts	
0000D91C                            ; ===========================================================================
0000D91C                            
0000D91C                            loc_D7E4:				; XREF: sub_D750
0000D91C 0C05 0050                  		cmpi.b	#$50,d5
0000D920 6700                       		beq.s	locret_D828
0000D922 1019                       		move.b	(a1)+,d0
0000D924 1811                       		move.b	(a1),d4
0000D926 4880                       		ext.w	d0
0000D928 4440                       		neg.w	d0
0000D92A E70C                       		lsl.b	#3,d4
0000D92C 0244 0018                  		andi.w	#$18,d4
0000D930 5044                       		addq.w	#8,d4
0000D932 9044                       		sub.w	d4,d0
0000D934 D042                       		add.w	d2,d0
0000D936 34C0                       		move.w	d0,(a2)+
0000D938 14D9                       		move.b	(a1)+,(a2)+
0000D93A 5205                       		addq.b	#1,d5
0000D93C 14C5                       		move.b	d5,(a2)+
0000D93E 1019                       		move.b	(a1)+,d0
0000D940 E148                       		lsl.w	#8,d0
0000D942 1019                       		move.b	(a1)+,d0
0000D944 D04B                       		add.w	a3,d0
0000D946 0A40 1000                  		eori.w	#$1000,d0
0000D94A 34C0                       		move.w	d0,(a2)+
0000D94C 1019                       		move.b	(a1)+,d0
0000D94E 4880                       		ext.w	d0
0000D950 D043                       		add.w	d3,d0
0000D952 0240 01FF                  		andi.w	#$1FF,d0
0000D956 6600                       		bne.s	loc_D822
0000D958 5240                       		addq.w	#1,d0
0000D95A                            
0000D95A                            loc_D822:
0000D95A 34C0                       		move.w	d0,(a2)+
0000D95C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D960                            
0000D960                            locret_D828:
0000D960 4E75                       		rts	
0000D962                            ; ===========================================================================
0000D962                            
0000D962                            loc_D82A:
0000D962 0C05 0050                  		cmpi.b	#$50,d5
0000D966 6700                       		beq.s	locret_D87C
0000D968 1019                       		move.b	(a1)+,d0
0000D96A 1811                       		move.b	(a1),d4
0000D96C 4880                       		ext.w	d0
0000D96E 4440                       		neg.w	d0
0000D970 E70C                       		lsl.b	#3,d4
0000D972 0244 0018                  		andi.w	#$18,d4
0000D976 5044                       		addq.w	#8,d4
0000D978 9044                       		sub.w	d4,d0
0000D97A D042                       		add.w	d2,d0
0000D97C 34C0                       		move.w	d0,(a2)+
0000D97E 1819                       		move.b	(a1)+,d4
0000D980 14C4                       		move.b	d4,(a2)+
0000D982 5205                       		addq.b	#1,d5
0000D984 14C5                       		move.b	d5,(a2)+
0000D986 1019                       		move.b	(a1)+,d0
0000D988 E148                       		lsl.w	#8,d0
0000D98A 1019                       		move.b	(a1)+,d0
0000D98C D04B                       		add.w	a3,d0
0000D98E 0A40 1800                  		eori.w	#$1800,d0
0000D992 34C0                       		move.w	d0,(a2)+
0000D994 1019                       		move.b	(a1)+,d0
0000D996 4880                       		ext.w	d0
0000D998 4440                       		neg.w	d0
0000D99A D804                       		add.b	d4,d4
0000D99C 0244 0018                  		andi.w	#$18,d4
0000D9A0 5044                       		addq.w	#8,d4
0000D9A2 9044                       		sub.w	d4,d0
0000D9A4 D043                       		add.w	d3,d0
0000D9A6 0240 01FF                  		andi.w	#$1FF,d0
0000D9AA 6600                       		bne.s	loc_D876
0000D9AC 5240                       		addq.w	#1,d0
0000D9AE                            
0000D9AE                            loc_D876:
0000D9AE 34C0                       		move.w	d0,(a2)+
0000D9B0 51C9 FFB0                  		dbf	d1,loc_D82A
0000D9B4                            
0000D9B4                            locret_D87C:
0000D9B4 4E75                       		rts	
0000D9B6                            ; ---------------------------------------------------------------------------
0000D9B6                            ; Subroutine to	check if an object is on the screen
0000D9B6                            ; ---------------------------------------------------------------------------
0000D9B6                            
0000D9B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9B6                            
0000D9B6                            
0000D9B6                            ChkObjOnScreen:
0000D9B6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D9BA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D9BE 6B00                       		bmi.s	NotOnScreen
0000D9C0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D9C4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D9C6                            
0000D9C6 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D9CA 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D9CE 6B00                       		bmi.s	NotOnScreen
0000D9D0 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D9D4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D9D6                            
0000D9D6 7000                       		moveq	#0,d0		; set flag to 0
0000D9D8 4E75                       		rts	
0000D9DA                            ; ===========================================================================
0000D9DA                            
0000D9DA                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D9DA 7001                       		moveq	#1,d0		; set flag to 1
0000D9DC 4E75                       		rts	
0000D9DE                            ; End of function ChkObjOnScreen
0000D9DE                            
0000D9DE                            
0000D9DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9DE                            
0000D9DE                            
0000D9DE                            ChkObjOnScreen2:
0000D9DE 7200                       		moveq	#0,d1
0000D9E0 1228 0019                  		move.b	$19(a0),d1
0000D9E4 3028 0008                  		move.w	8(a0),d0
0000D9E8 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D9EC D041                       		add.w	d1,d0
0000D9EE 6B00                       		bmi.s	NotOnScreen2
0000D9F0 D241                       		add.w	d1,d1
0000D9F2 9041                       		sub.w	d1,d0
0000D9F4 0C40 0140                  		cmpi.w	#320,d0
0000D9F8 6C00                       		bge.s	NotOnScreen2
0000D9FA                            
0000D9FA 3228 000C                  		move.w	$C(a0),d1
0000D9FE 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DA02 6B00                       		bmi.s	NotOnScreen2
0000DA04 0C41 00E0                  		cmpi.w	#224,d1
0000DA08 6C00                       		bge.s	NotOnScreen2
0000DA0A                            
0000DA0A 7000                       		moveq	#0,d0
0000DA0C 4E75                       		rts	
0000DA0E                            ; ===========================================================================
0000DA0E                            
0000DA0E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DA0E 7001                       		moveq	#1,d0
0000DA10 4E75                       		rts	
0000DA12                            ; End of function ChkObjOnScreen2
0000DA12                            
0000DA12                            ; ---------------------------------------------------------------------------
0000DA12                            ; Subroutine to	load a level's objects
0000DA12                            ; ---------------------------------------------------------------------------
0000DA12                            
0000DA12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA12                            
0000DA12                            
0000DA12                            ObjPosLoad:				; XREF: Level; et al
0000DA12 7000                       		moveq	#0,d0
0000DA14 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DA18 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DA1C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DA20                            ; End of function ObjPosLoad
0000DA20                            
0000DA20                            ; ===========================================================================
0000DA20 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DA22 0000                       		dc.w OPL_Next-OPL_Index
0000DA24                            ; ===========================================================================
0000DA24                            
0000DA24                            OPL_Main:				; XREF: OPL_Index
0000DA24 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DA28 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DA2C ED08                       		lsl.b	#6,d0
0000DA2E E848                       		lsr.w	#4,d0
0000DA30 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DA36 2248                       		movea.l	a0,a1
0000DA38 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DA3C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA40 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA44 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DA48 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DA4C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DA50 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA54 34FC 0101                  		move.w	#$101,(a2)+
0000DA58 303C 005E                  		move.w	#$5E,d0
0000DA5C                            
0000DA5C                            OPL_ClrList:
0000DA5C 429A                       		clr.l	(a2)+
0000DA5E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DA62                            
0000DA62 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA66 7400                       		moveq	#0,d2
0000DA68 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DA6C 0446 0080                  		subi.w	#$80,d6
0000DA70 6400                       		bcc.s	loc_D93C
0000DA72 7C00                       		moveq	#0,d6
0000DA74                            
0000DA74                            loc_D93C:
0000DA74 0246 FF80                  		andi.w	#$FF80,d6
0000DA78 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DA7C                            
0000DA7C                            loc_D944:
0000DA7C BC50                       		cmp.w	(a0),d6
0000DA7E 6300                       		bls.s	loc_D956
0000DA80 4A28 0004                  		tst.b	4(a0)
0000DA84 6A00                       		bpl.s	loc_D952
0000DA86 1412                       		move.b	(a2),d2
0000DA88 5212                       		addq.b	#1,(a2)
0000DA8A                            
0000DA8A                            loc_D952:
0000DA8A 5C48                       		addq.w	#6,a0
0000DA8C 60EE                       		bra.s	loc_D944
0000DA8E                            ; ===========================================================================
0000DA8E                            
0000DA8E                            loc_D956:
0000DA8E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA92 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA96 0446 0080                  		subi.w	#$80,d6
0000DA9A 6500                       		bcs.s	loc_D976
0000DA9C                            
0000DA9C                            loc_D964:
0000DA9C BC50                       		cmp.w	(a0),d6
0000DA9E 6300                       		bls.s	loc_D976
0000DAA0 4A28 0004                  		tst.b	4(a0)
0000DAA4 6A00                       		bpl.s	loc_D972
0000DAA6 522A 0001                  		addq.b	#1,1(a2)
0000DAAA                            
0000DAAA                            loc_D972:
0000DAAA 5C48                       		addq.w	#6,a0
0000DAAC 60EE                       		bra.s	loc_D964
0000DAAE                            ; ===========================================================================
0000DAAE                            
0000DAAE                            loc_D976:
0000DAAE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DAB2 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DAB8                            
0000DAB8                            OPL_Next:				; XREF: OPL_Index
0000DAB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DABC 7400                       		moveq	#0,d2
0000DABE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DAC2 0246 FF80                  		andi.w	#$FF80,d6
0000DAC6 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DACA 6700 0000                  		beq.w	locret_DA3A
0000DACE 6C00                       		bge.s	loc_D9F6
0000DAD0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DAD4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DAD8 0446 0080                  		subi.w	#$80,d6
0000DADC 6500                       		bcs.s	loc_D9D2
0000DADE                            
0000DADE                            loc_D9A6:
0000DADE BC68 FFFA                  		cmp.w	-6(a0),d6
0000DAE2 6C00                       		bge.s	loc_D9D2
0000DAE4 5D48                       		subq.w	#6,a0
0000DAE6 4A28 0004                  		tst.b	4(a0)
0000DAEA 6A00                       		bpl.s	loc_D9BC
0000DAEC 532A 0001                  		subq.b	#1,1(a2)
0000DAF0 142A 0001                  		move.b	1(a2),d2
0000DAF4                            
0000DAF4                            loc_D9BC:
0000DAF4 6100 0000                  		bsr.w	loc_DA3C
0000DAF8 6600                       		bne.s	loc_D9C6
0000DAFA 5D48                       		subq.w	#6,a0
0000DAFC 60E0                       		bra.s	loc_D9A6
0000DAFE                            ; ===========================================================================
0000DAFE                            
0000DAFE                            loc_D9C6:
0000DAFE 4A28 0004                  		tst.b	4(a0)
0000DB02 6A00                       		bpl.s	loc_D9D0
0000DB04 522A 0001                  		addq.b	#1,1(a2)
0000DB08                            
0000DB08                            loc_D9D0:
0000DB08 5C48                       		addq.w	#6,a0
0000DB0A                            
0000DB0A                            loc_D9D2:
0000DB0A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DB0E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DB12 0646 0300                  		addi.w	#$300,d6
0000DB16                            
0000DB16                            loc_D9DE:
0000DB16 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DB1A 6E00                       		bgt.s	loc_D9F0
0000DB1C 4A28 FFFE                  		tst.b	-2(a0)
0000DB20 6A00                       		bpl.s	loc_D9EC
0000DB22 5312                       		subq.b	#1,(a2)
0000DB24                            
0000DB24                            loc_D9EC:
0000DB24 5D48                       		subq.w	#6,a0
0000DB26 60EE                       		bra.s	loc_D9DE
0000DB28                            ; ===========================================================================
0000DB28                            
0000DB28                            loc_D9F0:
0000DB28 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DB2C 4E75                       		rts	
0000DB2E                            ; ===========================================================================
0000DB2E                            
0000DB2E                            loc_D9F6:
0000DB2E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DB32 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DB36 0646 0280                  		addi.w	#$280,d6
0000DB3A                            
0000DB3A                            loc_DA02:
0000DB3A BC50                       		cmp.w	(a0),d6
0000DB3C 6300                       		bls.s	loc_DA16
0000DB3E 4A28 0004                  		tst.b	4(a0)
0000DB42 6A00                       		bpl.s	loc_DA10
0000DB44 1412                       		move.b	(a2),d2
0000DB46 5212                       		addq.b	#1,(a2)
0000DB48                            
0000DB48                            loc_DA10:
0000DB48 6100 0000                  		bsr.w	loc_DA3C
0000DB4C 67EC                       		beq.s	loc_DA02
0000DB4E                            
0000DB4E                            loc_DA16:
0000DB4E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DB52 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DB56 0446 0300                  		subi.w	#$300,d6
0000DB5A 6500                       		bcs.s	loc_DA36
0000DB5C                            
0000DB5C                            loc_DA24:
0000DB5C BC50                       		cmp.w	(a0),d6
0000DB5E 6300                       		bls.s	loc_DA36
0000DB60 4A28 0004                  		tst.b	4(a0)
0000DB64 6A00                       		bpl.s	loc_DA32
0000DB66 522A 0001                  		addq.b	#1,1(a2)
0000DB6A                            
0000DB6A                            loc_DA32:
0000DB6A 5C48                       		addq.w	#6,a0
0000DB6C 60EE                       		bra.s	loc_DA24
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            loc_DA36:
0000DB6E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DB72                            
0000DB72                            locret_DA3A:
0000DB72 4E75                       		rts	
0000DB74                            ; ===========================================================================
0000DB74                            
0000DB74                            loc_DA3C:
0000DB74 4A28 0004                  		tst.b	4(a0)
0000DB78 6A00                       		bpl.s	OPL_MakeItem
0000DB7A 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DB80 6700                       		beq.s	OPL_MakeItem
0000DB82 5C48                       		addq.w	#6,a0
0000DB84 7000                       		moveq	#0,d0
0000DB86 4E75                       		rts	
0000DB88                            ; ===========================================================================
0000DB88                            
0000DB88                            OPL_MakeItem:
0000DB88 6100 0000                  		bsr.w	SingleObjLoad
0000DB8C 6600                       		bne.s	locret_DA8A
0000DB8E 3358 0008                  		move.w	(a0)+,8(a1)
0000DB92 3018                       		move.w	(a0)+,d0
0000DB94 3200                       		move.w	d0,d1
0000DB96 0240 0FFF                  		andi.w	#$FFF,d0
0000DB9A 3340 000C                  		move.w	d0,$C(a1)
0000DB9E E559                       		rol.w	#2,d1
0000DBA0 0201 0003                  		andi.b	#3,d1
0000DBA4 1341 0001                  		move.b	d1,1(a1)
0000DBA8 1341 0022                  		move.b	d1,$22(a1)
0000DBAC 1018                       		move.b	(a0)+,d0
0000DBAE 6A00                       		bpl.s	loc_DA80
0000DBB0 0200 007F                  		andi.b	#$7F,d0
0000DBB4 1342 0023                  		move.b	d2,$23(a1)
0000DBB8                            
0000DBB8                            loc_DA80:
0000DBB8 1280                       		move.b	d0,0(a1)
0000DBBA 1358 0028                  		move.b	(a0)+,$28(a1)
0000DBBE 7000                       		moveq	#0,d0
0000DBC0                            
0000DBC0                            locret_DA8A:
0000DBC0 4E75                       		rts	
0000DBC2                            ; ---------------------------------------------------------------------------
0000DBC2                            ; Single object	loading	subroutine
0000DBC2                            ; ---------------------------------------------------------------------------
0000DBC2                            
0000DBC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBC2                            
0000DBC2                            
0000DBC2                            SingleObjLoad:
0000DBC2 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DBC6 303C 005F                  		move.w	#$5F,d0
0000DBCA                            
0000DBCA                            loc_DA94:
0000DBCA 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DBCC 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DBCE 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DBD2 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DBD6                            
0000DBD6                            locret_DAA0:
0000DBD6 4E75                       		rts	
0000DBD8                            ; End of function SingleObjLoad
0000DBD8                            
0000DBD8                            
0000DBD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBD8                            
0000DBD8                            
0000DBD8                            SingleObjLoad2:
0000DBD8 2248                       		movea.l	a0,a1
0000DBDA 303C F000                  		move.w	#-$1000,d0
0000DBDE 9048                       		sub.w	a0,d0
0000DBE0 EC48                       		lsr.w	#6,d0
0000DBE2 5340                       		subq.w	#1,d0
0000DBE4 6500                       		bcs.s	locret_DABC
0000DBE6                            
0000DBE6                            loc_DAB0:
0000DBE6 4A11                       		tst.b	(a1)
0000DBE8 6700                       		beq.s	locret_DABC
0000DBEA 43E9 0040                  		lea	$40(a1),a1
0000DBEE 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DBF2                            
0000DBF2                            locret_DABC:
0000DBF2 4E75                       		rts	
0000DBF4                            ; End of function SingleObjLoad2
0000DBF4                            
0000DBF4                            ; ===========================================================================
0000DBF4                            ; ---------------------------------------------------------------------------
0000DBF4                            ; Object 41 - springs
0000DBF4                            ; ---------------------------------------------------------------------------
0000DBF4                            
0000DBF4                            Obj41:					; XREF: Obj_Index
0000DBF4 7000                       		moveq	#0,d0
0000DBF6 1028 0024                  		move.b	$24(a0),d0
0000DBFA 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DBFE 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DC02 6100 FB38                  		bsr.w	DisplaySprite
0000DC06 3028 0008                  		move.w	8(a0),d0
0000DC0A 0240 FF80                  		andi.w	#$FF80,d0
0000DC0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DC12 0441 0080                  		subi.w	#$80,d1
0000DC16 0241 FF80                  		andi.w	#$FF80,d1
0000DC1A 9041                       		sub.w	d1,d0
0000DC1C 0C40 0280                  		cmpi.w	#$280,d0
0000DC20 6200 FB56                  		bhi.w	DeleteObject
0000DC24 4E75                       		rts	
0000DC26                            ; ===========================================================================
0000DC26 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DC28 0000                       		dc.w Obj41_Up-Obj41_Index
0000DC2A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DC2C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DC2E 0000                       		dc.w Obj41_LR-Obj41_Index
0000DC30 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DC32 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DC34 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DC36 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DC38 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DC3A                            
0000DC3A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DC3C F600                       		dc.w -$A00		; power	of yellow spring
0000DC3E                            ; ===========================================================================
0000DC3E                            
0000DC3E                            Obj41_Main:				; XREF: Obj41_Index
0000DC3E 5428 0024                  		addq.b	#2,$24(a0)
0000DC42 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DC4A 317C 0523 0002             		move.w	#$523,2(a0)
0000DC50 0028 0004 0001             		ori.b	#4,1(a0)
0000DC56 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC5C 117C 0004 0018             		move.b	#4,$18(a0)
0000DC62 1028 0028                  		move.b	$28(a0),d0
0000DC66 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DC6A 6700                       		beq.s	loc_DB54	; if not, branch
0000DC6C 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DC72 117C 0001 001C             		move.b	#1,$1C(a0)
0000DC78 117C 0003 001A             		move.b	#3,$1A(a0)
0000DC7E 317C 0533 0002             		move.w	#$533,2(a0)
0000DC84 117C 0008 0019             		move.b	#8,$19(a0)
0000DC8A                            
0000DC8A                            loc_DB54:
0000DC8A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DC8E 6700                       		beq.s	loc_DB66	; if not, branch
0000DC90 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DC96 08E8 0001 0022             		bset	#1,$22(a0)
0000DC9C                            
0000DC9C                            loc_DB66:
0000DC9C 0800 0001                  		btst	#1,d0
0000DCA0 6700                       		beq.s	loc_DB72
0000DCA2 08E8 0005 0002             		bset	#5,2(a0)
0000DCA8                            
0000DCA8                            loc_DB72:
0000DCA8 0240 000F                  		andi.w	#$F,d0
0000DCAC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DCB2 4E75                       		rts	
0000DCB4                            ; ===========================================================================
0000DCB4                            
0000DCB4                            Obj41_Up:				; XREF: Obj41_Index
0000DCB4 323C 001B                  		move.w	#$1B,d1
0000DCB8 343C 0008                  		move.w	#8,d2
0000DCBC 363C 0010                  		move.w	#$10,d3
0000DCC0 3828 0008                  		move.w	8(a0),d4
0000DCC4 6100 0000                  		bsr.w	SolidObject
0000DCC8 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DCCC 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DCCE 4E75                       		rts	
0000DCD0                            ; ===========================================================================
0000DCD0                            
0000DCD0                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DCD0 5428 0024                  		addq.b	#2,$24(a0)
0000DCD4 5069 000C                  		addq.w	#8,$C(a1)
0000DCD8 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DCDE 08E9 0001 0022             		bset	#1,$22(a1)
0000DCE4 08A9 0003 0022             		bclr	#3,$22(a1)
0000DCEA 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DCF0 137C 0002 0024             		move.b	#2,$24(a1)
0000DCF6 08A8 0003 0022             		bclr	#3,$22(a0)
0000DCFC 4228 0025                  		clr.b	$25(a0)
0000DD00 303C 00CC                  		move.w	#$CC,d0
0000DD04 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD0A                            
0000DD0A                            Obj41_AniUp:				; XREF: Obj41_Index
0000DD0A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD10 6000 CADC                  		bra.w	AnimateSprite
0000DD14                            ; ===========================================================================
0000DD14                            
0000DD14                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DD14 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DD1A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DD1E 4E75                       		rts	
0000DD20                            ; ===========================================================================
0000DD20                            
0000DD20                            Obj41_LR:				; XREF: Obj41_Index
0000DD20 323C 0013                  		move.w	#$13,d1
0000DD24 343C 000E                  		move.w	#$E,d2
0000DD28 363C 000F                  		move.w	#$F,d3
0000DD2C 3828 0008                  		move.w	8(a0),d4
0000DD30 6100 0000                  		bsr.w	SolidObject
0000DD34 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DD3A 6600                       		bne.s	loc_DC0C
0000DD3C 117C 0008 0024             		move.b	#8,$24(a0)
0000DD42                            
0000DD42                            loc_DC0C:
0000DD42 0828 0005 0022             		btst	#5,$22(a0)
0000DD48 6600                       		bne.s	Obj41_BounceLR
0000DD4A 4E75                       		rts	
0000DD4C                            ; ===========================================================================
0000DD4C                            
0000DD4C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DD4C 5428 0024                  		addq.b	#2,$24(a0)
0000DD50 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DD56 5069 0008                  		addq.w	#8,8(a1)
0000DD5A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DD60 6600                       		bne.s	loc_DC36	; if yes, branch
0000DD62 0469 0010 0008             		subi.w	#$10,8(a1)
0000DD68 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DD6C                            
0000DD6C                            loc_DC36:
0000DD6C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DD72 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DD78 0869 0000 0022             		bchg	#0,$22(a1)
0000DD7E 0829 0002 0022             		btst	#2,$22(a1)
0000DD84 6600                       		bne.s	loc_DC56
0000DD86 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DD8C                            
0000DD8C                            loc_DC56:
0000DD8C 08A8 0005 0022             		bclr	#5,$22(a0)
0000DD92 08A9 0005 0022             		bclr	#5,$22(a1)
0000DD98 303C 00CC                  		move.w	#$CC,d0
0000DD9C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DDA2                            
0000DDA2                            Obj41_AniLR:				; XREF: Obj41_Index
0000DDA2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DDA8 6000 CA44                  		bra.w	AnimateSprite
0000DDAC                            ; ===========================================================================
0000DDAC                            
0000DDAC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DDAC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DDB2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DDB6 4E75                       		rts	
0000DDB8                            ; ===========================================================================
0000DDB8                            
0000DDB8                            Obj41_Dwn:				; XREF: Obj41_Index
0000DDB8 323C 001B                  		move.w	#$1B,d1
0000DDBC 343C 0008                  		move.w	#8,d2
0000DDC0 363C 0010                  		move.w	#$10,d3
0000DDC4 3828 0008                  		move.w	8(a0),d4
0000DDC8 6100 0000                  		bsr.w	SolidObject
0000DDCC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DDD2 6600                       		bne.s	loc_DCA4
0000DDD4 117C 000E 0024             		move.b	#$E,$24(a0)
0000DDDA                            
0000DDDA                            loc_DCA4:
0000DDDA 4A28 0025                  		tst.b	$25(a0)
0000DDDE 6600                       		bne.s	locret_DCAE
0000DDE0 4A44                       		tst.w	d4
0000DDE2 6B00                       		bmi.s	Obj41_BounceDwn
0000DDE4                            
0000DDE4                            locret_DCAE:
0000DDE4 4E75                       		rts	
0000DDE6                            ; ===========================================================================
0000DDE6                            
0000DDE6                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DDE6 5428 0024                  		addq.b	#2,$24(a0)
0000DDEA 5169 000C                  		subq.w	#8,$C(a1)
0000DDEE 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DDF4 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DDF8 08E9 0001 0022             		bset	#1,$22(a1)
0000DDFE 08A9 0003 0022             		bclr	#3,$22(a1)
0000DE04 137C 0002 0024             		move.b	#2,$24(a1)
0000DE0A 08A8 0003 0022             		bclr	#3,$22(a0)
0000DE10 4228 0025                  		clr.b	$25(a0)
0000DE14 303C 00CC                  		move.w	#$CC,d0
0000DE18 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DE1E                            
0000DE1E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DE1E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DE24 6000 C9C8                  		bra.w	AnimateSprite
0000DE28                            ; ===========================================================================
0000DE28                            
0000DE28                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DE28 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DE2E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DE32 4E75                       		rts	
0000DE34                            ; ===========================================================================
0000DE34                            Ani_obj41:
0000DE34                            	include "_anim\obj41.asm"
0000DE34                            ; ---------------------------------------------------------------------------
0000DE34                            ; Animation script - springs
0000DE34                            ; ---------------------------------------------------------------------------
0000DE34 0000                       		dc.w byte_DD02-Ani_obj41
0000DE36 0000                       		dc.w byte_DD0E-Ani_obj41
0000DE38 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DE44 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DE50                            		even
0000DE50                            		even
0000DE50                            
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            ; Sprite mappings - springs
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            Map_obj41:
0000DE50                            	include "_maps\obj41.asm"
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            ; Sprite mappings - springs
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50 0000                       		dc.w byte_DD26-Map_obj41
0000DE52 0000                       		dc.w byte_DD31-Map_obj41
0000DE54 0000                       		dc.w byte_DD37-Map_obj41
0000DE56 0000                       		dc.w byte_DD47-Map_obj41
0000DE58 0000                       		dc.w byte_DD4D-Map_obj41
0000DE5A 0000                       		dc.w byte_DD53-Map_obj41
0000DE5C 02                         byte_DD26:	dc.b 2
0000DE5D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DE62 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DE67 01                         byte_DD31:	dc.b 1
0000DE68 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DE6D 03                         byte_DD37:	dc.b 3
0000DE6E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DE73 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DE78 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DE7D 01                         byte_DD47:	dc.b 1
0000DE7E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DE83 01                         byte_DD4D:	dc.b 1
0000DE84 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DE89 04                         byte_DD53:	dc.b 4
0000DE8A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DE8F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DE94 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DE99 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DE9E                            		even
0000DE9E                            		even
0000DE9E                            
0000DE9E                            ; ===========================================================================
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            ; Object 42 - Newtron enemy (GHZ)
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            
0000DE9E                            Obj42:					; XREF: Obj_Index
0000DE9E 7000                       		moveq	#0,d0
0000DEA0 1028 0024                  		move.b	$24(a0),d0
0000DEA4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DEA8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DEAC                            ; ===========================================================================
0000DEAC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DEAE 0000                       		dc.w Obj42_Action-Obj42_Index
0000DEB0 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DEB2                            ; ===========================================================================
0000DEB2                            
0000DEB2                            Obj42_Main:				; XREF: Obj42_Index
0000DEB2 5428 0024                  		addq.b	#2,$24(a0)
0000DEB6 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DEBE 317C 049B 0002             		move.w	#$49B,2(a0)
0000DEC4 117C 0004 0001             		move.b	#4,1(a0)
0000DECA 117C 0004 0018             		move.b	#4,$18(a0)
0000DED0 117C 0014 0019             		move.b	#$14,$19(a0)
0000DED6 117C 0010 0016             		move.b	#$10,$16(a0)
0000DEDC 117C 0008 0017             		move.b	#8,$17(a0)
0000DEE2                            
0000DEE2                            Obj42_Action:				; XREF: Obj42_Index
0000DEE2 7000                       		moveq	#0,d0
0000DEE4 1028 0025                  		move.b	$25(a0),d0
0000DEE8 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DEEC 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DEF0 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DEF6 6100 C8F6                  		bsr.w	AnimateSprite
0000DEFA 6000 0000                  		bra.w	MarkObjGone
0000DEFE                            ; ===========================================================================
0000DEFE 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DF00 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DF02 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DF04 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DF06 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DF08                            ; ===========================================================================
0000DF08                            
0000DF08                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DF08 08E8 0000 0022             		bset	#0,$22(a0)
0000DF0E 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF12 9068 0008                  		sub.w	8(a0),d0
0000DF16 6400                       		bcc.s	loc_DDEA
0000DF18 4440                       		neg.w	d0
0000DF1A 08A8 0000 0022             		bclr	#0,$22(a0)
0000DF20                            
0000DF20                            loc_DDEA:
0000DF20 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DF24 6400                       		bcc.s	locret_DE12	; if not, branch
0000DF26 5428 0025                  		addq.b	#2,$25(a0)
0000DF2A 117C 0001 001C             		move.b	#1,$1C(a0)
0000DF30 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DF34 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DF36 317C 249B 0002             		move.w	#$249B,2(a0)
0000DF3C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DF42 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DF48                            
0000DF48                            locret_DE12:
0000DF48 4E75                       		rts	
0000DF4A                            ; ===========================================================================
0000DF4A                            
0000DF4A                            Obj42_Type00:				; XREF: Obj42_Index2
0000DF4A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DF50 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DF52 08E8 0000 0022             		bset	#0,$22(a0)
0000DF58 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF5C 9068 0008                  		sub.w	8(a0),d0
0000DF60 6400                       		bcc.s	locret_DE32
0000DF62 08A8 0000 0022             		bclr	#0,$22(a0)
0000DF68                            
0000DF68                            locret_DE32:
0000DF68 4E75                       		rts	
0000DF6A                            ; ===========================================================================
0000DF6A                            
0000DF6A                            Obj42_Fall:				; XREF: Obj42_Type00
0000DF6A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DF70 6600                       		bne.s	loc_DE42
0000DF72 117C 000C 0020             		move.b	#$C,$20(a0)
0000DF78                            
0000DF78                            loc_DE42:
0000DF78 6100 F770                  		bsr.w	ObjectFall
0000DF7C 6100 0000                  		bsr.w	ObjHitFloor
0000DF80 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DF82 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DF84 D368 000C                  		add.w	d1,$C(a0)
0000DF88 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DF8E 5428 0025                  		addq.b	#2,$25(a0)
0000DF92 117C 0002 001C             		move.b	#2,$1C(a0)
0000DF98 0828 0005 0002             		btst	#5,2(a0)
0000DF9E 6700                       		beq.s	Obj42_Move
0000DFA0 5228 001C                  		addq.b	#1,$1C(a0)
0000DFA4                            
0000DFA4                            Obj42_Move:
0000DFA4 117C 000D 0020             		move.b	#$D,$20(a0)
0000DFAA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DFB0 0828 0000 0022             		btst	#0,$22(a0)
0000DFB6 6600                       		bne.s	locret_DE86
0000DFB8 4468 0010                  		neg.w	$10(a0)
0000DFBC                            
0000DFBC                            locret_DE86:
0000DFBC 4E75                       		rts	
0000DFBE                            ; ===========================================================================
0000DFBE                            
0000DFBE                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DFBE 6100 F756                  		bsr.w	SpeedToPos
0000DFC2 6100 0000                  		bsr.w	ObjHitFloor
0000DFC6 0C41 FFF8                  		cmpi.w	#-8,d1
0000DFCA 6D00                       		blt.s	loc_DEA2
0000DFCC 0C41 000C                  		cmpi.w	#$C,d1
0000DFD0 6C00                       		bge.s	loc_DEA2
0000DFD2 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DFD6 4E75                       		rts	
0000DFD8                            ; ===========================================================================
0000DFD8                            
0000DFD8                            loc_DEA2:
0000DFD8 5428 0025                  		addq.b	#2,$25(a0)
0000DFDC 4E75                       		rts	
0000DFDE                            ; ===========================================================================
0000DFDE                            
0000DFDE                            Obj42_Speed:				; XREF: Obj42_Index2
0000DFDE 6100 F736                  		bsr.w	SpeedToPos
0000DFE2 4E75                       		rts	
0000DFE4                            ; ===========================================================================
0000DFE4                            
0000DFE4                            Obj42_Type01:				; XREF: Obj42_Index2
0000DFE4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DFEA 6600                       		bne.s	Obj42_FireMissile
0000DFEC 117C 000C 0020             		move.b	#$C,$20(a0)
0000DFF2                            
0000DFF2                            Obj42_FireMissile:
0000DFF2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DFF8 6600                       		bne.s	locret_DF14
0000DFFA 4A28 0032                  		tst.b	$32(a0)
0000DFFE 6600                       		bne.s	locret_DF14
0000E000 117C 0001 0032             		move.b	#1,$32(a0)
0000E006 6100 FBBA                  		bsr.w	SingleObjLoad
0000E00A 6600                       		bne.s	locret_DF14
0000E00C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E010 3368 0008 0008             		move.w	8(a0),8(a1)
0000E016 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E01C 5169 000C                  		subq.w	#8,$C(a1)
0000E020 337C 0200 0010             		move.w	#$200,$10(a1)
0000E026 303C 0014                  		move.w	#$14,d0
0000E02A 0828 0000 0022             		btst	#0,$22(a0)
0000E030 6600                       		bne.s	loc_DF04
0000E032 4440                       		neg.w	d0
0000E034 4469 0010                  		neg.w	$10(a1)
0000E038                            
0000E038                            loc_DF04:
0000E038 D169 0008                  		add.w	d0,8(a1)
0000E03C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E042 137C 0001 0028             		move.b	#1,$28(a1)
0000E048                            
0000E048                            locret_DF14:
0000E048 4E75                       		rts	
0000E04A                            ; ===========================================================================
0000E04A                            
0000E04A                            Obj42_Delete:				; XREF: Obj42_Index
0000E04A 6000 F72C                  		bra.w	DeleteObject
0000E04E                            ; ===========================================================================
0000E04E                            Ani_obj42:
0000E04E                            	include "_anim\obj42.asm"
0000E04E                            ; ---------------------------------------------------------------------------
0000E04E                            ; Animation script - Newtron enemy
0000E04E                            ; ---------------------------------------------------------------------------
0000E04E 0000                       		dc.w byte_DF24-Ani_obj42
0000E050 0000                       		dc.w byte_DF28-Ani_obj42
0000E052 0000                       		dc.w byte_DF30-Ani_obj42
0000E054 0000                       		dc.w byte_DF34-Ani_obj42
0000E056 0000                       		dc.w byte_DF38-Ani_obj42
0000E058 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E05C 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E064 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E068 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E06C 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E076                            		even
0000E076                            		even
0000E076                            
0000E076                            ; ---------------------------------------------------------------------------
0000E076                            ; Sprite mappings - Newtron enemy (GHZ)
0000E076                            ; ---------------------------------------------------------------------------
0000E076                            Map_obj42:
0000E076                            	include "_maps\obj42.asm"
0000E076                            ; ---------------------------------------------------------------------------
0000E076                            ; Sprite mappings - Newtron enemy (GHZ)
0000E076                            ; ---------------------------------------------------------------------------
0000E076 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E07A 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E07E 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E082 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E086 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E08A 0000                       		dc.w byte_DFF8-Map_obj42
0000E08C 03                         byte_DF58:	dc.b 3
0000E08D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E092 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E097 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E09C 03                         byte_DF68:	dc.b 3
0000E09D EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E0A2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0A7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E0AC 03                         byte_DF78:	dc.b 3
0000E0AD EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E0B2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0B7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E0BC 04                         byte_DF88:	dc.b 4
0000E0BD EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E0C2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0C7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E0CC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E0D1 03                         byte_DF9D:	dc.b 3
0000E0D2 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E0D7 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E0DC 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E0E1 02                         byte_DFAD:	dc.b 2
0000E0E2 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E0E7 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E0EC 03                         byte_DFB8:	dc.b 3
0000E0ED F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E0F2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E0F7 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E0FC 03                         byte_DFC8:	dc.b 3
0000E0FD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E102 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E107 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E10C 03                         byte_DFD8:	dc.b 3
0000E10D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E112 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E117 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E11C 03                         byte_DFE8:	dc.b 3
0000E11D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E122 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E127 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E12C 00                         byte_DFF8:	dc.b 0
0000E12E 00                         		even
0000E12E 00                         		even
0000E12E                            
0000E12E                            ; ===========================================================================
0000E12E                            ; ---------------------------------------------------------------------------
0000E12E                            ; Object 43 - Roller enemy (SYZ)
0000E12E                            ; ---------------------------------------------------------------------------
0000E12E                            
0000E12E                            Obj43:					; XREF: Obj_Index
0000E12E 7000                       		moveq	#0,d0
0000E130 1028 0024                  		move.b	$24(a0),d0
0000E134 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E138 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E13C                            ; ===========================================================================
0000E13C 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E13E 0000                       		dc.w Obj43_Action-Obj43_Index
0000E140                            ; ===========================================================================
0000E140                            
0000E140                            Obj43_Main:				; XREF: Obj43_Index
0000E140 117C 000E 0016             		move.b	#$E,$16(a0)
0000E146 117C 0008 0017             		move.b	#8,$17(a0)
0000E14C 6100 F59C                  		bsr.w	ObjectFall
0000E150 6100 0000                  		bsr.w	ObjHitFloor
0000E154 4A41                       		tst.w	d1
0000E156 6A00                       		bpl.s	locret_E052
0000E158 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E15C 317C 0000 0012             		move.w	#0,$12(a0)
0000E162 5428 0024                  		addq.b	#2,$24(a0)
0000E166 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E16E 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E174 117C 0004 0001             		move.b	#4,1(a0)
0000E17A 117C 0004 0018             		move.b	#4,$18(a0)
0000E180 117C 0010 0019             		move.b	#$10,$19(a0)
0000E186                            
0000E186                            locret_E052:
0000E186 4E75                       		rts	
0000E188                            ; ===========================================================================
0000E188                            
0000E188                            Obj43_Action:				; XREF: Obj43_Index
0000E188 7000                       		moveq	#0,d0
0000E18A 1028 0025                  		move.b	$25(a0),d0
0000E18E 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E192 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E196 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E19C 6100 C650                  		bsr.w	AnimateSprite
0000E1A0 3028 0008                  		move.w	8(a0),d0
0000E1A4 0240 FF80                  		andi.w	#$FF80,d0
0000E1A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1AC 0441 0080                  		subi.w	#$80,d1
0000E1B0 0241 FF80                  		andi.w	#$FF80,d1
0000E1B4 9041                       		sub.w	d1,d0
0000E1B6 0C40 0280                  		cmpi.w	#$280,d0
0000E1BA 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E1BE 6000 F57C                  		bra.w	DisplaySprite
0000E1C2                            ; ===========================================================================
0000E1C2                            
0000E1C2                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E1C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1C6 7000                       		moveq	#0,d0
0000E1C8 1028 0023                  		move.b	$23(a0),d0
0000E1CC 6700                       		beq.s	Obj43_Delete
0000E1CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E1D4                            
0000E1D4                            Obj43_Delete:
0000E1D4 6000 F5A2                  		bra.w	DeleteObject
0000E1D8                            ; ===========================================================================
0000E1D8 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E1DA 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E1DC 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E1DE 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E1E0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E1E4 0440 0100                  		subi.w	#$100,d0
0000E1E8 6500                       		bcs.s	loc_E0D2
0000E1EA 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E1EE 6500                       		bcs.s	loc_E0D2
0000E1F0 5828 0025                  		addq.b	#4,$25(a0)
0000E1F4 117C 0002 001C             		move.b	#2,$1C(a0)
0000E1FA 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E200 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E206                            
0000E206                            loc_E0D2:
0000E206 588F                       		addq.l	#4,sp
0000E208 4E75                       		rts	
0000E20A                            ; ===========================================================================
0000E20A                            
0000E20A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E20A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E210 6700                       		beq.s	loc_E0F8
0000E212 5368 0030                  		subq.w	#1,$30(a0)
0000E216 6A00                       		bpl.s	locret_E0F6
0000E218 117C 0001 001C             		move.b	#1,$1C(a0)
0000E21E 317C 0700 0010             		move.w	#$700,$10(a0)
0000E224 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E22A                            
0000E22A                            locret_E0F6:
0000E22A 4E75                       		rts	
0000E22C                            ; ===========================================================================
0000E22C                            
0000E22C                            loc_E0F8:
0000E22C 5428 0025                  		addq.b	#2,$25(a0)
0000E230 4E75                       		rts	
0000E232                            ; ===========================================================================
0000E232                            
0000E232                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E232 6100 0000                  		bsr.w	Obj43_Stop
0000E236 6100 F4DE                  		bsr.w	SpeedToPos
0000E23A 6100 0000                  		bsr.w	ObjHitFloor
0000E23E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E242 6D00                       		blt.s	Obj43_Jump
0000E244 0C41 000C                  		cmpi.w	#$C,d1
0000E248 6C00                       		bge.s	Obj43_Jump
0000E24A D368 000C                  		add.w	d1,$C(a0)
0000E24E 4E75                       		rts	
0000E250                            ; ===========================================================================
0000E250                            
0000E250                            Obj43_Jump:
0000E250 5428 0025                  		addq.b	#2,$25(a0)
0000E254 08E8 0000 0032             		bset	#0,$32(a0)
0000E25A 6700                       		beq.s	locret_E12E
0000E25C 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E262                            
0000E262                            locret_E12E:
0000E262 4E75                       		rts	
0000E264                            ; ===========================================================================
0000E264                            
0000E264                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E264 6100 F484                  		bsr.w	ObjectFall
0000E268 4A68 0012                  		tst.w	$12(a0)
0000E26C 6B00                       		bmi.s	locret_E150
0000E26E 6100 0000                  		bsr.w	ObjHitFloor
0000E272 4A41                       		tst.w	d1
0000E274 6A00                       		bpl.s	locret_E150
0000E276 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E27A 5528 0025                  		subq.b	#2,$25(a0)
0000E27E 317C 0000 0012             		move.w	#0,$12(a0)
0000E284                            
0000E284                            locret_E150:
0000E284 4E75                       		rts	
0000E286                            
0000E286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E286                            
0000E286                            
0000E286                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E286 4A28 0032                  		tst.b	$32(a0)
0000E28A 6B00                       		bmi.s	locret_E188
0000E28C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E290 0440 0030                  		subi.w	#$30,d0
0000E294 9068 0008                  		sub.w	8(a0),d0
0000E298 6400                       		bcc.s	locret_E188
0000E29A 117C 0000 001C             		move.b	#0,$1C(a0)
0000E2A0 117C 000E 0020             		move.b	#$E,$20(a0)
0000E2A6 4268 0010                  		clr.w	$10(a0)
0000E2AA 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E2B0 117C 0002 0025             		move.b	#2,$25(a0)
0000E2B6 08E8 0007 0032             		bset	#7,$32(a0)
0000E2BC                            
0000E2BC                            locret_E188:
0000E2BC 4E75                       		rts	
0000E2BE                            ; End of function Obj43_Stop
0000E2BE                            
0000E2BE                            ; ===========================================================================
0000E2BE                            Ani_obj43:
0000E2BE                            	include "_anim\obj43.asm"
0000E2BE                            ; ---------------------------------------------------------------------------
0000E2BE                            ; Animation script - Roller enemy
0000E2BE                            ; ---------------------------------------------------------------------------
0000E2BE 0000                       		dc.w byte_E190-Ani_obj43
0000E2C0 0000                       		dc.w byte_E196-Ani_obj43
0000E2C2 0000                       		dc.w byte_E19C-Ani_obj43
0000E2C4 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E2CA 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E2D0 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E2D6 00                         		even
0000E2D6 00                         		even
0000E2D6                            
0000E2D6                            ; ---------------------------------------------------------------------------
0000E2D6                            ; Sprite mappings - Roller enemy (SYZ)
0000E2D6                            ; ---------------------------------------------------------------------------
0000E2D6                            Map_obj43:
0000E2D6                            	include "_maps\obj43.asm"
0000E2D6                            ; ---------------------------------------------------------------------------
0000E2D6                            ; Sprite mappings - Roller enemy (SYZ)
0000E2D6                            ; ---------------------------------------------------------------------------
0000E2D6 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E2DA 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E2DE 0000                       		dc.w byte_E1CE-Map_obj43
0000E2E0 02                         byte_E1AC:	dc.b 2
0000E2E1 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E2E6 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E2EB 02                         byte_E1B7:	dc.b 2
0000E2EC E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E2F1 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E2F6 01                         byte_E1C2:	dc.b 1
0000E2F7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E2FC 01                         byte_E1C8:	dc.b 1
0000E2FD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E302 01                         byte_E1CE:	dc.b 1
0000E303 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E308                            		even
0000E308                            		even
0000E308                            
0000E308                            ; ===========================================================================
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            ; Object 44 - walls (GHZ)
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            
0000E308                            Obj44:					; XREF: Obj_Index
0000E308 7000                       		moveq	#0,d0
0000E30A 1028 0024                  		move.b	$24(a0),d0
0000E30E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E312 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E316                            ; ===========================================================================
0000E316 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E318 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E31A 0000                       		dc.w Obj44_Display-Obj44_Index
0000E31C                            ; ===========================================================================
0000E31C                            
0000E31C                            Obj44_Main:				; XREF: Obj44_Index
0000E31C 5428 0024                  		addq.b	#2,$24(a0)
0000E320 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E328 317C 434C 0002             		move.w	#$434C,2(a0)
0000E32E 0028 0004 0001             		ori.b	#4,1(a0)
0000E334 117C 0008 0019             		move.b	#8,$19(a0)
0000E33A 117C 0006 0018             		move.b	#6,$18(a0)
0000E340 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E346 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E34C 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E34E 5428 0024                  		addq.b	#2,$24(a0)
0000E352 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E354                            ; ===========================================================================
0000E354                            
0000E354                            Obj44_Solid:				; XREF: Obj44_Index
0000E354 323C 0013                  		move.w	#$13,d1
0000E358 343C 0028                  		move.w	#$28,d2
0000E35C 6100 A7FE                  		bsr.w	Obj44_SolidWall
0000E360                            
0000E360                            Obj44_Display:				; XREF: Obj44_Index
0000E360 6100 F3DA                  		bsr.w	DisplaySprite
0000E364 3028 0008                  		move.w	8(a0),d0
0000E368 0240 FF80                  		andi.w	#$FF80,d0
0000E36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E370 0441 0080                  		subi.w	#$80,d1
0000E374 0241 FF80                  		andi.w	#$FF80,d1
0000E378 9041                       		sub.w	d1,d0
0000E37A 0C40 0280                  		cmpi.w	#$280,d0
0000E37E 6200 F3F8                  		bhi.w	DeleteObject
0000E382 4E75                       		rts	
0000E384                            ; ===========================================================================
0000E384                            ; ---------------------------------------------------------------------------
0000E384                            ; Sprite mappings - walls (GHZ)
0000E384                            ; ---------------------------------------------------------------------------
0000E384                            Map_obj44:
0000E384                            	include "_maps\obj44.asm"
0000E384                            ; ---------------------------------------------------------------------------
0000E384                            ; Sprite mappings - walls (GHZ)
0000E384                            ; ---------------------------------------------------------------------------
0000E384 0000                       		dc.w byte_E256-Map_obj44
0000E386 0000                       		dc.w byte_E26B-Map_obj44
0000E388 0000                       		dc.w byte_E280-Map_obj44
0000E38A 04                         byte_E256:	dc.b 4
0000E38B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E390 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E395 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E39A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E39F 04                         byte_E26B:	dc.b 4
0000E3A0 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E3A5 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3AA 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E3AF 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E3B4 04                         byte_E280:	dc.b 4
0000E3B5 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E3BA F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E3BF 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E3C4 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E3CA 00                         		even
0000E3CA 00                         		even
0000E3CA                            
0000E3CA                            ; ===========================================================================
0000E3CA                            ; ---------------------------------------------------------------------------
0000E3CA                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E3CA                            ; ---------------------------------------------------------------------------
0000E3CA                            
0000E3CA                            Obj13:					; XREF: Obj_Index
0000E3CA 7000                       		moveq	#0,d0
0000E3CC 1028 0024                  		move.b	$24(a0),d0
0000E3D0 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E3D4 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E3D8 6000 0000                  		bra.w	Obj14_ChkDel
0000E3DC                            ; ===========================================================================
0000E3DC 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E3DE 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E3E0                            ; ---------------------------------------------------------------------------
0000E3E0                            ;
0000E3E0                            ; Lava ball production rates
0000E3E0                            ;
0000E3E0 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E3E6                            ; ===========================================================================
0000E3E6                            
0000E3E6                            Obj13_Main:				; XREF: Obj13_Index
0000E3E6 5428 0024                  		addq.b	#2,$24(a0)
0000E3EA 1028 0028                  		move.b	$28(a0),d0
0000E3EE E848                       		lsr.w	#4,d0
0000E3F0 0240 000F                  		andi.w	#$F,d0
0000E3F4 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E3FA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E400 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E406                            
0000E406                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E406 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E40A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E40C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E412 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E416 6600                       		bne.s	locret_E302
0000E418 6100 F7A8                  		bsr.w	SingleObjLoad
0000E41C 6600                       		bne.s	locret_E302
0000E41E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E422 3368 0008 0008             		move.w	8(a0),8(a1)
0000E428 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E42E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E434                            
0000E434                            locret_E302:
0000E434 4E75                       		rts	
0000E436                            ; ===========================================================================
0000E436                            ; ---------------------------------------------------------------------------
0000E436                            ; Object 14 - lava balls (MZ, SLZ)
0000E436                            ; ---------------------------------------------------------------------------
0000E436                            
0000E436                            Obj14:					; XREF: Obj_Index
0000E436 7000                       		moveq	#0,d0
0000E438 1028 0024                  		move.b	$24(a0),d0
0000E43C 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E440 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E444 6000 F2F6                  		bra.w	DisplaySprite
0000E448                            ; ===========================================================================
0000E448 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E44A 0000                       		dc.w Obj14_Action-Obj14_Index
0000E44C 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E44E                            
0000E44E FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E458 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E460                            ; ===========================================================================
0000E460                            
0000E460                            Obj14_Main:				; XREF: Obj14_Index
0000E460 5428 0024                  		addq.b	#2,$24(a0)
0000E464 117C 0008 0016             		move.b	#8,$16(a0)
0000E46A 117C 0008 0017             		move.b	#8,$17(a0)
0000E470 217C 0000 B400 0004        		move.l	#Map_obj14,4(a0)
0000E478 317C 0345 0002             		move.w	#$345,2(a0)
0000E47E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E484 6600                       		bne.s	loc_E35A
0000E486 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E48C                            
0000E48C                            loc_E35A:
0000E48C 117C 0004 0001             		move.b	#4,1(a0)
0000E492 117C 0003 0018             		move.b	#3,$18(a0)
0000E498 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E49E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E4A4 4A28 0029                  		tst.b	$29(a0)
0000E4A8 6700                       		beq.s	Obj14_SetSpeed
0000E4AA 5428 0018                  		addq.b	#2,$18(a0)
0000E4AE                            
0000E4AE                            Obj14_SetSpeed:
0000E4AE 7000                       		moveq	#0,d0
0000E4B0 1028 0028                  		move.b	$28(a0),d0
0000E4B4 D040                       		add.w	d0,d0
0000E4B6 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E4BC 117C 0008 0019             		move.b	#8,$19(a0)
0000E4C2 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E4C8 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E4CA 117C 0010 0019             		move.b	#$10,$19(a0)
0000E4D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E4D6 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E4DC 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E4E2                            
0000E4E2                            Obj14_PlaySnd:
0000E4E2 303C 00AE                  		move.w	#$AE,d0
0000E4E6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E4EC                            
0000E4EC                            Obj14_Action:				; XREF: Obj14_Index
0000E4EC 7000                       		moveq	#0,d0
0000E4EE 1028 0028                  		move.b	$28(a0),d0
0000E4F2 D040                       		add.w	d0,d0
0000E4F4 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E4F8 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E4FC 6100 F218                  		bsr.w	SpeedToPos
0000E500 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E506 6100 C2E6                  		bsr.w	AnimateSprite
0000E50A                            
0000E50A                            Obj14_ChkDel:				; XREF: Obj13
0000E50A 3028 0008                  		move.w	8(a0),d0
0000E50E 0240 FF80                  		andi.w	#$FF80,d0
0000E512 3238 F700                  		move.w	($FFFFF700).w,d1
0000E516 0441 0080                  		subi.w	#$80,d1
0000E51A 0241 FF80                  		andi.w	#$FF80,d1
0000E51E 9041                       		sub.w	d1,d0
0000E520 0C40 0280                  		cmpi.w	#$280,d0
0000E524 6200 F252                  		bhi.w	DeleteObject
0000E528 4E75                       		rts	
0000E52A                            ; ===========================================================================
0000E52A 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E52E 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E532 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E536 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E53A 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E53C                            ; ===========================================================================
0000E53C                            ; lavaball types 00-03 fly up and fall back down
0000E53C                            
0000E53C                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E53C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E542 3028 0030                  		move.w	$30(a0),d0
0000E546 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E54A 6400                       		bcc.s	loc_E41E	; if not, branch
0000E54C 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E550                            
0000E550                            loc_E41E:
0000E550 08A8 0001 0022             		bclr	#1,$22(a0)
0000E556 4A68 0012                  		tst.w	$12(a0)
0000E55A 6A00                       		bpl.s	locret_E430
0000E55C 08E8 0001 0022             		bset	#1,$22(a0)
0000E562                            
0000E562                            locret_E430:
0000E562 4E75                       		rts	
0000E564                            ; ===========================================================================
0000E564                            ; lavaball type	04 flies up until it hits the ceiling
0000E564                            
0000E564                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E564 08E8 0001 0022             		bset	#1,$22(a0)
0000E56A 6100 0000                  		bsr.w	ObjHitCeiling
0000E56E 4A41                       		tst.w	d1
0000E570 6A00                       		bpl.s	locret_E452
0000E572 117C 0008 0028             		move.b	#8,$28(a0)
0000E578 117C 0001 001C             		move.b	#1,$1C(a0)
0000E57E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E584                            
0000E584                            locret_E452:
0000E584 4E75                       		rts	
0000E586                            ; ===========================================================================
0000E586                            ; lavaball type	05 falls down until it hits the	floor
0000E586                            
0000E586                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E586 08A8 0001 0022             		bclr	#1,$22(a0)
0000E58C 6100 0000                  		bsr.w	ObjHitFloor
0000E590 4A41                       		tst.w	d1
0000E592 6A00                       		bpl.s	locret_E474
0000E594 117C 0008 0028             		move.b	#8,$28(a0)
0000E59A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5A0 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E5A6                            
0000E5A6                            locret_E474:
0000E5A6 4E75                       		rts	
0000E5A8                            ; ===========================================================================
0000E5A8                            ; lavaball types 06-07 move sideways
0000E5A8                            
0000E5A8                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E5A8 08E8 0000 0022             		bset	#0,$22(a0)
0000E5AE 76F8                       		moveq	#-8,d3
0000E5B0 6100 0000                  		bsr.w	ObjHitWallLeft
0000E5B4 4A41                       		tst.w	d1
0000E5B6 6A00                       		bpl.s	locret_E498
0000E5B8 117C 0008 0028             		move.b	#8,$28(a0)
0000E5BE 117C 0003 001C             		move.b	#3,$1C(a0)
0000E5C4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E5CA                            
0000E5CA                            locret_E498:
0000E5CA 4E75                       		rts	
0000E5CC                            ; ===========================================================================
0000E5CC                            
0000E5CC                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E5CC 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5D2 7608                       		moveq	#8,d3
0000E5D4 6100 0000                  		bsr.w	ObjHitWallRight
0000E5D8 4A41                       		tst.w	d1
0000E5DA 6A00                       		bpl.s	locret_E4BC
0000E5DC 117C 0008 0028             		move.b	#8,$28(a0)
0000E5E2 117C 0003 001C             		move.b	#3,$1C(a0)
0000E5E8 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E5EE                            
0000E5EE                            locret_E4BC:
0000E5EE 4E75                       		rts	
0000E5F0                            ; ===========================================================================
0000E5F0                            
0000E5F0                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E5F0 4E75                       		rts	
0000E5F2                            ; ===========================================================================
0000E5F2                            
0000E5F2                            Obj14_Delete:				; XREF: Obj14_Index
0000E5F2 6000 F184                  		bra.w	DeleteObject
0000E5F6                            ; ===========================================================================
0000E5F6                            Ani_obj14:
0000E5F6                            	include "_anim\obj14.asm"
0000E5F6                            ; ---------------------------------------------------------------------------
0000E5F6                            ; Animation script - lava balls
0000E5F6                            ; ---------------------------------------------------------------------------
0000E5F6 0000                       		dc.w byte_E4CC-Ani_obj14
0000E5F8 0000                       		dc.w byte_E4D2-Ani_obj14
0000E5FA 0000                       		dc.w byte_E4D6-Ani_obj14
0000E5FC 0000                       		dc.w byte_E4DC-Ani_obj14
0000E5FE 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E604 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E608 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E60E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E612                            		even
0000E612                            		even
0000E612                            
0000E612                            ; ===========================================================================
0000E612                            ; ---------------------------------------------------------------------------
0000E612                            ; Object 6D - flame thrower (SBZ)
0000E612                            ; ---------------------------------------------------------------------------
0000E612                            
0000E612                            Obj6D:					; XREF: Obj_Index
0000E612 7000                       		moveq	#0,d0
0000E614 1028 0024                  		move.b	$24(a0),d0
0000E618 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E61C 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E620                            ; ===========================================================================
0000E620 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E622 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E624                            ; ===========================================================================
0000E624                            
0000E624                            Obj6D_Main:				; XREF: Obj6D_Index
0000E624 5428 0024                  		addq.b	#2,$24(a0)
0000E628 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E630 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E636 0028 0004 0001             		ori.b	#4,1(a0)
0000E63C 117C 0001 0018             		move.b	#1,$18(a0)
0000E642 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E648 117C 000C 0019             		move.b	#$C,$19(a0)
0000E64E 1028 0028                  		move.b	$28(a0),d0
0000E652 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E656 D040                       		add.w	d0,d0		; multiply by 2
0000E658 3140 0030                  		move.w	d0,$30(a0)
0000E65C 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E660 1028 0028                  		move.b	$28(a0),d0
0000E664 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E668 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E66A 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E66E 117C 000A 0036             		move.b	#$A,$36(a0)
0000E674 0828 0001 0022             		btst	#1,$22(a0)
0000E67A 6700                       		beq.s	Obj6D_Action
0000E67C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E682 117C 0015 0036             		move.b	#$15,$36(a0)
0000E688                            
0000E688                            Obj6D_Action:				; XREF: Obj6D_Index
0000E688 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E68C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E68E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E694 0868 0000 001C             		bchg	#0,$1C(a0)
0000E69A 6700                       		beq.s	loc_E57A
0000E69C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E6A2 303C 00B3                  		move.w	#$B3,d0
0000E6A6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000E6AC                            
0000E6AC                            loc_E57A:
0000E6AC 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E6B2 6100 C13A                  		bsr.w	AnimateSprite
0000E6B6 117C 0000 0020             		move.b	#0,$20(a0)
0000E6BC 1028 0036                  		move.b	$36(a0),d0
0000E6C0 B028 001A                  		cmp.b	$1A(a0),d0
0000E6C4 6600                       		bne.s	Obj6D_ChkDel
0000E6C6 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E6CC                            
0000E6CC                            Obj6D_ChkDel:
0000E6CC 3028 0008                  		move.w	8(a0),d0
0000E6D0 0240 FF80                  		andi.w	#$FF80,d0
0000E6D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E6D8 0441 0080                  		subi.w	#$80,d1
0000E6DC 0241 FF80                  		andi.w	#$FF80,d1
0000E6E0 9041                       		sub.w	d1,d0
0000E6E2 0C40 0280                  		cmpi.w	#$280,d0
0000E6E6 6200 F090                  		bhi.w	DeleteObject
0000E6EA 6000 F050                  		bra.w	DisplaySprite
0000E6EE                            ; ===========================================================================
0000E6EE                            Ani_obj6D:
0000E6EE                            	include "_anim\obj6D.asm"
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE                            ; Animation script - flamethrower (SBZ)
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E6F0 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E6F2 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E6F4 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E6F6 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E704 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E70E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E71C 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E726                            		even
0000E726                            		even
0000E726                            
0000E726                            ; ---------------------------------------------------------------------------
0000E726                            ; Sprite mappings - flame thrower (SBZ)
0000E726                            ; ---------------------------------------------------------------------------
0000E726                            Map_obj6D:
0000E726                            	include "_maps\obj6D.asm"
0000E726                            ; ---------------------------------------------------------------------------
0000E726                            ; Sprite mappings - flame thrower (SBZ)
0000E726                            ; ---------------------------------------------------------------------------
0000E726 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E72A 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E72E 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E732 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E736 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E73A 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E73E 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E742 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E746 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E74A 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E74E 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E752 01                         byte_E620:	dc.b 1
0000E753 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E758 02                         byte_E626:	dc.b 2
0000E759 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E75E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E763 02                         byte_E631:	dc.b 2
0000E764 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E769 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E76E 03                         byte_E63C:	dc.b 3
0000E76F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E774 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E779 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E77E 03                         byte_E64C:	dc.b 3
0000E77F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E784 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E789 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E78E 04                         byte_E65C:	dc.b 4
0000E78F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E794 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E799 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E79E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7A3 04                         byte_E671:	dc.b 4
0000E7A4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E7A9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7AE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7B3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7B8 05                         byte_E686:	dc.b 5
0000E7B9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E7BE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7C3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7C8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7CD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7D2 05                         byte_E6A0:	dc.b 5
0000E7D3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E7D8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E7DD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7E2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7E7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7EC 06                         byte_E6BA:	dc.b 6
0000E7ED E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E7F2 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E7F7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7FC 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E801 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E806 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E80B 06                         byte_E6D9:	dc.b 6
0000E80C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E811 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E816 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E81B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E820 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E825 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E82A 01                         byte_E6F8:	dc.b 1
0000E82B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E830 02                         byte_E6FE:	dc.b 2
0000E831 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E836 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E83B 02                         byte_E709:	dc.b 2
0000E83C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E841 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E846 03                         byte_E714:	dc.b 3
0000E847 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E84C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E851 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E856 03                         byte_E724:	dc.b 3
0000E857 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E85C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E861 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E866 04                         byte_E734:	dc.b 4
0000E867 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E86C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E871 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E876 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E87B 04                         byte_E749:	dc.b 4
0000E87C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E881 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E886 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E88B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E890 05                         byte_E75E:	dc.b 5
0000E891 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E896 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E89B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E8A0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8A5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E8AA 05                         byte_E778:	dc.b 5
0000E8AB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E8B0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E8B5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E8BA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8BF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E8C4 06                         byte_E792:	dc.b 6
0000E8C5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E8CA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E8CF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E8D4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E8D9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8DE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E8E3 06                         byte_E7B1:	dc.b 6
0000E8E4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E8E9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E8EE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E8F3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E8F8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8FD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E902                            		even
0000E902                            		even
0000E902                            
0000E902                            ; ===========================================================================
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E902                            ; ---------------------------------------------------------------------------
0000E902                            
0000E902                            Obj46:					; XREF: Obj_Index
0000E902 7000                       		moveq	#0,d0
0000E904 1028 0024                  		move.b	$24(a0),d0
0000E908 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E90C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E910                            ; ===========================================================================
0000E910 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E912 0000                       		dc.w Obj46_Action-Obj46_Index
0000E914                            ; ===========================================================================
0000E914                            
0000E914                            Obj46_Main:				; XREF: Obj46_Index
0000E914 5428 0024                  		addq.b	#2,$24(a0)
0000E918 117C 000F 0016             		move.b	#$F,$16(a0)
0000E91E 117C 000F 0017             		move.b	#$F,$17(a0)
0000E924 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E92C 317C 4000 0002             		move.w	#$4000,2(a0)
0000E932 117C 0004 0001             		move.b	#4,1(a0)
0000E938 117C 0003 0018             		move.b	#3,$18(a0)
0000E93E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E944 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E94A 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E950                            
0000E950                            Obj46_Action:				; XREF: Obj46_Index
0000E950 4A28 0001                  		tst.b	1(a0)
0000E954 6A00                       		bpl.s	Obj46_ChkDel
0000E956 7000                       		moveq	#0,d0
0000E958 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E95C 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E960 D040                       		add.w	d0,d0
0000E962 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E966 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E96A 323C 001B                  		move.w	#$1B,d1
0000E96E 343C 0010                  		move.w	#$10,d2
0000E972 363C 0011                  		move.w	#$11,d3
0000E976 3828 0008                  		move.w	8(a0),d4
0000E97A 6100 0000                  		bsr.w	SolidObject
0000E97E                            
0000E97E                            Obj46_ChkDel:
0000E97E 6100 EDBC                  		bsr.w	DisplaySprite
0000E982 3028 0008                  		move.w	8(a0),d0
0000E986 0240 FF80                  		andi.w	#$FF80,d0
0000E98A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E98E 0441 0080                  		subi.w	#$80,d1
0000E992 0241 FF80                  		andi.w	#$FF80,d1
0000E996 9041                       		sub.w	d1,d0
0000E998 0C40 0280                  		cmpi.w	#$280,d0
0000E99C 6200 EDDA                  		bhi.w	DeleteObject
0000E9A0 4E75                       		rts	
0000E9A2                            ; ===========================================================================
0000E9A2 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E9A4 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E9A6 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E9A8 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E9AA 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E9AC                            ; ===========================================================================
0000E9AC                            
0000E9AC                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E9AC 4E75                       		rts	
0000E9AE                            ; ===========================================================================
0000E9AE                            
0000E9AE                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E9AE 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9B2 9068 0008                  		sub.w	8(a0),d0
0000E9B6 6400                       		bcc.s	loc_E888
0000E9B8 4440                       		neg.w	d0
0000E9BA                            
0000E9BA                            loc_E888:
0000E9BA 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E9BE 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E9C0 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E9C6                            
0000E9C6                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E9C6 7000                       		moveq	#0,d0
0000E9C8 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E9CC 0828 0003 0028             		btst	#3,$28(a0)
0000E9D2 6700                       		beq.s	loc_E8A8
0000E9D4 4440                       		neg.w	d0
0000E9D6 0640 0010                  		addi.w	#$10,d0
0000E9DA                            
0000E9DA                            loc_E8A8:
0000E9DA 3228 0030                  		move.w	$30(a0),d1
0000E9DE 9240                       		sub.w	d0,d1
0000E9E0 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E9E4 4E75                       		rts	
0000E9E6                            ; ===========================================================================
0000E9E6                            
0000E9E6                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E9E6 6100 ED2E                  		bsr.w	SpeedToPos
0000E9EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E9F0 6100 0000                  		bsr.w	ObjHitFloor
0000E9F4 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E9F6 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E9FA D368 000C                  		add.w	d1,$C(a0)
0000E9FE 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EA02 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA08 117C 0004 0028             		move.b	#4,$28(a0)
0000EA0E 3011                       		move.w	(a1),d0
0000EA10 0240 03FF                  		andi.w	#$3FF,d0
0000EA14 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EA18 6400                       		bcc.s	locret_E8EE
0000EA1A 117C 0000 0028             		move.b	#0,$28(a0)
0000EA20                            
0000EA20                            locret_E8EE:
0000EA20 4E75                       		rts	
0000EA22                            ; ===========================================================================
0000EA22                            
0000EA22                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EA22 7000                       		moveq	#0,d0
0000EA24 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EA28 E648                       		lsr.w	#3,d0
0000EA2A 3228 0030                  		move.w	$30(a0),d1
0000EA2E 9240                       		sub.w	d0,d1
0000EA30 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EA34 4E75                       		rts	
0000EA36                            ; ===========================================================================
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36                            Map_obj46:
0000EA36                            	include "_maps\obj46.asm"
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36 0000                       		dc.w byte_E906-Map_obj46
0000EA38 01                         byte_E906:	dc.b 1
0000EA39 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EA3E                            		even
0000EA3E                            		even
0000EA3E                            
0000EA3E                            ; ===========================================================================
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            ; Object 12 - lamp (SYZ)
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            
0000EA3E                            Obj12:					; XREF: Obj_Index
0000EA3E 7000                       		moveq	#0,d0
0000EA40 1028 0024                  		move.b	$24(a0),d0
0000EA44 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EA48 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EA4C                            ; ===========================================================================
0000EA4C 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EA4E 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EA50                            ; ===========================================================================
0000EA50                            
0000EA50                            Obj12_Main:				; XREF: Obj12_Index
0000EA50 5428 0024                  		addq.b	#2,$24(a0)
0000EA54 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EA5C 317C 0000 0002             		move.w	#0,2(a0)
0000EA62 117C 0004 0001             		move.b	#4,1(a0)
0000EA68 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA6E 117C 0006 0018             		move.b	#6,$18(a0)
0000EA74                            
0000EA74                            Obj12_Animate:				; XREF: Obj12_Index
0000EA74 5328 001E                  		subq.b	#1,$1E(a0)
0000EA78 6A00                       		bpl.s	Obj12_ChkDel
0000EA7A 117C 0007 001E             		move.b	#7,$1E(a0)
0000EA80 5228 001A                  		addq.b	#1,$1A(a0)
0000EA84 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EA8A 6500                       		bcs.s	Obj12_ChkDel
0000EA8C 117C 0000 001A             		move.b	#0,$1A(a0)
0000EA92                            
0000EA92                            Obj12_ChkDel:
0000EA92 3028 0008                  		move.w	8(a0),d0
0000EA96 0240 FF80                  		andi.w	#$FF80,d0
0000EA9A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA9E 0441 0080                  		subi.w	#$80,d1
0000EAA2 0241 FF80                  		andi.w	#$FF80,d1
0000EAA6 9041                       		sub.w	d1,d0
0000EAA8 0C40 0280                  		cmpi.w	#$280,d0
0000EAAC 6200 ECCA                  		bhi.w	DeleteObject
0000EAB0 6000 EC8A                  		bra.w	DisplaySprite
0000EAB4                            ; ===========================================================================
0000EAB4                            ; ---------------------------------------------------------------------------
0000EAB4                            ; Sprite mappings - lamp (SYZ)
0000EAB4                            ; ---------------------------------------------------------------------------
0000EAB4                            Map_obj12:
0000EAB4                            	include "_maps\obj12.asm"
0000EAB4                            ; ---------------------------------------------------------------------------
0000EAB4                            ; Sprite mappings - lamp (SYZ)
0000EAB4                            ; ---------------------------------------------------------------------------
0000EAB4 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EAB8 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EABC 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EAC0 02                         byte_E98E:	dc.b 2
0000EAC1 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EAC6 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EACB 02                         byte_E999:	dc.b 2
0000EACC F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EAD1 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EAD6 02                         byte_E9A4:	dc.b 2
0000EAD7 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EADC 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EAE1 02                         byte_E9AF:	dc.b 2
0000EAE2 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EAE7 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EAEC 02                         byte_E9BA:	dc.b 2
0000EAED F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EAF2 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EAF7 02                         byte_E9C5:	dc.b 2
0000EAF8 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EAFD 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EB02                            		even
0000EB02                            		even
0000EB02                            
0000EB02                            ; ===========================================================================
0000EB02                            ; ---------------------------------------------------------------------------
0000EB02                            ; Object 47 - pinball bumper (SYZ)
0000EB02                            ; ---------------------------------------------------------------------------
0000EB02                            
0000EB02                            Obj47:					; XREF: Obj_Index
0000EB02 7000                       		moveq	#0,d0
0000EB04 1028 0024                  		move.b	$24(a0),d0
0000EB08 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EB0C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EB10                            ; ===========================================================================
0000EB10 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EB12 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EB14                            ; ===========================================================================
0000EB14                            
0000EB14                            Obj47_Main:				; XREF: Obj47_Index
0000EB14 5428 0024                  		addq.b	#2,$24(a0)
0000EB18 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EB20 317C 0380 0002             		move.w	#$380,2(a0)
0000EB26 117C 0004 0001             		move.b	#4,1(a0)
0000EB2C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB32 117C 0001 0018             		move.b	#1,$18(a0)
0000EB38 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EB3E                            
0000EB3E                            Obj47_Hit:				; XREF: Obj47_Index
0000EB3E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EB42 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EB46 4228 0021                  		clr.b	$21(a0)
0000EB4A 43F8 D000                  		lea	($FFFFD000).w,a1
0000EB4E 3228 0008                  		move.w	8(a0),d1
0000EB52 3428 000C                  		move.w	$C(a0),d2
0000EB56 9269 0008                  		sub.w	8(a1),d1
0000EB5A 9469 000C                  		sub.w	$C(a1),d2
0000EB5E 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0000EB64 4EB9 0000 29DA             		jsr	(CalcSine).l
0000EB6A C3FC F900                  		muls.w	#-$700,d1
0000EB6E E081                       		asr.l	#8,d1
0000EB70 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EB74 C1FC F900                  		muls.w	#-$700,d0
0000EB78 E080                       		asr.l	#8,d0
0000EB7A 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EB7E 08E9 0001 0022             		bset	#1,$22(a1)
0000EB84 08A9 0004 0022             		bclr	#4,$22(a1)
0000EB8A 08A9 0005 0022             		bclr	#5,$22(a1)
0000EB90 4229 003C                  		clr.b	$3C(a1)
0000EB94 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB9A 303C 00B4                  		move.w	#$B4,d0
0000EB9E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EBA4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EBA8 7000                       		moveq	#0,d0
0000EBAA 1028 0023                  		move.b	$23(a0),d0
0000EBAE 6700                       		beq.s	Obj47_Score
0000EBB0 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EBB6 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EBB8 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EBBC                            
0000EBBC                            Obj47_Score:
0000EBBC 7001                       		moveq	#1,d0
0000EBBE 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EBC4 6100 EFFC                  		bsr.w	SingleObjLoad
0000EBC8 6600                       		bne.s	Obj47_Display
0000EBCA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EBCE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EBD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EBDA 137C 0004 001A             		move.b	#4,$1A(a1)
0000EBE0                            
0000EBE0                            Obj47_Display:
0000EBE0 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EBE6 6100 BC06                  		bsr.w	AnimateSprite
0000EBEA 3028 0008                  		move.w	8(a0),d0
0000EBEE 0240 FF80                  		andi.w	#$FF80,d0
0000EBF2 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBF6 0441 0080                  		subi.w	#$80,d1
0000EBFA 0241 FF80                  		andi.w	#$FF80,d1
0000EBFE 9041                       		sub.w	d1,d0
0000EC00 0C40 0280                  		cmpi.w	#$280,d0
0000EC04 6200                       		bhi.s	Obj47_ChkHit
0000EC06 6000 EB34                  		bra.w	DisplaySprite
0000EC0A                            ; ===========================================================================
0000EC0A                            
0000EC0A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EC0A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EC0E 7000                       		moveq	#0,d0
0000EC10 1028 0023                  		move.b	$23(a0),d0
0000EC14 6700                       		beq.s	Obj47_Delete
0000EC16 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EC1C                            
0000EC1C                            Obj47_Delete:
0000EC1C 6000 EB5A                  		bra.w	DeleteObject
0000EC20                            ; ===========================================================================
0000EC20                            Ani_obj47:
0000EC20                            	include "_anim\obj47.asm"
0000EC20                            ; ---------------------------------------------------------------------------
0000EC20                            ; Animation script - flamethrower (SBZ)
0000EC20                            ; ---------------------------------------------------------------------------
0000EC20 0000                       		dc.w byte_EAF4-Ani_obj47
0000EC22 0000                       		dc.w byte_EAF8-Ani_obj47
0000EC24 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EC28 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EC30                            		even
0000EC30                            		even
0000EC30                            
0000EC30                            ; ---------------------------------------------------------------------------
0000EC30                            ; Sprite mappings - pinball bumper (SYZ)
0000EC30                            ; ---------------------------------------------------------------------------
0000EC30                            Map_obj47:
0000EC30                            	include "_maps\obj47.asm"
0000EC30                            ; ---------------------------------------------------------------------------
0000EC30                            ; Sprite mappings - pinball bumper (SYZ)
0000EC30                            ; ---------------------------------------------------------------------------
0000EC30 0000                       		dc.w byte_EB06-Map_obj47
0000EC32 0000                       		dc.w byte_EB11-Map_obj47
0000EC34 0000                       		dc.w byte_EB1C-Map_obj47
0000EC36 02                         byte_EB06:	dc.b 2
0000EC37 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EC3C F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EC41 02                         byte_EB11:	dc.b 2
0000EC42 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EC47 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EC4C 02                         byte_EB1C:	dc.b 2
0000EC4D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EC52 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EC58 00                         		even
0000EC58 00                         		even
0000EC58                            
0000EC58                            ; ===========================================================================
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            ; Object 0D - signpost at the end of a level
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            
0000EC58                            Obj0D:					; XREF: Obj_Index
0000EC58 7000                       		moveq	#0,d0
0000EC5A 1028 0024                  		move.b	$24(a0),d0
0000EC5E 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EC62 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EC66 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EC6C 6100 BB80                  		bsr.w	AnimateSprite
0000EC70 6100 EACA                  		bsr.w	DisplaySprite
0000EC74 3028 0008                  		move.w	8(a0),d0
0000EC78 0240 FF80                  		andi.w	#$FF80,d0
0000EC7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC80 0441 0080                  		subi.w	#$80,d1
0000EC84 0241 FF80                  		andi.w	#$FF80,d1
0000EC88 9041                       		sub.w	d1,d0
0000EC8A 0C40 0280                  		cmpi.w	#$280,d0
0000EC8E 6200 EAE8                  		bhi.w	DeleteObject
0000EC92 4E75                       		rts	
0000EC94                            ; ===========================================================================
0000EC94 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EC96 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EC98 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EC9A 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EC9C 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EC9E                            ; ===========================================================================
0000EC9E                            
0000EC9E                            Obj0D_Main:				; XREF: Obj0D_Index
0000EC9E 5428 0024                  		addq.b	#2,$24(a0)
0000ECA2 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000ECAA 317C 0680 0002             		move.w	#$680,2(a0)
0000ECB0 117C 0004 0001             		move.b	#4,1(a0)
0000ECB6 117C 0018 0019             		move.b	#$18,$19(a0)
0000ECBC 117C 0004 0018             		move.b	#4,$18(a0)
0000ECC2                            
0000ECC2                            Obj0D_Touch:				; XREF: Obj0D_Index
0000ECC2 3038 D008                  		move.w	($FFFFD008).w,d0
0000ECC6 9068 0008                  		sub.w	8(a0),d0
0000ECCA 6500                       		bcs.s	locret_EBBA
0000ECCC 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000ECD0 6400                       		bcc.s	locret_EBBA	; if not, branch
0000ECD2 303C 00CF                  		move.w	#$CF,d0
0000ECD6 4EB9 0000 1396             		jsr	(PlaySound).l	; play signpost	sound
0000ECDC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000ECE0 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000ECE6 5428 0024                  		addq.b	#2,$24(a0)
0000ECEA                            
0000ECEA                            locret_EBBA:
0000ECEA 4E75                       		rts	
0000ECEC                            ; ===========================================================================
0000ECEC                            
0000ECEC                            Obj0D_Spin:				; XREF: Obj0D_Index
0000ECEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000ECF0 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000ECF2 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000ECF8 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000ECFC 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000ED02 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000ED04 5428 0024                  		addq.b	#2,$24(a0)
0000ED08                            
0000ED08                            Obj0D_Sparkle:
0000ED08 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ED0C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000ED0E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000ED14 7000                       		moveq	#0,d0
0000ED16 1028 0034                  		move.b	$34(a0),d0
0000ED1A 5428 0034                  		addq.b	#2,$34(a0)
0000ED1E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000ED24 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000ED28 6100 EE98                  		bsr.w	SingleObjLoad
0000ED2C 6600                       		bne.s	locret_EC42
0000ED2E 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000ED32 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000ED38 101A                       		move.b	(a2)+,d0
0000ED3A 4880                       		ext.w	d0
0000ED3C D068 0008                  		add.w	8(a0),d0
0000ED40 3340 0008                  		move.w	d0,8(a1)
0000ED44 101A                       		move.b	(a2)+,d0
0000ED46 4880                       		ext.w	d0
0000ED48 D068 000C                  		add.w	$C(a0),d0
0000ED4C 3340 000C                  		move.w	d0,$C(a1)
0000ED50 237C 0000 A068 0004        		move.l	#Map_obj25,4(a1)
0000ED58 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ED5E 137C 0004 0001             		move.b	#4,1(a1)
0000ED64 137C 0002 0018             		move.b	#2,$18(a1)
0000ED6A 137C 0008 0019             		move.b	#8,$19(a1)
0000ED70                            
0000ED70                            locret_EC42:
0000ED70 4E75                       		rts	
0000ED72                            ; ===========================================================================
0000ED72 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000ED74 0808                       		dc.b	8,   8
0000ED76 F000                       		dc.b -$10,   0
0000ED78 18F8                       		dc.b  $18,  -8
0000ED7A 00F8                       		dc.b	0,  -8
0000ED7C 1000                       		dc.b  $10,   0
0000ED7E E808                       		dc.b -$18,   8
0000ED80 1810                       		dc.b  $18, $10
0000ED82                            ; ===========================================================================
0000ED82                            
0000ED82                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000ED82 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000ED86 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000ED8A 0838 0001 D022             		btst	#1,($FFFFD022).w
0000ED90 6600                       		bne.s	loc_EC70
0000ED92 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000ED98 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000ED9E 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000EDA0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000EDA6 6000                       		bra.s	loc_EC70
0000EDA8                            
0000EDA8                            Obj0D_MoveLeft:
0000EDA8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EDAE                            
0000EDAE                            loc_EC70:
0000EDAE 4A38 D000                  		tst.b	($FFFFD000).w
0000EDB2 6700                       		beq.s	loc_EC86
0000EDB4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDB8 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EDBC 0641 0128                  		addi.w	#$128,d1
0000EDC0 B041                       		cmp.w	d1,d0
0000EDC2 6500                       		bcs.s	locret_ECEE
0000EDC4                            
0000EDC4                            loc_EC86:
0000EDC4 5428 0024                  		addq.b	#2,$24(a0)
0000EDC8                            
0000EDC8                            ; ---------------------------------------------------------------------------
0000EDC8                            ; Subroutine to	set up bonuses at the end of an	act
0000EDC8                            ; ---------------------------------------------------------------------------
0000EDC8                            
0000EDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDC8                            
0000EDC8                            
0000EDC8                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EDC8 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EDCC 6600                       		bne.s	locret_ECEE
0000EDCE 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EDD4 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EDD8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EDDC 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000EDE2 7010                       		moveq	#$10,d0
0000EDE4 4EB9 0000 15B2             		jsr	(LoadPLC2).l	; load title card patterns
0000EDEA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000EDF0 7000                       		moveq	#0,d0
0000EDF2 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000EDF6 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000EDFA 7200                       		moveq	#0,d1
0000EDFC 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000EE00 D041                       		add.w	d1,d0		; add up your time
0000EE02 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000EE06 7214                       		moveq	#$14,d1
0000EE08 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000EE0A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000EE0C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000EE0E                            
0000EE0E                            loc_ECD0:
0000EE0E D040                       		add.w	d0,d0
0000EE10 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EE16 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EE1A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EE1E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EE22 303C 008E                  		move.w	#$8E,d0
0000EE26 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EE2C                            
0000EE2C                            locret_ECEE:
0000EE2C 4E75                       		rts	
0000EE2E                            ; End of function GotThroughAct
0000EE2E                            
0000EE2E                            ; ===========================================================================
0000EE2E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EE42 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EE58                            ; ===========================================================================
0000EE58                            
0000EE58                            locret_ED1A:				; XREF: Obj0D_Index
0000EE58 4E75                       		rts	
0000EE5A                            ; ===========================================================================
0000EE5A                            Ani_obj0D:
0000EE5A                            	include "_anim\obj0D.asm"
0000EE5A                            ; ---------------------------------------------------------------------------
0000EE5A                            ; Animation script - signpost
0000EE5A                            ; ---------------------------------------------------------------------------
0000EE5A 0000                       		dc.w byte_ED24-Ani_obj0D
0000EE5C 0000                       		dc.w byte_ED28-Ani_obj0D
0000EE5E 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EE60 0000                       		dc.w byte_ED34-Ani_obj0D
0000EE62 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000EE66 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000EE6C 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000EE72 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000EE76 00                         		even
0000EE76 00                         		even
0000EE76                            
0000EE76                            ; ---------------------------------------------------------------------------
0000EE76                            ; Sprite mappings - signpost
0000EE76                            ; ---------------------------------------------------------------------------
0000EE76                            Map_obj0D:
0000EE76                            	include "_maps\obj0D.asm"
0000EE76                            ; ---------------------------------------------------------------------------
0000EE76                            ; Sprite mappings - signpost
0000EE76                            ; ---------------------------------------------------------------------------
0000EE76 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000EE7A 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000EE7E 0000                       		dc.w byte_ED73-Map_obj0D
0000EE80 03                         byte_ED42:	dc.b 3
0000EE81 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EE86 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000EE8B 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE90 02                         byte_ED52:	dc.b 2
0000EE91 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000EE96 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE9B 02                         byte_ED5D:	dc.b 2
0000EE9C F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000EEA1 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EEA6 02                         byte_ED68:	dc.b 2
0000EEA7 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000EEAC 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EEB1 03                         byte_ED73:	dc.b 3
0000EEB2 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000EEB7 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000EEBC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EEC2 00                         		even
0000EEC2 00                         		even
0000EEC2                            
0000EEC2                            ; ===========================================================================
0000EEC2                            ; ---------------------------------------------------------------------------
0000EEC2                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000EEC2                            ; ---------------------------------------------------------------------------
0000EEC2                            
0000EEC2                            Obj4C:					; XREF: Obj_Index
0000EEC2 7000                       		moveq	#0,d0
0000EEC4 1028 0024                  		move.b	$24(a0),d0
0000EEC8 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000EECC 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000EED0 6000 0000                  		bra.w	Obj4D_ChkDel
0000EED4                            ; ===========================================================================
0000EED4 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000EED6 0000                       		dc.w loc_EDCC-Obj4C_Index
0000EED8 0000                       		dc.w loc_EE3E-Obj4C_Index
0000EEDA 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000EEDC 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000EEDE 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000EEE0                            ; ===========================================================================
0000EEE0                            
0000EEE0                            Obj4C_Main:				; XREF: Obj4C_Index
0000EEE0 5428 0024                  		addq.b	#2,$24(a0)
0000EEE4 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000EEEC 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000EEF2 117C 0004 0001             		move.b	#4,1(a0)
0000EEF8 117C 0001 0018             		move.b	#1,$18(a0)
0000EEFE 117C 0038 0019             		move.b	#$38,$19(a0)
0000EF04 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000EF0A                            
0000EF0A                            loc_EDCC:				; XREF: Obj4C_Index
0000EF0A 5368 0032                  		subq.w	#1,$32(a0)
0000EF0E 6A00                       		bpl.s	locret_EDF0
0000EF10 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000EF16 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000EF1A 3228 000C                  		move.w	$C(a0),d1
0000EF1E B041                       		cmp.w	d1,d0
0000EF20 6400                       		bcc.s	locret_EDF0
0000EF22 0441 0170                  		subi.w	#$170,d1
0000EF26 B041                       		cmp.w	d1,d0
0000EF28 6500                       		bcs.s	locret_EDF0
0000EF2A 5428 0024                  		addq.b	#2,$24(a0)
0000EF2E                            
0000EF2E                            locret_EDF0:
0000EF2E 4E75                       		rts	
0000EF30                            ; ===========================================================================
0000EF30                            
0000EF30                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000EF30 5428 0024                  		addq.b	#2,$24(a0)
0000EF34 6100 ECA2                  		bsr.w	SingleObjLoad2
0000EF38 6600                       		bne.s	loc_EE18
0000EF3A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EF3E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF44 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF4A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF50 2348 003C                  		move.l	a0,$3C(a1)
0000EF54                            
0000EF54                            loc_EE18:
0000EF54 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF5A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EF5E 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EF60 117C 0004 001C             		move.b	#4,$1C(a0)
0000EF66 6000                       		bra.s	Obj4C_Display
0000EF68                            ; ===========================================================================
0000EF68                            
0000EF68                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EF68 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EF6C 08E9 0001 0022             		bset	#1,$22(a1)
0000EF72 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EF78 6000                       		bra.s	Obj4C_Display
0000EF7A                            ; ===========================================================================
0000EF7A                            
0000EF7A                            loc_EE3E:				; XREF: Obj4C_Index
0000EF7A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EF7E 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EF80 5428 0024                  		addq.b	#2,$24(a0)
0000EF84 4E75                       		rts	
0000EF86                            ; ===========================================================================
0000EF86                            
0000EF86                            Obj4C_Display:				; XREF: Obj4C_Index
0000EF86 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EF8C 6100 B860                  		bsr.w	AnimateSprite
0000EF90 6100 E7AA                  		bsr.w	DisplaySprite
0000EF94 4E75                       		rts	
0000EF96                            ; ===========================================================================
0000EF96                            
0000EF96                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EF96 117C 0000 001C             		move.b	#0,$1C(a0)
0000EF9C 117C 0002 0024             		move.b	#2,$24(a0)
0000EFA2 4A28 0028                  		tst.b	$28(a0)
0000EFA6 6700 E7D0                  		beq.w	DeleteObject
0000EFAA 4E75                       		rts	
0000EFAC                            ; ===========================================================================
0000EFAC                            ; ---------------------------------------------------------------------------
0000EFAC                            ; Object 4D - lava geyser / lavafall (MZ)
0000EFAC                            ; ---------------------------------------------------------------------------
0000EFAC                            
0000EFAC                            Obj4D:					; XREF: Obj_Index
0000EFAC 7000                       		moveq	#0,d0
0000EFAE 1028 0024                  		move.b	$24(a0),d0
0000EFB2 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EFB6 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EFBA 6000 E780                  		bra.w	DisplaySprite
0000EFBE                            ; ===========================================================================
0000EFBE 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EFC0 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EFC2 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EFC4 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EFC6                            
0000EFC6 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EFCA                            ; ===========================================================================
0000EFCA                            
0000EFCA                            Obj4D_Main:				; XREF: Obj4D_Index
0000EFCA 5428 0024                  		addq.b	#2,$24(a0)
0000EFCE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFD4 4A28 0028                  		tst.b	$28(a0)
0000EFD8 6700                       		beq.s	loc_EEA4
0000EFDA 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EFE0                            
0000EFE0                            loc_EEA4:
0000EFE0 7000                       		moveq	#0,d0
0000EFE2 1028 0028                  		move.b	$28(a0),d0
0000EFE6 D040                       		add.w	d0,d0
0000EFE8 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EFEE 2248                       		movea.l	a0,a1
0000EFF0 7201                       		moveq	#1,d1
0000EFF2 6100                       		bsr.s	Obj4D_MakeLava
0000EFF4 6000                       		bra.s	loc_EF10
0000EFF6                            ; ===========================================================================
0000EFF6                            
0000EFF6                            Obj4D_Loop:
0000EFF6 6100 EBE0                  		bsr.w	SingleObjLoad2
0000EFFA 6600                       		bne.s	loc_EF0A
0000EFFC                            
0000EFFC                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EFFC 12BC 004D                  		move.b	#$4D,0(a1)
0000F000 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F008 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F00E 137C 0004 0001             		move.b	#4,1(a1)
0000F014 137C 0020 0019             		move.b	#$20,$19(a1)
0000F01A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F020 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F026 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F02C 137C 0001 0018             		move.b	#1,$18(a1)
0000F032 137C 0005 001C             		move.b	#5,$1C(a1)
0000F038 4A28 0028                  		tst.b	$28(a0)
0000F03C 6700                       		beq.s	loc_EF0A
0000F03E 137C 0002 001C             		move.b	#2,$1C(a1)
0000F044                            
0000F044                            loc_EF0A:
0000F044 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F048 4E75                       		rts	
0000F04A                            ; ===========================================================================
0000F04A                            
0000F04A                            loc_EF10:				; XREF: Obj4D_Main
0000F04A 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F050 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F056 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F05C 137C 0093 0020             		move.b	#$93,$20(a1)
0000F062 137C 0080 0016             		move.b	#$80,$16(a1)
0000F068 08E9 0004 0001             		bset	#4,1(a1)
0000F06E 5829 0024                  		addq.b	#4,$24(a1)
0000F072 2348 003C                  		move.l	a0,$3C(a1)
0000F076 4A28 0028                  		tst.b	$28(a0)
0000F07A 6700                       		beq.s	Obj4D_PlaySnd
0000F07C 7200                       		moveq	#0,d1
0000F07E 6100 FF76                  		bsr.w	Obj4D_Loop
0000F082 5429 0024                  		addq.b	#2,$24(a1)
0000F086 08E9 0004 0002             		bset	#4,2(a1)
0000F08C 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F092 137C 0000 0018             		move.b	#0,$18(a1)
0000F098 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F09E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F0A4 117C 0000 0028             		move.b	#0,$28(a0)
0000F0AA                            
0000F0AA                            Obj4D_PlaySnd:
0000F0AA 303C 00C8                  		move.w	#$C8,d0
0000F0AE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F0B4                            
0000F0B4                            Obj4D_Action:				; XREF: Obj4D_Index
0000F0B4 7000                       		moveq	#0,d0
0000F0B6 1028 0028                  		move.b	$28(a0),d0
0000F0BA D040                       		add.w	d0,d0
0000F0BC 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F0C0 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F0C4 6100 E650                  		bsr.w	SpeedToPos
0000F0C8 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F0CE 6100 B71E                  		bsr.w	AnimateSprite
0000F0D2                            
0000F0D2                            Obj4D_ChkDel:				; XREF: Obj4C
0000F0D2 3028 0008                  		move.w	8(a0),d0
0000F0D6 0240 FF80                  		andi.w	#$FF80,d0
0000F0DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0DE 0441 0080                  		subi.w	#$80,d1
0000F0E2 0241 FF80                  		andi.w	#$FF80,d1
0000F0E6 9041                       		sub.w	d1,d0
0000F0E8 0C40 0280                  		cmpi.w	#$280,d0
0000F0EC 6200 E68A                  		bhi.w	DeleteObject
0000F0F0 4E75                       		rts	
0000F0F2                            ; ===========================================================================
0000F0F2 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F0F4 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F0F6                            ; ===========================================================================
0000F0F6                            
0000F0F6                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F0F6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F0FC 3028 0030                  		move.w	$30(a0),d0
0000F100 B068 000C                  		cmp.w	$C(a0),d0
0000F104 6400                       		bcc.s	locret_EFDA
0000F106 5828 0024                  		addq.b	#4,$24(a0)
0000F10A 2268 003C                  		movea.l	$3C(a0),a1
0000F10E 137C 0003 001C             		move.b	#3,$1C(a1)
0000F114                            
0000F114                            locret_EFDA:
0000F114 4E75                       		rts	
0000F116                            ; ===========================================================================
0000F116                            
0000F116                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F116 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F11C 3028 0030                  		move.w	$30(a0),d0
0000F120 B068 000C                  		cmp.w	$C(a0),d0
0000F124 6400                       		bcc.s	locret_EFFA
0000F126 5828 0024                  		addq.b	#4,$24(a0)
0000F12A 2268 003C                  		movea.l	$3C(a0),a1
0000F12E 137C 0001 001C             		move.b	#1,$1C(a1)
0000F134                            
0000F134                            locret_EFFA:
0000F134 4E75                       		rts	
0000F136                            ; ===========================================================================
0000F136                            
0000F136                            loc_EFFC:				; XREF: Obj4D_Index
0000F136 2268 003C                  		movea.l	$3C(a0),a1
0000F13A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F140 6700 0000                  		beq.w	Obj4D_Delete
0000F144 3029 000C                  		move.w	$C(a1),d0
0000F148 0640 0060                  		addi.w	#$60,d0
0000F14C 3140 000C                  		move.w	d0,$C(a0)
0000F150 9068 0030                  		sub.w	$30(a0),d0
0000F154 4440                       		neg.w	d0
0000F156 7208                       		moveq	#8,d1
0000F158 0C40 0040                  		cmpi.w	#$40,d0
0000F15C 6C00                       		bge.s	loc_F026
0000F15E 720B                       		moveq	#$B,d1
0000F160                            
0000F160                            loc_F026:
0000F160 0C40 0080                  		cmpi.w	#$80,d0
0000F164 6F00                       		ble.s	loc_F02E
0000F166 720E                       		moveq	#$E,d1
0000F168                            
0000F168                            loc_F02E:
0000F168 5328 001E                  		subq.b	#1,$1E(a0)
0000F16C 6A00                       		bpl.s	loc_F04C
0000F16E 117C 0007 001E             		move.b	#7,$1E(a0)
0000F174 5228 001B                  		addq.b	#1,$1B(a0)
0000F178 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F17E 6500                       		bcs.s	loc_F04C
0000F180 117C 0000 001B             		move.b	#0,$1B(a0)
0000F186                            
0000F186                            loc_F04C:
0000F186 1028 001B                  		move.b	$1B(a0),d0
0000F18A D001                       		add.b	d1,d0
0000F18C 1140 001A                  		move.b	d0,$1A(a0)
0000F190 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F194                            ; ===========================================================================
0000F194                            
0000F194                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F194 6000 E5E2                  		bra.w	DeleteObject
0000F198                            ; ===========================================================================
0000F198                            ; ---------------------------------------------------------------------------
0000F198                            ; Object 4E - advancing	wall of	lava (MZ)
0000F198                            ; ---------------------------------------------------------------------------
0000F198                            
0000F198                            Obj4E:					; XREF: Obj_Index
0000F198 7000                       		moveq	#0,d0
0000F19A 1028 0024                  		move.b	$24(a0),d0
0000F19E 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F1A2 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F1A6                            ; ===========================================================================
0000F1A6 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F1A8 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F1AA 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F1AC 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F1AE 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F1B0                            ; ===========================================================================
0000F1B0                            
0000F1B0                            Obj4E_Main:				; XREF: Obj4E_Index
0000F1B0 5828 0024                  		addq.b	#4,$24(a0)
0000F1B4 2248                       		movea.l	a0,a1
0000F1B6 7201                       		moveq	#1,d1
0000F1B8 6000                       		bra.s	Obj4E_Main2
0000F1BA                            ; ===========================================================================
0000F1BA                            
0000F1BA                            Obj4E_Loop:
0000F1BA 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F1BE 6600                       		bne.s	loc_F0C8
0000F1C0                            
0000F1C0                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F1C0 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F1C4 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F1CC 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F1D2 137C 0004 0001             		move.b	#4,1(a1)
0000F1D8 137C 0050 0019             		move.b	#$50,$19(a1)
0000F1DE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F1E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F1EA 137C 0001 0018             		move.b	#1,$18(a1)
0000F1F0 137C 0000 001C             		move.b	#0,$1C(a1)
0000F1F6 137C 0094 0020             		move.b	#$94,$20(a1)
0000F1FC 2348 003C                  		move.l	a0,$3C(a1)
0000F200                            
0000F200                            loc_F0C8:
0000F200 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F204                            
0000F204 5C29 0024                  		addq.b	#6,$24(a1)
0000F208 137C 0004 001A             		move.b	#4,$1A(a1)
0000F20E                            
0000F20E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F20E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F212 9068 0008                  		sub.w	8(a0),d0
0000F216 6400                       		bcc.s	Obj4E_ChkSonic
0000F218 4440                       		neg.w	d0
0000F21A                            
0000F21A                            Obj4E_ChkSonic:
0000F21A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F21E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F220 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F224 9068 000C                  		sub.w	$C(a0),d0
0000F228 6400                       		bcc.s	loc_F0F4
0000F22A 4440                       		neg.w	d0
0000F22C                            
0000F22C                            loc_F0F4:
0000F22C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F230 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F232 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F238 6000                       		bra.s	Obj4E_Solid
0000F23A                            ; ===========================================================================
0000F23A                            
0000F23A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F23A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F23E 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F240 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F246 5528 0024                  		subq.b	#2,$24(a0)
0000F24A                            
0000F24A                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F24A 323C 002B                  		move.w	#$2B,d1
0000F24E 343C 0018                  		move.w	#$18,d2
0000F252 3602                       		move.w	d2,d3
0000F254 5243                       		addq.w	#1,d3
0000F256 3828 0008                  		move.w	8(a0),d4
0000F25A 1028 0024                  		move.b	$24(a0),d0
0000F25E 3F00                       		move.w	d0,-(sp)
0000F260 6100 0000                  		bsr.w	SolidObject
0000F264 301F                       		move.w	(sp)+,d0
0000F266 1140 0024                  		move.b	d0,$24(a0)
0000F26A 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F270 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F272 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F276 4228 0036                  		clr.b	$36(a0)
0000F27A                            
0000F27A                            Obj4E_Animate:
0000F27A 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F280 6100 B56C                  		bsr.w	AnimateSprite
0000F284 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F28A 6400                       		bcc.s	Obj4E_ChkDel
0000F28C 6100 E488                  		bsr.w	SpeedToPos
0000F290                            
0000F290                            Obj4E_ChkDel:
0000F290 6100 E4AA                  		bsr.w	DisplaySprite
0000F294 4A28 0036                  		tst.b	$36(a0)
0000F298 6600                       		bne.s	locret_F17E
0000F29A 3028 0008                  		move.w	8(a0),d0
0000F29E 0240 FF80                  		andi.w	#$FF80,d0
0000F2A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2A6 0441 0080                  		subi.w	#$80,d1
0000F2AA 0241 FF80                  		andi.w	#$FF80,d1
0000F2AE 9041                       		sub.w	d1,d0
0000F2B0 0C40 0280                  		cmpi.w	#$280,d0
0000F2B4 6200                       		bhi.s	Obj4E_ChkGone
0000F2B6                            
0000F2B6                            locret_F17E:
0000F2B6 4E75                       		rts	
0000F2B8                            ; ===========================================================================
0000F2B8                            
0000F2B8                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F2B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2BC 7000                       		moveq	#0,d0
0000F2BE 1028 0023                  		move.b	$23(a0),d0
0000F2C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2C8 117C 0008 0024             		move.b	#8,$24(a0)
0000F2CE 4E75                       		rts	
0000F2D0                            ; ===========================================================================
0000F2D0                            
0000F2D0                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F2D0 2268 003C                  		movea.l	$3C(a0),a1
0000F2D4 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F2DA 6700                       		beq.s	Obj4E_Delete
0000F2DC 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F2E2 0468 0080 0008             		subi.w	#$80,8(a0)
0000F2E8 6000 E452                  		bra.w	DisplaySprite
0000F2EC                            ; ===========================================================================
0000F2EC                            
0000F2EC                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F2EC 6000 E48A                  		bra.w	DeleteObject
0000F2F0                            ; ===========================================================================
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            ; Object 54 - invisible	lava tag (MZ)
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            
0000F2F0                            Obj54:					; XREF: Obj_Index
0000F2F0 7000                       		moveq	#0,d0
0000F2F2 1028 0024                  		move.b	$24(a0),d0
0000F2F6 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F2FA 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F2FE                            ; ===========================================================================
0000F2FE 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F300 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F302                            
0000F302 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F306                            ; ===========================================================================
0000F306                            
0000F306                            Obj54_Main:				; XREF: Obj54_Index
0000F306 5428 0024                  		addq.b	#2,$24(a0)
0000F30A 7000                       		moveq	#0,d0
0000F30C 1028 0028                  		move.b	$28(a0),d0
0000F310 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F316 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F31E 117C 0084 0001             		move.b	#$84,1(a0)
0000F324                            
0000F324                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F324 3028 0008                  		move.w	8(a0),d0
0000F328 0240 FF80                  		andi.w	#$FF80,d0
0000F32C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F330 0441 0080                  		subi.w	#$80,d1
0000F334 0241 FF80                  		andi.w	#$FF80,d1
0000F338 9041                       		sub.w	d1,d0
0000F33A 6B00 E43C                  		bmi.w	DeleteObject
0000F33E 0C40 0280                  		cmpi.w	#$280,d0
0000F342 6200 E434                  		bhi.w	DeleteObject
0000F346 4E75                       		rts	
0000F348                            ; ===========================================================================
0000F348                            ; ---------------------------------------------------------------------------
0000F348                            ; Sprite mappings - invisible lava tag (MZ)
0000F348                            ; ---------------------------------------------------------------------------
0000F348                            Map_obj54:
0000F348                            	include "_maps\obj54.asm"
0000F348                            ; ---------------------------------------------------------------------------
0000F348                            ; Sprite mappings - invisible lava tag (MZ)
0000F348                            ; ---------------------------------------------------------------------------
0000F348 0000                       		dc.w byte_F212-Map_obj54
0000F34A 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F34C 00                         		even
0000F34C 00                         		even
0000F34C                            
0000F34C                            Ani_obj4C:
0000F34C                            	include "_anim\obj4C.asm"
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C                            ; Animation script - geyser of lava (MZ)
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C 0000                       		dc.w byte_F220-Ani_obj4C
0000F34E 0000                       		dc.w byte_F22A-Ani_obj4C
0000F350 0000                       		dc.w byte_F22E-Ani_obj4C
0000F352 0000                       		dc.w byte_F232-Ani_obj4C
0000F354 0000                       		dc.w byte_F23A-Ani_obj4C
0000F356 0000                       		dc.w byte_F23E-Ani_obj4C
0000F358 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F362 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F366 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F36A 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F372 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F376 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F37A                            		even
0000F37A                            		even
0000F37A                            
0000F37A                            Ani_obj4E:
0000F37A                            	include "_anim\obj4E.asm"
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A                            ; Animation script - advancing wall of lava (MZ)
0000F37A                            ; ---------------------------------------------------------------------------
0000F37A 0000                       		dc.w byte_F244-Ani_obj4E
0000F37C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F382                            		even
0000F382                            		even
0000F382                            
0000F382                            ; ---------------------------------------------------------------------------
0000F382                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F382                            ; ---------------------------------------------------------------------------
0000F382                            Map_obj4C:
0000F382                            	include "_maps\obj4C.asm"
0000F382                            ; ---------------------------------------------------------------------------
0000F382                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F382                            ; ---------------------------------------------------------------------------
0000F382 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F386 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F38A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F38E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F392 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F396 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F39A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F39E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F3A2 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F3A6 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F3AA 02                         byte_F272:	dc.b 2
0000F3AB EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F3B0 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F3B5 02                         byte_F27D:	dc.b 2
0000F3B6 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F3BB EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F3C0 04                         byte_F288:	dc.b 4
0000F3C1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F3C6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F3CB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F3D0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F3D5 04                         byte_F29D:	dc.b 4
0000F3D6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F3DB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F3E0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F3E5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F3EA 06                         byte_F2B2:	dc.b 6
0000F3EB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F3F0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F3F5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F3FA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F3FF E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F404 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F409 06                         byte_F2D1:	dc.b 6
0000F40A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F40F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F414 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F419 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F41E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F423 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F428 02                         byte_F2F0:	dc.b 2
0000F429 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F42E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F433 02                         byte_F2FB:	dc.b 2
0000F434 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F439 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F43E 0A                         byte_F306:	dc.b $A
0000F43F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F444 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F449 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F44E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F453 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F458 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F45D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F462 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F467 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F46C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F471 0A                         byte_F339:	dc.b $A
0000F472 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F477 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F47C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F481 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F486 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F48B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F490 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F495 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F49A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F49F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F4A4 0A                         byte_F36C:	dc.b $A
0000F4A5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F4AA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F4AF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F4B4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F4B9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F4BE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F4C3 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F4C8 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F4CD 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F4D2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F4D7 06                         byte_F39F:	dc.b 6
0000F4D8 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F4DD 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F4E2 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F4E7 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F4EC D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F4F1 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F4F6 06                         byte_F3BE:	dc.b 6
0000F4F7 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F4FC 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F501 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F506 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F50B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F510 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F515 06                         byte_F3DD:	dc.b 6
0000F516 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F51B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F520 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F525 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F52A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F52F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F534 10                         byte_F3FC:	dc.b $10
0000F535 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F53A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F53F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F544 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F549 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F54E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F553 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F558 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F55D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F562 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F567 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F56C 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F571 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F576 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F57B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F580 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F585 10                         byte_F44D:	dc.b $10
0000F586 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F58B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F590 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F595 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F59A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F59F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F5A4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F5A9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F5AE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F5B3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F5B8 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F5BD 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F5C2 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F5C7 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F5CC 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F5D1 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F5D6 10                         byte_F49E:	dc.b $10
0000F5D7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F5DC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F5E1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F5E6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F5EB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F5F0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F5F5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F5FA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F5FF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F604 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F609 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F60E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F613 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F618 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F61D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F622 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F627 06                         byte_F4EF:	dc.b 6
0000F628 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F62D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F632 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F637 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F63C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F641 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F646 06                         byte_F50E:	dc.b 6
0000F647 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F64C E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F651 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F656 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F65B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F660 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F665 00                         byte_F52D:	dc.b 0
0000F666                            		even
0000F666                            		even
0000F666                            
0000F666                            ; ---------------------------------------------------------------------------
0000F666                            ; Sprite mappings - advancing wall of lava (MZ)
0000F666                            ; ---------------------------------------------------------------------------
0000F666                            Map_obj4E:
0000F666                            	include "_maps\obj4E.asm"
0000F666                            ; ---------------------------------------------------------------------------
0000F666                            ; Sprite mappings - advancing wall of lava (MZ)
0000F666                            ; ---------------------------------------------------------------------------
0000F666 0000                       		dc.w byte_F538-Map_obj4E
0000F668 0000                       		dc.w byte_F566-Map_obj4E
0000F66A 0000                       		dc.w byte_F594-Map_obj4E
0000F66C 0000                       		dc.w byte_F5C2-Map_obj4E
0000F66E 0000                       		dc.w byte_F5F0-Map_obj4E
0000F670 09                         byte_F538:	dc.b 9
0000F671 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F676 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F67B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F680 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F685 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F68A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F68F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F694 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F699 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F69E 09                         byte_F566:	dc.b 9
0000F69F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F6A4 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F6A9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6AE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6B3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6B8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6BD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6C2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6C7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6CC 09                         byte_F594:	dc.b 9
0000F6CD E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F6D2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F6D7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6DC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6E1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6E6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6EB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6F0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6F5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6FA 09                         byte_F5C2:	dc.b 9
0000F6FB E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F700 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F705 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F70A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F70F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F714 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F719 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F71E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F723 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F728 08                         byte_F5F0:	dc.b 8
0000F729 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F72E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F733 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F738 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F73D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F742 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F747 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F74C 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F752 00                         		even
0000F752 00                         		even
0000F752                            
0000F752                            ; ===========================================================================
0000F752                            ; ---------------------------------------------------------------------------
0000F752                            ; Object 40 - Moto Bug enemy (GHZ)
0000F752                            ; ---------------------------------------------------------------------------
0000F752                            
0000F752                            Obj40:					; XREF: Obj_Index
0000F752 7000                       		moveq	#0,d0
0000F754 1028 0024                  		move.b	$24(a0),d0
0000F758 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F75C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F760                            ; ===========================================================================
0000F760 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F762 0000                       		dc.w Obj40_Action-Obj40_Index
0000F764 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F766 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F768                            ; ===========================================================================
0000F768                            
0000F768                            Obj40_Main:				; XREF: Obj40_Index
0000F768 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F770 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F776 117C 0004 0001             		move.b	#4,1(a0)
0000F77C 117C 0004 0018             		move.b	#4,$18(a0)
0000F782 117C 0014 0019             		move.b	#$14,$19(a0)
0000F788 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F78C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F78E 117C 000E 0016             		move.b	#$E,$16(a0)
0000F794 117C 0008 0017             		move.b	#8,$17(a0)
0000F79A 117C 000C 0020             		move.b	#$C,$20(a0)
0000F7A0 6100 DF48                  		bsr.w	ObjectFall
0000F7A4 4EB9 0000 0000             		jsr	ObjHitFloor
0000F7AA 4A41                       		tst.w	d1
0000F7AC 6A00                       		bpl.s	locret_F68A
0000F7AE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F7B2 317C 0000 0012             		move.w	#0,$12(a0)
0000F7B8 5428 0024                  		addq.b	#2,$24(a0)
0000F7BC 0868 0000 0022             		bchg	#0,$22(a0)
0000F7C2                            
0000F7C2                            locret_F68A:
0000F7C2 4E75                       		rts	
0000F7C4                            ; ===========================================================================
0000F7C4                            
0000F7C4                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F7C4 5828 0024                  		addq.b	#4,$24(a0)
0000F7C8 6000 0000                  		bra.w	Obj40_Animate
0000F7CC                            ; ===========================================================================
0000F7CC                            
0000F7CC                            Obj40_Action:				; XREF: Obj40_Index
0000F7CC 7000                       		moveq	#0,d0
0000F7CE 1028 0025                  		move.b	$25(a0),d0
0000F7D2 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F7D6 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F7DA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F7E0 6100 B00C                  		bsr.w	AnimateSprite
0000F7E4                            
0000F7E4                            ; ---------------------------------------------------------------------------
0000F7E4                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F7E4                            ; ---------------------------------------------------------------------------
0000F7E4                            
0000F7E4                            MarkObjGone:
0000F7E4 3028 0008                  		move.w	8(a0),d0
0000F7E8 0240 FF80                  		andi.w	#$FF80,d0
0000F7EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7F0 0441 0080                  		subi.w	#$80,d1
0000F7F4 0241 FF80                  		andi.w	#$FF80,d1
0000F7F8 9041                       		sub.w	d1,d0
0000F7FA 0C40 0280                  		cmpi.w	#$280,d0
0000F7FE 6200 0000                  		bhi.w	Mark_ChkGone
0000F802 6000 DF38                  		bra.w	DisplaySprite
0000F806                            ; ===========================================================================
0000F806                            
0000F806                            Mark_ChkGone:
0000F806 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F80A 7000                       		moveq	#0,d0
0000F80C 1028 0023                  		move.b	$23(a0),d0
0000F810 6700                       		beq.s	Mark_Delete
0000F812 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F818                            
0000F818                            Mark_Delete:
0000F818 6000 DF5E                  		bra.w	DeleteObject
0000F81C                            
0000F81C                            ; ===========================================================================
0000F81C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F81E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F820                            ; ===========================================================================
0000F820                            
0000F820                            Obj40_Move:				; XREF: Obj40_Index2
0000F820 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F824 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F826 5428 0025                  		addq.b	#2,$25(a0)
0000F82A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F830 117C 0001 001C             		move.b	#1,$1C(a0)
0000F836 0868 0000 0022             		bchg	#0,$22(a0)
0000F83C 6600                       		bne.s	locret_F70A
0000F83E 4468 0010                  		neg.w	$10(a0)		; change direction
0000F842                            
0000F842                            locret_F70A:
0000F842 4E75                       		rts	
0000F844                            ; ===========================================================================
0000F844                            
0000F844                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F844 6100 DED0                  		bsr.w	SpeedToPos
0000F848 4EB9 0000 0000             		jsr	ObjHitFloor
0000F84E 0C41 FFF8                  		cmpi.w	#-8,d1
0000F852 6D00                       		blt.s	Obj40_Pause
0000F854 0C41 000C                  		cmpi.w	#$C,d1
0000F858 6C00                       		bge.s	Obj40_Pause
0000F85A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F85E 5328 0033                  		subq.b	#1,$33(a0)
0000F862 6A00                       		bpl.s	locret_F756
0000F864 117C 000F 0033             		move.b	#$F,$33(a0)
0000F86A 6100 E356                  		bsr.w	SingleObjLoad
0000F86E 6600                       		bne.s	locret_F756
0000F870 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F874 3368 0008 0008             		move.w	8(a0),8(a1)
0000F87A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F880 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F886 137C 0002 001C             		move.b	#2,$1C(a1)
0000F88C                            
0000F88C                            locret_F756:
0000F88C 4E75                       		rts	
0000F88E                            ; ===========================================================================
0000F88E                            
0000F88E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F88E 5528 0025                  		subq.b	#2,$25(a0)
0000F892 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F898 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F89E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8A4 4E75                       		rts	
0000F8A6                            ; ===========================================================================
0000F8A6                            
0000F8A6                            Obj40_Animate:				; XREF: Obj40_Index
0000F8A6 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F8AC 6100 AF40                  		bsr.w	AnimateSprite
0000F8B0 6000 DE8A                  		bra.w	DisplaySprite
0000F8B4                            ; ===========================================================================
0000F8B4                            
0000F8B4                            Obj40_Delete:				; XREF: Obj40_Index
0000F8B4 6000 DEC2                  		bra.w	DeleteObject
0000F8B8                            ; ===========================================================================
0000F8B8                            Ani_obj40:
0000F8B8                            	include "_anim\obj40.asm"
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8                            ; Animation script - Motobug enemy
0000F8B8                            ; ---------------------------------------------------------------------------
0000F8B8 0000                       		dc.w byte_F788-Ani_obj40
0000F8BA 0000                       		dc.w byte_F78C-Ani_obj40
0000F8BC 0000                       		dc.w byte_F792-Ani_obj40
0000F8BE 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F8C2 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F8C8 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F8D6                            		even
0000F8D6                            		even
0000F8D6                            
0000F8D6                            ; ---------------------------------------------------------------------------
0000F8D6                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F8D6                            ; ---------------------------------------------------------------------------
0000F8D6                            Map_obj40:
0000F8D6                            	include "_maps\obj40.asm"
0000F8D6                            Map_cedc:
0000F8D6 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000F8D8 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000F8DA 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000F8DC 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000F8DE 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000F8E0 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000F8E2 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000F8E4 04                         Map_cedc_E: 	dc.b $4
0000F8E5 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000F8EA 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000F8EF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000F8F4 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000F8F9 04                         Map_cedc_23: 	dc.b $4
0000F8FA F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000F8FF 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000F904 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000F909 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000F90E 05                         Map_cedc_38: 	dc.b $5
0000F90F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000F914 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000F919 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000F91E 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000F923 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000F928 01                         Map_cedc_52: 	dc.b $1
0000F929 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000F92E 01                         Map_cedc_58: 	dc.b $1
0000F92F FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000F934 01                         Map_cedc_5E: 	dc.b $1
0000F935 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000F93A 00                         Map_cedc_64: 	dc.b $0
0000F93C 00                         	even
0000F93C 00                         	even
0000F93C                            
0000F93C                            ; ===========================================================================
0000F93C                            ; ---------------------------------------------------------------------------
0000F93C                            ; Object 4F - blank
0000F93C                            ; ---------------------------------------------------------------------------
0000F93C                            
0000F93C                            Obj4F:					; XREF: Obj_Index
0000F93C 4E75                       		rts	
0000F93E                            
0000F93E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F93E                            
0000F93E                            
0000F93E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F93E 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F942 D047                       		add.w	d7,d0
0000F944 0240 0003                  		andi.w	#3,d0
0000F948 6600                       		bne.s	loc_F836
0000F94A 7600                       		moveq	#0,d3
0000F94C 1628 0019                  		move.b	$19(a0),d3
0000F950 4A68 0010                  		tst.w	$10(a0)
0000F954 6B00                       		bmi.s	loc_F82C
0000F956 6100 0000                  		bsr.w	ObjHitWallRight
0000F95A 4A41                       		tst.w	d1
0000F95C 6A00                       		bpl.s	loc_F836
0000F95E                            
0000F95E                            loc_F828:
0000F95E 7001                       		moveq	#1,d0
0000F960 4E75                       		rts	
0000F962                            ; ===========================================================================
0000F962                            
0000F962                            loc_F82C:
0000F962 4643                       		not.w	d3
0000F964 6100 0000                  		bsr.w	ObjHitWallLeft
0000F968 4A41                       		tst.w	d1
0000F96A 6BF2                       		bmi.s	loc_F828
0000F96C                            
0000F96C                            loc_F836:
0000F96C 7000                       		moveq	#0,d0
0000F96E 4E75                       		rts	
0000F970                            ; End of function Obj50_ChkWall
0000F970                            
0000F970                            ; ===========================================================================
0000F970                            ; ---------------------------------------------------------------------------
0000F970                            ; Object 50 - Yadrin enemy (SYZ)
0000F970                            ; ---------------------------------------------------------------------------
0000F970                            
0000F970                            Obj50:					; XREF: Obj_Index
0000F970 7000                       		moveq	#0,d0
0000F972 1028 0024                  		move.b	$24(a0),d0
0000F976 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F97A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F97E                            ; ===========================================================================
0000F97E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F980 0000                       		dc.w Obj50_Action-Obj50_Index
0000F982                            ; ===========================================================================
0000F982                            
0000F982                            Obj50_Main:				; XREF: Obj50_Index
0000F982 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F98A 317C 247B 0002             		move.w	#$247B,2(a0)
0000F990 117C 0004 0001             		move.b	#4,1(a0)
0000F996 117C 0004 0018             		move.b	#4,$18(a0)
0000F99C 117C 0014 0019             		move.b	#$14,$19(a0)
0000F9A2 117C 0011 0016             		move.b	#$11,$16(a0)
0000F9A8 117C 0008 0017             		move.b	#8,$17(a0)
0000F9AE 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F9B4 6100 DD34                  		bsr.w	ObjectFall
0000F9B8 6100 0000                  		bsr.w	ObjHitFloor
0000F9BC 4A41                       		tst.w	d1
0000F9BE 6A00                       		bpl.s	locret_F89E
0000F9C0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F9C4 317C 0000 0012             		move.w	#0,$12(a0)
0000F9CA 5428 0024                  		addq.b	#2,$24(a0)
0000F9CE 0868 0000 0022             		bchg	#0,$22(a0)
0000F9D4                            
0000F9D4                            locret_F89E:
0000F9D4 4E75                       		rts	
0000F9D6                            ; ===========================================================================
0000F9D6                            
0000F9D6                            Obj50_Action:				; XREF: Obj50_Index
0000F9D6 7000                       		moveq	#0,d0
0000F9D8 1028 0025                  		move.b	$25(a0),d0
0000F9DC 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F9E0 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F9E4 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F9EA 6100 AE02                  		bsr.w	AnimateSprite
0000F9EE 6000 FDF4                  		bra.w	MarkObjGone
0000F9F2                            ; ===========================================================================
0000F9F2 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F9F4 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F9F6                            ; ===========================================================================
0000F9F6                            
0000F9F6                            Obj50_Move:				; XREF: Obj50_Index2
0000F9F6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F9FA 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F9FC 5428 0025                  		addq.b	#2,$25(a0)
0000FA00 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FA06 117C 0001 001C             		move.b	#1,$1C(a0)
0000FA0C 0868 0000 0022             		bchg	#0,$22(a0)
0000FA12 6600                       		bne.s	locret_F8E2
0000FA14 4468 0010                  		neg.w	$10(a0)		; change direction
0000FA18                            
0000FA18                            locret_F8E2:
0000FA18 4E75                       		rts	
0000FA1A                            ; ===========================================================================
0000FA1A                            
0000FA1A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FA1A 6100 DCFA                  		bsr.w	SpeedToPos
0000FA1E 6100 0000                  		bsr.w	ObjHitFloor
0000FA22 0C41 FFF8                  		cmpi.w	#-8,d1
0000FA26 6D00                       		blt.s	Obj50_Pause
0000FA28 0C41 000C                  		cmpi.w	#$C,d1
0000FA2C 6C00                       		bge.s	Obj50_Pause
0000FA2E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FA32 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FA36 6600                       		bne.s	Obj50_Pause
0000FA38 4E75                       		rts	
0000FA3A                            ; ===========================================================================
0000FA3A                            
0000FA3A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FA3A 5528 0025                  		subq.b	#2,$25(a0)
0000FA3E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FA44 317C 0000 0010             		move.w	#0,$10(a0)
0000FA4A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FA50 4E75                       		rts	
0000FA52                            ; ===========================================================================
0000FA52                            Ani_obj50:
0000FA52                            	include "_anim\obj50.asm"
0000FA52                            ; ---------------------------------------------------------------------------
0000FA52                            ; Animation script - Yadrin enemy
0000FA52                            ; ---------------------------------------------------------------------------
0000FA52 0000                       		dc.w byte_F920-Ani_obj50
0000FA54 0000                       		dc.w byte_F924-Ani_obj50
0000FA56 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FA5A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FA64                            		even
0000FA64                            		even
0000FA64                            
0000FA64                            ; ---------------------------------------------------------------------------
0000FA64                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FA64                            ; ---------------------------------------------------------------------------
0000FA64                            Map_obj50:
0000FA64                            	include "_maps\obj50.asm"
0000FA64                            ; ---------------------------------------------------------------------------
0000FA64                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FA64                            ; ---------------------------------------------------------------------------
0000FA64 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FA68 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FA6C 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FA70 05                         byte_F93A:	dc.b 5
0000FA71 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FA76 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FA7B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA80 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA85 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA8A 05                         byte_F954:	dc.b 5
0000FA8B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA90 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA95 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA9A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA9F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FAA4 05                         byte_F96E:	dc.b 5
0000FAA5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FAAA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FAAF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAB4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAB9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FABE 05                         byte_F988:	dc.b 5
0000FABF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FAC4 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FAC9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FACE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAD3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FAD8 05                         byte_F9A2:	dc.b 5
0000FAD9 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FADE FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FAE3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAE8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAED 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FAF2 05                         byte_F9BC:	dc.b 5
0000FAF3 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FAF8 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FAFD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB02 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB07 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB0C                            		even
0000FB0C                            		even
0000FB0C                            
0000FB0C                            ; ---------------------------------------------------------------------------
0000FB0C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FB0C                            ;
0000FB0C                            ; variables:
0000FB0C                            ; d1 = width
0000FB0C                            ; d2 = height /	2 (when	jumping)
0000FB0C                            ; d3 = height /	2 (when	walking)
0000FB0C                            ; d4 = x-axis position
0000FB0C                            ; ---------------------------------------------------------------------------
0000FB0C                            
0000FB0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB0C                            
0000FB0C                            
0000FB0C                            SolidObject:
0000FB0C 4A28 0025                  		tst.b	$25(a0)
0000FB10 6700 0000                  		beq.w	loc_FAC8
0000FB14 3401                       		move.w	d1,d2
0000FB16 D442                       		add.w	d2,d2
0000FB18 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB1C 0829 0001 0022             		btst	#1,$22(a1)
0000FB22 6600                       		bne.s	loc_F9FE
0000FB24 3029 0008                  		move.w	8(a1),d0
0000FB28 9068 0008                  		sub.w	8(a0),d0
0000FB2C D041                       		add.w	d1,d0
0000FB2E 6B00                       		bmi.s	loc_F9FE
0000FB30 B042                       		cmp.w	d2,d0
0000FB32 6500                       		bcs.s	loc_FA12
0000FB34                            
0000FB34                            loc_F9FE:
0000FB34 08A9 0003 0022             		bclr	#3,$22(a1)
0000FB3A 08A8 0003 0022             		bclr	#3,$22(a0)
0000FB40 4228 0025                  		clr.b	$25(a0)
0000FB44 7800                       		moveq	#0,d4
0000FB46 4E75                       		rts	
0000FB48                            ; ===========================================================================
0000FB48                            
0000FB48                            loc_FA12:
0000FB48 3404                       		move.w	d4,d2
0000FB4A 6100 80D8                  		bsr.w	MvSonicOnPtfm
0000FB4E 7800                       		moveq	#0,d4
0000FB50 4E75                       		rts	
0000FB52                            ; ===========================================================================
0000FB52                            
0000FB52                            SolidObject71:				; XREF: Obj71_Solid
0000FB52 4A28 0025                  		tst.b	$25(a0)
0000FB56 6700 0000                  		beq.w	loc_FAD0
0000FB5A 3401                       		move.w	d1,d2
0000FB5C D442                       		add.w	d2,d2
0000FB5E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB62 0829 0001 0022             		btst	#1,$22(a1)
0000FB68 6600                       		bne.s	loc_FA44
0000FB6A 3029 0008                  		move.w	8(a1),d0
0000FB6E 9068 0008                  		sub.w	8(a0),d0
0000FB72 D041                       		add.w	d1,d0
0000FB74 6B00                       		bmi.s	loc_FA44
0000FB76 B042                       		cmp.w	d2,d0
0000FB78 6500                       		bcs.s	loc_FA58
0000FB7A                            
0000FB7A                            loc_FA44:
0000FB7A 08A9 0003 0022             		bclr	#3,$22(a1)
0000FB80 08A8 0003 0022             		bclr	#3,$22(a0)
0000FB86 4228 0025                  		clr.b	$25(a0)
0000FB8A 7800                       		moveq	#0,d4
0000FB8C 4E75                       		rts	
0000FB8E                            ; ===========================================================================
0000FB8E                            
0000FB8E                            loc_FA58:
0000FB8E 3404                       		move.w	d4,d2
0000FB90 6100 8092                  		bsr.w	MvSonicOnPtfm
0000FB94 7800                       		moveq	#0,d4
0000FB96 4E75                       		rts	
0000FB98                            ; ===========================================================================
0000FB98                            
0000FB98                            SolidObject2F:				; XREF: Obj2F_Solid
0000FB98 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB9C 4A28 0001                  		tst.b	1(a0)
0000FBA0 6A00 0000                  		bpl.w	loc_FB92
0000FBA4 3029 0008                  		move.w	8(a1),d0
0000FBA8 9068 0008                  		sub.w	8(a0),d0
0000FBAC D041                       		add.w	d1,d0
0000FBAE 6B00 0000                  		bmi.w	loc_FB92
0000FBB2 3601                       		move.w	d1,d3
0000FBB4 D643                       		add.w	d3,d3
0000FBB6 B043                       		cmp.w	d3,d0
0000FBB8 6200 0000                  		bhi.w	loc_FB92
0000FBBC 3A00                       		move.w	d0,d5
0000FBBE 0828 0000 0001             		btst	#0,1(a0)
0000FBC4 6700                       		beq.s	loc_FA94
0000FBC6 4645                       		not.w	d5
0000FBC8 DA43                       		add.w	d3,d5
0000FBCA                            
0000FBCA                            loc_FA94:
0000FBCA E24D                       		lsr.w	#1,d5
0000FBCC 7600                       		moveq	#0,d3
0000FBCE 1632 5000                  		move.b	(a2,d5.w),d3
0000FBD2 9612                       		sub.b	(a2),d3
0000FBD4 3A28 000C                  		move.w	$C(a0),d5
0000FBD8 9A43                       		sub.w	d3,d5
0000FBDA 1629 0016                  		move.b	$16(a1),d3
0000FBDE 4883                       		ext.w	d3
0000FBE0 D443                       		add.w	d3,d2
0000FBE2 3629 000C                  		move.w	$C(a1),d3
0000FBE6 9645                       		sub.w	d5,d3
0000FBE8 5843                       		addq.w	#4,d3
0000FBEA D642                       		add.w	d2,d3
0000FBEC 6B00 0000                  		bmi.w	loc_FB92
0000FBF0 3802                       		move.w	d2,d4
0000FBF2 D844                       		add.w	d4,d4
0000FBF4 B644                       		cmp.w	d4,d3
0000FBF6 6400 0000                  		bcc.w	loc_FB92
0000FBFA 6000 0000                  		bra.w	loc_FB0E
0000FBFE                            ; ===========================================================================
0000FBFE                            
0000FBFE                            loc_FAC8:
0000FBFE 4A28 0001                  		tst.b	1(a0)
0000FC02 6A00 0000                  		bpl.w	loc_FB92
0000FC06                            
0000FC06                            loc_FAD0:
0000FC06 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC0A 3029 0008                  		move.w	8(a1),d0
0000FC0E 9068 0008                  		sub.w	8(a0),d0
0000FC12 D041                       		add.w	d1,d0
0000FC14 6B00 0000                  		bmi.w	loc_FB92
0000FC18 3601                       		move.w	d1,d3
0000FC1A D643                       		add.w	d3,d3
0000FC1C B043                       		cmp.w	d3,d0
0000FC1E 6200 0000                  		bhi.w	loc_FB92
0000FC22 1629 0016                  		move.b	$16(a1),d3
0000FC26 4883                       		ext.w	d3
0000FC28 D443                       		add.w	d3,d2
0000FC2A 3629 000C                  		move.w	$C(a1),d3
0000FC2E 9668 000C                  		sub.w	$C(a0),d3
0000FC32 5843                       		addq.w	#4,d3
0000FC34 D642                       		add.w	d2,d3
0000FC36 6B00 0000                  		bmi.w	loc_FB92
0000FC3A 3802                       		move.w	d2,d4
0000FC3C D844                       		add.w	d4,d4
0000FC3E B644                       		cmp.w	d4,d3
0000FC40 6400 0000                  		bcc.w	loc_FB92
0000FC44                            
0000FC44                            loc_FB0E:
0000FC44 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FC48 6B00 0000                  		bmi.w	loc_FB92
0000FC4C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FC52 6400 0000                  		bcc.w	loc_FB92
0000FC56 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FC5A 6600 0000                  		bne.w	loc_FBAC
0000FC5E 3A00                       		move.w	d0,d5
0000FC60 B240                       		cmp.w	d0,d1
0000FC62 6400                       		bcc.s	loc_FB36
0000FC64 D241                       		add.w	d1,d1
0000FC66 9041                       		sub.w	d1,d0
0000FC68 3A00                       		move.w	d0,d5
0000FC6A 4445                       		neg.w	d5
0000FC6C                            
0000FC6C                            loc_FB36:
0000FC6C 3203                       		move.w	d3,d1
0000FC6E B443                       		cmp.w	d3,d2
0000FC70 6400                       		bcc.s	loc_FB44
0000FC72 5943                       		subq.w	#4,d3
0000FC74 9644                       		sub.w	d4,d3
0000FC76 3203                       		move.w	d3,d1
0000FC78 4441                       		neg.w	d1
0000FC7A                            
0000FC7A                            loc_FB44:
0000FC7A BA41                       		cmp.w	d1,d5
0000FC7C 6200 0000                  		bhi.w	loc_FBB0
0000FC80 0C41 0004                  		cmpi.w	#4,d1
0000FC84 6300                       		bls.s	loc_FB8C
0000FC86 4A40                       		tst.w	d0
0000FC88 6700                       		beq.s	loc_FB70
0000FC8A 6B00                       		bmi.s	loc_FB5E
0000FC8C 4A69 0010                  		tst.w	$10(a1)
0000FC90 6B00                       		bmi.s	loc_FB70
0000FC92 6000                       		bra.s	loc_FB64
0000FC94                            ; ===========================================================================
0000FC94                            
0000FC94                            loc_FB5E:
0000FC94 4A69 0010                  		tst.w	$10(a1)
0000FC98 6A00                       		bpl.s	loc_FB70
0000FC9A                            
0000FC9A                            loc_FB64:
0000FC9A 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FCA0 337C 0000 0010             		move.w	#0,$10(a1)
0000FCA6                            
0000FCA6                            loc_FB70:
0000FCA6 9169 0008                  		sub.w	d0,8(a1)
0000FCAA 0829 0001 0022             		btst	#1,$22(a1)
0000FCB0 6600                       		bne.s	loc_FB8C
0000FCB2 08E9 0005 0022             		bset	#5,$22(a1)
0000FCB8 08E8 0005 0022             		bset	#5,$22(a0)
0000FCBE 7801                       		moveq	#1,d4
0000FCC0 4E75                       		rts	
0000FCC2                            ; ===========================================================================
0000FCC2                            
0000FCC2                            loc_FB8C:
0000FCC2 6100                       		bsr.s	loc_FBA0
0000FCC4 7801                       		moveq	#1,d4
0000FCC6 4E75                       		rts	
0000FCC8                            ; ===========================================================================
0000FCC8                            
0000FCC8                            loc_FB92:
0000FCC8 0828 0005 0022             		btst	#5,$22(a0)
0000FCCE 6700                       		beq.s	loc_FBAC
0000FCD0 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FCD6                            
0000FCD6                            loc_FBA0:
0000FCD6 08A8 0005 0022             		bclr	#5,$22(a0)
0000FCDC 08A9 0005 0022             		bclr	#5,$22(a1)
0000FCE2                            
0000FCE2                            loc_FBAC:
0000FCE2 7800                       		moveq	#0,d4
0000FCE4 4E75                       		rts	
0000FCE6                            ; ===========================================================================
0000FCE6                            
0000FCE6                            loc_FBB0:
0000FCE6 4A43                       		tst.w	d3
0000FCE8 6B00                       		bmi.s	loc_FBBC
0000FCEA 0C43 0010                  		cmpi.w	#$10,d3
0000FCEE 6500                       		bcs.s	loc_FBEE
0000FCF0 60D6                       		bra.s	loc_FB92
0000FCF2                            ; ===========================================================================
0000FCF2                            
0000FCF2                            loc_FBBC:
0000FCF2 4A69 0012                  		tst.w	$12(a1)
0000FCF6 6700                       		beq.s	loc_FBD6
0000FCF8 6A00                       		bpl.s	loc_FBD2
0000FCFA 4A43                       		tst.w	d3
0000FCFC 6A00                       		bpl.s	loc_FBD2
0000FCFE 9769 000C                  		sub.w	d3,$C(a1)
0000FD02 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FD08                            
0000FD08                            loc_FBD2:
0000FD08 78FF                       		moveq	#-1,d4
0000FD0A 4E75                       		rts	
0000FD0C                            ; ===========================================================================
0000FD0C                            
0000FD0C                            loc_FBD6:
0000FD0C 0829 0001 0022             		btst	#1,$22(a1)
0000FD12 66F4                       		bne.s	loc_FBD2
0000FD14 2F08                       		move.l	a0,-(sp)
0000FD16 2049                       		movea.l	a1,a0
0000FD18 4EB9 0000 0000             		jsr	KillSonic
0000FD1E 205F                       		movea.l	(sp)+,a0
0000FD20 78FF                       		moveq	#-1,d4
0000FD22 4E75                       		rts	
0000FD24                            ; ===========================================================================
0000FD24                            
0000FD24                            loc_FBEE:
0000FD24 5943                       		subq.w	#4,d3
0000FD26 7200                       		moveq	#0,d1
0000FD28 1228 0019                  		move.b	$19(a0),d1
0000FD2C 3401                       		move.w	d1,d2
0000FD2E D442                       		add.w	d2,d2
0000FD30 D269 0008                  		add.w	8(a1),d1
0000FD34 9268 0008                  		sub.w	8(a0),d1
0000FD38 6B00                       		bmi.s	loc_FC28
0000FD3A B242                       		cmp.w	d2,d1
0000FD3C 6400                       		bcc.s	loc_FC28
0000FD3E 4A69 0012                  		tst.w	$12(a1)
0000FD42 6B00                       		bmi.s	loc_FC28
0000FD44 9769 000C                  		sub.w	d3,$C(a1)
0000FD48 5369 000C                  		subq.w	#1,$C(a1)
0000FD4C 6100                       		bsr.s	sub_FC2C
0000FD4E 117C 0002 0025             		move.b	#2,$25(a0)
0000FD54 08E8 0003 0022             		bset	#3,$22(a0)
0000FD5A 78FF                       		moveq	#-1,d4
0000FD5C 4E75                       		rts	
0000FD5E                            ; ===========================================================================
0000FD5E                            
0000FD5E                            loc_FC28:
0000FD5E 7800                       		moveq	#0,d4
0000FD60 4E75                       		rts	
0000FD62                            ; End of function SolidObject
0000FD62                            
0000FD62                            
0000FD62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD62                            
0000FD62                            
0000FD62                            sub_FC2C:				; XREF: SolidObject
0000FD62 0829 0003 0022             		btst	#3,$22(a1)
0000FD68 6700                       		beq.s	loc_FC4E
0000FD6A 7000                       		moveq	#0,d0
0000FD6C 1029 003D                  		move.b	$3D(a1),d0
0000FD70 ED48                       		lsl.w	#6,d0
0000FD72 0680 00FF D000             		addi.l	#$FFD000,d0
0000FD78 2440                       		movea.l	d0,a2
0000FD7A 08AA 0003 0022             		bclr	#3,$22(a2)
0000FD80 422A 0025                  		clr.b	$25(a2)
0000FD84                            
0000FD84                            loc_FC4E:
0000FD84 3008                       		move.w	a0,d0
0000FD86 0440 D000                  		subi.w	#-$3000,d0
0000FD8A EC48                       		lsr.w	#6,d0
0000FD8C 0240 007F                  		andi.w	#$7F,d0
0000FD90 1340 003D                  		move.b	d0,$3D(a1)
0000FD94 137C 0000 0026             		move.b	#0,$26(a1)
0000FD9A 337C 0000 0012             		move.w	#0,$12(a1)
0000FDA0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FDA6 0829 0001 0022             		btst	#1,$22(a1)
0000FDAC 6700                       		beq.s	loc_FC84
0000FDAE 2F08                       		move.l	a0,-(sp)
0000FDB0 2049                       		movea.l	a1,a0
0000FDB2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FDB8 205F                       		movea.l	(sp)+,a0
0000FDBA                            
0000FDBA                            loc_FC84:
0000FDBA 08E9 0003 0022             		bset	#3,$22(a1)
0000FDC0 08E8 0003 0022             		bset	#3,$22(a0)
0000FDC6 4E75                       		rts	
0000FDC8                            ; End of function sub_FC2C
0000FDC8                            
0000FDC8                            ; ===========================================================================
0000FDC8                            ; ---------------------------------------------------------------------------
0000FDC8                            ; Object 51 - smashable	green block (MZ)
0000FDC8                            ; ---------------------------------------------------------------------------
0000FDC8                            
0000FDC8                            Obj51:					; XREF: Obj_Index
0000FDC8 7000                       		moveq	#0,d0
0000FDCA 1028 0024                  		move.b	$24(a0),d0
0000FDCE 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FDD2 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FDD6 6000 FA0C                  		bra.w	MarkObjGone
0000FDDA                            ; ===========================================================================
0000FDDA 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FDDC 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FDDE 0000                       		dc.w Obj51_Display-Obj51_Index
0000FDE0                            ; ===========================================================================
0000FDE0                            
0000FDE0                            Obj51_Main:				; XREF: Obj51_Index
0000FDE0 5428 0024                  		addq.b	#2,$24(a0)
0000FDE4 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FDEC 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FDF2 117C 0004 0001             		move.b	#4,1(a0)
0000FDF8 117C 0010 0019             		move.b	#$10,$19(a0)
0000FDFE 117C 0004 0018             		move.b	#4,$18(a0)
0000FE04 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FE0A                            
0000FE0A                            Obj51_Solid:				; XREF: Obj51_Index
0000FE0A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FE10 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FE16 323C 001B                  		move.w	#$1B,d1
0000FE1A 343C 0010                  		move.w	#$10,d2
0000FE1E 363C 0011                  		move.w	#$11,d3
0000FE22 3828 0008                  		move.w	8(a0),d4
0000FE26 6100 FCE4                  		bsr.w	SolidObject
0000FE2A 0828 0003 0022             		btst	#3,$22(a0)
0000FE30 6600                       		bne.s	Obj51_Smash
0000FE32                            
0000FE32                            locret_FCFC:
0000FE32 4E75                       		rts	
0000FE34                            ; ===========================================================================
0000FE34                            
0000FE34                            Obj51_Smash:				; XREF: Obj51_Solid
0000FE34 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FE3A 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FE3C 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FE42 08E9 0002 0022             		bset	#2,$22(a1)
0000FE48 137C 000E 0016             		move.b	#$E,$16(a1)
0000FE4E 137C 0007 0017             		move.b	#7,$17(a1)
0000FE54 137C 0002 001C             		move.b	#2,$1C(a1)
0000FE5A 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FE60 08E9 0001 0022             		bset	#1,$22(a1)
0000FE66 08A9 0003 0022             		bclr	#3,$22(a1)
0000FE6C 137C 0002 0024             		move.b	#2,$24(a1)
0000FE72 08A8 0003 0022             		bclr	#3,$22(a0)
0000FE78 4228 0025                  		clr.b	$25(a0)
0000FE7C 117C 0001 001A             		move.b	#1,$1A(a0)
0000FE82 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FE88 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FE8A 343C 0038                  		move.w	#$38,d2
0000FE8E 6100 D49A                  		bsr.w	SmashObject
0000FE92 6100 DD2E                  		bsr.w	SingleObjLoad
0000FE96 6600                       		bne.s	Obj51_Display
0000FE98 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FE9C 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEA8 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FEAC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FEB0 0C42 0006                  		cmpi.w	#6,d2
0000FEB4 6500                       		bcs.s	Obj51_Bonus
0000FEB6 7406                       		moveq	#6,d2
0000FEB8                            
0000FEB8                            Obj51_Bonus:
0000FEB8 7000                       		moveq	#0,d0
0000FEBA 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FEBE 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FEC4 6500                       		bcs.s	loc_FD98	; if not, branch
0000FEC6 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FECA 740A                       		moveq	#10,d2
0000FECC                            
0000FECC                            loc_FD98:
0000FECC 4EB9 0000 0000             		jsr	AddPoints
0000FED2 E24A                       		lsr.w	#1,d2
0000FED4 1342 001A                  		move.b	d2,$1A(a1)
0000FED8                            
0000FED8                            Obj51_Display:				; XREF: Obj51_Index
0000FED8 6100 D83C                  		bsr.w	SpeedToPos
0000FEDC 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FEE2 6100 D858                  		bsr.w	DisplaySprite
0000FEE6 4A28 0001                  		tst.b	1(a0)
0000FEEA 6A00 D88C                  		bpl.w	DeleteObject
0000FEEE 4E75                       		rts	
0000FEF0                            ; ===========================================================================
0000FEF0 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FEF4 FF00 FF00                  		dc.w $FF00, $FF00
0000FEF8 0200 FE00                  		dc.w $200, $FE00
0000FEFC 0100 FF00                  		dc.w $100, $FF00
0000FF00                            
0000FF00 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            ; Sprite mappings - smashable green block (MZ)
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            Map_obj51:
0000FF08                            	include "_maps\obj51.asm"
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            ; Sprite mappings - smashable green block (MZ)
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08 0000                       		dc.w byte_FDD8-Map_obj51
0000FF0A 0000                       		dc.w byte_FDE3-Map_obj51
0000FF0C 02                         byte_FDD8:	dc.b 2
0000FF0D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FF12 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FF17 04                         byte_FDE3:	dc.b 4
0000FF18 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FF1D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FF22 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FF27 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FF2C                            		even
0000FF2C                            		even
0000FF2C                            
0000FF2C                            ; ===========================================================================
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            
0000FF2C                            Obj52:					; XREF: Obj_Index
0000FF2C 7000                       		moveq	#0,d0
0000FF2E 1028 0024                  		move.b	$24(a0),d0
0000FF32 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FF36 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FF3A                            ; ===========================================================================
0000FF3A 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FF3C 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FF3E 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FF40                            
0000FF40 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FF42 2001                       		dc.b $20, 1
0000FF44 2002                       		dc.b $20, 2
0000FF46 4003                       		dc.b $40, 3
0000FF48 3004                       		dc.b $30, 4
0000FF4A                            ; ===========================================================================
0000FF4A                            
0000FF4A                            Obj52_Main:				; XREF: Obj52_Index
0000FF4A 5428 0024                  		addq.b	#2,$24(a0)
0000FF4E 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FF56 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FF5C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FF62 6600                       		bne.s	loc_FE44
0000FF64 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FF6C 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FF72 117C 0007 0016             		move.b	#7,$16(a0)
0000FF78                            
0000FF78                            loc_FE44:
0000FF78 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FF7E 6600                       		bne.s	loc_FE60
0000FF80 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FF86 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FF8C 6700                       		beq.s	loc_FE60	; if yes, branch
0000FF8E 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FF94                            
0000FF94                            loc_FE60:
0000FF94 117C 0004 0001             		move.b	#4,1(a0)
0000FF9A 7000                       		moveq	#0,d0
0000FF9C 1028 0028                  		move.b	$28(a0),d0
0000FFA0 E648                       		lsr.w	#3,d0
0000FFA2 0240 001E                  		andi.w	#$1E,d0
0000FFA6 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FFAA 115A 0019                  		move.b	(a2)+,$19(a0)
0000FFAE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FFB2 117C 0004 0018             		move.b	#4,$18(a0)
0000FFB8 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FFBE 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FFC4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FFCA                            
0000FFCA                            Obj52_Platform:				; XREF: Obj52_Index
0000FFCA 6100 0000                  		bsr.w	Obj52_Move
0000FFCE 7200                       		moveq	#0,d1
0000FFD0 1228 0019                  		move.b	$19(a0),d1
0000FFD4 4EB9 0000 7552             		jsr	(PlatformObject).l
0000FFDA 6000                       		bra.s	Obj52_ChkDel
0000FFDC                            ; ===========================================================================
0000FFDC                            
0000FFDC                            Obj52_StandOn:				; XREF: Obj52_Index
0000FFDC 7200                       		moveq	#0,d1
0000FFDE 1228 0019                  		move.b	$19(a0),d1
0000FFE2 4EB9 0000 76C6             		jsr	(ExitPlatform).l
0000FFE8 3F28 0008                  		move.w	8(a0),-(sp)
0000FFEC 6100 0000                  		bsr.w	Obj52_Move
0000FFF0 341F                       		move.w	(sp)+,d2
0000FFF2 4EB9 0000 7C30             		jsr	(MvSonicOnPtfm2).l
0000FFF8                            
0000FFF8                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FFF8 3028 0030                  		move.w	$30(a0),d0
0000FFFC 0240 FF80                  		andi.w	#$FF80,d0
00010000 3238 F700                  		move.w	($FFFFF700).w,d1
00010004 0441 0080                  		subi.w	#$80,d1
00010008 0241 FF80                  		andi.w	#$FF80,d1
0001000C 9041                       		sub.w	d1,d0
0001000E 0C40 0280                  		cmpi.w	#$280,d0
00010012 6200 D764                  		bhi.w	DeleteObject
00010016 6000 D724                  		bra.w	DisplaySprite
0001001A                            ; ===========================================================================
0001001A                            
0001001A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001001A 7000                       		moveq	#0,d0
0001001C 1028 0028                  		move.b	$28(a0),d0
00010020 0240 000F                  		andi.w	#$F,d0
00010024 D040                       		add.w	d0,d0
00010026 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001002A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001002E                            ; ===========================================================================
0001002E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010032 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010036 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001003A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001003E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010042 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010044                            ; ===========================================================================
00010044                            
00010044                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010044 4E75                       		rts	
00010046                            ; ===========================================================================
00010046                            
00010046                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010046 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001004A 323C 0060                  		move.w	#$60,d1
0001004E 0828 0000 0022             		btst	#0,$22(a0)
00010054 6700                       		beq.s	loc_FF26
00010056 4440                       		neg.w	d0
00010058 D041                       		add.w	d1,d0
0001005A                            
0001005A                            loc_FF26:
0001005A 3228 0030                  		move.w	$30(a0),d1
0001005E 9240                       		sub.w	d0,d1
00010060 3141 0008                  		move.w	d1,8(a0)
00010064 4E75                       		rts	
00010066                            ; ===========================================================================
00010066                            
00010066                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010066 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001006C 6600                       		bne.s	Obj52_02_Wait
0001006E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010072                            
00010072                            Obj52_02_Wait:
00010072 4E75                       		rts	
00010074                            ; ===========================================================================
00010074                            
00010074                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010074 7600                       		moveq	#0,d3
00010076 1628 0019                  		move.b	$19(a0),d3
0001007A 6100 0000                  		bsr.w	ObjHitWallRight
0001007E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010080 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010082 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010086 3168 0008 0030             		move.w	8(a0),$30(a0)
0001008C 4E75                       		rts	
0001008E                            ; ===========================================================================
0001008E                            
0001008E                            Obj52_03_End:
0001008E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010092 4E75                       		rts	
00010094                            ; ===========================================================================
00010094                            
00010094                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010094 7600                       		moveq	#0,d3
00010096 1628 0019                  		move.b	$19(a0),d3
0001009A 6100 0000                  		bsr.w	ObjHitWallRight
0001009E 4A41                       		tst.w	d1		; has the platform hit a wall?
000100A0 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000100A2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000100A6 3168 0008 0030             		move.w	8(a0),$30(a0)
000100AC 4E75                       		rts	
000100AE                            ; ===========================================================================
000100AE                            
000100AE                            Obj52_05_End:
000100AE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000100B2 4E75                       		rts	
000100B4                            ; ===========================================================================
000100B4                            
000100B4                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000100B4 6100 D660                  		bsr.w	SpeedToPos
000100B8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000100BE 6100 0000                  		bsr.w	ObjHitFloor
000100C2 4A41                       		tst.w	d1		; has platform hit the floor?
000100C4 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000100C8 D368 000C                  		add.w	d1,$C(a0)
000100CC 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000100D0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000100D4                            
000100D4                            locret_FFA0:
000100D4 4E75                       		rts	
000100D6                            ; ===========================================================================
000100D6                            
000100D6                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000100D6 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000100DA 6700                       		beq.s	Obj52_07_ChkDel
000100DC 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000100E0                            
000100E0                            Obj52_07_ChkDel:
000100E0 588F                       		addq.l	#4,sp
000100E2 3028 0030                  		move.w	$30(a0),d0
000100E6 0240 FF80                  		andi.w	#$FF80,d0
000100EA 3238 F700                  		move.w	($FFFFF700).w,d1
000100EE 0441 0080                  		subi.w	#$80,d1
000100F2 0241 FF80                  		andi.w	#$FF80,d1
000100F6 9041                       		sub.w	d1,d0
000100F8 0C40 0280                  		cmpi.w	#$280,d0
000100FC 6200 D67A                  		bhi.w	DeleteObject
00010100 4E75                       		rts	
00010102                            ; ===========================================================================
00010102                            
00010102                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010102 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010106 323C 0080                  		move.w	#$80,d1
0001010A 0828 0000 0022             		btst	#0,$22(a0)
00010110 6700                       		beq.s	loc_FFE2
00010112 4440                       		neg.w	d0
00010114 D041                       		add.w	d1,d0
00010116                            
00010116                            loc_FFE2:
00010116 3228 0032                  		move.w	$32(a0),d1
0001011A 9240                       		sub.w	d0,d1
0001011C 3141 000C                  		move.w	d1,$C(a0)
00010120 4E75                       		rts	
00010122                            ; ===========================================================================
00010122                            
00010122                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010122 7600                       		moveq	#0,d3
00010124 1628 0019                  		move.b	$19(a0),d3
00010128 D643                       		add.w	d3,d3
0001012A 7208                       		moveq	#8,d1
0001012C 0828 0000 0022             		btst	#0,$22(a0)
00010132 6700                       		beq.s	loc_10004
00010134 4441                       		neg.w	d1
00010136 4443                       		neg.w	d3
00010138                            
00010138                            loc_10004:
00010138 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001013C 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001013E 3028 0008                  		move.w	8(a0),d0
00010142 9068 0030                  		sub.w	$30(a0),d0
00010146 B043                       		cmp.w	d3,d0
00010148 6700                       		beq.s	Obj52_0A_Wait
0001014A D368 0008                  		add.w	d1,8(a0)	; move platform
0001014E 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010154 4E75                       		rts	
00010156                            ; ===========================================================================
00010156                            
00010156                            Obj52_0A_Wait:
00010156 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001015A 6600                       		bne.s	locret_1002E	; if time remains, branch
0001015C 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010162                            
00010162                            locret_1002E:
00010162 4E75                       		rts	
00010164                            ; ===========================================================================
00010164                            
00010164                            Obj52_0A_Back:
00010164 3028 0008                  		move.w	8(a0),d0
00010168 9068 0030                  		sub.w	$30(a0),d0
0001016C 6700                       		beq.s	Obj52_0A_Reset
0001016E 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010172 4E75                       		rts	
00010174                            ; ===========================================================================
00010174                            
00010174                            Obj52_0A_Reset:
00010174 4268 0036                  		clr.w	$36(a0)
00010178 5328 0028                  		subq.b	#1,$28(a0)
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            Map_obj52:
0001017E                            	include "_maps\obj52mz.asm"
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001017E                            ; ---------------------------------------------------------------------------
0001017E 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010182 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010186 0000                       		dc.w byte_1008F-Map_obj52
00010188 01                         byte_10054:	dc.b 1
00010189 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001018E 02                         byte_1005A:	dc.b 2
0001018F F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010194 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010199 04                         byte_10065:	dc.b 4
0001019A F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001019F 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000101A4 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000101A9 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000101AE 04                         byte_1007A:	dc.b 4
000101AF F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000101B4 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000101B9 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000101BE F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000101C3 03                         byte_1008F:	dc.b 3
000101C4 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000101C9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000101CE F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000101D4 00                         		even
000101D4 00                         		even
000101D4                            
000101D4                            ; ---------------------------------------------------------------------------
000101D4                            ; Sprite mappings - moving block (LZ)
000101D4                            ; ---------------------------------------------------------------------------
000101D4                            Map_obj52a:
000101D4                            	include "_maps\obj52lz.asm"
000101D4                            ; ---------------------------------------------------------------------------
000101D4                            ; Sprite mappings - moving block (LZ)
000101D4                            ; ---------------------------------------------------------------------------
000101D4 0000                       		dc.w byte_100A2-Map_obj52a
000101D6 01                         byte_100A2:	dc.b 1
000101D7 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000101DC                            		even
000101DC                            		even
000101DC                            
000101DC                            ; ===========================================================================
000101DC                            ; ---------------------------------------------------------------------------
000101DC                            ; Object 55 - Basaran enemy (MZ)
000101DC                            ; ---------------------------------------------------------------------------
000101DC                            
000101DC                            Obj55:					; XREF: Obj_Index
000101DC 7000                       		moveq	#0,d0
000101DE 1028 0024                  		move.b	$24(a0),d0
000101E2 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000101E6 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000101EA                            ; ===========================================================================
000101EA 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000101EC 0000                       		dc.w Obj55_Action-Obj55_Index
000101EE                            ; ===========================================================================
000101EE                            
000101EE                            Obj55_Main:				; XREF: Obj55_Index
000101EE 5428 0024                  		addq.b	#2,$24(a0)
000101F2 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000101FA 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010200 117C 0004 0001             		move.b	#4,1(a0)
00010206 117C 000C 0016             		move.b	#$C,$16(a0)
0001020C 117C 0002 0018             		move.b	#2,$18(a0)
00010212 117C 000B 0020             		move.b	#$B,$20(a0)
00010218 117C 0010 0019             		move.b	#$10,$19(a0)
0001021E                            
0001021E                            Obj55_Action:				; XREF: Obj55_Index
0001021E 7000                       		moveq	#0,d0
00010220 1028 0025                  		move.b	$25(a0),d0
00010224 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010228 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001022C 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010232 6100 A5BA                  		bsr.w	AnimateSprite
00010236 6000 F5AC                  		bra.w	MarkObjGone
0001023A                            ; ===========================================================================
0001023A 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001023C 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001023E 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010240 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010242                            ; ===========================================================================
00010242                            
00010242                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010242 343C 0080                  		move.w	#$80,d2
00010246 6100 0000                  		bsr.w	Obj55_ChkSonic
0001024A 6400                       		bcc.s	Obj55_NoDrop
0001024C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010250 3140 0036                  		move.w	d0,$36(a0)
00010254 9068 000C                  		sub.w	$C(a0),d0
00010258 6500                       		bcs.s	Obj55_NoDrop
0001025A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001025E 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010260 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010264 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010266 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001026A D007                       		add.b	d7,d0
0001026C 0200 0007                  		andi.b	#7,d0
00010270 6600                       		bne.s	Obj55_NoDrop
00010272 117C 0001 001C             		move.b	#1,$1C(a0)
00010278 5428 0025                  		addq.b	#2,$25(a0)
0001027C                            
0001027C                            Obj55_NoDrop:
0001027C 4E75                       		rts	
0001027E                            ; ===========================================================================
0001027E                            
0001027E                            Obj55_DropFly:				; XREF: Obj55_Index2
0001027E 6100 D496                  		bsr.w	SpeedToPos
00010282 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010288 343C 0080                  		move.w	#$80,d2
0001028C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010290 3028 0036                  		move.w	$36(a0),d0
00010294 9068 000C                  		sub.w	$C(a0),d0
00010298 6500                       		bcs.s	Obj55_ChkDel
0001029A 0C40 0010                  		cmpi.w	#$10,d0
0001029E 6400                       		bcc.s	locret_10180
000102A0 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000102A4 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000102AA 117C 0002 001C             		move.b	#2,$1C(a0)
000102B0 5428 0025                  		addq.b	#2,$25(a0)
000102B4                            
000102B4                            locret_10180:
000102B4 4E75                       		rts	
000102B6                            ; ===========================================================================
000102B6                            
000102B6                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000102B6 4A28 0001                  		tst.b	1(a0)
000102BA 6A00 D4BC                  		bpl.w	DeleteObject
000102BE 4E75                       		rts	
000102C0                            ; ===========================================================================
000102C0                            
000102C0                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000102C0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000102C4 0200 000F                  		andi.b	#$F,d0
000102C8 6600                       		bne.s	loc_101A0
000102CA 303C 00C0                  		move.w	#$C0,d0
000102CE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flapping sound
000102D4                            
000102D4                            loc_101A0:
000102D4 6100 D440                  		bsr.w	SpeedToPos
000102D8 3038 D008                  		move.w	($FFFFD008).w,d0
000102DC 9068 0008                  		sub.w	8(a0),d0
000102E0 6400                       		bcc.s	loc_101B0
000102E2 4440                       		neg.w	d0
000102E4                            
000102E4                            loc_101B0:
000102E4 0C40 0080                  		cmpi.w	#$80,d0
000102E8 6500                       		bcs.s	locret_101C6
000102EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000102EE D007                       		add.b	d7,d0
000102F0 0200 0007                  		andi.b	#7,d0
000102F4 6600                       		bne.s	locret_101C6
000102F6 5428 0025                  		addq.b	#2,$25(a0)
000102FA                            
000102FA                            locret_101C6:
000102FA 4E75                       		rts	
000102FC                            ; ===========================================================================
000102FC                            
000102FC                            Obj55_FlyUp:				; XREF: Obj55_Index2
000102FC 6100 D418                  		bsr.w	SpeedToPos
00010300 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010306 6100 0000                  		bsr.w	ObjHitCeiling
0001030A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001030C 6A00                       		bpl.s	locret_101F4	; if not, branch
0001030E 9368 000C                  		sub.w	d1,$C(a0)
00010312 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010318 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001031C 4268 0012                  		clr.w	$12(a0)
00010320 4228 001C                  		clr.b	$1C(a0)
00010324 4228 0025                  		clr.b	$25(a0)
00010328                            
00010328                            locret_101F4:
00010328 4E75                       		rts	
0001032A                            ; ===========================================================================
0001032A                            
0001032A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001032A 323C 0100                  		move.w	#$100,d1
0001032E 08E8 0000 0022             		bset	#0,$22(a0)
00010334 3038 D008                  		move.w	($FFFFD008).w,d0
00010338 9068 0008                  		sub.w	8(a0),d0
0001033C 6400                       		bcc.s	loc_10214
0001033E 4440                       		neg.w	d0
00010340 4441                       		neg.w	d1
00010342 08A8 0000 0022             		bclr	#0,$22(a0)
00010348                            
00010348                            loc_10214:
00010348 B042                       		cmp.w	d2,d0
0001034A 4E75                       		rts	
0001034C                            ; ===========================================================================
0001034C 6100 D3C8                  		bsr.w	SpeedToPos
00010350 6100 D3EA                  		bsr.w	DisplaySprite
00010354 4A28 0001                  		tst.b	1(a0)
00010358 6A00 D41E                  		bpl.w	DeleteObject
0001035C 4E75                       		rts	
0001035E                            ; ===========================================================================
0001035E                            Ani_obj55:
0001035E                            	include "_anim\obj55.asm"
0001035E                            ; ---------------------------------------------------------------------------
0001035E                            ; Animation script - Basaran enemy
0001035E                            ; ---------------------------------------------------------------------------
0001035E 0000                       		dc.w byte_10230-Ani_obj55
00010360 0000                       		dc.w byte_10234-Ani_obj55
00010362 0000                       		dc.w byte_10238-Ani_obj55
00010364 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010368 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001036C 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010372                            		even
00010372                            		even
00010372                            
00010372                            ; ---------------------------------------------------------------------------
00010372                            ; Sprite mappings - Basaran enemy (MZ)
00010372                            ; ---------------------------------------------------------------------------
00010372                            Map_obj55:
00010372                            	include "_maps\obj55.asm"
00010372                            ; ---------------------------------------------------------------------------
00010372                            ; Sprite mappings - Basaran enemy (MZ)
00010372                            ; ---------------------------------------------------------------------------
00010372 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010376 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001037A 01                         byte_10246:	dc.b 1
0001037B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010380 03                         byte_1024C:	dc.b 3
00010381 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010386 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001038B 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010390 04                         byte_1025C:	dc.b 4
00010391 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010396 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001039B 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000103A0 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000103A5 04                         byte_10271:	dc.b 4
000103A6 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000103AB 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000103B0 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000103B5 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000103BA                            		even
000103BA                            		even
000103BA                            
000103BA                            ; ===========================================================================
000103BA                            ; ---------------------------------------------------------------------------
000103BA                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000103BA                            ; ---------------------------------------------------------------------------
000103BA                            
000103BA                            Obj56:					; XREF: Obj_Index
000103BA 7000                       		moveq	#0,d0
000103BC 1028 0024                  		move.b	$24(a0),d0
000103C0 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000103C4 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000103C8                            ; ===========================================================================
000103C8 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000103CA 0000                       		dc.w Obj56_Action-Obj56_Index
000103CC                            
000103CC 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000103CE 2020                       		dc.b  $20, $20
000103D0 1020                       		dc.b  $10, $20
000103D2 201A                       		dc.b  $20, $1A
000103D4 1027                       		dc.b  $10, $27
000103D6 1010                       		dc.b  $10, $10
000103D8 0820                       		dc.b	8, $20
000103DA 4010                       		dc.b  $40, $10
000103DC                            ; ===========================================================================
000103DC                            
000103DC                            Obj56_Main:				; XREF: Obj56_Index
000103DC 5428 0024                  		addq.b	#2,$24(a0)
000103E0 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000103E8 317C 4000 0002             		move.w	#$4000,2(a0)
000103EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103F4 6600                       		bne.s	loc_102C8
000103F6 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000103FC                            
000103FC                            loc_102C8:
000103FC 117C 0004 0001             		move.b	#4,1(a0)
00010402 117C 0003 0018             		move.b	#3,$18(a0)
00010408 7000                       		moveq	#0,d0
0001040A 1028 0028                  		move.b	$28(a0),d0
0001040E E648                       		lsr.w	#3,d0
00010410 0240 000E                  		andi.w	#$E,d0
00010414 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010418 115A 0019                  		move.b	(a2)+,$19(a0)
0001041C 1152 0016                  		move.b	(a2),$16(a0)
00010420 E248                       		lsr.w	#1,d0
00010422 1140 001A                  		move.b	d0,$1A(a0)
00010426 3168 0008 0034             		move.w	8(a0),$34(a0)
0001042C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010432 7000                       		moveq	#0,d0
00010434 1012                       		move.b	(a2),d0
00010436 D040                       		add.w	d0,d0
00010438 3140 003A                  		move.w	d0,$3A(a0)
0001043C 7000                       		moveq	#0,d0
0001043E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010444 6700                       		beq.s	loc_10332
00010446 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001044A 0240 000F                  		andi.w	#$F,d0
0001044E 5140                       		subq.w	#8,d0
00010450 6500                       		bcs.s	loc_10332
00010452 E548                       		lsl.w	#2,d0
00010454 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010458 45F2 0000                  		lea	(a2,d0.w),a2
0001045C 4A52                       		tst.w	(a2)
0001045E 6A00                       		bpl.s	loc_10332
00010460 0868 0000 0022             		bchg	#0,$22(a0)
00010466                            
00010466                            loc_10332:
00010466 1028 0028                  		move.b	$28(a0),d0
0001046A 6A00                       		bpl.s	Obj56_Action
0001046C 0200 000F                  		andi.b	#$F,d0
00010470 1140 003C                  		move.b	d0,$3C(a0)
00010474 117C 0005 0028             		move.b	#5,$28(a0)
0001047A 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010480 6600                       		bne.s	Obj56_ChkGone
00010482 117C 000C 0028             		move.b	#$C,$28(a0)
00010488 317C 0080 003A             		move.w	#$80,$3A(a0)
0001048E                            
0001048E                            Obj56_ChkGone:
0001048E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010492 7000                       		moveq	#0,d0
00010494 1028 0023                  		move.b	$23(a0),d0
00010498 6700                       		beq.s	Obj56_Action
0001049A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000104A0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000104A6 6700                       		beq.s	Obj56_Action
000104A8 5228 0028                  		addq.b	#1,$28(a0)
000104AC 4268 003A                  		clr.w	$3A(a0)
000104B0                            
000104B0                            Obj56_Action:				; XREF: Obj56_Index
000104B0 3F28 0008                  		move.w	8(a0),-(sp)
000104B4 7000                       		moveq	#0,d0
000104B6 1028 0028                  		move.b	$28(a0),d0	; get object type
000104BA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000104BE D040                       		add.w	d0,d0
000104C0 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000104C4 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000104C8 381F                       		move.w	(sp)+,d4
000104CA 4A28 0001                  		tst.b	1(a0)
000104CE 6A00                       		bpl.s	Obj56_ChkDel
000104D0 7200                       		moveq	#0,d1
000104D2 1228 0019                  		move.b	$19(a0),d1
000104D6 0641 000B                  		addi.w	#$B,d1
000104DA 7400                       		moveq	#0,d2
000104DC 1428 0016                  		move.b	$16(a0),d2
000104E0 3602                       		move.w	d2,d3
000104E2 5243                       		addq.w	#1,d3
000104E4 6100 F626                  		bsr.w	SolidObject
000104E8                            
000104E8                            Obj56_ChkDel:
000104E8 3028 0034                  		move.w	$34(a0),d0
000104EC 0240 FF80                  		andi.w	#$FF80,d0
000104F0 3238 F700                  		move.w	($FFFFF700).w,d1
000104F4 0441 0080                  		subi.w	#$80,d1
000104F8 0241 FF80                  		andi.w	#$FF80,d1
000104FC 9041                       		sub.w	d1,d0
000104FE 0C40 0280                  		cmpi.w	#$280,d0
00010502 6200 D274                  		bhi.w	DeleteObject
00010506 6000 D234                  		bra.w	DisplaySprite
0001050A                            ; ===========================================================================
0001050A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001050E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010512 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010516 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001051A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001051E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010522 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010526                            ; ===========================================================================
00010526                            
00010526                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010526 4E75                       		rts	
00010528                            ; ===========================================================================
00010528                            
00010528                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010528 323C 0040                  		move.w	#$40,d1
0001052C 7000                       		moveq	#0,d0
0001052E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010532 6000                       		bra.s	Obj56_Move_LR
00010534                            ; ===========================================================================
00010534                            
00010534                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010534 323C 0080                  		move.w	#$80,d1
00010538 7000                       		moveq	#0,d0
0001053A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001053E                            
0001053E                            Obj56_Move_LR:
0001053E 0828 0000 0022             		btst	#0,$22(a0)
00010544 6700                       		beq.s	loc_10416
00010546 4440                       		neg.w	d0
00010548 D041                       		add.w	d1,d0
0001054A                            
0001054A                            loc_10416:
0001054A 3228 0034                  		move.w	$34(a0),d1
0001054E 9240                       		sub.w	d0,d1
00010550 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010554 4E75                       		rts	
00010556                            ; ===========================================================================
00010556                            
00010556                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010556 323C 0040                  		move.w	#$40,d1
0001055A 7000                       		moveq	#0,d0
0001055C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010560 6000                       		bra.s	Obj56_Move_UD
00010562                            ; ===========================================================================
00010562                            
00010562                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010562 323C 0080                  		move.w	#$80,d1
00010566 7000                       		moveq	#0,d0
00010568 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001056C                            
0001056C                            Obj56_Move_UD:
0001056C 0828 0000 0022             		btst	#0,$22(a0)
00010572 6700                       		beq.s	loc_10444
00010574 4440                       		neg.w	d0
00010576 D041                       		add.w	d1,d0
00010578                            
00010578                            loc_10444:
00010578 3228 0030                  		move.w	$30(a0),d1
0001057C 9240                       		sub.w	d0,d1
0001057E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010582 4E75                       		rts	
00010584                            ; ===========================================================================
00010584                            
00010584                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010584 4A28 0038                  		tst.b	$38(a0)
00010588 6600                       		bne.s	loc_104A4
0001058A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010590 6600                       		bne.s	loc_1047A	; if not, branch
00010592 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010598 6600                       		bne.s	loc_1047A
0001059A 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001059E 3038 D008                  		move.w	($FFFFD008).w,d0
000105A2 B068 0008                  		cmp.w	8(a0),d0
000105A6 6400                       		bcc.s	loc_1047A
000105A8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000105AE                            
000105AE                            loc_1047A:
000105AE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000105B2 7000                       		moveq	#0,d0
000105B4 1028 003C                  		move.b	$3C(a0),d0
000105B8 0832 0000 0000             		btst	#0,(a2,d0.w)
000105BE 6700                       		beq.s	loc_104AE
000105C0 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000105C6 6600                       		bne.s	loc_1049E	; if not, branch
000105C8 0C00 0003                  		cmpi.b	#3,d0
000105CC 6600                       		bne.s	loc_1049E
000105CE 4238 F7C9                  		clr.b	($FFFFF7C9).w
000105D2                            
000105D2                            loc_1049E:
000105D2 117C 0001 0038             		move.b	#1,$38(a0)
000105D8                            
000105D8                            loc_104A4:
000105D8 4A68 003A                  		tst.w	$3A(a0)
000105DC 6700                       		beq.s	loc_104C8
000105DE 5568 003A                  		subq.w	#2,$3A(a0)
000105E2                            
000105E2                            loc_104AE:
000105E2 3028 003A                  		move.w	$3A(a0),d0
000105E6 0828 0000 0022             		btst	#0,$22(a0)
000105EC 6700                       		beq.s	loc_104BC
000105EE 4440                       		neg.w	d0
000105F0                            
000105F0                            loc_104BC:
000105F0 3228 0030                  		move.w	$30(a0),d1
000105F4 D240                       		add.w	d0,d1
000105F6 3141 000C                  		move.w	d1,$C(a0)
000105FA 4E75                       		rts	
000105FC                            ; ===========================================================================
000105FC                            
000105FC                            loc_104C8:
000105FC 5228 0028                  		addq.b	#1,$28(a0)
00010600 4228 0038                  		clr.b	$38(a0)
00010604 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010608 7000                       		moveq	#0,d0
0001060A 1028 0023                  		move.b	$23(a0),d0
0001060E 67D2                       		beq.s	loc_104AE
00010610 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010616 60CA                       		bra.s	loc_104AE
00010618                            ; ===========================================================================
00010618                            
00010618                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010618 4A28 0038                  		tst.b	$38(a0)
0001061C 6600                       		bne.s	loc_10500
0001061E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010622 7000                       		moveq	#0,d0
00010624 1028 003C                  		move.b	$3C(a0),d0
00010628 4A32 0000                  		tst.b	(a2,d0.w)
0001062C 6A00                       		bpl.s	loc_10512
0001062E 117C 0001 0038             		move.b	#1,$38(a0)
00010634                            
00010634                            loc_10500:
00010634 7000                       		moveq	#0,d0
00010636 1028 0016                  		move.b	$16(a0),d0
0001063A D040                       		add.w	d0,d0
0001063C B068 003A                  		cmp.w	$3A(a0),d0
00010640 6700                       		beq.s	loc_1052C
00010642 5468 003A                  		addq.w	#2,$3A(a0)
00010646                            
00010646                            loc_10512:
00010646 3028 003A                  		move.w	$3A(a0),d0
0001064A 0828 0000 0022             		btst	#0,$22(a0)
00010650 6700                       		beq.s	loc_10520
00010652 4440                       		neg.w	d0
00010654                            
00010654                            loc_10520:
00010654 3228 0030                  		move.w	$30(a0),d1
00010658 D240                       		add.w	d0,d1
0001065A 3141 000C                  		move.w	d1,$C(a0)
0001065E 4E75                       		rts	
00010660                            ; ===========================================================================
00010660                            
00010660                            loc_1052C:
00010660 5328 0028                  		subq.b	#1,$28(a0)
00010664 4228 0038                  		clr.b	$38(a0)
00010668 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001066C 7000                       		moveq	#0,d0
0001066E 1028 0023                  		move.b	$23(a0),d0
00010672 67D2                       		beq.s	loc_10512
00010674 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001067A 60CA                       		bra.s	loc_10512
0001067C                            ; ===========================================================================
0001067C                            
0001067C                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001067C 4A28 0038                  		tst.b	$38(a0)
00010680 6600                       		bne.s	loc_1055E
00010682 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010686 6700                       		beq.s	locret_10578
00010688 117C 0001 0038             		move.b	#1,$38(a0)
0001068E 4268 003A                  		clr.w	$3A(a0)
00010692                            
00010692                            loc_1055E:
00010692 5268 0008                  		addq.w	#1,8(a0)
00010696 3168 0008 0034             		move.w	8(a0),$34(a0)
0001069C 5268 003A                  		addq.w	#1,$3A(a0)
000106A0 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000106A6 6600                       		bne.s	locret_10578
000106A8 4228 0028                  		clr.b	$28(a0)
000106AC                            
000106AC                            locret_10578:
000106AC 4E75                       		rts	
000106AE                            ; ===========================================================================
000106AE                            
000106AE                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000106AE 4A28 0038                  		tst.b	$38(a0)
000106B2 6600                       		bne.s	loc_10598
000106B4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000106B8 7000                       		moveq	#0,d0
000106BA 1028 003C                  		move.b	$3C(a0),d0
000106BE 0832 0000 0000             		btst	#0,(a2,d0.w)
000106C4 6700                       		beq.s	loc_105A2
000106C6 117C 0001 0038             		move.b	#1,$38(a0)
000106CC                            
000106CC                            loc_10598:
000106CC 4A68 003A                  		tst.w	$3A(a0)
000106D0 6700                       		beq.s	loc_105C0
000106D2 5568 003A                  		subq.w	#2,$3A(a0)
000106D6                            
000106D6                            loc_105A2:
000106D6 3028 003A                  		move.w	$3A(a0),d0
000106DA 0828 0000 0022             		btst	#0,$22(a0)
000106E0 6700                       		beq.s	loc_105B4
000106E2 4440                       		neg.w	d0
000106E4 0640 0080                  		addi.w	#$80,d0
000106E8                            
000106E8                            loc_105B4:
000106E8 3228 0034                  		move.w	$34(a0),d1
000106EC D240                       		add.w	d0,d1
000106EE 3141 0008                  		move.w	d1,8(a0)
000106F2 4E75                       		rts	
000106F4                            ; ===========================================================================
000106F4                            
000106F4                            loc_105C0:
000106F4 5228 0028                  		addq.b	#1,$28(a0)
000106F8 4228 0038                  		clr.b	$38(a0)
000106FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010700 7000                       		moveq	#0,d0
00010702 1028 0023                  		move.b	$23(a0),d0
00010706 67CE                       		beq.s	loc_105A2
00010708 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001070E 60C6                       		bra.s	loc_105A2
00010710                            ; ===========================================================================
00010710                            
00010710                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010710 4A28 0038                  		tst.b	$38(a0)
00010714 6600                       		bne.s	loc_105F8
00010716 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001071A 7000                       		moveq	#0,d0
0001071C 1028 003C                  		move.b	$3C(a0),d0
00010720 4A32 0000                  		tst.b	(a2,d0.w)
00010724 6A00                       		bpl.s	loc_10606
00010726 117C 0001 0038             		move.b	#1,$38(a0)
0001072C                            
0001072C                            loc_105F8:
0001072C 303C 0080                  		move.w	#$80,d0
00010730 B068 003A                  		cmp.w	$3A(a0),d0
00010734 6700                       		beq.s	loc_10624
00010736 5468 003A                  		addq.w	#2,$3A(a0)
0001073A                            
0001073A                            loc_10606:
0001073A 3028 003A                  		move.w	$3A(a0),d0
0001073E 0828 0000 0022             		btst	#0,$22(a0)
00010744 6700                       		beq.s	loc_10618
00010746 4440                       		neg.w	d0
00010748 0640 0080                  		addi.w	#$80,d0
0001074C                            
0001074C                            loc_10618:
0001074C 3228 0034                  		move.w	$34(a0),d1
00010750 D240                       		add.w	d0,d1
00010752 3141 0008                  		move.w	d1,8(a0)
00010756 4E75                       		rts	
00010758                            ; ===========================================================================
00010758                            
00010758                            loc_10624:
00010758 5328 0028                  		subq.b	#1,$28(a0)
0001075C 4228 0038                  		clr.b	$38(a0)
00010760 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010764 7000                       		moveq	#0,d0
00010766 1028 0023                  		move.b	$23(a0),d0
0001076A 67CE                       		beq.s	loc_10606
0001076C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010772 60C6                       		bra.s	loc_10606
00010774                            ; ===========================================================================
00010774                            
00010774                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010774 323C 0010                  		move.w	#$10,d1
00010778 7000                       		moveq	#0,d0
0001077A 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001077E E248                       		lsr.w	#1,d0
00010780 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010784 6000                       		bra.s	Obj56_Move_Sqr
00010786                            ; ===========================================================================
00010786                            
00010786                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010786 323C 0030                  		move.w	#$30,d1
0001078A 7000                       		moveq	#0,d0
0001078C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010790 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010794 6000                       		bra.s	Obj56_Move_Sqr
00010796                            ; ===========================================================================
00010796                            
00010796                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010796 323C 0050                  		move.w	#$50,d1
0001079A 7000                       		moveq	#0,d0
0001079C 1038 FE90                  		move.b	($FFFFFE90).w,d0
000107A0 3638 FE92                  		move.w	($FFFFFE92).w,d3
000107A4 6000                       		bra.s	Obj56_Move_Sqr
000107A6                            ; ===========================================================================
000107A6                            
000107A6                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000107A6 323C 0070                  		move.w	#$70,d1
000107AA 7000                       		moveq	#0,d0
000107AC 1038 FE94                  		move.b	($FFFFFE94).w,d0
000107B0 3638 FE96                  		move.w	($FFFFFE96).w,d3
000107B4                            
000107B4                            Obj56_Move_Sqr:
000107B4 4A43                       		tst.w	d3
000107B6 6600                       		bne.s	loc_1068E
000107B8 5228 0022                  		addq.b	#1,$22(a0)
000107BC 0228 0003 0022             		andi.b	#3,$22(a0)
000107C2                            
000107C2                            loc_1068E:
000107C2 1428 0022                  		move.b	$22(a0),d2
000107C6 0202 0003                  		andi.b	#3,d2
000107CA 6600                       		bne.s	loc_106AE
000107CC 9041                       		sub.w	d1,d0
000107CE D068 0034                  		add.w	$34(a0),d0
000107D2 3140 0008                  		move.w	d0,8(a0)
000107D6 4441                       		neg.w	d1
000107D8 D268 0030                  		add.w	$30(a0),d1
000107DC 3141 000C                  		move.w	d1,$C(a0)
000107E0 4E75                       		rts	
000107E2                            ; ===========================================================================
000107E2                            
000107E2                            loc_106AE:
000107E2 5302                       		subq.b	#1,d2
000107E4 6600                       		bne.s	loc_106CC
000107E6 5341                       		subq.w	#1,d1
000107E8 9041                       		sub.w	d1,d0
000107EA 4440                       		neg.w	d0
000107EC D068 0030                  		add.w	$30(a0),d0
000107F0 3140 000C                  		move.w	d0,$C(a0)
000107F4 5241                       		addq.w	#1,d1
000107F6 D268 0034                  		add.w	$34(a0),d1
000107FA 3141 0008                  		move.w	d1,8(a0)
000107FE 4E75                       		rts	
00010800                            ; ===========================================================================
00010800                            
00010800                            loc_106CC:
00010800 5302                       		subq.b	#1,d2
00010802 6600                       		bne.s	loc_106EA
00010804 5341                       		subq.w	#1,d1
00010806 9041                       		sub.w	d1,d0
00010808 4440                       		neg.w	d0
0001080A D068 0034                  		add.w	$34(a0),d0
0001080E 3140 0008                  		move.w	d0,8(a0)
00010812 5241                       		addq.w	#1,d1
00010814 D268 0030                  		add.w	$30(a0),d1
00010818 3141 000C                  		move.w	d1,$C(a0)
0001081C 4E75                       		rts	
0001081E                            ; ===========================================================================
0001081E                            
0001081E                            loc_106EA:
0001081E 9041                       		sub.w	d1,d0
00010820 D068 0030                  		add.w	$30(a0),d0
00010824 3140 000C                  		move.w	d0,$C(a0)
00010828 4441                       		neg.w	d1
0001082A D268 0034                  		add.w	$34(a0),d1
0001082E 3141 0008                  		move.w	d1,8(a0)
00010832 4E75                       		rts	
00010834                            ; ===========================================================================
00010834                            ; ---------------------------------------------------------------------------
00010834                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010834                            ; ---------------------------------------------------------------------------
00010834                            Map_obj56:
00010834                            	include "_maps\obj56.asm"
00010834                            ; ---------------------------------------------------------------------------
00010834                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010834                            ; ---------------------------------------------------------------------------
00010834 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010838 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001083C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010840 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010844 01                         byte_10710:	dc.b 1
00010845 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001084A 04                         byte_10716:	dc.b 4
0001084B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010850 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010855 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001085A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001085F 02                         byte_1072B:	dc.b 2
00010860 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010865 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001086A 04                         byte_10736:	dc.b 4
0001086B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010870 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010875 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001087A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001087F 03                         byte_1074B:	dc.b 3
00010880 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010885 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001088A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001088F 01                         byte_1075B:	dc.b 1
00010890 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010895 02                         byte_10761:	dc.b 2
00010896 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001089B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000108A0 04                         byte_1076C:	dc.b 4
000108A1 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000108A6 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000108AB F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000108B0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000108B6 00                         		even
000108B6 00                         		even
000108B6                            
000108B6                            ; ===========================================================================
000108B6                            ; ---------------------------------------------------------------------------
000108B6                            ; Object 57 - spiked balls (SYZ, LZ)
000108B6                            ; ---------------------------------------------------------------------------
000108B6                            
000108B6                            Obj57:					; XREF: Obj_Index
000108B6 7000                       		moveq	#0,d0
000108B8 1028 0024                  		move.b	$24(a0),d0
000108BC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000108C0 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000108C4                            ; ===========================================================================
000108C4 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000108C6 0000                       		dc.w Obj57_Move-Obj57_Index
000108C8 0000                       		dc.w Obj57_Display-Obj57_Index
000108CA                            ; ===========================================================================
000108CA                            
000108CA                            Obj57_Main:				; XREF: Obj57_Index
000108CA 5428 0024                  		addq.b	#2,$24(a0)
000108CE 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000108D6 317C 03BA 0002             		move.w	#$3BA,2(a0)
000108DC 117C 0004 0001             		move.b	#4,1(a0)
000108E2 117C 0004 0018             		move.b	#4,$18(a0)
000108E8 117C 0008 0019             		move.b	#8,$19(a0)
000108EE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000108F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000108FA 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010900 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010906 6600                       		bne.s	loc_107E8
00010908 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001090E 317C 0310 0002             		move.w	#$310,2(a0)
00010914 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001091C                            
0001091C                            loc_107E8:
0001091C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010920 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010924 4881                       		ext.w	d1
00010926 E741                       		asl.w	#3,d1		; multiply by 8
00010928 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001092C 1028 0022                  		move.b	$22(a0),d0
00010930 E418                       		ror.b	#2,d0
00010932 0200 00C0                  		andi.b	#-$40,d0
00010936 1140 0026                  		move.b	d0,$26(a0)
0001093A 45E8 0029                  		lea	$29(a0),a2
0001093E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010942 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010946 14FC 0000                  		move.b	#0,(a2)+
0001094A 3601                       		move.w	d1,d3
0001094C E94B                       		lsl.w	#4,d3
0001094E 1143 003C                  		move.b	d3,$3C(a0)
00010952 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010954 6500                       		bcs.s	loc_10894
00010956 0828 0003 0028             		btst	#3,$28(a0)
0001095C 6700                       		beq.s	Obj57_MakeChain
0001095E 5341                       		subq.w	#1,d1
00010960 6500                       		bcs.s	loc_10894
00010962                            
00010962                            Obj57_MakeChain:
00010962 6100 D25E                  		bsr.w	SingleObjLoad
00010966 6600                       		bne.s	loc_10894
00010968 5228 0029                  		addq.b	#1,$29(a0)
0001096C 3A09                       		move.w	a1,d5
0001096E 0445 D000                  		subi.w	#-$3000,d5
00010972 EC4D                       		lsr.w	#6,d5
00010974 0245 007F                  		andi.w	#$7F,d5
00010978 14C5                       		move.b	d5,(a2)+
0001097A 137C 0004 0024             		move.b	#4,$24(a1)
00010980 1290                       		move.b	0(a0),0(a1)
00010982 2368 0004 0004             		move.l	4(a0),4(a1)
00010988 3368 0002 0002             		move.w	2(a0),2(a1)
0001098E 1368 0001 0001             		move.b	1(a0),1(a1)
00010994 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001099A 1368 0019 0019             		move.b	$19(a0),$19(a1)
000109A0 1368 0020 0020             		move.b	$20(a0),$20(a1)
000109A6 0403 0010                  		subi.b	#$10,d3
000109AA 1343 003C                  		move.b	d3,$3C(a1)
000109AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000109B4 6600                       		bne.s	loc_10890
000109B6 4A03                       		tst.b	d3
000109B8 6600                       		bne.s	loc_10890
000109BA 137C 0002 001A             		move.b	#2,$1A(a1)
000109C0                            
000109C0                            loc_10890:
000109C0 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000109C4                            
000109C4                            loc_10894:
000109C4 3A08                       		move.w	a0,d5
000109C6 0445 D000                  		subi.w	#-$3000,d5
000109CA EC4D                       		lsr.w	#6,d5
000109CC 0245 007F                  		andi.w	#$7F,d5
000109D0 14C5                       		move.b	d5,(a2)+
000109D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000109D8 6600                       		bne.s	Obj57_Move
000109DA 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000109E0 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000109E6                            
000109E6                            Obj57_Move:				; XREF: Obj57_Index
000109E6 6100 0000                  		bsr.w	Obj57_MoveSub
000109EA 6000 0000                  		bra.w	Obj57_ChkDel
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj57_MoveSub:				; XREF: Obj57_Move
000109EE 3028 003E                  		move.w	$3E(a0),d0
000109F2 D168 0026                  		add.w	d0,$26(a0)
000109F6 1028 0026                  		move.b	$26(a0),d0
000109FA 4EB9 0000 29DA             		jsr	(CalcSine).l
00010A00 3428 0038                  		move.w	$38(a0),d2
00010A04 3628 003A                  		move.w	$3A(a0),d3
00010A08 45E8 0029                  		lea	$29(a0),a2
00010A0C 7C00                       		moveq	#0,d6
00010A0E 1C1A                       		move.b	(a2)+,d6
00010A10                            
00010A10                            Obj57_MoveLoop:
00010A10 7800                       		moveq	#0,d4
00010A12 181A                       		move.b	(a2)+,d4
00010A14 ED4C                       		lsl.w	#6,d4
00010A16 0684 00FF D000             		addi.l	#$FFD000,d4
00010A1C 2244                       		movea.l	d4,a1
00010A1E 7800                       		moveq	#0,d4
00010A20 1829 003C                  		move.b	$3C(a1),d4
00010A24 2A04                       		move.l	d4,d5
00010A26 C9C0                       		muls.w	d0,d4
00010A28 E084                       		asr.l	#8,d4
00010A2A CBC1                       		muls.w	d1,d5
00010A2C E085                       		asr.l	#8,d5
00010A2E D842                       		add.w	d2,d4
00010A30 DA43                       		add.w	d3,d5
00010A32 3344 000C                  		move.w	d4,$C(a1)
00010A36 3345 0008                  		move.w	d5,8(a1)
00010A3A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010A3E 4E75                       		rts	
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj57_ChkDel:				; XREF: Obj57_Move
00010A40 3028 003A                  		move.w	$3A(a0),d0
00010A44 0240 FF80                  		andi.w	#$FF80,d0
00010A48 3238 F700                  		move.w	($FFFFF700).w,d1
00010A4C 0441 0080                  		subi.w	#$80,d1
00010A50 0241 FF80                  		andi.w	#$FF80,d1
00010A54 9041                       		sub.w	d1,d0
00010A56 0C40 0280                  		cmpi.w	#$280,d0
00010A5A 6200 0000                  		bhi.w	Obj57_Delete
00010A5E 6000 CCDC                  		bra.w	DisplaySprite
00010A62                            ; ===========================================================================
00010A62                            
00010A62                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010A62 7400                       		moveq	#0,d2
00010A64 45E8 0029                  		lea	$29(a0),a2
00010A68 141A                       		move.b	(a2)+,d2
00010A6A                            
00010A6A                            Obj57_DelLoop:
00010A6A 7000                       		moveq	#0,d0
00010A6C 101A                       		move.b	(a2)+,d0
00010A6E ED48                       		lsl.w	#6,d0
00010A70 0680 00FF D000             		addi.l	#$FFD000,d0
00010A76 2240                       		movea.l	d0,a1
00010A78 6100 CD00                  		bsr.w	DeleteObject2
00010A7C 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010A80                            
00010A80 4E75                       		rts	
00010A82                            ; ===========================================================================
00010A82                            
00010A82                            Obj57_Display:				; XREF: Obj57_Index
00010A82 6000 CCB8                  		bra.w	DisplaySprite
00010A86                            ; ===========================================================================
00010A86                            ; ---------------------------------------------------------------------------
00010A86                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A86                            ; ---------------------------------------------------------------------------
00010A86                            Map_obj57:
00010A86                            	include "_maps\obj57syz.asm"
00010A86                            ; ---------------------------------------------------------------------------
00010A86                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A86                            ; ---------------------------------------------------------------------------
00010A86 0000                       		dc.w byte_10958-Map_obj57
00010A88 01                         byte_10958:	dc.b 1
00010A89 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A8E                            		even
00010A8E                            		even
00010A8E                            
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E                            Map_obj57a:
00010A8E                            	include "_maps\obj57lz.asm"
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E 0000                       		dc.w byte_10964-Map_obj57a
00010A90 0000                       		dc.w byte_1096A-Map_obj57a
00010A92 0000                       		dc.w byte_10970-Map_obj57a
00010A94 01                         byte_10964:	dc.b 1
00010A95 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A9A 01                         byte_1096A:	dc.b 1
00010A9B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010AA0 01                         byte_10970:	dc.b 1
00010AA1 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010AA6                            		even
00010AA6                            		even
00010AA6                            
00010AA6                            ; ===========================================================================
00010AA6                            ; ---------------------------------------------------------------------------
00010AA6                            ; Object 58 - giant spiked balls (SYZ)
00010AA6                            ; ---------------------------------------------------------------------------
00010AA6                            
00010AA6                            Obj58:					; XREF: Obj_Index
00010AA6 7000                       		moveq	#0,d0
00010AA8 1028 0024                  		move.b	$24(a0),d0
00010AAC 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010AB0 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010AB4                            ; ===========================================================================
00010AB4 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010AB6 0000                       		dc.w Obj58_Move-Obj58_Index
00010AB8                            ; ===========================================================================
00010AB8                            
00010AB8                            Obj58_Main:				; XREF: Obj58_Index
00010AB8 5428 0024                  		addq.b	#2,$24(a0)
00010ABC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010AC4 317C 0396 0002             		move.w	#$396,2(a0)
00010ACA 117C 0004 0001             		move.b	#4,1(a0)
00010AD0 117C 0004 0018             		move.b	#4,$18(a0)
00010AD6 117C 0018 0019             		move.b	#$18,$19(a0)
00010ADC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010AE2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010AE8 117C 0086 0020             		move.b	#$86,$20(a0)
00010AEE 1228 0028                  		move.b	$28(a0),d1	; get object type
00010AF2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010AF6 4881                       		ext.w	d1
00010AF8 E741                       		asl.w	#3,d1		; multiply by 8
00010AFA 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010AFE 1028 0022                  		move.b	$22(a0),d0
00010B02 E418                       		ror.b	#2,d0
00010B04 0200 00C0                  		andi.b	#$C0,d0
00010B08 1140 0026                  		move.b	d0,$26(a0)
00010B0C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010B12                            
00010B12                            Obj58_Move:				; XREF: Obj58_Index
00010B12 7000                       		moveq	#0,d0
00010B14 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B18 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010B1C D040                       		add.w	d0,d0
00010B1E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010B22 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010B26 3028 003A                  		move.w	$3A(a0),d0
00010B2A 0240 FF80                  		andi.w	#$FF80,d0
00010B2E 3238 F700                  		move.w	($FFFFF700).w,d1
00010B32 0441 0080                  		subi.w	#$80,d1
00010B36 0241 FF80                  		andi.w	#$FF80,d1
00010B3A 9041                       		sub.w	d1,d0
00010B3C 0C40 0280                  		cmpi.w	#$280,d0
00010B40 6200 CC36                  		bhi.w	DeleteObject
00010B44 6000 CBF6                  		bra.w	DisplaySprite
00010B48                            ; ===========================================================================
00010B48 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010B4A 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010B4C 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010B4E 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010B50                            ; ===========================================================================
00010B50                            
00010B50                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010B50 4E75                       		rts	
00010B52                            ; ===========================================================================
00010B52                            
00010B52                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010B52 323C 0060                  		move.w	#$60,d1
00010B56 7000                       		moveq	#0,d0
00010B58 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010B5C 0828 0000 0022             		btst	#0,$22(a0)
00010B62 6700                       		beq.s	loc_10A38
00010B64 4440                       		neg.w	d0
00010B66 D041                       		add.w	d1,d0
00010B68                            
00010B68                            loc_10A38:
00010B68 3228 003A                  		move.w	$3A(a0),d1
00010B6C 9240                       		sub.w	d0,d1
00010B6E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010B72 4E75                       		rts	
00010B74                            ; ===========================================================================
00010B74                            
00010B74                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010B74 323C 0060                  		move.w	#$60,d1
00010B78 7000                       		moveq	#0,d0
00010B7A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010B7E 0828 0000 0022             		btst	#0,$22(a0)
00010B84 6700                       		beq.s	loc_10A5C
00010B86 4440                       		neg.w	d0
00010B88 0640 0080                  		addi.w	#$80,d0
00010B8C                            
00010B8C                            loc_10A5C:
00010B8C 3228 0038                  		move.w	$38(a0),d1
00010B90 9240                       		sub.w	d0,d1
00010B92 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010B96 4E75                       		rts	
00010B98                            ; ===========================================================================
00010B98                            
00010B98                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010B98 3028 003E                  		move.w	$3E(a0),d0
00010B9C D168 0026                  		add.w	d0,$26(a0)
00010BA0 1028 0026                  		move.b	$26(a0),d0
00010BA4 4EB9 0000 29DA             		jsr	(CalcSine).l
00010BAA 3428 0038                  		move.w	$38(a0),d2
00010BAE 3628 003A                  		move.w	$3A(a0),d3
00010BB2 7800                       		moveq	#0,d4
00010BB4 1828 003C                  		move.b	$3C(a0),d4
00010BB8 2A04                       		move.l	d4,d5
00010BBA C9C0                       		muls.w	d0,d4
00010BBC E084                       		asr.l	#8,d4
00010BBE CBC1                       		muls.w	d1,d5
00010BC0 E085                       		asr.l	#8,d5
00010BC2 D842                       		add.w	d2,d4
00010BC4 DA43                       		add.w	d3,d5
00010BC6 3144 000C                  		move.w	d4,$C(a0)
00010BCA 3145 0008                  		move.w	d5,8(a0)
00010BCE 4E75                       		rts	
00010BD0                            ; ===========================================================================
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0                            ; Sprite mappings - SBZ	spiked ball on a chain
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0                            Map_obj15b:
00010BD0                            	include "_maps\obj15sbz.asm"
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010BD4 0000                       		dc.w byte_10AC6-Map_obj15b
00010BD6 05                         byte_10AA6:	dc.b 5
00010BD7 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010BDC F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010BE1 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010BE6 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010BEB 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010BF0 01                         byte_10AC0:	dc.b 1
00010BF1 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010BF6 02                         byte_10AC6:	dc.b 2
00010BF7 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010BFC E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010C02 00                         		even
00010C02 00                         		even
00010C02                            
00010C02                            ; ===========================================================================
00010C02                            ; ---------------------------------------------------------------------------
00010C02                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010C02                            ; ---------------------------------------------------------------------------
00010C02                            
00010C02                            Obj59:					; XREF: Obj_Index
00010C02 7000                       		moveq	#0,d0
00010C04 1028 0024                  		move.b	$24(a0),d0
00010C08 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010C0C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010C10 3028 0032                  		move.w	$32(a0),d0
00010C14 0240 FF80                  		andi.w	#$FF80,d0
00010C18 3238 F700                  		move.w	($FFFFF700).w,d1
00010C1C 0441 0080                  		subi.w	#$80,d1
00010C20 0241 FF80                  		andi.w	#$FF80,d1
00010C24 9041                       		sub.w	d1,d0
00010C26 0C40 0280                  		cmpi.w	#$280,d0
00010C2A 6200 CB4C                  		bhi.w	DeleteObject
00010C2E 6000 CB0C                  		bra.w	DisplaySprite
00010C32                            ; ===========================================================================
00010C32 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010C34 0000                       		dc.w Obj59_Platform-Obj59_Index
00010C36 0000                       		dc.w Obj59_Action-Obj59_Index
00010C38 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010C3A                            
00010C3A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010C3C                            
00010C3C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010C3E 2001                       		dc.b $20, 1
00010C40 3401                       		dc.b $34, 1
00010C42 1003                       		dc.b $10, 3
00010C44 2003                       		dc.b $20, 3
00010C46 3403                       		dc.b $34, 3
00010C48 1401                       		dc.b $14, 1
00010C4A 2401                       		dc.b $24, 1
00010C4C 2C01                       		dc.b $2C, 1
00010C4E 1403                       		dc.b $14, 3
00010C50 2403                       		dc.b $24, 3
00010C52 2C03                       		dc.b $2C, 3
00010C54 2005                       		dc.b $20, 5
00010C56 2007                       		dc.b $20, 7
00010C58 3009                       		dc.b $30, 9
00010C5A                            ; ===========================================================================
00010C5A                            
00010C5A                            Obj59_Main:				; XREF: Obj59_Index
00010C5A 5428 0024                  		addq.b	#2,$24(a0)
00010C5E 7000                       		moveq	#0,d0
00010C60 1028 0028                  		move.b	$28(a0),d0
00010C64 6A00                       		bpl.s	Obj59_Main2
00010C66 5828 0024                  		addq.b	#4,$24(a0)
00010C6A 0240 007F                  		andi.w	#$7F,d0
00010C6E C0FC 0006                  		mulu.w	#6,d0
00010C72 3140 003C                  		move.w	d0,$3C(a0)
00010C76 3140 003E                  		move.w	d0,$3E(a0)
00010C7A 588F                       		addq.l	#4,sp
00010C7C 4E75                       		rts	
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            Obj59_Main2:
00010C7E E648                       		lsr.w	#3,d0
00010C80 0240 001E                  		andi.w	#$1E,d0
00010C84 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010C88 115A 0019                  		move.b	(a2)+,$19(a0)
00010C8C 115A 001A                  		move.b	(a2)+,$1A(a0)
00010C90 7000                       		moveq	#0,d0
00010C92 1028 0028                  		move.b	$28(a0),d0
00010C96 D040                       		add.w	d0,d0
00010C98 0240 001E                  		andi.w	#$1E,d0
00010C9C 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010CA0 101A                       		move.b	(a2)+,d0
00010CA2 E548                       		lsl.w	#2,d0
00010CA4 3140 003C                  		move.w	d0,$3C(a0)
00010CA8 115A 0028                  		move.b	(a2)+,$28(a0)
00010CAC 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010CB4 317C 4000 0002             		move.w	#$4000,2(a0)
00010CBA 117C 0004 0001             		move.b	#4,1(a0)
00010CC0 117C 0004 0018             		move.b	#4,$18(a0)
00010CC6 3168 0008 0032             		move.w	8(a0),$32(a0)
00010CCC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010CD2                            
00010CD2                            Obj59_Platform:				; XREF: Obj59_Index
00010CD2 7200                       		moveq	#0,d1
00010CD4 1228 0019                  		move.b	$19(a0),d1
00010CD8 4EB9 0000 7552             		jsr	(PlatformObject).l
00010CDE 6000 0000                  		bra.w	Obj59_Types
00010CE2                            ; ===========================================================================
00010CE2                            
00010CE2                            Obj59_Action:				; XREF: Obj59_Index
00010CE2 7200                       		moveq	#0,d1
00010CE4 1228 0019                  		move.b	$19(a0),d1
00010CE8 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010CEE 3F28 0008                  		move.w	8(a0),-(sp)
00010CF2 6100 0000                  		bsr.w	Obj59_Types
00010CF6 341F                       		move.w	(sp)+,d2
00010CF8 4A10                       		tst.b	0(a0)
00010CFA 6700                       		beq.s	locret_10BD4
00010CFC 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00010D02                            ; ===========================================================================
00010D02                            
00010D02                            locret_10BD4:
00010D02 4E75                       		rts	
00010D04                            ; ===========================================================================
00010D04                            
00010D04                            Obj59_Types:
00010D04 7000                       		moveq	#0,d0
00010D06 1028 0028                  		move.b	$28(a0),d0
00010D0A 0240 000F                  		andi.w	#$F,d0
00010D0E D040                       		add.w	d0,d0
00010D10 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010D14 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010D18                            ; ===========================================================================
00010D18 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D1C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D20 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D24 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D28 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010D2C                            ; ===========================================================================
00010D2C                            
00010D2C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010D2C 4E75                       		rts	
00010D2E                            ; ===========================================================================
00010D2E                            
00010D2E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010D2E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010D34 6600                       		bne.s	locret_10C0C
00010D36 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010D3A                            
00010D3A                            locret_10C0C:
00010D3A 4E75                       		rts	
00010D3C                            ; ===========================================================================
00010D3C                            
00010D3C                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010D3C 6100 0000                  		bsr.w	Obj59_Move
00010D40 3028 0034                  		move.w	$34(a0),d0
00010D44 4440                       		neg.w	d0
00010D46 D068 0030                  		add.w	$30(a0),d0
00010D4A 3140 000C                  		move.w	d0,$C(a0)
00010D4E 4E75                       		rts	
00010D50                            ; ===========================================================================
00010D50                            
00010D50                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010D50 6100 0000                  		bsr.w	Obj59_Move
00010D54 3028 0034                  		move.w	$34(a0),d0
00010D58 D068 0030                  		add.w	$30(a0),d0
00010D5C 3140 000C                  		move.w	d0,$C(a0)
00010D60 4E75                       		rts	
00010D62                            ; ===========================================================================
00010D62                            
00010D62                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010D62 6100 0000                  		bsr.w	Obj59_Move
00010D66 3028 0034                  		move.w	$34(a0),d0
00010D6A E240                       		asr.w	#1,d0
00010D6C 4440                       		neg.w	d0
00010D6E D068 0030                  		add.w	$30(a0),d0
00010D72 3140 000C                  		move.w	d0,$C(a0)
00010D76 3028 0034                  		move.w	$34(a0),d0
00010D7A D068 0032                  		add.w	$32(a0),d0
00010D7E 3140 0008                  		move.w	d0,8(a0)
00010D82 4E75                       		rts	
00010D84                            ; ===========================================================================
00010D84                            
00010D84                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010D84 6100 0000                  		bsr.w	Obj59_Move
00010D88 3028 0034                  		move.w	$34(a0),d0
00010D8C E240                       		asr.w	#1,d0
00010D8E D068 0030                  		add.w	$30(a0),d0
00010D92 3140 000C                  		move.w	d0,$C(a0)
00010D96 3028 0034                  		move.w	$34(a0),d0
00010D9A 4440                       		neg.w	d0
00010D9C D068 0032                  		add.w	$32(a0),d0
00010DA0 3140 0008                  		move.w	d0,8(a0)
00010DA4 4E75                       		rts	
00010DA6                            ; ===========================================================================
00010DA6                            
00010DA6                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010DA6 6100 0000                  		bsr.w	Obj59_Move
00010DAA 3028 0034                  		move.w	$34(a0),d0
00010DAE 4440                       		neg.w	d0
00010DB0 D068 0030                  		add.w	$30(a0),d0
00010DB4 3140 000C                  		move.w	d0,$C(a0)
00010DB8 4A28 0028                  		tst.b	$28(a0)
00010DBC 6700 0000                  		beq.w	loc_10C94
00010DC0 4E75                       		rts	
00010DC2                            ; ===========================================================================
00010DC2                            
00010DC2                            loc_10C94:
00010DC2 0828 0003 0022             		btst	#3,$22(a0)
00010DC8 6700                       		beq.s	Obj59_Delete
00010DCA 08E9 0001 0022             		bset	#1,$22(a1)
00010DD0 08A9 0003 0022             		bclr	#3,$22(a1)
00010DD6 137C 0002 0024             		move.b	#2,$24(a1)
00010DDC                            
00010DDC                            Obj59_Delete:
00010DDC 6000 C99A                  		bra.w	DeleteObject
00010DE0                            
00010DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010DE0                            
00010DE0                            
00010DE0                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010DE0 3028 0038                  		move.w	$38(a0),d0
00010DE4 4A28 003A                  		tst.b	$3A(a0)
00010DE8 6600                       		bne.s	loc_10CC8
00010DEA 0C40 0800                  		cmpi.w	#$800,d0
00010DEE 6400                       		bcc.s	loc_10CD0
00010DF0 0640 0010                  		addi.w	#$10,d0
00010DF4 6000                       		bra.s	loc_10CD0
00010DF6                            ; ===========================================================================
00010DF6                            
00010DF6                            loc_10CC8:
00010DF6 4A40                       		tst.w	d0
00010DF8 6700                       		beq.s	loc_10CD0
00010DFA 0440 0010                  		subi.w	#$10,d0
00010DFE                            
00010DFE                            loc_10CD0:
00010DFE 3140 0038                  		move.w	d0,$38(a0)
00010E02 48C0                       		ext.l	d0
00010E04 E180                       		asl.l	#8,d0
00010E06 D0A8 0034                  		add.l	$34(a0),d0
00010E0A 2140 0034                  		move.l	d0,$34(a0)
00010E0E 4840                       		swap	d0
00010E10 3428 003C                  		move.w	$3C(a0),d2
00010E14 B042                       		cmp.w	d2,d0
00010E16 6300                       		bls.s	loc_10CF0
00010E18 117C 0001 003A             		move.b	#1,$3A(a0)
00010E1E                            
00010E1E                            loc_10CF0:
00010E1E D442                       		add.w	d2,d2
00010E20 B042                       		cmp.w	d2,d0
00010E22 6600                       		bne.s	locret_10CFA
00010E24 4228 0028                  		clr.b	$28(a0)
00010E28                            
00010E28                            locret_10CFA:
00010E28 4E75                       		rts	
00010E2A                            ; End of function Obj59_Move
00010E2A                            
00010E2A                            ; ===========================================================================
00010E2A                            
00010E2A                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010E2A 5368 003C                  		subq.w	#1,$3C(a0)
00010E2E 6600                       		bne.s	Obj59_ChkDel
00010E30 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010E36 6100 CD8A                  		bsr.w	SingleObjLoad
00010E3A 6600                       		bne.s	Obj59_ChkDel
00010E3C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010E40 3368 0008 0008             		move.w	8(a0),8(a1)
00010E46 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010E4C 137C 000E 0028             		move.b	#$E,$28(a1)
00010E52                            
00010E52                            Obj59_ChkDel:
00010E52 588F                       		addq.l	#4,sp
00010E54 3028 0008                  		move.w	8(a0),d0
00010E58 0240 FF80                  		andi.w	#$FF80,d0
00010E5C 3238 F700                  		move.w	($FFFFF700).w,d1
00010E60 0441 0080                  		subi.w	#$80,d1
00010E64 0241 FF80                  		andi.w	#$FF80,d1
00010E68 9041                       		sub.w	d1,d0
00010E6A 0C40 0280                  		cmpi.w	#$280,d0
00010E6E 6200 C908                  		bhi.w	DeleteObject
00010E72 4E75                       		rts	
00010E74                            ; ===========================================================================
00010E74                            ; ---------------------------------------------------------------------------
00010E74                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010E74                            ; ---------------------------------------------------------------------------
00010E74                            Map_obj59:
00010E74                            	include "_maps\obj59.asm"
00010E74                            ; ---------------------------------------------------------------------------
00010E74                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010E74                            ; ---------------------------------------------------------------------------
00010E74 0000                       		dc.w byte_10D4A-Map_obj59
00010E76 03                         byte_10D4A:	dc.b 3
00010E77 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010E7C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010E81 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010E86                            		even
00010E86                            		even
00010E86                            
00010E86                            ; ===========================================================================
00010E86                            ; ---------------------------------------------------------------------------
00010E86                            ; Object 5A - platforms	moving in circles (SLZ)
00010E86                            ; ---------------------------------------------------------------------------
00010E86                            
00010E86                            Obj5A:					; XREF: Obj_Index
00010E86 7000                       		moveq	#0,d0
00010E88 1028 0024                  		move.b	$24(a0),d0
00010E8C 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010E90 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010E94 3028 0032                  		move.w	$32(a0),d0
00010E98 0240 FF80                  		andi.w	#$FF80,d0
00010E9C 3238 F700                  		move.w	($FFFFF700).w,d1
00010EA0 0441 0080                  		subi.w	#$80,d1
00010EA4 0241 FF80                  		andi.w	#$FF80,d1
00010EA8 9041                       		sub.w	d1,d0
00010EAA 0C40 0280                  		cmpi.w	#$280,d0
00010EAE 6200 C8C8                  		bhi.w	DeleteObject
00010EB2 6000 C888                  		bra.w	DisplaySprite
00010EB6                            ; ===========================================================================
00010EB6 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010EB8 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010EBA 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010EBC                            ; ===========================================================================
00010EBC                            
00010EBC                            Obj5A_Main:				; XREF: Obj5A_Index
00010EBC 5428 0024                  		addq.b	#2,$24(a0)
00010EC0 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010EC8 317C 4000 0002             		move.w	#$4000,2(a0)
00010ECE 117C 0004 0001             		move.b	#4,1(a0)
00010ED4 117C 0004 0018             		move.b	#4,$18(a0)
00010EDA 117C 0018 0019             		move.b	#$18,$19(a0)
00010EE0 3168 0008 0032             		move.w	8(a0),$32(a0)
00010EE6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010EEC                            
00010EEC                            Obj5A_Platform:				; XREF: Obj5A_Index
00010EEC 7200                       		moveq	#0,d1
00010EEE 1228 0019                  		move.b	$19(a0),d1
00010EF2 4EB9 0000 7552             		jsr	(PlatformObject).l
00010EF8 6000 0000                  		bra.w	Obj5A_Types
00010EFC                            ; ===========================================================================
00010EFC                            
00010EFC                            Obj5A_Action:				; XREF: Obj5A_Index
00010EFC 7200                       		moveq	#0,d1
00010EFE 1228 0019                  		move.b	$19(a0),d1
00010F02 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010F08 3F28 0008                  		move.w	8(a0),-(sp)
00010F0C 6100 0000                  		bsr.w	Obj5A_Types
00010F10 341F                       		move.w	(sp)+,d2
00010F12 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00010F18                            ; ===========================================================================
00010F18                            
00010F18                            Obj5A_Types:
00010F18 7000                       		moveq	#0,d0
00010F1A 1028 0028                  		move.b	$28(a0),d0
00010F1E 0240 000C                  		andi.w	#$C,d0
00010F22 E248                       		lsr.w	#1,d0
00010F24 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010F28 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010F2C                            ; ===========================================================================
00010F2C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010F2E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010F30                            ; ===========================================================================
00010F30                            
00010F30                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010F30 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010F34 0401 0050                  		subi.b	#$50,d1
00010F38 4881                       		ext.w	d1
00010F3A 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010F3E 0402 0050                  		subi.b	#$50,d2
00010F42 4882                       		ext.w	d2
00010F44 0828 0000 0028             		btst	#0,$28(a0)
00010F4A 6700                       		beq.s	loc_10E24
00010F4C 4441                       		neg.w	d1
00010F4E 4442                       		neg.w	d2
00010F50                            
00010F50                            loc_10E24:
00010F50 0828 0001 0028             		btst	#1,$28(a0)
00010F56 6700                       		beq.s	loc_10E30
00010F58 4441                       		neg.w	d1
00010F5A C342                       		exg	d1,d2
00010F5C                            
00010F5C                            loc_10E30:
00010F5C D268 0032                  		add.w	$32(a0),d1
00010F60 3141 0008                  		move.w	d1,8(a0)
00010F64 D468 0030                  		add.w	$30(a0),d2
00010F68 3142 000C                  		move.w	d2,$C(a0)
00010F6C 4E75                       		rts	
00010F6E                            ; ===========================================================================
00010F6E                            
00010F6E                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010F6E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010F72 0401 0050                  		subi.b	#$50,d1
00010F76 4881                       		ext.w	d1
00010F78 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010F7C 0402 0050                  		subi.b	#$50,d2
00010F80 4882                       		ext.w	d2
00010F82 0828 0000 0028             		btst	#0,$28(a0)
00010F88 6700                       		beq.s	loc_10E62
00010F8A 4441                       		neg.w	d1
00010F8C 4442                       		neg.w	d2
00010F8E                            
00010F8E                            loc_10E62:
00010F8E 0828 0001 0028             		btst	#1,$28(a0)
00010F94 6700                       		beq.s	loc_10E6E
00010F96 4441                       		neg.w	d1
00010F98 C342                       		exg	d1,d2
00010F9A                            
00010F9A                            loc_10E6E:
00010F9A 4441                       		neg.w	d1
00010F9C D268 0032                  		add.w	$32(a0),d1
00010FA0 3141 0008                  		move.w	d1,8(a0)
00010FA4 D468 0030                  		add.w	$30(a0),d2
00010FA8 3142 000C                  		move.w	d2,$C(a0)
00010FAC 4E75                       		rts	
00010FAE                            ; ===========================================================================
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE                            Map_obj5A:
00010FAE                            	include "_maps\obj5A.asm"
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010FAE                            ; ---------------------------------------------------------------------------
00010FAE 0000                       		dc.w byte_10E84-Map_obj5A
00010FB0 02                         byte_10E84:	dc.b 2
00010FB1 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010FB6 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010FBC 00                         		even
00010FBC 00                         		even
00010FBC                            
00010FBC                            ; ===========================================================================
00010FBC                            ; ---------------------------------------------------------------------------
00010FBC                            ; Object 5B - blocks that form a staircase (SLZ)
00010FBC                            ; ---------------------------------------------------------------------------
00010FBC                            
00010FBC                            Obj5B:					; XREF: Obj_Index
00010FBC 7000                       		moveq	#0,d0
00010FBE 1028 0024                  		move.b	$24(a0),d0
00010FC2 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010FC6 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010FCA 3028 0030                  		move.w	$30(a0),d0
00010FCE 0240 FF80                  		andi.w	#$FF80,d0
00010FD2 3238 F700                  		move.w	($FFFFF700).w,d1
00010FD6 0441 0080                  		subi.w	#$80,d1
00010FDA 0241 FF80                  		andi.w	#$FF80,d1
00010FDE 9041                       		sub.w	d1,d0
00010FE0 0C40 0280                  		cmpi.w	#$280,d0
00010FE4 6200 C792                  		bhi.w	DeleteObject
00010FE8 6000 C752                  		bra.w	DisplaySprite
00010FEC                            ; ===========================================================================
00010FEC 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010FEE 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010FF0 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010FF2                            ; ===========================================================================
00010FF2                            
00010FF2                            Obj5B_Main:				; XREF: Obj5B_Index
00010FF2 5428 0024                  		addq.b	#2,$24(a0)
00010FF6 7638                       		moveq	#$38,d3
00010FF8 7801                       		moveq	#1,d4
00010FFA 0828 0000 0022             		btst	#0,$22(a0)
00011000 6700                       		beq.s	loc_10EDA
00011002 763B                       		moveq	#$3B,d3
00011004 78FF                       		moveq	#-1,d4
00011006                            
00011006                            loc_10EDA:
00011006 3428 0008                  		move.w	8(a0),d2
0001100A 2248                       		movea.l	a0,a1
0001100C 7203                       		moveq	#3,d1
0001100E 6000                       		bra.s	Obj5B_MakeBlocks
00011010                            ; ===========================================================================
00011010                            
00011010                            Obj5B_Loop:
00011010 6100 CBC6                  		bsr.w	SingleObjLoad2
00011014 6600 0000                  		bne.w	Obj5B_Move
00011018 137C 0004 0024             		move.b	#4,$24(a1)
0001101E                            
0001101E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001101E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011022 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001102A 337C 4000 0002             		move.w	#$4000,2(a1)
00011030 137C 0004 0001             		move.b	#4,1(a1)
00011036 137C 0003 0018             		move.b	#3,$18(a1)
0001103C 137C 0010 0019             		move.b	#$10,$19(a1)
00011042 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011048 3342 0008                  		move.w	d2,8(a1)
0001104C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011052 3368 0008 0030             		move.w	8(a0),$30(a1)
00011058 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001105E 0642 0020                  		addi.w	#$20,d2
00011062 1343 0037                  		move.b	d3,$37(a1)
00011066 2348 003C                  		move.l	a0,$3C(a1)
0001106A D604                       		add.b	d4,d3
0001106C 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011070                            
00011070                            Obj5B_Move:				; XREF: Obj5B_Index
00011070 7000                       		moveq	#0,d0
00011072 1028 0028                  		move.b	$28(a0),d0
00011076 0240 0007                  		andi.w	#7,d0
0001107A D040                       		add.w	d0,d0
0001107C 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011080 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011084                            
00011084                            Obj5B_Solid:				; XREF: Obj5B_Index
00011084 2468 003C                  		movea.l	$3C(a0),a2
00011088 7000                       		moveq	#0,d0
0001108A 1028 0037                  		move.b	$37(a0),d0
0001108E 1032 0000                  		move.b	(a2,d0.w),d0
00011092 D068 0032                  		add.w	$32(a0),d0
00011096 3140 000C                  		move.w	d0,$C(a0)
0001109A 7200                       		moveq	#0,d1
0001109C 1228 0019                  		move.b	$19(a0),d1
000110A0 0641 000B                  		addi.w	#$B,d1
000110A4 343C 0010                  		move.w	#$10,d2
000110A8 363C 0011                  		move.w	#$11,d3
000110AC 3828 0008                  		move.w	8(a0),d4
000110B0 6100 EA5A                  		bsr.w	SolidObject
000110B4 4A04                       		tst.b	d4
000110B6 6A00                       		bpl.s	loc_10F92
000110B8 1544 0036                  		move.b	d4,$36(a2)
000110BC                            
000110BC                            loc_10F92:
000110BC 0828 0003 0022             		btst	#3,$22(a0)
000110C2 6700                       		beq.s	locret_10FA0
000110C4 157C 0001 0036             		move.b	#1,$36(a2)
000110CA                            
000110CA                            locret_10FA0:
000110CA 4E75                       		rts	
000110CC                            ; ===========================================================================
000110CC 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000110CE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000110D0 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000110D2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000110D4                            ; ===========================================================================
000110D4                            
000110D4                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000110D4 4A68 0034                  		tst.w	$34(a0)
000110D8 6600                       		bne.s	loc_10FC0
000110DA 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000110E0 6600                       		bne.s	locret_10FBE
000110E2 317C 001E 0034             		move.w	#$1E,$34(a0)
000110E8                            
000110E8                            locret_10FBE:
000110E8 4E75                       		rts	
000110EA                            ; ===========================================================================
000110EA                            
000110EA                            loc_10FC0:
000110EA 5368 0034                  		subq.w	#1,$34(a0)
000110EE 66F8                       		bne.s	locret_10FBE
000110F0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000110F4 4E75                       		rts	
000110F6                            ; ===========================================================================
000110F6                            
000110F6                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000110F6 4A68 0034                  		tst.w	$34(a0)
000110FA 6600                       		bne.s	loc_10FE0
000110FC 4A28 0036                  		tst.b	$36(a0)
00011100 6A00                       		bpl.s	locret_10FDE
00011102 317C 003C 0034             		move.w	#$3C,$34(a0)
00011108                            
00011108                            locret_10FDE:
00011108 4E75                       		rts	
0001110A                            ; ===========================================================================
0001110A                            
0001110A                            loc_10FE0:
0001110A 5368 0034                  		subq.w	#1,$34(a0)
0001110E 6600                       		bne.s	loc_10FEC
00011110 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011114 4E75                       		rts	
00011116                            ; ===========================================================================
00011116                            
00011116                            loc_10FEC:
00011116 43E8 0038                  		lea	$38(a0),a1
0001111A 3028 0034                  		move.w	$34(a0),d0
0001111E E408                       		lsr.b	#2,d0
00011120 0200 0001                  		andi.b	#1,d0
00011124 12C0                       		move.b	d0,(a1)+
00011126 0A00 0001                  		eori.b	#1,d0
0001112A 12C0                       		move.b	d0,(a1)+
0001112C 0A00 0001                  		eori.b	#1,d0
00011130 12C0                       		move.b	d0,(a1)+
00011132 0A00 0001                  		eori.b	#1,d0
00011136 12C0                       		move.b	d0,(a1)+
00011138 4E75                       		rts	
0001113A                            ; ===========================================================================
0001113A                            
0001113A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001113A 43E8 0038                  		lea	$38(a0),a1
0001113E 0C11 0080                  		cmpi.b	#$80,(a1)
00011142 6700                       		beq.s	locret_11038
00011144 5211                       		addq.b	#1,(a1)
00011146 7200                       		moveq	#0,d1
00011148 1219                       		move.b	(a1)+,d1
0001114A 4841                       		swap	d1
0001114C E289                       		lsr.l	#1,d1
0001114E 2401                       		move.l	d1,d2
00011150 E289                       		lsr.l	#1,d1
00011152 2601                       		move.l	d1,d3
00011154 D682                       		add.l	d2,d3
00011156 4841                       		swap	d1
00011158 4842                       		swap	d2
0001115A 4843                       		swap	d3
0001115C 12C3                       		move.b	d3,(a1)+
0001115E 12C2                       		move.b	d2,(a1)+
00011160 12C1                       		move.b	d1,(a1)+
00011162                            
00011162                            locret_11038:
00011162 4E75                       		rts	
00011164 4E75                       		rts	
00011166                            ; ===========================================================================
00011166                            ; ---------------------------------------------------------------------------
00011166                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011166                            ; ---------------------------------------------------------------------------
00011166                            Map_obj5B:
00011166                            	include "_maps\obj5B.asm"
00011166                            ; ---------------------------------------------------------------------------
00011166                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011166                            ; ---------------------------------------------------------------------------
00011166 0000                       		dc.w byte_1103E-Map_obj5B
00011168 01                         byte_1103E:	dc.b 1
00011169 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001116E                            		even
0001116E                            		even
0001116E                            
0001116E                            ; ===========================================================================
0001116E                            ; ---------------------------------------------------------------------------
0001116E                            ; Object 5C - metal girders in foreground (SLZ)
0001116E                            ; ---------------------------------------------------------------------------
0001116E                            
0001116E                            Obj5C:					; XREF: Obj_Index
0001116E 7000                       		moveq	#0,d0
00011170 1028 0024                  		move.b	$24(a0),d0
00011174 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011178 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001117C                            ; ===========================================================================
0001117C 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001117E 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011180                            ; ===========================================================================
00011180                            
00011180                            Obj5C_Main:				; XREF: Obj5C_Index
00011180 5428 0024                  		addq.b	#2,$24(a0)
00011184 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001118C 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011192 117C 0010 0019             		move.b	#$10,$19(a0)
00011198                            
00011198                            Obj5C_Display:				; XREF: Obj5C_Index
00011198 2238 F700                  		move.l	($FFFFF700).w,d1
0001119C D281                       		add.l	d1,d1
0001119E 4841                       		swap	d1
000111A0 4441                       		neg.w	d1
000111A2 3141 0008                  		move.w	d1,8(a0)
000111A6 2238 F704                  		move.l	($FFFFF704).w,d1
000111AA D281                       		add.l	d1,d1
000111AC 4841                       		swap	d1
000111AE 0241 003F                  		andi.w	#$3F,d1
000111B2 4441                       		neg.w	d1
000111B4 0641 0100                  		addi.w	#$100,d1
000111B8 3141 000A                  		move.w	d1,$A(a0)
000111BC 6000 C57E                  		bra.w	DisplaySprite
000111C0                            ; ===========================================================================
000111C0                            ; ---------------------------------------------------------------------------
000111C0                            ; Sprite mappings - metal girders in foreground	(SLZ)
000111C0                            ; ---------------------------------------------------------------------------
000111C0                            Map_obj5C:
000111C0                            	include "_maps\obj5C.asm"
000111C0                            ; ---------------------------------------------------------------------------
000111C0                            ; Sprite mappings - metal girders in foreground	(SLZ)
000111C0                            ; ---------------------------------------------------------------------------
000111C0 0000                       		dc.w byte_11098-Map_obj5C
000111C2 09                         byte_11098:	dc.b 9
000111C3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000111C8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000111CD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000111D2 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000111D7 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000111DC 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000111E1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000111E6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000111EB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000111F0                            		even
000111F0                            		even
000111F0                            
000111F0                            ; ===========================================================================
000111F0                            ; ---------------------------------------------------------------------------
000111F0                            ; Object 1B - water surface (LZ)
000111F0                            ; ---------------------------------------------------------------------------
000111F0                            
000111F0                            Obj1B:					; XREF: Obj_Index
000111F0 7000                       		moveq	#0,d0
000111F2 1028 0024                  		move.b	$24(a0),d0
000111F6 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000111FA 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000111FE                            ; ===========================================================================
000111FE 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011200 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011202                            ; ===========================================================================
00011202                            
00011202                            Obj1B_Main:				; XREF: Obj1B_Index
00011202 5428 0024                  		addq.b	#2,$24(a0)
00011206 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001120E 317C C300 0002             		move.w	#$C300,2(a0)
00011214 117C 0004 0001             		move.b	#4,1(a0)
0001121A 117C 0080 0019             		move.b	#$80,$19(a0)
00011220 3168 0008 0030             		move.w	8(a0),$30(a0)
00011226                            
00011226                            Obj1B_Action:				; XREF: Obj1B_Index
00011226 3238 F700                  		move.w	($FFFFF700).w,d1
0001122A 0241 FFE0                  		andi.w	#$FFE0,d1
0001122E D268 0030                  		add.w	$30(a0),d1
00011232 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011238 6700                       		beq.s	loc_11114
0001123A 0641 0020                  		addi.w	#$20,d1
0001123E                            
0001123E                            loc_11114:
0001123E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011242 3238 F646                  		move.w	($FFFFF646).w,d1
00011246 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001124A 4A28 0032                  		tst.b	$32(a0)
0001124E 6600                       		bne.s	Obj1B_Animate
00011250 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011256 6700                       		beq.s	loc_1114A	; if not, branch
00011258 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001125C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011262 6000                       		bra.s	Obj1B_Display
00011264                            ; ===========================================================================
00011264                            
00011264                            Obj1B_Animate:				; XREF: loc_11114
00011264 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011268 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001126A 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011270 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011274                            
00011274                            loc_1114A:				; XREF: loc_11114
00011274 5328 001E                  		subq.b	#1,$1E(a0)
00011278 6A00                       		bpl.s	Obj1B_Display
0001127A 117C 0007 001E             		move.b	#7,$1E(a0)
00011280 5228 001A                  		addq.b	#1,$1A(a0)
00011284 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001128A 6500                       		bcs.s	Obj1B_Display
0001128C 117C 0000 001A             		move.b	#0,$1A(a0)
00011292                            
00011292                            Obj1B_Display:
00011292 6000 C4A8                  		bra.w	DisplaySprite
00011296                            ; ===========================================================================
00011296                            ; ---------------------------------------------------------------------------
00011296                            ; Sprite mappings - water surface (LZ)
00011296                            ; ---------------------------------------------------------------------------
00011296                            Map_obj1B:
00011296                            	include "_maps\obj1B.asm"
00011296                            ; ---------------------------------------------------------------------------
00011296                            ; Sprite mappings - water surface (LZ)
00011296                            ; ---------------------------------------------------------------------------
00011296 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001129A 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001129E 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000112A2 03                         byte_11178:	dc.b 3
000112A3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000112A8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000112AD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000112B2 03                         byte_11188:	dc.b 3
000112B3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000112B8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000112BD FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000112C2 03                         byte_11198:	dc.b 3
000112C3 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000112C8 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000112CD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000112D2 06                         byte_111A8:	dc.b 6
000112D3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000112D8 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000112DD FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000112E2 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000112E7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000112EC FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000112F1 06                         byte_111C7:	dc.b 6
000112F2 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000112F7 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000112FC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011301 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011306 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001130B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011310 06                         byte_111E6:	dc.b 6
00011311 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011316 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001131B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011320 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011325 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001132A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011330 00                         		even
00011330 00                         		even
00011330                            
00011330                            ; ===========================================================================
00011330                            ; ---------------------------------------------------------------------------
00011330                            ; Object 0B - pole that	breaks (LZ)
00011330                            ; ---------------------------------------------------------------------------
00011330                            
00011330                            Obj0B:					; XREF: Obj_Index
00011330 7000                       		moveq	#0,d0
00011332 1028 0024                  		move.b	$24(a0),d0
00011336 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001133A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001133E                            ; ===========================================================================
0001133E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011340 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011342 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011344                            ; ===========================================================================
00011344                            
00011344                            Obj0B_Main:				; XREF: Obj0B_Index
00011344 5428 0024                  		addq.b	#2,$24(a0)
00011348 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011350 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011356 117C 0004 0001             		move.b	#4,1(a0)
0001135C 117C 0008 0019             		move.b	#8,$19(a0)
00011362 117C 0004 0018             		move.b	#4,$18(a0)
00011368 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001136E 7000                       		moveq	#0,d0
00011370 1028 0028                  		move.b	$28(a0),d0	; get object type
00011374 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011378 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001137C                            
0001137C                            Obj0B_Action:				; XREF: Obj0B_Index
0001137C 4A28 0032                  		tst.b	$32(a0)
00011380 6700                       		beq.s	Obj0B_Grab
00011382 4A68 0030                  		tst.w	$30(a0)
00011386 6700                       		beq.s	Obj0B_MoveUp
00011388 5368 0030                  		subq.w	#1,$30(a0)
0001138C 6600                       		bne.s	Obj0B_MoveUp
0001138E 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011394 6000                       		bra.s	Obj0B_Release
00011396                            ; ===========================================================================
00011396                            
00011396                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011396 43F8 D000                  		lea	($FFFFD000).w,a1
0001139A 3028 000C                  		move.w	$C(a0),d0
0001139E 0440 0018                  		subi.w	#$18,d0
000113A2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000113A8 6700                       		beq.s	Obj0B_MoveDown
000113AA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000113AE B069 000C                  		cmp.w	$C(a1),d0
000113B2 6500                       		bcs.s	Obj0B_MoveDown
000113B4 3340 000C                  		move.w	d0,$C(a1)
000113B8                            
000113B8                            Obj0B_MoveDown:
000113B8 0640 0024                  		addi.w	#$24,d0
000113BC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000113C2 6700                       		beq.s	Obj0B_LetGo
000113C4 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000113C8 B069 000C                  		cmp.w	$C(a1),d0
000113CC 6400                       		bcc.s	Obj0B_LetGo
000113CE 3340 000C                  		move.w	d0,$C(a1)
000113D2                            
000113D2                            Obj0B_LetGo:
000113D2 1038 F603                  		move.b	($FFFFF603).w,d0
000113D6 0240 0070                  		andi.w	#$70,d0
000113DA 6700                       		beq.s	Obj0B_Display
000113DC                            
000113DC                            Obj0B_Release:				; XREF: Obj0B_Action
000113DC 4228 0020                  		clr.b	$20(a0)
000113E0 5428 0024                  		addq.b	#2,$24(a0)
000113E4 4238 F7C8                  		clr.b	($FFFFF7C8).w
000113E8 4238 F7C9                  		clr.b	($FFFFF7C9).w
000113EC 4228 0032                  		clr.b	$32(a0)
000113F0 6000                       		bra.s	Obj0B_Display
000113F2                            ; ===========================================================================
000113F2                            
000113F2                            Obj0B_Grab:				; XREF: Obj0B_Action
000113F2 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000113F6 6700                       		beq.s	Obj0B_Display	; if not, branch
000113F8 43F8 D000                  		lea	($FFFFD000).w,a1
000113FC 3028 0008                  		move.w	8(a0),d0
00011400 0640 0014                  		addi.w	#$14,d0
00011404 B069 0008                  		cmp.w	8(a1),d0
00011408 6400                       		bcc.s	Obj0B_Display
0001140A 4228 0021                  		clr.b	$21(a0)
0001140E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011414 6400                       		bcc.s	Obj0B_Display
00011416 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001141A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001141E 3028 0008                  		move.w	8(a0),d0
00011422 0640 0014                  		addi.w	#$14,d0
00011426 3340 0008                  		move.w	d0,8(a1)
0001142A 08A9 0000 0022             		bclr	#0,$22(a1)
00011430 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011436 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001143C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011442 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011448                            
00011448                            Obj0B_Display:				; XREF: Obj0B_Index
00011448 6000 E39A                  		bra.w	MarkObjGone
0001144C                            ; ===========================================================================
0001144C                            ; ---------------------------------------------------------------------------
0001144C                            ; Sprite mappings - pole that breaks (LZ)
0001144C                            ; ---------------------------------------------------------------------------
0001144C                            Map_obj0B:
0001144C                            	include "_maps\obj0B.asm"
0001144C                            ; ---------------------------------------------------------------------------
0001144C                            ; Sprite mappings - pole that breaks (LZ)
0001144C                            ; ---------------------------------------------------------------------------
0001144C 0000                       		dc.w byte_11326-Map_obj0B
0001144E 0000                       		dc.w byte_11331-Map_obj0B
00011450 02                         byte_11326:	dc.b 2			; normal pole
00011451 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011456 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001145B 04                         byte_11331:	dc.b 4			; broken pole
0001145C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011461 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011466 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001146B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011470                            		even
00011470                            		even
00011470                            
00011470                            ; ===========================================================================
00011470                            ; ---------------------------------------------------------------------------
00011470                            ; Object 0C - flapping door (LZ)
00011470                            ; ---------------------------------------------------------------------------
00011470                            
00011470                            Obj0C:					; XREF: Obj_Index
00011470 7000                       		moveq	#0,d0
00011472 1028 0024                  		move.b	$24(a0),d0
00011476 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001147A 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001147E                            ; ===========================================================================
0001147E 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011480 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011482                            ; ===========================================================================
00011482                            
00011482                            Obj0C_Main:				; XREF: Obj0C_Index
00011482 5428 0024                  		addq.b	#2,$24(a0)
00011486 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001148E 317C 4328 0002             		move.w	#$4328,2(a0)
00011494 0028 0004 0001             		ori.b	#4,1(a0)
0001149A 117C 0028 0019             		move.b	#$28,$19(a0)
000114A0 7000                       		moveq	#0,d0
000114A2 1028 0028                  		move.b	$28(a0),d0	; get object type
000114A6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000114AA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000114AE                            
000114AE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000114AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000114B2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000114B4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000114BA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000114C0 4A28 0001                  		tst.b	1(a0)
000114C4 6A00                       		bpl.s	Obj0C_Solid
000114C6 303C 00BB                  		move.w	#$BB,d0
000114CA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
000114D0                            
000114D0                            Obj0C_Solid:
000114D0 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000114D6 6100 9316                  		bsr.w	AnimateSprite
000114DA 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000114DE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000114E2 6600                       		bne.s	Obj0C_Display	; if yes, branch
000114E4 3038 D008                  		move.w	($FFFFD008).w,d0
000114E8 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000114EC 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000114EE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000114F4 323C 0013                  		move.w	#$13,d1
000114F8 343C 0020                  		move.w	#$20,d2
000114FC 3602                       		move.w	d2,d3
000114FE 5243                       		addq.w	#1,d3
00011500 3828 0008                  		move.w	8(a0),d4
00011504 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011508                            
00011508                            Obj0C_Display:
00011508 6000 E2DA                  		bra.w	MarkObjGone
0001150C                            ; ===========================================================================
0001150C                            Ani_obj0C:
0001150C                            	include "_anim\obj0C.asm"
0001150C                            ; ---------------------------------------------------------------------------
0001150C                            ; Animation script - flapping door (LZ)
0001150C                            ; ---------------------------------------------------------------------------
0001150C 0000                       		dc.w byte_113E6-Ani_obj0C
0001150E 0000                       		dc.w byte_113EC-Ani_obj0C
00011510 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011516 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001151C                            		even
0001151C                            		even
0001151C                            
0001151C                            ; ---------------------------------------------------------------------------
0001151C                            ; Sprite mappings - flapping door (LZ)
0001151C                            ; ---------------------------------------------------------------------------
0001151C                            Map_obj0C:
0001151C                            	include "_maps\obj0C.asm"
0001151C                            ; ---------------------------------------------------------------------------
0001151C                            ; Sprite mappings - flapping door (LZ)
0001151C                            ; ---------------------------------------------------------------------------
0001151C 0000                       		dc.w byte_113F8-Map_obj0C
0001151E 0000                       		dc.w byte_11403-Map_obj0C
00011520 0000                       		dc.w byte_1140E-Map_obj0C
00011522 02                         byte_113F8:	dc.b 2
00011523 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011528 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001152D 02                         byte_11403:	dc.b 2
0001152E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011533 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011538 02                         byte_1140E:	dc.b 2
00011539 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001153E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011544 00                         		even
00011544 00                         		even
00011544                            
00011544                            ; ===========================================================================
00011544                            ; ---------------------------------------------------------------------------
00011544                            ; Object 71 - invisible	solid blocks
00011544                            ; ---------------------------------------------------------------------------
00011544                            
00011544                            Obj71:					; XREF: Obj_Index
00011544 7000                       		moveq	#0,d0
00011546 1028 0024                  		move.b	$24(a0),d0
0001154A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001154E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011552                            ; ===========================================================================
00011552 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011554 0000                       		dc.w Obj71_Solid-Obj71_Index
00011556                            ; ===========================================================================
00011556                            
00011556                            Obj71_Main:				; XREF: Obj71_Index
00011556 5428 0024                  		addq.b	#2,$24(a0)
0001155A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011562 317C 8680 0002             		move.w	#$8680,2(a0)
00011568 0028 0004 0001             		ori.b	#4,1(a0)
0001156E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011572 1200                       		move.b	d0,d1
00011574 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011578 0640 0010                  		addi.w	#$10,d0
0001157C E248                       		lsr.w	#1,d0
0001157E 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011582 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011586 5241                       		addq.w	#1,d1
00011588 E749                       		lsl.w	#3,d1
0001158A 1141 0016                  		move.b	d1,$16(a0)	; set object height
0001158E                            
0001158E                            Obj71_Solid:				; XREF: Obj71_Index
0001158E 6100 C426                  		bsr.w	ChkObjOnScreen
00011592 6600                       		bne.s	Obj71_ChkDel
00011594 7200                       		moveq	#0,d1
00011596 1228 0019                  		move.b	$19(a0),d1
0001159A 0641 000B                  		addi.w	#$B,d1
0001159E 7400                       		moveq	#0,d2
000115A0 1428 0016                  		move.b	$16(a0),d2
000115A4 3602                       		move.w	d2,d3
000115A6 5243                       		addq.w	#1,d3
000115A8 3828 0008                  		move.w	8(a0),d4
000115AC 6100 E5A4                  		bsr.w	SolidObject71
000115B0                            
000115B0                            Obj71_ChkDel:
000115B0 3028 0008                  		move.w	8(a0),d0
000115B4 0240 FF80                  		andi.w	#$FF80,d0
000115B8 3238 F700                  		move.w	($FFFFF700).w,d1
000115BC 0441 0080                  		subi.w	#$80,d1
000115C0 0241 FF80                  		andi.w	#$FF80,d1
000115C4 9041                       		sub.w	d1,d0
000115C6 0C40 0280                  		cmpi.w	#$280,d0
000115CA 6200                       		bhi.s	Obj71_Delete
000115CC 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000115D0 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000115D2 4EFA C168                  		jmp	DisplaySprite	; if yes, display the object
000115D6                            ; ===========================================================================
000115D6                            
000115D6                            Obj71_NoDisplay:
000115D6 4E75                       		rts	
000115D8                            ; ===========================================================================
000115D8                            
000115D8                            Obj71_Delete:
000115D8 4EFA C19E                  		jmp	DeleteObject
000115DC                            ; ===========================================================================
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            ; Sprite mappings - invisible solid blocks
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            Map_obj71:
000115DC                            	include "_maps\obj71.asm"
000115DC                            ; ---------------------------------------------------------------------------
000115DC                            ; Sprite mappings - invisible solid blocks
000115DC                            ; ---------------------------------------------------------------------------
000115DC 0000                       		dc.w byte_114BC-Map_obj71
000115DE 0000                       		dc.w byte_114D1-Map_obj71
000115E0 0000                       		dc.w byte_114E6-Map_obj71
000115E2 04                         byte_114BC:	dc.b 4
000115E3 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000115E8 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000115ED 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000115F2 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000115F7 04                         byte_114D1:	dc.b 4
000115F8 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
000115FD E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011602 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011607 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001160C 04                         byte_114E6:	dc.b 4
0001160D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011612 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011617 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001161C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011622 00                         		even
00011622 00                         		even
00011622                            
00011622                            ; ===========================================================================
00011622                            ; ---------------------------------------------------------------------------
00011622                            ; Object 5D - fans (SLZ)
00011622                            ; ---------------------------------------------------------------------------
00011622                            
00011622                            Obj5D:					; XREF: Obj_Index
00011622 7000                       		moveq	#0,d0
00011624 1028 0024                  		move.b	$24(a0),d0
00011628 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001162C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011630                            ; ===========================================================================
00011630 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011632 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011634                            ; ===========================================================================
00011634                            
00011634                            Obj5D_Main:				; XREF: Obj5D_Index
00011634 5428 0024                  		addq.b	#2,$24(a0)
00011638 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011640 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011646 0028 0004 0001             		ori.b	#4,1(a0)
0001164C 117C 0010 0019             		move.b	#$10,$19(a0)
00011652 117C 0004 0018             		move.b	#4,$18(a0)
00011658                            
00011658                            Obj5D_Delay:				; XREF: Obj5D_Index
00011658 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001165E 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011660 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011664 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011666 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001166C 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011672 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011674 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001167A                            
0001167A                            Obj5D_Blow:
0001167A 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001167E 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011682 43F8 D000                  		lea	($FFFFD000).w,a1
00011686 3029 0008                  		move.w	8(a1),d0
0001168A 9068 0008                  		sub.w	8(a0),d0
0001168E 0828 0000 0022             		btst	#0,$22(a0)
00011694 6600                       		bne.s	Obj5D_ChkSonic
00011696 4440                       		neg.w	d0
00011698                            
00011698                            Obj5D_ChkSonic:
00011698 0640 0050                  		addi.w	#$50,d0
0001169C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000116A0 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000116A2 3229 000C                  		move.w	$C(a1),d1
000116A6 0641 0060                  		addi.w	#$60,d1
000116AA 9268 000C                  		sub.w	$C(a0),d1
000116AE 6500                       		bcs.s	Obj5D_Animate
000116B0 0C41 0070                  		cmpi.w	#$70,d1
000116B4 6400                       		bcc.s	Obj5D_Animate
000116B6 0440 0050                  		subi.w	#$50,d0
000116BA 6400                       		bcc.s	loc_1159A
000116BC 4640                       		not.w	d0
000116BE D040                       		add.w	d0,d0
000116C0                            
000116C0                            loc_1159A:
000116C0 0640 0060                  		addi.w	#$60,d0
000116C4 0828 0000 0022             		btst	#0,$22(a0)
000116CA 6600                       		bne.s	loc_115A8
000116CC 4440                       		neg.w	d0
000116CE                            
000116CE                            loc_115A8:
000116CE 4400                       		neg.b	d0
000116D0 E840                       		asr.w	#4,d0
000116D2 0828 0000 0028             		btst	#0,$28(a0)
000116D8 6700                       		beq.s	Obj5D_MoveSonic
000116DA 4440                       		neg.w	d0
000116DC                            
000116DC                            Obj5D_MoveSonic:
000116DC D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000116E0                            
000116E0                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000116E0 5328 001E                  		subq.b	#1,$1E(a0)
000116E4 6A00                       		bpl.s	Obj5D_ChkDel
000116E6 117C 0000 001E             		move.b	#0,$1E(a0)
000116EC 5228 001B                  		addq.b	#1,$1B(a0)
000116F0 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000116F6 6500                       		bcs.s	loc_115D8
000116F8 117C 0000 001B             		move.b	#0,$1B(a0)
000116FE                            
000116FE                            loc_115D8:
000116FE 7000                       		moveq	#0,d0
00011700 0828 0000 0028             		btst	#0,$28(a0)
00011706 6700                       		beq.s	loc_115E4
00011708 7002                       		moveq	#2,d0
0001170A                            
0001170A                            loc_115E4:
0001170A D028 001B                  		add.b	$1B(a0),d0
0001170E 1140 001A                  		move.b	d0,$1A(a0)
00011712                            
00011712                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011712 6100 C028                  		bsr.w	DisplaySprite
00011716 3028 0008                  		move.w	8(a0),d0
0001171A 0240 FF80                  		andi.w	#$FF80,d0
0001171E 3238 F700                  		move.w	($FFFFF700).w,d1
00011722 0441 0080                  		subi.w	#$80,d1
00011726 0241 FF80                  		andi.w	#$FF80,d1
0001172A 9041                       		sub.w	d1,d0
0001172C 0C40 0280                  		cmpi.w	#$280,d0
00011730 6200 C046                  		bhi.w	DeleteObject
00011734 4E75                       		rts	
00011736                            ; ===========================================================================
00011736                            ; ---------------------------------------------------------------------------
00011736                            ; Sprite mappings - fans (SLZ)
00011736                            ; ---------------------------------------------------------------------------
00011736                            Map_obj5D:
00011736                            	include "_maps\obj5D.asm"
00011736                            ; ---------------------------------------------------------------------------
00011736                            ; Sprite mappings - fans (SLZ)
00011736                            ; ---------------------------------------------------------------------------
00011736 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001173A 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001173E 0000                       		dc.w byte_1161A-Map_obj5D
00011740 02                         byte_1161A:	dc.b 2
00011741 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011746 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001174B 02                         byte_11625:	dc.b 2
0001174C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011751 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011756 02                         byte_11630:	dc.b 2
00011757 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001175C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011762 00                         		even
00011762 00                         		even
00011762                            
00011762                            ; ===========================================================================
00011762                            ; ---------------------------------------------------------------------------
00011762                            ; Object 5E - seesaws (SLZ)
00011762                            ; ---------------------------------------------------------------------------
00011762                            
00011762                            Obj5E:					; XREF: Obj_Index
00011762 7000                       		moveq	#0,d0
00011764 1028 0024                  		move.b	$24(a0),d0
00011768 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001176C 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011770 3028 0030                  		move.w	$30(a0),d0
00011774 0240 FF80                  		andi.w	#$FF80,d0
00011778 3238 F700                  		move.w	($FFFFF700).w,d1
0001177C 0441 0080                  		subi.w	#$80,d1
00011780 0241 FF80                  		andi.w	#$FF80,d1
00011784 9041                       		sub.w	d1,d0
00011786 6B00 BFF0                  		bmi.w	DeleteObject
0001178A 0C40 0280                  		cmpi.w	#$280,d0
0001178E 6200 BFE8                  		bhi.w	DeleteObject
00011792 6000 BFA8                  		bra.w	DisplaySprite
00011796                            ; ===========================================================================
00011796 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011798 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001179A 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001179C 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001179E 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000117A0 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000117A2                            ; ===========================================================================
000117A2                            
000117A2                            Obj5E_Main:				; XREF: Obj5E_Index
000117A2 5428 0024                  		addq.b	#2,$24(a0)
000117A6 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000117AE 317C 0374 0002             		move.w	#$374,2(a0)
000117B4 0028 0004 0001             		ori.b	#4,1(a0)
000117BA 117C 0004 0018             		move.b	#4,$18(a0)
000117C0 117C 0030 0019             		move.b	#$30,$19(a0)
000117C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000117CC 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000117D0 6600                       		bne.s	loc_116D2	; if not, branch
000117D2 6100 C404                  		bsr.w	SingleObjLoad2
000117D6 6600                       		bne.s	loc_116D2
000117D8 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000117DC 5C29 0024                  		addq.b	#6,$24(a1)
000117E0 3368 0008 0008             		move.w	8(a0),8(a1)
000117E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000117EC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000117F2 2348 003C                  		move.l	a0,$3C(a1)
000117F6                            
000117F6                            loc_116D2:
000117F6 0828 0000 0022             		btst	#0,$22(a0)
000117FC 6700                       		beq.s	loc_116E0
000117FE 117C 0002 001A             		move.b	#2,$1A(a0)
00011804                            
00011804                            loc_116E0:
00011804 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001180A                            
0001180A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001180A 1228 003A                  		move.b	$3A(a0),d1
0001180E 6100 0000                  		bsr.w	loc_11766
00011812 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011818 0828 0000 001A             		btst	#0,$1A(a0)
0001181E 6700                       		beq.s	loc_11702
00011820 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011826                            
00011826                            loc_11702:
00011826 43F8 D000                  		lea	($FFFFD000).w,a1
0001182A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011830 323C 0030                  		move.w	#$30,d1
00011834 4EB9 0000 7626             		jsr	(SlopeObject).l
0001183A 4E75                       		rts	
0001183C                            ; ===========================================================================
0001183C                            
0001183C                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001183C 6100 0000                  		bsr.w	loc_1174A
00011840 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011846 0828 0000 001A             		btst	#0,$1A(a0)
0001184C 6700                       		beq.s	loc_11730
0001184E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011854                            
00011854                            loc_11730:
00011854 323C 0030                  		move.w	#$30,d1
00011858 4EB9 0000 76C6             		jsr	(ExitPlatform).l
0001185E 323C 0030                  		move.w	#$30,d1
00011862 3428 0008                  		move.w	8(a0),d2
00011866 4EB9 0000 8624             		jsr	SlopeObject2
0001186C 4E75                       		rts	
0001186E                            ; ===========================================================================
0001186E                            
0001186E                            loc_1174A:				; XREF: Obj5E_Slope2
0001186E 7202                       		moveq	#2,d1
00011870 43F8 D000                  		lea	($FFFFD000).w,a1
00011874 3028 0008                  		move.w	8(a0),d0
00011878 9069 0008                  		sub.w	8(a1),d0
0001187C 6400                       		bcc.s	loc_1175E
0001187E 4440                       		neg.w	d0
00011880 7200                       		moveq	#0,d1
00011882                            
00011882                            loc_1175E:
00011882 0C40 0008                  		cmpi.w	#8,d0
00011886 6400                       		bcc.s	loc_11766
00011888 7201                       		moveq	#1,d1
0001188A                            
0001188A                            loc_11766:
0001188A 1028 001A                  		move.b	$1A(a0),d0
0001188E B001                       		cmp.b	d1,d0
00011890 6700                       		beq.s	locret_11790
00011892 6400                       		bcc.s	loc_11772
00011894 5400                       		addq.b	#2,d0
00011896                            
00011896                            loc_11772:
00011896 5300                       		subq.b	#1,d0
00011898 1140 001A                  		move.b	d0,$1A(a0)
0001189C 1141 003A                  		move.b	d1,$3A(a0)
000118A0 08A8 0000 0001             		bclr	#0,1(a0)
000118A6 0828 0001 001A             		btst	#1,$1A(a0)
000118AC 6700                       		beq.s	locret_11790
000118AE 08E8 0000 0001             		bset	#0,1(a0)
000118B4                            
000118B4                            locret_11790:
000118B4 4E75                       		rts	
000118B6                            ; ===========================================================================
000118B6                            
000118B6                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000118B6 5428 0024                  		addq.b	#2,$24(a0)
000118BA 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000118C2 317C 04F0 0002             		move.w	#$4F0,2(a0)
000118C8 0028 0004 0001             		ori.b	#4,1(a0)
000118CE 117C 0004 0018             		move.b	#4,$18(a0)
000118D4 117C 008B 0020             		move.b	#$8B,$20(a0)
000118DA 117C 000C 0019             		move.b	#$C,$19(a0)
000118E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000118E6 0668 0028 0008             		addi.w	#$28,8(a0)
000118EC 3168 000C 0034             		move.w	$C(a0),$34(a0)
000118F2 117C 0001 001A             		move.b	#1,$1A(a0)
000118F8 0828 0000 0022             		btst	#0,$22(a0)
000118FE 6700                       		beq.s	Obj5E_MoveSpike
00011900 0468 0050 0008             		subi.w	#$50,8(a0)
00011906 117C 0002 003A             		move.b	#2,$3A(a0)
0001190C                            
0001190C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001190C 2268 003C                  		movea.l	$3C(a0),a1
00011910 7000                       		moveq	#0,d0
00011912 1028 003A                  		move.b	$3A(a0),d0
00011916 9029 003A                  		sub.b	$3A(a1),d0
0001191A 6700                       		beq.s	loc_1183E
0001191C 6400                       		bcc.s	loc_117FC
0001191E 4400                       		neg.b	d0
00011920                            
00011920                            loc_117FC:
00011920 323C F7E8                  		move.w	#-$818,d1
00011924 343C FEEC                  		move.w	#-$114,d2
00011928 0C00 0001                  		cmpi.b	#1,d0
0001192C 6700                       		beq.s	loc_11822
0001192E 323C F510                  		move.w	#-$AF0,d1
00011932 343C FF34                  		move.w	#-$CC,d2
00011936 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001193C 6D00                       		blt.s	loc_11822
0001193E 323C F200                  		move.w	#-$E00,d1
00011942 343C FF60                  		move.w	#-$A0,d2
00011946                            
00011946                            loc_11822:
00011946 3141 0012                  		move.w	d1,$12(a0)
0001194A 3142 0010                  		move.w	d2,$10(a0)
0001194E 3028 0008                  		move.w	8(a0),d0
00011952 9068 0030                  		sub.w	$30(a0),d0
00011956 6400                       		bcc.s	loc_11838
00011958 4468 0010                  		neg.w	$10(a0)
0001195C                            
0001195C                            loc_11838:
0001195C 5428 0024                  		addq.b	#2,$24(a0)
00011960 6000                       		bra.s	Obj5E_SpikeFall
00011962                            ; ===========================================================================
00011962                            
00011962                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011962 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011968 7000                       		moveq	#0,d0
0001196A 1029 001A                  		move.b	$1A(a1),d0
0001196E 343C 0028                  		move.w	#$28,d2
00011972 3228 0008                  		move.w	8(a0),d1
00011976 9268 0030                  		sub.w	$30(a0),d1
0001197A 6400                       		bcc.s	loc_1185C
0001197C 4442                       		neg.w	d2
0001197E 5440                       		addq.w	#2,d0
00011980                            
00011980                            loc_1185C:
00011980 D040                       		add.w	d0,d0
00011982 3228 0034                  		move.w	$34(a0),d1
00011986 D272 0000                  		add.w	(a2,d0.w),d1
0001198A 3141 000C                  		move.w	d1,$C(a0)
0001198E D468 0030                  		add.w	$30(a0),d2
00011992 3142 0008                  		move.w	d2,8(a0)
00011996 4268 000E                  		clr.w	$E(a0)
0001199A 4268 000A                  		clr.w	$A(a0)
0001199E 4E75                       		rts	
000119A0                            ; ===========================================================================
000119A0                            
000119A0                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000119A0 4A68 0012                  		tst.w	$12(a0)
000119A4 6A00                       		bpl.s	loc_1189A
000119A6 6100 BD42                  		bsr.w	ObjectFall
000119AA 3028 0034                  		move.w	$34(a0),d0
000119AE 0440 002F                  		subi.w	#$2F,d0
000119B2 B068 000C                  		cmp.w	$C(a0),d0
000119B6 6E00                       		bgt.s	locret_11898
000119B8 6100 BD30                  		bsr.w	ObjectFall
000119BC                            
000119BC                            locret_11898:
000119BC 4E75                       		rts	
000119BE                            ; ===========================================================================
000119BE                            
000119BE                            loc_1189A:				; XREF: Obj5E_SpikeFall
000119BE 6100 BD2A                  		bsr.w	ObjectFall
000119C2 2268 003C                  		movea.l	$3C(a0),a1
000119C6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000119CC 7000                       		moveq	#0,d0
000119CE 1029 001A                  		move.b	$1A(a1),d0
000119D2 3228 0008                  		move.w	8(a0),d1
000119D6 9268 0030                  		sub.w	$30(a0),d1
000119DA 6400                       		bcc.s	loc_118BA
000119DC 5440                       		addq.w	#2,d0
000119DE                            
000119DE                            loc_118BA:
000119DE D040                       		add.w	d0,d0
000119E0 3228 0034                  		move.w	$34(a0),d1
000119E4 D272 0000                  		add.w	(a2,d0.w),d1
000119E8 B268 000C                  		cmp.w	$C(a0),d1
000119EC 6E00                       		bgt.s	locret_11938
000119EE 2268 003C                  		movea.l	$3C(a0),a1
000119F2 7202                       		moveq	#2,d1
000119F4 4A68 0010                  		tst.w	$10(a0)
000119F8 6B00                       		bmi.s	Obj5E_Spring
000119FA 7200                       		moveq	#0,d1
000119FC                            
000119FC                            Obj5E_Spring:
000119FC 1341 003A                  		move.b	d1,$3A(a1)
00011A00 1141 003A                  		move.b	d1,$3A(a0)
00011A04 B229 001A                  		cmp.b	$1A(a1),d1
00011A08 6700                       		beq.s	loc_1192C
00011A0A 08A9 0003 0022             		bclr	#3,$22(a1)
00011A10 6700                       		beq.s	loc_1192C
00011A12 4229 0025                  		clr.b	$25(a1)
00011A16 137C 0002 0024             		move.b	#2,$24(a1)
00011A1C 45F8 D000                  		lea	($FFFFD000).w,a2
00011A20 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011A26 446A 0012                  		neg.w	$12(a2)
00011A2A 08EA 0001 0022             		bset	#1,$22(a2)
00011A30 08AA 0003 0022             		bclr	#3,$22(a2)
00011A36 422A 003C                  		clr.b	$3C(a2)
00011A3A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011A40 157C 0002 0024             		move.b	#2,$24(a2)
00011A46 303C 00CC                  		move.w	#$CC,d0
00011A4A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
00011A50                            
00011A50                            loc_1192C:
00011A50 4268 0010                  		clr.w	$10(a0)
00011A54 4268 0012                  		clr.w	$12(a0)
00011A58 5528 0024                  		subq.b	#2,$24(a0)
00011A5C                            
00011A5C                            locret_11938:
00011A5C 4E75                       		rts	
00011A5E                            ; ===========================================================================
00011A5E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011A68                            
00011A68                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011A98                            		even
00011A98                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011AC8                            		even
00011AC8                            ; ---------------------------------------------------------------------------
00011AC8                            ; Sprite mappings - seesaws (SLZ)
00011AC8                            ; ---------------------------------------------------------------------------
00011AC8                            Map_obj5E:
00011AC8                            	include "_maps\obj5E.asm"
00011AC8                            ; ---------------------------------------------------------------------------
00011AC8                            ; Sprite mappings - seesaws (SLZ)
00011AC8                            ; ---------------------------------------------------------------------------
00011AC8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011ACC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011AD0 07                         byte_119AC:	dc.b 7
00011AD1 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011AD6 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011ADB E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011AE0 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011AE5 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011AEA F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011AEF FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011AF4 04                         byte_119D0:	dc.b 4
00011AF5 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011AFA E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011AFF E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011B04 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011B0A 00                         		even
00011B0A 00                         		even
00011B0A                            
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A                            Map_obj5Ea:
00011B0A                            	include "_maps\obj5Eballs.asm"
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A 0000                       		dc.w byte_119EA-Map_obj5Ea
00011B0C 0000                       		dc.w byte_119F0-Map_obj5Ea
00011B0E 01                         byte_119EA:	dc.b 1
00011B0F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011B14 01                         byte_119F0:	dc.b 1
00011B15 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011B1A                            		even
00011B1A                            		even
00011B1A                            
00011B1A                            ; ===========================================================================
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            
00011B1A                            Obj5F:					; XREF: Obj_Index
00011B1A 7000                       		moveq	#0,d0
00011B1C 1028 0024                  		move.b	$24(a0),d0
00011B20 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011B24 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011B28                            ; ===========================================================================
00011B28 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011B2A 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011B2C 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011B2E 0000                       		dc.w Obj5F_End-Obj5F_Index
00011B30                            ; ===========================================================================
00011B30                            
00011B30                            Obj5F_Main:				; XREF: Obj5F_Index
00011B30 5428 0024                  		addq.b	#2,$24(a0)
00011B34 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011B3C 317C 0400 0002             		move.w	#$400,2(a0)
00011B42 0028 0004 0001             		ori.b	#4,1(a0)
00011B48 117C 0003 0018             		move.b	#3,$18(a0)
00011B4E 117C 000C 0019             		move.b	#$C,$19(a0)
00011B54 1028 0028                  		move.b	$28(a0),d0
00011B58 6700                       		beq.s	loc_11A3C
00011B5A 1140 0024                  		move.b	d0,$24(a0)
00011B5E 4E75                       		rts	
00011B60                            ; ===========================================================================
00011B60                            
00011B60                            loc_11A3C:
00011B60 117C 009A 0020             		move.b	#$9A,$20(a0)
00011B66 0868 0000 0022             		bchg	#0,$22(a0)
00011B6C                            
00011B6C                            Obj5F_Action:				; XREF: Obj5F_Index
00011B6C 7000                       		moveq	#0,d0
00011B6E 1028 0025                  		move.b	$25(a0),d0
00011B72 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011B76 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011B7A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011B80 6100 8C6C                  		bsr.w	AnimateSprite
00011B84 6000 DC5E                  		bra.w	MarkObjGone
00011B88                            ; ===========================================================================
00011B88 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011B8A 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011B8C 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011B8E                            ; ===========================================================================
00011B8E                            
00011B8E                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011B8E 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B96 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011B98 5428 0025                  		addq.b	#2,$25(a0)
00011B9C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011BA2 317C 0010 0010             		move.w	#$10,$10(a0)
00011BA8 117C 0001 001C             		move.b	#1,$1C(a0)
00011BAE 0868 0000 0022             		bchg	#0,$22(a0)
00011BB4 6700                       		beq.s	locret_11A96
00011BB6 4468 0010                  		neg.w	$10(a0)		; change direction
00011BBA                            
00011BBA                            locret_11A96:
00011BBA 4E75                       		rts	
00011BBC                            ; ===========================================================================
00011BBC                            
00011BBC                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011BBC 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011BC0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BC4 6B00                       		bmi.s	loc_11AA8
00011BC6 6100 BB4E                  		bsr.w	SpeedToPos
00011BCA 4E75                       		rts	
00011BCC                            ; ===========================================================================
00011BCC                            
00011BCC                            loc_11AA8:
00011BCC 5528 0025                  		subq.b	#2,$25(a0)
00011BD0 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011BD6 4268 0010                  		clr.w	$10(a0)		; stop walking
00011BDA 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011BE0 4E75                       		rts	
00011BE2                            ; ===========================================================================
00011BE2                            
00011BE2                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011BE2 5368 0030                  		subq.w	#1,$30(a0)
00011BE6 6A00                       		bpl.s	locret_11AD0
00011BE8 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011BEC 117C 0000 0024             		move.b	#0,$24(a0)
00011BF2                            
00011BF2                            locret_11AD0:
00011BF2 4E75                       		rts	
00011BF4                            ; ===========================================================================
00011BF4                            
00011BF4                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011BF4 3038 D008                  		move.w	($FFFFD008).w,d0
00011BF8 9068 0008                  		sub.w	8(a0),d0
00011BFC 6400                       		bcc.s	loc_11ADE
00011BFE 4440                       		neg.w	d0
00011C00                            
00011C00                            loc_11ADE:
00011C00 0C40 0060                  		cmpi.w	#$60,d0
00011C04 6400                       		bcc.s	locret_11B5E
00011C06 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011C0A 9068 000C                  		sub.w	$C(a0),d0
00011C0E 6400                       		bcc.s	Obj5F_MakeFuse
00011C10 4440                       		neg.w	d0
00011C12                            
00011C12                            Obj5F_MakeFuse:
00011C12 0C40 0060                  		cmpi.w	#$60,d0
00011C16 6400                       		bcc.s	locret_11B5E
00011C18 4A78 FE08                  		tst.w	($FFFFFE08).w
00011C1C 6600                       		bne.s	locret_11B5E
00011C1E 117C 0004 0025             		move.b	#4,$25(a0)
00011C24 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011C2A 4268 0010                  		clr.w	$10(a0)
00011C2E 117C 0002 001C             		move.b	#2,$1C(a0)
00011C34 6100 BFA2                  		bsr.w	SingleObjLoad2
00011C38 6600                       		bne.s	locret_11B5E
00011C3A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011C3E 3368 0008 0008             		move.w	8(a0),8(a1)
00011C44 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C4A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011C50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C56 137C 0004 0028             		move.b	#4,$28(a1)
00011C5C 137C 0003 001C             		move.b	#3,$1C(a1)
00011C62 337C 0010 0012             		move.w	#$10,$12(a1)
00011C68 0828 0001 0022             		btst	#1,$22(a0)
00011C6E 6700                       		beq.s	loc_11B54
00011C70 4469 0012                  		neg.w	$12(a1)
00011C74                            
00011C74                            loc_11B54:
00011C74 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011C7A 2348 003C                  		move.l	a0,$3C(a1)
00011C7E                            
00011C7E                            locret_11B5E:
00011C7E 4E75                       		rts	
00011C80                            ; ===========================================================================
00011C80                            
00011C80                            Obj5F_Display:				; XREF: Obj5F_Index
00011C80 6100                       		bsr.s	loc_11B70
00011C82 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C88 6100 8B64                  		bsr.w	AnimateSprite
00011C8C 6000 DB56                  		bra.w	MarkObjGone
00011C90                            ; ===========================================================================
00011C90                            
00011C90                            loc_11B70:
00011C90 5368 0030                  		subq.w	#1,$30(a0)
00011C94 6B00                       		bmi.s	loc_11B7C
00011C96 6100 BA7E                  		bsr.w	SpeedToPos
00011C9A 4E75                       		rts	
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            loc_11B7C:
00011C9C 4268 0030                  		clr.w	$30(a0)
00011CA0 4228 0024                  		clr.b	$24(a0)
00011CA4 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011CAA 7203                       		moveq	#3,d1
00011CAC 2248                       		movea.l	a0,a1
00011CAE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011CB4 6000                       		bra.s	Obj5F_MakeShrap
00011CB6                            ; ===========================================================================
00011CB6                            
00011CB6                            Obj5F_Loop:
00011CB6 6100 BF20                  		bsr.w	SingleObjLoad2
00011CBA 6600                       		bne.s	loc_11BCE
00011CBC                            
00011CBC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011CBC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011CC0 3368 0008 0008             		move.w	8(a0),8(a1)
00011CC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011CCC 137C 0006 0028             		move.b	#6,$28(a1)
00011CD2 137C 0004 001C             		move.b	#4,$1C(a1)
00011CD8 335A 0010                  		move.w	(a2)+,$10(a1)
00011CDC 335A 0012                  		move.w	(a2)+,$12(a1)
00011CE0 137C 0098 0020             		move.b	#$98,$20(a1)
00011CE6 08E9 0007 0001             		bset	#7,1(a1)
00011CEC                            
00011CEC                            loc_11BCE:
00011CEC 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011CF0                            
00011CF0 117C 0006 0024             		move.b	#6,$24(a0)
00011CF6                            
00011CF6                            Obj5F_End:				; XREF: Obj5F_Index
00011CF6 6100 BA1E                  		bsr.w	SpeedToPos
00011CFA 0668 0018 0012             		addi.w	#$18,$12(a0)
00011D00 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011D06 6100 8AE6                  		bsr.w	AnimateSprite
00011D0A 4A28 0001                  		tst.b	1(a0)
00011D0E 6A00 BA68                  		bpl.w	DeleteObject
00011D12 6000 BA28                  		bra.w	DisplaySprite
00011D16                            ; ===========================================================================
00011D16 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011D26                            
00011D26                            Ani_obj5F:
00011D26                            	include "_anim\obj5F.asm"
00011D26                            ; ---------------------------------------------------------------------------
00011D26                            ; Animation script - Bomb enemy
00011D26                            ; ---------------------------------------------------------------------------
00011D26 0000                       		dc.w byte_11C12-Ani_obj5F
00011D28 0000                       		dc.w byte_11C16-Ani_obj5F
00011D2A 0000                       		dc.w byte_11C1C-Ani_obj5F
00011D2C 0000                       		dc.w byte_11C20-Ani_obj5F
00011D2E 0000                       		dc.w byte_11C24-Ani_obj5F
00011D30 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011D34 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011D3A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011D3E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011D42 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011D46                            		even
00011D46                            		even
00011D46                            
00011D46                            ; ---------------------------------------------------------------------------
00011D46                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011D46                            ; ---------------------------------------------------------------------------
00011D46                            Map_obj5F:
00011D46                            	include "_maps\obj5F.asm"
00011D46                            ; ---------------------------------------------------------------------------
00011D46                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011D46                            ; ---------------------------------------------------------------------------
00011D46 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011D4A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011D4E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011D52 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011D56 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011D5A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011D5E 03                         byte_11C40:	dc.b 3
00011D5F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011D64 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D69 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D6E 03                         byte_11C50:	dc.b 3
00011D6F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D74 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D79 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D7E 03                         byte_11C60:	dc.b 3
00011D7F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011D84 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011D89 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D8E 03                         byte_11C70:	dc.b 3
00011D8F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D94 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011D99 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D9E 03                         byte_11C80:	dc.b 3
00011D9F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011DA4 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011DA9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011DAE 03                         byte_11C90:	dc.b 3
00011DAF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DB4 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011DB9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DBE 02                         byte_11CA0:	dc.b 2
00011DBF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011DC4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011DC9 02                         byte_11CAB:	dc.b 2
00011DCA F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DCF 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011DD4 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011DD5 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011DDA 01                         byte_11CBC:	dc.b 1			; fuse
00011DDB E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011DE0 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011DE1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011DE6 01                         byte_11CC8:	dc.b 1			; fireball
00011DE7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011DEC                            		even
00011DEC                            		even
00011DEC                            
00011DEC                            ; ===========================================================================
00011DEC                            ; ---------------------------------------------------------------------------
00011DEC                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011DEC                            ; ---------------------------------------------------------------------------
00011DEC                            
00011DEC                            Obj60:					; XREF: Obj_Index
00011DEC 7000                       		moveq	#0,d0
00011DEE 1028 0024                  		move.b	$24(a0),d0
00011DF2 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011DF6 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011DFA                            ; ===========================================================================
00011DFA 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011DFC 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011DFE 0000                       		dc.w Obj60_Display-Obj60_Index
00011E00 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011E02 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011E04                            ; ===========================================================================
00011E04                            
00011E04                            Obj60_Main:				; XREF: Obj60_Index
00011E04 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011E0C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011E12 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011E18 6700                       		beq.s	loc_11D02
00011E1A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011E20                            
00011E20                            loc_11D02:
00011E20 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E26 6600                       		bne.s	loc_11D10
00011E28 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011E2E                            
00011E2E                            loc_11D10:
00011E2E 0028 0004 0001             		ori.b	#4,1(a0)
00011E34 117C 0004 0018             		move.b	#4,$18(a0)
00011E3A 117C 000B 0020             		move.b	#$B,$20(a0)
00011E40 117C 000C 0019             		move.b	#$C,$19(a0)
00011E46 7400                       		moveq	#0,d2
00011E48 45E8 0037                  		lea	$37(a0),a2
00011E4C 264A                       		movea.l	a2,a3
00011E4E 524A                       		addq.w	#1,a2
00011E50 7203                       		moveq	#3,d1
00011E52                            
00011E52                            Obj60_MakeOrbs:
00011E52 6100 BD84                  		bsr.w	SingleObjLoad2
00011E56 6600                       		bne.s	loc_11D90
00011E58 5213                       		addq.b	#1,(a3)
00011E5A 3A09                       		move.w	a1,d5
00011E5C 0445 D000                  		subi.w	#-$3000,d5
00011E60 EC4D                       		lsr.w	#6,d5
00011E62 0245 007F                  		andi.w	#$7F,d5
00011E66 14C5                       		move.b	d5,(a2)+
00011E68 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011E6A 137C 0006 0024             		move.b	#6,$24(a1)
00011E70 2368 0004 0004             		move.l	4(a0),4(a1)
00011E76 3368 0002 0002             		move.w	2(a0),2(a1)
00011E7C 0029 0004 0001             		ori.b	#4,1(a1)
00011E82 137C 0004 0018             		move.b	#4,$18(a1)
00011E88 137C 0008 0019             		move.b	#8,$19(a1)
00011E8E 137C 0003 001A             		move.b	#3,$1A(a1)
00011E94 137C 0098 0020             		move.b	#$98,$20(a1)
00011E9A 1342 0026                  		move.b	d2,$26(a1)
00011E9E 0602 0040                  		addi.b	#$40,d2
00011EA2 2348 003C                  		move.l	a0,$3C(a1)
00011EA6 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011EAA                            
00011EAA                            loc_11D90:
00011EAA 7001                       		moveq	#1,d0
00011EAC 0828 0000 0022             		btst	#0,$22(a0)
00011EB2 6700                       		beq.s	Obj60_Move
00011EB4 4440                       		neg.w	d0
00011EB6                            
00011EB6                            Obj60_Move:
00011EB6 1140 0036                  		move.b	d0,$36(a0)
00011EBA 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011EC0 5428 0024                  		addq.b	#2,$24(a0)
00011EC4 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011ECA 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011ED0 6700                       		beq.s	locret_11DBC	; if not, branch
00011ED2 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011ED6                            
00011ED6                            locret_11DBC:
00011ED6 4E75                       		rts	
00011ED8                            ; ===========================================================================
00011ED8                            
00011ED8                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011ED8 3038 D008                  		move.w	($FFFFD008).w,d0
00011EDC 9068 0008                  		sub.w	8(a0),d0
00011EE0 6400                       		bcc.s	loc_11DCA
00011EE2 4440                       		neg.w	d0
00011EE4                            
00011EE4                            loc_11DCA:
00011EE4 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011EE8 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011EEA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011EEE 9068 000C                  		sub.w	$C(a0),d0
00011EF2 6400                       		bcc.s	loc_11DDC
00011EF4 4440                       		neg.w	d0
00011EF6                            
00011EF6                            loc_11DDC:
00011EF6 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011EFA 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011EFC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011F00 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011F02 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011F08                            
00011F08                            Obj60_Animate:
00011F08 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011F0E 6100 88DE                  		bsr.w	AnimateSprite
00011F12 6000 0000                  		bra.w	Obj60_ChkDel
00011F16                            ; ===========================================================================
00011F16                            
00011F16                            Obj60_Display:				; XREF: Obj60_Index
00011F16 6100 B7FE                  		bsr.w	SpeedToPos
00011F1A                            
00011F1A                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011F1A 3028 0008                  		move.w	8(a0),d0
00011F1E 0240 FF80                  		andi.w	#$FF80,d0
00011F22 3238 F700                  		move.w	($FFFFF700).w,d1
00011F26 0441 0080                  		subi.w	#$80,d1
00011F2A 0241 FF80                  		andi.w	#$FF80,d1
00011F2E 9041                       		sub.w	d1,d0
00011F30 0C40 0280                  		cmpi.w	#$280,d0
00011F34 6200 0000                  		bhi.w	Obj60_ChkGone
00011F38 6000 B802                  		bra.w	DisplaySprite
00011F3C                            ; ===========================================================================
00011F3C                            
00011F3C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011F3C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011F40 7000                       		moveq	#0,d0
00011F42 1028 0023                  		move.b	$23(a0),d0
00011F46 6700                       		beq.s	loc_11E34
00011F48 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011F4E                            
00011F4E                            loc_11E34:
00011F4E 45E8 0037                  		lea	$37(a0),a2
00011F52 7400                       		moveq	#0,d2
00011F54 141A                       		move.b	(a2)+,d2
00011F56 5342                       		subq.w	#1,d2
00011F58 6500                       		bcs.s	Obj60_Delete
00011F5A                            
00011F5A                            loc_11E40:
00011F5A 7000                       		moveq	#0,d0
00011F5C 101A                       		move.b	(a2)+,d0
00011F5E ED48                       		lsl.w	#6,d0
00011F60 0680 00FF D000             		addi.l	#$FFD000,d0
00011F66 2240                       		movea.l	d0,a1
00011F68 6100 B810                  		bsr.w	DeleteObject2
00011F6C 51CA FFEC                  		dbf	d2,loc_11E40
00011F70                            
00011F70                            Obj60_Delete:
00011F70 6000 B806                  		bra.w	DeleteObject
00011F74                            ; ===========================================================================
00011F74                            
00011F74                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011F74 2268 003C                  		movea.l	$3C(a0),a1
00011F78 0C11 0060                  		cmpi.b	#$60,0(a1)
00011F7C 6600 B7FA                  		bne.w	DeleteObject
00011F80 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011F86 6600                       		bne.s	Obj60_Circle
00011F88 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011F8E 6600                       		bne.s	Obj60_Circle
00011F90 5428 0024                  		addq.b	#2,$24(a0)
00011F94 5329 0037                  		subq.b	#1,$37(a1)
00011F98 6600                       		bne.s	Obj60_FireOrb
00011F9A 5429 0024                  		addq.b	#2,$24(a1)
00011F9E                            
00011F9E                            Obj60_FireOrb:
00011F9E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011FA4 0829 0000 0022             		btst	#0,$22(a1)
00011FAA 6700                       		beq.s	Obj60_Display2
00011FAC 4468 0010                  		neg.w	$10(a0)
00011FB0                            
00011FB0                            Obj60_Display2:
00011FB0 6000 B78A                  		bra.w	DisplaySprite
00011FB4                            ; ===========================================================================
00011FB4                            
00011FB4                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011FB4 1028 0026                  		move.b	$26(a0),d0
00011FB8 4EB9 0000 29DA             		jsr	(CalcSine).l
00011FBE E841                       		asr.w	#4,d1
00011FC0 D269 0008                  		add.w	8(a1),d1
00011FC4 3141 0008                  		move.w	d1,8(a0)
00011FC8 E840                       		asr.w	#4,d0
00011FCA D069 000C                  		add.w	$C(a1),d0
00011FCE 3140 000C                  		move.w	d0,$C(a0)
00011FD2 1029 0036                  		move.b	$36(a1),d0
00011FD6 D128 0026                  		add.b	d0,$26(a0)
00011FDA 6000 B760                  		bra.w	DisplaySprite
00011FDE                            ; ===========================================================================
00011FDE                            
00011FDE                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011FDE 6100 B736                  		bsr.w	SpeedToPos
00011FE2 4A28 0001                  		tst.b	1(a0)
00011FE6 6A00 B790                  		bpl.w	DeleteObject
00011FEA 6000 B750                  		bra.w	DisplaySprite
00011FEE                            ; ===========================================================================
00011FEE                            Ani_obj60:
00011FEE                            	include "_anim\obj60.asm"
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            ; Animation script - Orbinaut enemy
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE 0000                       		dc.w byte_11EDA-Ani_obj60
00011FF0 0000                       		dc.w byte_11EDE-Ani_obj60
00011FF2 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011FF6 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011FFC                            		even
00011FFC                            		even
00011FFC                            
00011FFC                            ; ---------------------------------------------------------------------------
00011FFC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011FFC                            ; ---------------------------------------------------------------------------
00011FFC                            Map_obj60:
00011FFC                            	include "_maps\obj60.asm"
00011FFC                            ; ---------------------------------------------------------------------------
00011FFC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011FFC                            ; ---------------------------------------------------------------------------
00011FFC 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012000 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012004 01                         byte_11EEC:	dc.b 1
00012005 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001200A 01                         byte_11EF2:	dc.b 1
0001200B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012010 01                         byte_11EF8:	dc.b 1
00012011 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012016 01                         byte_11EFE:	dc.b 1
00012017 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001201C                            		even
0001201C                            		even
0001201C                            
0001201C                            ; ===========================================================================
0001201C                            ; ---------------------------------------------------------------------------
0001201C                            ; Object 16 - harpoon (LZ)
0001201C                            ; ---------------------------------------------------------------------------
0001201C                            
0001201C                            Obj16:					; XREF: Obj_Index
0001201C 7000                       		moveq	#0,d0
0001201E 1028 0024                  		move.b	$24(a0),d0
00012022 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012026 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001202A                            ; ===========================================================================
0001202A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001202C 0000                       		dc.w Obj16_Move-Obj16_Index
0001202E 0000                       		dc.w Obj16_Wait-Obj16_Index
00012030                            ; ===========================================================================
00012030                            
00012030                            Obj16_Main:				; XREF: Obj16_Index
00012030 5428 0024                  		addq.b	#2,$24(a0)
00012034 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001203C 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012042 0028 0004 0001             		ori.b	#4,1(a0)
00012048 117C 0004 0018             		move.b	#4,$18(a0)
0001204E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012054 117C 0014 0019             		move.b	#$14,$19(a0)
0001205A 317C 003C 0030             		move.w	#60,$30(a0)
00012060                            
00012060                            Obj16_Move:				; XREF: Obj16_Index
00012060 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012066 6100 8786                  		bsr.w	AnimateSprite
0001206A 7000                       		moveq	#0,d0
0001206C 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012070 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012076 6000 D76C                  		bra.w	MarkObjGone
0001207A                            ; ===========================================================================
0001207A 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012080                            ; ===========================================================================
00012080                            
00012080                            Obj16_Wait:				; XREF: Obj16_Index
00012080 5368 0030                  		subq.w	#1,$30(a0)
00012084 6A00                       		bpl.s	Obj16_ChkDel
00012086 317C 003C 0030             		move.w	#60,$30(a0)
0001208C 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012090 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012096                            
00012096                            Obj16_ChkDel:
00012096 6000 D74C                  		bra.w	MarkObjGone
0001209A                            ; ===========================================================================
0001209A                            Ani_obj16:
0001209A                            	include "_anim\obj16.asm"
0001209A                            ; ---------------------------------------------------------------------------
0001209A                            ; Animation script - harpoon (LZ)
0001209A                            ; ---------------------------------------------------------------------------
0001209A 0000                       		dc.w byte_11F8A-Ani_obj16
0001209C 0000                       		dc.w byte_11F8E-Ani_obj16
0001209E 0000                       		dc.w byte_11F92-Ani_obj16
000120A0 0000                       		dc.w byte_11F96-Ani_obj16
000120A2 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000120A6 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000120AA 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000120AE 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000120B2                            		even
000120B2                            		even
000120B2                            
000120B2                            ; ---------------------------------------------------------------------------
000120B2                            ; Sprite mappings - harpoon (LZ)
000120B2                            ; ---------------------------------------------------------------------------
000120B2                            Map_obj16:
000120B2                            	include "_maps\obj16.asm"
000120B2                            ; ---------------------------------------------------------------------------
000120B2                            ; Sprite mappings - harpoon (LZ)
000120B2                            ; ---------------------------------------------------------------------------
000120B2 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000120B6 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000120BA 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000120BE 01                         byte_11FA6:	dc.b 1
000120BF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000120C4 01                         byte_11FAC:	dc.b 1
000120C5 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000120CA 02                         byte_11FB2:	dc.b 2
000120CB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000120D0 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000120D5 01                         byte_11FBD:	dc.b 1
000120D6 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000120DB 01                         byte_11FC3:	dc.b 1
000120DC E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000120E1 02                         byte_11FC9:	dc.b 2
000120E2 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000120E7 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000120EC                            		even
000120EC                            		even
000120EC                            
000120EC                            ; ===========================================================================
000120EC                            ; ---------------------------------------------------------------------------
000120EC                            ; Object 61 - blocks (LZ)
000120EC                            ; ---------------------------------------------------------------------------
000120EC                            
000120EC                            Obj61:					; XREF: Obj_Index
000120EC 7000                       		moveq	#0,d0
000120EE 1028 0024                  		move.b	$24(a0),d0
000120F2 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000120F6 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000120FA                            ; ===========================================================================
000120FA 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000120FC 0000                       		dc.w Obj61_Action-Obj61_Index
000120FE                            
000120FE 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012100 200C                       		dc.b $20, $C
00012102 1010                       		dc.b $10, $10
00012104 1010                       		dc.b $10, $10
00012106                            ; ===========================================================================
00012106                            
00012106                            Obj61_Main:				; XREF: Obj61_Index
00012106 5428 0024                  		addq.b	#2,$24(a0)
0001210A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012112 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012118 117C 0004 0001             		move.b	#4,1(a0)
0001211E 117C 0003 0018             		move.b	#3,$18(a0)
00012124 7000                       		moveq	#0,d0
00012126 1028 0028                  		move.b	$28(a0),d0
0001212A E648                       		lsr.w	#3,d0
0001212C 0240 000E                  		andi.w	#$E,d0
00012130 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012134 115A 0019                  		move.b	(a2)+,$19(a0)
00012138 1152 0016                  		move.b	(a2),$16(a0)
0001213C E248                       		lsr.w	#1,d0
0001213E 1140 001A                  		move.b	d0,$1A(a0)
00012142 3168 0008 0034             		move.w	8(a0),$34(a0)
00012148 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001214E 1028 0028                  		move.b	$28(a0),d0
00012152 0200 000F                  		andi.b	#$F,d0
00012156 6700                       		beq.s	Obj61_Action
00012158 0C00 0007                  		cmpi.b	#7,d0
0001215C 6700                       		beq.s	Obj61_Action
0001215E 117C 0001 0038             		move.b	#1,$38(a0)
00012164                            
00012164                            Obj61_Action:				; XREF: Obj61_Index
00012164 3F28 0008                  		move.w	8(a0),-(sp)
00012168 7000                       		moveq	#0,d0
0001216A 1028 0028                  		move.b	$28(a0),d0
0001216E 0240 000F                  		andi.w	#$F,d0
00012172 D040                       		add.w	d0,d0
00012174 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012178 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001217C 381F                       		move.w	(sp)+,d4
0001217E 4A28 0001                  		tst.b	1(a0)
00012182 6A00                       		bpl.s	Obj61_ChkDel
00012184 7200                       		moveq	#0,d1
00012186 1228 0019                  		move.b	$19(a0),d1
0001218A 0641 000B                  		addi.w	#$B,d1
0001218E 7400                       		moveq	#0,d2
00012190 1428 0016                  		move.b	$16(a0),d2
00012194 3602                       		move.w	d2,d3
00012196 5243                       		addq.w	#1,d3
00012198 6100 D972                  		bsr.w	SolidObject
0001219C 1144 003F                  		move.b	d4,$3F(a0)
000121A0 6100 0000                  		bsr.w	loc_12180
000121A4                            
000121A4                            Obj61_ChkDel:
000121A4 3028 0034                  		move.w	$34(a0),d0
000121A8 0240 FF80                  		andi.w	#$FF80,d0
000121AC 3238 F700                  		move.w	($FFFFF700).w,d1
000121B0 0441 0080                  		subi.w	#$80,d1
000121B4 0241 FF80                  		andi.w	#$FF80,d1
000121B8 9041                       		sub.w	d1,d0
000121BA 0C40 0280                  		cmpi.w	#$280,d0
000121BE 6200 B5B8                  		bhi.w	DeleteObject
000121C2 6000 B578                  		bra.w	DisplaySprite
000121C6                            ; ===========================================================================
000121C6 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000121CA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000121CE 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000121D2 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000121D6                            ; ===========================================================================
000121D6                            
000121D6                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000121D6 4E75                       		rts	
000121D8                            ; ===========================================================================
000121D8                            
000121D8                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000121D8 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000121DC 6600                       		bne.s	loc_120D6	; if yes, branch
000121DE 0828 0003 0022             		btst	#3,$22(a0)
000121E4 6700                       		beq.s	locret_120D4
000121E6 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000121EC                            
000121EC                            locret_120D4:
000121EC 4E75                       		rts	
000121EE                            ; ===========================================================================
000121EE                            
000121EE                            loc_120D6:
000121EE 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000121F2 66F8                       		bne.s	locret_120D4	; if time remains, branch
000121F4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000121F8 4228 0038                  		clr.b	$38(a0)
000121FC 4E75                       		rts	
000121FE                            ; ===========================================================================
000121FE                            
000121FE                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000121FE 6100 B516                  		bsr.w	SpeedToPos
00012202 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012206 6100 0000                  		bsr.w	ObjHitFloor
0001220A 4A41                       		tst.w	d1
0001220C 6A00 0000                  		bpl.w	locret_12106
00012210 5241                       		addq.w	#1,d1
00012212 D368 000C                  		add.w	d1,$C(a0)
00012216 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001221A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001221E                            
0001221E                            locret_12106:
0001221E 4E75                       		rts	
00012220                            ; ===========================================================================
00012220                            
00012220                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012220 6100 B4F4                  		bsr.w	SpeedToPos
00012224 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012228 6100 0000                  		bsr.w	ObjHitCeiling
0001222C 4A41                       		tst.w	d1
0001222E 6A00 0000                  		bpl.w	locret_12126
00012232 9368 000C                  		sub.w	d1,$C(a0)
00012236 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001223A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001223E                            
0001223E                            locret_12126:
0001223E 4E75                       		rts	
00012240                            ; ===========================================================================
00012240                            
00012240                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012240 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012246 6600                       		bne.s	locret_12138	; if not, branch
00012248 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001224C 4228 0038                  		clr.b	$38(a0)
00012250                            
00012250                            locret_12138:
00012250 4E75                       		rts	
00012252                            ; ===========================================================================
00012252                            
00012252                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012252 3038 F646                  		move.w	($FFFFF646).w,d0
00012256 9068 000C                  		sub.w	$C(a0),d0
0001225A 6700                       		beq.s	locret_1217E
0001225C 6400                       		bcc.s	loc_12162
0001225E 0C40 FFFE                  		cmpi.w	#-2,d0
00012262 6C00                       		bge.s	loc_1214E
00012264 70FE                       		moveq	#-2,d0
00012266                            
00012266                            loc_1214E:
00012266 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001226A 6100 0000                  		bsr.w	ObjHitCeiling
0001226E 4A41                       		tst.w	d1
00012270 6A00 0000                  		bpl.w	locret_12160
00012274 9368 000C                  		sub.w	d1,$C(a0)
00012278                            
00012278                            locret_12160:
00012278 4E75                       		rts	
0001227A                            ; ===========================================================================
0001227A                            
0001227A                            loc_12162:				; XREF: Obj61_Type07
0001227A 0C40 0002                  		cmpi.w	#2,d0
0001227E 6F00                       		ble.s	loc_1216A
00012280 7002                       		moveq	#2,d0
00012282                            
00012282                            loc_1216A:
00012282 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012286 6100 0000                  		bsr.w	ObjHitFloor
0001228A 4A41                       		tst.w	d1
0001228C 6A00 0000                  		bpl.w	locret_1217E
00012290 5241                       		addq.w	#1,d1
00012292 D368 000C                  		add.w	d1,$C(a0)
00012296                            
00012296                            locret_1217E:
00012296 4E75                       		rts	
00012298                            ; ===========================================================================
00012298                            
00012298                            loc_12180:				; XREF: Obj61_Action
00012298 4A28 0038                  		tst.b	$38(a0)
0001229C 6700                       		beq.s	locret_121C0
0001229E 0828 0003 0022             		btst	#3,$22(a0)
000122A4 6600                       		bne.s	loc_1219A
000122A6 4A28 003E                  		tst.b	$3E(a0)
000122AA 6700                       		beq.s	locret_121C0
000122AC 5928 003E                  		subq.b	#4,$3E(a0)
000122B0 6000                       		bra.s	loc_121A6
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            loc_1219A:
000122B2 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000122B8 6700                       		beq.s	locret_121C0
000122BA 5828 003E                  		addq.b	#4,$3E(a0)
000122BE                            
000122BE                            loc_121A6:
000122BE 1028 003E                  		move.b	$3E(a0),d0
000122C2 4EB9 0000 29DA             		jsr	(CalcSine).l
000122C8 323C 0400                  		move.w	#$400,d1
000122CC C1C1                       		muls.w	d1,d0
000122CE 4840                       		swap	d0
000122D0 D068 0030                  		add.w	$30(a0),d0
000122D4 3140 000C                  		move.w	d0,$C(a0)
000122D8                            
000122D8                            locret_121C0:
000122D8 4E75                       		rts	
000122DA                            ; ===========================================================================
000122DA                            ; ---------------------------------------------------------------------------
000122DA                            ; Sprite mappings - blocks (LZ)
000122DA                            ; ---------------------------------------------------------------------------
000122DA                            Map_obj61:
000122DA                            	include "_maps\obj61.asm"
000122DA                            ; ---------------------------------------------------------------------------
000122DA                            ; Sprite mappings - blocks (LZ)
000122DA                            ; ---------------------------------------------------------------------------
000122DA 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000122DE 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000122E2 01                         byte_121CA:	dc.b 1
000122E3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000122E8 02                         byte_121D0:	dc.b 2
000122E9 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000122EE F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000122F3 01                         byte_121DB:	dc.b 1
000122F4 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000122F9 01                         byte_121E1:	dc.b 1
000122FA F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012300 00                         		even
00012300 00                         		even
00012300                            
00012300                            ; ===========================================================================
00012300                            ; ---------------------------------------------------------------------------
00012300                            ; Object 62 - gargoyle head (LZ)
00012300                            ; ---------------------------------------------------------------------------
00012300                            
00012300                            Obj62:					; XREF: Obj_Index
00012300 7000                       		moveq	#0,d0
00012302 1028 0024                  		move.b	$24(a0),d0
00012306 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001230A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001230E 6000 D4D4                  		bra.w	MarkObjGone
00012312                            ; ===========================================================================
00012312 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012314 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012316 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012318 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001231A                            
0001231A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012322                            ; ===========================================================================
00012322                            
00012322                            Obj62_Main:				; XREF: Obj62_Index
00012322 5428 0024                  		addq.b	#2,$24(a0)
00012326 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001232E 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012334 0028 0004 0001             		ori.b	#4,1(a0)
0001233A 117C 0003 0018             		move.b	#3,$18(a0)
00012340 117C 0010 0019             		move.b	#$10,$19(a0)
00012346 1028 0028                  		move.b	$28(a0),d0	; get object type
0001234A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001234E 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012354 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001235A 0228 000F 0028             		andi.b	#$F,$28(a0)
00012360                            
00012360                            Obj62_MakeFire:				; XREF: Obj62_Index
00012360 5328 001E                  		subq.b	#1,$1E(a0)
00012364 6600                       		bne.s	Obj62_NoFire
00012366 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001236C 6100 B648                  		bsr.w	ChkObjOnScreen
00012370 6600                       		bne.s	Obj62_NoFire
00012372 6100 B84E                  		bsr.w	SingleObjLoad
00012376 6600                       		bne.s	Obj62_NoFire
00012378 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001237C 5829 0024                  		addq.b	#4,$24(a1)
00012380 3368 0008 0008             		move.w	8(a0),8(a1)
00012386 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001238C 1368 0001 0001             		move.b	1(a0),1(a1)
00012392 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012398                            
00012398                            Obj62_NoFire:
00012398 4E75                       		rts	
0001239A                            ; ===========================================================================
0001239A                            
0001239A                            Obj62_FireBall:				; XREF: Obj62_Index
0001239A 5428 0024                  		addq.b	#2,$24(a0)
0001239E 117C 0008 0016             		move.b	#8,$16(a0)
000123A4 117C 0008 0017             		move.b	#8,$17(a0)
000123AA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000123B2 317C 02E9 0002             		move.w	#$2E9,2(a0)
000123B8 0028 0004 0001             		ori.b	#4,1(a0)
000123BE 117C 0004 0018             		move.b	#4,$18(a0)
000123C4 117C 0098 0020             		move.b	#$98,$20(a0)
000123CA 117C 0008 0019             		move.b	#8,$19(a0)
000123D0 117C 0002 001A             		move.b	#2,$1A(a0)
000123D6 5068 000C                  		addq.w	#8,$C(a0)
000123DA 317C 0200 0010             		move.w	#$200,$10(a0)
000123E0 0828 0000 0022             		btst	#0,$22(a0)
000123E6 6600                       		bne.s	Obj62_Sound
000123E8 4468 0010                  		neg.w	$10(a0)
000123EC                            
000123EC                            Obj62_Sound:
000123EC 303C 00AE                  		move.w	#$AE,d0
000123F0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
000123F6                            
000123F6                            Obj62_AniFire:				; XREF: Obj62_Index
000123F6 1038 FE05                  		move.b	($FFFFFE05).w,d0
000123FA 0200 0007                  		andi.b	#7,d0
000123FE 6600                       		bne.s	Obj62_StopFire
00012400 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012406                            
00012406                            Obj62_StopFire:
00012406 6100 B30E                  		bsr.w	SpeedToPos
0001240A 0828 0000 0022             		btst	#0,$22(a0)
00012410 6600                       		bne.s	Obj62_StopFire2
00012412 76F8                       		moveq	#-8,d3
00012414 6100 0000                  		bsr.w	ObjHitWallLeft
00012418 4A41                       		tst.w	d1
0001241A 6B00 B35C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001241E 4E75                       		rts	
00012420                            ; ===========================================================================
00012420                            
00012420                            Obj62_StopFire2:
00012420 7608                       		moveq	#8,d3
00012422 6100 0000                  		bsr.w	ObjHitWallRight
00012426 4A41                       		tst.w	d1
00012428 6B00 B34E                  		bmi.w	DeleteObject
0001242C 4E75                       		rts	
0001242E                            ; ===========================================================================
0001242E                            ; ---------------------------------------------------------------------------
0001242E                            ; Sprite mappings - gargoyle head (LZ)
0001242E                            ; ---------------------------------------------------------------------------
0001242E                            Map_obj62:
0001242E                            	include "_maps\obj62.asm"
0001242E                            ; ---------------------------------------------------------------------------
0001242E                            ; Sprite mappings - gargoyle head (LZ)
0001242E                            ; ---------------------------------------------------------------------------
0001242E 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012432 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012436 03                         byte_12320:	dc.b 3
00012437 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001243C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012441 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012446 01                         byte_12330:	dc.b 1
00012447 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001244C 01                         byte_12336:	dc.b 1
0001244D FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012452                            		even
00012452                            		even
00012452                            
00012452                            ; ===========================================================================
00012452                            ; ---------------------------------------------------------------------------
00012452                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012452                            ; ---------------------------------------------------------------------------
00012452                            
00012452                            Obj63:					; XREF: Obj_Index
00012452 7000                       		moveq	#0,d0
00012454 1028 0024                  		move.b	$24(a0),d0
00012458 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001245C 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012460 3028 0030                  		move.w	$30(a0),d0
00012464 0240 FF80                  		andi.w	#$FF80,d0
00012468 3238 F700                  		move.w	($FFFFF700).w,d1
0001246C 0441 0080                  		subi.w	#$80,d1
00012470 0241 FF80                  		andi.w	#$FF80,d1
00012474 9041                       		sub.w	d1,d0
00012476 0C40 0280                  		cmpi.w	#$280,d0
0001247A 6200                       		bhi.s	loc_1236A
0001247C                            
0001247C                            Obj63_Display:				; XREF: loc_1236A
0001247C 6000 B2BE                  		bra.w	DisplaySprite
00012480                            ; ===========================================================================
00012480                            
00012480                            loc_1236A:				; XREF: Obj63
00012480 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012486 6600                       		bne.s	loc_12378
00012488 0C40 FF80                  		cmpi.w	#-$80,d0
0001248C 64EE                       		bcc.s	Obj63_Display
0001248E                            
0001248E                            loc_12378:
0001248E 1028 002F                  		move.b	$2F(a0),d0
00012492 6A00 B2E4                  		bpl.w	DeleteObject
00012496 0240 007F                  		andi.w	#$7F,d0
0001249A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001249E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000124A4 6000 B2D2                  		bra.w	DeleteObject
000124A8                            ; ===========================================================================
000124A8 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000124AA 0000                       		dc.w loc_124B2-Obj63_Index
000124AC 0000                       		dc.w loc_124C2-Obj63_Index
000124AE 0000                       		dc.w loc_124DE-Obj63_Index
000124B0                            ; ===========================================================================
000124B0                            
000124B0                            Obj63_Main:				; XREF: Obj63_Index
000124B0 1028 0028                  		move.b	$28(a0),d0
000124B4 6B00 0000                  		bmi.w	loc_12460
000124B8 5428 0024                  		addq.b	#2,$24(a0)
000124BC 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000124C4 317C 43F6 0002             		move.w	#$43F6,2(a0)
000124CA 0028 0004 0001             		ori.b	#4,1(a0)
000124D0 117C 0010 0019             		move.b	#$10,$19(a0)
000124D6 117C 0004 0018             		move.b	#4,$18(a0)
000124DC 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000124E2 6600                       		bne.s	loc_123E2
000124E4 5828 0024                  		addq.b	#4,$24(a0)
000124E8 317C 03F6 0002             		move.w	#$3F6,2(a0)
000124EE 117C 0001 0018             		move.b	#1,$18(a0)
000124F4 6000 0000                  		bra.w	loc_124DE
000124F8                            ; ===========================================================================
000124F8                            
000124F8                            loc_123E2:
000124F8 117C 0004 001A             		move.b	#4,$1A(a0)
000124FE 7000                       		moveq	#0,d0
00012500 1028 0028                  		move.b	$28(a0),d0
00012504 3200                       		move.w	d0,d1
00012506 E648                       		lsr.w	#3,d0
00012508 0240 001E                  		andi.w	#$1E,d0
0001250C 45FA 0000                  		lea	Obj63_Data(pc),a2
00012510 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012514 315A 0038                  		move.w	(a2)+,$38(a0)
00012518 315A 0030                  		move.w	(a2)+,$30(a0)
0001251C 214A 003C                  		move.l	a2,$3C(a0)
00012520 0241 000F                  		andi.w	#$F,d1
00012524 E549                       		lsl.w	#2,d1
00012526 1141 0038                  		move.b	d1,$38(a0)
0001252A 117C 0004 003A             		move.b	#4,$3A(a0)
00012530 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012534 6700                       		beq.s	loc_1244C
00012536 117C 0001 003B             		move.b	#1,$3B(a0)
0001253C 4428 003A                  		neg.b	$3A(a0)
00012540 7200                       		moveq	#0,d1
00012542 1228 0038                  		move.b	$38(a0),d1
00012546 D228 003A                  		add.b	$3A(a0),d1
0001254A B228 0039                  		cmp.b	$39(a0),d1
0001254E 6500                       		bcs.s	loc_12448
00012550 1001                       		move.b	d1,d0
00012552 7200                       		moveq	#0,d1
00012554 4A00                       		tst.b	d0
00012556 6A00                       		bpl.s	loc_12448
00012558 1228 0039                  		move.b	$39(a0),d1
0001255C 5901                       		subq.b	#4,d1
0001255E                            
0001255E                            loc_12448:
0001255E 1141 0038                  		move.b	d1,$38(a0)
00012562                            
00012562                            loc_1244C:
00012562 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012568 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001256E 6100 0000                  		bsr.w	Obj63_ChangeDir
00012572 6000 0000                  		bra.w	loc_124B2
00012576                            ; ===========================================================================
00012576                            
00012576                            loc_12460:				; XREF: Obj63_Main
00012576 1140 002F                  		move.b	d0,$2F(a0)
0001257A 0240 007F                  		andi.w	#$7F,d0
0001257E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012582 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012588 6600 B1EE                  		bne.w	DeleteObject
0001258C D040                       		add.w	d0,d0
0001258E 0240 001E                  		andi.w	#$1E,d0
00012592 0640 0070                  		addi.w	#$70,d0
00012596 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001259C D4F2 0000                  		adda.w	(a2,d0.w),a2
000125A0 321A                       		move.w	(a2)+,d1
000125A2 2248                       		movea.l	a0,a1
000125A4 6000                       		bra.s	Obj63_MakePtfms
000125A6                            ; ===========================================================================
000125A6                            
000125A6                            Obj63_Loop:
000125A6 6100 B61A                  		bsr.w	SingleObjLoad
000125AA 6600                       		bne.s	loc_124AA
000125AC                            
000125AC                            Obj63_MakePtfms:			; XREF: loc_12460
000125AC 12BC 0063                  		move.b	#$63,0(a1)
000125B0 335A 0008                  		move.w	(a2)+,8(a1)
000125B4 335A 000C                  		move.w	(a2)+,$C(a1)
000125B8 301A                       		move.w	(a2)+,d0
000125BA 1340 0028                  		move.b	d0,$28(a1)
000125BE                            
000125BE                            loc_124AA:
000125BE 51C9 FFE6                  		dbf	d1,Obj63_Loop
000125C2                            
000125C2 588F                       		addq.l	#4,sp
000125C4 4E75                       		rts	
000125C6                            ; ===========================================================================
000125C6                            
000125C6                            loc_124B2:				; XREF: Obj63_Index
000125C6 7200                       		moveq	#0,d1
000125C8 1228 0019                  		move.b	$19(a0),d1
000125CC 4EB9 0000 7552             		jsr	(PlatformObject).l
000125D2 6000 0000                  		bra.w	sub_12502
000125D6                            ; ===========================================================================
000125D6                            
000125D6                            loc_124C2:				; XREF: Obj63_Index
000125D6 7200                       		moveq	#0,d1
000125D8 1228 0019                  		move.b	$19(a0),d1
000125DC 4EB9 0000 76C6             		jsr	(ExitPlatform).l
000125E2 3F28 0008                  		move.w	8(a0),-(sp)
000125E6 6100 0000                  		bsr.w	sub_12502
000125EA 341F                       		move.w	(sp)+,d2
000125EC 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
000125F2                            ; ===========================================================================
000125F2                            
000125F2                            loc_124DE:				; XREF: Obj63_Index
000125F2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000125F6 0240 0003                  		andi.w	#3,d0
000125FA 6600                       		bne.s	loc_124FC
000125FC 7201                       		moveq	#1,d1
000125FE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012602 6700                       		beq.s	loc_124F2
00012604 4401                       		neg.b	d1
00012606                            
00012606                            loc_124F2:
00012606 D328 001A                  		add.b	d1,$1A(a0)
0001260A 0228 0003 001A             		andi.b	#3,$1A(a0)
00012610                            
00012610                            loc_124FC:
00012610 588F                       		addq.l	#4,sp
00012612 6000 D1D0                  		bra.w	MarkObjGone
00012616                            
00012616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012616                            
00012616                            
00012616                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012616 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001261A 6700                       		beq.s	loc_12520
0001261C 4A28 003B                  		tst.b	$3B(a0)
00012620 6600                       		bne.s	loc_12520
00012622 117C 0001 003B             		move.b	#1,$3B(a0)
00012628 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001262E 4428 003A                  		neg.b	$3A(a0)
00012632 6000                       		bra.s	loc_12534
00012634                            ; ===========================================================================
00012634                            
00012634                            loc_12520:
00012634 3028 0008                  		move.w	8(a0),d0
00012638 B068 0034                  		cmp.w	$34(a0),d0
0001263C 6600                       		bne.s	loc_1256A
0001263E 3028 000C                  		move.w	$C(a0),d0
00012642 B068 0036                  		cmp.w	$36(a0),d0
00012646 6600                       		bne.s	loc_1256A
00012648                            
00012648                            loc_12534:
00012648 7200                       		moveq	#0,d1
0001264A 1228 0038                  		move.b	$38(a0),d1
0001264E D228 003A                  		add.b	$3A(a0),d1
00012652 B228 0039                  		cmp.b	$39(a0),d1
00012656 6500                       		bcs.s	loc_12552
00012658 1001                       		move.b	d1,d0
0001265A 7200                       		moveq	#0,d1
0001265C 4A00                       		tst.b	d0
0001265E 6A00                       		bpl.s	loc_12552
00012660 1228 0039                  		move.b	$39(a0),d1
00012664 5901                       		subq.b	#4,d1
00012666                            
00012666                            loc_12552:
00012666 1141 0038                  		move.b	d1,$38(a0)
0001266A 2268 003C                  		movea.l	$3C(a0),a1
0001266E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012674 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001267A 6100 0000                  		bsr.w	Obj63_ChangeDir
0001267E                            
0001267E                            loc_1256A:
0001267E 6100 B096                  		bsr.w	SpeedToPos
00012682 4E75                       		rts	
00012684                            ; End of function sub_12502
00012684                            
00012684                            
00012684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012684                            
00012684                            
00012684                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012684 7000                       		moveq	#0,d0
00012686 343C FF00                  		move.w	#-$100,d2
0001268A 3028 0008                  		move.w	8(a0),d0
0001268E 9068 0034                  		sub.w	$34(a0),d0
00012692 6400                       		bcc.s	loc_12584
00012694 4440                       		neg.w	d0
00012696 4442                       		neg.w	d2
00012698                            
00012698                            loc_12584:
00012698 7200                       		moveq	#0,d1
0001269A 363C FF00                  		move.w	#-$100,d3
0001269E 3228 000C                  		move.w	$C(a0),d1
000126A2 9268 0036                  		sub.w	$36(a0),d1
000126A6 6400                       		bcc.s	loc_12598
000126A8 4441                       		neg.w	d1
000126AA 4443                       		neg.w	d3
000126AC                            
000126AC                            loc_12598:
000126AC B240                       		cmp.w	d0,d1
000126AE 6500                       		bcs.s	loc_125C2
000126B0 3028 0008                  		move.w	8(a0),d0
000126B4 9068 0034                  		sub.w	$34(a0),d0
000126B8 6700                       		beq.s	loc_125AE
000126BA 48C0                       		ext.l	d0
000126BC E180                       		asl.l	#8,d0
000126BE 81C1                       		divs.w	d1,d0
000126C0 4440                       		neg.w	d0
000126C2                            
000126C2                            loc_125AE:
000126C2 3140 0010                  		move.w	d0,$10(a0)
000126C6 3143 0012                  		move.w	d3,$12(a0)
000126CA 4840                       		swap	d0
000126CC 3140 000A                  		move.w	d0,$A(a0)
000126D0 4268 000E                  		clr.w	$E(a0)
000126D4 4E75                       		rts	
000126D6                            ; ===========================================================================
000126D6                            
000126D6                            loc_125C2:				; XREF: Obj63_ChangeDir
000126D6 3228 000C                  		move.w	$C(a0),d1
000126DA 9268 0036                  		sub.w	$36(a0),d1
000126DE 6700                       		beq.s	loc_125D4
000126E0 48C1                       		ext.l	d1
000126E2 E181                       		asl.l	#8,d1
000126E4 83C0                       		divs.w	d0,d1
000126E6 4441                       		neg.w	d1
000126E8                            
000126E8                            loc_125D4:
000126E8 3141 0012                  		move.w	d1,$12(a0)
000126EC 3142 0010                  		move.w	d2,$10(a0)
000126F0 4841                       		swap	d1
000126F2 3141 000E                  		move.w	d1,$E(a0)
000126F6 4268 000A                  		clr.w	$A(a0)
000126FA 4E75                       		rts	
000126FC                            ; End of function Obj63_ChangeDir
000126FC                            
000126FC                            ; ===========================================================================
000126FC 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000126FE 0000                       		dc.w word_12610-Obj63_Data
00012700 0000                       		dc.w word_12628-Obj63_Data
00012702 0000                       		dc.w word_1263C-Obj63_Data
00012704 0000                       		dc.w word_12650-Obj63_Data
00012706 0000                       		dc.w word_12668-Obj63_Data
00012708 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012718 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012724 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012734 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001273C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012750 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012764 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001277C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012790                            
00012790                            ; ---------------------------------------------------------------------------
00012790                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012790                            ; ---------------------------------------------------------------------------
00012790                            Map_obj63:
00012790                            	include "_maps\obj63.asm"
00012790                            ; ---------------------------------------------------------------------------
00012790                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012790                            ; ---------------------------------------------------------------------------
00012790 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012794 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012798 0000                       		dc.w byte_1269E-Map_obj63
0001279A 01                         byte_12686:	dc.b 1
0001279B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000127A0 01                         byte_1268C:	dc.b 1
000127A1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000127A6 01                         byte_12692:	dc.b 1
000127A7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000127AC 01                         byte_12698:	dc.b 1
000127AD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000127B2 01                         byte_1269E:	dc.b 1
000127B3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000127B8                            		even
000127B8                            		even
000127B8                            
000127B8                            ; ===========================================================================
000127B8                            ; ---------------------------------------------------------------------------
000127B8                            ; Object 64 - bubbles (LZ)
000127B8                            ; ---------------------------------------------------------------------------
000127B8                            
000127B8                            Obj64:					; XREF: Obj_Index
000127B8 7000                       		moveq	#0,d0
000127BA 1028 0024                  		move.b	$24(a0),d0
000127BE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000127C2 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000127C6                            ; ===========================================================================
000127C6 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000127C8 0000                       		dc.w Obj64_Animate-Obj64_Index
000127CA 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000127CC 0000                       		dc.w Obj64_Display2-Obj64_Index
000127CE 0000                       		dc.w Obj64_Delete3-Obj64_Index
000127D0 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000127D2                            ; ===========================================================================
000127D2                            
000127D2                            Obj64_Main:				; XREF: Obj64_Index
000127D2 5428 0024                  		addq.b	#2,$24(a0)
000127D6 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000127DE 317C 8348 0002             		move.w	#$8348,2(a0)
000127E4 117C 0084 0001             		move.b	#$84,1(a0)
000127EA 117C 0010 0019             		move.b	#$10,$19(a0)
000127F0 117C 0001 0018             		move.b	#1,$18(a0)
000127F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000127FA 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000127FC 5028 0024                  		addq.b	#8,$24(a0)
00012800 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012804 1140 0032                  		move.b	d0,$32(a0)
00012808 1140 0033                  		move.b	d0,$33(a0)
0001280C 117C 0006 001C             		move.b	#6,$1C(a0)
00012812 6000 0000                  		bra.w	Obj64_BblMaker
00012816                            ; ===========================================================================
00012816                            
00012816                            Obj64_Bubble:				; XREF: Obj64_Main
00012816 1140 001C                  		move.b	d0,$1C(a0)
0001281A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012820 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012826 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001282C 1140 0026                  		move.b	d0,$26(a0)
00012830                            
00012830                            Obj64_Animate:				; XREF: Obj64_Index
00012830 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012836 4EB9 0000 A7EE             		jsr	AnimateSprite
0001283C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012842 6600                       		bne.s	Obj64_ChkWater
00012844 117C 0001 002E             		move.b	#1,$2E(a0)
0001284A                            
0001284A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001284A 3038 F646                  		move.w	($FFFFF646).w,d0
0001284E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012852 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012854                            
00012854                            Obj64_Burst:				; XREF: Obj64_Wobble
00012854 117C 0006 0024             		move.b	#6,$24(a0)
0001285A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001285E 6000 0000                  		bra.w	Obj64_Display2
00012862                            ; ===========================================================================
00012862                            
00012862                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012862 1028 0026                  		move.b	$26(a0),d0
00012866 5228 0026                  		addq.b	#1,$26(a0)
0001286A 0240 007F                  		andi.w	#$7F,d0
0001286E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012874 1031 0000                  		move.b	(a1,d0.w),d0
00012878 4880                       		ext.w	d0
0001287A D068 0030                  		add.w	$30(a0),d0
0001287E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012882 4A28 002E                  		tst.b	$2E(a0)
00012886 6700                       		beq.s	Obj64_Display
00012888 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001288C 6700                       		beq.s	Obj64_Display	; if not, branch
0001288E                            
0001288E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012892 303C 00AD                  		move.w	#$AD,d0
00012896 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001289C 43F8 D000                  		lea	($FFFFD000).w,a1
000128A0 4269 0010                  		clr.w	$10(a1)
000128A4 4269 0012                  		clr.w	$12(a1)
000128A8 4269 0014                  		clr.w	$14(a1)
000128AC 137C 0015 001C             		move.b	#$15,$1C(a1)
000128B2 337C 0023 003E             		move.w	#$23,$3E(a1)
000128B8 137C 0000 003C             		move.b	#0,$3C(a1)
000128BE 08A9 0005 0022             		bclr	#5,$22(a1)
000128C4 08A9 0004 0022             		bclr	#4,$22(a1)
000128CA 0829 0002 0022             		btst	#2,$22(a1)
000128D0 6700 FF82                  		beq.w	Obj64_Burst
000128D4 08A9 0002 0022             		bclr	#2,$22(a1)
000128DA 137C 0013 0016             		move.b	#$13,$16(a1)
000128E0 137C 0009 0017             		move.b	#9,$17(a1)
000128E6 5B69 000C                  		subq.w	#5,$C(a1)
000128EA 6000 FF68                  		bra.w	Obj64_Burst
000128EE                            ; ===========================================================================
000128EE                            
000128EE                            Obj64_Display:				; XREF: Obj64_Wobble
000128EE 6100 AE26                  		bsr.w	SpeedToPos
000128F2 4A28 0001                  		tst.b	1(a0)
000128F6 6A00                       		bpl.s	Obj64_Delete
000128F8 4EFA AE42                  		jmp	DisplaySprite
000128FC                            ; ===========================================================================
000128FC                            
000128FC                            Obj64_Delete:
000128FC 4EFA AE7A                  		jmp	DeleteObject
00012900                            ; ===========================================================================
00012900                            
00012900                            Obj64_Display2:				; XREF: Obj64_Index
00012900 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012906 4EB9 0000 A7EE             		jsr	AnimateSprite
0001290C 4A28 0001                  		tst.b	1(a0)
00012910 6A00                       		bpl.s	Obj64_Delete2
00012912 4EFA AE28                  		jmp	DisplaySprite
00012916                            ; ===========================================================================
00012916                            
00012916                            Obj64_Delete2:
00012916 4EFA AE60                  		jmp	DeleteObject
0001291A                            ; ===========================================================================
0001291A                            
0001291A                            Obj64_Delete3:				; XREF: Obj64_Index
0001291A 6000 AE5C                  		bra.w	DeleteObject
0001291E                            ; ===========================================================================
0001291E                            
0001291E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001291E 4A68 0036                  		tst.w	$36(a0)
00012922 6600                       		bne.s	loc_12874
00012924 3038 F646                  		move.w	($FFFFF646).w,d0
00012928 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001292C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012930 4A28 0001                  		tst.b	1(a0)
00012934 6A00 0000                  		bpl.w	Obj64_ChkDel
00012938 5368 0038                  		subq.w	#1,$38(a0)
0001293C 6A00 0000                  		bpl.w	loc_12914
00012940 317C 0001 0036             		move.w	#1,$36(a0)
00012946                            
00012946                            loc_1283A:
00012946 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001294C 3200                       		move.w	d0,d1
0001294E 0240 0007                  		andi.w	#7,d0
00012952 0C40 0006                  		cmpi.w	#6,d0
00012956 64EE                       		bcc.s	loc_1283A
00012958                            
00012958 1140 0034                  		move.b	d0,$34(a0)
0001295C 0241 000C                  		andi.w	#$C,d1
00012960 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012966 D2C1                       		adda.w	d1,a1
00012968 2149 003C                  		move.l	a1,$3C(a0)
0001296C 5328 0032                  		subq.b	#1,$32(a0)
00012970 6A00                       		bpl.s	loc_12872
00012972 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012978 08E8 0007 0036             		bset	#7,$36(a0)
0001297E                            
0001297E                            loc_12872:
0001297E 6000                       		bra.s	loc_1287C
00012980                            ; ===========================================================================
00012980                            
00012980                            loc_12874:				; XREF: Obj64_BblMaker
00012980 5368 0038                  		subq.w	#1,$38(a0)
00012984 6A00 0000                  		bpl.w	loc_12914
00012988                            
00012988                            loc_1287C:
00012988 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001298E 0240 001F                  		andi.w	#$1F,d0
00012992 3140 0038                  		move.w	d0,$38(a0)
00012996 6100 B22A                  		bsr.w	SingleObjLoad
0001299A 6600                       		bne.s	loc_128F8
0001299C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000129A0 3368 0008 0008             		move.w	8(a0),8(a1)
000129A6 4EB9 0000 29B4             		jsr	(RandomNumber).l
000129AC 0240 000F                  		andi.w	#$F,d0
000129B0 5140                       		subq.w	#8,d0
000129B2 D169 0008                  		add.w	d0,8(a1)
000129B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129BC 7000                       		moveq	#0,d0
000129BE 1028 0034                  		move.b	$34(a0),d0
000129C2 2468 003C                  		movea.l	$3C(a0),a2
000129C6 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000129CC 0828 0007 0036             		btst	#7,$36(a0)
000129D2 6700                       		beq.s	loc_128F8
000129D4 4EB9 0000 29B4             		jsr	(RandomNumber).l
000129DA 0240 0003                  		andi.w	#3,d0
000129DE 6600                       		bne.s	loc_128E4
000129E0 08E8 0006 0036             		bset	#6,$36(a0)
000129E6 6600                       		bne.s	loc_128F8
000129E8 137C 0002 0028             		move.b	#2,$28(a1)
000129EE                            
000129EE                            loc_128E4:
000129EE 4A28 0034                  		tst.b	$34(a0)
000129F2 6600                       		bne.s	loc_128F8
000129F4 08E8 0006 0036             		bset	#6,$36(a0)
000129FA 6600                       		bne.s	loc_128F8
000129FC 137C 0002 0028             		move.b	#2,$28(a1)
00012A02                            
00012A02                            loc_128F8:
00012A02 5328 0034                  		subq.b	#1,$34(a0)
00012A06 6A00                       		bpl.s	loc_12914
00012A08 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012A0E 0240 007F                  		andi.w	#$7F,d0
00012A12 0640 0080                  		addi.w	#$80,d0
00012A16 D168 0038                  		add.w	d0,$38(a0)
00012A1A 4268 0036                  		clr.w	$36(a0)
00012A1E                            
00012A1E                            loc_12914:
00012A1E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012A24 4EB9 0000 A7EE             		jsr	AnimateSprite
00012A2A                            
00012A2A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012A2A 3028 0008                  		move.w	8(a0),d0
00012A2E 0240 FF80                  		andi.w	#$FF80,d0
00012A32 3238 F700                  		move.w	($FFFFF700).w,d1
00012A36 0441 0080                  		subi.w	#$80,d1
00012A3A 0241 FF80                  		andi.w	#$FF80,d1
00012A3E 9041                       		sub.w	d1,d0
00012A40 0C40 0280                  		cmpi.w	#$280,d0
00012A44 6200 AD32                  		bhi.w	DeleteObject
00012A48 3038 F646                  		move.w	($FFFFF646).w,d0
00012A4C B068 000C                  		cmp.w	$C(a0),d0
00012A50 6500 ACEA                  		bcs.w	DisplaySprite
00012A54 4E75                       		rts	
00012A56                            ; ===========================================================================
00012A56                            ; bubble production sequence
00012A56                            
00012A56                            ; 0 = small bubble, 1 =	large bubble
00012A56                            
00012A56 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012A68                            
00012A68                            ; ===========================================================================
00012A68                            
00012A68                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012A68 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012A6C 6B00                       		bmi.s	loc_12998
00012A6E 43F8 D000                  		lea	($FFFFD000).w,a1
00012A72 3029 0008                  		move.w	8(a1),d0
00012A76 3228 0008                  		move.w	8(a0),d1
00012A7A 0441 0010                  		subi.w	#$10,d1
00012A7E B240                       		cmp.w	d0,d1
00012A80 6400                       		bcc.s	loc_12998
00012A82 0641 0020                  		addi.w	#$20,d1
00012A86 B240                       		cmp.w	d0,d1
00012A88 6500                       		bcs.s	loc_12998
00012A8A 3029 000C                  		move.w	$C(a1),d0
00012A8E 3228 000C                  		move.w	$C(a0),d1
00012A92 B240                       		cmp.w	d0,d1
00012A94 6400                       		bcc.s	loc_12998
00012A96 0641 0010                  		addi.w	#$10,d1
00012A9A B240                       		cmp.w	d0,d1
00012A9C 6500                       		bcs.s	loc_12998
00012A9E 7001                       		moveq	#1,d0
00012AA0 4E75                       		rts	
00012AA2                            ; ===========================================================================
00012AA2                            
00012AA2                            loc_12998:
00012AA2 7000                       		moveq	#0,d0
00012AA4 4E75                       		rts	
00012AA6                            ; ===========================================================================
00012AA6                            Ani_obj64:
00012AA6                            	include "_anim\obj64.asm"
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6                            ; Animation script - bubbles (LZ)
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6 0000                       		dc.w byte_129AA-Ani_obj64
00012AA8 0000                       		dc.w byte_129B0-Ani_obj64
00012AAA 0000                       		dc.w byte_129B6-Ani_obj64
00012AAC 0000                       		dc.w byte_129BE-Ani_obj64
00012AAE 0000                       		dc.w byte_129BE-Ani_obj64
00012AB0 0000                       		dc.w byte_129C0-Ani_obj64
00012AB2 0000                       		dc.w byte_129C6-Ani_obj64
00012AB4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012ABA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012AC0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012AC8 04FC                       byte_129BE:	dc.b 4,	$FC
00012ACA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012AD0 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012AD6 00                         		even
00012AD6 00                         		even
00012AD6                            
00012AD6                            ; ---------------------------------------------------------------------------
00012AD6                            ; Sprite mappings - bubbles (LZ)
00012AD6                            ; ---------------------------------------------------------------------------
00012AD6                            Map_obj64:
00012AD6                            	include "_maps\obj64.asm"
00012AD6                            ; ---------------------------------------------------------------------------
00012AD6                            ; Sprite mappings - bubbles (LZ)
00012AD6                            ; ---------------------------------------------------------------------------
00012AD6 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012ADA 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012ADE 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012AE2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012AE6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012AEA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012AEE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012AF2 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012AF6 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012AFA 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012AFE 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012B02 0000                       		dc.w byte_12A9C-Map_obj64
00012B04 01                         byte_129FA:	dc.b 1
00012B05 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012B0A 01                         byte_12A00:	dc.b 1
00012B0B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012B10 01                         byte_12A06:	dc.b 1
00012B11 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012B16 01                         byte_12A0C:	dc.b 1
00012B17 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012B1C 01                         byte_12A12:	dc.b 1
00012B1D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012B22 01                         byte_12A18:	dc.b 1
00012B23 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012B28 01                         byte_12A1E:	dc.b 1
00012B29 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012B2E 04                         byte_12A24:	dc.b 4
00012B2F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012B34 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012B39 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012B3E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012B43 04                         byte_12A39:	dc.b 4
00012B44 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012B49 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012B4E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012B53 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012B58 01                         byte_12A4E:	dc.b 1
00012B59 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012B5E 01                         byte_12A54:	dc.b 1
00012B5F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012B64 01                         byte_12A5A:	dc.b 1
00012B65 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012B6A 01                         byte_12A60:	dc.b 1
00012B6B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012B70 01                         byte_12A66:	dc.b 1
00012B71 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012B76 01                         byte_12A6C:	dc.b 1
00012B77 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012B7C 01                         byte_12A72:	dc.b 1
00012B7D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012B82 01                         byte_12A78:	dc.b 1
00012B83 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012B88 01                         byte_12A7E:	dc.b 1
00012B89 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012B8E 01                         byte_12A84:	dc.b 1
00012B8F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012B94 01                         byte_12A8A:	dc.b 1
00012B95 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012B9A 01                         byte_12A90:	dc.b 1
00012B9B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012BA0 01                         byte_12A96:	dc.b 1
00012BA1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012BA6 00                         byte_12A9C:	dc.b 0
00012BA8 00                         		even
00012BA8 00                         		even
00012BA8                            
00012BA8                            ; ===========================================================================
00012BA8                            ; ---------------------------------------------------------------------------
00012BA8                            ; Object 65 - waterfalls (LZ)
00012BA8                            ; ---------------------------------------------------------------------------
00012BA8                            
00012BA8                            Obj65:					; XREF: Obj_Index
00012BA8 7000                       		moveq	#0,d0
00012BAA 1028 0024                  		move.b	$24(a0),d0
00012BAE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012BB2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012BB6                            ; ===========================================================================
00012BB6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012BB8 0000                       		dc.w Obj65_Animate-Obj65_Index
00012BBA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012BBC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012BBE 0000                       		dc.w loc_12B36-Obj65_Index
00012BC0                            ; ===========================================================================
00012BC0                            
00012BC0                            Obj65_Main:				; XREF: Obj65_Index
00012BC0 5828 0024                  		addq.b	#4,$24(a0)
00012BC4 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012BCC 317C 4259 0002             		move.w	#$4259,2(a0)
00012BD2 0028 0004 0001             		ori.b	#4,1(a0)
00012BD8 117C 0018 0019             		move.b	#$18,$19(a0)
00012BDE 117C 0001 0018             		move.b	#1,$18(a0)
00012BE4 1028 0028                  		move.b	$28(a0),d0	; get object type
00012BE8 6A00                       		bpl.s	loc_12AE6
00012BEA 08E8 0007 0002             		bset	#7,2(a0)
00012BF0                            
00012BF0                            loc_12AE6:
00012BF0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012BF4 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012BF8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012BFC 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012BFE 4228 0018                  		clr.b	$18(a0)
00012C02 5528 0024                  		subq.b	#2,$24(a0)
00012C06 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012C0C 6700                       		beq.s	loc_12B0A	; if not, branch
00012C0E 117C 0006 0024             		move.b	#6,$24(a0)
00012C14                            
00012C14                            loc_12B0A:
00012C14 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012C1A 6700                       		beq.s	Obj65_Animate	; if not, branch
00012C1C 117C 0008 0024             		move.b	#8,$24(a0)
00012C22                            
00012C22                            Obj65_Animate:				; XREF: Obj65_Index
00012C22 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012C28 4EB9 0000 A7EE             		jsr	AnimateSprite
00012C2E                            
00012C2E                            Obj65_ChkDel:				; XREF: Obj65_Index
00012C2E 6000 CBB4                  		bra.w	MarkObjGone
00012C32                            ; ===========================================================================
00012C32                            
00012C32                            Obj65_FixHeight:			; XREF: Obj65_Index
00012C32 3038 F646                  		move.w	($FFFFF646).w,d0
00012C36 0440 0010                  		subi.w	#$10,d0
00012C3A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012C3E 60E2                       		bra.s	Obj65_Animate
00012C40                            ; ===========================================================================
00012C40                            
00012C40                            loc_12B36:				; XREF: Obj65_Index
00012C40 08A8 0007 0002             		bclr	#7,2(a0)
00012C46 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012C4C 6600                       		bne.s	Obj65_Animate2
00012C4E 08E8 0007 0002             		bset	#7,2(a0)
00012C54                            
00012C54                            Obj65_Animate2:
00012C54 60CC                       		bra.s	Obj65_Animate
00012C56                            ; ===========================================================================
00012C56                            Ani_obj65:
00012C56                            	include "_anim\obj65.asm"
00012C56                            ; ---------------------------------------------------------------------------
00012C56                            ; Animation script - waterfall (LZ)
00012C56                            ; ---------------------------------------------------------------------------
00012C56 0000                       		dc.w byte_12B4E-Ani_obj65
00012C58 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012C5E 00                         		even
00012C5E 00                         		even
00012C5E                            
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            ; Sprite mappings - waterfalls (LZ)
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            Map_obj65:
00012C5E                            	include "_maps\obj65.asm"
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            ; Sprite mappings - waterfalls (LZ)
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012C62 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012C66 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012C6A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012C6E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012C72 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012C76 01                         byte_12B6C:	dc.b 1
00012C77 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012C7C 02                         byte_12B72:	dc.b 2
00012C7D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012C82 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012C87 02                         byte_12B7D:	dc.b 2
00012C88 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C8D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C92 01                         byte_12B88:	dc.b 1
00012C93 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012C98 02                         byte_12B8E:	dc.b 2
00012C99 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C9E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012CA3 01                         byte_12B99:	dc.b 1
00012CA4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012CA9 01                         byte_12B9F:	dc.b 1
00012CAA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012CAF 01                         byte_12BA5:	dc.b 1
00012CB0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012CB5 02                         byte_12BAB:	dc.b 2
00012CB6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012CBB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012CC0 02                         byte_12BB6:	dc.b 2
00012CC1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012CC6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012CCB 02                         byte_12BC1:	dc.b 2
00012CCC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012CD1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012CD6 02                         byte_12BCC:	dc.b 2
00012CD7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012CDC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012CE2 00                         		even
00012CE2 00                         		even
00012CE2                            
00012CE2                            ; ===========================================================================
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2                            ; Object 01 - Sonic
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2                            
00012CE2                            Obj01:					; XREF: Obj_Index
00012CE2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012CE6 6700                       		beq.s	Obj01_Normal	; if not, branch
00012CE8 4EF9 0000 0000             		jmp	DebugMode
00012CEE                            ; ===========================================================================
00012CEE                            
00012CEE                            Obj01_Normal:
00012CEE 7000                       		moveq	#0,d0
00012CF0 1028 0024                  		move.b	$24(a0),d0
00012CF4 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012CF8 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012CFC                            ; ===========================================================================
00012CFC 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012CFE 0000                       		dc.w Obj01_Control-Obj01_Index
00012D00 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012D02 0000                       		dc.w Obj01_Death-Obj01_Index
00012D04 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012D06                            ; ===========================================================================
00012D06                            
00012D06                            Obj01_Main:				; XREF: Obj01_Index
00012D06 5428 0024                  		addq.b	#2,$24(a0)
00012D0A 117C 0013 0016             		move.b	#$13,$16(a0)
00012D10 117C 0009 0017             		move.b	#9,$17(a0)
00012D16 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012D1E 317C 0780 0002             		move.w	#$780,2(a0)
00012D24 117C 0002 0018             		move.b	#2,$18(a0)
00012D2A 117C 0018 0019             		move.b	#$18,$19(a0)
00012D30 117C 0004 0001             		move.b	#4,1(a0)
00012D36 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012D3C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012D42 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012D48                            
00012D48                            Obj01_Control:				; XREF: Obj01_Index
00012D48 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012D4C 6700                       		beq.s	loc_12C58	; if not, branch
00012D4E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012D54 6700                       		beq.s	loc_12C58	; if not, branch
00012D56 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012D5C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012D60 4E75                       		rts	
00012D62                            ; ===========================================================================
00012D62                            
00012D62                            loc_12C58:
00012D62 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012D66 6600                       		bne.s	loc_12C64	; if yes, branch
00012D68 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012D6E                            
00012D6E                            loc_12C64:
00012D6E 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012D74 6600                       		bne.s	loc_12C7E	; if yes, branch
00012D76 7000                       		moveq	#0,d0
00012D78 1028 0022                  		move.b	$22(a0),d0
00012D7C 0240 0006                  		andi.w	#6,d0
00012D80 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012D84 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012D88                            
00012D88                            loc_12C7E:
00012D88 6100                       		bsr.s	Sonic_Display
00012D8A 6100 0000                  		bsr.w	Sonic_RecordPos
00012D8E 6100 0000                  		bsr.w	Sonic_Water
00012D92 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012D98 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012D9E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012DA2 6700                       		beq.s	loc_12CA6
00012DA4 4A28 001C                  		tst.b	$1C(a0)
00012DA8 6600                       		bne.s	loc_12CA6
00012DAA 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012DB0                            
00012DB0                            loc_12CA6:
00012DB0 6100 0000                  		bsr.w	Sonic_Animate
00012DB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012DB8 6B00                       		bmi.s	loc_12CB6
00012DBA 4EB9 0000 0000             		jsr	TouchResponse
00012DC0                            
00012DC0                            loc_12CB6:
00012DC0 6100 0000                  		bsr.w	Sonic_Loops
00012DC4 6100 0000                  		bsr.w	LoadSonicDynPLC
00012DC8 4E75                       		rts	
00012DCA                            ; ===========================================================================
00012DCA 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012DCC 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012DCE 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012DD0 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012DD2                            ; ---------------------------------------------------------------------------
00012DD2                            ; Music	to play	after invincibility wears off
00012DD2                            ; ---------------------------------------------------------------------------
00012DD2                            MusicList2:	incbin	misc\muslist2.bin
00012DD8                            		even
00012DD8                            ; ===========================================================================
00012DD8                            
00012DD8                            Sonic_Display:				; XREF: loc_12C7E
00012DD8 3028 0030                  		move.w	$30(a0),d0
00012DDC 6700                       		beq.s	Obj01_Display
00012DDE 5368 0030                  		subq.w	#1,$30(a0)
00012DE2 E648                       		lsr.w	#3,d0
00012DE4 6400                       		bcc.s	Obj01_ChkInvin
00012DE6                            
00012DE6                            Obj01_Display:
00012DE6 4EBA A954                  		jsr	DisplaySprite
00012DEA                            
00012DEA                            Obj01_ChkInvin:
00012DEA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012DEE 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012DF0 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012DF4 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012DF6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012DFA 6600                       		bne.s	Obj01_ChkShoes
00012DFC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012E00 6600                       		bne.s	Obj01_RmvInvin
00012E02 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012E08 6500                       		bcs.s	Obj01_RmvInvin
00012E0A 7000                       		moveq	#0,d0
00012E0C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012E10 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012E16 6600                       		bne.s	Obj01_PlayMusic
00012E18 7005                       		moveq	#5,d0		; play SBZ music
00012E1A                            
00012E1A                            Obj01_PlayMusic:
00012E1A 43F9 0001 2DD2             		lea	(MusicList2).l,a1
00012E20 1031 0000                  		move.b	(a1,d0.w),d0
00012E24 4EB9 0000 1396             		jsr	(PlaySound).l	; play normal music
00012E2A                            
00012E2A                            Obj01_RmvInvin:
00012E2A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012E30                            
00012E30                            Obj01_ChkShoes:
00012E30 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012E34 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012E36 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012E3A 6700                       		beq.s	Obj01_ExitChk
00012E3C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012E40 6600                       		bne.s	Obj01_ExitChk
00012E42 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012E48 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012E4E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012E54 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012E5A 303C 00E3                  		move.w	#$E3,d0
00012E5E 4EF9 0000 1396             		jmp	(PlaySound).l	; run music at normal speed
00012E64                            ; ===========================================================================
00012E64                            
00012E64                            Obj01_ExitChk:
00012E64 4E75                       		rts	
00012E66                            
00012E66                            ; ---------------------------------------------------------------------------
00012E66                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012E66                            ; ---------------------------------------------------------------------------
00012E66                            
00012E66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E66                            
00012E66                            
00012E66                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012E66 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012E6A 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012E6E 43F1 0000                  		lea	(a1,d0.w),a1
00012E72 32E8 0008                  		move.w	8(a0),(a1)+
00012E76 32E8 000C                  		move.w	$C(a0),(a1)+
00012E7A 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012E7E 4E75                       		rts	
00012E80                            ; End of function Sonic_RecordPos
00012E80                            
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            ; Subroutine for Sonic when he's underwater
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            
00012E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E80                            
00012E80                            
00012E80                            Sonic_Water:				; XREF: loc_12C7E
00012E80 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012E86 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012E88                            
00012E88                            locret_12D80:
00012E88 4E75                       		rts	
00012E8A                            ; ===========================================================================
00012E8A                            
00012E8A                            Obj01_InWater:
00012E8A 3038 F646                  		move.w	($FFFFF646).w,d0
00012E8E B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012E92 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012E94 08E8 0006 0022             		bset	#6,$22(a0)
00012E9A 66EC                       		bne.s	locret_12D80
00012E9C 6100 0000                  		bsr.w	ResumeMusic
00012EA0 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012EA6 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012EAC 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012EB2 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012EB8 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012EBE E0E8 0010                  		asr	$10(a0)
00012EC2 E0E8 0012                  		asr	$12(a0)
00012EC6 E0E8 0012                  		asr	$12(a0)
00012ECA 67BC                       		beq.s	locret_12D80
00012ECC 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012ED2 303C 00AA                  		move.w	#$AA,d0
00012ED6 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012EDC                            ; ===========================================================================
00012EDC                            
00012EDC                            Obj01_OutWater:
00012EDC 08A8 0006 0022             		bclr	#6,$22(a0)
00012EE2 67A4                       		beq.s	locret_12D80
00012EE4 6100 0000                  		bsr.w	ResumeMusic
00012EE8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012EEE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012EF4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012EFA E1E8 0012                  		asl	$12(a0)
00012EFE 6700 FF88                  		beq.w	locret_12D80
00012F02 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012F08 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012F0E 6E00                       		bgt.s	loc_12E0E
00012F10 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012F16                            
00012F16                            loc_12E0E:
00012F16 303C 00AA                  		move.w	#$AA,d0
00012F1A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012F20                            ; End of function Sonic_Water
00012F20                            
00012F20                            ; ===========================================================================
00012F20                            ; ---------------------------------------------------------------------------
00012F20                            ; Modes	for controlling	Sonic
00012F20                            ; ---------------------------------------------------------------------------
00012F20                            
00012F20                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012F20 6100 0000                  		bsr.w	Sonic_Jump
00012F24 6100 0000                  		bsr.w	Sonic_SlopeResist
00012F28 6100 0000                  		bsr.w	Sonic_Move
00012F2C 6100 0000                  		bsr.w	Sonic_Roll
00012F30 6100 0000                  		bsr.w	Sonic_LevelBound
00012F34 4EBA A7E0                  		jsr	SpeedToPos
00012F38 6100 0000                  		bsr.w	Sonic_AnglePos
00012F3C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012F40 4E75                       		rts	
00012F42                            ; ===========================================================================
00012F42                            
00012F42                            Obj01_MdJump:				; XREF: Obj01_Modes
00012F42 6100 0000                  		bsr.w	Sonic_JumpHeight
00012F46 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012F4A 6100 0000                  		bsr.w	Sonic_LevelBound
00012F4E 4EBA A79A                  		jsr	ObjectFall
00012F52 0828 0006 0022             		btst	#6,$22(a0)
00012F58 6700                       		beq.s	loc_12E5C
00012F5A 0468 0028 0012             		subi.w	#$28,$12(a0)
00012F60                            
00012F60                            loc_12E5C:
00012F60 6100 0000                  		bsr.w	Sonic_JumpAngle
00012F64 6100 0000                  		bsr.w	Sonic_Floor
00012F68 4E75                       		rts	
00012F6A                            ; ===========================================================================
00012F6A                            
00012F6A                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012F6A 6100 0000                  		bsr.w	Sonic_Jump
00012F6E 6100 0000                  		bsr.w	Sonic_RollRepel
00012F72 6100 0000                  		bsr.w	Sonic_RollSpeed
00012F76 6100 0000                  		bsr.w	Sonic_LevelBound
00012F7A 4EBA A79A                  		jsr	SpeedToPos
00012F7E 6100 0000                  		bsr.w	Sonic_AnglePos
00012F82 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012F86 4E75                       		rts	
00012F88                            ; ===========================================================================
00012F88                            
00012F88                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012F88 6100 0000                  		bsr.w	Sonic_JumpHeight
00012F8C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012F90 6100 0000                  		bsr.w	Sonic_LevelBound
00012F94 4EBA A754                  		jsr	ObjectFall
00012F98 0828 0006 0022             		btst	#6,$22(a0)
00012F9E 6700                       		beq.s	loc_12EA6
00012FA0 0468 0028 0012             		subi.w	#$28,$12(a0)
00012FA6                            
00012FA6                            loc_12EA6:
00012FA6 6100 0000                  		bsr.w	Sonic_JumpAngle
00012FAA 6100 0000                  		bsr.w	Sonic_Floor
00012FAE 4E75                       		rts	
00012FB0                            ; ---------------------------------------------------------------------------
00012FB0                            ; Subroutine to	make Sonic walk/run
00012FB0                            ; ---------------------------------------------------------------------------
00012FB0                            
00012FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FB0                            
00012FB0                            
00012FB0                            Sonic_Move:				; XREF: Obj01_MdNormal
00012FB0 3C38 F760                  		move.w	($FFFFF760).w,d6
00012FB4 3A38 F762                  		move.w	($FFFFF762).w,d5
00012FB8 3838 F764                  		move.w	($FFFFF764).w,d4
00012FBC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00012FC0 6600 0000                  		bne.w	loc_12FEE
00012FC4 4A68 003E                  		tst.w	$3E(a0)
00012FC8 6600 0000                  		bne.w	Obj01_ResetScr
00012FCC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00012FD2 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00012FD4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00012FDA 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00012FDC 6100 0000                  		bsr.w	Sonic_MoveLeft
00012FE0                            
00012FE0                            Obj01_NotLeft:
00012FE0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00012FE6 6700                       		beq.s	Obj01_NotRight	; if not, branch
00012FE8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00012FEE 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00012FF0 6100 0000                  		bsr.w	Sonic_MoveLeft
00012FF4 6000                       		bra.s	Obj01_NotRight
00012FF6                            
00012FF6                            Obj01_MoveRight:
00012FF6 6100 0000                  		bsr.w	Sonic_MoveRight
00012FFA                            
00012FFA                            Obj01_NotRight:
00012FFA 1028 0026                  		move.b	$26(a0),d0
00012FFE 0600 0020                  		addi.b	#$20,d0
00013002 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013006 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001300A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001300E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013012 08A8 0005 0022             		bclr	#5,$22(a0)
00013018 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001301E 0828 0003 0022             		btst	#3,$22(a0)
00013024 6700                       		beq.s	Sonic_Balance
00013026 7000                       		moveq	#0,d0
00013028 1028 003D                  		move.b	$3D(a0),d0
0001302C ED48                       		lsl.w	#6,d0
0001302E 43F8 D000                  		lea	($FFFFD000).w,a1
00013032 43F1 0000                  		lea	(a1,d0.w),a1
00013036 4A29 0022                  		tst.b	$22(a1)
0001303A 6B00                       		bmi.s	Sonic_LookUp
0001303C 7200                       		moveq	#0,d1
0001303E 1229 0019                  		move.b	$19(a1),d1
00013042 3401                       		move.w	d1,d2
00013044 D442                       		add.w	d2,d2
00013046 5942                       		subq.w	#4,d2
00013048 D268 0008                  		add.w	8(a0),d1
0001304C 9269 0008                  		sub.w	8(a1),d1
00013050 0C41 0004                  		cmpi.w	#4,d1
00013054 6D00                       		blt.s	loc_12F6A
00013056 B242                       		cmp.w	d2,d1
00013058 6C00                       		bge.s	loc_12F5A
0001305A 6000                       		bra.s	Sonic_LookUp
0001305C                            ; ===========================================================================
0001305C                            
0001305C                            Sonic_Balance:
0001305C 4EB9 0000 0000             		jsr	ObjHitFloor
00013062 0C41 000C                  		cmpi.w	#$C,d1
00013066 6D00                       		blt.s	Sonic_LookUp
00013068 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001306E 6600                       		bne.s	loc_12F62
00013070                            
00013070                            loc_12F5A:
00013070 08A8 0000 0022             		bclr	#0,$22(a0)
00013076 6000                       		bra.s	loc_12F70
00013078                            ; ===========================================================================
00013078                            
00013078                            loc_12F62:
00013078 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001307E 6600                       		bne.s	Sonic_LookUp
00013080                            
00013080                            loc_12F6A:
00013080 08E8 0000 0022             		bset	#0,$22(a0)
00013086                            
00013086                            loc_12F70:
00013086 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001308C 6000                       		bra.s	Obj01_ResetScr
0001308E                            ; ===========================================================================
0001308E                            
0001308E                            Sonic_LookUp:
0001308E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013094 6700                       		beq.s	Sonic_Duck	; if not, branch
00013096 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001309C 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000130A2 6700                       		beq.s	loc_12FC2
000130A4 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000130A8 6000                       		bra.s	loc_12FC2
000130AA                            ; ===========================================================================
000130AA                            
000130AA                            Sonic_Duck:
000130AA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000130B0 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000130B2 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000130B8 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000130BE 6700                       		beq.s	loc_12FC2
000130C0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000130C4 6000                       		bra.s	loc_12FC2
000130C6                            ; ===========================================================================
000130C6                            
000130C6                            Obj01_ResetScr:
000130C6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000130CC 6700                       		beq.s	loc_12FC2	; if yes, branch
000130CE 6400                       		bcc.s	loc_12FBE
000130D0 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000130D4                            
000130D4                            loc_12FBE:
000130D4 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000130D8                            
000130D8                            loc_12FC2:
000130D8 1038 F602                  		move.b	($FFFFF602).w,d0
000130DC 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000130E0 6600                       		bne.s	loc_12FEE	; if yes, branch
000130E2 3028 0014                  		move.w	$14(a0),d0
000130E6 6700                       		beq.s	loc_12FEE
000130E8 6B00                       		bmi.s	loc_12FE2
000130EA 9045                       		sub.w	d5,d0
000130EC 6400                       		bcc.s	loc_12FDC
000130EE 303C 0000                  		move.w	#0,d0
000130F2                            
000130F2                            loc_12FDC:
000130F2 3140 0014                  		move.w	d0,$14(a0)
000130F6 6000                       		bra.s	loc_12FEE
000130F8                            ; ===========================================================================
000130F8                            
000130F8                            loc_12FE2:
000130F8 D045                       		add.w	d5,d0
000130FA 6400                       		bcc.s	loc_12FEA
000130FC 303C 0000                  		move.w	#0,d0
00013100                            
00013100                            loc_12FEA:
00013100 3140 0014                  		move.w	d0,$14(a0)
00013104                            
00013104                            loc_12FEE:
00013104 1028 0026                  		move.b	$26(a0),d0
00013108 4EB9 0000 29DA             		jsr	(CalcSine).l
0001310E C3E8 0014                  		muls.w	$14(a0),d1
00013112 E081                       		asr.l	#8,d1
00013114 3141 0010                  		move.w	d1,$10(a0)
00013118 C1E8 0014                  		muls.w	$14(a0),d0
0001311C E080                       		asr.l	#8,d0
0001311E 3140 0012                  		move.w	d0,$12(a0)
00013122                            
00013122                            loc_1300C:
00013122 1028 0026                  		move.b	$26(a0),d0
00013126 0600 0040                  		addi.b	#$40,d0
0001312A 6B00                       		bmi.s	locret_1307C
0001312C 123C 0040                  		move.b	#$40,d1
00013130 4A68 0014                  		tst.w	$14(a0)
00013134 6700                       		beq.s	locret_1307C
00013136 6B00                       		bmi.s	loc_13024
00013138 4441                       		neg.w	d1
0001313A                            
0001313A                            loc_13024:
0001313A 1028 0026                  		move.b	$26(a0),d0
0001313E D001                       		add.b	d1,d0
00013140 3F00                       		move.w	d0,-(sp)
00013142 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013146 301F                       		move.w	(sp)+,d0
00013148 4A41                       		tst.w	d1
0001314A 6A00                       		bpl.s	locret_1307C
0001314C E141                       		asl.w	#8,d1
0001314E 0600 0020                  		addi.b	#$20,d0
00013152 0200 00C0                  		andi.b	#$C0,d0
00013156 6700                       		beq.s	loc_13078
00013158 0C00 0040                  		cmpi.b	#$40,d0
0001315C 6700                       		beq.s	loc_13066
0001315E 0C00 0080                  		cmpi.b	#$80,d0
00013162 6700                       		beq.s	loc_13060
00013164 D368 0010                  		add.w	d1,$10(a0)
00013168 08E8 0005 0022             		bset	#5,$22(a0)
0001316E 317C 0000 0014             		move.w	#0,$14(a0)
00013174 4E75                       		rts	
00013176                            ; ===========================================================================
00013176                            
00013176                            loc_13060:
00013176 9368 0012                  		sub.w	d1,$12(a0)
0001317A 4E75                       		rts	
0001317C                            ; ===========================================================================
0001317C                            
0001317C                            loc_13066:
0001317C 9368 0010                  		sub.w	d1,$10(a0)
00013180 08E8 0005 0022             		bset	#5,$22(a0)
00013186 317C 0000 0014             		move.w	#0,$14(a0)
0001318C 4E75                       		rts	
0001318E                            ; ===========================================================================
0001318E                            
0001318E                            loc_13078:
0001318E D368 0012                  		add.w	d1,$12(a0)
00013192                            
00013192                            locret_1307C:
00013192 4E75                       		rts	
00013194                            ; End of function Sonic_Move
00013194                            
00013194                            
00013194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013194                            
00013194                            
00013194                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013194 3028 0014                  		move.w	$14(a0),d0
00013198 6700                       		beq.s	loc_13086
0001319A 6A00                       		bpl.s	loc_130B2
0001319C                            
0001319C                            loc_13086:
0001319C 08E8 0000 0022             		bset	#0,$22(a0)
000131A2 6600                       		bne.s	loc_1309A
000131A4 08A8 0005 0022             		bclr	#5,$22(a0)
000131AA 117C 0001 001D             		move.b	#1,$1D(a0)
000131B0                            
000131B0                            loc_1309A:
000131B0 9045                       		sub.w	d5,d0
000131B2 3206                       		move.w	d6,d1
000131B4 4441                       		neg.w	d1
000131B6 B041                       		cmp.w	d1,d0
000131B8 6E00                       		bgt.s	loc_130A6
000131BA 3001                       		move.w	d1,d0
000131BC                            
000131BC                            loc_130A6:
000131BC 3140 0014                  		move.w	d0,$14(a0)
000131C0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000131C6 4E75                       		rts	
000131C8                            ; ===========================================================================
000131C8                            
000131C8                            loc_130B2:				; XREF: Sonic_MoveLeft
000131C8 9044                       		sub.w	d4,d0
000131CA 6400                       		bcc.s	loc_130BA
000131CC 303C FF80                  		move.w	#-$80,d0
000131D0                            
000131D0                            loc_130BA:
000131D0 3140 0014                  		move.w	d0,$14(a0)
000131D4 1028 0026                  		move.b	$26(a0),d0
000131D8 0600 0020                  		addi.b	#$20,d0
000131DC 0200 00C0                  		andi.b	#$C0,d0
000131E0 6600                       		bne.s	locret_130E8
000131E2 0C40 0400                  		cmpi.w	#$400,d0
000131E6 6D00                       		blt.s	locret_130E8
000131E8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000131EE 08A8 0000 0022             		bclr	#0,$22(a0)
000131F4 303C 00A4                  		move.w	#$A4,d0
000131F8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
000131FE                            
000131FE                            locret_130E8:
000131FE 4E75                       		rts	
00013200                            ; End of function Sonic_MoveLeft
00013200                            
00013200                            
00013200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013200                            
00013200                            
00013200                            Sonic_MoveRight:			; XREF: Sonic_Move
00013200 3028 0014                  		move.w	$14(a0),d0
00013204 6B00                       		bmi.s	loc_13118
00013206 08A8 0000 0022             		bclr	#0,$22(a0)
0001320C 6700                       		beq.s	loc_13104
0001320E 08A8 0005 0022             		bclr	#5,$22(a0)
00013214 117C 0001 001D             		move.b	#1,$1D(a0)
0001321A                            
0001321A                            loc_13104:
0001321A D045                       		add.w	d5,d0
0001321C B046                       		cmp.w	d6,d0
0001321E 6D00                       		blt.s	loc_1310C
00013220 3006                       		move.w	d6,d0
00013222                            
00013222                            loc_1310C:
00013222 3140 0014                  		move.w	d0,$14(a0)
00013226 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001322C 4E75                       		rts	
0001322E                            ; ===========================================================================
0001322E                            
0001322E                            loc_13118:				; XREF: Sonic_MoveRight
0001322E D044                       		add.w	d4,d0
00013230 6400                       		bcc.s	loc_13120
00013232 303C 0080                  		move.w	#$80,d0
00013236                            
00013236                            loc_13120:
00013236 3140 0014                  		move.w	d0,$14(a0)
0001323A 1028 0026                  		move.b	$26(a0),d0
0001323E 0600 0020                  		addi.b	#$20,d0
00013242 0200 00C0                  		andi.b	#$C0,d0
00013246 6600                       		bne.s	locret_1314E
00013248 0C40 FC00                  		cmpi.w	#-$400,d0
0001324C 6E00                       		bgt.s	locret_1314E
0001324E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013254 08E8 0000 0022             		bset	#0,$22(a0)
0001325A 303C 00A4                  		move.w	#$A4,d0
0001325E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013264                            
00013264                            locret_1314E:
00013264 4E75                       		rts	
00013266                            ; End of function Sonic_MoveRight
00013266                            
00013266                            ; ---------------------------------------------------------------------------
00013266                            ; Subroutine to	change Sonic's speed as he rolls
00013266                            ; ---------------------------------------------------------------------------
00013266                            
00013266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013266                            
00013266                            
00013266                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013266 3C38 F760                  		move.w	($FFFFF760).w,d6
0001326A E346                       		asl.w	#1,d6
0001326C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013270 E245                       		asr.w	#1,d5
00013272 3838 F764                  		move.w	($FFFFF764).w,d4
00013276 E444                       		asr.w	#2,d4
00013278 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001327C 6600 0000                  		bne.w	loc_131CC
00013280 4A68 003E                  		tst.w	$3E(a0)
00013284 6600                       		bne.s	loc_13188
00013286 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001328C 6700                       		beq.s	loc_1317C	; if not, branch
0001328E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013294 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013296 6100 0000                  		bsr.w	Sonic_RollLeft
0001329A                            
0001329A                            loc_1317C:
0001329A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000132A0 6700                       		beq.s	loc_13188	; if not, branch
000132A2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000132A8 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000132AA 6100 0000                  		bsr.w	Sonic_RollLeft
000132AE 6000                       		bra.s	loc_13188
000132B0                            
000132B0                            SonicRS_RollRight:
000132B0 6100 0000                  		bsr.w	Sonic_RollRight
000132B4                            
000132B4                            loc_13188:
000132B4 3028 0014                  		move.w	$14(a0),d0
000132B8 6700                       		beq.s	loc_131AA
000132BA 6B00                       		bmi.s	loc_1319E
000132BC 9045                       		sub.w	d5,d0
000132BE 6400                       		bcc.s	loc_13198
000132C0 303C 0000                  		move.w	#0,d0
000132C4                            
000132C4                            loc_13198:
000132C4 3140 0014                  		move.w	d0,$14(a0)
000132C8 6000                       		bra.s	loc_131AA
000132CA                            ; ===========================================================================
000132CA                            
000132CA                            loc_1319E:				; XREF: Sonic_RollSpeed
000132CA D045                       		add.w	d5,d0
000132CC 6400                       		bcc.s	loc_131A6
000132CE 303C 0000                  		move.w	#0,d0
000132D2                            
000132D2                            loc_131A6:
000132D2 3140 0014                  		move.w	d0,$14(a0)
000132D6                            
000132D6                            loc_131AA:
000132D6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000132DA 6600                       		bne.s	loc_131CC	; if yes, branch
000132DC 08A8 0002 0022             		bclr	#2,$22(a0)
000132E2 117C 0013 0016             		move.b	#$13,$16(a0)
000132E8 117C 0009 0017             		move.b	#9,$17(a0)
000132EE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000132F4 5B68 000C                  		subq.w	#5,$C(a0)
000132F8                            
000132F8                            loc_131CC:
000132F8 1028 0026                  		move.b	$26(a0),d0
000132FC 4EB9 0000 29DA             		jsr	(CalcSine).l
00013302 C1E8 0014                  		muls.w	$14(a0),d0
00013306 E080                       		asr.l	#8,d0
00013308 3140 0012                  		move.w	d0,$12(a0)
0001330C C3E8 0014                  		muls.w	$14(a0),d1
00013310 E081                       		asr.l	#8,d1
00013312 0C41 1000                  		cmpi.w	#$1000,d1
00013316 6F00                       		ble.s	loc_131F0
00013318 323C 1000                  		move.w	#$1000,d1
0001331C                            
0001331C                            loc_131F0:
0001331C 0C41 F000                  		cmpi.w	#-$1000,d1
00013320 6C00                       		bge.s	loc_131FA
00013322 323C F000                  		move.w	#-$1000,d1
00013326                            
00013326                            loc_131FA:
00013326 3141 0010                  		move.w	d1,$10(a0)
0001332A 6000 FDF6                  		bra.w	loc_1300C
0001332E                            ; End of function Sonic_RollSpeed
0001332E                            
0001332E                            
0001332E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001332E                            
0001332E                            
0001332E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001332E 3028 0014                  		move.w	$14(a0),d0
00013332 6700                       		beq.s	loc_1320A
00013334 6A00                       		bpl.s	loc_13218
00013336                            
00013336                            loc_1320A:
00013336 08E8 0000 0022             		bset	#0,$22(a0)
0001333C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013342 4E75                       		rts	
00013344                            ; ===========================================================================
00013344                            
00013344                            loc_13218:
00013344 9044                       		sub.w	d4,d0
00013346 6400                       		bcc.s	loc_13220
00013348 303C FF80                  		move.w	#-$80,d0
0001334C                            
0001334C                            loc_13220:
0001334C 3140 0014                  		move.w	d0,$14(a0)
00013350 4E75                       		rts	
00013352                            ; End of function Sonic_RollLeft
00013352                            
00013352                            
00013352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013352                            
00013352                            
00013352                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013352 3028 0014                  		move.w	$14(a0),d0
00013356 6B00                       		bmi.s	loc_1323A
00013358 08A8 0000 0022             		bclr	#0,$22(a0)
0001335E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013364 4E75                       		rts	
00013366                            ; ===========================================================================
00013366                            
00013366                            loc_1323A:
00013366 D044                       		add.w	d4,d0
00013368 6400                       		bcc.s	loc_13242
0001336A 303C 0080                  		move.w	#$80,d0
0001336E                            
0001336E                            loc_13242:
0001336E 3140 0014                  		move.w	d0,$14(a0)
00013372 4E75                       		rts	
00013374                            ; End of function Sonic_RollRight
00013374                            
00013374                            ; ---------------------------------------------------------------------------
00013374                            ; Subroutine to	change Sonic's direction while jumping
00013374                            ; ---------------------------------------------------------------------------
00013374                            
00013374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013374                            
00013374                            
00013374                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013374 3C38 F760                  		move.w	($FFFFF760).w,d6
00013378 3A38 F762                  		move.w	($FFFFF762).w,d5
0001337C E345                       		asl.w	#1,d5
0001337E 0828 0004 0022             		btst	#4,$22(a0)
00013384 6600                       		bne.s	Obj01_ResetScr2
00013386 3028 0010                  		move.w	$10(a0),d0
0001338A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013390 6700                       		beq.s	loc_13278	; if not, branch
00013392 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013398 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
0001339A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001339E 6E00                       		bgt.s	loc_13278
000133A0 3001                       		move.w	d1,d0
000133A2                            
000133A2                            loc_13278:
000133A2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000133A8 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000133AA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000133B0 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000133B2 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000133B6 6E00                       		bgt.s	Obj01_JumpMove
000133B8 3001                       		move.w	d1,d0
000133BA 6000                       		bra.s	Obj01_JumpMove
000133BC                            
000133BC                            SonicCJD_JumpLeft:
000133BC 08E8 0000 0022             		bset	#0,$22(a0)
000133C2 9045                       		sub.w	d5,d0
000133C4 3206                       		move.w	d6,d1
000133C6 4441                       		neg.w	d1
000133C8 B041                       		cmp.w	d1,d0
000133CA                            		; bgt.s	loc_13278
000133CA                            		; move.w	d1,d0
000133CA 4E75                       		rts
000133CC                            
000133CC                            SonicCJD_JumpRight:
000133CC 08A8 0000 0022             		bclr	#0,$22(a0)
000133D2 D045                       		add.w	d5,d0
000133D4 B046                       		cmp.w	d6,d0
000133D6 6D00                       		blt.s	Obj01_JumpMove
000133D8 3006                       		move.w	d6,d0
000133DA                            
000133DA                            Obj01_JumpMove:
000133DA 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000133DE                            
000133DE                            Obj01_ResetScr2:
000133DE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000133E4 6700                       		beq.s	loc_132A4	; if yes, branch
000133E6 6400                       		bcc.s	loc_132A0
000133E8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000133EC                            
000133EC                            loc_132A0:
000133EC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000133F0                            
000133F0                            loc_132A4:
000133F0 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000133F6 6500                       		bcs.s	locret_132D2	; if yes, branch
000133F8 3028 0010                  		move.w	$10(a0),d0
000133FC 3200                       		move.w	d0,d1
000133FE EA41                       		asr.w	#5,d1
00013400 6700                       		beq.s	locret_132D2
00013402 6B00                       		bmi.s	loc_132C6
00013404 9041                       		sub.w	d1,d0
00013406 6400                       		bcc.s	loc_132C0
00013408 303C 0000                  		move.w	#0,d0
0001340C                            
0001340C                            loc_132C0:
0001340C 3140 0010                  		move.w	d0,$10(a0)
00013410 4E75                       		rts	
00013412                            ; ===========================================================================
00013412                            
00013412                            loc_132C6:
00013412 9041                       		sub.w	d1,d0
00013414 6500                       		bcs.s	loc_132CE
00013416 303C 0000                  		move.w	#0,d0
0001341A                            
0001341A                            loc_132CE:
0001341A 3140 0010                  		move.w	d0,$10(a0)
0001341E                            
0001341E                            locret_132D2:
0001341E 4E75                       		rts	
00013420                            ; End of function Sonic_ChgJumpDir
00013420                            
00013420                            ; ===========================================================================
00013420                            ; ---------------------------------------------------------------------------
00013420                            ; Unused subroutine to squash Sonic
00013420                            ; ---------------------------------------------------------------------------
00013420 1028 0026                  		move.b	$26(a0),d0
00013424 0600 0020                  		addi.b	#$20,d0
00013428 0200 00C0                  		andi.b	#$C0,d0
0001342C 6600                       		bne.s	locret_13302
0001342E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013432 4A41                       		tst.w	d1
00013434 6A00                       		bpl.s	locret_13302
00013436 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
0001343C 317C 0000 0010             		move.w	#0,$10(a0)
00013442 317C 0000 0012             		move.w	#0,$12(a0)
00013448 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
0001344E                            
0001344E                            locret_13302:
0001344E 4E75                       		rts	
00013450                            ; ---------------------------------------------------------------------------
00013450                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013450                            ; ---------------------------------------------------------------------------
00013450                            
00013450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013450                            
00013450                            
00013450                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013450 2228 0008                  		move.l	8(a0),d1
00013454 3028 0010                  		move.w	$10(a0),d0
00013458 48C0                       		ext.l	d0
0001345A E180                       		asl.l	#8,d0
0001345C D280                       		add.l	d0,d1
0001345E 4841                       		swap	d1
00013460 3038 F728                  		move.w	($FFFFF728).w,d0
00013464 0640 0010                  		addi.w	#$10,d0
00013468 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001346A 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001346C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013470 0640 0128                  		addi.w	#$128,d0
00013474 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013478 6600                       		bne.s	loc_13332
0001347A 0640 0040                  		addi.w	#$40,d0
0001347E                            
0001347E                            loc_13332:
0001347E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013480 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013482                            
00013482                            loc_13336:
00013482 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013486 0640 00E0                  		addi.w	#$E0,d0
0001348A B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001348E 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013490 4E75                       		rts	
00013492                            ; ===========================================================================
00013492                            
00013492                            Boundary_Bottom:
00013492 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013498 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001349C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000134A2 6500 0000                  		bcs.w	KillSonic
000134A6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000134AA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000134B0 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000134B6 4E75                       		rts	
000134B8                            ; ===========================================================================
000134B8                            
000134B8                            Boundary_Sides:
000134B8 3140 0008                  		move.w	d0,8(a0)
000134BC 317C 0000 000A             		move.w	#0,$A(a0)
000134C2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
000134C8 317C 0000 0014             		move.w	#0,$14(a0)
000134CE 60B2                       		bra.s	loc_13336
000134D0                            ; End of function Sonic_LevelBound
000134D0                            
000134D0                            ; ---------------------------------------------------------------------------
000134D0                            ; Subroutine allowing Sonic to roll when he's moving
000134D0                            ; ---------------------------------------------------------------------------
000134D0                            
000134D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134D0                            
000134D0                            
000134D0                            Sonic_Roll:				; XREF: Obj01_MdNormal
000134D0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000134D4 6600                       		bne.s	Obj01_NoRoll
000134D6 3028 0014                  		move.w	$14(a0),d0
000134DA 6A00                       		bpl.s	loc_13392
000134DC 4440                       		neg.w	d0
000134DE                            
000134DE                            loc_13392:
000134DE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000134E2 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
000134E4 1038 F602                  		move.b	($FFFFF602).w,d0
000134E8 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000134EC 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000134EE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000134F4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000134F6                            
000134F6                            Obj01_NoRoll:
000134F6 4E75                       		rts	
000134F8                            ; ===========================================================================
000134F8                            
000134F8                            Obj01_ChkRoll:
000134F8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000134FE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013500 4E75                       		rts	
00013502                            ; ===========================================================================
00013502                            
00013502                            Obj01_DoRoll:
00013502 08E8 0002 0022             		bset	#2,$22(a0)
00013508 117C 000E 0016             		move.b	#$E,$16(a0)
0001350E 117C 0007 0017             		move.b	#7,$17(a0)
00013514 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001351A 5A68 000C                  		addq.w	#5,$C(a0)
0001351E 303C 00BE                  		move.w	#$BE,d0
00013522 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rolling sound
00013528 4A68 0014                  		tst.w	$14(a0)
0001352C 6600                       		bne.s	locret_133E8
0001352E 317C 0200 0014             		move.w	#$200,$14(a0)
00013534                            
00013534                            locret_133E8:
00013534 4E75                       		rts	
00013536                            ; End of function Sonic_Roll
00013536                            
00013536                            ; ---------------------------------------------------------------------------
00013536                            ; Subroutine allowing Sonic to jump
00013536                            ; ---------------------------------------------------------------------------
00013536                            
00013536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013536                            
00013536                            
00013536                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013536 1038 F603                  		move.b	($FFFFF603).w,d0
0001353A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001353E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013542 7000                       		moveq	#0,d0
00013544 1028 0026                  		move.b	$26(a0),d0
00013548 0600 0080                  		addi.b	#$80,d0
0001354C 6100 0000                  		bsr.w	sub_14D48
00013550 0C41 0006                  		cmpi.w	#6,d1
00013554 6D00 0000                  		blt.w	locret_1348E
00013558 343C 0680                  		move.w	#$680,d2
0001355C 0828 0006 0022             		btst	#6,$22(a0)
00013562 6700                       		beq.s	loc_1341C
00013564 343C 0380                  		move.w	#$380,d2
00013568                            
00013568                            loc_1341C:
00013568 7000                       		moveq	#0,d0
0001356A 1028 0026                  		move.b	$26(a0),d0
0001356E 0400 0040                  		subi.b	#$40,d0
00013572 4EB9 0000 29DA             		jsr	(CalcSine).l
00013578 C3C2                       		muls.w	d2,d1
0001357A E081                       		asr.l	#8,d1
0001357C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013580 C1C2                       		muls.w	d2,d0
00013582 E080                       		asr.l	#8,d0
00013584 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013588 08E8 0001 0022             		bset	#1,$22(a0)
0001358E 08A8 0005 0022             		bclr	#5,$22(a0)
00013594 588F                       		addq.l	#4,sp
00013596 117C 0001 003C             		move.b	#1,$3C(a0)
0001359C 4228 0038                  		clr.b	$38(a0)
000135A0 303C 00A0                  		move.w	#$A0,d0
000135A4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
000135AA 117C 0013 0016             		move.b	#$13,$16(a0)
000135B0 117C 0009 0017             		move.b	#9,$17(a0)
000135B6 0828 0002 0022             		btst	#2,$22(a0)
000135BC 6600                       		bne.s	loc_13490
000135BE 117C 000E 0016             		move.b	#$E,$16(a0)
000135C4 117C 0007 0017             		move.b	#7,$17(a0)
000135CA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000135D0 08E8 0002 0022             		bset	#2,$22(a0)
000135D6 5A68 000C                  		addq.w	#5,$C(a0)
000135DA                            
000135DA                            locret_1348E:
000135DA 4E75                       		rts	
000135DC                            ; ===========================================================================
000135DC                            
000135DC                            loc_13490:
000135DC 08E8 0004 0022             		bset	#4,$22(a0)
000135E2 4E75                       		rts	
000135E4                            ; End of function Sonic_Jump
000135E4                            
000135E4                            
000135E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135E4                            
000135E4                            
000135E4                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000135E4 4A28 003C                  		tst.b	$3C(a0)
000135E8 6700                       		beq.s	loc_134C4
000135EA 323C FC00                  		move.w	#-$400,d1
000135EE 0828 0006 0022             		btst	#6,$22(a0)
000135F4 6700                       		beq.s	loc_134AE
000135F6 323C FE00                  		move.w	#-$200,d1
000135FA                            
000135FA                            loc_134AE:
000135FA B268 0012                  		cmp.w	$12(a0),d1
000135FE 6F00                       		ble.s	locret_134C2
00013600 1038 F602                  		move.b	($FFFFF602).w,d0
00013604 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013608 6600                       		bne.s	locret_134C2	; if yes, branch
0001360A 3141 0012                  		move.w	d1,$12(a0)
0001360E                            
0001360E                            locret_134C2:
0001360E 4E75                       		rts	
00013610                            ; ===========================================================================
00013610                            
00013610                            loc_134C4:
00013610 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013616 6C00                       		bge.s	locret_134D2
00013618 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001361E                            
0001361E                            locret_134D2:
0001361E 4E75                       		rts	
00013620                            ; End of function Sonic_JumpHeight
00013620                            
00013620                            ; ---------------------------------------------------------------------------
00013620                            ; Subroutine to	slow Sonic walking up a	slope
00013620                            ; ---------------------------------------------------------------------------
00013620                            
00013620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013620                            
00013620                            
00013620                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013620 1028 0026                  		move.b	$26(a0),d0
00013624 0600 0060                  		addi.b	#$60,d0
00013628 0C00 00C0                  		cmpi.b	#$C0,d0
0001362C 6400                       		bcc.s	locret_13508
0001362E 1028 0026                  		move.b	$26(a0),d0
00013632 4EB9 0000 29DA             		jsr	(CalcSine).l
00013638 C1FC 0020                  		muls.w	#$20,d0
0001363C E080                       		asr.l	#8,d0
0001363E 4A68 0014                  		tst.w	$14(a0)
00013642 6700                       		beq.s	locret_13508
00013644 6B00                       		bmi.s	loc_13504
00013646 4A40                       		tst.w	d0
00013648 6700                       		beq.s	locret_13502
0001364A D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001364E                            
0001364E                            locret_13502:
0001364E 4E75                       		rts	
00013650                            ; ===========================================================================
00013650                            
00013650                            loc_13504:
00013650 D168 0014                  		add.w	d0,$14(a0)
00013654                            
00013654                            locret_13508:
00013654 4E75                       		rts	
00013656                            ; End of function Sonic_SlopeResist
00013656                            
00013656                            ; ---------------------------------------------------------------------------
00013656                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013656                            ; ---------------------------------------------------------------------------
00013656                            
00013656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013656                            
00013656                            
00013656                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013656 1028 0026                  		move.b	$26(a0),d0
0001365A 0600 0060                  		addi.b	#$60,d0
0001365E 0C00 00C0                  		cmpi.b	#-$40,d0
00013662 6400                       		bcc.s	locret_13544
00013664 1028 0026                  		move.b	$26(a0),d0
00013668 4EB9 0000 29DA             		jsr	(CalcSine).l
0001366E C1FC 0050                  		muls.w	#$50,d0
00013672 E080                       		asr.l	#8,d0
00013674 4A68 0014                  		tst.w	$14(a0)
00013678 6B00                       		bmi.s	loc_1353A
0001367A 4A40                       		tst.w	d0
0001367C 6A00                       		bpl.s	loc_13534
0001367E E480                       		asr.l	#2,d0
00013680                            
00013680                            loc_13534:
00013680 D168 0014                  		add.w	d0,$14(a0)
00013684 4E75                       		rts	
00013686                            ; ===========================================================================
00013686                            
00013686                            loc_1353A:
00013686 4A40                       		tst.w	d0
00013688 6B00                       		bmi.s	loc_13540
0001368A E480                       		asr.l	#2,d0
0001368C                            
0001368C                            loc_13540:
0001368C D168 0014                  		add.w	d0,$14(a0)
00013690                            
00013690                            locret_13544:
00013690 4E75                       		rts	
00013692                            ; End of function Sonic_RollRepel
00013692                            
00013692                            ; ---------------------------------------------------------------------------
00013692                            ; Subroutine to	push Sonic down	a slope
00013692                            ; ---------------------------------------------------------------------------
00013692                            
00013692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013692                            
00013692                            
00013692                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013692 4E71                       		nop	
00013694 4A28 0038                  		tst.b	$38(a0)
00013698 6600                       		bne.s	locret_13580
0001369A 4A68 003E                  		tst.w	$3E(a0)
0001369E 6600                       		bne.s	loc_13582
000136A0 1028 0026                  		move.b	$26(a0),d0
000136A4 0600 0020                  		addi.b	#$20,d0
000136A8 0200 00C0                  		andi.b	#$C0,d0
000136AC 6700                       		beq.s	locret_13580
000136AE 3028 0014                  		move.w	$14(a0),d0
000136B2 6A00                       		bpl.s	loc_1356A
000136B4 4440                       		neg.w	d0
000136B6                            
000136B6                            loc_1356A:
000136B6 0C40 0280                  		cmpi.w	#$280,d0
000136BA 6400                       		bcc.s	locret_13580
000136BC 4268 0014                  		clr.w	$14(a0)
000136C0 08E8 0001 0022             		bset	#1,$22(a0)
000136C6 317C 001E 003E             		move.w	#$1E,$3E(a0)
000136CC                            
000136CC                            locret_13580:
000136CC 4E75                       		rts	
000136CE                            ; ===========================================================================
000136CE                            
000136CE                            loc_13582:
000136CE 5368 003E                  		subq.w	#1,$3E(a0)
000136D2 4E75                       		rts	
000136D4                            ; End of function Sonic_SlopeRepel
000136D4                            
000136D4                            ; ---------------------------------------------------------------------------
000136D4                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000136D4                            ; ---------------------------------------------------------------------------
000136D4                            
000136D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136D4                            
000136D4                            
000136D4                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000136D4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000136D8 6700                       		beq.s	locret_135A2	; if already 0,	branch
000136DA 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000136DC                            
000136DC 5400                       		addq.b	#2,d0		; increase angle
000136DE 6400                       		bcc.s	loc_13596
000136E0 7000                       		moveq	#0,d0
000136E2                            
000136E2                            loc_13596:
000136E2 6000                       		bra.s	loc_1359E
000136E4                            ; ===========================================================================
000136E4                            
000136E4                            loc_13598:
000136E4 5500                       		subq.b	#2,d0		; decrease angle
000136E6 6400                       		bcc.s	loc_1359E
000136E8 7000                       		moveq	#0,d0
000136EA                            
000136EA                            loc_1359E:
000136EA 1140 0026                  		move.b	d0,$26(a0)
000136EE                            
000136EE                            locret_135A2:
000136EE 4E75                       		rts	
000136F0                            ; End of function Sonic_JumpAngle
000136F0                            
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            
000136F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136F0                            
000136F0                            
000136F0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000136F0 3228 0010                  		move.w	$10(a0),d1
000136F4 3428 0012                  		move.w	$12(a0),d2
000136F8 4EB9 0000 2CA8             		jsr	(CalcAngle).l
000136FE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013702 0400 0020                  		subi.b	#$20,d0
00013706 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001370A 0200 00C0                  		andi.b	#$C0,d0
0001370E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013712 0C00 0040                  		cmpi.b	#$40,d0
00013716 6700 0000                  		beq.w	loc_13680
0001371A 0C00 0080                  		cmpi.b	#$80,d0
0001371E 6700 0000                  		beq.w	loc_136E2
00013722 0C00 00C0                  		cmpi.b	#-$40,d0
00013726 6700 0000                  		beq.w	loc_1373E
0001372A 6100 0000                  		bsr.w	Sonic_HitWall
0001372E 4A41                       		tst.w	d1
00013730 6A00                       		bpl.s	loc_135F0
00013732 9368 0008                  		sub.w	d1,8(a0)
00013736 317C 0000 0010             		move.w	#0,$10(a0)
0001373C                            
0001373C                            loc_135F0:
0001373C 6100 0000                  		bsr.w	sub_14EB4
00013740 4A41                       		tst.w	d1
00013742 6A00                       		bpl.s	loc_13602
00013744 D368 0008                  		add.w	d1,8(a0)
00013748 317C 0000 0010             		move.w	#0,$10(a0)
0001374E                            
0001374E                            loc_13602:
0001374E 6100 0000                  		bsr.w	Sonic_HitFloor
00013752 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013756 4A41                       		tst.w	d1
00013758 6A00                       		bpl.s	locret_1367E
0001375A 1428 0012                  		move.b	$12(a0),d2
0001375E 5002                       		addq.b	#8,d2
00013760 4402                       		neg.b	d2
00013762 B202                       		cmp.b	d2,d1
00013764 6C00                       		bge.s	loc_1361E
00013766 B002                       		cmp.b	d2,d0
00013768 6D00                       		blt.s	locret_1367E
0001376A                            
0001376A                            loc_1361E:
0001376A D368 000C                  		add.w	d1,$C(a0)
0001376E 1143 0026                  		move.b	d3,$26(a0)
00013772 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013776 117C 0000 001C             		move.b	#0,$1C(a0)
0001377C 1003                       		move.b	d3,d0
0001377E 0600 0020                  		addi.b	#$20,d0
00013782 0200 0040                  		andi.b	#$40,d0
00013786 6600                       		bne.s	loc_1365C
00013788 1003                       		move.b	d3,d0
0001378A 0600 0010                  		addi.b	#$10,d0
0001378E 0200 0020                  		andi.b	#$20,d0
00013792 6700                       		beq.s	loc_1364E
00013794 E0E8 0012                  		asr	$12(a0)
00013798 6000                       		bra.s	loc_13670
0001379A                            ; ===========================================================================
0001379A                            
0001379A                            loc_1364E:
0001379A 317C 0000 0012             		move.w	#0,$12(a0)
000137A0 3168 0010 0014             		move.w	$10(a0),$14(a0)
000137A6 4E75                       		rts	
000137A8                            ; ===========================================================================
000137A8                            
000137A8                            loc_1365C:
000137A8 317C 0000 0010             		move.w	#0,$10(a0)
000137AE 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000137B4 6F00                       		ble.s	loc_13670
000137B6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000137BC                            
000137BC                            loc_13670:
000137BC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000137C2 4A03                       		tst.b	d3
000137C4 6A00                       		bpl.s	locret_1367E
000137C6 4468 0014                  		neg.w	$14(a0)
000137CA                            
000137CA                            locret_1367E:
000137CA 4E75                       		rts	
000137CC                            ; ===========================================================================
000137CC                            
000137CC                            loc_13680:
000137CC 6100 0000                  		bsr.w	Sonic_HitWall
000137D0 4A41                       		tst.w	d1
000137D2 6A00                       		bpl.s	loc_1369A
000137D4 9368 0008                  		sub.w	d1,8(a0)
000137D8 317C 0000 0010             		move.w	#0,$10(a0)
000137DE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000137E4 4E75                       		rts	
000137E6                            ; ===========================================================================
000137E6                            
000137E6                            loc_1369A:
000137E6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000137EA 4A41                       		tst.w	d1
000137EC 6A00                       		bpl.s	loc_136B4
000137EE 9368 000C                  		sub.w	d1,$C(a0)
000137F2 4A68 0012                  		tst.w	$12(a0)
000137F6 6A00                       		bpl.s	locret_136B2
000137F8 317C 0000 0012             		move.w	#0,$12(a0)
000137FE                            
000137FE                            locret_136B2:
000137FE 4E75                       		rts	
00013800                            ; ===========================================================================
00013800                            
00013800                            loc_136B4:
00013800 4A68 0012                  		tst.w	$12(a0)
00013804 6B00                       		bmi.s	locret_136E0
00013806 6100 0000                  		bsr.w	Sonic_HitFloor
0001380A 4A41                       		tst.w	d1
0001380C 6A00                       		bpl.s	locret_136E0
0001380E D368 000C                  		add.w	d1,$C(a0)
00013812 1143 0026                  		move.b	d3,$26(a0)
00013816 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001381A 117C 0000 001C             		move.b	#0,$1C(a0)
00013820 317C 0000 0012             		move.w	#0,$12(a0)
00013826 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001382C                            
0001382C                            locret_136E0:
0001382C 4E75                       		rts	
0001382E                            ; ===========================================================================
0001382E                            
0001382E                            loc_136E2:
0001382E 6100 0000                  		bsr.w	Sonic_HitWall
00013832 4A41                       		tst.w	d1
00013834 6A00                       		bpl.s	loc_136F4
00013836 9368 0008                  		sub.w	d1,8(a0)
0001383A 317C 0000 0010             		move.w	#0,$10(a0)
00013840                            
00013840                            loc_136F4:
00013840 6100 0000                  		bsr.w	sub_14EB4
00013844 4A41                       		tst.w	d1
00013846 6A00                       		bpl.s	loc_13706
00013848 D368 0008                  		add.w	d1,8(a0)
0001384C 317C 0000 0010             		move.w	#0,$10(a0)
00013852                            
00013852                            loc_13706:
00013852 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013856 4A41                       		tst.w	d1
00013858 6A00                       		bpl.s	locret_1373C
0001385A 9368 000C                  		sub.w	d1,$C(a0)
0001385E 1003                       		move.b	d3,d0
00013860 0600 0020                  		addi.b	#$20,d0
00013864 0200 0040                  		andi.b	#$40,d0
00013868 6600                       		bne.s	loc_13726
0001386A 317C 0000 0012             		move.w	#0,$12(a0)
00013870 4E75                       		rts	
00013872                            ; ===========================================================================
00013872                            
00013872                            loc_13726:
00013872 1143 0026                  		move.b	d3,$26(a0)
00013876 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001387A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013880 4A03                       		tst.b	d3
00013882 6A00                       		bpl.s	locret_1373C
00013884 4468 0014                  		neg.w	$14(a0)
00013888                            
00013888                            locret_1373C:
00013888 4E75                       		rts	
0001388A                            ; ===========================================================================
0001388A                            
0001388A                            loc_1373E:
0001388A 6100 0000                  		bsr.w	sub_14EB4
0001388E 4A41                       		tst.w	d1
00013890 6A00                       		bpl.s	loc_13758
00013892 D368 0008                  		add.w	d1,8(a0)
00013896 317C 0000 0010             		move.w	#0,$10(a0)
0001389C 3168 0012 0014             		move.w	$12(a0),$14(a0)
000138A2 4E75                       		rts	
000138A4                            ; ===========================================================================
000138A4                            
000138A4                            loc_13758:
000138A4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138A8 4A41                       		tst.w	d1
000138AA 6A00                       		bpl.s	loc_13772
000138AC 9368 000C                  		sub.w	d1,$C(a0)
000138B0 4A68 0012                  		tst.w	$12(a0)
000138B4 6A00                       		bpl.s	locret_13770
000138B6 317C 0000 0012             		move.w	#0,$12(a0)
000138BC                            
000138BC                            locret_13770:
000138BC 4E75                       		rts	
000138BE                            ; ===========================================================================
000138BE                            
000138BE                            loc_13772:
000138BE 4A68 0012                  		tst.w	$12(a0)
000138C2 6B00                       		bmi.s	locret_1379E
000138C4 6100 0000                  		bsr.w	Sonic_HitFloor
000138C8 4A41                       		tst.w	d1
000138CA 6A00                       		bpl.s	locret_1379E
000138CC D368 000C                  		add.w	d1,$C(a0)
000138D0 1143 0026                  		move.b	d3,$26(a0)
000138D4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000138D8 117C 0000 001C             		move.b	#0,$1C(a0)
000138DE 317C 0000 0012             		move.w	#0,$12(a0)
000138E4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000138EA                            
000138EA                            locret_1379E:
000138EA 4E75                       		rts	
000138EC                            ; End of function Sonic_Floor
000138EC                            
000138EC                            ; ---------------------------------------------------------------------------
000138EC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000138EC                            ; ---------------------------------------------------------------------------
000138EC                            
000138EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138EC                            
000138EC                            
000138EC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000138EC 0828 0004 0022             		btst	#4,$22(a0)
000138F2 6700                       		beq.s	loc_137AE
000138F4 4E71                       		nop	
000138F6 4E71                       		nop	
000138F8 4E71                       		nop	
000138FA                            
000138FA                            loc_137AE:
000138FA 08A8 0005 0022             		bclr	#5,$22(a0)
00013900 08A8 0001 0022             		bclr	#1,$22(a0)
00013906 08A8 0004 0022             		bclr	#4,$22(a0)
0001390C 0828 0002 0022             		btst	#2,$22(a0)
00013912 6700                       		beq.s	loc_137E4
00013914 08A8 0002 0022             		bclr	#2,$22(a0)
0001391A 117C 0013 0016             		move.b	#$13,$16(a0)
00013920 117C 0009 0017             		move.b	#9,$17(a0)
00013926 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001392C 5B68 000C                  		subq.w	#5,$C(a0)
00013930                            
00013930                            loc_137E4:
00013930 117C 0000 003C             		move.b	#0,$3C(a0)
00013936 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001393C 4E75                       		rts	
0001393E                            ; End of function Sonic_ResetOnFloor
0001393E                            
0001393E                            ; ===========================================================================
0001393E                            ; ---------------------------------------------------------------------------
0001393E                            ; Sonic	when he	gets hurt
0001393E                            ; ---------------------------------------------------------------------------
0001393E                            
0001393E                            Obj01_Hurt:				; XREF: Obj01_Index
0001393E 4EBA 9DD6                  		jsr	SpeedToPos
00013942 0668 0030 0012             		addi.w	#$30,$12(a0)
00013948 0828 0006 0022             		btst	#6,$22(a0)
0001394E 6700                       		beq.s	loc_1380C
00013950 0468 0020 0012             		subi.w	#$20,$12(a0)
00013956                            
00013956                            loc_1380C:
00013956 6100 0000                  		bsr.w	Sonic_HurtStop
0001395A 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001395E 6100 F506                  		bsr.w	Sonic_RecordPos
00013962 6100 0000                  		bsr.w	Sonic_Animate
00013966 6100 0000                  		bsr.w	LoadSonicDynPLC
0001396A 4EFA 9DD0                  		jmp	DisplaySprite
0001396E                            
0001396E                            ; ---------------------------------------------------------------------------
0001396E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001396E                            ; ---------------------------------------------------------------------------
0001396E                            
0001396E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001396E                            
0001396E                            
0001396E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001396E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013972 0640 00E0                  		addi.w	#$E0,d0
00013976 B068 000C                  		cmp.w	$C(a0),d0
0001397A 6500 0000                  		bcs.w	KillSonic
0001397E 6100 FD70                  		bsr.w	Sonic_Floor
00013982 0828 0001 0022             		btst	#1,$22(a0)
00013988 6600                       		bne.s	locret_13860
0001398A 7000                       		moveq	#0,d0
0001398C 3140 0012                  		move.w	d0,$12(a0)
00013990 3140 0010                  		move.w	d0,$10(a0)
00013994 3140 0014                  		move.w	d0,$14(a0)
00013998 117C 0000 001C             		move.b	#0,$1C(a0)
0001399E 5528 0024                  		subq.b	#2,$24(a0)
000139A2 317C 0078 0030             		move.w	#$78,$30(a0)
000139A8                            
000139A8                            locret_13860:
000139A8 4E75                       		rts	
000139AA                            ; End of function Sonic_HurtStop
000139AA                            
000139AA                            ; ===========================================================================
000139AA                            ; ---------------------------------------------------------------------------
000139AA                            ; Sonic	when he	dies
000139AA                            ; ---------------------------------------------------------------------------
000139AA                            
000139AA                            Obj01_Death:				; XREF: Obj01_Index
000139AA 6100 0000                  		bsr.w	GameOver
000139AE 4EBA 9D3A                  		jsr	ObjectFall
000139B2 6100 F4B2                  		bsr.w	Sonic_RecordPos
000139B6 6100 0000                  		bsr.w	Sonic_Animate
000139BA 6100 0000                  		bsr.w	LoadSonicDynPLC
000139BE 4EFA 9D7C                  		jmp	DisplaySprite
000139C2                            
000139C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139C2                            
000139C2                            
000139C2                            GameOver:				; XREF: Obj01_Death
000139C2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000139C6 0640 0100                  		addi.w	#$100,d0
000139CA B068 000C                  		cmp.w	$C(a0),d0
000139CE 6400 0000                  		bcc.w	locret_13900
000139D2 317C FFC8 0012             		move.w	#-$38,$12(a0)
000139D8 5428 0024                  		addq.b	#2,$24(a0)
000139DC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000139E0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000139E4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000139E8 6600                       		bne.s	loc_138D4
000139EA 317C 0000 003A             		move.w	#0,$3A(a0)
000139F0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000139F6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000139FC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013A02 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013A06                            
00013A06                            loc_138C2:
00013A06 303C 008F                  		move.w	#$8F,d0
00013A0A 4EB9 0000 1396             		jsr	(PlaySound).l	; play game over music
00013A10 7003                       		moveq	#3,d0
00013A12 4EF9 0000 1580             		jmp	(LoadPLC).l	; load game over patterns
00013A18                            ; ===========================================================================
00013A18                            
00013A18                            loc_138D4:
00013A18 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013A1E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013A22 6700                       		beq.s	locret_13900	; if not, branch
00013A24 317C 0000 003A             		move.w	#0,$3A(a0)
00013A2A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013A30 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013A36 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013A3C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013A42 60C2                       		bra.s	loc_138C2
00013A44                            ; ===========================================================================
00013A44                            
00013A44                            locret_13900:
00013A44 4E75                       		rts	
00013A46                            ; End of function GameOver
00013A46                            
00013A46                            ; ===========================================================================
00013A46                            ; ---------------------------------------------------------------------------
00013A46                            ; Sonic	when the level is restarted
00013A46                            ; ---------------------------------------------------------------------------
00013A46                            
00013A46                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013A46 4A68 003A                  		tst.w	$3A(a0)
00013A4A 6700                       		beq.s	locret_13914
00013A4C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013A50 6600                       		bne.s	locret_13914
00013A52 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013A58                            
00013A58                            locret_13914:
00013A58 4E75                       		rts	
00013A5A                            
00013A5A                            ; ---------------------------------------------------------------------------
00013A5A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013A5A                            ; ---------------------------------------------------------------------------
00013A5A                            
00013A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A5A                            
00013A5A                            
00013A5A                            Sonic_Loops:				; XREF: Obj01_Control
00013A5A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013A60 6700                       		beq.s	loc_13926	; if yes, branch
00013A62 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013A66 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013A6A                            
00013A6A                            loc_13926:
00013A6A 3028 000C                  		move.w	$C(a0),d0
00013A6E E248                       		lsr.w	#1,d0
00013A70 0240 0380                  		andi.w	#$380,d0
00013A74 1228 0008                  		move.b	8(a0),d1
00013A78 0241 007F                  		andi.w	#$7F,d1
00013A7C D041                       		add.w	d1,d0
00013A7E 43F8 A400                  		lea	($FFFFA400).w,a1
00013A82 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013A86 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013A8A 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013A8E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013A92 6700 FA64                  		beq.w	Obj01_ChkRoll
00013A96 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013A9A 6700                       		beq.s	loc_13976
00013A9C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013AA0 6700                       		beq.s	loc_13966
00013AA2 08A8 0006 0001             		bclr	#6,1(a0)
00013AA8 4E75                       		rts	
00013AAA                            ; ===========================================================================
00013AAA                            
00013AAA                            loc_13966:
00013AAA 0828 0001 0022             		btst	#1,$22(a0)
00013AB0 6700                       		beq.s	loc_13976
00013AB2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013AB8 4E75                       		rts	
00013ABA                            ; ===========================================================================
00013ABA                            
00013ABA                            loc_13976:
00013ABA 3428 0008                  		move.w	8(a0),d2
00013ABE 0C02 002C                  		cmpi.b	#$2C,d2
00013AC2 6400                       		bcc.s	loc_13988
00013AC4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013ACA 4E75                       		rts	
00013ACC                            ; ===========================================================================
00013ACC                            
00013ACC                            loc_13988:
00013ACC 0C02 00E0                  		cmpi.b	#-$20,d2
00013AD0 6500                       		bcs.s	loc_13996
00013AD2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013AD8 4E75                       		rts	
00013ADA                            ; ===========================================================================
00013ADA                            
00013ADA                            loc_13996:
00013ADA 0828 0006 0001             		btst	#6,1(a0)
00013AE0 6600                       		bne.s	loc_139B2
00013AE2 1228 0026                  		move.b	$26(a0),d1
00013AE6 6700                       		beq.s	locret_139C2
00013AE8 0C01 0080                  		cmpi.b	#-$80,d1
00013AEC 6200                       		bhi.s	locret_139C2
00013AEE 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013AF4 4E75                       		rts	
00013AF6                            ; ===========================================================================
00013AF6                            
00013AF6                            loc_139B2:
00013AF6 1228 0026                  		move.b	$26(a0),d1
00013AFA 0C01 0080                  		cmpi.b	#-$80,d1
00013AFE 6300                       		bls.s	locret_139C2
00013B00 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013B06                            
00013B06                            locret_139C2:
00013B06 4E75                       		rts	
00013B08                            ; End of function Sonic_Loops
00013B08                            
00013B08                            ; ---------------------------------------------------------------------------
00013B08                            ; Subroutine to	animate	Sonic's sprites
00013B08                            ; ---------------------------------------------------------------------------
00013B08                            
00013B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B08                            
00013B08                            
00013B08                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013B08 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013B0E 7000                       		moveq	#0,d0
00013B10 1028 001C                  		move.b	$1C(a0),d0
00013B14 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013B18 6700                       		beq.s	SAnim_Do	; if not, branch
00013B1A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013B1E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013B24 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013B2A                            
00013B2A                            SAnim_Do:
00013B2A D040                       		add.w	d0,d0
00013B2C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013B30 1011                       		move.b	(a1),d0
00013B32 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013B34 1228 0022                  		move.b	$22(a0),d1
00013B38 0201 0001                  		andi.b	#1,d1
00013B3C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013B42 8328 0001                  		or.b	d1,1(a0)
00013B46 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013B4A 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013B4C 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013B50                            
00013B50                            SAnim_Do2:
00013B50 7200                       		moveq	#0,d1
00013B52 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013B56 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013B5A 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013B5C                            
00013B5C                            SAnim_Next:
00013B5C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013B60 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013B64                            
00013B64                            SAnim_Delay:
00013B64 4E75                       		rts	
00013B66                            ; ===========================================================================
00013B66                            
00013B66                            SAnim_End_FF:
00013B66 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013B68 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013B6A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013B70 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013B74 60E6                       		bra.s	SAnim_Next
00013B76                            ; ===========================================================================
00013B76                            
00013B76                            SAnim_End_FE:
00013B76 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013B78 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013B7A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013B7E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013B82 9200                       		sub.b	d0,d1
00013B84 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013B88 60D2                       		bra.s	SAnim_Next
00013B8A                            ; ===========================================================================
00013B8A                            
00013B8A                            SAnim_End_FD:
00013B8A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013B8C 6600                       		bne.s	SAnim_End	; if not, branch
00013B8E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013B94                            
00013B94                            SAnim_End:
00013B94 4E75                       		rts	
00013B96                            ; ===========================================================================
00013B96                            
00013B96                            SAnim_WalkRun:				; XREF: SAnim_Do
00013B96 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013B9A 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013B9C 5200                       		addq.b	#1,d0		; is animation walking/running?
00013B9E 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013BA2 7200                       		moveq	#0,d1
00013BA4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013BA8 1428 0022                  		move.b	$22(a0),d2
00013BAC 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013BB0 6600                       		bne.s	loc_13A70	; if yes, branch
00013BB2 4600                       		not.b	d0		; reverse angle
00013BB4                            
00013BB4                            loc_13A70:
00013BB4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013BB8 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013BBA 7203                       		moveq	#3,d1
00013BBC                            
00013BBC                            loc_13A78:
00013BBC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013BC2 B302                       		eor.b	d1,d2
00013BC4 8528 0001                  		or.b	d2,1(a0)
00013BC8 0828 0005 0022             		btst	#5,$22(a0)
00013BCE 6600 0000                  		bne.w	SAnim_Push
00013BD2 E808                       		lsr.b	#4,d0		; divide angle by $10
00013BD4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013BD8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013BDC 6A00                       		bpl.s	loc_13A9C
00013BDE 4442                       		neg.w	d2
00013BE0                            
00013BE0                            loc_13A9C:
00013BE0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013BE6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013BEA 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013BEC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013BF2 1200                       		move.b	d0,d1
00013BF4 E209                       		lsr.b	#1,d1
00013BF6 D001                       		add.b	d1,d0
00013BF8                            
00013BF8                            loc_13AB4:
00013BF8 D000                       		add.b	d0,d0
00013BFA 1600                       		move.b	d0,d3
00013BFC 4442                       		neg.w	d2
00013BFE 0642 0800                  		addi.w	#$800,d2
00013C02 6A00                       		bpl.s	loc_13AC2
00013C04 7400                       		moveq	#0,d2
00013C06                            
00013C06                            loc_13AC2:
00013C06 E04A                       		lsr.w	#8,d2
00013C08 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C0C 6100 FF42                  		bsr.w	SAnim_Do2
00013C10 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013C14 4E75                       		rts	
00013C16                            ; ===========================================================================
00013C16                            
00013C16                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013C16 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013C18 6600                       		bne.s	SAnim_Push	; if not, branch
00013C1A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C1E 6A00                       		bpl.s	loc_13ADE
00013C20 4442                       		neg.w	d2
00013C22                            
00013C22                            loc_13ADE:
00013C22 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013C28 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013C2C 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013C2E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013C34                            
00013C34                            loc_13AF0:
00013C34 4442                       		neg.w	d2
00013C36 0642 0400                  		addi.w	#$400,d2
00013C3A 6A00                       		bpl.s	loc_13AFA
00013C3C 7400                       		moveq	#0,d2
00013C3E                            
00013C3E                            loc_13AFA:
00013C3E E04A                       		lsr.w	#8,d2
00013C40 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C44 1228 0022                  		move.b	$22(a0),d1
00013C48 0201 0001                  		andi.b	#1,d1
00013C4C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C52 8328 0001                  		or.b	d1,1(a0)
00013C56 6000 FEF8                  		bra.w	SAnim_Do2
00013C5A                            ; ===========================================================================
00013C5A                            
00013C5A                            SAnim_Push:				; XREF: SAnim_RollJump
00013C5A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C5E 6B00                       		bmi.s	loc_13B1E
00013C60 4442                       		neg.w	d2
00013C62                            
00013C62                            loc_13B1E:
00013C62 0642 0800                  		addi.w	#$800,d2
00013C66 6A00                       		bpl.s	loc_13B26
00013C68 7400                       		moveq	#0,d2
00013C6A                            
00013C6A                            loc_13B26:
00013C6A EC4A                       		lsr.w	#6,d2
00013C6C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C70 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013C76 1228 0022                  		move.b	$22(a0),d1
00013C7A 0201 0001                  		andi.b	#1,d1
00013C7E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C84 8328 0001                  		or.b	d1,1(a0)
00013C88 6000 FEC6                  		bra.w	SAnim_Do2
00013C8C                            ; End of function Sonic_Animate
00013C8C                            
00013C8C                            ; ===========================================================================
00013C8C                            SonicAniData:
00013C8C                            	include "_anim\Sonic.asm"
00013C8C                            ; ---------------------------------------------------------------------------
00013C8C                            ; Animation script - Sonic
00013C8C                            ; ---------------------------------------------------------------------------
00013C8C 0000                       		dc.w SonAni_Walk-SonicAniData
00013C8E 0000                       		dc.w SonAni_Run-SonicAniData
00013C90 0000                       		dc.w SonAni_Roll-SonicAniData
00013C92 0000                       		dc.w SonAni_Roll2-SonicAniData
00013C94 0000                       		dc.w SonAni_Push-SonicAniData
00013C96 0000                       		dc.w SonAni_Wait-SonicAniData
00013C98 0000                       		dc.w SonAni_Balance-SonicAniData
00013C9A 0000                       		dc.w SonAni_LookUp-SonicAniData
00013C9C 0000                       		dc.w SonAni_Duck-SonicAniData
00013C9E 0000                       		dc.w SonAni_Warp1-SonicAniData
00013CA0 0000                       		dc.w SonAni_Warp2-SonicAniData
00013CA2 0000                       		dc.w SonAni_Warp3-SonicAniData
00013CA4 0000                       		dc.w SonAni_Warp4-SonicAniData
00013CA6 0000                       		dc.w SonAni_Stop-SonicAniData
00013CA8 0000                       		dc.w SonAni_Float1-SonicAniData
00013CAA 0000                       		dc.w SonAni_Float2-SonicAniData
00013CAC 0000                       		dc.w SonAni_Spring-SonicAniData
00013CAE 0000                       		dc.w SonAni_LZHang-SonicAniData
00013CB0 0000                       		dc.w SonAni_Leap1-SonicAniData
00013CB2 0000                       		dc.w SonAni_Leap2-SonicAniData
00013CB4 0000                       		dc.w SonAni_Surf-SonicAniData
00013CB6 0000                       		dc.w SonAni_Bubble-SonicAniData
00013CB8 0000                       		dc.w SonAni_Death1-SonicAniData
00013CBA 0000                       		dc.w SonAni_Drown-SonicAniData
00013CBC 0000                       		dc.w SonAni_Death2-SonicAniData
00013CBE 0000                       		dc.w SonAni_Shrink-SonicAniData
00013CC0 0000                       		dc.w SonAni_Hurt-SonicAniData
00013CC2 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013CC4 0000                       		dc.w SonAni_Blank-SonicAniData
00013CC6 0000                       		dc.w SonAni_Float3-SonicAniData
00013CC8 0000                       		dc.w SonAni_Float4-SonicAniData
00013CCA FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013CD2 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013CDA FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013CE2 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013CEA FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013CF2 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013D08 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013D0C 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013D10 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013D14 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013D18 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013D1C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013D20 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013D24 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013D28 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013D2C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013D34 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013D38 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013D3C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013D42 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013D48 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013D4C 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013D54 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013D58 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013D5C 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013D60 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013D6A 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013D6E 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013D72 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013D76 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013D7E 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013D82                            		even
00013D82                            		even
00013D82                            
00013D82                            ; ---------------------------------------------------------------------------
00013D82                            ; Sonic	pattern	loading	subroutine
00013D82                            ; ---------------------------------------------------------------------------
00013D82                            
00013D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D82                            
00013D82                            
00013D82                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013D82 7000                       		moveq	#0,d0
00013D84 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013D88 B038 F766                  		cmp.b	($FFFFF766).w,d0
00013D8C 6700                       		beq.s	locret_13C96
00013D8E 11C0 F766                  		move.b	d0,($FFFFF766).w
00013D92 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013D98 D040                       		add.w	d0,d0
00013D9A D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D9E 7200                       		moveq	#0,d1
00013DA0 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013DA2 5301                       		subq.b	#1,d1
00013DA4 6B00                       		bmi.s	locret_13C96
00013DA6 47F8 C800                  		lea	($FFFFC800).w,a3
00013DAA 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013DB0                            
00013DB0                            SPLC_ReadEntry:
00013DB0 7400                       		moveq	#0,d2
00013DB2 141A                       		move.b	(a2)+,d2
00013DB4 3002                       		move.w	d2,d0
00013DB6 E808                       		lsr.b	#4,d0
00013DB8 E14A                       		lsl.w	#8,d2
00013DBA 141A                       		move.b	(a2)+,d2
00013DBC EB4A                       		lsl.w	#5,d2
00013DBE 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013DC4 D3C2                       		adda.l	d2,a1
00013DC6                            
00013DC6                            SPLC_LoadTile:
00013DC6 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013DCA 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013DCE 47EB 0020                  		lea	$20(a3),a3	; next tile
00013DD2 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013DD6                            
00013DD6 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013DDA                            
00013DDA                            locret_13C96:
00013DDA 4E75                       		rts	
00013DDC                            ; End of function LoadSonicDynPLC
00013DDC                            
00013DDC                            ; ===========================================================================
00013DDC                            ; ---------------------------------------------------------------------------
00013DDC                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013DDC                            ; ---------------------------------------------------------------------------
00013DDC                            
00013DDC                            Obj0A:					; XREF: Obj_Index
00013DDC 7000                       		moveq	#0,d0
00013DDE 1028 0024                  		move.b	$24(a0),d0
00013DE2 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013DE6 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013DEA                            ; ===========================================================================
00013DEA 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013DEE 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013DF2 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013DF6 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013DFA 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013DFC                            ; ===========================================================================
00013DFC                            
00013DFC                            Obj0A_Main:				; XREF: Obj0A_Index
00013DFC 5428 0024                  		addq.b	#2,$24(a0)
00013E00 217C 0001 2AD6 0004        		move.l	#Map_obj64,4(a0)
00013E08 317C 8348 0002             		move.w	#$8348,2(a0)
00013E0E 117C 0084 0001             		move.b	#$84,1(a0)
00013E14 117C 0010 0019             		move.b	#$10,$19(a0)
00013E1A 117C 0001 0018             		move.b	#1,$18(a0)
00013E20 1028 0028                  		move.b	$28(a0),d0
00013E24 6A00                       		bpl.s	loc_13D00
00013E26 5028 0024                  		addq.b	#8,$24(a0)
00013E2A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013E32 317C 0440 0002             		move.w	#$440,2(a0)
00013E38 0240 007F                  		andi.w	#$7F,d0
00013E3C 1140 0033                  		move.b	d0,$33(a0)
00013E40 6000 0000                  		bra.w	Obj0A_Countdown
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            loc_13D00:
00013E44 1140 001C                  		move.b	d0,$1C(a0)
00013E48 3168 0008 0030             		move.w	8(a0),$30(a0)
00013E4E 317C FF78 0012             		move.w	#-$88,$12(a0)
00013E54                            
00013E54                            Obj0A_Animate:				; XREF: Obj0A_Index
00013E54 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013E5A 4EB9 0000 A7EE             		jsr	AnimateSprite
00013E60                            
00013E60                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013E60 3038 F646                  		move.w	($FFFFF646).w,d0
00013E64 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013E68 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013E6A 117C 0006 0024             		move.b	#6,$24(a0)
00013E70 5E28 001C                  		addq.b	#7,$1C(a0)
00013E74 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013E7A 6700                       		beq.s	Obj0A_Display
00013E7C 6000                       		bra.s	Obj0A_Display
00013E7E                            ; ===========================================================================
00013E7E                            
00013E7E                            Obj0A_Wobble:
00013E7E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013E82 6700                       		beq.s	loc_13D44
00013E84 5868 0030                  		addq.w	#4,$30(a0)
00013E88                            
00013E88                            loc_13D44:
00013E88 1028 0026                  		move.b	$26(a0),d0
00013E8C 5228 0026                  		addq.b	#1,$26(a0)
00013E90 0240 007F                  		andi.w	#$7F,d0
00013E94 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013E9A 1031 0000                  		move.b	(a1,d0.w),d0
00013E9E 4880                       		ext.w	d0
00013EA0 D068 0030                  		add.w	$30(a0),d0
00013EA4 3140 0008                  		move.w	d0,8(a0)
00013EA8 6100                       		bsr.s	Obj0A_ShowNumber
00013EAA 4EBA 986A                  		jsr	SpeedToPos
00013EAE 4A28 0001                  		tst.b	1(a0)
00013EB2 6A00                       		bpl.s	Obj0A_Delete
00013EB4 4EFA 9886                  		jmp	DisplaySprite
00013EB8                            ; ===========================================================================
00013EB8                            
00013EB8                            Obj0A_Delete:
00013EB8 4EFA 98BE                  		jmp	DeleteObject
00013EBC                            ; ===========================================================================
00013EBC                            
00013EBC                            Obj0A_Display:				; XREF: Obj0A_Index
00013EBC 6100                       		bsr.s	Obj0A_ShowNumber
00013EBE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013EC4 4EB9 0000 A7EE             		jsr	AnimateSprite
00013ECA 4EFA 9870                  		jmp	DisplaySprite
00013ECE                            ; ===========================================================================
00013ECE                            
00013ECE                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013ECE 4EFA 98A8                  		jmp	DeleteObject
00013ED2                            ; ===========================================================================
00013ED2                            
00013ED2                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013ED2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013ED8 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013EDA 5368 0038                  		subq.w	#1,$38(a0)
00013EDE 6600                       		bne.s	Obj0A_Display2
00013EE0 117C 000E 0024             		move.b	#$E,$24(a0)
00013EE6 5E28 001C                  		addq.b	#7,$1C(a0)
00013EEA 60D0                       		bra.s	Obj0A_Display
00013EEC                            ; ===========================================================================
00013EEC                            
00013EEC                            Obj0A_Display2:
00013EEC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013EF2 4EB9 0000 A7EE             		jsr	AnimateSprite
00013EF8 4A28 0001                  		tst.b	1(a0)
00013EFC 6A00                       		bpl.s	Obj0A_Delete3
00013EFE 4EFA 983C                  		jmp	DisplaySprite
00013F02                            ; ===========================================================================
00013F02                            
00013F02                            Obj0A_Delete3:
00013F02 4EFA 9874                  		jmp	DeleteObject
00013F06                            ; ===========================================================================
00013F06                            
00013F06                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013F06 4A68 0038                  		tst.w	$38(a0)
00013F0A 6700                       		beq.s	locret_13E1A
00013F0C 5368 0038                  		subq.w	#1,$38(a0)
00013F10 6600                       		bne.s	locret_13E1A
00013F12 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013F18 6400                       		bcc.s	locret_13E1A
00013F1A 317C 000F 0038             		move.w	#$F,$38(a0)
00013F20 4268 0012                  		clr.w	$12(a0)
00013F24 117C 0080 0001             		move.b	#$80,1(a0)
00013F2A 3028 0008                  		move.w	8(a0),d0
00013F2E 9078 F700                  		sub.w	($FFFFF700).w,d0
00013F32 0640 0080                  		addi.w	#$80,d0
00013F36 3140 0008                  		move.w	d0,8(a0)
00013F3A 3028 000C                  		move.w	$C(a0),d0
00013F3E 9078 F704                  		sub.w	($FFFFF704).w,d0
00013F42 0640 0080                  		addi.w	#$80,d0
00013F46 3140 000A                  		move.w	d0,$A(a0)
00013F4A 117C 000C 0024             		move.b	#$C,$24(a0)
00013F50                            
00013F50                            locret_13E1A:
00013F50 4E75                       		rts	
00013F52                            ; ===========================================================================
00013F52                            Obj0A_WobbleData:
00013F52 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013F63 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013F74 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013F85 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013F95 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00013FA2 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013FAF FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013FBC FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00013FC9 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00013FD2                            ; ===========================================================================
00013FD2                            
00013FD2                            Obj0A_Countdown:			; XREF: Obj0A_Index
00013FD2 4A68 002C                  		tst.w	$2C(a0)
00013FD6 6600 0000                  		bne.w	loc_13F86
00013FDA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00013FE0 6400 0000                  		bcc.w	locret_1408C
00013FE4 0838 0006 D022             		btst	#6,($FFFFD022).w
00013FEA 6700 0000                  		beq.w	locret_1408C
00013FEE 5368 0038                  		subq.w	#1,$38(a0)
00013FF2 6A00 0000                  		bpl.w	loc_13FAC
00013FF6 317C 003B 0038             		move.w	#59,$38(a0)
00013FFC 317C 0001 0036             		move.w	#1,$36(a0)
00014002 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014008 0240 0001                  		andi.w	#1,d0
0001400C 1140 0034                  		move.b	d0,$34(a0)
00014010 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014014 0C40 0019                  		cmpi.w	#$19,d0
00014018 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001401A 0C40 0014                  		cmpi.w	#$14,d0
0001401E 6700                       		beq.s	Obj0A_WarnSound
00014020 0C40 000F                  		cmpi.w	#$F,d0
00014024 6700                       		beq.s	Obj0A_WarnSound
00014026 0C40 000C                  		cmpi.w	#$C,d0
0001402A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001402C 6600                       		bne.s	loc_13F02
0001402E 303C 0092                  		move.w	#$92,d0
00014032 4EB9 0000 1396             		jsr	(PlaySound).l	; play countdown music
00014038                            
00014038                            loc_13F02:
00014038 5328 0032                  		subq.b	#1,$32(a0)
0001403C 6A00                       		bpl.s	Obj0A_ReduceAir
0001403E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014044 08E8 0007 0036             		bset	#7,$36(a0)
0001404A 6000                       		bra.s	Obj0A_ReduceAir
0001404C                            ; ===========================================================================
0001404C                            
0001404C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001404C 303C 00C2                  		move.w	#$C2,d0
00014050 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014056                            
00014056                            Obj0A_ReduceAir:
00014056 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001405A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001405E 6100 0000                  		bsr.w	ResumeMusic
00014062 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014068 303C 00B2                  		move.w	#$B2,d0
0001406C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play drowning sound
00014072 117C 000A 0034             		move.b	#$A,$34(a0)
00014078 317C 0001 0036             		move.w	#1,$36(a0)
0001407E 317C 0078 002C             		move.w	#$78,$2C(a0)
00014084 2F08                       		move.l	a0,-(sp)
00014086 41F8 D000                  		lea	($FFFFD000).w,a0
0001408A 6100 F860                  		bsr.w	Sonic_ResetOnFloor
0001408E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014094 08E8 0001 0022             		bset	#1,$22(a0)
0001409A 08E8 0007 0002             		bset	#7,2(a0)
000140A0 317C 0000 0012             		move.w	#0,$12(a0)
000140A6 317C 0000 0010             		move.w	#0,$10(a0)
000140AC 317C 0000 0014             		move.w	#0,$14(a0)
000140B2 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000140B8 205F                       		movea.l	(sp)+,a0
000140BA 4E75                       		rts	
000140BC                            ; ===========================================================================
000140BC                            
000140BC                            loc_13F86:
000140BC 5368 002C                  		subq.w	#1,$2C(a0)
000140C0 6600                       		bne.s	loc_13F94
000140C2 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000140C8 4E75                       		rts	
000140CA                            ; ===========================================================================
000140CA                            
000140CA                            loc_13F94:
000140CA 2F08                       		move.l	a0,-(sp)
000140CC 41F8 D000                  		lea	($FFFFD000).w,a0
000140D0 4EBA 9644                  		jsr	SpeedToPos
000140D4 0668 0010 0012             		addi.w	#$10,$12(a0)
000140DA 205F                       		movea.l	(sp)+,a0
000140DC 6000                       		bra.s	loc_13FAC
000140DE                            ; ===========================================================================
000140DE                            
000140DE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000140DE 6000                       		bra.s	Obj0A_MakeItem
000140E0                            ; ===========================================================================
000140E0                            
000140E0                            loc_13FAC:
000140E0 4A68 0036                  		tst.w	$36(a0)
000140E4 6700 0000                  		beq.w	locret_1408C
000140E8 5368 003A                  		subq.w	#1,$3A(a0)
000140EC 6A00 0000                  		bpl.w	locret_1408C
000140F0                            
000140F0                            Obj0A_MakeItem:
000140F0 4EB9 0000 29B4             		jsr	(RandomNumber).l
000140F6 0240 000F                  		andi.w	#$F,d0
000140FA 3140 003A                  		move.w	d0,$3A(a0)
000140FE 4EBA 9AC2                  		jsr	SingleObjLoad
00014102 6600 0000                  		bne.w	locret_1408C
00014106 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001410A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014110 7006                       		moveq	#6,d0
00014112 0838 0000 D022             		btst	#0,($FFFFD022).w
00014118 6700                       		beq.s	loc_13FF2
0001411A 4440                       		neg.w	d0
0001411C 137C 0040 0026             		move.b	#$40,$26(a1)
00014122                            
00014122                            loc_13FF2:
00014122 D169 0008                  		add.w	d0,8(a1)
00014126 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001412C 137C 0006 0028             		move.b	#6,$28(a1)
00014132 4A68 002C                  		tst.w	$2C(a0)
00014136 6700 0000                  		beq.w	loc_1403E
0001413A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014140 0668 0000 003A             		addi.w	#0,$3A(a0)
00014146 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001414A 0440 000C                  		subi.w	#$C,d0
0001414E 3340 000C                  		move.w	d0,$C(a1)
00014152 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014158 1340 0026                  		move.b	d0,$26(a1)
0001415C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014160 0200 0003                  		andi.b	#3,d0
00014164 6600                       		bne.s	loc_14082
00014166 137C 000E 0028             		move.b	#$E,$28(a1)
0001416C 6000                       		bra.s	loc_14082
0001416E                            ; ===========================================================================
0001416E                            
0001416E                            loc_1403E:
0001416E 0828 0007 0036             		btst	#7,$36(a0)
00014174 6700                       		beq.s	loc_14082
00014176 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001417A E24A                       		lsr.w	#1,d2
0001417C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014182 0240 0003                  		andi.w	#3,d0
00014186 6600                       		bne.s	loc_1406A
00014188 08E8 0006 0036             		bset	#6,$36(a0)
0001418E 6600                       		bne.s	loc_14082
00014190 1342 0028                  		move.b	d2,$28(a1)
00014194 337C 001C 0038             		move.w	#$1C,$38(a1)
0001419A                            
0001419A                            loc_1406A:
0001419A 4A28 0034                  		tst.b	$34(a0)
0001419E 6600                       		bne.s	loc_14082
000141A0 08E8 0006 0036             		bset	#6,$36(a0)
000141A6 6600                       		bne.s	loc_14082
000141A8 1342 0028                  		move.b	d2,$28(a1)
000141AC 337C 001C 0038             		move.w	#$1C,$38(a1)
000141B2                            
000141B2                            loc_14082:
000141B2 5328 0034                  		subq.b	#1,$34(a0)
000141B6 6A00                       		bpl.s	locret_1408C
000141B8 4268 0036                  		clr.w	$36(a0)
000141BC                            
000141BC                            locret_1408C:
000141BC 4E75                       		rts	
000141BE                            
000141BE                            ; ---------------------------------------------------------------------------
000141BE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000141BE                            ; ---------------------------------------------------------------------------
000141BE                            
000141BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141BE                            
000141BE                            
000141BE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000141BE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000141C4 6200                       		bhi.s	loc_140AC
000141C6 303C 0082                  		move.w	#$82,d0		; play LZ music
000141CA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
000141D0 6600                       		bne.s	loc_140A6
000141D2 303C 0086                  		move.w	#$86,d0		; play SBZ music
000141D6                            
000141D6                            loc_140A6:
000141D6 4EB9 0000 1396             		jsr	(PlaySound).l
000141DC                            
000141DC                            loc_140AC:
000141DC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000141E2 4238 D372                  		clr.b	($FFFFD372).w
000141E6 4E75                       		rts	
000141E8                            ; End of function ResumeMusic
000141E8                            
000141E8                            ; ===========================================================================
000141E8                            Ani_obj0A:
000141E8                            	include "_anim\obj0A.asm"
000141E8                            ; ---------------------------------------------------------------------------
000141E8                            ; Animation script - countdown numbers and bubbles (LZ)
000141E8                            ; ---------------------------------------------------------------------------
000141E8 0000                       		dc.w byte_140D6-Ani_obj0A
000141EA 0000                       		dc.w byte_140E0-Ani_obj0A
000141EC 0000                       		dc.w byte_140EA-Ani_obj0A
000141EE 0000                       		dc.w byte_140F4-Ani_obj0A
000141F0 0000                       		dc.w byte_140FE-Ani_obj0A
000141F2 0000                       		dc.w byte_14108-Ani_obj0A
000141F4 0000                       		dc.w byte_14112-Ani_obj0A
000141F6 0000                       		dc.w byte_14118-Ani_obj0A
000141F8 0000                       		dc.w byte_14120-Ani_obj0A
000141FA 0000                       		dc.w byte_14128-Ani_obj0A
000141FC 0000                       		dc.w byte_14130-Ani_obj0A
000141FE 0000                       		dc.w byte_14138-Ani_obj0A
00014200 0000                       		dc.w byte_14140-Ani_obj0A
00014202 0000                       		dc.w byte_14148-Ani_obj0A
00014204 0000                       		dc.w byte_1414A-Ani_obj0A
00014206 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014210 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001421A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014224 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001422E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014238 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014242 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014248 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014250 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014258 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014260 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014268 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014270 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014278 0EFC                       byte_14148:	dc.b $E, $FC
0001427A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014280                            		even
00014280                            		even
00014280                            
00014280                            ; ---------------------------------------------------------------------------
00014280                            ; Sprite mappings - drowning countdown numbers (LZ)
00014280                            ; ---------------------------------------------------------------------------
00014280                            Map_obj0A:
00014280                            	include "_maps\obj0A.asm"
00014280                            ; ---------------------------------------------------------------------------
00014280                            ; Sprite mappings - drowning countdown numbers (LZ)
00014280                            ; ---------------------------------------------------------------------------
00014280 0000                       		dc.w byte_14152-Map_obj0A
00014282 01                         byte_14152:	dc.b 1
00014283 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014288                            		even
00014288                            		even
00014288                            
00014288                            ; ===========================================================================
00014288                            ; ---------------------------------------------------------------------------
00014288                            ; Object 38 - shield and invincibility stars
00014288                            ; ---------------------------------------------------------------------------
00014288                            
00014288                            Obj38:					; XREF: Obj_Index
00014288 7000                       		moveq	#0,d0
0001428A 1028 0024                  		move.b	$24(a0),d0
0001428E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014292 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014296                            ; ===========================================================================
00014296 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014298 0000                       		dc.w Obj38_Shield-Obj38_Index
0001429A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            Obj38_Main:				; XREF: Obj38_Index
0001429C 5428 0024                  		addq.b	#2,$24(a0)
000142A0 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000142A8 117C 0004 0001             		move.b	#4,1(a0)
000142AE 117C 0001 0018             		move.b	#1,$18(a0)
000142B4 117C 0010 0019             		move.b	#$10,$19(a0)
000142BA 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000142BE 6600                       		bne.s	Obj38_DoStars	; if not, branch
000142C0 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000142C6 4E75                       		rts	
000142C8                            ; ===========================================================================
000142C8                            
000142C8                            Obj38_DoStars:
000142C8 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000142CC 317C 055C 0002             		move.w	#$55C,2(a0)
000142D2 4E75                       		rts	
000142D4                            ; ===========================================================================
000142D4                            
000142D4                            Obj38_Shield:				; XREF: Obj38_Index
000142D4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000142D8 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000142DA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000142DE 6700                       		beq.s	Obj38_Delete	; if not, branch
000142E0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000142E6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000142EC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000142F2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000142F8 4EB9 0000 A7EE             		jsr	AnimateSprite
000142FE 4EFA 943C                  		jmp	DisplaySprite
00014302                            ; ===========================================================================
00014302                            
00014302                            Obj38_RmvShield:
00014302 4E75                       		rts	
00014304                            ; ===========================================================================
00014304                            
00014304                            Obj38_Delete:
00014304 4EFA 9472                  		jmp	DeleteObject
00014308                            ; ===========================================================================
00014308                            
00014308                            Obj38_Stars:				; XREF: Obj38_Index
00014308 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001430C 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001430E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014312 1228 001C                  		move.b	$1C(a0),d1
00014316 5301                       		subq.b	#1,d1
00014318 6000                       		bra.s	Obj38_StarTrail
0001431A                            ; ===========================================================================
0001431A E909                       		lsl.b	#4,d1
0001431C 5801                       		addq.b	#4,d1
0001431E 9001                       		sub.b	d1,d0
00014320 1228 0030                  		move.b	$30(a0),d1
00014324 9001                       		sub.b	d1,d0
00014326 5801                       		addq.b	#4,d1
00014328 0201 000F                  		andi.b	#$F,d1
0001432C 1141 0030                  		move.b	d1,$30(a0)
00014330 6000                       		bra.s	Obj38_StarTrail2a
00014332                            ; ===========================================================================
00014332                            
00014332                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014332 E709                       		lsl.b	#3,d1
00014334 1401                       		move.b	d1,d2
00014336 D201                       		add.b	d1,d1
00014338 D202                       		add.b	d2,d1
0001433A 5801                       		addq.b	#4,d1
0001433C 9001                       		sub.b	d1,d0
0001433E 1228 0030                  		move.b	$30(a0),d1
00014342 9001                       		sub.b	d1,d0
00014344 5801                       		addq.b	#4,d1
00014346 0C01 0018                  		cmpi.b	#$18,d1
0001434A 6500                       		bcs.s	Obj38_StarTrail2
0001434C 7200                       		moveq	#0,d1
0001434E                            
0001434E                            Obj38_StarTrail2:
0001434E 1141 0030                  		move.b	d1,$30(a0)
00014352                            
00014352                            Obj38_StarTrail2a:
00014352 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014356 43F1 0000                  		lea	(a1,d0.w),a1
0001435A 3159 0008                  		move.w	(a1)+,8(a0)
0001435E 3159 000C                  		move.w	(a1)+,$C(a0)
00014362 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014368 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001436E 4EB9 0000 A7EE             		jsr	AnimateSprite
00014374 4EFA 93C6                  		jmp	DisplaySprite
00014378                            ; ===========================================================================
00014378                            
00014378                            Obj38_Delete2:				; XREF: Obj38_Stars
00014378 4EFA 93FE                  		jmp	DeleteObject
0001437C                            ; ===========================================================================
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            ; Object 4A - special stage entry from beta
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            
0001437C                            Obj4A:					; XREF: Obj_Index
0001437C 7000                       		moveq	#0,d0
0001437E 1028 0024                  		move.b	$24(a0),d0
00014382 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014386 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001438A                            ; ===========================================================================
0001438A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001438C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001438E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014390                            ; ===========================================================================
00014390                            
00014390                            Obj4A_Main:				; XREF: Obj4A_Index
00014390 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014394 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014396 4E75                       		rts	
00014398                            ; ===========================================================================
00014398                            
00014398                            Obj4A_Main2:
00014398 5428 0024                  		addq.b	#2,$24(a0)
0001439C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000143A4 117C 0004 0001             		move.b	#4,1(a0)
000143AA 117C 0001 0018             		move.b	#1,$18(a0)
000143B0 117C 0038 0019             		move.b	#$38,$19(a0)
000143B6 317C 0541 0002             		move.w	#$541,2(a0)
000143BC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000143C2                            
000143C2                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000143C2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000143C8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000143CE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000143D4 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000143DA 4EB9 0000 A7EE             		jsr	AnimateSprite
000143E0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000143E6 6600                       		bne.s	Obj4A_Display
000143E8 4A38 D000                  		tst.b	($FFFFD000).w
000143EC 6700                       		beq.s	Obj4A_Display
000143EE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000143F4 303C 00A8                  		move.w	#$A8,d0
000143F8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000143FE                            
000143FE                            Obj4A_Display:
000143FE 4EFA 933C                  		jmp	DisplaySprite
00014402                            ; ===========================================================================
00014402                            
00014402                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014402 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014406 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014408 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001440E 4EFA 9368                  		jmp	DeleteObject
00014412                            ; ===========================================================================
00014412                            
00014412                            Obj4A_Wait:
00014412 4E75                       		rts	
00014414                            ; ===========================================================================
00014414                            ; ---------------------------------------------------------------------------
00014414                            ; Object 08 - water splash (LZ)
00014414                            ; ---------------------------------------------------------------------------
00014414                            
00014414                            Obj08:					; XREF: Obj_Index
00014414 7000                       		moveq	#0,d0
00014416 1028 0024                  		move.b	$24(a0),d0
0001441A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001441E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014422                            ; ===========================================================================
00014422 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014424 0000                       		dc.w Obj08_Display-Obj08_Index
00014426 0000                       		dc.w Obj08_Delete-Obj08_Index
00014428                            ; ===========================================================================
00014428                            
00014428                            Obj08_Main:				; XREF: Obj08_Index
00014428 5428 0024                  		addq.b	#2,$24(a0)
0001442C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014434 0028 0004 0001             		ori.b	#4,1(a0)
0001443A 117C 0001 0018             		move.b	#1,$18(a0)
00014440 117C 0010 0019             		move.b	#$10,$19(a0)
00014446 317C 4259 0002             		move.w	#$4259,2(a0)
0001444C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014452                            
00014452                            Obj08_Display:				; XREF: Obj08_Index
00014452 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014458 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001445E 4EB9 0000 A7EE             		jsr	AnimateSprite
00014464 4EFA 92D6                  		jmp	DisplaySprite
00014468                            ; ===========================================================================
00014468                            
00014468                            Obj08_Delete:				; XREF: Obj08_Index
00014468 4EFA 930E                  		jmp	DeleteObject	; delete when animation	is complete
0001446C                            ; ===========================================================================
0001446C                            Ani_obj38:
0001446C                            	include "_anim\obj38.asm"
0001446C                            ; ---------------------------------------------------------------------------
0001446C                            ; Animation script - shield and invincibility stars
0001446C                            ; ---------------------------------------------------------------------------
0001446C 0000                       		dc.w byte_14356-Ani_obj38
0001446E 0000                       		dc.w byte_1435E-Ani_obj38
00014470 0000                       		dc.w byte_14364-Ani_obj38
00014472 0000                       		dc.w byte_1437E-Ani_obj38
00014474 0000                       		dc.w byte_14398-Ani_obj38
00014476 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001447E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014484 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014495 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001449E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000144AF 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000144B8 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000144C9 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000144D2                            		even
000144D2                            		even
000144D2                            
000144D2                            ; ---------------------------------------------------------------------------
000144D2                            ; Sprite mappings - shield and invincibility stars
000144D2                            ; ---------------------------------------------------------------------------
000144D2                            Map_obj38:
000144D2                            	include "_maps\obj38.asm"
000144D2                            ; ---------------------------------------------------------------------------
000144D2                            ; Sprite mappings - shield and invincibility stars
000144D2                            ; ---------------------------------------------------------------------------
000144D2 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000144D6 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000144DA 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000144DE 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000144E2 04                         byte_143C2:	dc.b 4
000144E3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000144E8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000144ED 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000144F2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000144F7 04                         byte_143D7:	dc.b 4
000144F8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000144FD E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014502 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014507 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
0001450C 04                         byte_143EC:	dc.b 4
0001450D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014512 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014517 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001451C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014521 04                         byte_14401:	dc.b 4
00014522 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014527 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001452C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014531 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014536 04                         byte_14416:	dc.b 4
00014537 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001453C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014541 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014546 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001454B 04                         byte_1442B:	dc.b 4
0001454C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014551 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014556 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0001455B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014560 04                         byte_14440:	dc.b 4
00014561 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014566 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0001456B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014570 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014576 00                         		even
00014576 00                         		even
00014576                            
00014576                            Ani_obj4A:
00014576                            	include "_anim\obj4A.asm"
00014576                            ; ---------------------------------------------------------------------------
00014576                            ; Animation script - special stage entry effect from beta
00014576                            ; ---------------------------------------------------------------------------
00014576 0000                       		dc.w byte_14458-Ani_obj4A
00014578 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001458C                            		even
0001458C                            		even
0001458C                            
0001458C                            ; ---------------------------------------------------------------------------
0001458C                            ; Sprite mappings - special stage entry	from beta
0001458C                            ; ---------------------------------------------------------------------------
0001458C                            Map_obj4A:
0001458C                            	include "_maps\obj4A.asm"
0001458C                            ; ---------------------------------------------------------------------------
0001458C                            ; Sprite mappings - special stage entry	from beta
0001458C                            ; ---------------------------------------------------------------------------
0001458C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014590 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014594 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014598 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001459C 03                         byte_1447C:	dc.b 3
0001459D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000145A2 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000145A7 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000145AC 03                         byte_1448C:	dc.b 3
000145AD F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000145B2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000145B7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000145BC 05                         byte_1449C:	dc.b 5
000145BD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000145C2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000145C7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000145CC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000145D1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000145D6 09                         byte_144B6:	dc.b 9
000145D7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000145DC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000145E1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000145E6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000145EB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000145F0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000145F5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000145FA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000145FF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014604 12                         byte_144E4:	dc.b $12
00014605 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001460A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001460F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014614 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014619 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001461E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014623 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014628 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001462D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014632 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014637 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001463C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014641 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014646 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001464B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014650 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014655 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001465A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001465F 11                         byte_1453F:	dc.b $11
00014660 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014665 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001466A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001466F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014674 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014679 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001467E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014683 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014688 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001468D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014692 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014697 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001469C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000146A1 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000146A6 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000146AB 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000146B0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000146B5 09                         byte_14595:	dc.b 9
000146B6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000146BB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000146C0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000146C5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000146CA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000146CF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000146D4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000146D9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000146DE 04                         		dc.b 4
000146DF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000146E4                            		even
000146E4                            		even
000146E4                            
000146E4                            Ani_obj08:
000146E4                            	include "_anim\obj08.asm"
000146E4                            ; ---------------------------------------------------------------------------
000146E4                            ; Animation script - water splash (LZ)
000146E4                            ; ---------------------------------------------------------------------------
000146E4 0000                       		dc.w byte_145C6-Ani_obj08
000146E6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000146EC                            		even
000146EC                            		even
000146EC                            
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            ; Sprite mappings - water splash (LZ)
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            Map_obj08:
000146EC                            	include "_maps\obj08.asm"
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            ; Sprite mappings - water splash (LZ)
000146EC                            ; ---------------------------------------------------------------------------
000146EC 0000                       		dc.w byte_145D2-Map_obj08
000146EE 0000                       		dc.w byte_145DD-Map_obj08
000146F0 0000                       		dc.w byte_145E8-Map_obj08
000146F2 02                         byte_145D2:	dc.b 2
000146F3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000146F8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000146FD 02                         byte_145DD:	dc.b 2
000146FE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014703 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014708 01                         byte_145E8:	dc.b 1
00014709 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001470E                            		even
0001470E                            		even
0001470E                            
0001470E                            ; ---------------------------------------------------------------------------
0001470E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001470E                            ; ---------------------------------------------------------------------------
0001470E                            
0001470E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001470E                            
0001470E                            
0001470E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001470E 0828 0003 0022             		btst	#3,$22(a0)
00014714 6700                       		beq.s	loc_14602
00014716 7000                       		moveq	#0,d0
00014718 11C0 F768                  		move.b	d0,($FFFFF768).w
0001471C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014720 4E75                       		rts	
00014722                            ; ===========================================================================
00014722                            
00014722                            loc_14602:
00014722 7003                       		moveq	#3,d0
00014724 11C0 F768                  		move.b	d0,($FFFFF768).w
00014728 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001472C 1028 0026                  		move.b	$26(a0),d0
00014730 0600 0020                  		addi.b	#$20,d0
00014734 6A00                       		bpl.s	loc_14624
00014736 1028 0026                  		move.b	$26(a0),d0
0001473A 6A00                       		bpl.s	loc_1461E
0001473C 5300                       		subq.b	#1,d0
0001473E                            
0001473E                            loc_1461E:
0001473E 0600 0020                  		addi.b	#$20,d0
00014742 6000                       		bra.s	loc_14630
00014744                            ; ===========================================================================
00014744                            
00014744                            loc_14624:
00014744 1028 0026                  		move.b	$26(a0),d0
00014748 6A00                       		bpl.s	loc_1462C
0001474A 5200                       		addq.b	#1,d0
0001474C                            
0001474C                            loc_1462C:
0001474C 0600 001F                  		addi.b	#$1F,d0
00014750                            
00014750                            loc_14630:
00014750 0200 00C0                  		andi.b	#$C0,d0
00014754 0C00 0040                  		cmpi.b	#$40,d0
00014758 6700 0000                  		beq.w	Sonic_WalkVertL
0001475C 0C00 0080                  		cmpi.b	#$80,d0
00014760 6700 0000                  		beq.w	Sonic_WalkCeiling
00014764 0C00 00C0                  		cmpi.b	#$C0,d0
00014768 6700 0000                  		beq.w	Sonic_WalkVertR
0001476C 3428 000C                  		move.w	$C(a0),d2
00014770 3628 0008                  		move.w	8(a0),d3
00014774 7000                       		moveq	#0,d0
00014776 1028 0016                  		move.b	$16(a0),d0
0001477A 4880                       		ext.w	d0
0001477C D440                       		add.w	d0,d2
0001477E 1028 0017                  		move.b	$17(a0),d0
00014782 4880                       		ext.w	d0
00014784 D640                       		add.w	d0,d3
00014786 49F8 F768                  		lea	($FFFFF768).w,a4
0001478A 367C 0010                  		movea.w	#$10,a3
0001478E 3C3C 0000                  		move.w	#0,d6
00014792 7A0D                       		moveq	#$D,d5
00014794 6100 0000                  		bsr.w	FindFloor
00014798 3F01                       		move.w	d1,-(sp)
0001479A 3428 000C                  		move.w	$C(a0),d2
0001479E 3628 0008                  		move.w	8(a0),d3
000147A2 7000                       		moveq	#0,d0
000147A4 1028 0016                  		move.b	$16(a0),d0
000147A8 4880                       		ext.w	d0
000147AA D440                       		add.w	d0,d2
000147AC 1028 0017                  		move.b	$17(a0),d0
000147B0 4880                       		ext.w	d0
000147B2 4440                       		neg.w	d0
000147B4 D640                       		add.w	d0,d3
000147B6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000147BA 367C 0010                  		movea.w	#$10,a3
000147BE 3C3C 0000                  		move.w	#0,d6
000147C2 7A0D                       		moveq	#$D,d5
000147C4 6100 0000                  		bsr.w	FindFloor
000147C8 301F                       		move.w	(sp)+,d0
000147CA 6100 0000                  		bsr.w	Sonic_Angle
000147CE 4A41                       		tst.w	d1
000147D0 6700                       		beq.s	locret_146BE
000147D2 6A00                       		bpl.s	loc_146C0
000147D4 0C41 FFF2                  		cmpi.w	#-$E,d1
000147D8 6D00                       		blt.s	locret_146E6
000147DA D368 000C                  		add.w	d1,$C(a0)
000147DE                            
000147DE                            locret_146BE:
000147DE 4E75                       		rts	
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            loc_146C0:
000147E0 0C41 000E                  		cmpi.w	#$E,d1
000147E4 6E00                       		bgt.s	loc_146CC
000147E6                            
000147E6                            loc_146C6:
000147E6 D368 000C                  		add.w	d1,$C(a0)
000147EA 4E75                       		rts	
000147EC                            ; ===========================================================================
000147EC                            
000147EC                            loc_146CC:
000147EC 4A28 0038                  		tst.b	$38(a0)
000147F0 66F4                       		bne.s	loc_146C6
000147F2 08E8 0001 0022             		bset	#1,$22(a0)
000147F8 08A8 0005 0022             		bclr	#5,$22(a0)
000147FE 117C 0001 001D             		move.b	#1,$1D(a0)
00014804 4E75                       		rts	
00014806                            ; ===========================================================================
00014806                            
00014806                            locret_146E6:
00014806 4E75                       		rts	
00014808                            ; End of function Sonic_AnglePos
00014808                            
00014808                            ; ===========================================================================
00014808 2428 0008                  		move.l	8(a0),d2
0001480C 3028 0010                  		move.w	$10(a0),d0
00014810 48C0                       		ext.l	d0
00014812 E180                       		asl.l	#8,d0
00014814 9480                       		sub.l	d0,d2
00014816 2142 0008                  		move.l	d2,8(a0)
0001481A 303C 0038                  		move.w	#$38,d0
0001481E 48C0                       		ext.l	d0
00014820 E180                       		asl.l	#8,d0
00014822 9680                       		sub.l	d0,d3
00014824 2143 000C                  		move.l	d3,$C(a0)
00014828 4E75                       		rts	
0001482A                            ; ===========================================================================
0001482A                            
0001482A                            locret_1470A:
0001482A 4E75                       		rts	
0001482C                            ; ===========================================================================
0001482C 2628 000C                  		move.l	$C(a0),d3
00014830 3028 0012                  		move.w	$12(a0),d0
00014834 0440 0038                  		subi.w	#$38,d0
00014838 3140 0012                  		move.w	d0,$12(a0)
0001483C 48C0                       		ext.l	d0
0001483E E180                       		asl.l	#8,d0
00014840 9680                       		sub.l	d0,d3
00014842 2143 000C                  		move.l	d3,$C(a0)
00014846 4E75                       		rts	
00014848 4E75                       		rts	
0001484A                            ; ===========================================================================
0001484A 2428 0008                  		move.l	8(a0),d2
0001484E 2628 000C                  		move.l	$C(a0),d3
00014852 3028 0010                  		move.w	$10(a0),d0
00014856 48C0                       		ext.l	d0
00014858 E180                       		asl.l	#8,d0
0001485A 9480                       		sub.l	d0,d2
0001485C 3028 0012                  		move.w	$12(a0),d0
00014860 48C0                       		ext.l	d0
00014862 E180                       		asl.l	#8,d0
00014864 9680                       		sub.l	d0,d3
00014866 2142 0008                  		move.l	d2,8(a0)
0001486A 2143 000C                  		move.l	d3,$C(a0)
0001486E 4E75                       		rts	
00014870                            
00014870                            ; ---------------------------------------------------------------------------
00014870                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014870                            ; ---------------------------------------------------------------------------
00014870                            
00014870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014870                            
00014870                            
00014870                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014870 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014874 B240                       		cmp.w	d0,d1
00014876 6F00                       		ble.s	loc_1475E
00014878 1438 F768                  		move.b	($FFFFF768).w,d2
0001487C 3200                       		move.w	d0,d1
0001487E                            
0001487E                            loc_1475E:
0001487E 0802 0000                  		btst	#0,d2
00014882 6600                       		bne.s	loc_1476A
00014884 1142 0026                  		move.b	d2,$26(a0)
00014888 4E75                       		rts	
0001488A                            ; ===========================================================================
0001488A                            
0001488A                            loc_1476A:
0001488A 1428 0026                  		move.b	$26(a0),d2
0001488E 0602 0020                  		addi.b	#$20,d2
00014892 0202 00C0                  		andi.b	#$C0,d2
00014896 1142 0026                  		move.b	d2,$26(a0)
0001489A 4E75                       		rts	
0001489C                            ; End of function Sonic_Angle
0001489C                            
0001489C                            ; ---------------------------------------------------------------------------
0001489C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001489C                            ; ---------------------------------------------------------------------------
0001489C                            
0001489C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001489C                            
0001489C                            
0001489C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001489C 3428 000C                  		move.w	$C(a0),d2
000148A0 3628 0008                  		move.w	8(a0),d3
000148A4 7000                       		moveq	#0,d0
000148A6 1028 0017                  		move.b	$17(a0),d0
000148AA 4880                       		ext.w	d0
000148AC 4440                       		neg.w	d0
000148AE D440                       		add.w	d0,d2
000148B0 1028 0016                  		move.b	$16(a0),d0
000148B4 4880                       		ext.w	d0
000148B6 D640                       		add.w	d0,d3
000148B8 49F8 F768                  		lea	($FFFFF768).w,a4
000148BC 367C 0010                  		movea.w	#$10,a3
000148C0 3C3C 0000                  		move.w	#0,d6
000148C4 7A0D                       		moveq	#$D,d5
000148C6 6100 0000                  		bsr.w	FindWall
000148CA 3F01                       		move.w	d1,-(sp)
000148CC 3428 000C                  		move.w	$C(a0),d2
000148D0 3628 0008                  		move.w	8(a0),d3
000148D4 7000                       		moveq	#0,d0
000148D6 1028 0017                  		move.b	$17(a0),d0
000148DA 4880                       		ext.w	d0
000148DC D440                       		add.w	d0,d2
000148DE 1028 0016                  		move.b	$16(a0),d0
000148E2 4880                       		ext.w	d0
000148E4 D640                       		add.w	d0,d3
000148E6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000148EA 367C 0010                  		movea.w	#$10,a3
000148EE 3C3C 0000                  		move.w	#0,d6
000148F2 7A0D                       		moveq	#$D,d5
000148F4 6100 0000                  		bsr.w	FindWall
000148F8 301F                       		move.w	(sp)+,d0
000148FA 6100 FF74                  		bsr.w	Sonic_Angle
000148FE 4A41                       		tst.w	d1
00014900 6700                       		beq.s	locret_147F0
00014902 6A00                       		bpl.s	loc_147F2
00014904 0C41 FFF2                  		cmpi.w	#-$E,d1
00014908 6D00 FF20                  		blt.w	locret_1470A
0001490C D368 0008                  		add.w	d1,8(a0)
00014910                            
00014910                            locret_147F0:
00014910 4E75                       		rts	
00014912                            ; ===========================================================================
00014912                            
00014912                            loc_147F2:
00014912 0C41 000E                  		cmpi.w	#$E,d1
00014916 6E00                       		bgt.s	loc_147FE
00014918                            
00014918                            loc_147F8:
00014918 D368 0008                  		add.w	d1,8(a0)
0001491C 4E75                       		rts	
0001491E                            ; ===========================================================================
0001491E                            
0001491E                            loc_147FE:
0001491E 4A28 0038                  		tst.b	$38(a0)
00014922 66F4                       		bne.s	loc_147F8
00014924 08E8 0001 0022             		bset	#1,$22(a0)
0001492A 08A8 0005 0022             		bclr	#5,$22(a0)
00014930 117C 0001 001D             		move.b	#1,$1D(a0)
00014936 4E75                       		rts	
00014938                            ; End of function Sonic_WalkVertR
00014938                            
00014938                            ; ---------------------------------------------------------------------------
00014938                            ; Subroutine allowing Sonic to walk upside-down
00014938                            ; ---------------------------------------------------------------------------
00014938                            
00014938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014938                            
00014938                            
00014938                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014938 3428 000C                  		move.w	$C(a0),d2
0001493C 3628 0008                  		move.w	8(a0),d3
00014940 7000                       		moveq	#0,d0
00014942 1028 0016                  		move.b	$16(a0),d0
00014946 4880                       		ext.w	d0
00014948 9440                       		sub.w	d0,d2
0001494A 0A42 000F                  		eori.w	#$F,d2
0001494E 1028 0017                  		move.b	$17(a0),d0
00014952 4880                       		ext.w	d0
00014954 D640                       		add.w	d0,d3
00014956 49F8 F768                  		lea	($FFFFF768).w,a4
0001495A 367C FFF0                  		movea.w	#-$10,a3
0001495E 3C3C 1000                  		move.w	#$1000,d6
00014962 7A0D                       		moveq	#$D,d5
00014964 6100 0000                  		bsr.w	FindFloor
00014968 3F01                       		move.w	d1,-(sp)
0001496A 3428 000C                  		move.w	$C(a0),d2
0001496E 3628 0008                  		move.w	8(a0),d3
00014972 7000                       		moveq	#0,d0
00014974 1028 0016                  		move.b	$16(a0),d0
00014978 4880                       		ext.w	d0
0001497A 9440                       		sub.w	d0,d2
0001497C 0A42 000F                  		eori.w	#$F,d2
00014980 1028 0017                  		move.b	$17(a0),d0
00014984 4880                       		ext.w	d0
00014986 9640                       		sub.w	d0,d3
00014988 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001498C 367C FFF0                  		movea.w	#-$10,a3
00014990 3C3C 1000                  		move.w	#$1000,d6
00014994 7A0D                       		moveq	#$D,d5
00014996 6100 0000                  		bsr.w	FindFloor
0001499A 301F                       		move.w	(sp)+,d0
0001499C 6100 FED2                  		bsr.w	Sonic_Angle
000149A0 4A41                       		tst.w	d1
000149A2 6700                       		beq.s	locret_14892
000149A4 6A00                       		bpl.s	loc_14894
000149A6 0C41 FFF2                  		cmpi.w	#-$E,d1
000149AA 6D00 FE5A                  		blt.w	locret_146E6
000149AE 9368 000C                  		sub.w	d1,$C(a0)
000149B2                            
000149B2                            locret_14892:
000149B2 4E75                       		rts	
000149B4                            ; ===========================================================================
000149B4                            
000149B4                            loc_14894:
000149B4 0C41 000E                  		cmpi.w	#$E,d1
000149B8 6E00                       		bgt.s	loc_148A0
000149BA                            
000149BA                            loc_1489A:
000149BA 9368 000C                  		sub.w	d1,$C(a0)
000149BE 4E75                       		rts	
000149C0                            ; ===========================================================================
000149C0                            
000149C0                            loc_148A0:
000149C0 4A28 0038                  		tst.b	$38(a0)
000149C4 66F4                       		bne.s	loc_1489A
000149C6 08E8 0001 0022             		bset	#1,$22(a0)
000149CC 08A8 0005 0022             		bclr	#5,$22(a0)
000149D2 117C 0001 001D             		move.b	#1,$1D(a0)
000149D8 4E75                       		rts	
000149DA                            ; End of function Sonic_WalkCeiling
000149DA                            
000149DA                            ; ---------------------------------------------------------------------------
000149DA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000149DA                            ; ---------------------------------------------------------------------------
000149DA                            
000149DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149DA                            
000149DA                            
000149DA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000149DA 3428 000C                  		move.w	$C(a0),d2
000149DE 3628 0008                  		move.w	8(a0),d3
000149E2 7000                       		moveq	#0,d0
000149E4 1028 0017                  		move.b	$17(a0),d0
000149E8 4880                       		ext.w	d0
000149EA 9440                       		sub.w	d0,d2
000149EC 1028 0016                  		move.b	$16(a0),d0
000149F0 4880                       		ext.w	d0
000149F2 9640                       		sub.w	d0,d3
000149F4 0A43 000F                  		eori.w	#$F,d3
000149F8 49F8 F768                  		lea	($FFFFF768).w,a4
000149FC 367C FFF0                  		movea.w	#-$10,a3
00014A00 3C3C 0800                  		move.w	#$800,d6
00014A04 7A0D                       		moveq	#$D,d5
00014A06 6100 0000                  		bsr.w	FindWall
00014A0A 3F01                       		move.w	d1,-(sp)
00014A0C 3428 000C                  		move.w	$C(a0),d2
00014A10 3628 0008                  		move.w	8(a0),d3
00014A14 7000                       		moveq	#0,d0
00014A16 1028 0017                  		move.b	$17(a0),d0
00014A1A 4880                       		ext.w	d0
00014A1C D440                       		add.w	d0,d2
00014A1E 1028 0016                  		move.b	$16(a0),d0
00014A22 4880                       		ext.w	d0
00014A24 9640                       		sub.w	d0,d3
00014A26 0A43 000F                  		eori.w	#$F,d3
00014A2A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014A2E 367C FFF0                  		movea.w	#-$10,a3
00014A32 3C3C 0800                  		move.w	#$800,d6
00014A36 7A0D                       		moveq	#$D,d5
00014A38 6100 0000                  		bsr.w	FindWall
00014A3C 301F                       		move.w	(sp)+,d0
00014A3E 6100 FE30                  		bsr.w	Sonic_Angle
00014A42 4A41                       		tst.w	d1
00014A44 6700                       		beq.s	locret_14934
00014A46 6A00                       		bpl.s	loc_14936
00014A48 0C41 FFF2                  		cmpi.w	#-$E,d1
00014A4C 6D00 FDDC                  		blt.w	locret_1470A
00014A50 9368 0008                  		sub.w	d1,8(a0)
00014A54                            
00014A54                            locret_14934:
00014A54 4E75                       		rts	
00014A56                            ; ===========================================================================
00014A56                            
00014A56                            loc_14936:
00014A56 0C41 000E                  		cmpi.w	#$E,d1
00014A5A 6E00                       		bgt.s	loc_14942
00014A5C                            
00014A5C                            loc_1493C:
00014A5C 9368 0008                  		sub.w	d1,8(a0)
00014A60 4E75                       		rts	
00014A62                            ; ===========================================================================
00014A62                            
00014A62                            loc_14942:
00014A62 4A28 0038                  		tst.b	$38(a0)
00014A66 66F4                       		bne.s	loc_1493C
00014A68 08E8 0001 0022             		bset	#1,$22(a0)
00014A6E 08A8 0005 0022             		bclr	#5,$22(a0)
00014A74 117C 0001 001D             		move.b	#1,$1D(a0)
00014A7A 4E75                       		rts	
00014A7C                            ; End of function Sonic_WalkVertL
00014A7C                            
00014A7C                            ; ---------------------------------------------------------------------------
00014A7C                            ; Subroutine to	find which tile	the object is standing on
00014A7C                            ; ---------------------------------------------------------------------------
00014A7C                            
00014A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A7C                            
00014A7C                            
00014A7C                            Floor_ChkTile:				; XREF: FindFloor; et al
00014A7C 3002                       		move.w	d2,d0
00014A7E E248                       		lsr.w	#1,d0
00014A80 0240 0380                  		andi.w	#$380,d0
00014A84 3203                       		move.w	d3,d1
00014A86 E049                       		lsr.w	#8,d1
00014A88 0241 007F                  		andi.w	#$7F,d1
00014A8C D041                       		add.w	d1,d0
00014A8E 72FF                       		moveq	#-1,d1
00014A90 43F8 A400                  		lea	($FFFFA400).w,a1
00014A94 1231 0000                  		move.b	(a1,d0.w),d1
00014A98 6700                       		beq.s	loc_14996
00014A9A 6B00                       		bmi.s	loc_1499A
00014A9C 5301                       		subq.b	#1,d1
00014A9E 4881                       		ext.w	d1
00014AA0 EE59                       		ror.w	#7,d1
00014AA2 3002                       		move.w	d2,d0
00014AA4 D040                       		add.w	d0,d0
00014AA6 0240 01E0                  		andi.w	#$1E0,d0
00014AAA D240                       		add.w	d0,d1
00014AAC 3003                       		move.w	d3,d0
00014AAE E648                       		lsr.w	#3,d0
00014AB0 0240 001E                  		andi.w	#$1E,d0
00014AB4 D240                       		add.w	d0,d1
00014AB6                            
00014AB6                            loc_14996:
00014AB6 2241                       		movea.l	d1,a1
00014AB8 4E75                       		rts	
00014ABA                            ; ===========================================================================
00014ABA                            
00014ABA                            loc_1499A:
00014ABA 0241 007F                  		andi.w	#$7F,d1
00014ABE 0828 0006 0001             		btst	#6,1(a0)
00014AC4 6700                       		beq.s	loc_149B2
00014AC6 5241                       		addq.w	#1,d1
00014AC8 0C41 0029                  		cmpi.w	#$29,d1
00014ACC 6600                       		bne.s	loc_149B2
00014ACE 323C 0051                  		move.w	#$51,d1
00014AD2                            
00014AD2                            loc_149B2:
00014AD2 5301                       		subq.b	#1,d1
00014AD4 EE59                       		ror.w	#7,d1
00014AD6 3002                       		move.w	d2,d0
00014AD8 D040                       		add.w	d0,d0
00014ADA 0240 01E0                  		andi.w	#$1E0,d0
00014ADE D240                       		add.w	d0,d1
00014AE0 3003                       		move.w	d3,d0
00014AE2 E648                       		lsr.w	#3,d0
00014AE4 0240 001E                  		andi.w	#$1E,d0
00014AE8 D240                       		add.w	d0,d1
00014AEA 2241                       		movea.l	d1,a1
00014AEC 4E75                       		rts	
00014AEE                            ; End of function Floor_ChkTile
00014AEE                            
00014AEE                            
00014AEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AEE                            
00014AEE                            
00014AEE                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014AEE 618C                       		bsr.s	Floor_ChkTile
00014AF0 3011                       		move.w	(a1),d0
00014AF2 3800                       		move.w	d0,d4
00014AF4 0240 07FF                  		andi.w	#$7FF,d0
00014AF8 6700                       		beq.s	loc_149DE
00014AFA 0B04                       		btst	d5,d4
00014AFC 6600                       		bne.s	loc_149EC
00014AFE                            
00014AFE                            loc_149DE:
00014AFE D44B                       		add.w	a3,d2
00014B00 6100 0000                  		bsr.w	FindFloor2
00014B04 944B                       		sub.w	a3,d2
00014B06 0641 0010                  		addi.w	#$10,d1
00014B0A 4E75                       		rts	
00014B0C                            ; ===========================================================================
00014B0C                            
00014B0C                            loc_149EC:
00014B0C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014B10 1032 0000                  		move.b	(a2,d0.w),d0
00014B14 0240 00FF                  		andi.w	#$FF,d0
00014B18 67E4                       		beq.s	loc_149DE
00014B1A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014B20 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014B24 E948                       		lsl.w	#4,d0
00014B26 3203                       		move.w	d3,d1
00014B28 0804 000B                  		btst	#$B,d4
00014B2C 6700                       		beq.s	loc_14A12
00014B2E 4641                       		not.w	d1
00014B30 4414                       		neg.b	(a4)
00014B32                            
00014B32                            loc_14A12:
00014B32 0804 000C                  		btst	#$C,d4
00014B36 6700                       		beq.s	loc_14A22
00014B38 0614 0040                  		addi.b	#$40,(a4)
00014B3C 4414                       		neg.b	(a4)
00014B3E 0414 0040                  		subi.b	#$40,(a4)
00014B42                            
00014B42                            loc_14A22:
00014B42 0241 000F                  		andi.w	#$F,d1
00014B46 D240                       		add.w	d0,d1
00014B48 45F9 0000 0000             		lea	(CollArray1).l,a2
00014B4E 1032 1000                  		move.b	(a2,d1.w),d0
00014B52 4880                       		ext.w	d0
00014B54 BD44                       		eor.w	d6,d4
00014B56 0804 000C                  		btst	#$C,d4
00014B5A 6700                       		beq.s	loc_14A3E
00014B5C 4440                       		neg.w	d0
00014B5E                            
00014B5E                            loc_14A3E:
00014B5E 4A40                       		tst.w	d0
00014B60 679C                       		beq.s	loc_149DE
00014B62 6B00                       		bmi.s	loc_14A5A
00014B64 0C00 0010                  		cmpi.b	#$10,d0
00014B68 6700                       		beq.s	loc_14A66
00014B6A 3202                       		move.w	d2,d1
00014B6C 0241 000F                  		andi.w	#$F,d1
00014B70 D041                       		add.w	d1,d0
00014B72 323C 000F                  		move.w	#$F,d1
00014B76 9240                       		sub.w	d0,d1
00014B78 4E75                       		rts	
00014B7A                            ; ===========================================================================
00014B7A                            
00014B7A                            loc_14A5A:
00014B7A 3202                       		move.w	d2,d1
00014B7C 0241 000F                  		andi.w	#$F,d1
00014B80 D041                       		add.w	d1,d0
00014B82 6A00 FF7A                  		bpl.w	loc_149DE
00014B86                            
00014B86                            loc_14A66:
00014B86 944B                       		sub.w	a3,d2
00014B88 6100 0000                  		bsr.w	FindFloor2
00014B8C D44B                       		add.w	a3,d2
00014B8E 0441 0010                  		subi.w	#$10,d1
00014B92 4E75                       		rts	
00014B94                            ; End of function FindFloor
00014B94                            
00014B94                            
00014B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B94                            
00014B94                            
00014B94                            FindFloor2:				; XREF: FindFloor
00014B94 6100 FEE6                  		bsr.w	Floor_ChkTile
00014B98 3011                       		move.w	(a1),d0
00014B9A 3800                       		move.w	d0,d4
00014B9C 0240 07FF                  		andi.w	#$7FF,d0
00014BA0 6700                       		beq.s	loc_14A86
00014BA2 0B04                       		btst	d5,d4
00014BA4 6600                       		bne.s	loc_14A94
00014BA6                            
00014BA6                            loc_14A86:
00014BA6 323C 000F                  		move.w	#$F,d1
00014BAA 3002                       		move.w	d2,d0
00014BAC 0240 000F                  		andi.w	#$F,d0
00014BB0 9240                       		sub.w	d0,d1
00014BB2 4E75                       		rts	
00014BB4                            ; ===========================================================================
00014BB4                            
00014BB4                            loc_14A94:
00014BB4 2478 F796                  		movea.l	($FFFFF796).w,a2
00014BB8 1032 0000                  		move.b	(a2,d0.w),d0
00014BBC 0240 00FF                  		andi.w	#$FF,d0
00014BC0 67E4                       		beq.s	loc_14A86
00014BC2 45F9 0000 0000             		lea	(AngleMap).l,a2
00014BC8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014BCC E948                       		lsl.w	#4,d0
00014BCE 3203                       		move.w	d3,d1
00014BD0 0804 000B                  		btst	#$B,d4
00014BD4 6700                       		beq.s	loc_14ABA
00014BD6 4641                       		not.w	d1
00014BD8 4414                       		neg.b	(a4)
00014BDA                            
00014BDA                            loc_14ABA:
00014BDA 0804 000C                  		btst	#$C,d4
00014BDE 6700                       		beq.s	loc_14ACA
00014BE0 0614 0040                  		addi.b	#$40,(a4)
00014BE4 4414                       		neg.b	(a4)
00014BE6 0414 0040                  		subi.b	#$40,(a4)
00014BEA                            
00014BEA                            loc_14ACA:
00014BEA 0241 000F                  		andi.w	#$F,d1
00014BEE D240                       		add.w	d0,d1
00014BF0 45F9 0000 0000             		lea	(CollArray1).l,a2
00014BF6 1032 1000                  		move.b	(a2,d1.w),d0
00014BFA 4880                       		ext.w	d0
00014BFC BD44                       		eor.w	d6,d4
00014BFE 0804 000C                  		btst	#$C,d4
00014C02 6700                       		beq.s	loc_14AE6
00014C04 4440                       		neg.w	d0
00014C06                            
00014C06                            loc_14AE6:
00014C06 4A40                       		tst.w	d0
00014C08 679C                       		beq.s	loc_14A86
00014C0A 6B00                       		bmi.s	loc_14AFC
00014C0C 3202                       		move.w	d2,d1
00014C0E 0241 000F                  		andi.w	#$F,d1
00014C12 D041                       		add.w	d1,d0
00014C14 323C 000F                  		move.w	#$F,d1
00014C18 9240                       		sub.w	d0,d1
00014C1A 4E75                       		rts	
00014C1C                            ; ===========================================================================
00014C1C                            
00014C1C                            loc_14AFC:
00014C1C 3202                       		move.w	d2,d1
00014C1E 0241 000F                  		andi.w	#$F,d1
00014C22 D041                       		add.w	d1,d0
00014C24 6A00 FF80                  		bpl.w	loc_14A86
00014C28 4641                       		not.w	d1
00014C2A 4E75                       		rts	
00014C2C                            ; End of function FindFloor2
00014C2C                            
00014C2C                            
00014C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C2C                            
00014C2C                            
00014C2C                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014C2C 6100 FE4E                  		bsr.w	Floor_ChkTile
00014C30 3011                       		move.w	(a1),d0
00014C32 3800                       		move.w	d0,d4
00014C34 0240 07FF                  		andi.w	#$7FF,d0
00014C38 6700                       		beq.s	loc_14B1E
00014C3A 0B04                       		btst	d5,d4
00014C3C 6600                       		bne.s	loc_14B2C
00014C3E                            
00014C3E                            loc_14B1E:
00014C3E D64B                       		add.w	a3,d3
00014C40 6100 0000                  		bsr.w	FindWall2
00014C44 964B                       		sub.w	a3,d3
00014C46 0641 0010                  		addi.w	#$10,d1
00014C4A 4E75                       		rts	
00014C4C                            ; ===========================================================================
00014C4C                            
00014C4C                            loc_14B2C:
00014C4C 2478 F796                  		movea.l	($FFFFF796).w,a2
00014C50 1032 0000                  		move.b	(a2,d0.w),d0
00014C54 0240 00FF                  		andi.w	#$FF,d0
00014C58 67E4                       		beq.s	loc_14B1E
00014C5A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014C60 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014C64 E948                       		lsl.w	#4,d0
00014C66 3202                       		move.w	d2,d1
00014C68 0804 000C                  		btst	#$C,d4
00014C6C 6700                       		beq.s	loc_14B5A
00014C6E 4641                       		not.w	d1
00014C70 0614 0040                  		addi.b	#$40,(a4)
00014C74 4414                       		neg.b	(a4)
00014C76 0414 0040                  		subi.b	#$40,(a4)
00014C7A                            
00014C7A                            loc_14B5A:
00014C7A 0804 000B                  		btst	#$B,d4
00014C7E 6700                       		beq.s	loc_14B62
00014C80 4414                       		neg.b	(a4)
00014C82                            
00014C82                            loc_14B62:
00014C82 0241 000F                  		andi.w	#$F,d1
00014C86 D240                       		add.w	d0,d1
00014C88 45F9 0000 0000             		lea	(CollArray2).l,a2
00014C8E 1032 1000                  		move.b	(a2,d1.w),d0
00014C92 4880                       		ext.w	d0
00014C94 BD44                       		eor.w	d6,d4
00014C96 0804 000B                  		btst	#$B,d4
00014C9A 6700                       		beq.s	loc_14B7E
00014C9C 4440                       		neg.w	d0
00014C9E                            
00014C9E                            loc_14B7E:
00014C9E 4A40                       		tst.w	d0
00014CA0 679C                       		beq.s	loc_14B1E
00014CA2 6B00                       		bmi.s	loc_14B9A
00014CA4 0C00 0010                  		cmpi.b	#$10,d0
00014CA8 6700                       		beq.s	loc_14BA6
00014CAA 3203                       		move.w	d3,d1
00014CAC 0241 000F                  		andi.w	#$F,d1
00014CB0 D041                       		add.w	d1,d0
00014CB2 323C 000F                  		move.w	#$F,d1
00014CB6 9240                       		sub.w	d0,d1
00014CB8 4E75                       		rts	
00014CBA                            ; ===========================================================================
00014CBA                            
00014CBA                            loc_14B9A:
00014CBA 3203                       		move.w	d3,d1
00014CBC 0241 000F                  		andi.w	#$F,d1
00014CC0 D041                       		add.w	d1,d0
00014CC2 6A00 FF7A                  		bpl.w	loc_14B1E
00014CC6                            
00014CC6                            loc_14BA6:
00014CC6 964B                       		sub.w	a3,d3
00014CC8 6100 0000                  		bsr.w	FindWall2
00014CCC D64B                       		add.w	a3,d3
00014CCE 0441 0010                  		subi.w	#$10,d1
00014CD2 4E75                       		rts	
00014CD4                            ; End of function FindWall
00014CD4                            
00014CD4                            
00014CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CD4                            
00014CD4                            
00014CD4                            FindWall2:				; XREF: FindWall
00014CD4 6100 FDA6                  		bsr.w	Floor_ChkTile
00014CD8 3011                       		move.w	(a1),d0
00014CDA 3800                       		move.w	d0,d4
00014CDC 0240 07FF                  		andi.w	#$7FF,d0
00014CE0 6700                       		beq.s	loc_14BC6
00014CE2 0B04                       		btst	d5,d4
00014CE4 6600                       		bne.s	loc_14BD4
00014CE6                            
00014CE6                            loc_14BC6:
00014CE6 323C 000F                  		move.w	#$F,d1
00014CEA 3003                       		move.w	d3,d0
00014CEC 0240 000F                  		andi.w	#$F,d0
00014CF0 9240                       		sub.w	d0,d1
00014CF2 4E75                       		rts	
00014CF4                            ; ===========================================================================
00014CF4                            
00014CF4                            loc_14BD4:
00014CF4 2478 F796                  		movea.l	($FFFFF796).w,a2
00014CF8 1032 0000                  		move.b	(a2,d0.w),d0
00014CFC 0240 00FF                  		andi.w	#$FF,d0
00014D00 67E4                       		beq.s	loc_14BC6
00014D02 45F9 0000 0000             		lea	(AngleMap).l,a2
00014D08 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014D0C E948                       		lsl.w	#4,d0
00014D0E 3202                       		move.w	d2,d1
00014D10 0804 000C                  		btst	#$C,d4
00014D14 6700                       		beq.s	loc_14C02
00014D16 4641                       		not.w	d1
00014D18 0614 0040                  		addi.b	#$40,(a4)
00014D1C 4414                       		neg.b	(a4)
00014D1E 0414 0040                  		subi.b	#$40,(a4)
00014D22                            
00014D22                            loc_14C02:
00014D22 0804 000B                  		btst	#$B,d4
00014D26 6700                       		beq.s	loc_14C0A
00014D28 4414                       		neg.b	(a4)
00014D2A                            
00014D2A                            loc_14C0A:
00014D2A 0241 000F                  		andi.w	#$F,d1
00014D2E D240                       		add.w	d0,d1
00014D30 45F9 0000 0000             		lea	(CollArray2).l,a2
00014D36 1032 1000                  		move.b	(a2,d1.w),d0
00014D3A 4880                       		ext.w	d0
00014D3C BD44                       		eor.w	d6,d4
00014D3E 0804 000B                  		btst	#$B,d4
00014D42 6700                       		beq.s	loc_14C26
00014D44 4440                       		neg.w	d0
00014D46                            
00014D46                            loc_14C26:
00014D46 4A40                       		tst.w	d0
00014D48 679C                       		beq.s	loc_14BC6
00014D4A 6B00                       		bmi.s	loc_14C3C
00014D4C 3203                       		move.w	d3,d1
00014D4E 0241 000F                  		andi.w	#$F,d1
00014D52 D041                       		add.w	d1,d0
00014D54 323C 000F                  		move.w	#$F,d1
00014D58 9240                       		sub.w	d0,d1
00014D5A 4E75                       		rts	
00014D5C                            ; ===========================================================================
00014D5C                            
00014D5C                            loc_14C3C:
00014D5C 3203                       		move.w	d3,d1
00014D5E 0241 000F                  		andi.w	#$F,d1
00014D62 D041                       		add.w	d1,d0
00014D64 6A00 FF80                  		bpl.w	loc_14BC6
00014D68 4641                       		not.w	d1
00014D6A 4E75                       		rts	
00014D6C                            ; End of function FindWall2
00014D6C                            
00014D6C                            ; ---------------------------------------------------------------------------
00014D6C                            ; Unused floor/wall subroutine - logs something	to do with collision
00014D6C                            ; ---------------------------------------------------------------------------
00014D6C                            
00014D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D6C                            
00014D6C                            
00014D6C                            FloorLog_Unk:				; XREF: Level
00014D6C 4E75                       		rts	
00014D6E                            
00014D6E 43F9 0000 0000             		lea	(CollArray1).l,a1
00014D74 45F9 0000 0000             		lea	(CollArray1).l,a2
00014D7A 363C 00FF                  		move.w	#$FF,d3
00014D7E                            
00014D7E                            loc_14C5E:
00014D7E 7A10                       		moveq	#$10,d5
00014D80 343C 000F                  		move.w	#$F,d2
00014D84                            
00014D84                            loc_14C64:
00014D84 7800                       		moveq	#0,d4
00014D86 323C 000F                  		move.w	#$F,d1
00014D8A                            
00014D8A                            loc_14C6A:
00014D8A 3019                       		move.w	(a1)+,d0
00014D8C EAA8                       		lsr.l	d5,d0
00014D8E D944                       		addx.w	d4,d4
00014D90 51C9 FFF8                  		dbf	d1,loc_14C6A
00014D94                            
00014D94 34C4                       		move.w	d4,(a2)+
00014D96 92FC 0020                  		suba.w	#$20,a1
00014D9A 5345                       		subq.w	#1,d5
00014D9C 51CA FFE6                  		dbf	d2,loc_14C64
00014DA0                            
00014DA0 D2FC 0020                  		adda.w	#$20,a1
00014DA4 51CB FFD8                  		dbf	d3,loc_14C5E
00014DA8                            
00014DA8 43F9 0000 0000             		lea	(CollArray1).l,a1
00014DAE 45F9 0000 0000             		lea	(CollArray2).l,a2
00014DB4 6100                       		bsr.s	FloorLog_Unk2
00014DB6 43F9 0000 0000             		lea	(CollArray1).l,a1
00014DBC 45F9 0000 0000             		lea	(CollArray1).l,a2
00014DC2                            
00014DC2                            ; End of function FloorLog_Unk
00014DC2                            
00014DC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC2                            
00014DC2                            
00014DC2                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014DC2 363C 0FFF                  		move.w	#$FFF,d3
00014DC6                            
00014DC6                            loc_14CA6:
00014DC6 7400                       		moveq	#0,d2
00014DC8 323C 000F                  		move.w	#$F,d1
00014DCC 3019                       		move.w	(a1)+,d0
00014DCE 6700                       		beq.s	loc_14CD4
00014DD0 6B00                       		bmi.s	loc_14CBE
00014DD2                            
00014DD2                            loc_14CB2:
00014DD2 E248                       		lsr.w	#1,d0
00014DD4 6400                       		bcc.s	loc_14CB8
00014DD6 5202                       		addq.b	#1,d2
00014DD8                            
00014DD8                            loc_14CB8:
00014DD8 51C9 FFF8                  		dbf	d1,loc_14CB2
00014DDC                            
00014DDC 6000                       		bra.s	loc_14CD6
00014DDE                            ; ===========================================================================
00014DDE                            
00014DDE                            loc_14CBE:
00014DDE 0C40 FFFF                  		cmpi.w	#-1,d0
00014DE2 6700                       		beq.s	loc_14CD0
00014DE4                            
00014DE4                            loc_14CC4:
00014DE4 E348                       		lsl.w	#1,d0
00014DE6 6400                       		bcc.s	loc_14CCA
00014DE8 5302                       		subq.b	#1,d2
00014DEA                            
00014DEA                            loc_14CCA:
00014DEA 51C9 FFF8                  		dbf	d1,loc_14CC4
00014DEE                            
00014DEE 6000                       		bra.s	loc_14CD6
00014DF0                            ; ===========================================================================
00014DF0                            
00014DF0                            loc_14CD0:
00014DF0 303C 0010                  		move.w	#$10,d0
00014DF4                            
00014DF4                            loc_14CD4:
00014DF4 3400                       		move.w	d0,d2
00014DF6                            
00014DF6                            loc_14CD6:
00014DF6 14C2                       		move.b	d2,(a2)+
00014DF8 51CB FFCC                  		dbf	d3,loc_14CA6
00014DFC                            
00014DFC 4E75                       		rts	
00014DFE                            
00014DFE                            ; End of function FloorLog_Unk2
00014DFE                            
00014DFE                            
00014DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DFE                            
00014DFE                            
00014DFE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014DFE 2628 0008                  		move.l	8(a0),d3
00014E02 2428 000C                  		move.l	$C(a0),d2
00014E06 3228 0010                  		move.w	$10(a0),d1
00014E0A 48C1                       		ext.l	d1
00014E0C E181                       		asl.l	#8,d1
00014E0E D681                       		add.l	d1,d3
00014E10 3228 0012                  		move.w	$12(a0),d1
00014E14 48C1                       		ext.l	d1
00014E16 E181                       		asl.l	#8,d1
00014E18 D481                       		add.l	d1,d2
00014E1A 4842                       		swap	d2
00014E1C 4843                       		swap	d3
00014E1E 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E22 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E26 1200                       		move.b	d0,d1
00014E28 0600 0020                  		addi.b	#$20,d0
00014E2C 6A00                       		bpl.s	loc_14D1A
00014E2E 1001                       		move.b	d1,d0
00014E30 6A00                       		bpl.s	loc_14D14
00014E32 5300                       		subq.b	#1,d0
00014E34                            
00014E34                            loc_14D14:
00014E34 0600 0020                  		addi.b	#$20,d0
00014E38 6000                       		bra.s	loc_14D24
00014E3A                            ; ===========================================================================
00014E3A                            
00014E3A                            loc_14D1A:
00014E3A 1001                       		move.b	d1,d0
00014E3C 6A00                       		bpl.s	loc_14D20
00014E3E 5200                       		addq.b	#1,d0
00014E40                            
00014E40                            loc_14D20:
00014E40 0600 001F                  		addi.b	#$1F,d0
00014E44                            
00014E44                            loc_14D24:
00014E44 0200 00C0                  		andi.b	#$C0,d0
00014E48 6700 0000                  		beq.w	loc_14DF0
00014E4C 0C00 0080                  		cmpi.b	#$80,d0
00014E50 6700 0000                  		beq.w	loc_14F7C
00014E54 0201 0038                  		andi.b	#$38,d1
00014E58 6600                       		bne.s	loc_14D3C
00014E5A 5042                       		addq.w	#8,d2
00014E5C                            
00014E5C                            loc_14D3C:
00014E5C 0C00 0040                  		cmpi.b	#$40,d0
00014E60 6700 0000                  		beq.w	loc_1504A
00014E64 6000 0000                  		bra.w	loc_14EBC
00014E68                            
00014E68                            ; End of function Sonic_WalkSpeed
00014E68                            
00014E68                            
00014E68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E68                            
00014E68                            
00014E68                            sub_14D48:				; XREF: Sonic_Jump
00014E68 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E6C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E70 0600 0020                  		addi.b	#$20,d0
00014E74 0200 00C0                  		andi.b	#$C0,d0
00014E78 0C00 0040                  		cmpi.b	#$40,d0
00014E7C 6700 0000                  		beq.w	loc_14FD6
00014E80 0C00 0080                  		cmpi.b	#$80,d0
00014E84 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014E88 0C00 00C0                  		cmpi.b	#$C0,d0
00014E8C 6700 0000                  		beq.w	sub_14E50
00014E90                            
00014E90                            ; End of function sub_14D48
00014E90                            
00014E90                            ; ---------------------------------------------------------------------------
00014E90                            ; Subroutine to	make Sonic land	on the floor after jumping
00014E90                            ; ---------------------------------------------------------------------------
00014E90                            
00014E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E90                            
00014E90                            
00014E90                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014E90 3428 000C                  		move.w	$C(a0),d2
00014E94 3628 0008                  		move.w	8(a0),d3
00014E98 7000                       		moveq	#0,d0
00014E9A 1028 0016                  		move.b	$16(a0),d0
00014E9E 4880                       		ext.w	d0
00014EA0 D440                       		add.w	d0,d2
00014EA2 1028 0017                  		move.b	$17(a0),d0
00014EA6 4880                       		ext.w	d0
00014EA8 D640                       		add.w	d0,d3
00014EAA 49F8 F768                  		lea	($FFFFF768).w,a4
00014EAE 367C 0010                  		movea.w	#$10,a3
00014EB2 3C3C 0000                  		move.w	#0,d6
00014EB6 7A0D                       		moveq	#$D,d5
00014EB8 6100 FC34                  		bsr.w	FindFloor
00014EBC 3F01                       		move.w	d1,-(sp)
00014EBE 3428 000C                  		move.w	$C(a0),d2
00014EC2 3628 0008                  		move.w	8(a0),d3
00014EC6 7000                       		moveq	#0,d0
00014EC8 1028 0016                  		move.b	$16(a0),d0
00014ECC 4880                       		ext.w	d0
00014ECE D440                       		add.w	d0,d2
00014ED0 1028 0017                  		move.b	$17(a0),d0
00014ED4 4880                       		ext.w	d0
00014ED6 9640                       		sub.w	d0,d3
00014ED8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EDC 367C 0010                  		movea.w	#$10,a3
00014EE0 3C3C 0000                  		move.w	#0,d6
00014EE4 7A0D                       		moveq	#$D,d5
00014EE6 6100 FC06                  		bsr.w	FindFloor
00014EEA 301F                       		move.w	(sp)+,d0
00014EEC 143C 0000                  		move.b	#0,d2
00014EF0                            
00014EF0                            loc_14DD0:
00014EF0 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014EF4 B240                       		cmp.w	d0,d1
00014EF6 6F00                       		ble.s	loc_14DDE
00014EF8 1638 F768                  		move.b	($FFFFF768).w,d3
00014EFC C141                       		exg	d0,d1
00014EFE                            
00014EFE                            loc_14DDE:
00014EFE 0803 0000                  		btst	#0,d3
00014F02 6700                       		beq.s	locret_14DE6
00014F04 1602                       		move.b	d2,d3
00014F06                            
00014F06                            locret_14DE6:
00014F06 4E75                       		rts	
00014F08                            
00014F08                            ; End of function Sonic_HitFloor
00014F08                            
00014F08                            ; ===========================================================================
00014F08 3428 000C                  		move.w	$C(a0),d2
00014F0C 3628 0008                  		move.w	8(a0),d3
00014F10                            
00014F10                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014F10 0642 000A                  		addi.w	#$A,d2
00014F14 49F8 F768                  		lea	($FFFFF768).w,a4
00014F18 367C 0010                  		movea.w	#$10,a3
00014F1C 3C3C 0000                  		move.w	#0,d6
00014F20 7A0E                       		moveq	#$E,d5
00014F22 6100 FBCA                  		bsr.w	FindFloor
00014F26 143C 0000                  		move.b	#0,d2
00014F2A                            
00014F2A                            loc_14E0A:				; XREF: sub_14EB4
00014F2A 1638 F768                  		move.b	($FFFFF768).w,d3
00014F2E 0803 0000                  		btst	#0,d3
00014F32 6700                       		beq.s	locret_14E16
00014F34 1602                       		move.b	d2,d3
00014F36                            
00014F36                            locret_14E16:
00014F36 4E75                       		rts	
00014F38                            
00014F38                            ; ---------------------------------------------------------------------------
00014F38                            ; Subroutine allowing objects to interact with the floor
00014F38                            ; ---------------------------------------------------------------------------
00014F38                            
00014F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F38                            
00014F38                            
00014F38                            ObjHitFloor:
00014F38 3628 0008                  		move.w	8(a0),d3
00014F3C                            
00014F3C                            ; End of function ObjHitFloor
00014F3C                            
00014F3C                            
00014F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F3C                            
00014F3C                            
00014F3C                            ObjHitFloor2:
00014F3C 3428 000C                  		move.w	$C(a0),d2
00014F40 7000                       		moveq	#0,d0
00014F42 1028 0016                  		move.b	$16(a0),d0
00014F46 4880                       		ext.w	d0
00014F48 D440                       		add.w	d0,d2
00014F4A 49F8 F768                  		lea	($FFFFF768).w,a4
00014F4E 18BC 0000                  		move.b	#0,(a4)
00014F52 367C 0010                  		movea.w	#$10,a3
00014F56 3C3C 0000                  		move.w	#0,d6
00014F5A 7A0D                       		moveq	#$D,d5
00014F5C 6100 FB90                  		bsr.w	FindFloor
00014F60 1638 F768                  		move.b	($FFFFF768).w,d3
00014F64 0803 0000                  		btst	#0,d3
00014F68 6700                       		beq.s	locret_14E4E
00014F6A 163C 0000                  		move.b	#0,d3
00014F6E                            
00014F6E                            locret_14E4E:
00014F6E 4E75                       		rts	
00014F70                            ; End of function ObjHitFloor2
00014F70                            
00014F70                            
00014F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F70                            
00014F70                            
00014F70                            sub_14E50:				; XREF: sub_14D48
00014F70 3428 000C                  		move.w	$C(a0),d2
00014F74 3628 0008                  		move.w	8(a0),d3
00014F78 7000                       		moveq	#0,d0
00014F7A 1028 0017                  		move.b	$17(a0),d0
00014F7E 4880                       		ext.w	d0
00014F80 9440                       		sub.w	d0,d2
00014F82 1028 0016                  		move.b	$16(a0),d0
00014F86 4880                       		ext.w	d0
00014F88 D640                       		add.w	d0,d3
00014F8A 49F8 F768                  		lea	($FFFFF768).w,a4
00014F8E 367C 0010                  		movea.w	#$10,a3
00014F92 3C3C 0000                  		move.w	#0,d6
00014F96 7A0E                       		moveq	#$E,d5
00014F98 6100 FC92                  		bsr.w	FindWall
00014F9C 3F01                       		move.w	d1,-(sp)
00014F9E 3428 000C                  		move.w	$C(a0),d2
00014FA2 3628 0008                  		move.w	8(a0),d3
00014FA6 7000                       		moveq	#0,d0
00014FA8 1028 0017                  		move.b	$17(a0),d0
00014FAC 4880                       		ext.w	d0
00014FAE D440                       		add.w	d0,d2
00014FB0 1028 0016                  		move.b	$16(a0),d0
00014FB4 4880                       		ext.w	d0
00014FB6 D640                       		add.w	d0,d3
00014FB8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FBC 367C 0010                  		movea.w	#$10,a3
00014FC0 3C3C 0000                  		move.w	#0,d6
00014FC4 7A0E                       		moveq	#$E,d5
00014FC6 6100 FC64                  		bsr.w	FindWall
00014FCA 301F                       		move.w	(sp)+,d0
00014FCC 143C 00C0                  		move.b	#-$40,d2
00014FD0 6000 FF1E                  		bra.w	loc_14DD0
00014FD4                            
00014FD4                            ; End of function sub_14E50
00014FD4                            
00014FD4                            
00014FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FD4                            
00014FD4                            
00014FD4                            sub_14EB4:				; XREF: Sonic_Floor
00014FD4 3428 000C                  		move.w	$C(a0),d2
00014FD8 3628 0008                  		move.w	8(a0),d3
00014FDC                            
00014FDC                            loc_14EBC:
00014FDC 0643 000A                  		addi.w	#$A,d3
00014FE0 49F8 F768                  		lea	($FFFFF768).w,a4
00014FE4 367C 0010                  		movea.w	#$10,a3
00014FE8 3C3C 0000                  		move.w	#0,d6
00014FEC 7A0E                       		moveq	#$E,d5
00014FEE 6100 FC3C                  		bsr.w	FindWall
00014FF2 143C 00C0                  		move.b	#-$40,d2
00014FF6 6000 FF32                  		bra.w	loc_14E0A
00014FFA                            
00014FFA                            ; End of function sub_14EB4
00014FFA                            
00014FFA                            ; ---------------------------------------------------------------------------
00014FFA                            ; Subroutine to	detect when an object hits a wall to its right
00014FFA                            ; ---------------------------------------------------------------------------
00014FFA                            
00014FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FFA                            
00014FFA                            
00014FFA                            ObjHitWallRight:
00014FFA D668 0008                  		add.w	8(a0),d3
00014FFE 3428 000C                  		move.w	$C(a0),d2
00015002 49F8 F768                  		lea	($FFFFF768).w,a4
00015006 18BC 0000                  		move.b	#0,(a4)
0001500A 367C 0010                  		movea.w	#$10,a3
0001500E 3C3C 0000                  		move.w	#0,d6
00015012 7A0E                       		moveq	#$E,d5
00015014 6100 FC16                  		bsr.w	FindWall
00015018 1638 F768                  		move.b	($FFFFF768).w,d3
0001501C 0803 0000                  		btst	#0,d3
00015020 6700                       		beq.s	locret_14F06
00015022 163C 00C0                  		move.b	#-$40,d3
00015026                            
00015026                            locret_14F06:
00015026 4E75                       		rts	
00015028                            
00015028                            ; End of function ObjHitWallRight
00015028                            
00015028                            ; ---------------------------------------------------------------------------
00015028                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015028                            ; touches them
00015028                            ; ---------------------------------------------------------------------------
00015028                            
00015028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015028                            
00015028                            
00015028                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015028 3428 000C                  		move.w	$C(a0),d2
0001502C 3628 0008                  		move.w	8(a0),d3
00015030 7000                       		moveq	#0,d0
00015032 1028 0016                  		move.b	$16(a0),d0
00015036 4880                       		ext.w	d0
00015038 9440                       		sub.w	d0,d2
0001503A 0A42 000F                  		eori.w	#$F,d2
0001503E 1028 0017                  		move.b	$17(a0),d0
00015042 4880                       		ext.w	d0
00015044 D640                       		add.w	d0,d3
00015046 49F8 F768                  		lea	($FFFFF768).w,a4
0001504A 367C FFF0                  		movea.w	#-$10,a3
0001504E 3C3C 1000                  		move.w	#$1000,d6
00015052 7A0E                       		moveq	#$E,d5
00015054 6100 FA98                  		bsr.w	FindFloor
00015058 3F01                       		move.w	d1,-(sp)
0001505A 3428 000C                  		move.w	$C(a0),d2
0001505E 3628 0008                  		move.w	8(a0),d3
00015062 7000                       		moveq	#0,d0
00015064 1028 0016                  		move.b	$16(a0),d0
00015068 4880                       		ext.w	d0
0001506A 9440                       		sub.w	d0,d2
0001506C 0A42 000F                  		eori.w	#$F,d2
00015070 1028 0017                  		move.b	$17(a0),d0
00015074 4880                       		ext.w	d0
00015076 9640                       		sub.w	d0,d3
00015078 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001507C 367C FFF0                  		movea.w	#-$10,a3
00015080 3C3C 1000                  		move.w	#$1000,d6
00015084 7A0E                       		moveq	#$E,d5
00015086 6100 FA66                  		bsr.w	FindFloor
0001508A 301F                       		move.w	(sp)+,d0
0001508C 143C 0080                  		move.b	#-$80,d2
00015090 6000 FE5E                  		bra.w	loc_14DD0
00015094                            ; End of function Sonic_DontRunOnWalls
00015094                            
00015094                            ; ===========================================================================
00015094 3428 000C                  		move.w	$C(a0),d2
00015098 3628 0008                  		move.w	8(a0),d3
0001509C                            
0001509C                            loc_14F7C:
0001509C 0442 000A                  		subi.w	#$A,d2
000150A0 0A42 000F                  		eori.w	#$F,d2
000150A4 49F8 F768                  		lea	($FFFFF768).w,a4
000150A8 367C FFF0                  		movea.w	#-$10,a3
000150AC 3C3C 1000                  		move.w	#$1000,d6
000150B0 7A0E                       		moveq	#$E,d5
000150B2 6100 FA3A                  		bsr.w	FindFloor
000150B6 143C 0080                  		move.b	#-$80,d2
000150BA 6000 FE6E                  		bra.w	loc_14E0A
000150BE                            
000150BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150BE                            
000150BE                            
000150BE                            ObjHitCeiling:
000150BE 3428 000C                  		move.w	$C(a0),d2
000150C2 3628 0008                  		move.w	8(a0),d3
000150C6 7000                       		moveq	#0,d0
000150C8 1028 0016                  		move.b	$16(a0),d0
000150CC 4880                       		ext.w	d0
000150CE 9440                       		sub.w	d0,d2
000150D0 0A42 000F                  		eori.w	#$F,d2
000150D4 49F8 F768                  		lea	($FFFFF768).w,a4
000150D8 367C FFF0                  		movea.w	#-$10,a3
000150DC 3C3C 1000                  		move.w	#$1000,d6
000150E0 7A0E                       		moveq	#$E,d5
000150E2 6100 FA0A                  		bsr.w	FindFloor
000150E6 1638 F768                  		move.b	($FFFFF768).w,d3
000150EA 0803 0000                  		btst	#0,d3
000150EE 6700                       		beq.s	locret_14FD4
000150F0 163C 0080                  		move.b	#-$80,d3
000150F4                            
000150F4                            locret_14FD4:
000150F4 4E75                       		rts	
000150F6                            ; End of function ObjHitCeiling
000150F6                            
000150F6                            ; ===========================================================================
000150F6                            
000150F6                            loc_14FD6:				; XREF: sub_14D48
000150F6 3428 000C                  		move.w	$C(a0),d2
000150FA 3628 0008                  		move.w	8(a0),d3
000150FE 7000                       		moveq	#0,d0
00015100 1028 0017                  		move.b	$17(a0),d0
00015104 4880                       		ext.w	d0
00015106 9440                       		sub.w	d0,d2
00015108 1028 0016                  		move.b	$16(a0),d0
0001510C 4880                       		ext.w	d0
0001510E 9640                       		sub.w	d0,d3
00015110 0A43 000F                  		eori.w	#$F,d3
00015114 49F8 F768                  		lea	($FFFFF768).w,a4
00015118 367C FFF0                  		movea.w	#-$10,a3
0001511C 3C3C 0800                  		move.w	#$800,d6
00015120 7A0E                       		moveq	#$E,d5
00015122 6100 FB08                  		bsr.w	FindWall
00015126 3F01                       		move.w	d1,-(sp)
00015128 3428 000C                  		move.w	$C(a0),d2
0001512C 3628 0008                  		move.w	8(a0),d3
00015130 7000                       		moveq	#0,d0
00015132 1028 0017                  		move.b	$17(a0),d0
00015136 4880                       		ext.w	d0
00015138 D440                       		add.w	d0,d2
0001513A 1028 0016                  		move.b	$16(a0),d0
0001513E 4880                       		ext.w	d0
00015140 9640                       		sub.w	d0,d3
00015142 0A43 000F                  		eori.w	#$F,d3
00015146 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001514A 367C FFF0                  		movea.w	#-$10,a3
0001514E 3C3C 0800                  		move.w	#$800,d6
00015152 7A0E                       		moveq	#$E,d5
00015154 6100 FAD6                  		bsr.w	FindWall
00015158 301F                       		move.w	(sp)+,d0
0001515A 143C 0040                  		move.b	#$40,d2
0001515E 6000 FD90                  		bra.w	loc_14DD0
00015162                            
00015162                            ; ---------------------------------------------------------------------------
00015162                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015162                            ; ---------------------------------------------------------------------------
00015162                            
00015162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015162                            
00015162                            
00015162                            Sonic_HitWall:				; XREF: Sonic_Floor
00015162 3428 000C                  		move.w	$C(a0),d2
00015166 3628 0008                  		move.w	8(a0),d3
0001516A                            
0001516A                            loc_1504A:
0001516A 0443 000A                  		subi.w	#$A,d3
0001516E 0A43 000F                  		eori.w	#$F,d3
00015172 49F8 F768                  		lea	($FFFFF768).w,a4
00015176 367C FFF0                  		movea.w	#-$10,a3
0001517A 3C3C 0800                  		move.w	#$800,d6
0001517E 7A0E                       		moveq	#$E,d5
00015180 6100 FAAA                  		bsr.w	FindWall
00015184 143C 0040                  		move.b	#$40,d2
00015188 6000 FDA0                  		bra.w	loc_14E0A
0001518C                            ; End of function Sonic_HitWall
0001518C                            
0001518C                            ; ---------------------------------------------------------------------------
0001518C                            ; Subroutine to	detect when an object hits a wall to its left
0001518C                            ; ---------------------------------------------------------------------------
0001518C                            
0001518C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001518C                            
0001518C                            
0001518C                            ObjHitWallLeft:
0001518C D668 0008                  		add.w	8(a0),d3
00015190 3428 000C                  		move.w	$C(a0),d2
00015194 49F8 F768                  		lea	($FFFFF768).w,a4
00015198 18BC 0000                  		move.b	#0,(a4)
0001519C 367C FFF0                  		movea.w	#-$10,a3
000151A0 3C3C 0800                  		move.w	#$800,d6
000151A4 7A0E                       		moveq	#$E,d5
000151A6 6100 FA84                  		bsr.w	FindWall
000151AA 1638 F768                  		move.b	($FFFFF768).w,d3
000151AE 0803 0000                  		btst	#0,d3
000151B2 6700                       		beq.s	locret_15098
000151B4 163C 0040                  		move.b	#$40,d3
000151B8                            
000151B8                            locret_15098:
000151B8 4E75                       		rts	
000151BA                            ; End of function ObjHitWallLeft
000151BA                            
000151BA                            ; ===========================================================================
000151BA                            ; ---------------------------------------------------------------------------
000151BA                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000151BA                            ; ---------------------------------------------------------------------------
000151BA                            
000151BA                            Obj66:					; XREF: Obj_Index
000151BA 7000                       		moveq	#0,d0
000151BC 1028 0024                  		move.b	$24(a0),d0
000151C0 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000151C4 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000151C8                            ; ===========================================================================
000151C8 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000151CA 0000                       		dc.w Obj66_Action-Obj66_Index
000151CC 0000                       		dc.w Obj66_Display-Obj66_Index
000151CE 0000                       		dc.w Obj66_Release-Obj66_Index
000151D0                            ; ===========================================================================
000151D0                            
000151D0                            Obj66_Main:				; XREF: Obj66_Index
000151D0 5428 0024                  		addq.b	#2,$24(a0)
000151D4 323C 0001                  		move.w	#1,d1
000151D8 2248                       		movea.l	a0,a1
000151DA 6000                       		bra.s	Obj66_MakeItem
000151DC                            ; ===========================================================================
000151DC                            
000151DC                            Obj66_Loop:
000151DC 6100 89E4                  		bsr.w	SingleObjLoad
000151E0 6600                       		bne.s	loc_150FE
000151E2 12BC 0066                  		move.b	#$66,0(a1)
000151E6 5829 0024                  		addq.b	#4,$24(a1)
000151EA 3368 0008 0008             		move.w	8(a0),8(a1)
000151F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000151F6 137C 0003 0018             		move.b	#3,$18(a1)
000151FC 137C 0010 001A             		move.b	#$10,$1A(a1)
00015202                            
00015202                            Obj66_MakeItem:				; XREF: Obj66_Main
00015202 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001520A 337C 4348 0002             		move.w	#$4348,2(a1)
00015210 0029 0004 0001             		ori.b	#4,1(a1)
00015216 137C 0038 0019             		move.b	#$38,$19(a1)
0001521C                            
0001521C                            loc_150FE:
0001521C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015220                            
00015220 117C 0030 0019             		move.b	#$30,$19(a0)
00015226 117C 0004 0018             		move.b	#4,$18(a0)
0001522C 317C 003C 0030             		move.w	#$3C,$30(a0)
00015232 117C 0001 0034             		move.b	#1,$34(a0)
00015238 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001523E                            
0001523E                            Obj66_Action:				; XREF: Obj66_Index
0001523E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015242 4A28 0001                  		tst.b	1(a0)
00015246 6A00 0000                  		bpl.w	Obj66_Display
0001524A 323C 0030                  		move.w	#$30,d1
0001524E 3401                       		move.w	d1,d2
00015250 3602                       		move.w	d2,d3
00015252 5243                       		addq.w	#1,d3
00015254 3828 0008                  		move.w	8(a0),d4
00015258 6100 A8B2                  		bsr.w	SolidObject
0001525C 0828 0005 0022             		btst	#5,$22(a0)
00015262 6700 0000                  		beq.w	Obj66_Display
00015266 43F8 D000                  		lea	($FFFFD000).w,a1
0001526A 720E                       		moveq	#$E,d1
0001526C 3029 0008                  		move.w	8(a1),d0
00015270 B068 0008                  		cmp.w	8(a0),d0
00015274 6500                       		bcs.s	Obj66_GrabSonic
00015276 7207                       		moveq	#7,d1
00015278                            
00015278                            Obj66_GrabSonic:
00015278 B228 001A                  		cmp.b	$1A(a0),d1
0001527C 6600                       		bne.s	Obj66_Display
0001527E 1141 0032                  		move.b	d1,$32(a0)
00015282 5828 0024                  		addq.b	#4,$24(a0)
00015286 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001528C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015292 337C 0800 0014             		move.w	#$800,$14(a1)
00015298 337C 0000 0010             		move.w	#0,$10(a1)
0001529E 337C 0000 0012             		move.w	#0,$12(a1)
000152A4 08A8 0005 0022             		bclr	#5,$22(a0)
000152AA 08A9 0005 0022             		bclr	#5,$22(a1)
000152B0 08E9 0001 0022             		bset	#1,$22(a1)
000152B6 3429 0008                  		move.w	8(a1),d2
000152BA 3629 000C                  		move.w	$C(a1),d3
000152BE 6100 0000                  		bsr.w	Obj66_ChgPos
000152C2 D569 0008                  		add.w	d2,8(a1)
000152C6 D769 000C                  		add.w	d3,$C(a1)
000152CA E0E9 0008                  		asr	8(a1)
000152CE E0E9 000C                  		asr	$C(a1)
000152D2                            
000152D2                            Obj66_Display:				; XREF: Obj66_Index
000152D2 6000 A510                  		bra.w	MarkObjGone
000152D6                            ; ===========================================================================
000152D6                            
000152D6                            Obj66_Release:				; XREF: Obj66_Index
000152D6 1028 001A                  		move.b	$1A(a0),d0
000152DA 0C00 0004                  		cmpi.b	#4,d0
000152DE 6700                       		beq.s	loc_151C8
000152E0 0C00 0007                  		cmpi.b	#7,d0
000152E4 6600                       		bne.s	loc_151F8
000152E6                            
000152E6                            loc_151C8:
000152E6 B028 0032                  		cmp.b	$32(a0),d0
000152EA 6700                       		beq.s	loc_151F8
000152EC 43F8 D000                  		lea	($FFFFD000).w,a1
000152F0 337C 0000 0010             		move.w	#0,$10(a1)
000152F6 337C 0800 0012             		move.w	#$800,$12(a1)
000152FC 0C00 0004                  		cmpi.b	#4,d0
00015300 6700                       		beq.s	loc_151F0
00015302 337C 0800 0010             		move.w	#$800,$10(a1)
00015308 337C 0800 0012             		move.w	#$800,$12(a1)
0001530E                            
0001530E                            loc_151F0:
0001530E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015312 5928 0024                  		subq.b	#4,$24(a0)
00015316                            
00015316                            loc_151F8:
00015316 6100                       		bsr.s	Obj66_ChkSwitch
00015318 6100                       		bsr.s	Obj66_ChgPos
0001531A 6000 A4C8                  		bra.w	MarkObjGone
0001531E                            
0001531E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001531E                            
0001531E                            
0001531E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001531E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015322 7000                       		moveq	#0,d0
00015324 1028 0038                  		move.b	$38(a0),d0
00015328 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001532E 6700                       		beq.s	loc_15224	; if not, branch
00015330 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015334 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015336 4428 0034                  		neg.b	$34(a0)
0001533A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015340 6000                       		bra.s	Obj66_Animate
00015342                            ; ===========================================================================
00015342                            
00015342                            loc_15224:
00015342 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015346                            
00015346                            Obj66_Animate:
00015346 5328 001E                  		subq.b	#1,$1E(a0)
0001534A 6A00                       		bpl.s	locret_15246
0001534C 117C 0007 001E             		move.b	#7,$1E(a0)
00015352 1228 0034                  		move.b	$34(a0),d1
00015356 1028 001A                  		move.b	$1A(a0),d0
0001535A D001                       		add.b	d1,d0
0001535C 0200 000F                  		andi.b	#$F,d0
00015360 1140 001A                  		move.b	d0,$1A(a0)
00015364                            
00015364                            locret_15246:
00015364 4E75                       		rts	
00015366                            ; End of function Obj66_ChkSwitch
00015366                            
00015366                            
00015366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015366                            
00015366                            
00015366                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015366 43F8 D000                  		lea	($FFFFD000).w,a1
0001536A 7000                       		moveq	#0,d0
0001536C 1028 001A                  		move.b	$1A(a0),d0
00015370 D040                       		add.w	d0,d0
00015372 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015376 101A                       		move.b	(a2)+,d0
00015378 4880                       		ext.w	d0
0001537A D068 0008                  		add.w	8(a0),d0
0001537E 3340 0008                  		move.w	d0,8(a1)
00015382 101A                       		move.b	(a2)+,d0
00015384 4880                       		ext.w	d0
00015386 D068 000C                  		add.w	$C(a0),d0
0001538A 3340 000C                  		move.w	d0,$C(a1)
0001538E 4E75                       		rts	
00015390                            ; End of function Obj66_ChgPos
00015390                            
00015390                            ; ===========================================================================
00015390 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015394 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015398 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001539C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000153A0 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000153A4 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000153A8 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000153AC E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            Map_obj66:
000153B0                            	include "_maps\obj66.asm"
000153B0                            ; ---------------------------------------------------------------------------
000153B0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000153B0                            ; ---------------------------------------------------------------------------
000153B0 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000153B4 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000153B8 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000153BC 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000153C0 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000153C4 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000153C8 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000153CC 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000153D0 0000                       		dc.w byte_154A4-Map_obj66
000153D2 06                         byte_152B4:	dc.b 6
000153D3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000153D8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000153DD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000153E2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000153E7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000153EC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000153F1 06                         byte_152D3:	dc.b 6
000153F2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000153F7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000153FC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015401 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015406 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001540B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015410 06                         byte_152F2:	dc.b 6
00015411 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015416 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001541B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015420 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015425 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001542A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001542F 06                         byte_15311:	dc.b 6
00015430 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015435 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001543A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001543F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015444 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015449 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001544E 06                         byte_15330:	dc.b 6
0001544F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015454 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015459 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001545E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015463 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015468 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001546D 06                         byte_1534F:	dc.b 6
0001546E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015473 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015478 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001547D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015482 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015487 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001548C 06                         byte_1536E:	dc.b 6
0001548D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015492 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015497 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001549C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000154A1 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000154A6 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000154AB 06                         byte_1538D:	dc.b 6
000154AC 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000154B1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000154B6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000154BB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000154C0 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000154C5 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000154CA 06                         byte_153AC:	dc.b 6
000154CB E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000154D0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000154D5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000154DA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000154DF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000154E4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000154E9 06                         byte_153CB:	dc.b 6
000154EA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000154EF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000154F4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000154F9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000154FE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015503 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015508 06                         byte_153EA:	dc.b 6
00015509 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001550E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015513 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015518 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001551D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015522 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015527 06                         byte_15409:	dc.b 6
00015528 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001552D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015532 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015537 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001553C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015541 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015546 06                         byte_15428:	dc.b 6
00015547 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001554C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015551 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015556 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001555B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015560 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015565 06                         byte_15447:	dc.b 6
00015566 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001556B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015570 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015575 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001557A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001557F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015584 06                         byte_15466:	dc.b 6
00015585 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001558A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001558F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015594 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015599 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001559E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000155A3 06                         byte_15485:	dc.b 6
000155A4 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000155A9 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000155AE DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000155B3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000155B8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000155BD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000155C2 0C                         byte_154A4:	dc.b $C
000155C3 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000155C8 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000155CD E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000155D2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000155D7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000155DC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000155E1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000155E6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000155EB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000155F0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000155F5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000155FA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015600 00                         		even
00015600 00                         		even
00015600                            
00015600                            ; ===========================================================================
00015600                            ; ---------------------------------------------------------------------------
00015600                            ; Object 67 - disc that	you run	around (SBZ)
00015600                            ; ---------------------------------------------------------------------------
00015600                            
00015600                            Obj67:					; XREF: Obj_Index
00015600 7000                       		moveq	#0,d0
00015602 1028 0024                  		move.b	$24(a0),d0
00015606 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001560A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001560E                            ; ===========================================================================
0001560E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015610 0000                       		dc.w Obj67_Action-Obj67_Index
00015612                            ; ===========================================================================
00015612                            
00015612                            Obj67_Main:				; XREF: Obj67_Index
00015612 5428 0024                  		addq.b	#2,$24(a0)
00015616 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001561E 317C C344 0002             		move.w	#$C344,2(a0)
00015624 117C 0004 0001             		move.b	#4,1(a0)
0001562A 117C 0004 0018             		move.b	#4,$18(a0)
00015630 117C 0008 0019             		move.b	#8,$19(a0)
00015636 3168 0008 0032             		move.w	8(a0),$32(a0)
0001563C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015642 117C 0018 0034             		move.b	#$18,$34(a0)
00015648 117C 0048 0038             		move.b	#$48,$38(a0)
0001564E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015652 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015656 6700                       		beq.s	loc_15546
00015658 117C 0010 0034             		move.b	#$10,$34(a0)
0001565E 117C 0038 0038             		move.b	#$38,$38(a0)
00015664                            
00015664                            loc_15546:
00015664 1228 0028                  		move.b	$28(a0),d1	; get object type
00015668 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001566C 4881                       		ext.w	d1
0001566E E741                       		asl.w	#3,d1
00015670 3141 0036                  		move.w	d1,$36(a0)
00015674 1028 0022                  		move.b	$22(a0),d0
00015678 E418                       		ror.b	#2,d0
0001567A 0200 00C0                  		andi.b	#-$40,d0
0001567E 1140 0026                  		move.b	d0,$26(a0)
00015682                            
00015682                            Obj67_Action:				; XREF: Obj67_Index
00015682 6100 0000                  		bsr.w	Obj67_MoveSonic
00015686 6100 0000                  		bsr.w	Obj67_MoveSpot
0001568A 6000 0000                  		bra.w	Obj67_ChkDel
0001568E                            ; ===========================================================================
0001568E                            
0001568E                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001568E 7400                       		moveq	#0,d2
00015690 1428 0038                  		move.b	$38(a0),d2
00015694 3602                       		move.w	d2,d3
00015696 D643                       		add.w	d3,d3
00015698 43F8 D000                  		lea	($FFFFD000).w,a1
0001569C 3029 0008                  		move.w	8(a1),d0
000156A0 9068 0032                  		sub.w	$32(a0),d0
000156A4 D042                       		add.w	d2,d0
000156A6 B043                       		cmp.w	d3,d0
000156A8 6400                       		bcc.s	loc_155A8
000156AA 3229 000C                  		move.w	$C(a1),d1
000156AE 9268 0030                  		sub.w	$30(a0),d1
000156B2 D242                       		add.w	d2,d1
000156B4 B243                       		cmp.w	d3,d1
000156B6 6400                       		bcc.s	loc_155A8
000156B8 0829 0001 0022             		btst	#1,$22(a1)
000156BE 6700                       		beq.s	loc_155B8
000156C0 4228 003A                  		clr.b	$3A(a0)
000156C4 4E75                       		rts	
000156C6                            ; ===========================================================================
000156C6                            
000156C6                            loc_155A8:
000156C6 4A28 003A                  		tst.b	$3A(a0)
000156CA 6700                       		beq.s	locret_155B6
000156CC 4229 0038                  		clr.b	$38(a1)
000156D0 4228 003A                  		clr.b	$3A(a0)
000156D4                            
000156D4                            locret_155B6:
000156D4 4E75                       		rts	
000156D6                            ; ===========================================================================
000156D6                            
000156D6                            loc_155B8:
000156D6 4A28 003A                  		tst.b	$3A(a0)
000156DA 6600                       		bne.s	loc_155E2
000156DC 117C 0001 003A             		move.b	#1,$3A(a0)
000156E2 0829 0002 0022             		btst	#2,$22(a1)
000156E8 6600                       		bne.s	loc_155D0
000156EA 4229 001C                  		clr.b	$1C(a1)
000156EE                            
000156EE                            loc_155D0:
000156EE 08A9 0005 0022             		bclr	#5,$22(a1)
000156F4 137C 0001 001D             		move.b	#1,$1D(a1)
000156FA 137C 0001 0038             		move.b	#1,$38(a1)
00015700                            
00015700                            loc_155E2:
00015700 3029 0014                  		move.w	$14(a1),d0
00015704 4A68 0036                  		tst.w	$36(a0)
00015708 6A00                       		bpl.s	loc_15608
0001570A 0C40 FC00                  		cmpi.w	#-$400,d0
0001570E 6F00                       		ble.s	loc_155FA
00015710 337C FC00 0014             		move.w	#-$400,$14(a1)
00015716 4E75                       		rts	
00015718                            ; ===========================================================================
00015718                            
00015718                            loc_155FA:
00015718 0C40 F100                  		cmpi.w	#-$F00,d0
0001571C 6C00                       		bge.s	locret_15606
0001571E 337C F100 0014             		move.w	#-$F00,$14(a1)
00015724                            
00015724                            locret_15606:
00015724 4E75                       		rts	
00015726                            ; ===========================================================================
00015726                            
00015726                            loc_15608:
00015726 0C40 0400                  		cmpi.w	#$400,d0
0001572A 6C00                       		bge.s	loc_15616
0001572C 337C 0400 0014             		move.w	#$400,$14(a1)
00015732 4E75                       		rts	
00015734                            ; ===========================================================================
00015734                            
00015734                            loc_15616:
00015734 0C40 0F00                  		cmpi.w	#$F00,d0
00015738 6F00                       		ble.s	locret_15622
0001573A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015740                            
00015740                            locret_15622:
00015740 4E75                       		rts	
00015742                            ; ===========================================================================
00015742                            
00015742                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015742 3028 0036                  		move.w	$36(a0),d0
00015746 D168 0026                  		add.w	d0,$26(a0)
0001574A 1028 0026                  		move.b	$26(a0),d0
0001574E 4EB9 0000 29DA             		jsr	(CalcSine).l
00015754 3428 0030                  		move.w	$30(a0),d2
00015758 3628 0032                  		move.w	$32(a0),d3
0001575C 7800                       		moveq	#0,d4
0001575E 1828 0034                  		move.b	$34(a0),d4
00015762 E14C                       		lsl.w	#8,d4
00015764 2A04                       		move.l	d4,d5
00015766 C9C0                       		muls.w	d0,d4
00015768 4844                       		swap	d4
0001576A CBC1                       		muls.w	d1,d5
0001576C 4845                       		swap	d5
0001576E D842                       		add.w	d2,d4
00015770 DA43                       		add.w	d3,d5
00015772 3144 000C                  		move.w	d4,$C(a0)
00015776 3145 0008                  		move.w	d5,8(a0)
0001577A 4E75                       		rts	
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            Obj67_ChkDel:				; XREF: Obj67_Action
0001577C 3028 0032                  		move.w	$32(a0),d0
00015780 0240 FF80                  		andi.w	#-$80,d0
00015784 3238 F700                  		move.w	($FFFFF700).w,d1
00015788 0441 0080                  		subi.w	#$80,d1
0001578C 0241 FF80                  		andi.w	#-$80,d1
00015790 9041                       		sub.w	d1,d0
00015792 0C40 0280                  		cmpi.w	#$280,d0
00015796 6200                       		bhi.s	Obj67_Delete
00015798 4EF9 0000 D73C             		jmp	DisplaySprite
0001579E                            ; ===========================================================================
0001579E                            
0001579E                            Obj67_Delete:
0001579E 4EF9 0000 D778             		jmp	DeleteObject
000157A4                            ; ===========================================================================
000157A4                            ; ---------------------------------------------------------------------------
000157A4                            ; Sprite mappings - disc that you run around (SBZ)
000157A4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000157A4                            ; part of the level tiles.)
000157A4                            ; ---------------------------------------------------------------------------
000157A4                            Map_obj67:
000157A4                            	include "_maps\obj67.asm"
000157A4                            ; ---------------------------------------------------------------------------
000157A4                            ; Sprite mappings - disc that you run around (SBZ)
000157A4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000157A4                            ; part of the level tiles.)
000157A4                            ; ---------------------------------------------------------------------------
000157A4 0000                       		dc.w byte_15688-Map_obj67
000157A6 01                         byte_15688:	dc.b 1
000157A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000157AC                            		even
000157AC                            		even
000157AC                            
000157AC                            ; ===========================================================================
000157AC                            ; ---------------------------------------------------------------------------
000157AC                            ; Object 68 - conveyor belts (SBZ)
000157AC                            ; ---------------------------------------------------------------------------
000157AC                            
000157AC                            Obj68:					; XREF: Obj_Index
000157AC 7000                       		moveq	#0,d0
000157AE 1028 0024                  		move.b	$24(a0),d0
000157B2 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000157B6 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000157BA                            ; ===========================================================================
000157BA 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000157BC 0000                       		dc.w Obj68_Action-Obj68_Index
000157BE                            ; ===========================================================================
000157BE                            
000157BE                            Obj68_Main:				; XREF: Obj68_Index
000157BE 5428 0024                  		addq.b	#2,$24(a0)
000157C2 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000157C8 1228 0028                  		move.b	$28(a0),d1	; get object type
000157CC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000157D0 6700                       		beq.s	loc_156BA	; if zero, branch
000157D2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000157D8                            
000157D8                            loc_156BA:
000157D8 1228 0028                  		move.b	$28(a0),d1	; get object type
000157DC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000157E0 4881                       		ext.w	d1
000157E2 E841                       		asr.w	#4,d1
000157E4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000157E8                            
000157E8                            Obj68_Action:				; XREF: Obj68_Index
000157E8 6100                       		bsr.s	Obj68_MoveSonic
000157EA 3028 0008                  		move.w	8(a0),d0
000157EE 0240 FF80                  		andi.w	#$FF80,d0
000157F2 3238 F700                  		move.w	($FFFFF700).w,d1
000157F6 0441 0080                  		subi.w	#$80,d1
000157FA 0241 FF80                  		andi.w	#$FF80,d1
000157FE 9041                       		sub.w	d1,d0
00015800 0C40 0280                  		cmpi.w	#$280,d0
00015804 6200                       		bhi.s	Obj68_Delete
00015806 4E75                       		rts	
00015808                            ; ===========================================================================
00015808                            
00015808                            Obj68_Delete:
00015808 4EF9 0000 D778             		jmp	DeleteObject
0001580E                            ; ===========================================================================
0001580E                            
0001580E                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001580E 7400                       		moveq	#0,d2
00015810 1428 0038                  		move.b	$38(a0),d2
00015814 3602                       		move.w	d2,d3
00015816 D643                       		add.w	d3,d3
00015818 43F8 D000                  		lea	($FFFFD000).w,a1
0001581C 3029 0008                  		move.w	8(a1),d0
00015820 9068 0008                  		sub.w	8(a0),d0
00015824 D042                       		add.w	d2,d0
00015826 B043                       		cmp.w	d3,d0
00015828 6400                       		bcc.s	locret_1572E
0001582A 3229 000C                  		move.w	$C(a1),d1
0001582E 9268 000C                  		sub.w	$C(a0),d1
00015832 0641 0030                  		addi.w	#$30,d1
00015836 0C41 0030                  		cmpi.w	#$30,d1
0001583A 6400                       		bcc.s	locret_1572E
0001583C 0829 0001 0022             		btst	#1,$22(a1)
00015842 6600                       		bne.s	locret_1572E
00015844 3028 0036                  		move.w	$36(a0),d0
00015848 D169 0008                  		add.w	d0,8(a1)
0001584C                            
0001584C                            locret_1572E:
0001584C 4E75                       		rts	
0001584E                            
0001584E                            ; ===========================================================================
0001584E                            ; ---------------------------------------------------------------------------
0001584E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001584E                            ; ---------------------------------------------------------------------------
0001584E                            
0001584E                            Obj69:					; XREF: Obj_Index
0001584E 7000                       		moveq	#0,d0
00015850 1028 0024                  		move.b	$24(a0),d0
00015854 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015858 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001585C                            ; ===========================================================================
0001585C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001585E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015860 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015862                            ; ===========================================================================
00015862                            
00015862                            Obj69_Main:				; XREF: Obj69_Index
00015862 5428 0024                  		addq.b	#2,$24(a0)
00015866 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001586E 317C 4492 0002             		move.w	#$4492,2(a0)
00015874 0028 0004 0001             		ori.b	#4,1(a0)
0001587A 117C 0080 0019             		move.b	#$80,$19(a0)
00015880 7000                       		moveq	#0,d0
00015882 1028 0028                  		move.b	$28(a0),d0
00015886 0240 000F                  		andi.w	#$F,d0
0001588A C0FC 003C                  		mulu.w	#$3C,d0
0001588E 3140 0032                  		move.w	d0,$32(a0)
00015892 4A28 0028                  		tst.b	$28(a0)
00015896 6A00                       		bpl.s	Obj69_Trapdoor
00015898 5428 0024                  		addq.b	#2,$24(a0)
0001589C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000158A4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000158AA 117C 0010 0019             		move.b	#$10,$19(a0)
000158B0 117C 0002 001C             		move.b	#2,$1C(a0)
000158B6 7000                       		moveq	#0,d0
000158B8 1028 0028                  		move.b	$28(a0),d0	; get object type
000158BC 3200                       		move.w	d0,d1
000158BE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000158C2 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000158C6 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000158CA 3140 0032                  		move.w	d0,$32(a0)
000158CE 0241 0070                  		andi.w	#$70,d1
000158D2 0641 0010                  		addi.w	#$10,d1
000158D6 E549                       		lsl.w	#2,d1
000158D8 5341                       		subq.w	#1,d1
000158DA 3141 0036                  		move.w	d1,$36(a0)
000158DE 6000                       		bra.s	Obj69_Spinner
000158E0                            ; ===========================================================================
000158E0                            
000158E0                            Obj69_Trapdoor:				; XREF: Obj69_Index
000158E0 5368 0030                  		subq.w	#1,$30(a0)
000158E4 6A00                       		bpl.s	Obj69_Animate
000158E6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000158EC 0868 0000 001C             		bchg	#0,$1C(a0)
000158F2 4A28 0001                  		tst.b	1(a0)
000158F6 6A00                       		bpl.s	Obj69_Animate
000158F8 303C 00BB                  		move.w	#$BB,d0
000158FC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00015902                            
00015902                            Obj69_Animate:
00015902 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015908 4EB9 0000 A7EE             		jsr	AnimateSprite
0001590E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015912 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015914 323C 004B                  		move.w	#$4B,d1
00015918 343C 000C                  		move.w	#$C,d2
0001591C 3602                       		move.w	d2,d3
0001591E 5243                       		addq.w	#1,d3
00015920 3828 0008                  		move.w	8(a0),d4
00015924 6100 A1E6                  		bsr.w	SolidObject
00015928 6000 9EBA                  		bra.w	MarkObjGone
0001592C                            ; ===========================================================================
0001592C                            
0001592C                            Obj69_NotSolid:
0001592C 0828 0003 0022             		btst	#3,$22(a0)
00015932 6700                       		beq.s	Obj69_Display
00015934 43F8 D000                  		lea	($FFFFD000).w,a1
00015938 08A9 0003 0022             		bclr	#3,$22(a1)
0001593E 08A8 0003 0022             		bclr	#3,$22(a0)
00015944 4228 0025                  		clr.b	$25(a0)
00015948                            
00015948                            Obj69_Display:
00015948 6000 9E9A                  		bra.w	MarkObjGone
0001594C                            ; ===========================================================================
0001594C                            
0001594C                            Obj69_Spinner:				; XREF: Obj69_Index
0001594C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015950 C068 0036                  		and.w	$36(a0),d0
00015954 6600                       		bne.s	Obj69_Delay
00015956 117C 0001 0034             		move.b	#1,$34(a0)
0001595C                            
0001595C                            Obj69_Delay:
0001595C 4A28 0034                  		tst.b	$34(a0)
00015960 6700                       		beq.s	Obj69_Animate2
00015962 5368 0030                  		subq.w	#1,$30(a0)
00015966 6A00                       		bpl.s	Obj69_Animate2
00015968 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001596E 4228 0034                  		clr.b	$34(a0)
00015972 0868 0000 001C             		bchg	#0,$1C(a0)
00015978                            
00015978                            Obj69_Animate2:
00015978 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001597E 4EB9 0000 A7EE             		jsr	AnimateSprite
00015984 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015988 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001598A 323C 001B                  		move.w	#$1B,d1
0001598E 343C 0007                  		move.w	#7,d2
00015992 3602                       		move.w	d2,d3
00015994 5243                       		addq.w	#1,d3
00015996 3828 0008                  		move.w	8(a0),d4
0001599A 6100 A170                  		bsr.w	SolidObject
0001599E 6000 9E44                  		bra.w	MarkObjGone
000159A2                            ; ===========================================================================
000159A2                            
000159A2                            Obj69_NotSolid2:
000159A2 0828 0003 0022             		btst	#3,$22(a0)
000159A8 6700                       		beq.s	Obj69_Display2
000159AA 43F8 D000                  		lea	($FFFFD000).w,a1
000159AE 08A9 0003 0022             		bclr	#3,$22(a1)
000159B4 08A8 0003 0022             		bclr	#3,$22(a0)
000159BA 4228 0025                  		clr.b	$25(a0)
000159BE                            
000159BE                            Obj69_Display2:
000159BE 6000 9E24                  		bra.w	MarkObjGone
000159C2                            ; ===========================================================================
000159C2                            Ani_obj69:
000159C2                            	include "_anim\obj69.asm"
000159C2                            ; ---------------------------------------------------------------------------
000159C2                            ; Animation script - trapdoor (SBZ)
000159C2                            ; ---------------------------------------------------------------------------
000159C2 0000                       		dc.w byte_158AC-Ani_obj69
000159C4 0000                       		dc.w byte_158B2-Ani_obj69
000159C6 0000                       		dc.w byte_158B8-Ani_obj69
000159C8 0000                       		dc.w byte_158CC-Ani_obj69
000159CA 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000159D0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000159D6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000159E3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000159EA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000159F7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000159FE                            		even
000159FE                            		even
000159FE                            
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            ; Sprite mappings - trapdoor (SBZ)
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            Map_obj69:
000159FE                            	include "_maps\obj69.asm"
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            ; Sprite mappings - trapdoor (SBZ)
000159FE                            ; ---------------------------------------------------------------------------
000159FE 0000                       		dc.w byte_158E6-Map_obj69
00015A00 0000                       		dc.w byte_158FB-Map_obj69
00015A02 0000                       		dc.w byte_15924-Map_obj69
00015A04 04                         byte_158E6:	dc.b 4
00015A05 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015A0A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015A0F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015A14 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015A19 08                         byte_158FB:	dc.b 8
00015A1A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015A1F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015A24 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015A29 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015A2E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015A33 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015A38 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015A3D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015A42 04                         byte_15924:	dc.b 4
00015A43 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015A48 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015A4D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015A52 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015A58 00                         		even
00015A58 00                         		even
00015A58                            
00015A58                            ; ---------------------------------------------------------------------------
00015A58                            ; Sprite mappings - spinning platforms (SBZ)
00015A58                            ; ---------------------------------------------------------------------------
00015A58                            Map_obj69a:
00015A58                            	include "_maps\obj69a.asm"
00015A58                            ; ---------------------------------------------------------------------------
00015A58                            ; Sprite mappings - spinning platforms (SBZ)
00015A58                            ; ---------------------------------------------------------------------------
00015A58 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015A5C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015A60 0000                       		dc.w byte_15970-Map_obj69a
00015A62 02                         byte_15944:	dc.b 2
00015A63 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015A68 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015A6D 02                         byte_1594F:	dc.b 2
00015A6E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015A73 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015A78 02                         byte_1595A:	dc.b 2
00015A79 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015A7E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015A83 02                         byte_15965:	dc.b 2
00015A84 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015A89 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015A8E 02                         byte_15970:	dc.b 2
00015A8F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015A94 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015A9A 00                         		even
00015A9A 00                         		even
00015A9A                            
00015A9A                            ; ===========================================================================
00015A9A                            ; ---------------------------------------------------------------------------
00015A9A                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015A9A                            ; ---------------------------------------------------------------------------
00015A9A                            
00015A9A                            Obj6A:					; XREF: Obj_Index
00015A9A 7000                       		moveq	#0,d0
00015A9C 1028 0024                  		move.b	$24(a0),d0
00015AA0 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015AA4 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015AA8                            ; ===========================================================================
00015AA8 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015AAA 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015AAC                            ; ===========================================================================
00015AAC                            
00015AAC                            Obj6A_Main:				; XREF: Obj6A_Index
00015AAC 5428 0024                  		addq.b	#2,$24(a0)
00015AB0 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015AB8 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015ABE 117C 0004 0001             		move.b	#4,1(a0)
00015AC4 117C 0004 0018             		move.b	#4,$18(a0)
00015ACA 117C 0020 0019             		move.b	#$20,$19(a0)
00015AD0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015AD6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015ADC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015AE2 6400                       		bcc.s	Obj6A_Action
00015AE4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015AEA                            
00015AEA                            Obj6A_Action:				; XREF: Obj6A_Index
00015AEA 7000                       		moveq	#0,d0
00015AEC 1028 0028                  		move.b	$28(a0),d0
00015AF0 0240 0007                  		andi.w	#7,d0
00015AF4 D040                       		add.w	d0,d0
00015AF6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015AFA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015AFE 3028 003A                  		move.w	$3A(a0),d0
00015B02 0240 FF80                  		andi.w	#$FF80,d0
00015B06 3238 F700                  		move.w	($FFFFF700).w,d1
00015B0A 0441 0080                  		subi.w	#$80,d1
00015B0E 0241 FF80                  		andi.w	#$FF80,d1
00015B12 9041                       		sub.w	d1,d0
00015B14 0C40 0280                  		cmpi.w	#$280,d0
00015B18 6200                       		bhi.s	Obj6A_Delete
00015B1A 4EF9 0000 D73C             		jmp	DisplaySprite
00015B20                            ; ===========================================================================
00015B20                            
00015B20                            Obj6A_Delete:
00015B20 4EF9 0000 D778             		jmp	DeleteObject
00015B26                            ; ===========================================================================
00015B26 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015B2A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015B2E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015B30                            ; ===========================================================================
00015B30                            
00015B30                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015B30 4E75                       		rts	
00015B32                            ; ===========================================================================
00015B32                            
00015B32                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015B32 323C 0060                  		move.w	#$60,d1
00015B36 7000                       		moveq	#0,d0
00015B38 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015B3C 0828 0000 0022             		btst	#0,$22(a0)
00015B42 6700                       		beq.s	Obj6A_Animate01
00015B44 4440                       		neg.w	d0
00015B46 D041                       		add.w	d1,d0
00015B48                            
00015B48                            Obj6A_Animate01:
00015B48 3228 003A                  		move.w	$3A(a0),d1
00015B4C 9240                       		sub.w	d0,d1
00015B4E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015B52 5328 001E                  		subq.b	#1,$1E(a0)
00015B56 6A00                       		bpl.s	loc_15A46
00015B58 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015B5E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015B64                            
00015B64                            loc_15A46:
00015B64 4A28 0001                  		tst.b	1(a0)
00015B68 6A00                       		bpl.s	locret_15A60
00015B6A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015B6E 0240 000F                  		andi.w	#$F,d0
00015B72 6600                       		bne.s	locret_15A60
00015B74 303C 00B0                  		move.w	#$B0,d0
00015B78 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015B7E                            
00015B7E                            locret_15A60:
00015B7E 4E75                       		rts	
00015B80                            ; ===========================================================================
00015B80                            
00015B80                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015B80 323C 0030                  		move.w	#$30,d1
00015B84 7000                       		moveq	#0,d0
00015B86 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015B8A 0828 0000 0022             		btst	#0,$22(a0)
00015B90 6700                       		beq.s	Obj6A_Animate02
00015B92 4440                       		neg.w	d0
00015B94 0640 0080                  		addi.w	#$80,d0
00015B98                            
00015B98                            Obj6A_Animate02:
00015B98 3228 0038                  		move.w	$38(a0),d1
00015B9C 9240                       		sub.w	d0,d1
00015B9E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015BA2 5328 001E                  		subq.b	#1,$1E(a0)
00015BA6 6A00                       		bpl.s	loc_15A96
00015BA8 117C 0002 001E             		move.b	#2,$1E(a0)
00015BAE 0868 0000 001A             		bchg	#0,$1A(a0)
00015BB4                            
00015BB4                            loc_15A96:
00015BB4 4A28 0001                  		tst.b	1(a0)
00015BB8 6A00                       		bpl.s	locret_15AB0
00015BBA 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015BBE 0C00 0018                  		cmpi.b	#$18,d0
00015BC2 6600                       		bne.s	locret_15AB0
00015BC4 303C 00B0                  		move.w	#$B0,d0
00015BC8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015BCE                            
00015BCE                            locret_15AB0:
00015BCE 4E75                       		rts	
00015BD0                            ; ===========================================================================
00015BD0                            
00015BD0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015BD0 4A28 003D                  		tst.b	$3D(a0)
00015BD4 6600                       		bne.s	Obj6A_Animate03
00015BD6 3038 D008                  		move.w	($FFFFD008).w,d0
00015BDA 0440 00C0                  		subi.w	#$C0,d0
00015BDE 6500                       		bcs.s	loc_15B02
00015BE0 9068 0008                  		sub.w	8(a0),d0
00015BE4 6500                       		bcs.s	loc_15B02
00015BE6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015BEA 0440 0080                  		subi.w	#$80,d0
00015BEE B068 000C                  		cmp.w	$C(a0),d0
00015BF2 6400                       		bcc.s	locret_15B04
00015BF4 0640 0100                  		addi.w	#$100,d0
00015BF8 B068 000C                  		cmp.w	$C(a0),d0
00015BFC 6500                       		bcs.s	locret_15B04
00015BFE 117C 0001 003D             		move.b	#1,$3D(a0)
00015C04 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015C0A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015C10 117C 0002 001A             		move.b	#2,$1A(a0)
00015C16 303C 00B0                  		move.w	#$B0,d0
00015C1A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C20                            
00015C20                            loc_15B02:
00015C20 588F                       		addq.l	#4,sp
00015C22                            
00015C22                            locret_15B04:
00015C22 4E75                       		rts	
00015C24                            ; ===========================================================================
00015C24                            
00015C24                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015C24 4EB9 0000 D716             		jsr	SpeedToPos
00015C2A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015C30 5328 001E                  		subq.b	#1,$1E(a0)
00015C34 6A00                       		bpl.s	locret_15B24
00015C36 117C 0002 001E             		move.b	#2,$1E(a0)
00015C3C 0868 0000 001A             		bchg	#0,$1A(a0)
00015C42                            
00015C42                            locret_15B24:
00015C42 4E75                       		rts	
00015C44                            ; ===========================================================================
00015C44                            
00015C44                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015C44 4A28 003D                  		tst.b	$3D(a0)
00015C48 6600                       		bne.s	Obj6A_Animate04
00015C4A 3038 D008                  		move.w	($FFFFD008).w,d0
00015C4E 0640 00E0                  		addi.w	#$E0,d0
00015C52 9068 0008                  		sub.w	8(a0),d0
00015C56 6400                       		bcc.s	loc_15B74
00015C58 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015C5C 0440 0080                  		subi.w	#$80,d0
00015C60 B068 000C                  		cmp.w	$C(a0),d0
00015C64 6400                       		bcc.s	locret_15B76
00015C66 0640 0100                  		addi.w	#$100,d0
00015C6A B068 000C                  		cmp.w	$C(a0),d0
00015C6E 6500                       		bcs.s	locret_15B76
00015C70 117C 0001 003D             		move.b	#1,$3D(a0)
00015C76 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015C7C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015C82 117C 0002 001A             		move.b	#2,$1A(a0)
00015C88 303C 00B0                  		move.w	#$B0,d0
00015C8C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C92                            
00015C92                            loc_15B74:
00015C92 588F                       		addq.l	#4,sp
00015C94                            
00015C94                            locret_15B76:
00015C94 4E75                       		rts	
00015C96                            ; ===========================================================================
00015C96                            
00015C96                            Obj6A_Animate04:
00015C96 4EB9 0000 D716             		jsr	SpeedToPos
00015C9C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015CA2 5328 001E                  		subq.b	#1,$1E(a0)
00015CA6 6A00                       		bpl.s	locret_15B96
00015CA8 117C 0002 001E             		move.b	#2,$1E(a0)
00015CAE 0868 0000 001A             		bchg	#0,$1A(a0)
00015CB4                            
00015CB4                            locret_15B96:
00015CB4 4E75                       		rts	
00015CB6                            ; ===========================================================================
00015CB6                            ; ---------------------------------------------------------------------------
00015CB6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015CB6                            ; ---------------------------------------------------------------------------
00015CB6                            Map_obj6A:
00015CB6                            	include "_maps\obj6A.asm"
00015CB6                            ; ---------------------------------------------------------------------------
00015CB6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015CB6                            ; ---------------------------------------------------------------------------
00015CB6 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015CBA 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015CBE 07                         byte_15BA0:	dc.b 7
00015CBF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015CC4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015CC9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015CCE E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015CD3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015CD8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015CDD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015CE2 07                         byte_15BC4:	dc.b 7
00015CE3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015CE8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015CED E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015CF2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015CF7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015CFC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015D01 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015D06 04                         byte_15BE8:	dc.b 4
00015D07 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015D0C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015D11 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015D16 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015D1B 04                         byte_15BFD:	dc.b 4
00015D1C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015D21 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015D26 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015D2B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015D30                            		even
00015D30                            		even
00015D30                            
00015D30                            ; ===========================================================================
00015D30                            ; ---------------------------------------------------------------------------
00015D30                            ; Object 6B - stomper (SBZ)
00015D30                            ; ---------------------------------------------------------------------------
00015D30                            
00015D30                            Obj6B:					; XREF: Obj_Index
00015D30 7000                       		moveq	#0,d0
00015D32 1028 0024                  		move.b	$24(a0),d0
00015D36 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015D3A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015D3E                            ; ===========================================================================
00015D3E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015D40 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015D42                            
00015D42 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015D46 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015D4A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015D4E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015D52 8040 0005                  		dc.b  $80, $40,	  0,   5
00015D56                            ; ===========================================================================
00015D56                            
00015D56                            Obj6B_Main:				; XREF: Obj6B_Index
00015D56 5428 0024                  		addq.b	#2,$24(a0)
00015D5A 7000                       		moveq	#0,d0
00015D5C 1028 0028                  		move.b	$28(a0),d0
00015D60 E448                       		lsr.w	#2,d0
00015D62 0240 001C                  		andi.w	#$1C,d0
00015D66 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015D6A 115B 0019                  		move.b	(a3)+,$19(a0)
00015D6E 115B 0016                  		move.b	(a3)+,$16(a0)
00015D72 E448                       		lsr.w	#2,d0
00015D74 1140 001A                  		move.b	d0,$1A(a0)
00015D78 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015D80 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015D86 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015D8C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015D8E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015D94 6700                       		beq.s	Obj6B_SBZ3
00015D96                            
00015D96                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015D96 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D9A 7000                       		moveq	#0,d0
00015D9C 1028 0023                  		move.b	$23(a0),d0
00015DA0 6700                       		beq.s	Obj6B_Delete
00015DA2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015DA8                            
00015DA8                            Obj6B_Delete:
00015DA8 4EF9 0000 D778             		jmp	DeleteObject
00015DAE                            ; ===========================================================================
00015DAE                            
00015DAE                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015DAE 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015DB4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015DBA 6600                       		bne.s	Obj6B_SBZ12
00015DBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015DC0 7000                       		moveq	#0,d0
00015DC2 1028 0023                  		move.b	$23(a0),d0
00015DC6 6700                       		beq.s	Obj6B_SBZ12
00015DC8 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015DCE 6700                       		beq.s	Obj6B_SBZ12
00015DD0 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015DD4 60C0                       		bra.s	Obj6B_ChkGone
00015DD6                            ; ===========================================================================
00015DD6                            
00015DD6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015DD6 0028 0004 0001             		ori.b	#4,1(a0)
00015DDC 117C 0004 0018             		move.b	#4,$18(a0)
00015DE2 3168 0008 0034             		move.w	8(a0),$34(a0)
00015DE8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015DEE 7000                       		moveq	#0,d0
00015DF0 101B                       		move.b	(a3)+,d0
00015DF2 3140 003C                  		move.w	d0,$3C(a0)
00015DF6 7000                       		moveq	#0,d0
00015DF8 1028 0028                  		move.b	$28(a0),d0
00015DFC 6A00                       		bpl.s	Obj6B_Action
00015DFE 0200 000F                  		andi.b	#$F,d0
00015E02 1140 003E                  		move.b	d0,$3E(a0)
00015E06 1153 0028                  		move.b	(a3),$28(a0)
00015E0A 0C13 0005                  		cmpi.b	#5,(a3)
00015E0E 6600                       		bne.s	Obj6B_ChkGone2
00015E10 08E8 0004 0001             		bset	#4,1(a0)
00015E16                            
00015E16                            Obj6B_ChkGone2:
00015E16 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E1A 7000                       		moveq	#0,d0
00015E1C 1028 0023                  		move.b	$23(a0),d0
00015E20 6700                       		beq.s	Obj6B_Action
00015E22 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015E28                            
00015E28                            Obj6B_Action:				; XREF: Obj6B_Index
00015E28 3F28 0008                  		move.w	8(a0),-(sp)
00015E2C 7000                       		moveq	#0,d0
00015E2E 1028 0028                  		move.b	$28(a0),d0
00015E32 0240 000F                  		andi.w	#$F,d0
00015E36 D040                       		add.w	d0,d0
00015E38 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015E3C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015E40 381F                       		move.w	(sp)+,d4
00015E42 4A28 0001                  		tst.b	1(a0)
00015E46 6A00                       		bpl.s	Obj6B_ChkDel
00015E48 7200                       		moveq	#0,d1
00015E4A 1228 0019                  		move.b	$19(a0),d1
00015E4E 0641 000B                  		addi.w	#$B,d1
00015E52 7400                       		moveq	#0,d2
00015E54 1428 0016                  		move.b	$16(a0),d2
00015E58 3602                       		move.w	d2,d3
00015E5A 5243                       		addq.w	#1,d3
00015E5C 6100 9CAE                  		bsr.w	SolidObject
00015E60                            
00015E60                            Obj6B_ChkDel:
00015E60 3028 0034                  		move.w	$34(a0),d0
00015E64 0240 FF80                  		andi.w	#$FF80,d0
00015E68 3238 F700                  		move.w	($FFFFF700).w,d1
00015E6C 0441 0080                  		subi.w	#$80,d1
00015E70 0241 FF80                  		andi.w	#$FF80,d1
00015E74 9041                       		sub.w	d1,d0
00015E76 0C40 0280                  		cmpi.w	#$280,d0
00015E7A 6200                       		bhi.s	loc_15D64
00015E7C 4EF9 0000 D73C             		jmp	DisplaySprite
00015E82                            ; ===========================================================================
00015E82                            
00015E82                            loc_15D64:
00015E82 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015E88 6600                       		bne.s	Obj6B_Delete2
00015E8A 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015E8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E92 7000                       		moveq	#0,d0
00015E94 1028 0023                  		move.b	$23(a0),d0
00015E98 6700                       		beq.s	Obj6B_Delete2
00015E9A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015EA0                            
00015EA0                            Obj6B_Delete2:
00015EA0 4EF9 0000 D778             		jmp	DeleteObject
00015EA6                            ; ===========================================================================
00015EA6 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015EAA 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015EAE 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015EB2                            ; ===========================================================================
00015EB2                            
00015EB2                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015EB2 4E75                       		rts	
00015EB4                            ; ===========================================================================
00015EB4                            
00015EB4                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015EB4 4A28 0038                  		tst.b	$38(a0)
00015EB8 6600                       		bne.s	loc_15DB4
00015EBA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015EBE 7000                       		moveq	#0,d0
00015EC0 1028 003E                  		move.b	$3E(a0),d0
00015EC4 0832 0000 0000             		btst	#0,(a2,d0.w)
00015ECA 6700                       		beq.s	loc_15DC2
00015ECC 117C 0001 0038             		move.b	#1,$38(a0)
00015ED2                            
00015ED2                            loc_15DB4:
00015ED2 3028 003C                  		move.w	$3C(a0),d0
00015ED6 B068 003A                  		cmp.w	$3A(a0),d0
00015EDA 6700                       		beq.s	loc_15DE0
00015EDC 5468 003A                  		addq.w	#2,$3A(a0)
00015EE0                            
00015EE0                            loc_15DC2:
00015EE0 3028 003A                  		move.w	$3A(a0),d0
00015EE4 0828 0000 0022             		btst	#0,$22(a0)
00015EEA 6700                       		beq.s	loc_15DD4
00015EEC 4440                       		neg.w	d0
00015EEE 0640 0080                  		addi.w	#$80,d0
00015EF2                            
00015EF2                            loc_15DD4:
00015EF2 3228 0034                  		move.w	$34(a0),d1
00015EF6 9240                       		sub.w	d0,d1
00015EF8 3141 0008                  		move.w	d1,8(a0)
00015EFC 4E75                       		rts	
00015EFE                            ; ===========================================================================
00015EFE                            
00015EFE                            loc_15DE0:
00015EFE 5228 0028                  		addq.b	#1,$28(a0)
00015F02 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015F08 4228 0038                  		clr.b	$38(a0)
00015F0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015F10 7000                       		moveq	#0,d0
00015F12 1028 0023                  		move.b	$23(a0),d0
00015F16 67C8                       		beq.s	loc_15DC2
00015F18 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015F1E 60C0                       		bra.s	loc_15DC2
00015F20                            ; ===========================================================================
00015F20                            
00015F20                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015F20 4A28 0038                  		tst.b	$38(a0)
00015F24 6600                       		bne.s	loc_15E14
00015F26 5368 0036                  		subq.w	#1,$36(a0)
00015F2A 6600                       		bne.s	loc_15E1E
00015F2C 117C 0001 0038             		move.b	#1,$38(a0)
00015F32                            
00015F32                            loc_15E14:
00015F32 4A68 003A                  		tst.w	$3A(a0)
00015F36 6700                       		beq.s	loc_15E3C
00015F38 5568 003A                  		subq.w	#2,$3A(a0)
00015F3C                            
00015F3C                            loc_15E1E:
00015F3C 3028 003A                  		move.w	$3A(a0),d0
00015F40 0828 0000 0022             		btst	#0,$22(a0)
00015F46 6700                       		beq.s	loc_15E30
00015F48 4440                       		neg.w	d0
00015F4A 0640 0080                  		addi.w	#$80,d0
00015F4E                            
00015F4E                            loc_15E30:
00015F4E 3228 0034                  		move.w	$34(a0),d1
00015F52 9240                       		sub.w	d0,d1
00015F54 3141 0008                  		move.w	d1,8(a0)
00015F58 4E75                       		rts	
00015F5A                            ; ===========================================================================
00015F5A                            
00015F5A                            loc_15E3C:
00015F5A 5328 0028                  		subq.b	#1,$28(a0)
00015F5E 4228 0038                  		clr.b	$38(a0)
00015F62 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015F66 7000                       		moveq	#0,d0
00015F68 1028 0023                  		move.b	$23(a0),d0
00015F6C 67CE                       		beq.s	loc_15E1E
00015F6E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00015F74 60C6                       		bra.s	loc_15E1E
00015F76                            ; ===========================================================================
00015F76                            
00015F76                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00015F76 4A28 0038                  		tst.b	$38(a0)
00015F7A 6600                       		bne.s	loc_15E7C
00015F7C 4A68 003A                  		tst.w	$3A(a0)
00015F80 6700                       		beq.s	loc_15E6A
00015F82 5368 003A                  		subq.w	#1,$3A(a0)
00015F86 6000                       		bra.s	loc_15E8E
00015F88                            ; ===========================================================================
00015F88                            
00015F88                            loc_15E6A:
00015F88 5368 0036                  		subq.w	#1,$36(a0)
00015F8C 6A00                       		bpl.s	loc_15E8E
00015F8E 317C 003C 0036             		move.w	#$3C,$36(a0)
00015F94 117C 0001 0038             		move.b	#1,$38(a0)
00015F9A                            
00015F9A                            loc_15E7C:
00015F9A 5068 003A                  		addq.w	#8,$3A(a0)
00015F9E 3028 003A                  		move.w	$3A(a0),d0
00015FA2 B068 003C                  		cmp.w	$3C(a0),d0
00015FA6 6600                       		bne.s	loc_15E8E
00015FA8 4228 0038                  		clr.b	$38(a0)
00015FAC                            
00015FAC                            loc_15E8E:
00015FAC 3028 003A                  		move.w	$3A(a0),d0
00015FB0 0828 0000 0022             		btst	#0,$22(a0)
00015FB6 6700                       		beq.s	loc_15EA0
00015FB8 4440                       		neg.w	d0
00015FBA 0640 0038                  		addi.w	#$38,d0
00015FBE                            
00015FBE                            loc_15EA0:
00015FBE 3228 0030                  		move.w	$30(a0),d1
00015FC2 D240                       		add.w	d0,d1
00015FC4 3141 000C                  		move.w	d1,$C(a0)
00015FC8 4E75                       		rts	
00015FCA                            ; ===========================================================================
00015FCA                            
00015FCA                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00015FCA 4A28 0038                  		tst.b	$38(a0)
00015FCE 6600                       		bne.s	loc_15ED0
00015FD0 4A68 003A                  		tst.w	$3A(a0)
00015FD4 6700                       		beq.s	loc_15EBE
00015FD6 5168 003A                  		subq.w	#8,$3A(a0)
00015FDA 6000                       		bra.s	loc_15EF0
00015FDC                            ; ===========================================================================
00015FDC                            
00015FDC                            loc_15EBE:
00015FDC 5368 0036                  		subq.w	#1,$36(a0)
00015FE0 6A00                       		bpl.s	loc_15EF0
00015FE2 317C 003C 0036             		move.w	#$3C,$36(a0)
00015FE8 117C 0001 0038             		move.b	#1,$38(a0)
00015FEE                            
00015FEE                            loc_15ED0:
00015FEE 3028 003A                  		move.w	$3A(a0),d0
00015FF2 B068 003C                  		cmp.w	$3C(a0),d0
00015FF6 6700                       		beq.s	loc_15EE0
00015FF8 5068 003A                  		addq.w	#8,$3A(a0)
00015FFC 6000                       		bra.s	loc_15EF0
00015FFE                            ; ===========================================================================
00015FFE                            
00015FFE                            loc_15EE0:
00015FFE 5368 0036                  		subq.w	#1,$36(a0)
00016002 6A00                       		bpl.s	loc_15EF0
00016004 317C 003C 0036             		move.w	#$3C,$36(a0)
0001600A 4228 0038                  		clr.b	$38(a0)
0001600E                            
0001600E                            loc_15EF0:
0001600E 3028 003A                  		move.w	$3A(a0),d0
00016012 0828 0000 0022             		btst	#0,$22(a0)
00016018 6700                       		beq.s	loc_15F02
0001601A 4440                       		neg.w	d0
0001601C 0640 0038                  		addi.w	#$38,d0
00016020                            
00016020                            loc_15F02:
00016020 3228 0030                  		move.w	$30(a0),d1
00016024 D240                       		add.w	d0,d1
00016026 3141 000C                  		move.w	d1,$C(a0)
0001602A 4E75                       		rts	
0001602C                            ; ===========================================================================
0001602C                            
0001602C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001602C 4A28 0038                  		tst.b	$38(a0)
00016030 6600                       		bne.s	loc_15F3E
00016032 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016036 7000                       		moveq	#0,d0
00016038 1028 003E                  		move.b	$3E(a0),d0
0001603C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016042 6700                       		beq.s	locret_15F5C
00016044 117C 0001 0038             		move.b	#1,$38(a0)
0001604A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001604E 7000                       		moveq	#0,d0
00016050 1028 0023                  		move.b	$23(a0),d0
00016054 6700                       		beq.s	loc_15F3E
00016056 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001605C                            
0001605C                            loc_15F3E:
0001605C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016064 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001606C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016072 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016078 6700                       		beq.s	loc_15F5E
0001607A                            
0001607A                            locret_15F5C:
0001607A 4E75                       		rts	
0001607C                            ; ===========================================================================
0001607C                            
0001607C                            loc_15F5E:
0001607C 4228 0028                  		clr.b	$28(a0)
00016080 4228 0038                  		clr.b	$38(a0)
00016084 4E75                       		rts	
00016086                            ; ===========================================================================
00016086                            ; ---------------------------------------------------------------------------
00016086                            ; Sprite mappings - stomper and	platforms (SBZ)
00016086                            ; ---------------------------------------------------------------------------
00016086                            Map_obj6B:
00016086                            	include "_maps\obj6B.asm"
00016086                            ; ---------------------------------------------------------------------------
00016086                            ; Sprite mappings - stomper and	platforms (SBZ)
00016086                            ; ---------------------------------------------------------------------------
00016086 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001608A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001608E 0000                       		dc.w byte_15FB0-Map_obj6B
00016090 04                         byte_15F72:	dc.b 4
00016091 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016096 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001609B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000160A0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000160A5 08                         byte_15F87:	dc.b 8
000160A6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000160AB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000160B0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000160B5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000160BA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000160BF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000160C4 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000160C9 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000160CE 0E                         byte_15FB0:	dc.b $E
000160CF C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000160D4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000160D9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000160DE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000160E3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000160E8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000160ED C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000160F2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000160F7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000160FC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016101 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016106 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001610B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016110 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016116 00                         		even
00016116 00                         		even
00016116                            
00016116                            ; ===========================================================================
00016116                            ; ---------------------------------------------------------------------------
00016116                            ; Object 6C - vanishing	platforms (SBZ)
00016116                            ; ---------------------------------------------------------------------------
00016116                            
00016116                            Obj6C:					; XREF: Obj_Index
00016116 7000                       		moveq	#0,d0
00016118 1028 0024                  		move.b	$24(a0),d0
0001611C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016120 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016124                            ; ===========================================================================
00016124 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016126 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016128 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001612A 0000                       		dc.w loc_16068-Obj6C_Index
0001612C                            ; ===========================================================================
0001612C                            
0001612C                            Obj6C_Main:				; XREF: Obj6C_Index
0001612C 5C28 0024                  		addq.b	#6,$24(a0)
00016130 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016138 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001613E 0028 0004 0001             		ori.b	#4,1(a0)
00016144 117C 0010 0019             		move.b	#$10,$19(a0)
0001614A 117C 0004 0018             		move.b	#4,$18(a0)
00016150 7000                       		moveq	#0,d0
00016152 1028 0028                  		move.b	$28(a0),d0	; get object type
00016156 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001615A 5240                       		addq.w	#1,d0		; add 1
0001615C EF48                       		lsl.w	#7,d0		; multiply by $80
0001615E 3200                       		move.w	d0,d1
00016160 5340                       		subq.w	#1,d0
00016162 3140 0030                  		move.w	d0,$30(a0)
00016166 3140 0032                  		move.w	d0,$32(a0)
0001616A 7000                       		moveq	#0,d0
0001616C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016170 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016174 0641 0080                  		addi.w	#$80,d1
00016178 C0C1                       		mulu.w	d1,d0
0001617A E088                       		lsr.l	#8,d0
0001617C 3140 0036                  		move.w	d0,$36(a0)
00016180 5341                       		subq.w	#1,d1
00016182 3141 0038                  		move.w	d1,$38(a0)
00016186                            
00016186                            loc_16068:				; XREF: Obj6C_Index
00016186 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001618A 9068 0036                  		sub.w	$36(a0),d0
0001618E C068 0038                  		and.w	$38(a0),d0
00016192 6600                       		bne.s	Obj6C_Animate
00016194 5928 0024                  		subq.b	#4,$24(a0)
00016198 6000                       		bra.s	Obj6C_Vanish
0001619A                            ; ===========================================================================
0001619A                            
0001619A                            Obj6C_Animate:
0001619A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000161A0 4EB9 0000 A7EE             		jsr	AnimateSprite
000161A6 6000 963C                  		bra.w	MarkObjGone
000161AA                            ; ===========================================================================
000161AA                            
000161AA                            Obj6C_Vanish:				; XREF: Obj6C_Index
000161AA 5368 0030                  		subq.w	#1,$30(a0)
000161AE 6A00                       		bpl.s	loc_160AA
000161B0 317C 007F 0030             		move.w	#127,$30(a0)
000161B6 4A28 001C                  		tst.b	$1C(a0)
000161BA 6700                       		beq.s	loc_160A4
000161BC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000161C2                            
000161C2                            loc_160A4:
000161C2 0868 0000 001C             		bchg	#0,$1C(a0)
000161C8                            
000161C8                            loc_160AA:
000161C8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000161CE 4EB9 0000 A7EE             		jsr	AnimateSprite
000161D4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000161DA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000161DC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000161E2 6600                       		bne.s	loc_160D6
000161E4 7200                       		moveq	#0,d1
000161E6 1228 0019                  		move.b	$19(a0),d1
000161EA 4EB9 0000 7552             		jsr	(PlatformObject).l
000161F0 6000 95F2                  		bra.w	MarkObjGone
000161F4                            ; ===========================================================================
000161F4                            
000161F4                            loc_160D6:
000161F4 7200                       		moveq	#0,d1
000161F6 1228 0019                  		move.b	$19(a0),d1
000161FA 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00016200 3428 0008                  		move.w	8(a0),d2
00016204 4EB9 0000 7C30             		jsr	(MvSonicOnPtfm2).l
0001620A 6000 95D8                  		bra.w	MarkObjGone
0001620E                            ; ===========================================================================
0001620E                            
0001620E                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001620E 0828 0003 0022             		btst	#3,$22(a0)
00016214 6700                       		beq.s	Obj6C_Display
00016216 43F8 D000                  		lea	($FFFFD000).w,a1
0001621A 08A9 0003 0022             		bclr	#3,$22(a1)
00016220 08A8 0003 0022             		bclr	#3,$22(a0)
00016226 117C 0002 0024             		move.b	#2,$24(a0)
0001622C 4228 0025                  		clr.b	$25(a0)
00016230                            
00016230                            Obj6C_Display:
00016230 6000 95B2                  		bra.w	MarkObjGone
00016234                            ; ===========================================================================
00016234                            Ani_obj6C:
00016234                            	include "_anim\obj6C.asm"
00016234                            ; ---------------------------------------------------------------------------
00016234                            ; Animation script - vanishing platforms (SBZ)
00016234                            ; ---------------------------------------------------------------------------
00016234 0000                       		dc.w byte_1611A-Ani_obj6C
00016236 0000                       		dc.w byte_16122-Ani_obj6C
00016238 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016240 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016248                            		even
00016248                            		even
00016248                            
00016248                            ; ---------------------------------------------------------------------------
00016248                            ; Sprite mappings - vanishing platforms	(SBZ)
00016248                            ; ---------------------------------------------------------------------------
00016248                            Map_obj6C:
00016248                            	include "_maps\obj6C.asm"
00016248                            ; ---------------------------------------------------------------------------
00016248                            ; Sprite mappings - vanishing platforms	(SBZ)
00016248                            ; ---------------------------------------------------------------------------
00016248 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001624C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016250 01                         byte_16132:	dc.b 1
00016251 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016256 01                         byte_16138:	dc.b 1
00016257 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001625C 01                         byte_1613E:	dc.b 1
0001625D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016262 00                         byte_16144:	dc.b 0
00016264 00                         		even
00016264 00                         		even
00016264                            
00016264                            ; ===========================================================================
00016264                            ; ---------------------------------------------------------------------------
00016264                            ; Object 6E - electrocution orbs (SBZ)
00016264                            ; ---------------------------------------------------------------------------
00016264                            
00016264                            Obj6E:					; XREF: Obj_Index
00016264 7000                       		moveq	#0,d0
00016266 1028 0024                  		move.b	$24(a0),d0
0001626A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001626E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016272                            ; ===========================================================================
00016272 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016274 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016276                            ; ===========================================================================
00016276                            
00016276                            Obj6E_Main:				; XREF: Obj6E_Index
00016276 5428 0024                  		addq.b	#2,$24(a0)
0001627A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016282 317C 047E 0002             		move.w	#$47E,2(a0)
00016288 0028 0004 0001             		ori.b	#4,1(a0)
0001628E 117C 0028 0019             		move.b	#$28,$19(a0)
00016294 7000                       		moveq	#0,d0
00016296 1028 0028                  		move.b	$28(a0),d0	; read object type
0001629A E948                       		lsl.w	#4,d0		; multiply by $10
0001629C 5340                       		subq.w	#1,d0
0001629E 3140 0034                  		move.w	d0,$34(a0)
000162A2                            
000162A2                            Obj6E_Shock:				; XREF: Obj6E_Index
000162A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000162A6 C068 0034                  		and.w	$34(a0),d0
000162AA 6600                       		bne.s	Obj6E_Animate
000162AC 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000162B2 4A28 0001                  		tst.b	1(a0)
000162B6 6A00                       		bpl.s	Obj6E_Animate
000162B8 303C 00B1                  		move.w	#$B1,d0
000162BC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play electricity sound
000162C2                            
000162C2                            Obj6E_Animate:
000162C2 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000162C8 4EB9 0000 A7EE             		jsr	AnimateSprite
000162CE 117C 0000 0020             		move.b	#0,$20(a0)
000162D4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000162DA 6600                       		bne.s	Obj6E_Display	; if not, branch
000162DC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000162E2                            
000162E2                            Obj6E_Display:
000162E2 6000 9500                  		bra.w	MarkObjGone
000162E6                            ; ===========================================================================
000162E6                            Ani_obj6E:
000162E6                            	include "_anim\obj6E.asm"
000162E6                            ; ---------------------------------------------------------------------------
000162E6                            ; Animation script - electrocution orbs (SBZ)
000162E6                            ; ---------------------------------------------------------------------------
000162E6 0000                       		dc.w byte_161CC-Ani_obj6E
000162E8 0000                       		dc.w byte_161D0-Ani_obj6E
000162EA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000162EE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000162FE                            		even
000162FE                            		even
000162FE                            
000162FE                            ; ---------------------------------------------------------------------------
000162FE                            ; Sprite mappings - electrocution orbs (SBZ)
000162FE                            ; ---------------------------------------------------------------------------
000162FE                            Map_obj6E:
000162FE                            	include "_maps\obj6E.asm"
000162FE                            ; ---------------------------------------------------------------------------
000162FE                            ; Sprite mappings - electrocution orbs (SBZ)
000162FE                            ; ---------------------------------------------------------------------------
000162FE 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016302 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016306 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
0001630A 02                         byte_161EC:	dc.b 2
0001630B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016310 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016315 03                         byte_161F7:	dc.b 3
00016316 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001631B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016320 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016325 05                         byte_16207:	dc.b 5
00016326 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001632B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016330 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016335 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001633A F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001633F 04                         byte_16221:	dc.b 4
00016340 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016345 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001634A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001634F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016354 06                         byte_16236:	dc.b 6
00016355 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001635A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001635F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016364 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016369 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001636E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016373 04                         byte_16255:	dc.b 4
00016374 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016379 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001637E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016383 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016388                            		even
00016388                            		even
00016388                            
00016388                            ; ===========================================================================
00016388                            ; ---------------------------------------------------------------------------
00016388                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016388                            ; ---------------------------------------------------------------------------
00016388                            
00016388                            Obj6F:					; XREF: Obj_Index
00016388 7000                       		moveq	#0,d0
0001638A 1028 0024                  		move.b	$24(a0),d0
0001638E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016392 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016396 3028 0030                  		move.w	$30(a0),d0
0001639A 0240 FF80                  		andi.w	#$FF80,d0
0001639E 3238 F700                  		move.w	($FFFFF700).w,d1
000163A2 0441 0080                  		subi.w	#$80,d1
000163A6 0241 FF80                  		andi.w	#$FF80,d1
000163AA 9041                       		sub.w	d1,d0
000163AC 0C40 0280                  		cmpi.w	#$280,d0
000163B0 6200                       		bhi.s	loc_1629A
000163B2                            
000163B2                            Obj6F_Display:
000163B2 4EF9 0000 D73C             		jmp	DisplaySprite
000163B8                            ; ===========================================================================
000163B8                            
000163B8                            loc_1629A:
000163B8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000163BE 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000163C0 0C40 FF80                  		cmpi.w	#-$80,d0
000163C4 64EC                       		bcc.s	Obj6F_Display
000163C6                            
000163C6                            Obj6F_Act1or2:
000163C6 1028 002F                  		move.b	$2F(a0),d0
000163CA 6A00                       		bpl.s	Obj6F_Delete
000163CC 0240 007F                  		andi.w	#$7F,d0
000163D0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000163D4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000163DA                            
000163DA                            Obj6F_Delete:
000163DA 4EF9 0000 D778             		jmp	DeleteObject
000163E0                            ; ===========================================================================
000163E0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000163E2 0000                       		dc.w loc_163D8-Obj6F_Index
000163E4                            ; ===========================================================================
000163E4                            
000163E4                            Obj6F_Main:				; XREF: Obj6F_Index
000163E4 1028 0028                  		move.b	$28(a0),d0
000163E8 6B00 0000                  		bmi.w	loc_16380
000163EC 5428 0024                  		addq.b	#2,$24(a0)
000163F0 217C 0001 5A58 0004        		move.l	#Map_obj69a,4(a0)
000163F8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000163FE 117C 0010 0019             		move.b	#$10,$19(a0)
00016404 0028 0004 0001             		ori.b	#4,1(a0)
0001640A 117C 0004 0018             		move.b	#4,$18(a0)
00016410 7000                       		moveq	#0,d0
00016412 1028 0028                  		move.b	$28(a0),d0
00016416 3200                       		move.w	d0,d1
00016418 E648                       		lsr.w	#3,d0
0001641A 0240 001E                  		andi.w	#$1E,d0
0001641E 45FA 0000                  		lea	off_164A6(pc),a2
00016422 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016426 315A 0038                  		move.w	(a2)+,$38(a0)
0001642A 315A 0030                  		move.w	(a2)+,$30(a0)
0001642E 214A 003C                  		move.l	a2,$3C(a0)
00016432 0241 000F                  		andi.w	#$F,d1
00016436 E549                       		lsl.w	#2,d1
00016438 1141 0038                  		move.b	d1,$38(a0)
0001643C 117C 0004 003A             		move.b	#4,$3A(a0)
00016442 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016446 6700                       		beq.s	loc_16356
00016448 117C 0001 003B             		move.b	#1,$3B(a0)
0001644E 4428 003A                  		neg.b	$3A(a0)
00016452 7200                       		moveq	#0,d1
00016454 1228 0038                  		move.b	$38(a0),d1
00016458 D228 003A                  		add.b	$3A(a0),d1
0001645C B228 0039                  		cmp.b	$39(a0),d1
00016460 6500                       		bcs.s	loc_16352
00016462 1001                       		move.b	d1,d0
00016464 7200                       		moveq	#0,d1
00016466 4A00                       		tst.b	d0
00016468 6A00                       		bpl.s	loc_16352
0001646A 1228 0039                  		move.b	$39(a0),d1
0001646E 5901                       		subq.b	#4,d1
00016470                            
00016470                            loc_16352:
00016470 1141 0038                  		move.b	d1,$38(a0)
00016474                            
00016474                            loc_16356:
00016474 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001647A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016480 4A41                       		tst.w	d1
00016482 6600                       		bne.s	loc_1636C
00016484 117C 0001 001C             		move.b	#1,$1C(a0)
0001648A                            
0001648A                            loc_1636C:
0001648A 0C41 0008                  		cmpi.w	#8,d1
0001648E 6600                       		bne.s	loc_16378
00016490 117C 0000 001C             		move.b	#0,$1C(a0)
00016496                            
00016496                            loc_16378:
00016496 6100 C1EC                  		bsr.w	Obj63_ChangeDir
0001649A 6000 0000                  		bra.w	loc_163D8
0001649E                            ; ===========================================================================
0001649E                            
0001649E                            loc_16380:				; XREF: Obj6F_Main
0001649E 1140 002F                  		move.b	d0,$2F(a0)
000164A2 0240 007F                  		andi.w	#$7F,d0
000164A6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000164AA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000164B0 6700                       		beq.s	loc_1639A
000164B2 4EF9 0000 D778             		jmp	DeleteObject
000164B8                            ; ===========================================================================
000164B8                            
000164B8                            loc_1639A:
000164B8 D040                       		add.w	d0,d0
000164BA 0240 001E                  		andi.w	#$1E,d0
000164BE 0640 0080                  		addi.w	#$80,d0
000164C2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000164C8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000164CC 321A                       		move.w	(a2)+,d1
000164CE 2248                       		movea.l	a0,a1
000164D0 6000                       		bra.s	Obj6F_LoadPform
000164D2                            ; ===========================================================================
000164D2                            
000164D2                            Obj6F_Loop:
000164D2 4EB9 0000 DBC2             		jsr	SingleObjLoad
000164D8 6600                       		bne.s	loc_163D0
000164DA                            
000164DA                            Obj6F_LoadPform:			; XREF: loc_1639A
000164DA 12BC 006F                  		move.b	#$6F,0(a1)
000164DE 335A 0008                  		move.w	(a2)+,8(a1)
000164E2 335A 000C                  		move.w	(a2)+,$C(a1)
000164E6 301A                       		move.w	(a2)+,d0
000164E8 1340 0028                  		move.b	d0,$28(a1)
000164EC                            
000164EC                            loc_163D0:
000164EC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000164F0                            
000164F0 588F                       		addq.l	#4,sp
000164F2 4E75                       		rts	
000164F4                            ; ===========================================================================
000164F4                            
000164F4                            loc_163D8:				; XREF: Obj6F_Index
000164F4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000164FA 4EB9 0000 A7EE             		jsr	AnimateSprite
00016500 4A28 001A                  		tst.b	$1A(a0)
00016504 6600                       		bne.s	loc_16404
00016506 3F28 0008                  		move.w	8(a0),-(sp)
0001650A 6100 0000                  		bsr.w	loc_16424
0001650E 323C 001B                  		move.w	#$1B,d1
00016512 343C 0007                  		move.w	#7,d2
00016516 3602                       		move.w	d2,d3
00016518 5243                       		addq.w	#1,d3
0001651A 381F                       		move.w	(sp)+,d4
0001651C 6000 95EE                  		bra.w	SolidObject
00016520                            ; ===========================================================================
00016520                            
00016520                            loc_16404:
00016520 0828 0003 0022             		btst	#3,$22(a0)
00016526 6700                       		beq.s	loc_16420
00016528 43F8 D000                  		lea	($FFFFD000).w,a1
0001652C 08A9 0003 0022             		bclr	#3,$22(a1)
00016532 08A8 0003 0022             		bclr	#3,$22(a0)
00016538 4228 0025                  		clr.b	$25(a0)
0001653C                            
0001653C                            loc_16420:
0001653C 6000 0002                  		bra.w	*+4
00016540                            
00016540                            loc_16424:
00016540 3028 0008                  		move.w	8(a0),d0
00016544 B068 0034                  		cmp.w	$34(a0),d0
00016548 6600                       		bne.s	loc_16484
0001654A 3028 000C                  		move.w	$C(a0),d0
0001654E B068 0036                  		cmp.w	$36(a0),d0
00016552 6600                       		bne.s	loc_16484
00016554 7200                       		moveq	#0,d1
00016556 1228 0038                  		move.b	$38(a0),d1
0001655A D228 003A                  		add.b	$3A(a0),d1
0001655E B228 0039                  		cmp.b	$39(a0),d1
00016562 6500                       		bcs.s	loc_16456
00016564 1001                       		move.b	d1,d0
00016566 7200                       		moveq	#0,d1
00016568 4A00                       		tst.b	d0
0001656A 6A00                       		bpl.s	loc_16456
0001656C 1228 0039                  		move.b	$39(a0),d1
00016570 5901                       		subq.b	#4,d1
00016572                            
00016572                            loc_16456:
00016572 1141 0038                  		move.b	d1,$38(a0)
00016576 2268 003C                  		movea.l	$3C(a0),a1
0001657A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016580 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016586 4A41                       		tst.w	d1
00016588 6600                       		bne.s	loc_16474
0001658A 117C 0001 001C             		move.b	#1,$1C(a0)
00016590                            
00016590                            loc_16474:
00016590 0C41 0008                  		cmpi.w	#8,d1
00016594 6600                       		bne.s	loc_16480
00016596 117C 0000 001C             		move.b	#0,$1C(a0)
0001659C                            
0001659C                            loc_16480:
0001659C 6100 C0E6                  		bsr.w	Obj63_ChangeDir
000165A0                            
000165A0                            loc_16484:
000165A0 4EF9 0000 D716             		jmp	SpeedToPos
000165A6                            ; ===========================================================================
000165A6                            Ani_obj6F:
000165A6                            	include "_anim\obj6F.asm"
000165A6                            ; ---------------------------------------------------------------------------
000165A6                            ; Animation script - platform on conveyor belt (SBZ)
000165A6                            ; ---------------------------------------------------------------------------
000165A6 0000                       		dc.w byte_1648E-Ani_obj6F
000165A8 0000                       		dc.w byte_164A2-Ani_obj6F
000165AA 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000165B7 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000165BE 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000165C2 00                         		even
000165C2 00                         		even
000165C2                            
000165C2 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000165C8 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000165CE 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000165E2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000165F6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001660A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001661E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016632 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016646                            ; ===========================================================================
00016646                            ; ---------------------------------------------------------------------------
00016646                            ; Object 70 - large girder block (SBZ)
00016646                            ; ---------------------------------------------------------------------------
00016646                            
00016646                            Obj70:					; XREF: Obj_Index
00016646 7000                       		moveq	#0,d0
00016648 1028 0024                  		move.b	$24(a0),d0
0001664C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016650 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016654                            ; ===========================================================================
00016654 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016656 0000                       		dc.w Obj70_Action-Obj70_Index
00016658                            ; ===========================================================================
00016658                            
00016658                            Obj70_Main:				; XREF: Obj70_Index
00016658 5428 0024                  		addq.b	#2,$24(a0)
0001665C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016664 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001666A 0028 0004 0001             		ori.b	#4,1(a0)
00016670 117C 0004 0018             		move.b	#4,$18(a0)
00016676 117C 0060 0019             		move.b	#$60,$19(a0)
0001667C 117C 0018 0016             		move.b	#$18,$16(a0)
00016682 3168 0008 0032             		move.w	8(a0),$32(a0)
00016688 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001668E 6100 0000                  		bsr.w	Obj70_Move2
00016692                            
00016692                            Obj70_Action:				; XREF: Obj70_Index
00016692 3F28 0008                  		move.w	8(a0),-(sp)
00016696 4A68 003A                  		tst.w	$3A(a0)
0001669A 6700                       		beq.s	Obj70_Move
0001669C 5368 003A                  		subq.w	#1,$3A(a0)
000166A0 6600                       		bne.s	Obj70_Solid
000166A2                            
000166A2                            Obj70_Move:
000166A2 4EB9 0000 D716             		jsr	SpeedToPos
000166A8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000166AC 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000166AE 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000166B2                            
000166B2                            Obj70_Solid:
000166B2 381F                       		move.w	(sp)+,d4
000166B4 4A28 0001                  		tst.b	1(a0)
000166B8 6A00                       		bpl.s	Obj70_ChkDel
000166BA 7200                       		moveq	#0,d1
000166BC 1228 0019                  		move.b	$19(a0),d1
000166C0 0641 000B                  		addi.w	#$B,d1
000166C4 7400                       		moveq	#0,d2
000166C6 1428 0016                  		move.b	$16(a0),d2
000166CA 3602                       		move.w	d2,d3
000166CC 5243                       		addq.w	#1,d3
000166CE 6100 943C                  		bsr.w	SolidObject
000166D2                            
000166D2                            Obj70_ChkDel:
000166D2 3028 0032                  		move.w	$32(a0),d0
000166D6 0240 FF80                  		andi.w	#$FF80,d0
000166DA 3238 F700                  		move.w	($FFFFF700).w,d1
000166DE 0441 0080                  		subi.w	#$80,d1
000166E2 0241 FF80                  		andi.w	#$FF80,d1
000166E6 9041                       		sub.w	d1,d0
000166E8 0C40 0280                  		cmpi.w	#$280,d0
000166EC 6200                       		bhi.s	Obj70_Delete
000166EE 4EF9 0000 D73C             		jmp	DisplaySprite
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            Obj70_Delete:
000166F4 4EF9 0000 D778             		jmp	DeleteObject
000166FA                            ; ===========================================================================
000166FA                            
000166FA                            Obj70_Move2:				; XREF: Obj70_Main
000166FA 1028 0038                  		move.b	$38(a0),d0
000166FE 0240 0018                  		andi.w	#$18,d0
00016702 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016708 43F1 0000                  		lea	(a1,d0.w),a1
0001670C 3159 0010                  		move.w	(a1)+,$10(a0)
00016710 3159 0012                  		move.w	(a1)+,$12(a0)
00016714 3159 0034                  		move.w	(a1)+,$34(a0)
00016718 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001671C 317C 0007 003A             		move.w	#7,$3A(a0)
00016722 4E75                       		rts	
00016724                            ; ===========================================================================
00016724 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001672C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016734 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001673C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016744                            ; ---------------------------------------------------------------------------
00016744                            ; Sprite mappings - large girder block (SBZ)
00016744                            ; ---------------------------------------------------------------------------
00016744                            Map_obj70:
00016744                            	include "_maps\obj70.asm"
00016744                            ; ---------------------------------------------------------------------------
00016744                            ; Sprite mappings - large girder block (SBZ)
00016744                            ; ---------------------------------------------------------------------------
00016744 0000                       		dc.w byte_1662A-Map_obj70
00016746 0C                         byte_1662A:	dc.b $C
00016747 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001674C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016751 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016756 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001675B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016760 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016765 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001676A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001676F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016774 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016779 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001677E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016784 00                         		even
00016784 00                         		even
00016784                            
00016784                            ; ===========================================================================
00016784                            ; ---------------------------------------------------------------------------
00016784                            ; Object 72 - teleporter (SBZ)
00016784                            ; ---------------------------------------------------------------------------
00016784                            
00016784                            Obj72:					; XREF: Obj_Index
00016784 7000                       		moveq	#0,d0
00016786 1028 0024                  		move.b	$24(a0),d0
0001678A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001678E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016792 3028 0008                  		move.w	8(a0),d0
00016796 0240 FF80                  		andi.w	#$FF80,d0
0001679A 3238 F700                  		move.w	($FFFFF700).w,d1
0001679E 0441 0080                  		subi.w	#$80,d1
000167A2 0241 FF80                  		andi.w	#$FF80,d1
000167A6 9041                       		sub.w	d1,d0
000167A8 0C40 0280                  		cmpi.w	#$280,d0
000167AC 6200                       		bhi.s	Obj72_Delete
000167AE 4E75                       		rts	
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            Obj72_Delete:
000167B0 4EF9 0000 D778             		jmp	DeleteObject
000167B6                            ; ===========================================================================
000167B6 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000167B8 0000                       		dc.w loc_166C8-Obj72_Index
000167BA 0000                       		dc.w loc_1675E-Obj72_Index
000167BC 0000                       		dc.w loc_16798-Obj72_Index
000167BE                            ; ===========================================================================
000167BE                            
000167BE                            Obj72_Main:				; XREF: Obj72_Index
000167BE 5428 0024                  		addq.b	#2,$24(a0)
000167C2 1028 0028                  		move.b	$28(a0),d0
000167C6 D040                       		add.w	d0,d0
000167C8 0240 001E                  		andi.w	#$1E,d0
000167CC 45FA 0000                  		lea	Obj72_Data(pc),a2
000167D0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000167D4 315A 003A                  		move.w	(a2)+,$3A(a0)
000167D8 214A 003C                  		move.l	a2,$3C(a0)
000167DC 315A 0036                  		move.w	(a2)+,$36(a0)
000167E0 315A 0038                  		move.w	(a2)+,$38(a0)
000167E4                            
000167E4                            loc_166C8:				; XREF: Obj72_Index
000167E4 43F8 D000                  		lea	($FFFFD000).w,a1
000167E8 3029 0008                  		move.w	8(a1),d0
000167EC 9068 0008                  		sub.w	8(a0),d0
000167F0 0828 0000 0022             		btst	#0,$22(a0)
000167F6 6700                       		beq.s	loc_166E0
000167F8 0640 000F                  		addi.w	#$F,d0
000167FC                            
000167FC                            loc_166E0:
000167FC 0C40 0010                  		cmpi.w	#$10,d0
00016800 6400                       		bcc.s	locret_1675C
00016802 3229 000C                  		move.w	$C(a1),d1
00016806 9268 000C                  		sub.w	$C(a0),d1
0001680A 0641 0020                  		addi.w	#$20,d1
0001680E 0C41 0040                  		cmpi.w	#$40,d1
00016812 6400                       		bcc.s	locret_1675C
00016814 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016818 6600                       		bne.s	locret_1675C
0001681A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016820 6600                       		bne.s	loc_1670E
00016822 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016828 6500                       		bcs.s	locret_1675C
0001682A                            
0001682A                            loc_1670E:
0001682A 5428 0024                  		addq.b	#2,$24(a0)
0001682E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016834 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001683A 337C 0800 0014             		move.w	#$800,$14(a1)
00016840 337C 0000 0010             		move.w	#0,$10(a1)
00016846 337C 0000 0012             		move.w	#0,$12(a1)
0001684C 08A8 0005 0022             		bclr	#5,$22(a0)
00016852 08A9 0005 0022             		bclr	#5,$22(a1)
00016858 08E9 0001 0022             		bset	#1,$22(a1)
0001685E 3368 0008 0008             		move.w	8(a0),8(a1)
00016864 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001686A 4228 0032                  		clr.b	$32(a0)
0001686E 303C 00BE                  		move.w	#$BE,d0
00016872 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016878                            
00016878                            locret_1675C:
00016878 4E75                       		rts	
0001687A                            ; ===========================================================================
0001687A                            
0001687A                            loc_1675E:				; XREF: Obj72_Index
0001687A 43F8 D000                  		lea	($FFFFD000).w,a1
0001687E 1028 0032                  		move.b	$32(a0),d0
00016882 5428 0032                  		addq.b	#2,$32(a0)
00016886 4EB9 0000 29DA             		jsr	(CalcSine).l
0001688C EA40                       		asr.w	#5,d0
0001688E 3428 000C                  		move.w	$C(a0),d2
00016892 9440                       		sub.w	d0,d2
00016894 3342 000C                  		move.w	d2,$C(a1)
00016898 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001689E 6600                       		bne.s	locret_16796
000168A0 6100 0000                  		bsr.w	sub_1681C
000168A4 5428 0024                  		addq.b	#2,$24(a0)
000168A8 303C 00BC                  		move.w	#$BC,d0
000168AC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play teleport sound
000168B2                            
000168B2                            locret_16796:
000168B2 4E75                       		rts	
000168B4                            ; ===========================================================================
000168B4                            
000168B4                            loc_16798:				; XREF: Obj72_Index
000168B4 588F                       		addq.l	#4,sp
000168B6 43F8 D000                  		lea	($FFFFD000).w,a1
000168BA 5328 002E                  		subq.b	#1,$2E(a0)
000168BE 6A00                       		bpl.s	loc_167DA
000168C0 3368 0036 0008             		move.w	$36(a0),8(a1)
000168C6 3368 0038 000C             		move.w	$38(a0),$C(a1)
000168CC 7200                       		moveq	#0,d1
000168CE 1228 003A                  		move.b	$3A(a0),d1
000168D2 5801                       		addq.b	#4,d1
000168D4 B228 003B                  		cmp.b	$3B(a0),d1
000168D8 6500                       		bcs.s	loc_167C2
000168DA 7200                       		moveq	#0,d1
000168DC 6000                       		bra.s	loc_16800
000168DE                            ; ===========================================================================
000168DE                            
000168DE                            loc_167C2:
000168DE 1141 003A                  		move.b	d1,$3A(a0)
000168E2 2468 003C                  		movea.l	$3C(a0),a2
000168E6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000168EC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000168F2 6000 0000                  		bra.w	sub_1681C
000168F6                            ; ===========================================================================
000168F6                            
000168F6                            loc_167DA:
000168F6 2429 0008                  		move.l	8(a1),d2
000168FA 2629 000C                  		move.l	$C(a1),d3
000168FE 3029 0010                  		move.w	$10(a1),d0
00016902 48C0                       		ext.l	d0
00016904 E180                       		asl.l	#8,d0
00016906 D480                       		add.l	d0,d2
00016908 3029 0012                  		move.w	$12(a1),d0
0001690C 48C0                       		ext.l	d0
0001690E E180                       		asl.l	#8,d0
00016910 D680                       		add.l	d0,d3
00016912 2342 0008                  		move.l	d2,8(a1)
00016916 2343 000C                  		move.l	d3,$C(a1)
0001691A 4E75                       		rts	
0001691C                            ; ===========================================================================
0001691C                            
0001691C                            loc_16800:
0001691C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016922 4228 0024                  		clr.b	$24(a0)
00016926 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001692A 337C 0000 0010             		move.w	#0,$10(a1)
00016930 337C 0200 0012             		move.w	#$200,$12(a1)
00016936 4E75                       		rts	
00016938                            
00016938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016938                            
00016938                            
00016938                            sub_1681C:
00016938 7000                       		moveq	#0,d0
0001693A 343C 1000                  		move.w	#$1000,d2
0001693E 3028 0036                  		move.w	$36(a0),d0
00016942 9069 0008                  		sub.w	8(a1),d0
00016946 6C00                       		bge.s	loc_16830
00016948 4440                       		neg.w	d0
0001694A 4442                       		neg.w	d2
0001694C                            
0001694C                            loc_16830:
0001694C 7200                       		moveq	#0,d1
0001694E 363C 1000                  		move.w	#$1000,d3
00016952 3228 0038                  		move.w	$38(a0),d1
00016956 9269 000C                  		sub.w	$C(a1),d1
0001695A 6C00                       		bge.s	loc_16844
0001695C 4441                       		neg.w	d1
0001695E 4443                       		neg.w	d3
00016960                            
00016960                            loc_16844:
00016960 B240                       		cmp.w	d0,d1
00016962 6500                       		bcs.s	loc_1687A
00016964 7200                       		moveq	#0,d1
00016966 3228 0038                  		move.w	$38(a0),d1
0001696A 9269 000C                  		sub.w	$C(a1),d1
0001696E 4841                       		swap	d1
00016970 83C3                       		divs.w	d3,d1
00016972 7000                       		moveq	#0,d0
00016974 3028 0036                  		move.w	$36(a0),d0
00016978 9069 0008                  		sub.w	8(a1),d0
0001697C 6700                       		beq.s	loc_16866
0001697E 4840                       		swap	d0
00016980 81C1                       		divs.w	d1,d0
00016982                            
00016982                            loc_16866:
00016982 3340 0010                  		move.w	d0,$10(a1)
00016986 3343 0012                  		move.w	d3,$12(a1)
0001698A 4A41                       		tst.w	d1
0001698C 6A00                       		bpl.s	loc_16874
0001698E 4441                       		neg.w	d1
00016990                            
00016990                            loc_16874:
00016990 3141 002E                  		move.w	d1,$2E(a0)
00016994 4E75                       		rts	
00016996                            ; ===========================================================================
00016996                            
00016996                            loc_1687A:
00016996 7000                       		moveq	#0,d0
00016998 3028 0036                  		move.w	$36(a0),d0
0001699C 9069 0008                  		sub.w	8(a1),d0
000169A0 4840                       		swap	d0
000169A2 81C2                       		divs.w	d2,d0
000169A4 7200                       		moveq	#0,d1
000169A6 3228 0038                  		move.w	$38(a0),d1
000169AA 9269 000C                  		sub.w	$C(a1),d1
000169AE 6700                       		beq.s	loc_16898
000169B0 4841                       		swap	d1
000169B2 83C0                       		divs.w	d0,d1
000169B4                            
000169B4                            loc_16898:
000169B4 3341 0012                  		move.w	d1,$12(a1)
000169B8 3342 0010                  		move.w	d2,$10(a1)
000169BC 4A40                       		tst.w	d0
000169BE 6A00                       		bpl.s	loc_168A6
000169C0 4440                       		neg.w	d0
000169C2                            
000169C2                            loc_168A6:
000169C2 3140 002E                  		move.w	d0,$2E(a0)
000169C6 4E75                       		rts	
000169C8                            ; End of function sub_1681C
000169C8                            
000169C8                            ; ===========================================================================
000169C8 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000169CE 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000169D4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000169D8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000169DE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000169E4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000169EA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000169F0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000169F6 0884 0298 0894             		dc.w $884, $298, $894
000169FC 0270 0894 0190             		dc.w $270, $894, $190
00016A02 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016A08 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016A0E 1184 0498 1158             		dc.w $1184, $498, $1158
00016A14 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016A1A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016A20 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016A26 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016A2C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016A32 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016A38 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016A3E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016A44 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016A4A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016A50                            ; ===========================================================================
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            
00016A50                            Obj78:					; XREF: Obj_Index
00016A50 7000                       		moveq	#0,d0
00016A52 1028 0024                  		move.b	$24(a0),d0
00016A56 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016A5A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016A5E                            ; ===========================================================================
00016A5E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016A60 0000                       		dc.w Obj78_Action-Obj78_Index
00016A62 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016A64 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016A66 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016A68 0000                       		dc.w Obj78_Delete-Obj78_Index
00016A6A 0000                       		dc.w loc_16CC0-Obj78_Index
00016A6C                            ; ===========================================================================
00016A6C                            
00016A6C                            locret_16950:
00016A6C 4E75                       		rts	
00016A6E                            ; ===========================================================================
00016A6E                            
00016A6E                            Obj78_Main:				; XREF: Obj78_Index
00016A6E 117C 0007 0016             		move.b	#7,$16(a0)
00016A74 117C 0008 0017             		move.b	#8,$17(a0)
00016A7A 4EB9 0000 D6EA             		jsr	ObjectFall
00016A80 4EBA E4B6                  		jsr	ObjHitFloor
00016A84 4A41                       		tst.w	d1
00016A86 6AE4                       		bpl.s	locret_16950
00016A88 D368 000C                  		add.w	d1,$C(a0)
00016A8C 4268 0012                  		clr.w	$12(a0)
00016A90 5428 0024                  		addq.b	#2,$24(a0)
00016A94 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016A9C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016AA2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016AA8 6700                       		beq.s	loc_16996
00016AAA 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016AB0                            
00016AB0                            loc_16996:
00016AB0 0228 0003 0001             		andi.b	#3,1(a0)
00016AB6 0028 0004 0001             		ori.b	#4,1(a0)
00016ABC 1168 0001 0022             		move.b	1(a0),$22(a0)
00016AC2 117C 0004 0018             		move.b	#4,$18(a0)
00016AC8 117C 0008 0019             		move.b	#8,$19(a0)
00016ACE 117C 000B 0020             		move.b	#$B,$20(a0)
00016AD4 3428 0008                  		move.w	8(a0),d2
00016AD8 7A0C                       		moveq	#$C,d5
00016ADA 0828 0000 0022             		btst	#0,$22(a0)
00016AE0 6700                       		beq.s	loc_169CA
00016AE2 4445                       		neg.w	d5
00016AE4                            
00016AE4                            loc_169CA:
00016AE4 1C3C 0004                  		move.b	#4,d6
00016AE8 7600                       		moveq	#0,d3
00016AEA 7804                       		moveq	#4,d4
00016AEC 2448                       		movea.l	a0,a2
00016AEE 7202                       		moveq	#2,d1
00016AF0                            
00016AF0                            Obj78_LoadBody:
00016AF0 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00016AF6 6600                       		bne.s	Obj78_QuitLoad
00016AF8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016AFC 1346 0024                  		move.b	d6,$24(a1)
00016B00 5406                       		addq.b	#2,d6
00016B02 2368 0004 0004             		move.l	4(a0),4(a1)
00016B08 3368 0002 0002             		move.w	2(a0),2(a1)
00016B0E 137C 0005 0018             		move.b	#5,$18(a1)
00016B14 137C 0008 0019             		move.b	#8,$19(a1)
00016B1A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016B20 D445                       		add.w	d5,d2
00016B22 3342 0008                  		move.w	d2,8(a1)
00016B26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016B2C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016B32 1368 0022 0001             		move.b	$22(a0),1(a1)
00016B38 137C 0008 001A             		move.b	#8,$1A(a1)
00016B3E 234A 003C                  		move.l	a2,$3C(a1)
00016B42 1344 003C                  		move.b	d4,$3C(a1)
00016B46 5804                       		addq.b	#4,d4
00016B48 2449                       		movea.l	a1,a2
00016B4A                            
00016B4A                            Obj78_QuitLoad:
00016B4A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016B4E                            
00016B4E 117C 0007 002A             		move.b	#7,$2A(a0)
00016B54 4228 003C                  		clr.b	$3C(a0)
00016B58                            
00016B58                            Obj78_Action:				; XREF: Obj78_Index
00016B58 4A28 0022                  		tst.b	$22(a0)
00016B5C 6B00 0000                  		bmi.w	loc_16C96
00016B60 7000                       		moveq	#0,d0
00016B62 1028 0025                  		move.b	$25(a0),d0
00016B66 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016B6A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016B6E 1228 002B                  		move.b	$2B(a0),d1
00016B72 6A00                       		bpl.s	Obj78_Display
00016B74 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016B7A 1028 0026                  		move.b	$26(a0),d0
00016B7E 0240 007F                  		andi.w	#$7F,d0
00016B82 5828 0026                  		addq.b	#4,$26(a0)
00016B86 1031 0000                  		move.b	(a1,d0.w),d0
00016B8A 6A00                       		bpl.s	Obj78_AniHead
00016B8C 08A8 0007 002B             		bclr	#7,$2B(a0)
00016B92 6000                       		bra.s	Obj78_Display
00016B94                            ; ===========================================================================
00016B94                            
00016B94                            Obj78_AniHead:
00016B94 0201 0010                  		andi.b	#$10,d1
00016B98 D001                       		add.b	d1,d0
00016B9A 1140 001A                  		move.b	d0,$1A(a0)
00016B9E                            
00016B9E                            Obj78_Display:
00016B9E 3028 0008                  		move.w	8(a0),d0
00016BA2 0240 FF80                  		andi.w	#$FF80,d0
00016BA6 3238 F700                  		move.w	($FFFFF700).w,d1
00016BAA 0441 0080                  		subi.w	#$80,d1
00016BAE 0241 FF80                  		andi.w	#$FF80,d1
00016BB2 9041                       		sub.w	d1,d0
00016BB4 0C40 0280                  		cmpi.w	#$280,d0
00016BB8 6200 0000                  		bhi.w	Obj78_ChkGone
00016BBC 4EF9 0000 D73C             		jmp	DisplaySprite
00016BC2                            ; ===========================================================================
00016BC2                            
00016BC2                            Obj78_ChkGone:
00016BC2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016BC6 7000                       		moveq	#0,d0
00016BC8 1028 0023                  		move.b	$23(a0),d0
00016BCC 6700                       		beq.s	loc_16ABC
00016BCE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016BD4                            
00016BD4                            loc_16ABC:
00016BD4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016BDA 4E75                       		rts	
00016BDC                            ; ===========================================================================
00016BDC                            
00016BDC                            Obj78_Delete:				; XREF: Obj78_Index
00016BDC 4EF9 0000 D778             		jmp	DeleteObject
00016BE2                            ; ===========================================================================
00016BE2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016BE4 0000                       		dc.w loc_16B02-Obj78_Index2
00016BE6                            ; ===========================================================================
00016BE6                            
00016BE6                            Obj78_Move:				; XREF: Obj78_Index2
00016BE6 5328 002A                  		subq.b	#1,$2A(a0)
00016BEA 6B00                       		bmi.s	Obj78_Move2
00016BEC 4E75                       		rts	
00016BEE                            ; ===========================================================================
00016BEE                            
00016BEE                            Obj78_Move2:
00016BEE 5428 0025                  		addq.b	#2,$25(a0)
00016BF2 117C 0010 002A             		move.b	#$10,$2A(a0)
00016BF8 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016BFE 317C 0040 0014             		move.w	#$40,$14(a0)
00016C04 0868 0004 002B             		bchg	#4,$2B(a0)
00016C0A 6600                       		bne.s	loc_16AFC
00016C0C 4268 0010                  		clr.w	$10(a0)
00016C10 4468 0014                  		neg.w	$14(a0)
00016C14                            
00016C14                            loc_16AFC:
00016C14 08E8 0007 002B             		bset	#7,$2B(a0)
00016C1A                            
00016C1A                            loc_16B02:				; XREF: Obj78_Index2
00016C1A 5328 002A                  		subq.b	#1,$2A(a0)
00016C1E 6B00                       		bmi.s	loc_16B5E
00016C20 2F28 0008                  		move.l	8(a0),-(sp)
00016C24 2428 0008                  		move.l	8(a0),d2
00016C28 3028 0010                  		move.w	$10(a0),d0
00016C2C 0828 0000 0022             		btst	#0,$22(a0)
00016C32 6700                       		beq.s	loc_16B1E
00016C34 4440                       		neg.w	d0
00016C36                            
00016C36                            loc_16B1E:
00016C36 48C0                       		ext.l	d0
00016C38 E180                       		asl.l	#8,d0
00016C3A D480                       		add.l	d0,d2
00016C3C 2142 0008                  		move.l	d2,8(a0)
00016C40 4EBA E2F6                  		jsr	ObjHitFloor
00016C44 241F                       		move.l	(sp)+,d2
00016C46 0C41 FFF8                  		cmpi.w	#-8,d1
00016C4A 6D00                       		blt.s	loc_16B70
00016C4C 0C41 000C                  		cmpi.w	#$C,d1
00016C50 6C00                       		bge.s	loc_16B70
00016C52 D368 000C                  		add.w	d1,$C(a0)
00016C56 4842                       		swap	d2
00016C58 B468 0008                  		cmp.w	8(a0),d2
00016C5C 6700                       		beq.s	locret_16B5C
00016C5E 7000                       		moveq	#0,d0
00016C60 1028 003C                  		move.b	$3C(a0),d0
00016C64 5228 003C                  		addq.b	#1,$3C(a0)
00016C68 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016C6E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016C72                            
00016C72                            locret_16B5C:
00016C72 4E75                       		rts	
00016C74                            ; ===========================================================================
00016C74                            
00016C74                            loc_16B5E:
00016C74 5528 0025                  		subq.b	#2,$25(a0)
00016C78 117C 0007 002A             		move.b	#7,$2A(a0)
00016C7E 317C 0000 0010             		move.w	#0,$10(a0)
00016C84 4E75                       		rts	
00016C86                            ; ===========================================================================
00016C86                            
00016C86                            loc_16B70:
00016C86 2142 0008                  		move.l	d2,8(a0)
00016C8A 0868 0000 0022             		bchg	#0,$22(a0)
00016C90 1168 0022 0001             		move.b	$22(a0),1(a0)
00016C96 7000                       		moveq	#0,d0
00016C98 1028 003C                  		move.b	$3C(a0),d0
00016C9C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016CA2 5228 003C                  		addq.b	#1,$3C(a0)
00016CA6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016CAC 4E75                       		rts	
00016CAE                            ; ===========================================================================
00016CAE                            
00016CAE                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016CAE 2268 003C                  		movea.l	$3C(a0),a1
00016CB2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016CB8 6A00                       		bpl.s	Obj78_BodySeg1
00016CBA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016CC0 1028 0026                  		move.b	$26(a0),d0
00016CC4 0240 007F                  		andi.w	#$7F,d0
00016CC8 5828 0026                  		addq.b	#4,$26(a0)
00016CCC 4A31 0004                  		tst.b	4(a1,d0.w)
00016CD0 6A00                       		bpl.s	Obj78_AniBody
00016CD2 5828 0026                  		addq.b	#4,$26(a0)
00016CD6                            
00016CD6                            Obj78_AniBody:
00016CD6 1031 0000                  		move.b	(a1,d0.w),d0
00016CDA 5000                       		addq.b	#8,d0
00016CDC 1140 001A                  		move.b	d0,$1A(a0)
00016CE0                            
00016CE0                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016CE0 2268 003C                  		movea.l	$3C(a0),a1
00016CE4 4A28 0022                  		tst.b	$22(a0)
00016CE8 6B00 0000                  		bmi.w	loc_16C90
00016CEC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016CF2 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016CF8 6700 0000                  		beq.w	loc_16C64
00016CFC 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016D02 3029 0010                  		move.w	$10(a1),d0
00016D06 D069 0014                  		add.w	$14(a1),d0
00016D0A 3140 0010                  		move.w	d0,$10(a0)
00016D0E 2428 0008                  		move.l	8(a0),d2
00016D12 2602                       		move.l	d2,d3
00016D14 3028 0010                  		move.w	$10(a0),d0
00016D18 0828 0000 0022             		btst	#0,$22(a0)
00016D1E 6700                       		beq.s	loc_16C0C
00016D20 4440                       		neg.w	d0
00016D22                            
00016D22                            loc_16C0C:
00016D22 48C0                       		ext.l	d0
00016D24 E180                       		asl.l	#8,d0
00016D26 D480                       		add.l	d0,d2
00016D28 2142 0008                  		move.l	d2,8(a0)
00016D2C 4843                       		swap	d3
00016D2E B668 0008                  		cmp.w	8(a0),d3
00016D32 6700                       		beq.s	loc_16C64
00016D34 7000                       		moveq	#0,d0
00016D36 1028 003C                  		move.b	$3C(a0),d0
00016D3A 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016D3E 0C01 0080                  		cmpi.b	#-$80,d1
00016D42 6600                       		bne.s	loc_16C50
00016D44 4843                       		swap	d3
00016D46 2143 0008                  		move.l	d3,8(a0)
00016D4A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016D4E 0868 0000 0022             		bchg	#0,$22(a0)
00016D54 1168 0022 0001             		move.b	$22(a0),1(a0)
00016D5A 5228 003C                  		addq.b	#1,$3C(a0)
00016D5E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016D64 6000                       		bra.s	loc_16C64
00016D66                            ; ===========================================================================
00016D66                            
00016D66                            loc_16C50:
00016D66 4881                       		ext.w	d1
00016D68 D368 000C                  		add.w	d1,$C(a0)
00016D6C 5228 003C                  		addq.b	#1,$3C(a0)
00016D70 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016D76 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016D7A                            
00016D7A                            loc_16C64:
00016D7A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016D80 6700                       		beq.s	loc_16C90
00016D82 0C11 0027                  		cmpi.b	#$27,0(a1)
00016D86 6700                       		beq.s	loc_16C7C
00016D88 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016D8E 6600                       		bne.s	loc_16C82
00016D90                            
00016D90                            loc_16C7C:
00016D90 117C 000A 0024             		move.b	#$A,$24(a0)
00016D96                            
00016D96                            loc_16C82:
00016D96 4EF9 0000 D73C             		jmp	DisplaySprite
00016D9C                            
00016D9C                            ; ===========================================================================
00016D9C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016DA4                            ; ===========================================================================
00016DA4                            
00016DA4                            loc_16C90:
00016DA4 08E9 0007 0022             		bset	#7,$22(a1)
00016DAA                            
00016DAA                            loc_16C96:
00016DAA 7000                       		moveq	#0,d0
00016DAC 1028 0024                  		move.b	$24(a0),d0
00016DB0 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016DB4 0828 0000 0022             		btst	#0,$22(a0)
00016DBA 6700                       		beq.s	loc_16CAA
00016DBC 4440                       		neg.w	d0
00016DBE                            
00016DBE                            loc_16CAA:
00016DBE 3140 0010                  		move.w	d0,$10(a0)
00016DC2 317C FC00 0012             		move.w	#-$400,$12(a0)
00016DC8 117C 000C 0024             		move.b	#$C,$24(a0)
00016DCE 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016DD4                            
00016DD4                            loc_16CC0:				; XREF: Obj78_Index
00016DD4 4EB9 0000 D6EA             		jsr	ObjectFall
00016DDA 4A68 0012                  		tst.w	$12(a0)
00016DDE 6B00                       		bmi.s	loc_16CE0
00016DE0 4EBA E156                  		jsr	ObjHitFloor
00016DE4 4A41                       		tst.w	d1
00016DE6 6A00                       		bpl.s	loc_16CE0
00016DE8 D368 000C                  		add.w	d1,$C(a0)
00016DEC 317C FC00 0012             		move.w	#-$400,$12(a0)
00016DF2                            
00016DF2                            loc_16CE0:
00016DF2 4A28 0001                  		tst.b	1(a0)
00016DF6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016DFA 4EF9 0000 D73C             		jmp	DisplaySprite
00016E00                            ; ===========================================================================
00016E00                            Ani_obj78:
00016E00                            	include "_anim\obj78.asm"
00016E00                            ; ---------------------------------------------------------------------------
00016E00                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016E00                            ; ---------------------------------------------------------------------------
00016E00 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016E10 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016E20 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016E30 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016E40 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016E50 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016E60 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016E70 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016E80                            	even
00016E80                            	even
00016E80                            
00016E80                            ; ---------------------------------------------------------------------------
00016E80                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016E80                            ; ---------------------------------------------------------------------------
00016E80                            Map_obj78:
00016E80                            	include "_maps\obj78.asm"
00016E80                            ; ---------------------------------------------------------------------------
00016E80                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016E80                            ; ---------------------------------------------------------------------------
00016E80 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016E84 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016E88 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016E8C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016E90 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016E94 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016E98 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016E9C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016EA0 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016EA4 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016EA8 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016EAC 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016EB0 01                         byte_16D9E:	dc.b 1
00016EB1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016EB6 01                         byte_16DA4:	dc.b 1
00016EB7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016EBC 01                         byte_16DAA:	dc.b 1
00016EBD F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016EC2 01                         byte_16DB0:	dc.b 1
00016EC3 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016EC8 01                         byte_16DB6:	dc.b 1
00016EC9 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016ECE 01                         byte_16DBC:	dc.b 1
00016ECF ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016ED4 01                         byte_16DC2:	dc.b 1
00016ED5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016EDA 01                         byte_16DC8:	dc.b 1
00016EDB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016EE0 01                         byte_16DCE:	dc.b 1
00016EE1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016EE6 01                         byte_16DD4:	dc.b 1
00016EE7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016EEC 01                         byte_16DDA:	dc.b 1
00016EED F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016EF2 01                         byte_16DE0:	dc.b 1
00016EF3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016EF8 01                         byte_16DE6:	dc.b 1
00016EF9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016EFE 01                         byte_16DEC:	dc.b 1
00016EFF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016F04 01                         byte_16DF2:	dc.b 1
00016F05 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016F0A 01                         byte_16DF8:	dc.b 1
00016F0B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016F10 01                         byte_16DFE:	dc.b 1
00016F11 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016F16 01                         byte_16E04:	dc.b 1
00016F17 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016F1C 01                         byte_16E0A:	dc.b 1
00016F1D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016F22 01                         byte_16E10:	dc.b 1
00016F23 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016F28 01                         byte_16E16:	dc.b 1
00016F29 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016F2E 01                         byte_16E1C:	dc.b 1
00016F2F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016F34 01                         byte_16E22:	dc.b 1
00016F35 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016F3A 01                         byte_16E28:	dc.b 1
00016F3B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016F40                            		even
00016F40                            		even
00016F40                            
00016F40                            ; ===========================================================================
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            ; Object 79 - lamppost
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            
00016F40                            Obj79:					; XREF: Obj_Index
00016F40 7000                       		moveq	#0,d0
00016F42 1028 0024                  		move.b	$24(a0),d0
00016F46 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016F4A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016F4E 4EFA 8894                  		jmp	MarkObjGone
00016F52                            ; ===========================================================================
00016F52 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016F54 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016F56 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016F58 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016F5A                            ; ===========================================================================
00016F5A                            
00016F5A                            Obj79_Main:				; XREF: Obj79_Index
00016F5A 5428 0024                  		addq.b	#2,$24(a0)
00016F5E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00016F66 317C 07A0 0002             		move.w	#$7A0,2(a0)
00016F6C 117C 0004 0001             		move.b	#4,1(a0)
00016F72 117C 0008 0019             		move.b	#8,$19(a0)
00016F78 117C 0005 0018             		move.b	#5,$18(a0)
00016F7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F82 7000                       		moveq	#0,d0
00016F84 1028 0023                  		move.b	$23(a0),d0
00016F88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F8E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016F94 6600                       		bne.s	Obj79_RedLamp
00016F96 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016F9A 0201 007F                  		andi.b	#$7F,d1
00016F9E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00016FA2 0202 007F                  		andi.b	#$7F,d2
00016FA6 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00016FA8 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00016FAA                            
00016FAA                            Obj79_RedLamp:
00016FAA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016FB0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00016FB6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00016FBC 4E75                       		rts	
00016FBE                            ; ===========================================================================
00016FBE                            
00016FBE                            Obj79_BlueLamp:				; XREF: Obj79_Index
00016FBE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00016FC2 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00016FC6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016FCA 6B00 0000                  		bmi.w	locret_16F90
00016FCE 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016FD2 0201 007F                  		andi.b	#$7F,d1
00016FD6 1428 0028                  		move.b	$28(a0),d2
00016FDA 0202 007F                  		andi.b	#$7F,d2
00016FDE B202                       		cmp.b	d2,d1
00016FE0 6500                       		bcs.s	Obj79_HitLamp
00016FE2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FE6 7000                       		moveq	#0,d0
00016FE8 1028 0023                  		move.b	$23(a0),d0
00016FEC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016FF2 117C 0004 0024             		move.b	#4,$24(a0)
00016FF8 117C 0003 001A             		move.b	#3,$1A(a0)
00016FFE 6000 0000                  		bra.w	locret_16F90
00017002                            ; ===========================================================================
00017002                            
00017002                            Obj79_HitLamp:
00017002 3038 D008                  		move.w	($FFFFD008).w,d0
00017006 9068 0008                  		sub.w	8(a0),d0
0001700A 5040                       		addq.w	#8,d0
0001700C 0C40 0010                  		cmpi.w	#$10,d0
00017010 6400 0000                  		bcc.w	locret_16F90
00017014 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017018 9068 000C                  		sub.w	$C(a0),d0
0001701C 0640 0040                  		addi.w	#$40,d0
00017020 0C40 0068                  		cmpi.w	#$68,d0
00017024 6400                       		bcc.s	locret_16F90
00017026 303C 00A1                  		move.w	#$A1,d0
0001702A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017030 5428 0024                  		addq.b	#2,$24(a0)
00017034 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001703A 6600                       		bne.s	loc_16F76
0001703C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017040 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017046 3368 0008 0030             		move.w	8(a0),$30(a1)
0001704C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017052 0469 0018 0032             		subi.w	#$18,$32(a1)
00017058 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017060 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017066 137C 0004 0001             		move.b	#4,1(a1)
0001706C 137C 0008 0019             		move.b	#8,$19(a1)
00017072 137C 0004 0018             		move.b	#4,$18(a1)
00017078 137C 0002 001A             		move.b	#2,$1A(a1)
0001707E 337C 0020 0036             		move.w	#$20,$36(a1)
00017084                            
00017084                            loc_16F76:
00017084 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001708A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001708E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017092 7000                       		moveq	#0,d0
00017094 1028 0023                  		move.b	$23(a0),d0
00017098 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001709E                            
0001709E                            locret_16F90:
0001709E 4E75                       		rts	
000170A0                            ; ===========================================================================
000170A0                            
000170A0                            Obj79_AfterHit:				; XREF: Obj79_Index
000170A0 4E75                       		rts	
000170A2                            ; ===========================================================================
000170A2                            
000170A2                            Obj79_Twirl:				; XREF: Obj79_Index
000170A2 5368 0036                  		subq.w	#1,$36(a0)
000170A6 6A00                       		bpl.s	loc_16FA0
000170A8 117C 0004 0024             		move.b	#4,$24(a0)
000170AE                            
000170AE                            loc_16FA0:
000170AE 1028 0026                  		move.b	$26(a0),d0
000170B2 0428 0010 0026             		subi.b	#$10,$26(a0)
000170B8 0400 0040                  		subi.b	#$40,d0
000170BC 4EB9 0000 29DA             		jsr	(CalcSine).l
000170C2 C3FC 0C00                  		muls.w	#$C00,d1
000170C6 4841                       		swap	d1
000170C8 D268 0030                  		add.w	$30(a0),d1
000170CC 3141 0008                  		move.w	d1,8(a0)
000170D0 C1FC 0C00                  		muls.w	#$C00,d0
000170D4 4840                       		swap	d0
000170D6 D068 0032                  		add.w	$32(a0),d0
000170DA 3140 000C                  		move.w	d0,$C(a0)
000170DE 4E75                       		rts	
000170E0                            ; ===========================================================================
000170E0                            ; ---------------------------------------------------------------------------
000170E0                            ; Subroutine to	store information when you hit a lamppost
000170E0                            ; ---------------------------------------------------------------------------
000170E0                            
000170E0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000170E0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000170E6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000170EC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000170F2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000170F8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000170FE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017104 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001710A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017110 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017116 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001711C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017122 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017128 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001712E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017134 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001713A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017140 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017146 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001714C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017152 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017158 4E75                       		rts	
0001715A                            
0001715A                            ; ---------------------------------------------------------------------------
0001715A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001715A                            ; ---------------------------------------------------------------------------
0001715A                            
0001715A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001715A                            
0001715A                            
0001715A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001715A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017160 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017166 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001716C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017172 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017178 4278 FE20                  		clr.w	($FFFFFE20).w
0001717C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017180 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017186 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001718C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017190 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017196 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001719C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000171A2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000171A8 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000171AE 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000171B4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000171BA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000171C0 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000171C6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000171CC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000171D2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000171D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000171DE 6600                       		bne.s	loc_170E4
000171E0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000171E6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000171EC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000171F2                            
000171F2                            loc_170E4:
000171F2 4A38 FE30                  		tst.b	($FFFFFE30).w
000171F6 6A00                       		bpl.s	locret_170F6
000171F8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000171FC 0440 00A0                  		subi.w	#$A0,d0
00017200 31C0 F728                  		move.w	d0,($FFFFF728).w
00017204                            
00017204                            locret_170F6:
00017204 4E75                       		rts	
00017206                            ; End of function Obj79_LoadInfo
00017206                            
00017206                            ; ===========================================================================
00017206                            ; ---------------------------------------------------------------------------
00017206                            ; Sprite mappings - lamppost
00017206                            ; ---------------------------------------------------------------------------
00017206                            Map_obj79:
00017206                            	include "_maps\obj79.asm"
00017206                            ; ---------------------------------------------------------------------------
00017206                            ; Sprite mappings - lamppost
00017206                            ; ---------------------------------------------------------------------------
00017206 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001720A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001720E 06                         byte_17100:	dc.b 6
0001720F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017214 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017219 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001721E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017223 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017228 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001722D 04                         byte_1711F:	dc.b 4
0001722E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017233 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017238 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001723D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017242 02                         byte_17134:	dc.b 2
00017243 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017248 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001724D 06                         byte_1713F:	dc.b 6
0001724E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017253 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017258 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001725D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017262 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017267 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001726C                            		even
0001726C                            		even
0001726C                            
0001726C                            ; ===========================================================================
0001726C                            ; ---------------------------------------------------------------------------
0001726C                            ; Object 7D - hidden points at the end of a level
0001726C                            ; ---------------------------------------------------------------------------
0001726C                            
0001726C                            Obj7D:					; XREF: Obj_Index
0001726C 7000                       		moveq	#0,d0
0001726E 1028 0024                  		move.b	$24(a0),d0
00017272 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017276 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001727A                            ; ===========================================================================
0001727A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001727C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001727E                            ; ===========================================================================
0001727E                            
0001727E                            Obj7D_Main:				; XREF: Obj7D_Index
0001727E 7410                       		moveq	#$10,d2
00017280 3602                       		move.w	d2,d3
00017282 D643                       		add.w	d3,d3
00017284 43F8 D000                  		lea	($FFFFD000).w,a1
00017288 3029 0008                  		move.w	8(a1),d0
0001728C 9068 0008                  		sub.w	8(a0),d0
00017290 D042                       		add.w	d2,d0
00017292 B043                       		cmp.w	d3,d0
00017294 6400                       		bcc.s	Obj7D_ChkDel
00017296 3229 000C                  		move.w	$C(a1),d1
0001729A 9268 000C                  		sub.w	$C(a0),d1
0001729E D242                       		add.w	d2,d1
000172A0 B243                       		cmp.w	d3,d1
000172A2 6400                       		bcc.s	Obj7D_ChkDel
000172A4 4A78 FE08                  		tst.w	($FFFFFE08).w
000172A8 6600                       		bne.s	Obj7D_ChkDel
000172AA 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000172AE 6600                       		bne.s	Obj7D_ChkDel
000172B0 5428 0024                  		addq.b	#2,$24(a0)
000172B4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000172BC 317C 84B6 0002             		move.w	#$84B6,2(a0)
000172C2 0028 0004 0001             		ori.b	#4,1(a0)
000172C8 117C 0000 0018             		move.b	#0,$18(a0)
000172CE 117C 0010 0019             		move.b	#$10,$19(a0)
000172D4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000172DA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000172E0 303C 00C9                  		move.w	#$C9,d0
000172E4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bonus sound
000172EA 7000                       		moveq	#0,d0
000172EC 1028 0028                  		move.b	$28(a0),d0
000172F0 D040                       		add.w	d0,d0
000172F2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000172F6 4EB9 0000 0000             		jsr	AddPoints
000172FC                            
000172FC                            Obj7D_ChkDel:
000172FC 3028 0008                  		move.w	8(a0),d0
00017300 0240 FF80                  		andi.w	#$FF80,d0
00017304 3238 F700                  		move.w	($FFFFF700).w,d1
00017308 0441 0080                  		subi.w	#$80,d1
0001730C 0241 FF80                  		andi.w	#$FF80,d1
00017310 9041                       		sub.w	d1,d0
00017312 0C40 0280                  		cmpi.w	#$280,d0
00017316 6200                       		bhi.s	Obj7D_Delete
00017318 4E75                       		rts	
0001731A                            ; ===========================================================================
0001731A                            
0001731A                            Obj7D_Delete:
0001731A 4EF9 0000 D778             		jmp	DeleteObject
00017320                            ; ===========================================================================
00017320 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017322 03E8                       		dc.w 1000
00017324 0064                       		dc.w 100
00017326 0001                       		dc.w 1
00017328                            ; ===========================================================================
00017328                            
00017328                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017328 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001732C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001732E 3028 0008                  		move.w	8(a0),d0
00017332 0240 FF80                  		andi.w	#-$80,d0
00017336 3238 F700                  		move.w	($FFFFF700).w,d1
0001733A 0441 0080                  		subi.w	#$80,d1
0001733E 0241 FF80                  		andi.w	#-$80,d1
00017342 9041                       		sub.w	d1,d0
00017344 0C40 0280                  		cmpi.w	#$280,d0
00017348 6200                       		bhi.s	Obj7D_Delete2
0001734A 4EF9 0000 D73C             		jmp	DisplaySprite
00017350                            ; ===========================================================================
00017350                            
00017350                            Obj7D_Delete2:
00017350 4EF9 0000 D778             		jmp	DeleteObject
00017356                            ; ===========================================================================
00017356                            ; ---------------------------------------------------------------------------
00017356                            ; Sprite mappings - hidden points at the end of	a level
00017356                            ; ---------------------------------------------------------------------------
00017356                            Map_obj7D:
00017356                            	include "_maps\obj7D.asm"
00017356                            ; ---------------------------------------------------------------------------
00017356                            ; Sprite mappings - hidden points at the end of	a level
00017356                            ; ---------------------------------------------------------------------------
00017356 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001735A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001735E 00                         byte_17250:	dc.b 0
0001735F 01                         byte_17251:	dc.b 1
00017360 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017365 01                         byte_17257:	dc.b 1
00017366 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001736B 01                         byte_1725D:	dc.b 1
0001736C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017372 00                         		even
00017372 00                         		even
00017372                            
00017372                            ; ===========================================================================
00017372                            ; ---------------------------------------------------------------------------
00017372                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017372                            ; ---------------------------------------------------------------------------
00017372                            
00017372                            Obj8A:					; XREF: Obj_Index
00017372 7000                       		moveq	#0,d0
00017374 1028 0024                  		move.b	$24(a0),d0
00017378 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001737C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017380                            ; ===========================================================================
00017380 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017382 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017384                            ; ===========================================================================
00017384                            
00017384                            Obj8A_Main:				; XREF: Obj8A_Index
00017384 5428 0024                  		addq.b	#2,$24(a0)
00017388 317C 0120 0008             		move.w	#$120,8(a0)
0001738E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017394 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001739C 317C 05A0 0002             		move.w	#$5A0,2(a0)
000173A2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000173A6 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000173AA 117C 0000 0001             		move.b	#0,1(a0)
000173B0 117C 0000 0018             		move.b	#0,$18(a0)
000173B6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000173BC 6600                       		bne.s	Obj8A_Display	; if not, branch
000173BE 317C 00A6 0002             		move.w	#$A6,2(a0)
000173C4 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000173CA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000173CE 6700                       		beq.s	Obj8A_Display	; if not, branch
000173D0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000173D6 6600                       		bne.s	Obj8A_Display	; if not, branch
000173D8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000173DE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000173E4 4EF9 0000 D778             		jmp	DeleteObject
000173EA                            ; ===========================================================================
000173EA                            
000173EA                            Obj8A_Display:				; XREF: Obj8A_Index
000173EA 4EF9 0000 D73C             		jmp	DisplaySprite
000173F0                            ; ===========================================================================
000173F0                            ; ---------------------------------------------------------------------------
000173F0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000173F0                            ; ---------------------------------------------------------------------------
000173F0                            Map_obj8A:
000173F0                            	include "_maps\obj8A.asm"
000173F0                            ; --------------------------------------------------------------------------------
000173F0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000173F0                            ; --------------------------------------------------------------------------------
000173F0                            
000173F0                            SME_MD8yg:	
000173F0 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000173F4 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000173F8 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000173FC 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
00017400 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
00017404 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
00017406 0E                         SME_MD8yg_16:	dc.b $E	
00017407 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
0001740C F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
00017411 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
00017416 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
0001741B F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
00017420 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017425 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
0001742A F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
0001742F F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017434 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
00017439 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
0001743E F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017443 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017448 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
0001744D 10                         SME_MD8yg_5D:	dc.b $10	
0001744E D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017453 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017458 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
0001745D D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017462 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017467 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
0001746C D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017471 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017476 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
0001747B 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017480 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017485 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
0001748A 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001748F 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017494 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017499 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001749E 0A                         SME_MD8yg_AE:	dc.b $A	
0001749F D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
000174A4 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
000174A9 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
000174AE D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
000174B3 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
000174B8 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
000174BD D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
000174C2 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
000174C7 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000174CC 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000174D1 18                         SME_MD8yg_E1:	dc.b $18	
000174D2 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000174D7 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
000174DC D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
000174E1 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000174E6 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000174EB D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000174F0 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000174F5 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000174FA D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000174FF D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017504 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017509 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
0001750E D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017513 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017518 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
0001751D 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017522 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017527 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
0001752C 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017531 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017536 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
0001753B 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017540 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017545 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
0001754A 14                         SME_MD8yg_15A:	dc.b $14	
0001754B D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017550 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017555 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
0001755A D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
0001755F D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017564 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017569 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
0001756E 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017573 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017578 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
0001757D 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017582 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017587 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
0001758C 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017591 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017596 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
0001759B 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
000175A0 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
000175A5 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
000175AA 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
000175AF 1A                         SME_MD8yg_1BF:	dc.b $1A	
000175B0 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
000175B5 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
000175BA D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
000175BF D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
000175C4 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
000175C9 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
000175CE D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000175D3 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
000175D8 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
000175DD D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
000175E2 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
000175E7 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
000175EC 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
000175F1 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
000175F6 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
000175FB 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017600 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017605 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
0001760A 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
0001760F 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017614 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017619 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
0001761E 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017623 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017628 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
0001762D 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017632 17                         SME_MD8yg_242:	dc.b $17	
00017633 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017638 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
0001763D D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017642 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017647 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
0001764C D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017651 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017656 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
0001765B D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017660 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017665 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
0001766A D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
0001766F 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017674 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017679 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
0001767E 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017683 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017688 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
0001768D 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017692 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017697 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
0001769C 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
000176A1 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
000176A6 1F                         SME_MD8yg_2B6:	dc.b $1F	
000176A7 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
000176AC D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
000176B1 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
000176B6 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
000176BB D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
000176C0 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000176C5 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
000176CA D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
000176CF D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
000176D4 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
000176D9 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
000176DE D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
000176E3 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
000176E8 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
000176ED 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
000176F2 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
000176F7 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
000176FC 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017701 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017706 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
0001770B 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017710 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017715 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
0001771A 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
0001771F 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017724 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017729 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
0001772E 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017733 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017738 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
0001773D 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017742 0F                         SME_MD8yg_352:	dc.b $F	
00017743 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017748 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
0001774D F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017752 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017757 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
0001775C F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017761 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017766 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
0001776B F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017770 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017775 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
0001777A F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
0001777F F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017784 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017789 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
0001778E 08                         SME_MD8yg_39E:	dc.b 8	
0001778F 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017794 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017799 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
0001779E 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
000177A3 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
000177A8 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
000177AD 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
000177B2 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
000177B7 17                         SME_MD8yg_3C7:	dc.b $17	
000177B8 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
000177BD D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
000177C2 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
000177C7 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
000177CC D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
000177D1 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
000177D6 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
000177DB E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
000177E0 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
000177E5 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
000177EA D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
000177EF D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
000177F4 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
000177F9 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
000177FE E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017803 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017808 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
0001780D E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017812 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017817 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
0001781C F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017821 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017826 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
0001782C 00                         		even
0001782C 00                         		even
0001782C                            
0001782C                            ; ===========================================================================
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            ; Object 3D - Eggman (GHZ)
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            
0001782C                            Obj3D:					; XREF: Obj_Index
0001782C 7000                       		moveq	#0,d0
0001782E 1028 0024                  		move.b	$24(a0),d0
00017832 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017836 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001783A                            ; ===========================================================================
0001783A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001783C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001783E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017840 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017842                            
00017842 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017844 0401                       		dc.b 4,	1
00017846 0607                       		dc.b 6,	7
00017848                            ; ===========================================================================
00017848                            
00017848                            Obj3D_Main:				; XREF: Obj3D_Index
00017848 45F9 0001 7842             		lea	(Obj3D_ObjData).l,a2
0001784E 2248                       		movea.l	a0,a1
00017850 7202                       		moveq	#2,d1
00017852 6000                       		bra.s	Obj3D_LoadBoss
00017854                            ; ===========================================================================
00017854                            
00017854                            Obj3D_Loop:
00017854 4EB9 0000 DBD8             		jsr	SingleObjLoad2
0001785A 6600                       		bne.s	loc_17772
0001785C                            
0001785C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001785C 135A 0024                  		move.b	(a2)+,$24(a1)
00017860 12BC 003D                  		move.b	#$3D,0(a1)
00017864 3368 0008 0008             		move.w	8(a0),8(a1)
0001786A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017870 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017878 337C 0400 0002             		move.w	#$400,2(a1)
0001787E 137C 0004 0001             		move.b	#4,1(a1)
00017884 137C 0020 0019             		move.b	#$20,$19(a1)
0001788A 137C 0003 0018             		move.b	#3,$18(a1)
00017890 135A 001C                  		move.b	(a2)+,$1C(a1)
00017894 2348 0034                  		move.l	a0,$34(a1)
00017898 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001789C                            
0001789C                            loc_17772:
0001789C 3168 0008 0030             		move.w	8(a0),$30(a0)
000178A2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000178A8 117C 000F 0020             		move.b	#$F,$20(a0)
000178AE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000178B4                            
000178B4                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000178B4 7000                       		moveq	#0,d0
000178B6 1028 0025                  		move.b	$25(a0),d0
000178BA 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000178BE 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000178C2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000178C8 4EB9 0000 A7EE             		jsr	AnimateSprite
000178CE 1028 0022                  		move.b	$22(a0),d0
000178D2 0200 0003                  		andi.b	#3,d0
000178D6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000178DC 8128 0001                  		or.b	d0,1(a0)
000178E0 4EF9 0000 D73C             		jmp	DisplaySprite
000178E6                            ; ===========================================================================
000178E6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000178E8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000178EA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000178EC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000178EE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000178F0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000178F2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000178F4                            ; ===========================================================================
000178F4                            
000178F4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000178F4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000178FA 6100 0000                  		bsr.w	BossMove
000178FE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017904 6600                       		bne.s	loc_177E6
00017906 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001790C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017910                            
00017910                            loc_177E6:
00017910 1028 003F                  		move.b	$3F(a0),d0
00017914 4EB9 0000 29DA             		jsr	(CalcSine).l
0001791A EC40                       		asr.w	#6,d0
0001791C D068 0038                  		add.w	$38(a0),d0
00017920 3140 000C                  		move.w	d0,$C(a0)
00017924 3168 0030 0008             		move.w	$30(a0),8(a0)
0001792A 5428 003F                  		addq.b	#2,$3F(a0)
0001792E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017934 6400                       		bcc.s	locret_1784A
00017936 4A28 0022                  		tst.b	$22(a0)
0001793A 6B00                       		bmi.s	loc_1784C
0001793C 4A28 0020                  		tst.b	$20(a0)
00017940 6600                       		bne.s	locret_1784A
00017942 4A28 003E                  		tst.b	$3E(a0)
00017946 6600                       		bne.s	Obj3D_ShipFlash
00017948 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001794E 303C 00AC                  		move.w	#$AC,d0
00017952 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017958                            
00017958                            Obj3D_ShipFlash:
00017958 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001795C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001795E 4A51                       		tst.w	(a1)
00017960 6600                       		bne.s	loc_1783C
00017962 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017966                            
00017966                            loc_1783C:
00017966 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017968 5328 003E                  		subq.b	#1,$3E(a0)
0001796C 6600                       		bne.s	locret_1784A
0001796E 117C 000F 0020             		move.b	#$F,$20(a0)
00017974                            
00017974                            locret_1784A:
00017974 4E75                       		rts	
00017976                            ; ===========================================================================
00017976                            
00017976                            loc_1784C:				; XREF: loc_177E6
00017976 7064                       		moveq	#100,d0
00017978 6100 0000                  		bsr.w	AddPoints
0001797C 117C 0008 0025             		move.b	#8,$25(a0)
00017982 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017988 4E75                       		rts	
0001798A                            
0001798A                            ; ---------------------------------------------------------------------------
0001798A                            ; Defeated boss	subroutine
0001798A                            ; ---------------------------------------------------------------------------
0001798A                            
0001798A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001798A                            
0001798A                            
0001798A                            BossDefeated:
0001798A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001798E 0200 0007                  		andi.b	#7,d0
00017992 6600                       		bne.s	locret_178A2
00017994 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001799A 6600                       		bne.s	locret_178A2
0001799C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000179A0 3368 0008 0008             		move.w	8(a0),8(a1)
000179A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000179AC 4EB9 0000 29B4             		jsr	(RandomNumber).l
000179B2 3200                       		move.w	d0,d1
000179B4 7200                       		moveq	#0,d1
000179B6 1200                       		move.b	d0,d1
000179B8 E409                       		lsr.b	#2,d1
000179BA 0441 0020                  		subi.w	#$20,d1
000179BE D369 0008                  		add.w	d1,8(a1)
000179C2 E048                       		lsr.w	#8,d0
000179C4 E608                       		lsr.b	#3,d0
000179C6 D169 000C                  		add.w	d0,$C(a1)
000179CA                            
000179CA                            locret_178A2:
000179CA 4E75                       		rts	
000179CC                            ; End of function BossDefeated
000179CC                            
000179CC                            ; ---------------------------------------------------------------------------
000179CC                            ; Subroutine to	move a boss
000179CC                            ; ---------------------------------------------------------------------------
000179CC                            
000179CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179CC                            
000179CC                            
000179CC                            BossMove:
000179CC 2428 0030                  		move.l	$30(a0),d2
000179D0 2628 0038                  		move.l	$38(a0),d3
000179D4 3028 0010                  		move.w	$10(a0),d0
000179D8 48C0                       		ext.l	d0
000179DA E180                       		asl.l	#8,d0
000179DC D480                       		add.l	d0,d2
000179DE 3028 0012                  		move.w	$12(a0),d0
000179E2 48C0                       		ext.l	d0
000179E4 E180                       		asl.l	#8,d0
000179E6 D680                       		add.l	d0,d3
000179E8 2142 0030                  		move.l	d2,$30(a0)
000179EC 2143 0038                  		move.l	d3,$38(a0)
000179F0 4E75                       		rts	
000179F2                            ; End of function BossMove
000179F2                            
000179F2                            ; ===========================================================================
000179F2                            
000179F2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000179F2 317C FF00 0010             		move.w	#-$100,$10(a0)
000179F8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000179FE 6100 FFCC                  		bsr.w	BossMove
00017A02 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017A08 6600                       		bne.s	loc_17916
00017A0A 317C 0000 0010             		move.w	#0,$10(a0)
00017A10 317C 0000 0012             		move.w	#0,$12(a0)
00017A16 5428 0025                  		addq.b	#2,$25(a0)
00017A1A 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00017A20 6600                       		bne.s	loc_17910
00017A22 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017A26 3368 0030 0008             		move.w	$30(a0),8(a1)
00017A2C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017A32 2348 0034                  		move.l	a0,$34(a1)
00017A36                            
00017A36                            loc_17910:
00017A36 317C 0077 003C             		move.w	#$77,$3C(a0)
00017A3C                            
00017A3C                            loc_17916:
00017A3C 6000 FED2                  		bra.w	loc_177E6
00017A40                            ; ===========================================================================
00017A40                            
00017A40                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017A40 5368 003C                  		subq.w	#1,$3C(a0)
00017A44 6A00                       		bpl.s	Obj3D_Reverse
00017A46 5428 0025                  		addq.b	#2,$25(a0)
00017A4A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017A50 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017A56 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017A5C 6600                       		bne.s	Obj3D_Reverse
00017A5E 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017A64 317C 0040 0010             		move.w	#$40,$10(a0)
00017A6A                            
00017A6A                            Obj3D_Reverse:
00017A6A 0828 0000 0022             		btst	#0,$22(a0)
00017A70 6600                       		bne.s	loc_17950
00017A72 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017A76                            
00017A76                            loc_17950:
00017A76 6000 FE98                  		bra.w	loc_177E6
00017A7A                            ; ===========================================================================
00017A7A                            
00017A7A                            loc_17954:				; XREF: Obj3D_ShipIndex
00017A7A 5368 003C                  		subq.w	#1,$3C(a0)
00017A7E 6B00                       		bmi.s	loc_17960
00017A80 6100 FF4A                  		bsr.w	BossMove
00017A84 6000                       		bra.s	loc_17976
00017A86                            ; ===========================================================================
00017A86                            
00017A86                            loc_17960:
00017A86 0868 0000 0022             		bchg	#0,$22(a0)
00017A8C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017A92 5528 0025                  		subq.b	#2,$25(a0)
00017A96 317C 0000 0010             		move.w	#0,$10(a0)
00017A9C                            
00017A9C                            loc_17976:
00017A9C 6000 FE72                  		bra.w	loc_177E6
00017AA0                            ; ===========================================================================
00017AA0                            
00017AA0                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017AA0 5368 003C                  		subq.w	#1,$3C(a0)
00017AA4 6B00                       		bmi.s	loc_17984
00017AA6 6000 FEE2                  		bra.w	BossDefeated
00017AAA                            ; ===========================================================================
00017AAA                            
00017AAA                            loc_17984:
00017AAA 08E8 0000 0022             		bset	#0,$22(a0)
00017AB0 08A8 0007 0022             		bclr	#7,$22(a0)
00017AB6 4268 0010                  		clr.w	$10(a0)
00017ABA 5428 0025                  		addq.b	#2,$25(a0)
00017ABE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017AC4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017AC8 6600                       		bne.s	locret_179AA
00017ACA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017AD0                            
00017AD0                            locret_179AA:
00017AD0 4E75                       		rts	
00017AD2                            ; ===========================================================================
00017AD2                            
00017AD2                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017AD2 5268 003C                  		addq.w	#1,$3C(a0)
00017AD6 6700                       		beq.s	loc_179BC
00017AD8 6A00                       		bpl.s	loc_179C2
00017ADA 0668 0018 0012             		addi.w	#$18,$12(a0)
00017AE0 6000                       		bra.s	loc_179EE
00017AE2                            ; ===========================================================================
00017AE2                            
00017AE2                            loc_179BC:
00017AE2 4268 0012                  		clr.w	$12(a0)
00017AE6 6000                       		bra.s	loc_179EE
00017AE8                            ; ===========================================================================
00017AE8                            
00017AE8                            loc_179C2:
00017AE8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017AEE 6500                       		bcs.s	loc_179DA
00017AF0 6700                       		beq.s	loc_179E0
00017AF2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017AF8 6500                       		bcs.s	loc_179EE
00017AFA 5428 0025                  		addq.b	#2,$25(a0)
00017AFE 6000                       		bra.s	loc_179EE
00017B00                            ; ===========================================================================
00017B00                            
00017B00                            loc_179DA:
00017B00 5168 0012                  		subq.w	#8,$12(a0)
00017B04 6000                       		bra.s	loc_179EE
00017B06                            ; ===========================================================================
00017B06                            
00017B06                            loc_179E0:
00017B06 4268 0012                  		clr.w	$12(a0)
00017B0A 303C 0081                  		move.w	#$81,d0
00017B0E 4EB9 0000 1396             		jsr	(PlaySound).l	; play GHZ music
00017B14                            
00017B14                            loc_179EE:
00017B14 6100 FEB6                  		bsr.w	BossMove
00017B18 6000 FDF6                  		bra.w	loc_177E6
00017B1C                            ; ===========================================================================
00017B1C                            
00017B1C                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017B1C 317C 0400 0010             		move.w	#$400,$10(a0)
00017B22 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017B28 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017B2E 6700                       		beq.s	loc_17A10
00017B30 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017B34 6000                       		bra.s	loc_17A16
00017B36                            ; ===========================================================================
00017B36                            
00017B36                            loc_17A10:
00017B36 4A28 0001                  		tst.b	1(a0)
00017B3A 6A00                       		bpl.s	Obj3D_ShipDel
00017B3C                            
00017B3C                            loc_17A16:
00017B3C 6100 FE8E                  		bsr.w	BossMove
00017B40 6000 FDCE                  		bra.w	loc_177E6
00017B44                            ; ===========================================================================
00017B44                            
00017B44                            Obj3D_ShipDel:
00017B44 4EF9 0000 D778             		jmp	DeleteObject
00017B4A                            ; ===========================================================================
00017B4A                            
00017B4A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017B4A 7000                       		moveq	#0,d0
00017B4C 7201                       		moveq	#1,d1
00017B4E 2268 0034                  		movea.l	$34(a0),a1
00017B52 1029 0025                  		move.b	$25(a1),d0
00017B56 5900                       		subq.b	#4,d0
00017B58 6600                       		bne.s	loc_17A3E
00017B5A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017B60 6600                       		bne.s	loc_17A46
00017B62 7204                       		moveq	#4,d1
00017B64                            
00017B64                            loc_17A3E:
00017B64 5D00                       		subq.b	#6,d0
00017B66 6B00                       		bmi.s	loc_17A46
00017B68 720A                       		moveq	#$A,d1
00017B6A 6000                       		bra.s	loc_17A5A
00017B6C                            ; ===========================================================================
00017B6C                            
00017B6C                            loc_17A46:
00017B6C 4A29 0020                  		tst.b	$20(a1)
00017B70 6600                       		bne.s	loc_17A50
00017B72 7205                       		moveq	#5,d1
00017B74 6000                       		bra.s	loc_17A5A
00017B76                            ; ===========================================================================
00017B76                            
00017B76                            loc_17A50:
00017B76 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017B7C 6500                       		bcs.s	loc_17A5A
00017B7E 7204                       		moveq	#4,d1
00017B80                            
00017B80                            loc_17A5A:
00017B80 1141 001C                  		move.b	d1,$1C(a0)
00017B84 5500                       		subq.b	#2,d0
00017B86 6600                       		bne.s	Obj3D_FaceDisp
00017B88 117C 0006 001C             		move.b	#6,$1C(a0)
00017B8E 4A28 0001                  		tst.b	1(a0)
00017B92 6A00                       		bpl.s	Obj3D_FaceDel
00017B94                            
00017B94                            Obj3D_FaceDisp:
00017B94 6000                       		bra.s	Obj3D_Display
00017B96                            ; ===========================================================================
00017B96                            
00017B96                            Obj3D_FaceDel:
00017B96 4EF9 0000 D778             		jmp	DeleteObject
00017B9C                            ; ===========================================================================
00017B9C                            
00017B9C                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017B9C 117C 0007 001C             		move.b	#7,$1C(a0)
00017BA2 2268 0034                  		movea.l	$34(a0),a1
00017BA6 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017BAC 6600                       		bne.s	loc_17A96
00017BAE 117C 000B 001C             		move.b	#$B,$1C(a0)
00017BB4 4A28 0001                  		tst.b	1(a0)
00017BB8 6A00                       		bpl.s	Obj3D_FlameDel
00017BBA 6000                       		bra.s	Obj3D_FlameDisp
00017BBC                            ; ===========================================================================
00017BBC                            
00017BBC                            loc_17A96:
00017BBC 3029 0010                  		move.w	$10(a1),d0
00017BC0 6700                       		beq.s	Obj3D_FlameDisp
00017BC2 117C 0008 001C             		move.b	#8,$1C(a0)
00017BC8                            
00017BC8                            Obj3D_FlameDisp:
00017BC8 6000                       		bra.s	Obj3D_Display
00017BCA                            ; ===========================================================================
00017BCA                            
00017BCA                            Obj3D_FlameDel:
00017BCA 4EF9 0000 D778             		jmp	DeleteObject
00017BD0                            ; ===========================================================================
00017BD0                            
00017BD0                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017BD0 2268 0034                  		movea.l	$34(a0),a1
00017BD4 3169 0008 0008             		move.w	8(a1),8(a0)
00017BDA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017BE0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017BE6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017BEC 4EB9 0000 A7EE             		jsr	AnimateSprite
00017BF2 1028 0022                  		move.b	$22(a0),d0
00017BF6 0200 0003                  		andi.b	#3,d0
00017BFA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017C00 8128 0001                  		or.b	d0,1(a0)
00017C04 4EF9 0000 D73C             		jmp	DisplaySprite
00017C0A                            ; ===========================================================================
00017C0A                            ; ---------------------------------------------------------------------------
00017C0A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017C0A                            ; ---------------------------------------------------------------------------
00017C0A                            
00017C0A                            Obj48:					; XREF: Obj_Index
00017C0A 7000                       		moveq	#0,d0
00017C0C 1028 0024                  		move.b	$24(a0),d0
00017C10 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017C14 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017C18                            ; ===========================================================================
00017C18 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017C1A 0000                       		dc.w Obj48_Base-Obj48_Index
00017C1C 0000                       		dc.w Obj48_Display2-Obj48_Index
00017C1E 0000                       		dc.w loc_17C68-Obj48_Index
00017C20 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017C22                            ; ===========================================================================
00017C22                            
00017C22                            Obj48_Main:				; XREF: Obj48_Index
00017C22 5428 0024                  		addq.b	#2,$24(a0)
00017C26 317C 4080 0026             		move.w	#$4080,$26(a0)
00017C2C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017C32 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017C3A 317C 046C 0002             		move.w	#$46C,2(a0)
00017C40 45E8 0028                  		lea	$28(a0),a2
00017C44 14FC 0000                  		move.b	#0,(a2)+
00017C48 7205                       		moveq	#5,d1
00017C4A 2248                       		movea.l	a0,a1
00017C4C 6000                       		bra.s	loc_17B60
00017C4E                            ; ===========================================================================
00017C4E                            
00017C4E                            Obj48_MakeLinks:
00017C4E 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00017C54 6600                       		bne.s	Obj48_MakeBall
00017C56 3368 0008 0008             		move.w	8(a0),8(a1)
00017C5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017C62 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017C66 137C 0006 0024             		move.b	#6,$24(a1)
00017C6C 237C 0000 7D4A 0004        		move.l	#Map_obj15,4(a1)
00017C74 337C 0380 0002             		move.w	#$380,2(a1)
00017C7A 137C 0001 001A             		move.b	#1,$1A(a1)
00017C80 5228 0028                  		addq.b	#1,$28(a0)
00017C84                            
00017C84                            loc_17B60:				; XREF: Obj48_Main
00017C84 3A09                       		move.w	a1,d5
00017C86 0445 D000                  		subi.w	#$D000,d5
00017C8A EC4D                       		lsr.w	#6,d5
00017C8C 0245 007F                  		andi.w	#$7F,d5
00017C90 14C5                       		move.b	d5,(a2)+
00017C92 137C 0004 0001             		move.b	#4,1(a1)
00017C98 137C 0008 0019             		move.b	#8,$19(a1)
00017C9E 137C 0006 0018             		move.b	#6,$18(a1)
00017CA4 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017CAA 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017CAE                            
00017CAE                            Obj48_MakeBall:
00017CAE 137C 0008 0024             		move.b	#8,$24(a1)
00017CB4 237C 0000 82A8 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017CBC 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017CC2 137C 0001 001A             		move.b	#1,$1A(a1)
00017CC8 137C 0005 0018             		move.b	#5,$18(a1)
00017CCE 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017CD4 4E75                       		rts	
00017CD6                            ; ===========================================================================
00017CD6                            
00017CD6 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017CDC                            
00017CDC                            ; ===========================================================================
00017CDC                            
00017CDC                            Obj48_Base:				; XREF: Obj48_Index
00017CDC 47F9 0001 7CD6             		lea	(Obj48_PosData).l,a3
00017CE2 45E8 0028                  		lea	$28(a0),a2
00017CE6 7C00                       		moveq	#0,d6
00017CE8 1C1A                       		move.b	(a2)+,d6
00017CEA                            
00017CEA                            loc_17BC6:
00017CEA 7800                       		moveq	#0,d4
00017CEC 181A                       		move.b	(a2)+,d4
00017CEE ED4C                       		lsl.w	#6,d4
00017CF0 0684 00FF D000             		addi.l	#$FFD000,d4
00017CF6 2244                       		movea.l	d4,a1
00017CF8 101B                       		move.b	(a3)+,d0
00017CFA B029 003C                  		cmp.b	$3C(a1),d0
00017CFE 6700                       		beq.s	loc_17BE0
00017D00 5229 003C                  		addq.b	#1,$3C(a1)
00017D04                            
00017D04                            loc_17BE0:
00017D04 51CE FFE4                  		dbf	d6,loc_17BC6
00017D08                            
00017D08 B029 003C                  		cmp.b	$3C(a1),d0
00017D0C 6600                       		bne.s	loc_17BFA
00017D0E 2268 0034                  		movea.l	$34(a0),a1
00017D12 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017D18 6600                       		bne.s	loc_17BFA
00017D1A 5428 0024                  		addq.b	#2,$24(a0)
00017D1E                            
00017D1E                            loc_17BFA:
00017D1E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017D24 6700                       		beq.s	Obj48_Display
00017D26 5268 0032                  		addq.w	#1,$32(a0)
00017D2A                            
00017D2A                            Obj48_Display:
00017D2A 6100 0000                  		bsr.w	sub_17C2A
00017D2E 1028 0026                  		move.b	$26(a0),d0
00017D32 4EB9 0000 7CBC             		jsr	(Obj15_Move2).l
00017D38 4EF9 0000 D73C             		jmp	DisplaySprite
00017D3E                            ; ===========================================================================
00017D3E                            
00017D3E                            Obj48_Display2:				; XREF: Obj48_Index
00017D3E 6100 0000                  		bsr.w	sub_17C2A
00017D42 4EB9 0000 7C7C             		jsr	(Obj48_Move).l
00017D48 4EF9 0000 D73C             		jmp	DisplaySprite
00017D4E                            
00017D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D4E                            
00017D4E                            
00017D4E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017D4E 2268 0034                  		movea.l	$34(a0),a1
00017D52 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017D58 6400                       		bcc.s	loc_17C3C
00017D5A 0868 0000 001A             		bchg	#0,$1A(a0)
00017D60                            
00017D60                            loc_17C3C:
00017D60 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017D66 3029 000C                  		move.w	$C(a1),d0
00017D6A D068 0032                  		add.w	$32(a0),d0
00017D6E 3140 0038                  		move.w	d0,$38(a0)
00017D72 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017D78 4A29 0022                  		tst.b	$22(a1)
00017D7C 6A00                       		bpl.s	locret_17C66
00017D7E 10BC 003F                  		move.b	#$3F,0(a0)
00017D82 117C 0000 0024             		move.b	#0,$24(a0)
00017D88                            
00017D88                            locret_17C66:
00017D88 4E75                       		rts	
00017D8A                            ; End of function sub_17C2A
00017D8A                            
00017D8A                            ; ===========================================================================
00017D8A                            
00017D8A                            loc_17C68:				; XREF: Obj48_Index
00017D8A 2268 0034                  		movea.l	$34(a0),a1
00017D8E 4A29 0022                  		tst.b	$22(a1)
00017D92 6A00                       		bpl.s	Obj48_Display3
00017D94 10BC 003F                  		move.b	#$3F,0(a0)
00017D98 117C 0000 0024             		move.b	#0,$24(a0)
00017D9E                            
00017D9E                            Obj48_Display3:
00017D9E 4EF9 0000 D73C             		jmp	DisplaySprite
00017DA4                            ; ===========================================================================
00017DA4                            
00017DA4                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017DA4 7000                       		moveq	#0,d0
00017DA6 4A28 001A                  		tst.b	$1A(a0)
00017DAA 6600                       		bne.s	Obj48_Vanish
00017DAC 5200                       		addq.b	#1,d0
00017DAE                            
00017DAE                            Obj48_Vanish:
00017DAE 1140 001A                  		move.b	d0,$1A(a0)
00017DB2 2268 0034                  		movea.l	$34(a0),a1
00017DB6 4A29 0022                  		tst.b	$22(a1)
00017DBA 6A00                       		bpl.s	Obj48_Display4
00017DBC 117C 0000 0020             		move.b	#0,$20(a0)
00017DC2 6100 FBC6                  		bsr.w	BossDefeated
00017DC6 5328 003C                  		subq.b	#1,$3C(a0)
00017DCA 6A00                       		bpl.s	Obj48_Display4
00017DCC 10BC 003F                  		move.b	#$3F,(a0)
00017DD0 117C 0000 0024             		move.b	#0,$24(a0)
00017DD6                            
00017DD6                            Obj48_Display4:
00017DD6 4EF9 0000 D73C             		jmp	DisplaySprite
00017DDC                            ; ===========================================================================
00017DDC                            Ani_Eggman:
00017DDC                            	include "_anim\Eggman.asm"
00017DDC                            ; ---------------------------------------------------------------------------
00017DDC                            ; Animation script - Eggman (bosses)
00017DDC                            ; ---------------------------------------------------------------------------
00017DDC 0000                       		dc.w byte_17CD4-Ani_Eggman
00017DDE 0000                       		dc.w byte_17CD8-Ani_Eggman
00017DE0 0000                       		dc.w byte_17CDC-Ani_Eggman
00017DE2 0000                       		dc.w byte_17CE0-Ani_Eggman
00017DE4 0000                       		dc.w byte_17CE4-Ani_Eggman
00017DE6 0000                       		dc.w byte_17CE8-Ani_Eggman
00017DE8 0000                       		dc.w byte_17CEC-Ani_Eggman
00017DEA 0000                       		dc.w byte_17CF0-Ani_Eggman
00017DEC 0000                       		dc.w byte_17CF4-Ani_Eggman
00017DEE 0000                       		dc.w byte_17CF8-Ani_Eggman
00017DF0 0000                       		dc.w byte_17CFC-Ani_Eggman
00017DF2 0000                       		dc.w byte_17D00-Ani_Eggman
00017DF4 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017DF8 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017DFC 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017E00 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017E04 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017E08 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017E0C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017E10 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017E14 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017E18 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017E1C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017E20 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017E2C                            		even
00017E2C                            		even
00017E2C                            
00017E2C                            ; ---------------------------------------------------------------------------
00017E2C                            ; Sprite mappings - Eggman (boss levels)
00017E2C                            ; ---------------------------------------------------------------------------
00017E2C                            Map_Eggman:
00017E2C                            	include "_maps\Eggman.asm"
00017E2C                            Map_dc7e:
00017E2C 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00017E2E 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00017E30 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00017E32 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00017E34 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00017E36 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00017E38 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00017E3A 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00017E3C 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00017E3E 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00017E40 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00017E42 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00017E44 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00017E46 06                         Map_dc7e_1A: 	dc.b $6
00017E47 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00017E4C EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00017E51 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00017E56 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00017E5B 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00017E60 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00017E65 02                         Map_dc7e_39: 	dc.b $2
00017E66 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017E6B EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00017E70 02                         Map_dc7e_44: 	dc.b $2
00017E71 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017E76 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00017E7B 03                         Map_dc7e_4F: 	dc.b $3
00017E7C E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00017E81 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00017E86 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00017E8B 03                         Map_dc7e_5F: 	dc.b $3
00017E8C E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00017E91 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00017E96 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00017E9B 03                         Map_dc7e_6F: 	dc.b $3
00017E9C E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00017EA1 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00017EA6 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00017EAB 03                         Map_dc7e_7F: 	dc.b $3
00017EAC E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00017EB1 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017EB6 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00017EBB 04                         Map_dc7e_8F: 	dc.b $4
00017EBC E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00017EC1 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00017EC6 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00017ECB EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00017ED0 01                         Map_dc7e_A4: 	dc.b $1
00017ED1 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00017ED6 01                         Map_dc7e_AA: 	dc.b $1
00017ED7 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00017EDC 00                         Map_dc7e_B0: 	dc.b $0
00017EDD 02                         Map_dc7e_B1: 	dc.b $2
00017EDE 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00017EE3 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00017EE8 02                         Map_dc7e_BC: 	dc.b $2
00017EE9 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00017EEE 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00017EF4 00                         	even
00017EF4 00                         	even
00017EF4                            
00017EF4                            ; ---------------------------------------------------------------------------
00017EF4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017EF4                            ; ---------------------------------------------------------------------------
00017EF4                            Map_BossItems:
00017EF4                            	include "_maps\Boss items.asm"
00017EF4                            ; ---------------------------------------------------------------------------
00017EF4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017EF4                            ; ---------------------------------------------------------------------------
00017EF4 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017EF8 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017EFC 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017F00 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017F04 01                         byte_17DE4:	dc.b 1
00017F05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017F0A 02                         byte_17DEA:	dc.b 2
00017F0B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017F10 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017F15 00                         		dc.b 0
00017F16 01                         byte_17DF6:	dc.b 1
00017F17 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017F1C 01                         byte_17DFC:	dc.b 1
00017F1D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017F22 01                         byte_17E02:	dc.b 1
00017F23 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017F28 04                         byte_17E08:	dc.b 4
00017F29 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017F2E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017F33 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017F38 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017F3D 00                         		dc.b 0
00017F3E 02                         byte_17E1E:	dc.b 2
00017F3F 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017F44 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017F49 00                         		dc.b 0
00017F4A 02                         byte_17E2A:	dc.b 2
00017F4B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017F50 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017F56 00                         		even
00017F56 00                         		even
00017F56                            
00017F56                            ; ===========================================================================
00017F56                            ; ---------------------------------------------------------------------------
00017F56                            ; Object 77 - Eggman (LZ)
00017F56                            ; ---------------------------------------------------------------------------
00017F56                            
00017F56                            Obj77:					; XREF: Obj_Index
00017F56 7000                       		moveq	#0,d0
00017F58 1028 0024                  		move.b	$24(a0),d0
00017F5C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017F60 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00017F64                            ; ===========================================================================
00017F64 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00017F66 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00017F68 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00017F6A 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00017F6C                            
00017F6C 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00017F6E 0401                       		dc.b 4,	1
00017F70 0607                       		dc.b 6,	7
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            Obj77_Main:				; XREF: Obj77_Index
00017F72 317C 1E10 0008             		move.w	#$1E10,8(a0)
00017F78 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00017F7E 3168 0008 0030             		move.w	8(a0),$30(a0)
00017F84 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017F8A 117C 000F 0020             		move.b	#$F,$20(a0)
00017F90 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017F96 117C 0004 0018             		move.b	#4,$18(a0)
00017F9C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00017FA0 2248                       		movea.l	a0,a1
00017FA2 7202                       		moveq	#2,d1
00017FA4 6000                       		bra.s	Obj77_LoadBoss
00017FA6                            ; ===========================================================================
00017FA6                            
00017FA6                            Obj77_Loop:
00017FA6 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00017FAC 6600                       		bne.s	Obj77_ShipMain
00017FAE 12BC 0077                  		move.b	#$77,0(a1)
00017FB2 3368 0008 0008             		move.w	8(a0),8(a1)
00017FB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FBE                            
00017FBE                            Obj77_LoadBoss:				; XREF: Obj77_Main
00017FBE 08A8 0000 0022             		bclr	#0,$22(a0)
00017FC4 4229 0025                  		clr.b	$25(a1)
00017FC8 135A 0024                  		move.b	(a2)+,$24(a1)
00017FCC 135A 001C                  		move.b	(a2)+,$1C(a1)
00017FD0 1368 0018 0018             		move.b	$18(a0),$18(a1)
00017FD6 237C 0001 7E2C 0004        		move.l	#Map_Eggman,4(a1)
00017FDE 337C 0400 0002             		move.w	#$400,2(a1)
00017FE4 137C 0004 0001             		move.b	#4,1(a1)
00017FEA 137C 0020 0019             		move.b	#$20,$19(a1)
00017FF0 2348 0034                  		move.l	a0,$34(a1)
00017FF4 51C9 FFB0                  		dbf	d1,Obj77_Loop
00017FF8                            
00017FF8                            Obj77_ShipMain:
00017FF8 43F8 D000                  		lea	($FFFFD000).w,a1
00017FFC 7000                       		moveq	#0,d0
00017FFE 1028 0025                  		move.b	$25(a0),d0
00018002 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018006 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001800A 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
00018010 4EB9 0000 A7EE             		jsr	AnimateSprite
00018016 7003                       		moveq	#3,d0
00018018 C028 0022                  		and.b	$22(a0),d0
0001801C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018022 8128 0001                  		or.b	d0,1(a0)
00018026 4EF9 0000 D73C             		jmp	DisplaySprite
0001802C                            ; ===========================================================================
0001802C 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018030 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018034 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018038 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001803C                            ; ===========================================================================
0001803C                            
0001803C                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001803C 3029 0008                  		move.w	8(a1),d0
00018040 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018044 6500                       		bcs.s	loc_17F38
00018046 317C FE80 0012             		move.w	#-$180,$12(a0)
0001804C 317C 0060 0010             		move.w	#$60,$10(a0)
00018052 5428 0025                  		addq.b	#2,$25(a0)
00018056                            
00018056                            loc_17F38:
00018056 6100 F974                  		bsr.w	BossMove
0001805A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018060 3168 0030 0008             		move.w	$30(a0),8(a0)
00018066                            
00018066                            loc_17F48:
00018066 4A28 003D                  		tst.b	$3D(a0)
0001806A 6600                       		bne.s	loc_17F8E
0001806C 4A28 0022                  		tst.b	$22(a0)
00018070 6B00                       		bmi.s	loc_17F92
00018072 4A28 0020                  		tst.b	$20(a0)
00018076 6600                       		bne.s	locret_17F8C
00018078 4A28 003E                  		tst.b	$3E(a0)
0001807C 6600                       		bne.s	loc_17F70
0001807E 117C 0020 003E             		move.b	#$20,$3E(a0)
00018084 303C 00AC                  		move.w	#$AC,d0
00018088 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001808E                            
0001808E                            loc_17F70:
0001808E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018092 7000                       		moveq	#0,d0
00018094 4A51                       		tst.w	(a1)
00018096 6600                       		bne.s	loc_17F7E
00018098 303C 0EEE                  		move.w	#$EEE,d0
0001809C                            
0001809C                            loc_17F7E:
0001809C 3280                       		move.w	d0,(a1)
0001809E 5328 003E                  		subq.b	#1,$3E(a0)
000180A2 6600                       		bne.s	locret_17F8C
000180A4 117C 000F 0020             		move.b	#$F,$20(a0)
000180AA                            
000180AA                            locret_17F8C:
000180AA 4E75                       		rts	
000180AC                            ; ===========================================================================
000180AC                            
000180AC                            loc_17F8E:				; XREF: loc_17F48
000180AC 6000 F8DC                  		bra.w	BossDefeated
000180B0                            ; ===========================================================================
000180B0                            
000180B0                            loc_17F92:				; XREF: loc_17F48
000180B0 7064                       		moveq	#100,d0
000180B2 6100 0000                  		bsr.w	AddPoints
000180B6 117C 00FF 003D             		move.b	#-1,$3D(a0)
000180BC 4E75                       		rts	
000180BE                            ; ===========================================================================
000180BE                            
000180BE                            loc_17FA0:				; XREF: Obj77_ShipIndex
000180BE 70FE                       		moveq	#-2,d0
000180C0 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000180C6 6500                       		bcs.s	loc_17FB6
000180C8 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000180CE 4268 0010                  		clr.w	$10(a0)
000180D2 5240                       		addq.w	#1,d0
000180D4                            
000180D4                            loc_17FB6:
000180D4 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000180DA 6E00                       		bgt.s	loc_17FCA
000180DC 317C 0500 0038             		move.w	#$500,$38(a0)
000180E2 4268 0012                  		clr.w	$12(a0)
000180E6 5240                       		addq.w	#1,d0
000180E8                            
000180E8                            loc_17FCA:
000180E8 6600                       		bne.s	loc_17FDC
000180EA 317C 0140 0010             		move.w	#$140,$10(a0)
000180F0 317C FE00 0012             		move.w	#-$200,$12(a0)
000180F6 5428 0025                  		addq.b	#2,$25(a0)
000180FA                            
000180FA                            loc_17FDC:
000180FA 6000 FF5A                  		bra.w	loc_17F38
000180FE                            ; ===========================================================================
000180FE                            
000180FE                            loc_17FE0:				; XREF: Obj77_ShipIndex
000180FE 70FE                       		moveq	#-2,d0
00018100 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018106 6500                       		bcs.s	loc_17FF6
00018108 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001810E 4268 0010                  		clr.w	$10(a0)
00018112 5240                       		addq.w	#1,d0
00018114                            
00018114                            loc_17FF6:
00018114 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001811A 6E00                       		bgt.s	loc_1800A
0001811C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018122 4268 0012                  		clr.w	$12(a0)
00018126 5240                       		addq.w	#1,d0
00018128                            
00018128                            loc_1800A:
00018128 6600                       		bne.s	loc_1801A
0001812A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018130 5428 0025                  		addq.b	#2,$25(a0)
00018134 4228 003F                  		clr.b	$3F(a0)
00018138                            
00018138                            loc_1801A:
00018138 6000 FF1C                  		bra.w	loc_17F38
0001813C                            ; ===========================================================================
0001813C                            
0001813C                            loc_1801E:				; XREF: Obj77_ShipIndex
0001813C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018142 6E00                       		bgt.s	loc_1804E
00018144 317C 0100 0038             		move.w	#$100,$38(a0)
0001814A 317C 0140 0010             		move.w	#$140,$10(a0)
00018150 317C FF80 0012             		move.w	#-$80,$12(a0)
00018156 4A28 003D                  		tst.b	$3D(a0)
0001815A 6700                       		beq.s	loc_18046
0001815C E1E8 0010                  		asl	$10(a0)
00018160 E1E8 0012                  		asl	$12(a0)
00018164                            
00018164                            loc_18046:
00018164 5428 0025                  		addq.b	#2,$25(a0)
00018168 6000 FEEC                  		bra.w	loc_17F38
0001816C                            ; ===========================================================================
0001816C                            
0001816C                            loc_1804E:
0001816C 08E8 0000 0022             		bset	#0,$22(a0)
00018172 5428 003F                  		addq.b	#2,$3F(a0)
00018176 1028 003F                  		move.b	$3F(a0),d0
0001817A 4EB9 0000 29DA             		jsr	(CalcSine).l
00018180 4A41                       		tst.w	d1
00018182 6A00                       		bpl.s	loc_1806C
00018184 08A8 0000 0022             		bclr	#0,$22(a0)
0001818A                            
0001818A                            loc_1806C:
0001818A E840                       		asr.w	#4,d0
0001818C 4840                       		swap	d0
0001818E 4240                       		clr.w	d0
00018190 D0A8 0030                  		add.l	$30(a0),d0
00018194 4840                       		swap	d0
00018196 3140 0008                  		move.w	d0,8(a0)
0001819A 3028 0012                  		move.w	$12(a0),d0
0001819E 3238 D00C                  		move.w	($FFFFD00C).w,d1
000181A2 9268 000C                  		sub.w	$C(a0),d1
000181A6 6500                       		bcs.s	loc_180A2
000181A8 0441 0048                  		subi.w	#$48,d1
000181AC 6500                       		bcs.s	loc_180A2
000181AE E240                       		asr.w	#1,d0
000181B0 0441 0028                  		subi.w	#$28,d1
000181B4 6500                       		bcs.s	loc_180A2
000181B6 E240                       		asr.w	#1,d0
000181B8 0441 0028                  		subi.w	#$28,d1
000181BC 6500                       		bcs.s	loc_180A2
000181BE 7000                       		moveq	#0,d0
000181C0                            
000181C0                            loc_180A2:
000181C0 48C0                       		ext.l	d0
000181C2 E180                       		asl.l	#8,d0
000181C4 4A28 003D                  		tst.b	$3D(a0)
000181C8 6700                       		beq.s	loc_180AE
000181CA D080                       		add.l	d0,d0
000181CC                            
000181CC                            loc_180AE:
000181CC D1A8 0038                  		add.l	d0,$38(a0)
000181D0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000181D6 6000 FE8E                  		bra.w	loc_17F48
000181DA                            ; ===========================================================================
000181DA                            
000181DA                            loc_180BC:				; XREF: Obj77_ShipIndex
000181DA 70FE                       		moveq	#-2,d0
000181DC 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000181E2 6500                       		bcs.s	loc_180D2
000181E4 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000181EA 4268 0010                  		clr.w	$10(a0)
000181EE 5240                       		addq.w	#1,d0
000181F0                            
000181F0                            loc_180D2:
000181F0 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000181F6 6E00                       		bgt.s	loc_180E6
000181F8 317C 00C0 0038             		move.w	#$C0,$38(a0)
000181FE 4268 0012                  		clr.w	$12(a0)
00018202 5240                       		addq.w	#1,d0
00018204                            
00018204                            loc_180E6:
00018204 6600                       		bne.s	loc_180F2
00018206 5428 0025                  		addq.b	#2,$25(a0)
0001820A 08A8 0000 0022             		bclr	#0,$22(a0)
00018210                            
00018210                            loc_180F2:
00018210 6000 FE44                  		bra.w	loc_17F38
00018214                            ; ===========================================================================
00018214                            
00018214                            loc_180F6:				; XREF: Obj77_ShipIndex
00018214 4A28 003D                  		tst.b	$3D(a0)
00018218 6600                       		bne.s	loc_18112
0001821A 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018220 6D00                       		blt.s	loc_18126
00018222 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018228 6E00                       		bgt.s	loc_18126
0001822A 117C 0032 003C             		move.b	#$32,$3C(a0)
00018230                            
00018230                            loc_18112:
00018230 303C 0082                  		move.w	#$82,d0
00018234 4EB9 0000 1396             		jsr	(PlaySound).l	; play LZ music
0001823A 08E8 0000 0022             		bset	#0,$22(a0)
00018240 5428 0025                  		addq.b	#2,$25(a0)
00018244                            
00018244                            loc_18126:
00018244 6000 FE10                  		bra.w	loc_17F38
00018248                            ; ===========================================================================
00018248                            
00018248                            loc_1812A:				; XREF: Obj77_ShipIndex
00018248 4A28 003D                  		tst.b	$3D(a0)
0001824C 6600                       		bne.s	loc_18136
0001824E 5328 003C                  		subq.b	#1,$3C(a0)
00018252 6600                       		bne.s	loc_1814E
00018254                            
00018254                            loc_18136:
00018254 4228 003C                  		clr.b	$3C(a0)
00018258 317C 0400 0010             		move.w	#$400,$10(a0)
0001825E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018264 4228 003D                  		clr.b	$3D(a0)
00018268 5428 0025                  		addq.b	#2,$25(a0)
0001826C                            
0001826C                            loc_1814E:
0001826C 6000 FDE8                  		bra.w	loc_17F38
00018270                            ; ===========================================================================
00018270                            
00018270                            loc_18152:				; XREF: Obj77_ShipIndex
00018270 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018276 6400                       		bcc.s	loc_18160
00018278 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001827C 6000                       		bra.s	loc_18166
0001827E                            ; ===========================================================================
0001827E                            
0001827E                            loc_18160:
0001827E 4A28 0001                  		tst.b	1(a0)
00018282 6A00                       		bpl.s	Obj77_ShipDel
00018284                            
00018284                            loc_18166:
00018284 6000 FDD0                  		bra.w	loc_17F38
00018288                            ; ===========================================================================
00018288                            
00018288                            Obj77_ShipDel:
00018288 4EF9 0000 D778             		jmp	DeleteObject
0001828E                            ; ===========================================================================
0001828E                            
0001828E                            Obj77_FaceMain:				; XREF: Obj77_Index
0001828E 2268 0034                  		movea.l	$34(a0),a1
00018292 1011                       		move.b	(a1),d0
00018294 B010                       		cmp.b	(a0),d0
00018296 6600                       		bne.s	Obj77_FaceDel
00018298 7000                       		moveq	#0,d0
0001829A 1029 0025                  		move.b	$25(a1),d0
0001829E 7201                       		moveq	#1,d1
000182A0 4A28 003D                  		tst.b	$3D(a0)
000182A4 6700                       		beq.s	loc_1818C
000182A6 720A                       		moveq	#$A,d1
000182A8 6000                       		bra.s	loc_181A0
000182AA                            ; ===========================================================================
000182AA                            
000182AA                            loc_1818C:
000182AA 4A29 0020                  		tst.b	$20(a1)
000182AE 6600                       		bne.s	loc_18196
000182B0 7205                       		moveq	#5,d1
000182B2 6000                       		bra.s	loc_181A0
000182B4                            ; ===========================================================================
000182B4                            
000182B4                            loc_18196:
000182B4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000182BA 6500                       		bcs.s	loc_181A0
000182BC 7204                       		moveq	#4,d1
000182BE                            
000182BE                            loc_181A0:
000182BE 1141 001C                  		move.b	d1,$1C(a0)
000182C2 0C00 000E                  		cmpi.b	#$E,d0
000182C6 6600                       		bne.s	loc_181B6
000182C8 117C 0006 001C             		move.b	#6,$1C(a0)
000182CE 4A28 0001                  		tst.b	1(a0)
000182D2 6A00                       		bpl.s	Obj77_FaceDel
000182D4                            
000182D4                            loc_181B6:
000182D4 6000                       		bra.s	Obj77_Display
000182D6                            ; ===========================================================================
000182D6                            
000182D6                            Obj77_FaceDel:
000182D6 4EF9 0000 D778             		jmp	DeleteObject
000182DC                            ; ===========================================================================
000182DC                            
000182DC                            Obj77_FlameMain:			; XREF: Obj77_Index
000182DC 117C 0007 001C             		move.b	#7,$1C(a0)
000182E2 2268 0034                  		movea.l	$34(a0),a1
000182E6 1011                       		move.b	(a1),d0
000182E8 B010                       		cmp.b	(a0),d0
000182EA 6600                       		bne.s	Obj77_FlameDel
000182EC 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000182F2 6600                       		bne.s	loc_181F0
000182F4 117C 000B 001C             		move.b	#$B,$1C(a0)
000182FA 4A28 0001                  		tst.b	1(a0)
000182FE 6A00                       		bpl.s	Obj77_FlameDel
00018300 6000                       		bra.s	loc_181F0
00018302                            ; ===========================================================================
00018302 4A69 0010                  		tst.w	$10(a1)
00018306 6700                       		beq.s	loc_181F0
00018308 117C 0008 001C             		move.b	#8,$1C(a0)
0001830E                            
0001830E                            loc_181F0:
0001830E 6000                       		bra.s	Obj77_Display
00018310                            ; ===========================================================================
00018310                            
00018310                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018310 4EF9 0000 D778             		jmp	DeleteObject
00018316                            ; ===========================================================================
00018316                            
00018316                            Obj77_Display:
00018316 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
0001831C 4EB9 0000 A7EE             		jsr	AnimateSprite
00018322 2268 0034                  		movea.l	$34(a0),a1
00018326 3169 0008 0008             		move.w	8(a1),8(a0)
0001832C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018332 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018338 7003                       		moveq	#3,d0
0001833A C028 0022                  		and.b	$22(a0),d0
0001833E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018344 8128 0001                  		or.b	d0,1(a0)
00018348 4EF9 0000 D73C             		jmp	DisplaySprite
0001834E                            ; ===========================================================================
0001834E                            ; ---------------------------------------------------------------------------
0001834E                            ; Object 73 - Eggman (MZ)
0001834E                            ; ---------------------------------------------------------------------------
0001834E                            
0001834E                            Obj73:					; XREF: Obj_Index
0001834E 7000                       		moveq	#0,d0
00018350 1028 0024                  		move.b	$24(a0),d0
00018354 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018358 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001835C                            ; ===========================================================================
0001835C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001835E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018360 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018362 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018364 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018366                            
00018366 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018369 0401 04                    		dc.b 4,	1, 4
0001836C 0607 04                    		dc.b 6,	7, 4
0001836F 0800 03                    		dc.b 8,	0, 3
00018372                            ; ===========================================================================
00018372                            
00018372                            Obj73_Main:				; XREF: Obj73_Index
00018372 3168 0008 0030             		move.w	8(a0),$30(a0)
00018378 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001837E 117C 000F 0020             		move.b	#$F,$20(a0)
00018384 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001838A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001838E 2248                       		movea.l	a0,a1
00018390 7203                       		moveq	#3,d1
00018392 6000                       		bra.s	Obj73_LoadBoss
00018394                            ; ===========================================================================
00018394                            
00018394                            Obj73_Loop:
00018394 4EB9 0000 DBD8             		jsr	SingleObjLoad2
0001839A 6600                       		bne.s	Obj73_ShipMain
0001839C 12BC 0073                  		move.b	#$73,0(a1)
000183A0 3368 0008 0008             		move.w	8(a0),8(a1)
000183A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183AC                            
000183AC                            Obj73_LoadBoss:				; XREF: Obj73_Main
000183AC 08A8 0000 0022             		bclr	#0,$22(a0)
000183B2 4229 0025                  		clr.b	$25(a1)
000183B6 135A 0024                  		move.b	(a2)+,$24(a1)
000183BA 135A 001C                  		move.b	(a2)+,$1C(a1)
000183BE 135A 0018                  		move.b	(a2)+,$18(a1)
000183C2 237C 0001 7E2C 0004        		move.l	#Map_Eggman,4(a1)
000183CA 337C 0400 0002             		move.w	#$400,2(a1)
000183D0 137C 0004 0001             		move.b	#4,1(a1)
000183D6 137C 0020 0019             		move.b	#$20,$19(a1)
000183DC 2348 0034                  		move.l	a0,$34(a1)
000183E0 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000183E4                            
000183E4                            Obj73_ShipMain:
000183E4 7000                       		moveq	#0,d0
000183E6 1028 0025                  		move.b	$25(a0),d0
000183EA 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000183EE 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000183F2 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
000183F8 4EB9 0000 A7EE             		jsr	AnimateSprite
000183FE 7003                       		moveq	#3,d0
00018400 C028 0022                  		and.b	$22(a0),d0
00018404 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001840A 8128 0001                  		or.b	d0,1(a0)
0001840E 4EF9 0000 D73C             		jmp	DisplaySprite
00018414                            ; ===========================================================================
00018414 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018416 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018418 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001841A 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001841C 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001841E                            ; ===========================================================================
0001841E                            
0001841E                            loc_18302:				; XREF: Obj73_ShipIndex
0001841E 1028 003F                  		move.b	$3F(a0),d0
00018422 5428 003F                  		addq.b	#2,$3F(a0)
00018426 4EB9 0000 29DA             		jsr	(CalcSine).l
0001842C E440                       		asr.w	#2,d0
0001842E 3140 0012                  		move.w	d0,$12(a0)
00018432 317C FF00 0010             		move.w	#-$100,$10(a0)
00018438 6100 F592                  		bsr.w	BossMove
0001843C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018442 6600                       		bne.s	loc_18334
00018444 5428 0025                  		addq.b	#2,$25(a0)
00018448 4228 0028                  		clr.b	$28(a0)
0001844C 42A8 0010                  		clr.l	$10(a0)
00018450                            
00018450                            loc_18334:
00018450 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018456 1140 0034                  		move.b	d0,$34(a0)
0001845A                            
0001845A                            loc_1833E:
0001845A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018460 3168 0030 0008             		move.w	$30(a0),8(a0)
00018466 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001846C 6400                       		bcc.s	locret_18390
0001846E 4A28 0022                  		tst.b	$22(a0)
00018472 6B00                       		bmi.s	loc_18392
00018474 4A28 0020                  		tst.b	$20(a0)
00018478 6600                       		bne.s	locret_18390
0001847A 4A28 003E                  		tst.b	$3E(a0)
0001847E 6600                       		bne.s	loc_18374
00018480 117C 0028 003E             		move.b	#$28,$3E(a0)
00018486 303C 00AC                  		move.w	#$AC,d0
0001848A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018490                            
00018490                            loc_18374:
00018490 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018494 7000                       		moveq	#0,d0
00018496 4A51                       		tst.w	(a1)
00018498 6600                       		bne.s	loc_18382
0001849A 303C 0EEE                  		move.w	#$EEE,d0
0001849E                            
0001849E                            loc_18382:
0001849E 3280                       		move.w	d0,(a1)
000184A0 5328 003E                  		subq.b	#1,$3E(a0)
000184A4 6600                       		bne.s	locret_18390
000184A6 117C 000F 0020             		move.b	#$F,$20(a0)
000184AC                            
000184AC                            locret_18390:
000184AC 4E75                       		rts	
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            loc_18392:				; XREF: loc_1833E
000184AE 7064                       		moveq	#100,d0
000184B0 6100 0000                  		bsr.w	AddPoints
000184B4 117C 0004 0025             		move.b	#4,$25(a0)
000184BA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000184C0 4268 0010                  		clr.w	$10(a0)
000184C4 4E75                       		rts	
000184C6                            ; ===========================================================================
000184C6                            
000184C6                            loc_183AA:				; XREF: Obj73_ShipIndex
000184C6 7000                       		moveq	#0,d0
000184C8 1028 0028                  		move.b	$28(a0),d0
000184CC 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000184D0 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000184D4 0228 0006 0028             		andi.b	#6,$28(a0)
000184DA 6000 FF7E                  		bra.w	loc_1833E
000184DE                            ; ===========================================================================
000184DE 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000184E0 0000                       		dc.w Obj73_MakeLava2-off_183C2
000184E2 0000                       		dc.w loc_183CA-off_183C2
000184E4 0000                       		dc.w Obj73_MakeLava2-off_183C2
000184E6                            ; ===========================================================================
000184E6                            
000184E6                            loc_183CA:				; XREF: off_183C2
000184E6 4A68 0010                  		tst.w	$10(a0)
000184EA 6600                       		bne.s	loc_183FE
000184EC 7040                       		moveq	#$40,d0
000184EE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000184F4 6700                       		beq.s	loc_183E6
000184F6 6500                       		bcs.s	loc_183DE
000184F8 4440                       		neg.w	d0
000184FA                            
000184FA                            loc_183DE:
000184FA 3140 0012                  		move.w	d0,$12(a0)
000184FE 6000 F4CC                  		bra.w	BossMove
00018502                            ; ===========================================================================
00018502                            
00018502                            loc_183E6:
00018502 317C 0200 0010             		move.w	#$200,$10(a0)
00018508 317C 0100 0012             		move.w	#$100,$12(a0)
0001850E 0828 0000 0022             		btst	#0,$22(a0)
00018514 6600                       		bne.s	loc_183FE
00018516 4468 0010                  		neg.w	$10(a0)
0001851A                            
0001851A                            loc_183FE:
0001851A 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018520 6400                       		bcc.s	Obj73_MakeLava
00018522 6100 F4A8                  		bsr.w	BossMove
00018526 5968 0012                  		subq.w	#4,$12(a0)
0001852A                            
0001852A                            Obj73_MakeLava:
0001852A 5328 0034                  		subq.b	#1,$34(a0)
0001852E 6400                       		bcc.s	loc_1845C
00018530 4EB9 0000 DBC2             		jsr	SingleObjLoad
00018536 6600                       		bne.s	loc_1844A
00018538 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001853C 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018542 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018548 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001854E 80FC 0050                  		divu.w	#$50,d0
00018552 4840                       		swap	d0
00018554 0640 1878                  		addi.w	#$1878,d0
00018558 3340 0008                  		move.w	d0,8(a1)
0001855C EE09                       		lsr.b	#7,d1
0001855E 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018564                            
00018564                            loc_1844A:
00018564 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001856A 0200 001F                  		andi.b	#$1F,d0
0001856E 0600 0040                  		addi.b	#$40,d0
00018572 1140 0034                  		move.b	d0,$34(a0)
00018576                            
00018576                            loc_1845C:
00018576 0828 0000 0022             		btst	#0,$22(a0)
0001857C 6700                       		beq.s	loc_18474
0001857E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018584 6D00                       		blt.s	locret_1849C
00018586 317C 1910 0030             		move.w	#$1910,$30(a0)
0001858C 6000                       		bra.s	loc_18482
0001858E                            ; ===========================================================================
0001858E                            
0001858E                            loc_18474:
0001858E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018594 6E00                       		bgt.s	locret_1849C
00018596 317C 1830 0030             		move.w	#$1830,$30(a0)
0001859C                            
0001859C                            loc_18482:
0001859C 4268 0010                  		clr.w	$10(a0)
000185A0 317C FE80 0012             		move.w	#-$180,$12(a0)
000185A6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000185AC 6400                       		bcc.s	loc_18498
000185AE 4468 0012                  		neg.w	$12(a0)
000185B2                            
000185B2                            loc_18498:
000185B2 5428 0028                  		addq.b	#2,$28(a0)
000185B6                            
000185B6                            locret_1849C:
000185B6 4E75                       		rts	
000185B8                            ; ===========================================================================
000185B8                            
000185B8                            Obj73_MakeLava2:			; XREF: off_183C2
000185B8 6100 F412                  		bsr.w	BossMove
000185BC 3028 0038                  		move.w	$38(a0),d0
000185C0 0440 022C                  		subi.w	#$22C,d0
000185C4 6E00                       		bgt.s	locret_184F4
000185C6 303C 022C                  		move.w	#$22C,d0
000185CA 4A68 0012                  		tst.w	$12(a0)
000185CE 6700                       		beq.s	loc_184EA
000185D0 4268 0012                  		clr.w	$12(a0)
000185D4 317C 0050 003C             		move.w	#$50,$3C(a0)
000185DA 0868 0000 0022             		bchg	#0,$22(a0)
000185E0 4EB9 0000 DBC2             		jsr	SingleObjLoad
000185E6 6600                       		bne.s	loc_184EA
000185E8 3368 0030 0008             		move.w	$30(a0),8(a1)
000185EE 3368 0038 000C             		move.w	$38(a0),$C(a1)
000185F4 0669 0018 000C             		addi.w	#$18,$C(a1)
000185FA 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000185FE 137C 0001 0028             		move.b	#1,$28(a1)
00018604                            
00018604                            loc_184EA:
00018604 5368 003C                  		subq.w	#1,$3C(a0)
00018608 6600                       		bne.s	locret_184F4
0001860A 5428 0028                  		addq.b	#2,$28(a0)
0001860E                            
0001860E                            locret_184F4:
0001860E 4E75                       		rts	
00018610                            ; ===========================================================================
00018610                            
00018610                            loc_184F6:				; XREF: Obj73_ShipIndex
00018610 5368 003C                  		subq.w	#1,$3C(a0)
00018614 6B00                       		bmi.s	loc_18500
00018616 6000 F372                  		bra.w	BossDefeated
0001861A                            ; ===========================================================================
0001861A                            
0001861A                            loc_18500:
0001861A 08E8 0000 0022             		bset	#0,$22(a0)
00018620 08A8 0007 0022             		bclr	#7,$22(a0)
00018626 4268 0010                  		clr.w	$10(a0)
0001862A 5428 0025                  		addq.b	#2,$25(a0)
0001862E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018634 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018638 6600                       		bne.s	locret_1852A
0001863A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018640 4268 0012                  		clr.w	$12(a0)
00018644                            
00018644                            locret_1852A:
00018644 4E75                       		rts	
00018646                            ; ===========================================================================
00018646                            
00018646                            loc_1852C:				; XREF: Obj73_ShipIndex
00018646 5268 003C                  		addq.w	#1,$3C(a0)
0001864A 6700                       		beq.s	loc_18544
0001864C 6A00                       		bpl.s	loc_1854E
0001864E 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018654 6400                       		bcc.s	loc_18544
00018656 0668 0018 0012             		addi.w	#$18,$12(a0)
0001865C 6000                       		bra.s	loc_1857A
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            loc_18544:
0001865E 4268 0012                  		clr.w	$12(a0)
00018662 4268 003C                  		clr.w	$3C(a0)
00018666 6000                       		bra.s	loc_1857A
00018668                            ; ===========================================================================
00018668                            
00018668                            loc_1854E:
00018668 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001866E 6500                       		bcs.s	loc_18566
00018670 6700                       		beq.s	loc_1856C
00018672 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018678 6500                       		bcs.s	loc_1857A
0001867A 5428 0025                  		addq.b	#2,$25(a0)
0001867E 6000                       		bra.s	loc_1857A
00018680                            ; ===========================================================================
00018680                            
00018680                            loc_18566:
00018680 5168 0012                  		subq.w	#8,$12(a0)
00018684 6000                       		bra.s	loc_1857A
00018686                            ; ===========================================================================
00018686                            
00018686                            loc_1856C:
00018686 4268 0012                  		clr.w	$12(a0)
0001868A 303C 0083                  		move.w	#$83,d0
0001868E 4EB9 0000 1396             		jsr	(PlaySound).l	; play MZ music
00018694                            
00018694                            loc_1857A:
00018694 6100 F336                  		bsr.w	BossMove
00018698 6000 FDC0                  		bra.w	loc_1833E
0001869C                            ; ===========================================================================
0001869C                            
0001869C                            loc_18582:				; XREF: Obj73_ShipIndex
0001869C 317C 0500 0010             		move.w	#$500,$10(a0)
000186A2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000186A8 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000186AE 6400                       		bcc.s	loc_1859C
000186B0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000186B4 6000                       		bra.s	loc_185A2
000186B6                            ; ===========================================================================
000186B6                            
000186B6                            loc_1859C:
000186B6 4A28 0001                  		tst.b	1(a0)
000186BA 6A00                       		bpl.s	Obj73_ShipDel
000186BC                            
000186BC                            loc_185A2:
000186BC 6100 F30E                  		bsr.w	BossMove
000186C0 6000 FD98                  		bra.w	loc_1833E
000186C4                            ; ===========================================================================
000186C4                            
000186C4                            Obj73_ShipDel:
000186C4 4EF9 0000 D778             		jmp	DeleteObject
000186CA                            ; ===========================================================================
000186CA                            
000186CA                            Obj73_FaceMain:				; XREF: Obj73_Index
000186CA 7000                       		moveq	#0,d0
000186CC 7201                       		moveq	#1,d1
000186CE 2268 0034                  		movea.l	$34(a0),a1
000186D2 1029 0025                  		move.b	$25(a1),d0
000186D6 5540                       		subq.w	#2,d0
000186D8 6600                       		bne.s	loc_185D2
000186DA 0829 0001 0028             		btst	#1,$28(a1)
000186E0 6700                       		beq.s	loc_185DA
000186E2 4A69 0012                  		tst.w	$12(a1)
000186E6 6600                       		bne.s	loc_185DA
000186E8 7204                       		moveq	#4,d1
000186EA 6000                       		bra.s	loc_185EE
000186EC                            ; ===========================================================================
000186EC                            
000186EC                            loc_185D2:
000186EC 5500                       		subq.b	#2,d0
000186EE 6B00                       		bmi.s	loc_185DA
000186F0 720A                       		moveq	#$A,d1
000186F2 6000                       		bra.s	loc_185EE
000186F4                            ; ===========================================================================
000186F4                            
000186F4                            loc_185DA:
000186F4 4A29 0020                  		tst.b	$20(a1)
000186F8 6600                       		bne.s	loc_185E4
000186FA 7205                       		moveq	#5,d1
000186FC 6000                       		bra.s	loc_185EE
000186FE                            ; ===========================================================================
000186FE                            
000186FE                            loc_185E4:
000186FE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018704 6500                       		bcs.s	loc_185EE
00018706 7204                       		moveq	#4,d1
00018708                            
00018708                            loc_185EE:
00018708 1141 001C                  		move.b	d1,$1C(a0)
0001870C 5900                       		subq.b	#4,d0
0001870E 6600                       		bne.s	loc_18602
00018710 117C 0006 001C             		move.b	#6,$1C(a0)
00018716 4A28 0001                  		tst.b	1(a0)
0001871A 6A00                       		bpl.s	Obj73_FaceDel
0001871C                            
0001871C                            loc_18602:
0001871C 6000                       		bra.s	Obj73_Display
0001871E                            ; ===========================================================================
0001871E                            
0001871E                            Obj73_FaceDel:
0001871E 4EF9 0000 D778             		jmp	DeleteObject
00018724                            ; ===========================================================================
00018724                            
00018724                            Obj73_FlameMain:			; XREF: Obj73_Index
00018724 117C 0007 001C             		move.b	#7,$1C(a0)
0001872A 2268 0034                  		movea.l	$34(a0),a1
0001872E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018734 6D00                       		blt.s	loc_1862A
00018736 117C 000B 001C             		move.b	#$B,$1C(a0)
0001873C 4A28 0001                  		tst.b	1(a0)
00018740 6A00                       		bpl.s	Obj73_FlameDel
00018742 6000                       		bra.s	loc_18636
00018744                            ; ===========================================================================
00018744                            
00018744                            loc_1862A:
00018744 4A69 0010                  		tst.w	$10(a1)
00018748 6700                       		beq.s	loc_18636
0001874A 117C 0008 001C             		move.b	#8,$1C(a0)
00018750                            
00018750                            loc_18636:
00018750 6000                       		bra.s	Obj73_Display
00018752                            ; ===========================================================================
00018752                            
00018752                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018752 4EF9 0000 D778             		jmp	DeleteObject
00018758                            ; ===========================================================================
00018758                            
00018758                            Obj73_Display:
00018758 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
0001875E 4EB9 0000 A7EE             		jsr	AnimateSprite
00018764                            
00018764                            loc_1864A:
00018764 2268 0034                  		movea.l	$34(a0),a1
00018768 3169 0008 0008             		move.w	8(a1),8(a0)
0001876E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018774 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001877A 7003                       		moveq	#3,d0
0001877C C028 0022                  		and.b	$22(a0),d0
00018780 0228 00FC 0001             		andi.b	#-4,1(a0)
00018786 8128 0001                  		or.b	d0,1(a0)
0001878A 4EF9 0000 D73C             		jmp	DisplaySprite
00018790                            ; ===========================================================================
00018790                            
00018790                            Obj73_TubeMain:				; XREF: Obj73_Index
00018790 2268 0034                  		movea.l	$34(a0),a1
00018794 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001879A 6600                       		bne.s	loc_18688
0001879C 4A28 0001                  		tst.b	1(a0)
000187A0 6A00                       		bpl.s	Obj73_TubeDel
000187A2                            
000187A2                            loc_18688:
000187A2 217C 0001 7EF4 0004        		move.l	#Map_BossItems,4(a0)
000187AA 317C 246C 0002             		move.w	#$246C,2(a0)
000187B0 117C 0004 001A             		move.b	#4,$1A(a0)
000187B6 60AC                       		bra.s	loc_1864A
000187B8                            ; ===========================================================================
000187B8                            
000187B8                            Obj73_TubeDel:
000187B8 4EF9 0000 D778             		jmp	DeleteObject
000187BE                            ; ===========================================================================
000187BE                            ; ---------------------------------------------------------------------------
000187BE                            ; Object 74 - lava that	Eggman drops (MZ)
000187BE                            ; ---------------------------------------------------------------------------
000187BE                            
000187BE                            Obj74:					; XREF: Obj_Index
000187BE 7000                       		moveq	#0,d0
000187C0 1028 0024                  		move.b	$24(a0),d0
000187C4 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000187C8 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000187CC 4EF9 0000 D73C             		jmp	DisplaySprite
000187D2                            ; ===========================================================================
000187D2 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000187D4 0000                       		dc.w Obj74_Action-Obj74_Index
000187D6 0000                       		dc.w loc_18886-Obj74_Index
000187D8 0000                       		dc.w Obj74_Delete3-Obj74_Index
000187DA                            ; ===========================================================================
000187DA                            
000187DA                            Obj74_Main:				; XREF: Obj74_Index
000187DA 117C 0008 0016             		move.b	#8,$16(a0)
000187E0 117C 0008 0017             		move.b	#8,$17(a0)
000187E6 217C 0000 B400 0004        		move.l	#Map_obj14,4(a0)
000187EE 317C 0345 0002             		move.w	#$345,2(a0)
000187F4 117C 0004 0001             		move.b	#4,1(a0)
000187FA 117C 0005 0018             		move.b	#5,$18(a0)
00018800 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018806 117C 0008 0019             		move.b	#8,$19(a0)
0001880C 5428 0024                  		addq.b	#2,$24(a0)
00018810 4A28 0028                  		tst.b	$28(a0)
00018814 6600                       		bne.s	loc_1870A
00018816 117C 008B 0020             		move.b	#$8B,$20(a0)
0001881C 5428 0024                  		addq.b	#2,$24(a0)
00018820 6000 0000                  		bra.w	loc_18886
00018824                            ; ===========================================================================
00018824                            
00018824                            loc_1870A:
00018824 117C 001E 0029             		move.b	#$1E,$29(a0)
0001882A 303C 00AE                  		move.w	#$AE,d0
0001882E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava sound
00018834                            
00018834                            Obj74_Action:				; XREF: Obj74_Index
00018834 7000                       		moveq	#0,d0
00018836 1028 0025                  		move.b	$25(a0),d0
0001883A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001883E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018842 4EB9 0000 D716             		jsr	SpeedToPos
00018848 43F9 0000 E5F6             		lea	(Ani_obj14).l,a1
0001884E 4EB9 0000 A7EE             		jsr	AnimateSprite
00018854 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001885A 6200                       		bhi.s	Obj74_Delete
0001885C 4E75                       		rts	
0001885E                            ; ===========================================================================
0001885E                            
0001885E                            Obj74_Delete:
0001885E 4EF9 0000 D778             		jmp	DeleteObject
00018864                            ; ===========================================================================
00018864 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018866 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018868 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001886A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001886C                            ; ===========================================================================
0001886C                            
0001886C                            Obj74_Drop:				; XREF: Obj74_Index2
0001886C 08E8 0001 0022             		bset	#1,$22(a0)
00018872 5328 0029                  		subq.b	#1,$29(a0)
00018876 6A00                       		bpl.s	locret_18780
00018878 117C 008B 0020             		move.b	#$8B,$20(a0)
0001887E 4228 0028                  		clr.b	$28(a0)
00018882 0668 0018 0012             		addi.w	#$18,$12(a0)
00018888 08A8 0001 0022             		bclr	#1,$22(a0)
0001888E 6100 C6A8                  		bsr.w	ObjHitFloor
00018892 4A41                       		tst.w	d1
00018894 6A00                       		bpl.s	locret_18780
00018896 5428 0025                  		addq.b	#2,$25(a0)
0001889A                            
0001889A                            locret_18780:
0001889A 4E75                       		rts	
0001889C                            ; ===========================================================================
0001889C                            
0001889C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001889C 5568 000C                  		subq.w	#2,$C(a0)
000188A0 08E8 0007 0002             		bset	#7,2(a0)
000188A6 317C 00A0 0010             		move.w	#$A0,$10(a0)
000188AC 4268 0012                  		clr.w	$12(a0)
000188B0 3168 0008 0030             		move.w	8(a0),$30(a0)
000188B6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000188BC 117C 0003 0029             		move.b	#3,$29(a0)
000188C2 4EB9 0000 DBD8             		jsr	SingleObjLoad2
000188C8 6600                       		bne.s	loc_187CA
000188CA 47D1                       		lea	(a1),a3
000188CC 45D0                       		lea	(a0),a2
000188CE 7003                       		moveq	#3,d0
000188D0                            
000188D0                            Obj74_Loop:
000188D0 26DA                       		move.l	(a2)+,(a3)+
000188D2 26DA                       		move.l	(a2)+,(a3)+
000188D4 26DA                       		move.l	(a2)+,(a3)+
000188D6 26DA                       		move.l	(a2)+,(a3)+
000188D8 51C8 FFF6                  		dbf	d0,Obj74_Loop
000188DC                            
000188DC 4469 0010                  		neg.w	$10(a1)
000188E0 5429 0025                  		addq.b	#2,$25(a1)
000188E4                            
000188E4                            loc_187CA:
000188E4 5428 0025                  		addq.b	#2,$25(a0)
000188E8 4E75                       		rts	
000188EA                            
000188EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188EA                            
000188EA                            
000188EA                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000188EA 4EB9 0000 DBD8             		jsr	SingleObjLoad2
000188F0 6600                       		bne.s	locret_187EE
000188F2 3368 0008 0008             		move.w	8(a0),8(a1)
000188F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188FE 12BC 0074                  		move.b	#$74,(a1)
00018902 337C 0067 0028             		move.w	#$67,$28(a1)
00018908                            
00018908                            locret_187EE:
00018908 4E75                       		rts	
0001890A                            ; End of function Obj74_Duplicate2
0001890A                            
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001890A 6100 C62C                  		bsr.w	ObjHitFloor
0001890E 4A41                       		tst.w	d1
00018910 6A00                       		bpl.s	loc_18826
00018912 3028 0008                  		move.w	8(a0),d0
00018916 0C40 1940                  		cmpi.w	#$1940,d0
0001891A 6E00                       		bgt.s	loc_1882C
0001891C 3228 0030                  		move.w	$30(a0),d1
00018920 B240                       		cmp.w	d0,d1
00018922 6700                       		beq.s	loc_1881E
00018924 0240 0010                  		andi.w	#$10,d0
00018928 0241 0010                  		andi.w	#$10,d1
0001892C B240                       		cmp.w	d0,d1
0001892E 6700                       		beq.s	loc_1881E
00018930 61B8                       		bsr.s	Obj74_Duplicate2
00018932 3168 0008 0032             		move.w	8(a0),$32(a0)
00018938                            
00018938                            loc_1881E:
00018938 3168 0008 0030             		move.w	8(a0),$30(a0)
0001893E 4E75                       		rts	
00018940                            ; ===========================================================================
00018940                            
00018940                            loc_18826:
00018940 5428 0025                  		addq.b	#2,$25(a0)
00018944 4E75                       		rts	
00018946                            ; ===========================================================================
00018946                            
00018946                            loc_1882C:
00018946 5428 0024                  		addq.b	#2,$24(a0)
0001894A 4E75                       		rts	
0001894C                            ; ===========================================================================
0001894C                            
0001894C                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001894C 08A8 0001 0022             		bclr	#1,$22(a0)
00018952 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018958 3028 0008                  		move.w	8(a0),d0
0001895C 9068 0032                  		sub.w	$32(a0),d0
00018960 6A00                       		bpl.s	loc_1884A
00018962 4440                       		neg.w	d0
00018964                            
00018964                            loc_1884A:
00018964 0C40 0012                  		cmpi.w	#$12,d0
00018968 6600                       		bne.s	loc_18856
0001896A 08A8 0007 0002             		bclr	#7,2(a0)
00018970                            
00018970                            loc_18856:
00018970 6100 C5C6                  		bsr.w	ObjHitFloor
00018974 4A41                       		tst.w	d1
00018976 6A00                       		bpl.s	locret_1887E
00018978 5328 0029                  		subq.b	#1,$29(a0)
0001897C 6700                       		beq.s	Obj74_Delete2
0001897E 4268 0012                  		clr.w	$12(a0)
00018982 3168 0032 0008             		move.w	$32(a0),8(a0)
00018988 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001898E 08E8 0007 0002             		bset	#7,2(a0)
00018994 5528 0025                  		subq.b	#2,$25(a0)
00018998                            
00018998                            locret_1887E:
00018998 4E75                       		rts	
0001899A                            ; ===========================================================================
0001899A                            
0001899A                            Obj74_Delete2:
0001899A 4EF9 0000 D778             		jmp	DeleteObject
000189A0                            ; ===========================================================================
000189A0                            
000189A0                            loc_18886:				; XREF: Obj74_Index
000189A0 08E8 0007 0002             		bset	#7,2(a0)
000189A6 5328 0029                  		subq.b	#1,$29(a0)
000189AA 6600                       		bne.s	Obj74_Animate
000189AC 117C 0001 001C             		move.b	#1,$1C(a0)
000189B2 5968 000C                  		subq.w	#4,$C(a0)
000189B6 4228 0020                  		clr.b	$20(a0)
000189BA                            
000189BA                            Obj74_Animate:
000189BA 43F9 0000 E5F6             		lea	(Ani_obj14).l,a1
000189C0 4EF9 0000 A7EE             		jmp	AnimateSprite
000189C6                            ; ===========================================================================
000189C6                            
000189C6                            Obj74_Delete3:				; XREF: Obj74_Index
000189C6 4EF9 0000 D778             		jmp	DeleteObject
000189CC                            ; ===========================================================================
000189CC                            
000189CC                            Obj7A_Delete:
000189CC 4EF9 0000 D778             		jmp	DeleteObject
000189D2                            ; ===========================================================================
000189D2                            ; ---------------------------------------------------------------------------
000189D2                            ; Object 7A - Eggman (SLZ)
000189D2                            ; ---------------------------------------------------------------------------
000189D2                            
000189D2                            Obj7A:					; XREF: Obj_Index
000189D2 7000                       		moveq	#0,d0
000189D4 1028 0024                  		move.b	$24(a0),d0
000189D8 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000189DC 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000189E0                            ; ===========================================================================
000189E0 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000189E2 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000189E4 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000189E6 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000189E8 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000189EA                            
000189EA 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000189ED 0401 04                    		dc.b 4,	1, 4
000189F0 0607 04                    		dc.b 6,	7, 4
000189F3 0800 03                    		dc.b 8,	0, 3
000189F6                            ; ===========================================================================
000189F6                            
000189F6                            Obj7A_Main:				; XREF: Obj7A_Index
000189F6 317C 2188 0008             		move.w	#$2188,8(a0)
000189FC 317C 0228 000C             		move.w	#$228,$C(a0)
00018A02 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A08 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A0E 117C 000F 0020             		move.b	#$F,$20(a0)
00018A14 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A1A 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018A1E 2248                       		movea.l	a0,a1
00018A20 7203                       		moveq	#3,d1
00018A22 6000                       		bra.s	Obj7A_LoadBoss
00018A24                            ; ===========================================================================
00018A24                            
00018A24                            Obj7A_Loop:
00018A24 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00018A2A 6600                       		bne.s	loc_1895C
00018A2C 12BC 007A                  		move.b	#$7A,0(a1)
00018A30 3368 0008 0008             		move.w	8(a0),8(a1)
00018A36 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A3C                            
00018A3C                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018A3C 08A8 0000 0022             		bclr	#0,$22(a0)
00018A42 4229 0025                  		clr.b	$25(a1)
00018A46 135A 0024                  		move.b	(a2)+,$24(a1)
00018A4A 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A4E 135A 0018                  		move.b	(a2)+,$18(a1)
00018A52 237C 0001 7E2C 0004        		move.l	#Map_Eggman,4(a1)
00018A5A 337C 0400 0002             		move.w	#$400,2(a1)
00018A60 137C 0004 0001             		move.b	#4,1(a1)
00018A66 137C 0020 0019             		move.b	#$20,$19(a1)
00018A6C 2348 0034                  		move.l	a0,$34(a1)
00018A70 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018A74                            
00018A74                            loc_1895C:
00018A74 43F8 D040                  		lea	($FFFFD040).w,a1
00018A78 45E8 002A                  		lea	$2A(a0),a2
00018A7C 705E                       		moveq	#$5E,d0
00018A7E 723E                       		moveq	#$3E,d1
00018A80                            
00018A80                            loc_18968:
00018A80 B011                       		cmp.b	(a1),d0
00018A82 6600                       		bne.s	loc_18974
00018A84 4A29 0028                  		tst.b	$28(a1)
00018A88 6700                       		beq.s	loc_18974
00018A8A 34C9                       		move.w	a1,(a2)+
00018A8C                            
00018A8C                            loc_18974:
00018A8C D2FC 0040                  		adda.w	#$40,a1
00018A90 51C9 FFEE                  		dbf	d1,loc_18968
00018A94                            
00018A94                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018A94 7000                       		moveq	#0,d0
00018A96 1028 0025                  		move.b	$25(a0),d0
00018A9A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018A9E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018AA2 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
00018AA8 4EB9 0000 A7EE             		jsr	AnimateSprite
00018AAE 7003                       		moveq	#3,d0
00018AB0 C028 0022                  		and.b	$22(a0),d0
00018AB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018ABA 8128 0001                  		or.b	d0,1(a0)
00018ABE 4EF9 0000 D73C             		jmp	DisplaySprite
00018AC4                            ; ===========================================================================
00018AC4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018AC6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018AC8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018ACA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018ACC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018ACE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018AD0                            ; ===========================================================================
00018AD0                            
00018AD0                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018AD0 317C FF00 0010             		move.w	#-$100,$10(a0)
00018AD6 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018ADC 6400                       		bcc.s	loc_189CA
00018ADE 5428 0025                  		addq.b	#2,$25(a0)
00018AE2                            
00018AE2                            loc_189CA:
00018AE2 6100 EEE8                  		bsr.w	BossMove
00018AE6 1028 003F                  		move.b	$3F(a0),d0
00018AEA 5428 003F                  		addq.b	#2,$3F(a0)
00018AEE 4EB9 0000 29DA             		jsr	(CalcSine).l
00018AF4 EC40                       		asr.w	#6,d0
00018AF6 D068 0038                  		add.w	$38(a0),d0
00018AFA 3140 000C                  		move.w	d0,$C(a0)
00018AFE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B04 6000                       		bra.s	loc_189FE
00018B06                            ; ===========================================================================
00018B06                            
00018B06                            loc_189EE:
00018B06 6100 EEC4                  		bsr.w	BossMove
00018B0A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018B10 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B16                            
00018B16                            loc_189FE:
00018B16 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018B1C 6400                       		bcc.s	locret_18A44
00018B1E 4A28 0022                  		tst.b	$22(a0)
00018B22 6B00                       		bmi.s	loc_18A46
00018B24 4A28 0020                  		tst.b	$20(a0)
00018B28 6600                       		bne.s	locret_18A44
00018B2A 4A28 003E                  		tst.b	$3E(a0)
00018B2E 6600                       		bne.s	loc_18A28
00018B30 117C 0020 003E             		move.b	#$20,$3E(a0)
00018B36 303C 00AC                  		move.w	#$AC,d0
00018B3A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B40                            
00018B40                            loc_18A28:
00018B40 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018B44 7000                       		moveq	#0,d0
00018B46 4A51                       		tst.w	(a1)
00018B48 6600                       		bne.s	loc_18A36
00018B4A 303C 0EEE                  		move.w	#$EEE,d0
00018B4E                            
00018B4E                            loc_18A36:
00018B4E 3280                       		move.w	d0,(a1)
00018B50 5328 003E                  		subq.b	#1,$3E(a0)
00018B54 6600                       		bne.s	locret_18A44
00018B56 117C 000F 0020             		move.b	#$F,$20(a0)
00018B5C                            
00018B5C                            locret_18A44:
00018B5C 4E75                       		rts	
00018B5E                            ; ===========================================================================
00018B5E                            
00018B5E                            loc_18A46:
00018B5E 7064                       		moveq	#100,d0
00018B60 6100 0000                  		bsr.w	AddPoints
00018B64 117C 0006 0025             		move.b	#6,$25(a0)
00018B6A 117C 0078 003C             		move.b	#$78,$3C(a0)
00018B70 4268 0010                  		clr.w	$10(a0)
00018B74 4E75                       		rts	
00018B76                            ; ===========================================================================
00018B76                            
00018B76                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018B76 3028 0030                  		move.w	$30(a0),d0
00018B7A 317C 0200 0010             		move.w	#$200,$10(a0)
00018B80 0828 0000 0022             		btst	#0,$22(a0)
00018B86 6600                       		bne.s	loc_18A7C
00018B88 4468 0010                  		neg.w	$10(a0)
00018B8C 0C40 2008                  		cmpi.w	#$2008,d0
00018B90 6E00                       		bgt.s	loc_18A88
00018B92 6000                       		bra.s	loc_18A82
00018B94                            ; ===========================================================================
00018B94                            
00018B94                            loc_18A7C:
00018B94 0C40 2138                  		cmpi.w	#$2138,d0
00018B98 6D00                       		blt.s	loc_18A88
00018B9A                            
00018B9A                            loc_18A82:
00018B9A 0868 0000 0022             		bchg	#0,$22(a0)
00018BA0                            
00018BA0                            loc_18A88:
00018BA0 3028 0008                  		move.w	8(a0),d0
00018BA4 72FF                       		moveq	#-1,d1
00018BA6 7402                       		moveq	#2,d2
00018BA8 45E8 002A                  		lea	$2A(a0),a2
00018BAC 7828                       		moveq	#$28,d4
00018BAE 4A68 0010                  		tst.w	$10(a0)
00018BB2 6A00                       		bpl.s	loc_18A9E
00018BB4 4444                       		neg.w	d4
00018BB6                            
00018BB6                            loc_18A9E:
00018BB6 321A                       		move.w	(a2)+,d1
00018BB8 2641                       		movea.l	d1,a3
00018BBA 082B 0003 0022             		btst	#3,$22(a3)
00018BC0 6600                       		bne.s	loc_18AB4
00018BC2 362B 0008                  		move.w	8(a3),d3
00018BC6 D644                       		add.w	d4,d3
00018BC8 9640                       		sub.w	d0,d3
00018BCA 6700                       		beq.s	loc_18AC0
00018BCC                            
00018BCC                            loc_18AB4:
00018BCC 51CA FFE8                  		dbf	d2,loc_18A9E
00018BD0                            
00018BD0 1142 0028                  		move.b	d2,$28(a0)
00018BD4 6000 FF0C                  		bra.w	loc_189CA
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            loc_18AC0:
00018BD8 1142 0028                  		move.b	d2,$28(a0)
00018BDC 5428 0025                  		addq.b	#2,$25(a0)
00018BE0 117C 0028 003C             		move.b	#$28,$3C(a0)
00018BE6 6000 FEFA                  		bra.w	loc_189CA
00018BEA                            ; ===========================================================================
00018BEA                            
00018BEA                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018BEA 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018BF0 6600                       		bne.s	loc_18B36
00018BF2 70FF                       		moveq	#-1,d0
00018BF4 1028 0028                  		move.b	$28(a0),d0
00018BF8 4880                       		ext.w	d0
00018BFA 6B00                       		bmi.s	loc_18B40
00018BFC 5540                       		subq.w	#2,d0
00018BFE 4440                       		neg.w	d0
00018C00 D040                       		add.w	d0,d0
00018C02 43E8 002A                  		lea	$2A(a0),a1
00018C06 3031 0000                  		move.w	(a1,d0.w),d0
00018C0A 2440                       		movea.l	d0,a2
00018C0C 43F8 D040                  		lea	($FFFFD040).w,a1
00018C10 723E                       		moveq	#$3E,d1
00018C12                            
00018C12                            loc_18AFA:
00018C12 B0A9 003C                  		cmp.l	$3C(a1),d0
00018C16 6700                       		beq.s	loc_18B40
00018C18 D2FC 0040                  		adda.w	#$40,a1
00018C1C 51C9 FFF4                  		dbf	d1,loc_18AFA
00018C20                            
00018C20 2F08                       		move.l	a0,-(sp)
00018C22 41D2                       		lea	(a2),a0
00018C24 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00018C2A 205F                       		movea.l	(sp)+,a0
00018C2C 6600                       		bne.s	loc_18B40
00018C2E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018C32 3368 0008 0008             		move.w	8(a0),8(a1)
00018C38 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C3E 0669 0020 000C             		addi.w	#$20,$C(a1)
00018C44 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018C4A 234A 003C                  		move.l	a2,$3C(a1)
00018C4E                            
00018C4E                            loc_18B36:
00018C4E 5328 003C                  		subq.b	#1,$3C(a0)
00018C52 6700                       		beq.s	loc_18B40
00018C54 6000 FEC0                  		bra.w	loc_189FE
00018C58                            ; ===========================================================================
00018C58                            
00018C58                            loc_18B40:
00018C58 5528 0025                  		subq.b	#2,$25(a0)
00018C5C 6000 FE84                  		bra.w	loc_189CA
00018C60                            ; ===========================================================================
00018C60                            
00018C60                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018C60 5328 003C                  		subq.b	#1,$3C(a0)
00018C64 6B00                       		bmi.s	loc_18B52
00018C66 6000 ED22                  		bra.w	BossDefeated
00018C6A                            ; ===========================================================================
00018C6A                            
00018C6A                            loc_18B52:
00018C6A 5428 0025                  		addq.b	#2,$25(a0)
00018C6E 4268 0012                  		clr.w	$12(a0)
00018C72 08E8 0000 0022             		bset	#0,$22(a0)
00018C78 08A8 0007 0022             		bclr	#7,$22(a0)
00018C7E 4268 0010                  		clr.w	$10(a0)
00018C82 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018C88 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C8C 6600                       		bne.s	loc_18B7C
00018C8E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C94                            
00018C94                            loc_18B7C:
00018C94 6000 FE80                  		bra.w	loc_189FE
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018C98 5228 003C                  		addq.b	#1,$3C(a0)
00018C9C 6700                       		beq.s	loc_18B90
00018C9E 6A00                       		bpl.s	loc_18B96
00018CA0 0668 0018 0012             		addi.w	#$18,$12(a0)
00018CA6 6000                       		bra.s	loc_18BC2
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            loc_18B90:
00018CA8 4268 0012                  		clr.w	$12(a0)
00018CAC 6000                       		bra.s	loc_18BC2
00018CAE                            ; ===========================================================================
00018CAE                            
00018CAE                            loc_18B96:
00018CAE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018CB4 6500                       		bcs.s	loc_18BAE
00018CB6 6700                       		beq.s	loc_18BB4
00018CB8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018CBE 6500                       		bcs.s	loc_18BC2
00018CC0 5428 0025                  		addq.b	#2,$25(a0)
00018CC4 6000                       		bra.s	loc_18BC2
00018CC6                            ; ===========================================================================
00018CC6                            
00018CC6                            loc_18BAE:
00018CC6 5168 0012                  		subq.w	#8,$12(a0)
00018CCA 6000                       		bra.s	loc_18BC2
00018CCC                            ; ===========================================================================
00018CCC                            
00018CCC                            loc_18BB4:
00018CCC 4268 0012                  		clr.w	$12(a0)
00018CD0 303C 0084                  		move.w	#$84,d0
00018CD4 4EB9 0000 1396             		jsr	(PlaySound).l	; play SLZ music
00018CDA                            
00018CDA                            loc_18BC2:
00018CDA 6000 FE2A                  		bra.w	loc_189EE
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018CDE 317C 0400 0010             		move.w	#$400,$10(a0)
00018CE4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018CEA 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018CF0 6400                       		bcc.s	loc_18BE0
00018CF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018CF6 6000                       		bra.s	loc_18BE8
00018CF8                            ; ===========================================================================
00018CF8                            
00018CF8                            loc_18BE0:
00018CF8 4A28 0001                  		tst.b	1(a0)
00018CFC 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018D00                            
00018D00                            loc_18BE8:
00018D00 6100 ECCA                  		bsr.w	BossMove
00018D04 6000 FDDC                  		bra.w	loc_189CA
00018D08                            ; ===========================================================================
00018D08                            
00018D08                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018D08 7000                       		moveq	#0,d0
00018D0A 7201                       		moveq	#1,d1
00018D0C 2268 0034                  		movea.l	$34(a0),a1
00018D10 1029 0025                  		move.b	$25(a1),d0
00018D14 0C00 0006                  		cmpi.b	#6,d0
00018D18 6B00                       		bmi.s	loc_18C06
00018D1A 720A                       		moveq	#$A,d1
00018D1C 6000                       		bra.s	loc_18C1A
00018D1E                            ; ===========================================================================
00018D1E                            
00018D1E                            loc_18C06:
00018D1E 4A29 0020                  		tst.b	$20(a1)
00018D22 6600                       		bne.s	loc_18C10
00018D24 7205                       		moveq	#5,d1
00018D26 6000                       		bra.s	loc_18C1A
00018D28                            ; ===========================================================================
00018D28                            
00018D28                            loc_18C10:
00018D28 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018D2E 6500                       		bcs.s	loc_18C1A
00018D30 7204                       		moveq	#4,d1
00018D32                            
00018D32                            loc_18C1A:
00018D32 1141 001C                  		move.b	d1,$1C(a0)
00018D36 0C00 000A                  		cmpi.b	#$A,d0
00018D3A 6600                       		bne.s	loc_18C32
00018D3C 117C 0006 001C             		move.b	#6,$1C(a0)
00018D42 4A28 0001                  		tst.b	1(a0)
00018D46 6A00 FC84                  		bpl.w	Obj7A_Delete
00018D4A                            
00018D4A                            loc_18C32:
00018D4A 6000                       		bra.s	loc_18C6C
00018D4C                            ; ===========================================================================
00018D4C                            
00018D4C                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018D4C 117C 0008 001C             		move.b	#8,$1C(a0)
00018D52 2268 0034                  		movea.l	$34(a0),a1
00018D56 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018D5C 6600                       		bne.s	loc_18C56
00018D5E 4A28 0001                  		tst.b	1(a0)
00018D62 6A00 FC68                  		bpl.w	Obj7A_Delete
00018D66 117C 000B 001C             		move.b	#$B,$1C(a0)
00018D6C 6000                       		bra.s	loc_18C6C
00018D6E                            ; ===========================================================================
00018D6E                            
00018D6E                            loc_18C56:
00018D6E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018D74 6E00                       		bgt.s	loc_18C6C
00018D76 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018D7C 6D00                       		blt.s	loc_18C6C
00018D7E 117C 0007 001C             		move.b	#7,$1C(a0)
00018D84                            
00018D84                            loc_18C6C:
00018D84 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
00018D8A 4EB9 0000 A7EE             		jsr	AnimateSprite
00018D90                            
00018D90                            loc_18C78:
00018D90 2268 0034                  		movea.l	$34(a0),a1
00018D94 3169 0008 0008             		move.w	8(a1),8(a0)
00018D9A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018DA0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018DA6 7003                       		moveq	#3,d0
00018DA8 C028 0022                  		and.b	$22(a0),d0
00018DAC 0228 00FC 0001             		andi.b	#-4,1(a0)
00018DB2 8128 0001                  		or.b	d0,1(a0)
00018DB6 4EF9 0000 D73C             		jmp	DisplaySprite
00018DBC                            ; ===========================================================================
00018DBC                            
00018DBC                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018DBC 2268 0034                  		movea.l	$34(a0),a1
00018DC0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018DC6 6600                       		bne.s	loc_18CB8
00018DC8 4A28 0001                  		tst.b	1(a0)
00018DCC 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018DD0                            
00018DD0                            loc_18CB8:
00018DD0 217C 0001 7EF4 0004        		move.l	#Map_BossItems,4(a0)
00018DD8 317C 246C 0002             		move.w	#$246C,2(a0)
00018DDE 117C 0003 001A             		move.b	#3,$1A(a0)
00018DE4 60AA                       		bra.s	loc_18C78
00018DE6                            ; ===========================================================================
00018DE6                            ; ---------------------------------------------------------------------------
00018DE6                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018DE6                            ; ---------------------------------------------------------------------------
00018DE6                            
00018DE6                            Obj7B:					; XREF: Obj_Index
00018DE6 7000                       		moveq	#0,d0
00018DE8 1028 0024                  		move.b	$24(a0),d0
00018DEC 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018DF0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018DF4 3028 0030                  		move.w	$30(a0),d0
00018DF8 0240 FF80                  		andi.w	#$FF80,d0
00018DFC 3238 F700                  		move.w	($FFFFF700).w,d1
00018E00 0441 0080                  		subi.w	#$80,d1
00018E04 0241 FF80                  		andi.w	#$FF80,d1
00018E08 9041                       		sub.w	d1,d0
00018E0A 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018E0E 0C40 0280                  		cmpi.w	#$280,d0
00018E12 6200 FBB8                  		bhi.w	Obj7A_Delete
00018E16 4EF9 0000 D73C             		jmp	DisplaySprite
00018E1C                            ; ===========================================================================
00018E1C 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018E1E 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018E20 0000                       		dc.w loc_18DC6-Obj7B_Index
00018E22 0000                       		dc.w loc_18EAA-Obj7B_Index
00018E24 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018E26 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018E28                            ; ===========================================================================
00018E28                            
00018E28                            Obj7B_Main:				; XREF: Obj7B_Index
00018E28 217C 0001 1B0A 0004        		move.l	#Map_obj5Ea,4(a0)
00018E30 317C 0518 0002             		move.w	#$518,2(a0)
00018E36 117C 0001 001A             		move.b	#1,$1A(a0)
00018E3C 0028 0004 0001             		ori.b	#4,1(a0)
00018E42 117C 0004 0018             		move.b	#4,$18(a0)
00018E48 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E4E 117C 000C 0019             		move.b	#$C,$19(a0)
00018E54 2268 003C                  		movea.l	$3C(a0),a1
00018E58 3169 0008 0030             		move.w	8(a1),$30(a0)
00018E5E 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018E64 08E8 0000 0022             		bset	#0,$22(a0)
00018E6A 3028 0008                  		move.w	8(a0),d0
00018E6E B069 0008                  		cmp.w	8(a1),d0
00018E72 6E00                       		bgt.s	loc_18D68
00018E74 08A8 0000 0022             		bclr	#0,$22(a0)
00018E7A 117C 0002 003A             		move.b	#2,$3A(a0)
00018E80                            
00018E80                            loc_18D68:
00018E80 5428 0024                  		addq.b	#2,$24(a0)
00018E84                            
00018E84                            Obj7B_Fall:				; XREF: Obj7B_Index
00018E84 4EB9 0000 D6EA             		jsr	ObjectFall
00018E8A 2268 003C                  		movea.l	$3C(a0),a1
00018E8E 45F9 0000 0000             		lea	(word_19018).l,a2
00018E94 7000                       		moveq	#0,d0
00018E96 1029 001A                  		move.b	$1A(a1),d0
00018E9A 3228 0008                  		move.w	8(a0),d1
00018E9E 9268 0030                  		sub.w	$30(a0),d1
00018EA2 6400                       		bcc.s	loc_18D8E
00018EA4 5440                       		addq.w	#2,d0
00018EA6                            
00018EA6                            loc_18D8E:
00018EA6 D040                       		add.w	d0,d0
00018EA8 3228 0034                  		move.w	$34(a0),d1
00018EAC D272 0000                  		add.w	(a2,d0.w),d1
00018EB0 B268 000C                  		cmp.w	$C(a0),d1
00018EB4 6E00                       		bgt.s	locret_18DC4
00018EB6 2268 003C                  		movea.l	$3C(a0),a1
00018EBA 7202                       		moveq	#2,d1
00018EBC 0828 0000 0022             		btst	#0,$22(a0)
00018EC2 6700                       		beq.s	loc_18DAE
00018EC4 7200                       		moveq	#0,d1
00018EC6                            
00018EC6                            loc_18DAE:
00018EC6 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018ECC 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018ED2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018ED8 6000 0000                  		bra.w	loc_18FA2
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC                            locret_18DC4:
00018EDC 4E75                       		rts	
00018EDE                            ; ===========================================================================
00018EDE                            
00018EDE                            loc_18DC6:				; XREF: Obj7B_Index
00018EDE 2268 003C                  		movea.l	$3C(a0),a1
00018EE2 7000                       		moveq	#0,d0
00018EE4 1028 003A                  		move.b	$3A(a0),d0
00018EE8 9029 003A                  		sub.b	$3A(a1),d0
00018EEC 6700                       		beq.s	loc_18E2A
00018EEE 6400                       		bcc.s	loc_18DDA
00018EF0 4400                       		neg.b	d0
00018EF2                            
00018EF2                            loc_18DDA:
00018EF2 323C F7E8                  		move.w	#-$818,d1
00018EF6 343C FEEC                  		move.w	#-$114,d2
00018EFA 0C00 0001                  		cmpi.b	#1,d0
00018EFE 6700                       		beq.s	loc_18E00
00018F00 323C F6A0                  		move.w	#-$960,d1
00018F04 343C FF0C                  		move.w	#-$F4,d2
00018F08 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018F0E 6D00                       		blt.s	loc_18E00
00018F10 323C F5E0                  		move.w	#-$A20,d1
00018F14 343C FF80                  		move.w	#-$80,d2
00018F18                            
00018F18                            loc_18E00:
00018F18 3141 0012                  		move.w	d1,$12(a0)
00018F1C 3142 0010                  		move.w	d2,$10(a0)
00018F20 3028 0008                  		move.w	8(a0),d0
00018F24 9068 0030                  		sub.w	$30(a0),d0
00018F28 6400                       		bcc.s	loc_18E16
00018F2A 4468 0010                  		neg.w	$10(a0)
00018F2E                            
00018F2E                            loc_18E16:
00018F2E 117C 0001 001A             		move.b	#1,$1A(a0)
00018F34 317C 0020 0028             		move.w	#$20,$28(a0)
00018F3A 5428 0024                  		addq.b	#2,$24(a0)
00018F3E 6000 0000                  		bra.w	loc_18EAA
00018F42                            ; ===========================================================================
00018F42                            
00018F42                            loc_18E2A:				; XREF: loc_18DC6
00018F42 45F9 0000 0000             		lea	(word_19018).l,a2
00018F48 7000                       		moveq	#0,d0
00018F4A 1029 001A                  		move.b	$1A(a1),d0
00018F4E 343C 0028                  		move.w	#$28,d2
00018F52 3228 0008                  		move.w	8(a0),d1
00018F56 9268 0030                  		sub.w	$30(a0),d1
00018F5A 6400                       		bcc.s	loc_18E48
00018F5C 4442                       		neg.w	d2
00018F5E 5440                       		addq.w	#2,d0
00018F60                            
00018F60                            loc_18E48:
00018F60 D040                       		add.w	d0,d0
00018F62 3228 0034                  		move.w	$34(a0),d1
00018F66 D272 0000                  		add.w	(a2,d0.w),d1
00018F6A 3141 000C                  		move.w	d1,$C(a0)
00018F6E D468 0030                  		add.w	$30(a0),d2
00018F72 3142 0008                  		move.w	d2,8(a0)
00018F76 4268 000E                  		clr.w	$E(a0)
00018F7A 4268 000A                  		clr.w	$A(a0)
00018F7E 5368 0028                  		subq.w	#1,$28(a0)
00018F82 6600                       		bne.s	loc_18E7A
00018F84 317C 0020 0028             		move.w	#$20,$28(a0)
00018F8A 117C 0008 0024             		move.b	#8,$24(a0)
00018F90 4E75                       		rts	
00018F92                            ; ===========================================================================
00018F92                            
00018F92                            loc_18E7A:
00018F92 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00018F98 6600                       		bne.s	loc_18E88
00018F9A 117C 0005 001F             		move.b	#5,$1F(a0)
00018FA0                            
00018FA0                            loc_18E88:
00018FA0 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00018FA6 6600                       		bne.s	loc_18E96
00018FA8 117C 0002 001F             		move.b	#2,$1F(a0)
00018FAE                            
00018FAE                            loc_18E96:
00018FAE 5328 001E                  		subq.b	#1,$1E(a0)
00018FB2 6E00                       		bgt.s	locret_18EA8
00018FB4 0868 0000 001A             		bchg	#0,$1A(a0)
00018FBA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018FC0                            
00018FC0                            locret_18EA8:
00018FC0 4E75                       		rts	
00018FC2                            ; ===========================================================================
00018FC2                            
00018FC2                            loc_18EAA:				; XREF: Obj7B_Index
00018FC2 43F8 D040                  		lea	($FFFFD040).w,a1
00018FC6 707A                       		moveq	#$7A,d0
00018FC8 7240                       		moveq	#$40,d1
00018FCA 743E                       		moveq	#$3E,d2
00018FCC                            
00018FCC                            loc_18EB4:
00018FCC B011                       		cmp.b	(a1),d0
00018FCE 6700                       		beq.s	loc_18EC0
00018FD0 D2C1                       		adda.w	d1,a1
00018FD2 51CA FFF8                  		dbf	d2,loc_18EB4
00018FD6                            
00018FD6 6000                       		bra.s	loc_18F38
00018FD8                            ; ===========================================================================
00018FD8                            
00018FD8                            loc_18EC0:
00018FD8 3029 0008                  		move.w	8(a1),d0
00018FDC 3229 000C                  		move.w	$C(a1),d1
00018FE0 3428 0008                  		move.w	8(a0),d2
00018FE4 3628 000C                  		move.w	$C(a0),d3
00018FE8 45FA 0000                  		lea	byte_19022(pc),a2
00018FEC 47FA 0000                  		lea	byte_19026(pc),a3
00018FF0 181A                       		move.b	(a2)+,d4
00018FF2 4884                       		ext.w	d4
00018FF4 D044                       		add.w	d4,d0
00018FF6 181B                       		move.b	(a3)+,d4
00018FF8 4884                       		ext.w	d4
00018FFA D444                       		add.w	d4,d2
00018FFC B440                       		cmp.w	d0,d2
00018FFE 6500                       		bcs.s	loc_18F38
00019000 181A                       		move.b	(a2)+,d4
00019002 4884                       		ext.w	d4
00019004 D044                       		add.w	d4,d0
00019006 181B                       		move.b	(a3)+,d4
00019008 4884                       		ext.w	d4
0001900A D444                       		add.w	d4,d2
0001900C B042                       		cmp.w	d2,d0
0001900E 6500                       		bcs.s	loc_18F38
00019010 181A                       		move.b	(a2)+,d4
00019012 4884                       		ext.w	d4
00019014 D244                       		add.w	d4,d1
00019016 181B                       		move.b	(a3)+,d4
00019018 4884                       		ext.w	d4
0001901A D644                       		add.w	d4,d3
0001901C B641                       		cmp.w	d1,d3
0001901E 6500                       		bcs.s	loc_18F38
00019020 181A                       		move.b	(a2)+,d4
00019022 4884                       		ext.w	d4
00019024 D244                       		add.w	d4,d1
00019026 181B                       		move.b	(a3)+,d4
00019028 4884                       		ext.w	d4
0001902A D644                       		add.w	d4,d3
0001902C B243                       		cmp.w	d3,d1
0001902E 6500                       		bcs.s	loc_18F38
00019030 5428 0024                  		addq.b	#2,$24(a0)
00019034 4268 0028                  		clr.w	$28(a0)
00019038 4229 0020                  		clr.b	$20(a1)
0001903C 5329 0021                  		subq.b	#1,$21(a1)
00019040 6600                       		bne.s	loc_18F38
00019042 08E9 0007 0022             		bset	#7,$22(a1)
00019048 4268 0010                  		clr.w	$10(a0)
0001904C 4268 0012                  		clr.w	$12(a0)
00019050                            
00019050                            loc_18F38:
00019050 4A68 0012                  		tst.w	$12(a0)
00019054 6A00                       		bpl.s	loc_18F5C
00019056 4EB9 0000 D6EA             		jsr	ObjectFall
0001905C 3028 0034                  		move.w	$34(a0),d0
00019060 0440 002F                  		subi.w	#$2F,d0
00019064 B068 000C                  		cmp.w	$C(a0),d0
00019068 6E00                       		bgt.s	loc_18F58
0001906A 4EB9 0000 D6EA             		jsr	ObjectFall
00019070                            
00019070                            loc_18F58:
00019070 6000 FF20                  		bra.w	loc_18E7A
00019074                            ; ===========================================================================
00019074                            
00019074                            loc_18F5C:
00019074 4EB9 0000 D6EA             		jsr	ObjectFall
0001907A 2268 003C                  		movea.l	$3C(a0),a1
0001907E 45F9 0000 0000             		lea	(word_19018).l,a2
00019084 7000                       		moveq	#0,d0
00019086 1029 001A                  		move.b	$1A(a1),d0
0001908A 3228 0008                  		move.w	8(a0),d1
0001908E 9268 0030                  		sub.w	$30(a0),d1
00019092 6400                       		bcc.s	loc_18F7E
00019094 5440                       		addq.w	#2,d0
00019096                            
00019096                            loc_18F7E:
00019096 D040                       		add.w	d0,d0
00019098 3228 0034                  		move.w	$34(a0),d1
0001909C D272 0000                  		add.w	(a2,d0.w),d1
000190A0 B268 000C                  		cmp.w	$C(a0),d1
000190A4 6ECA                       		bgt.s	loc_18F58
000190A6 2268 003C                  		movea.l	$3C(a0),a1
000190AA 7202                       		moveq	#2,d1
000190AC 4A68 0010                  		tst.w	$10(a0)
000190B0 6B00                       		bmi.s	loc_18F9C
000190B2 7200                       		moveq	#0,d1
000190B4                            
000190B4                            loc_18F9C:
000190B4 317C 0000 0028             		move.w	#0,$28(a0)
000190BA                            
000190BA                            loc_18FA2:
000190BA 1341 003A                  		move.b	d1,$3A(a1)
000190BE 1141 003A                  		move.b	d1,$3A(a0)
000190C2 B229 001A                  		cmp.b	$1A(a1),d1
000190C6 6700                       		beq.s	loc_19008
000190C8 08A9 0003 0022             		bclr	#3,$22(a1)
000190CE 6700                       		beq.s	loc_19008
000190D0 4229 0025                  		clr.b	$25(a1)
000190D4 137C 0002 0024             		move.b	#2,$24(a1)
000190DA 45F8 D000                  		lea	($FFFFD000).w,a2
000190DE 3568 0012 0012             		move.w	$12(a0),$12(a2)
000190E4 446A 0012                  		neg.w	$12(a2)
000190E8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000190EE 6600                       		bne.s	loc_18FDC
000190F0 E0EA 0012                  		asr	$12(a2)
000190F4                            
000190F4                            loc_18FDC:
000190F4 08EA 0001 0022             		bset	#1,$22(a2)
000190FA 08AA 0003 0022             		bclr	#3,$22(a2)
00019100 422A 003C                  		clr.b	$3C(a2)
00019104 2F08                       		move.l	a0,-(sp)
00019106 41D2                       		lea	(a2),a0
00019108 4EBA A3EE                  		jsr	Obj01_ChkRoll
0001910C 205F                       		movea.l	(sp)+,a0
0001910E 157C 0002 0024             		move.b	#2,$24(a2)
00019114 303C 00CC                  		move.w	#$CC,d0
00019118 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001911E                            
0001911E                            loc_19008:
0001911E 4268 0010                  		clr.w	$10(a0)
00019122 4268 0012                  		clr.w	$12(a0)
00019126 5428 0024                  		addq.b	#2,$24(a0)
0001912A 6000 FE66                  		bra.w	loc_18E7A
0001912E                            ; ===========================================================================
0001912E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019138                            		even
00019138 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001913C                            		even
0001913C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019140                            		even
00019140                            ; ===========================================================================
00019140                            
00019140                            Obj7B_Explode:				; XREF: Obj7B_Index
00019140 10BC 003F                  		move.b	#$3F,(a0)
00019144 4228 0024                  		clr.b	$24(a0)
00019148 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001914E 6700                       		beq.s	Obj7B_MakeFrag
00019150 4E75                       		rts	
00019152                            ; ===========================================================================
00019152                            
00019152                            Obj7B_MakeFrag:
00019152 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019158 7203                       		moveq	#3,d1
0001915A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001915E                            
0001915E                            Obj7B_Loop:
0001915E 4EB9 0000 DBC2             		jsr	SingleObjLoad
00019164 6600                       		bne.s	loc_1909A
00019166 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001916A 137C 000A 0024             		move.b	#$A,$24(a1)
00019170 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019178 137C 0003 0018             		move.b	#3,$18(a1)
0001917E 337C 0518 0002             		move.w	#$518,2(a1)
00019184 3368 0008 0008             		move.w	8(a0),8(a1)
0001918A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019190 335A 0010                  		move.w	(a2)+,$10(a1)
00019194 335A 0012                  		move.w	(a2)+,$12(a1)
00019198 137C 0098 0020             		move.b	#$98,$20(a1)
0001919E 0029 0004 0001             		ori.b	#4,1(a1)
000191A4 08E9 0007 0001             		bset	#7,1(a1)
000191AA 137C 000C 0019             		move.b	#$C,$19(a1)
000191B0                            
000191B0                            loc_1909A:
000191B0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000191B4                            
000191B4 4E75                       		rts	
000191B6                            ; ===========================================================================
000191B6 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000191BA FF60 FDC0                  		dc.w $FF60, $FDC0
000191BE 0100 FCC0                  		dc.w $100, $FCC0
000191C2 00A0 FDC0                  		dc.w $A0, $FDC0
000191C6                            ; ===========================================================================
000191C6                            
000191C6                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000191C6 4EB9 0000 D716             		jsr	SpeedToPos
000191CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000191D2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000191D8 0668 0018 0012             		addi.w	#$18,$12(a0)
000191DE 7004                       		moveq	#4,d0
000191E0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000191E4 E448                       		lsr.w	#2,d0
000191E6 1140 001A                  		move.b	d0,$1A(a0)
000191EA 4A28 0001                  		tst.b	1(a0)
000191EE 6A00 F7DC                  		bpl.w	Obj7A_Delete
000191F2 4E75                       		rts	
000191F4                            ; ===========================================================================
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            Map_obj7B:
000191F4                            	include "_maps\obj7B.asm"
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000191F4                            ; ---------------------------------------------------------------------------
000191F4 0000                       		dc.w byte_190E2-Map_obj7B
000191F6 0000                       		dc.w byte_190E8-Map_obj7B
000191F8 01                         byte_190E2:	dc.b 1
000191F9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000191FE 01                         byte_190E8:	dc.b 1
000191FF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019204                            		even
00019204                            		even
00019204                            
00019204                            ; ===========================================================================
00019204                            ; ---------------------------------------------------------------------------
00019204                            ; Object 75 - Eggman (SYZ)
00019204                            ; ---------------------------------------------------------------------------
00019204                            
00019204                            Obj75:					; XREF: Obj_Index
00019204 7000                       		moveq	#0,d0
00019206 1028 0024                  		move.b	$24(a0),d0
0001920A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001920E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019212                            ; ===========================================================================
00019212 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019214 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019216 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019218 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001921A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001921C                            
0001921C 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001921F 0401 05                    		dc.b 4,	1, 5
00019222 0607 05                    		dc.b 6,	7, 5
00019225 0800 05                    		dc.b 8,	0, 5
00019228                            ; ===========================================================================
00019228                            
00019228                            Obj75_Main:				; XREF: Obj75_Index
00019228 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001922E 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019234 3168 0008 0030             		move.w	8(a0),$30(a0)
0001923A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019240 117C 000F 0020             		move.b	#$F,$20(a0)
00019246 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001924C 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019250 2248                       		movea.l	a0,a1
00019252 7203                       		moveq	#3,d1
00019254 6000                       		bra.s	Obj75_LoadBoss
00019256                            ; ===========================================================================
00019256                            
00019256                            Obj75_Loop:
00019256 4EB9 0000 DBD8             		jsr	SingleObjLoad2
0001925C 6600                       		bne.s	Obj75_ShipMain
0001925E 12BC 0075                  		move.b	#$75,(a1)
00019262 3368 0008 0008             		move.w	8(a0),8(a1)
00019268 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001926E                            
0001926E                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001926E 08A8 0000 0022             		bclr	#0,$22(a0)
00019274 4229 0025                  		clr.b	$25(a1)
00019278 135A 0024                  		move.b	(a2)+,$24(a1)
0001927C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019280 135A 0018                  		move.b	(a2)+,$18(a1)
00019284 237C 0001 7E2C 0004        		move.l	#Map_Eggman,4(a1)
0001928C 337C 0400 0002             		move.w	#$400,2(a1)
00019292 137C 0004 0001             		move.b	#4,1(a1)
00019298 137C 0020 0019             		move.b	#$20,$19(a1)
0001929E 2348 0034                  		move.l	a0,$34(a1)
000192A2 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000192A6                            
000192A6                            Obj75_ShipMain:				; XREF: Obj75_Index
000192A6 7000                       		moveq	#0,d0
000192A8 1028 0025                  		move.b	$25(a0),d0
000192AC 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000192B0 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000192B4 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
000192BA 4EB9 0000 A7EE             		jsr	AnimateSprite
000192C0 7003                       		moveq	#3,d0
000192C2 C028 0022                  		and.b	$22(a0),d0
000192C6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000192CC 8128 0001                  		or.b	d0,1(a0)
000192D0 4EF9 0000 D73C             		jmp	DisplaySprite
000192D6                            ; ===========================================================================
000192D6 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000192DA 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000192DE 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000192E2                            ; ===========================================================================
000192E2                            
000192E2                            loc_191CC:				; XREF: Obj75_ShipIndex
000192E2 317C FF00 0010             		move.w	#-$100,$10(a0)
000192E8 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000192EE 6400                       		bcc.s	loc_191DE
000192F0 5428 0025                  		addq.b	#2,$25(a0)
000192F4                            
000192F4                            loc_191DE:
000192F4 1028 003F                  		move.b	$3F(a0),d0
000192F8 5428 003F                  		addq.b	#2,$3F(a0)
000192FC 4EB9 0000 29DA             		jsr	(CalcSine).l
00019302 E440                       		asr.w	#2,d0
00019304 3140 0012                  		move.w	d0,$12(a0)
00019308                            
00019308                            loc_191F2:
00019308 6100 E6C2                  		bsr.w	BossMove
0001930C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019312 3168 0030 0008             		move.w	$30(a0),8(a0)
00019318                            
00019318                            loc_19202:
00019318 3028 0008                  		move.w	8(a0),d0
0001931C 0440 2C00                  		subi.w	#$2C00,d0
00019320 EA48                       		lsr.w	#5,d0
00019322 1140 0034                  		move.b	d0,$34(a0)
00019326 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001932C 6400                       		bcc.s	locret_19256
0001932E 4A28 0022                  		tst.b	$22(a0)
00019332 6B00                       		bmi.s	loc_19258
00019334 4A28 0020                  		tst.b	$20(a0)
00019338 6600                       		bne.s	locret_19256
0001933A 4A28 003E                  		tst.b	$3E(a0)
0001933E 6600                       		bne.s	loc_1923A
00019340 117C 0020 003E             		move.b	#$20,$3E(a0)
00019346 303C 00AC                  		move.w	#$AC,d0
0001934A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019350                            
00019350                            loc_1923A:
00019350 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019354 7000                       		moveq	#0,d0
00019356 4A51                       		tst.w	(a1)
00019358 6600                       		bne.s	loc_19248
0001935A 303C 0EEE                  		move.w	#$EEE,d0
0001935E                            
0001935E                            loc_19248:
0001935E 3280                       		move.w	d0,(a1)
00019360 5328 003E                  		subq.b	#1,$3E(a0)
00019364 6600                       		bne.s	locret_19256
00019366 117C 000F 0020             		move.b	#$F,$20(a0)
0001936C                            
0001936C                            locret_19256:
0001936C 4E75                       		rts	
0001936E                            ; ===========================================================================
0001936E                            
0001936E                            loc_19258:				; XREF: loc_19202
0001936E 7064                       		moveq	#100,d0
00019370 6100 0000                  		bsr.w	AddPoints
00019374 117C 0006 0025             		move.b	#6,$25(a0)
0001937A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019380 4268 0010                  		clr.w	$10(a0)
00019384 4E75                       		rts	
00019386                            ; ===========================================================================
00019386                            
00019386                            loc_19270:				; XREF: Obj75_ShipIndex
00019386 3028 0030                  		move.w	$30(a0),d0
0001938A 317C 0140 0010             		move.w	#$140,$10(a0)
00019390 0828 0000 0022             		btst	#0,$22(a0)
00019396 6600                       		bne.s	loc_1928E
00019398 4468 0010                  		neg.w	$10(a0)
0001939C 0C40 2C08                  		cmpi.w	#$2C08,d0
000193A0 6E00                       		bgt.s	loc_1929E
000193A2 6000                       		bra.s	loc_19294
000193A4                            ; ===========================================================================
000193A4                            
000193A4                            loc_1928E:
000193A4 0C40 2D38                  		cmpi.w	#$2D38,d0
000193A8 6D00                       		blt.s	loc_1929E
000193AA                            
000193AA                            loc_19294:
000193AA 0868 0000 0022             		bchg	#0,$22(a0)
000193B0 4228 003D                  		clr.b	$3D(a0)
000193B4                            
000193B4                            loc_1929E:
000193B4 0440 2C10                  		subi.w	#$2C10,d0
000193B8 0240 001F                  		andi.w	#$1F,d0
000193BC 0440 001F                  		subi.w	#$1F,d0
000193C0 6A00                       		bpl.s	loc_192AE
000193C2 4440                       		neg.w	d0
000193C4                            
000193C4                            loc_192AE:
000193C4 5340                       		subq.w	#1,d0
000193C6 6E00                       		bgt.s	loc_192E8
000193C8 4A28 003D                  		tst.b	$3D(a0)
000193CC 6600                       		bne.s	loc_192E8
000193CE 3238 D008                  		move.w	($FFFFD008).w,d1
000193D2 0441 2C00                  		subi.w	#$2C00,d1
000193D6 EA41                       		asr.w	#5,d1
000193D8 B228 0034                  		cmp.b	$34(a0),d1
000193DC 6600                       		bne.s	loc_192E8
000193DE 7000                       		moveq	#0,d0
000193E0 1028 0034                  		move.b	$34(a0),d0
000193E4 EB40                       		asl.w	#5,d0
000193E6 0640 2C10                  		addi.w	#$2C10,d0
000193EA 3140 0030                  		move.w	d0,$30(a0)
000193EE 6100 0000                  		bsr.w	Obj75_FindBlocks
000193F2 5428 0025                  		addq.b	#2,$25(a0)
000193F6 4268 0028                  		clr.w	$28(a0)
000193FA 4268 0010                  		clr.w	$10(a0)
000193FE                            
000193FE                            loc_192E8:
000193FE 6000 FEF4                  		bra.w	loc_191DE
00019402                            ; ===========================================================================
00019402                            
00019402                            loc_192EC:				; XREF: Obj75_ShipIndex
00019402 7000                       		moveq	#0,d0
00019404 1028 0028                  		move.b	$28(a0),d0
00019408 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001940C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019410                            ; ===========================================================================
00019410 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019412 0000                       		dc.w loc_19348-off_192FA
00019414 0000                       		dc.w loc_1938E-off_192FA
00019416 0000                       		dc.w loc_193D0-off_192FA
00019418                            ; ===========================================================================
00019418                            
00019418                            loc_19302:				; XREF: off_192FA
00019418 317C 0180 0012             		move.w	#$180,$12(a0)
0001941E 3028 0038                  		move.w	$38(a0),d0
00019422 0C40 0556                  		cmpi.w	#$556,d0
00019426 6500                       		bcs.s	loc_19344
00019428 317C 0556 0038             		move.w	#$556,$38(a0)
0001942E 4268 003C                  		clr.w	$3C(a0)
00019432 70FF                       		moveq	#-1,d0
00019434 3028 0036                  		move.w	$36(a0),d0
00019438 6700                       		beq.s	loc_1933C
0001943A 2240                       		movea.l	d0,a1
0001943C 137C 00FF 0029             		move.b	#-1,$29(a1)
00019442 117C 00FF 0029             		move.b	#-1,$29(a0)
00019448 2348 0034                  		move.l	a0,$34(a1)
0001944C 317C 0032 003C             		move.w	#$32,$3C(a0)
00019452                            
00019452                            loc_1933C:
00019452 4268 0012                  		clr.w	$12(a0)
00019456 5428 0028                  		addq.b	#2,$28(a0)
0001945A                            
0001945A                            loc_19344:
0001945A 6000 FEAC                  		bra.w	loc_191F2
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            loc_19348:				; XREF: off_192FA
0001945E 5368 003C                  		subq.w	#1,$3C(a0)
00019462 6A00                       		bpl.s	loc_19366
00019464 5428 0028                  		addq.b	#2,$28(a0)
00019468 317C F800 0012             		move.w	#-$800,$12(a0)
0001946E 4A68 0036                  		tst.w	$36(a0)
00019472 6600                       		bne.s	loc_19362
00019474 E0E8 0012                  		asr	$12(a0)
00019478                            
00019478                            loc_19362:
00019478 7000                       		moveq	#0,d0
0001947A 6000                       		bra.s	loc_1937C
0001947C                            ; ===========================================================================
0001947C                            
0001947C                            loc_19366:
0001947C 7000                       		moveq	#0,d0
0001947E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019484 6E00                       		bgt.s	loc_1937C
00019486 7002                       		moveq	#2,d0
00019488 0828 0001 003D             		btst	#1,$3D(a0)
0001948E 6700                       		beq.s	loc_1937C
00019490 4440                       		neg.w	d0
00019492                            
00019492                            loc_1937C:
00019492 D068 0038                  		add.w	$38(a0),d0
00019496 3140 000C                  		move.w	d0,$C(a0)
0001949A 3168 0030 0008             		move.w	$30(a0),8(a0)
000194A0 6000 FE76                  		bra.w	loc_19202
000194A4                            ; ===========================================================================
000194A4                            
000194A4                            loc_1938E:				; XREF: off_192FA
000194A4 303C 04DA                  		move.w	#$4DA,d0
000194A8 4A68 0036                  		tst.w	$36(a0)
000194AC 6700                       		beq.s	loc_1939C
000194AE 0440 0018                  		subi.w	#$18,d0
000194B2                            
000194B2                            loc_1939C:
000194B2 B068 0038                  		cmp.w	$38(a0),d0
000194B6 6D00                       		blt.s	loc_193BE
000194B8 317C 0008 003C             		move.w	#8,$3C(a0)
000194BE 4A68 0036                  		tst.w	$36(a0)
000194C2 6700                       		beq.s	loc_193B4
000194C4 317C 002D 003C             		move.w	#$2D,$3C(a0)
000194CA                            
000194CA                            loc_193B4:
000194CA 5428 0028                  		addq.b	#2,$28(a0)
000194CE 4268 0012                  		clr.w	$12(a0)
000194D2 6000                       		bra.s	loc_193CC
000194D4                            ; ===========================================================================
000194D4                            
000194D4                            loc_193BE:
000194D4 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000194DA 6C00                       		bge.s	loc_193CC
000194DC 0668 000C 0012             		addi.w	#$C,$12(a0)
000194E2                            
000194E2                            loc_193CC:
000194E2 6000 FE24                  		bra.w	loc_191F2
000194E6                            ; ===========================================================================
000194E6                            
000194E6                            loc_193D0:				; XREF: off_192FA
000194E6 5368 003C                  		subq.w	#1,$3C(a0)
000194EA 6E00                       		bgt.s	loc_19406
000194EC 6B00                       		bmi.s	loc_193EE
000194EE 70FF                       		moveq	#-1,d0
000194F0 3028 0036                  		move.w	$36(a0),d0
000194F4 6700                       		beq.s	loc_193E8
000194F6 2240                       		movea.l	d0,a1
000194F8 137C 000A 0029             		move.b	#$A,$29(a1)
000194FE                            
000194FE                            loc_193E8:
000194FE 4268 0036                  		clr.w	$36(a0)
00019502 6000                       		bra.s	loc_19406
00019504                            ; ===========================================================================
00019504                            
00019504                            loc_193EE:
00019504 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001950A 6600                       		bne.s	loc_19406
0001950C 4228 0029                  		clr.b	$29(a0)
00019510 5528 0025                  		subq.b	#2,$25(a0)
00019514 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001951A 6000                       		bra.s	loc_19446
0001951C                            ; ===========================================================================
0001951C                            
0001951C                            loc_19406:
0001951C 7001                       		moveq	#1,d0
0001951E 4A68 0036                  		tst.w	$36(a0)
00019522 6700                       		beq.s	loc_19410
00019524 7002                       		moveq	#2,d0
00019526                            
00019526                            loc_19410:
00019526 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001952C 6700                       		beq.s	loc_19424
0001952E 6D00                       		blt.s	loc_1941C
00019530 4440                       		neg.w	d0
00019532                            
00019532                            loc_1941C:
00019532 4A68 0036                  		tst.w	$36(a0)
00019536 D168 0038                  		add.w	d0,$38(a0)
0001953A                            
0001953A                            loc_19424:
0001953A 7000                       		moveq	#0,d0
0001953C 4A68 0036                  		tst.w	$36(a0)
00019540 6700                       		beq.s	loc_19438
00019542 7002                       		moveq	#2,d0
00019544 0828 0000 003D             		btst	#0,$3D(a0)
0001954A 6700                       		beq.s	loc_19438
0001954C 4440                       		neg.w	d0
0001954E                            
0001954E                            loc_19438:
0001954E D068 0038                  		add.w	$38(a0),d0
00019552 3140 000C                  		move.w	d0,$C(a0)
00019556 3168 0030 0008             		move.w	$30(a0),8(a0)
0001955C                            
0001955C                            loc_19446:
0001955C 6000 FDBA                  		bra.w	loc_19202
00019560                            
00019560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019560                            
00019560                            
00019560                            Obj75_FindBlocks:			; XREF: loc_192AE
00019560 4268 0036                  		clr.w	$36(a0)
00019564 43F8 D040                  		lea	($FFFFD040).w,a1
00019568 703E                       		moveq	#$3E,d0
0001956A 7276                       		moveq	#$76,d1
0001956C 1428 0034                  		move.b	$34(a0),d2
00019570                            
00019570                            Obj75_FindLoop:
00019570 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019572 6600                       		bne.s	loc_1946A	; if not, branch
00019574 B429 0028                  		cmp.b	$28(a1),d2
00019578 6600                       		bne.s	loc_1946A
0001957A 3149 0036                  		move.w	a1,$36(a0)
0001957E 6000                       		bra.s	locret_19472
00019580                            ; ===========================================================================
00019580                            
00019580                            loc_1946A:
00019580 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019584 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019588                            
00019588                            locret_19472:
00019588 4E75                       		rts	
0001958A                            ; End of function Obj75_FindBlocks
0001958A                            
0001958A                            ; ===========================================================================
0001958A                            
0001958A                            loc_19474:				; XREF: Obj75_ShipIndex
0001958A 5368 003C                  		subq.w	#1,$3C(a0)
0001958E 6B00                       		bmi.s	loc_1947E
00019590 6000 E3F8                  		bra.w	BossDefeated
00019594                            ; ===========================================================================
00019594                            
00019594                            loc_1947E:
00019594 5428 0025                  		addq.b	#2,$25(a0)
00019598 4268 0012                  		clr.w	$12(a0)
0001959C 08E8 0000 0022             		bset	#0,$22(a0)
000195A2 08A8 0007 0022             		bclr	#7,$22(a0)
000195A8 4268 0010                  		clr.w	$10(a0)
000195AC 317C FFFF 003C             		move.w	#-1,$3C(a0)
000195B2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000195B6 6600                       		bne.s	loc_194A8
000195B8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000195BE                            
000195BE                            loc_194A8:
000195BE 6000 FD58                  		bra.w	loc_19202
000195C2                            ; ===========================================================================
000195C2                            
000195C2                            loc_194AC:				; XREF: Obj75_ShipIndex
000195C2 5268 003C                  		addq.w	#1,$3C(a0)
000195C6 6700                       		beq.s	loc_194BC
000195C8 6A00                       		bpl.s	loc_194C2
000195CA 0668 0018 0012             		addi.w	#$18,$12(a0)
000195D0 6000                       		bra.s	loc_194EE
000195D2                            ; ===========================================================================
000195D2                            
000195D2                            loc_194BC:
000195D2 4268 0012                  		clr.w	$12(a0)
000195D6 6000                       		bra.s	loc_194EE
000195D8                            ; ===========================================================================
000195D8                            
000195D8                            loc_194C2:
000195D8 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
000195DE 6500                       		bcs.s	loc_194DA
000195E0 6700                       		beq.s	loc_194E0
000195E2 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
000195E8 6500                       		bcs.s	loc_194EE
000195EA 5428 0025                  		addq.b	#2,$25(a0)
000195EE 6000                       		bra.s	loc_194EE
000195F0                            ; ===========================================================================
000195F0                            
000195F0                            loc_194DA:
000195F0 5168 0012                  		subq.w	#8,$12(a0)
000195F4 6000                       		bra.s	loc_194EE
000195F6                            ; ===========================================================================
000195F6                            
000195F6                            loc_194E0:
000195F6 4268 0012                  		clr.w	$12(a0)
000195FA 303C 0085                  		move.w	#$85,d0
000195FE 4EB9 0000 1396             		jsr	(PlaySound).l	; play SYZ music
00019604                            
00019604                            loc_194EE:
00019604 6000 FD02                  		bra.w	loc_191F2
00019608                            ; ===========================================================================
00019608                            
00019608                            loc_194F2:				; XREF: Obj75_ShipIndex
00019608 317C 0400 0010             		move.w	#$400,$10(a0)
0001960E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019614 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001961A 6400                       		bcc.s	loc_1950C
0001961C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019620 6000                       		bra.s	loc_19512
00019622                            ; ===========================================================================
00019622                            
00019622                            loc_1950C:
00019622 4A28 0001                  		tst.b	1(a0)
00019626 6A00                       		bpl.s	Obj75_ShipDelete
00019628                            
00019628                            loc_19512:
00019628 6100 E3A2                  		bsr.w	BossMove
0001962C 6000 FCC6                  		bra.w	loc_191DE
00019630                            ; ===========================================================================
00019630                            
00019630                            Obj75_ShipDelete:
00019630 4EF9 0000 D778             		jmp	DeleteObject
00019636                            ; ===========================================================================
00019636                            
00019636                            Obj75_FaceMain:				; XREF: Obj75_Index
00019636 7201                       		moveq	#1,d1
00019638 2268 0034                  		movea.l	$34(a0),a1
0001963C 7000                       		moveq	#0,d0
0001963E 1029 0025                  		move.b	$25(a1),d0
00019642 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019646 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001964A 1141 001C                  		move.b	d1,$1C(a0)
0001964E 1010                       		move.b	(a0),d0
00019650 B011                       		cmp.b	(a1),d0
00019652 6600                       		bne.s	Obj75_FaceDelete
00019654 6000                       		bra.s	loc_195BE
00019656                            ; ===========================================================================
00019656                            
00019656                            Obj75_FaceDelete:
00019656 4EF9 0000 D778             		jmp	DeleteObject
0001965C                            ; ===========================================================================
0001965C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019660 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019664 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019668                            ; ===========================================================================
00019668                            
00019668                            loc_19552:				; XREF: off_19546
00019668 720A                       		moveq	#$A,d1
0001966A 4E75                       		rts	
0001966C                            ; ===========================================================================
0001966C                            
0001966C                            loc_19556:				; XREF: off_19546
0001966C 7206                       		moveq	#6,d1
0001966E 4E75                       		rts	
00019670                            ; ===========================================================================
00019670                            
00019670                            loc_1955A:				; XREF: off_19546
00019670 7000                       		moveq	#0,d0
00019672 1029 0028                  		move.b	$28(a1),d0
00019676 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001967A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001967E                            ; ===========================================================================
0001967E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019682 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019686                            ; ===========================================================================
00019686                            
00019686                            loc_19570:				; XREF: off_19568
00019686 6000                       		bra.s	loc_19574
00019688                            ; ===========================================================================
00019688                            
00019688                            loc_19572:				; XREF: off_19568
00019688 7206                       		moveq	#6,d1
0001968A                            
0001968A                            loc_19574:				; XREF: off_19546
0001968A 4A29 0020                  		tst.b	$20(a1)
0001968E 6600                       		bne.s	loc_1957E
00019690 7205                       		moveq	#5,d1
00019692 4E75                       		rts	
00019694                            ; ===========================================================================
00019694                            
00019694                            loc_1957E:
00019694 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001969A 6500                       		bcs.s	locret_19588
0001969C 7204                       		moveq	#4,d1
0001969E                            
0001969E                            locret_19588:
0001969E 4E75                       		rts	
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            Obj75_FlameMain:			; XREF: Obj75_Index
000196A0 117C 0007 001C             		move.b	#7,$1C(a0)
000196A6 2268 0034                  		movea.l	$34(a0),a1
000196AA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000196B0 6600                       		bne.s	loc_195AA
000196B2 117C 000B 001C             		move.b	#$B,$1C(a0)
000196B8 4A28 0001                  		tst.b	1(a0)
000196BC 6A00                       		bpl.s	Obj75_FlameDelete
000196BE 6000                       		bra.s	loc_195B6
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            loc_195AA:
000196C0 4A69 0010                  		tst.w	$10(a1)
000196C4 6700                       		beq.s	loc_195B6
000196C6 117C 0008 001C             		move.b	#8,$1C(a0)
000196CC                            
000196CC                            loc_195B6:
000196CC 6000                       		bra.s	loc_195BE
000196CE                            ; ===========================================================================
000196CE                            
000196CE                            Obj75_FlameDelete:
000196CE 4EF9 0000 D778             		jmp	DeleteObject
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            loc_195BE:
000196D4 43F9 0001 7DDC             		lea	(Ani_Eggman).l,a1
000196DA 4EB9 0000 A7EE             		jsr	AnimateSprite
000196E0 2268 0034                  		movea.l	$34(a0),a1
000196E4 3169 0008 0008             		move.w	8(a1),8(a0)
000196EA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000196F0                            
000196F0                            loc_195DA:
000196F0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000196F6 7003                       		moveq	#3,d0
000196F8 C028 0022                  		and.b	$22(a0),d0
000196FC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019702 8128 0001                  		or.b	d0,1(a0)
00019706 4EF9 0000 D73C             		jmp	DisplaySprite
0001970C                            ; ===========================================================================
0001970C                            
0001970C                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001970C 217C 0001 7EF4 0004        		move.l	#Map_BossItems,4(a0)
00019714 317C 246C 0002             		move.w	#$246C,2(a0)
0001971A 117C 0005 001A             		move.b	#5,$1A(a0)
00019720 2268 0034                  		movea.l	$34(a0),a1
00019724 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001972A 6600                       		bne.s	loc_1961C
0001972C 4A28 0001                  		tst.b	1(a0)
00019730 6A00                       		bpl.s	Obj75_SpikeDelete
00019732                            
00019732                            loc_1961C:
00019732 3169 0008 0008             		move.w	8(a1),8(a0)
00019738 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001973E 3028 003C                  		move.w	$3C(a0),d0
00019742 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019748 6600                       		bne.s	loc_19652
0001974A 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019750 6700                       		beq.s	loc_1964C
00019752 4A29 0028                  		tst.b	$28(a1)
00019756 6600                       		bne.s	loc_19658
00019758 0C40 0094                  		cmpi.w	#$94,d0
0001975C 6C00                       		bge.s	loc_19658
0001975E 5E40                       		addq.w	#7,d0
00019760 6000                       		bra.s	loc_19658
00019762                            ; ===========================================================================
00019762                            
00019762                            loc_1964C:
00019762 4A69 003C                  		tst.w	$3C(a1)
00019766 6A00                       		bpl.s	loc_19658
00019768                            
00019768                            loc_19652:
00019768 4A40                       		tst.w	d0
0001976A 6F00                       		ble.s	loc_19658
0001976C 5B40                       		subq.w	#5,d0
0001976E                            
0001976E                            loc_19658:
0001976E 3140 003C                  		move.w	d0,$3C(a0)
00019772 E440                       		asr.w	#2,d0
00019774 D168 000C                  		add.w	d0,$C(a0)
00019778 117C 0008 0019             		move.b	#8,$19(a0)
0001977E 117C 000C 0016             		move.b	#$C,$16(a0)
00019784 4228 0020                  		clr.b	$20(a0)
00019788 2268 0034                  		movea.l	$34(a0),a1
0001978C 4A29 0020                  		tst.b	$20(a1)
00019790 6700                       		beq.s	loc_19688
00019792 4A29 0029                  		tst.b	$29(a1)
00019796 6600                       		bne.s	loc_19688
00019798 117C 0084 0020             		move.b	#$84,$20(a0)
0001979E                            
0001979E                            loc_19688:
0001979E 6000 FF50                  		bra.w	loc_195DA
000197A2                            ; ===========================================================================
000197A2                            
000197A2                            Obj75_SpikeDelete:
000197A2 4EF9 0000 D778             		jmp	DeleteObject
000197A8                            ; ===========================================================================
000197A8                            ; ---------------------------------------------------------------------------
000197A8                            ; Object 76 - blocks that Eggman picks up (SYZ)
000197A8                            ; ---------------------------------------------------------------------------
000197A8                            
000197A8                            Obj76:					; XREF: Obj_Index
000197A8 7000                       		moveq	#0,d0
000197AA 1028 0024                  		move.b	$24(a0),d0
000197AE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
000197B2 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
000197B6                            ; ===========================================================================
000197B6 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
000197B8 0000                       		dc.w Obj76_Action-Obj76_Index
000197BA 0000                       		dc.w loc_19762-Obj76_Index
000197BC                            ; ===========================================================================
000197BC                            
000197BC                            Obj76_Main:				; XREF: Obj76_Index
000197BC 7800                       		moveq	#0,d4
000197BE 3A3C 2C10                  		move.w	#$2C10,d5
000197C2 7C09                       		moveq	#9,d6
000197C4 43D0                       		lea	(a0),a1
000197C6 6000                       		bra.s	Obj76_MakeBlock
000197C8                            ; ===========================================================================
000197C8                            
000197C8                            Obj76_Loop:
000197C8 4EB9 0000 DBC2             		jsr	SingleObjLoad
000197CE 6600                       		bne.s	Obj76_ExitLoop
000197D0                            
000197D0                            Obj76_MakeBlock:			; XREF: Obj76_Main
000197D0 12BC 0076                  		move.b	#$76,(a1)
000197D4 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
000197DC 337C 4000 0002             		move.w	#$4000,2(a1)
000197E2 137C 0004 0001             		move.b	#4,1(a1)
000197E8 137C 0010 0019             		move.b	#$10,$19(a1)
000197EE 137C 0010 0016             		move.b	#$10,$16(a1)
000197F4 137C 0003 0018             		move.b	#3,$18(a1)
000197FA 3345 0008                  		move.w	d5,8(a1)	; set x-position
000197FE 337C 0582 000C             		move.w	#$582,$C(a1)
00019804 3344 0028                  		move.w	d4,$28(a1)
00019808 0644 0101                  		addi.w	#$101,d4
0001980C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019810 5429 0024                  		addq.b	#2,$24(a1)
00019814 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019818                            
00019818                            Obj76_ExitLoop:
00019818 4E75                       		rts	
0001981A                            ; ===========================================================================
0001981A                            
0001981A                            Obj76_Action:				; XREF: Obj76_Index
0001981A 1028 0029                  		move.b	$29(a0),d0
0001981E B028 0028                  		cmp.b	$28(a0),d0
00019822 6700                       		beq.s	Obj76_Solid
00019824 4A00                       		tst.b	d0
00019826 6B00                       		bmi.s	loc_19718
00019828                            
00019828                            loc_19712:
00019828 6100 0000                  		bsr.w	Obj76_Break
0001982C 6000                       		bra.s	Obj76_Display
0001982E                            ; ===========================================================================
0001982E                            
0001982E                            loc_19718:
0001982E 2268 0034                  		movea.l	$34(a0),a1
00019832 4A29 0021                  		tst.b	$21(a1)
00019836 67F0                       		beq.s	loc_19712
00019838 3169 0008 0008             		move.w	8(a1),8(a0)
0001983E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019844 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001984A B2C8                       		cmpa.w	a0,a1
0001984C 6500                       		bcs.s	Obj76_Display
0001984E 3029 0012                  		move.w	$12(a1),d0
00019852 48C0                       		ext.l	d0
00019854 E080                       		asr.l	#8,d0
00019856 D168 000C                  		add.w	d0,$C(a0)
0001985A 6000                       		bra.s	Obj76_Display
0001985C                            ; ===========================================================================
0001985C                            
0001985C                            Obj76_Solid:				; XREF: Obj76_Action
0001985C 323C 001B                  		move.w	#$1B,d1
00019860 343C 0010                  		move.w	#$10,d2
00019864 363C 0011                  		move.w	#$11,d3
00019868 3828 0008                  		move.w	8(a0),d4
0001986C 4EB9 0000 FB0C             		jsr	SolidObject
00019872                            
00019872                            Obj76_Display:				; XREF: Obj76_Action
00019872 4EF9 0000 D73C             		jmp	DisplaySprite
00019878                            ; ===========================================================================
00019878                            
00019878                            loc_19762:				; XREF: Obj76_Index
00019878 4A28 0001                  		tst.b	1(a0)
0001987C 6A00                       		bpl.s	Obj76_Delete
0001987E 4EB9 0000 D6EA             		jsr	ObjectFall
00019884 4EF9 0000 D73C             		jmp	DisplaySprite
0001988A                            ; ===========================================================================
0001988A                            
0001988A                            Obj76_Delete:
0001988A 4EF9 0000 D778             		jmp	DeleteObject
00019890                            
00019890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019890                            
00019890                            
00019890                            Obj76_Break:				; XREF: Obj76_Action
00019890 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019894 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019898 7801                       		moveq	#1,d4
0001989A 7203                       		moveq	#3,d1
0001989C 7438                       		moveq	#$38,d2
0001989E 5428 0024                  		addq.b	#2,$24(a0)
000198A2 117C 0008 0019             		move.b	#8,$19(a0)
000198A8 117C 0008 0016             		move.b	#8,$16(a0)
000198AE 43D0                       		lea	(a0),a1
000198B0 6000                       		bra.s	Obj76_MakeFrag
000198B2                            ; ===========================================================================
000198B2                            
000198B2                            Obj76_LoopFrag:
000198B2 4EB9 0000 DBD8             		jsr	SingleObjLoad2
000198B8 6600                       		bne.s	loc_197D4
000198BA                            
000198BA                            Obj76_MakeFrag:
000198BA 45D0                       		lea	(a0),a2
000198BC 47D1                       		lea	(a1),a3
000198BE 7603                       		moveq	#3,d3
000198C0                            
000198C0                            loc_197AA:
000198C0 26DA                       		move.l	(a2)+,(a3)+
000198C2 26DA                       		move.l	(a2)+,(a3)+
000198C4 26DA                       		move.l	(a2)+,(a3)+
000198C6 26DA                       		move.l	(a2)+,(a3)+
000198C8 51CB FFF6                  		dbf	d3,loc_197AA
000198CC                            
000198CC 335C 0010                  		move.w	(a4)+,$10(a1)
000198D0 335C 0012                  		move.w	(a4)+,$12(a1)
000198D4 361D                       		move.w	(a5)+,d3
000198D6 D769 0008                  		add.w	d3,8(a1)
000198DA 361D                       		move.w	(a5)+,d3
000198DC D769 000C                  		add.w	d3,$C(a1)
000198E0 1344 001A                  		move.b	d4,$1A(a1)
000198E4 5244                       		addq.w	#1,d4
000198E6 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
000198EA                            
000198EA                            loc_197D4:
000198EA 303C 00CB                  		move.w	#$CB,d0
000198EE 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
000198F4                            ; End of function Obj76_Break
000198F4                            
000198F4                            ; ===========================================================================
000198F4 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
000198F8 0180 FE00                  		dc.w $180, $FE00
000198FC FF00 FF00                  		dc.w $FF00, $FF00
00019900 0100 FF00                  		dc.w $100, $FF00
00019904 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019908 0010 0000                  		dc.w $10, 0
0001990C 0000 0010                  		dc.w 0,	$10
00019910 0010 0010                  		dc.w $10, $10
00019914                            ; ---------------------------------------------------------------------------
00019914                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019914                            ; ---------------------------------------------------------------------------
00019914                            Map_obj76:
00019914                            	include "_maps\obj76.asm"
00019914                            ; ---------------------------------------------------------------------------
00019914                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019914                            ; ---------------------------------------------------------------------------
00019914 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019918 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001991C 0000                       		dc.w byte_19826-Map_obj76
0001991E 02                         byte_19808:	dc.b 2
0001991F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019924 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019929 00                         		dc.b 0
0001992A 01                         byte_19814:	dc.b 1
0001992B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019930 01                         byte_1981A:	dc.b 1
00019931 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019936 01                         byte_19820:	dc.b 1
00019937 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001993C 01                         byte_19826:	dc.b 1
0001993D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019942                            		even
00019942                            		even
00019942                            
00019942                            ; ===========================================================================
00019942                            
00019942                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019942 4EF9 0000 D778             		jmp	DeleteObject
00019948                            ; ===========================================================================
00019948                            ; ---------------------------------------------------------------------------
00019948                            ; Object 82 - Eggman (SBZ2)
00019948                            ; ---------------------------------------------------------------------------
00019948                            
00019948                            Obj82:					; XREF: Obj_Index
00019948 7000                       		moveq	#0,d0
0001994A 1028 0024                  		move.b	$24(a0),d0
0001994E 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019952 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019956                            ; ===========================================================================
00019956 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019958 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001995A 0000                       		dc.w Obj82_Switch-Obj82_Index
0001995C                            
0001995C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001995F 0400 03                    		dc.b 4,	0, 3
00019962                            ; ===========================================================================
00019962                            
00019962                            Obj82_Main:				; XREF: Obj82_Index
00019962 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019966 317C 2160 0008             		move.w	#$2160,8(a0)
0001996C 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019972 117C 000F 0020             		move.b	#$F,$20(a0)
00019978 117C 0010 0021             		move.b	#$10,$21(a0)
0001997E 08A8 0000 0022             		bclr	#0,$22(a0)
00019984 4228 0025                  		clr.b	$25(a0)
00019988 115A 0024                  		move.b	(a2)+,$24(a0)
0001998C 115A 001C                  		move.b	(a2)+,$1C(a0)
00019990 115A 0018                  		move.b	(a2)+,$18(a0)
00019994 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001999C 317C 0400 0002             		move.w	#$400,2(a0)
000199A2 117C 0004 0001             		move.b	#4,1(a0)
000199A8 08E8 0007 0001             		bset	#7,1(a0)
000199AE 117C 0020 0019             		move.b	#$20,$19(a0)
000199B4 4EB9 0000 DBD8             		jsr	SingleObjLoad2
000199BA 6600                       		bne.s	Obj82_Eggman
000199BC 2348 0034                  		move.l	a0,$34(a1)
000199C0 12BC 0082                  		move.b	#$82,(a1)	; load switch object
000199C4 337C 2130 0008             		move.w	#$2130,8(a1)
000199CA 337C 05BC 000C             		move.w	#$5BC,$C(a1)
000199D0 4228 0025                  		clr.b	$25(a0)
000199D4 135A 0024                  		move.b	(a2)+,$24(a1)
000199D8 135A 001C                  		move.b	(a2)+,$1C(a1)
000199DC 135A 0018                  		move.b	(a2)+,$18(a1)
000199E0 237C 0000 BF30 0004        		move.l	#Map_obj32,4(a1)
000199E8 337C 04A4 0002             		move.w	#$4A4,2(a1)
000199EE 137C 0004 0001             		move.b	#4,1(a1)
000199F4 08E9 0007 0001             		bset	#7,1(a1)
000199FA 137C 0010 0019             		move.b	#$10,$19(a1)
00019A00 137C 0000 001A             		move.b	#0,$1A(a1)
00019A06                            
00019A06                            Obj82_Eggman:				; XREF: Obj82_Index
00019A06 7000                       		moveq	#0,d0
00019A08 1028 0025                  		move.b	$25(a0),d0
00019A0C 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019A10 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019A14 43FA 0000                  		lea	Ani_obj82(pc),a1
00019A18 4EB9 0000 A7EE             		jsr	AnimateSprite
00019A1E 4EF9 0000 D73C             		jmp	DisplaySprite
00019A24                            ; ===========================================================================
00019A24 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019A26 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019A28 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019A2A 0000                       		dc.w loc_19934-Obj82_EggIndex
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019A2C 3028 0008                  		move.w	8(a0),d0
00019A30 9078 D008                  		sub.w	($FFFFD008).w,d0
00019A34 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019A38 6400                       		bcc.s	loc_19934	; if not, branch
00019A3A 5428 0025                  		addq.b	#2,$25(a0)
00019A3E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019A44 117C 0001 001C             		move.b	#1,$1C(a0)
00019A4A                            
00019A4A                            loc_19934:				; XREF: Obj82_EggIndex
00019A4A 4EF9 0000 D716             		jmp	SpeedToPos
00019A50                            ; ===========================================================================
00019A50                            
00019A50                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019A50 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019A54 6600                       		bne.s	loc_19954	; if time remains, branch
00019A56 5428 0025                  		addq.b	#2,$25(a0)
00019A5A 117C 0002 001C             		move.b	#2,$1C(a0)
00019A60 5868 000C                  		addq.w	#4,$C(a0)
00019A64 317C 000F 003C             		move.w	#15,$3C(a0)
00019A6A                            
00019A6A                            loc_19954:
00019A6A 60DE                       		bra.s	loc_19934
00019A6C                            ; ===========================================================================
00019A6C                            
00019A6C                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019A6C 5368 003C                  		subq.w	#1,$3C(a0)
00019A70 6E00                       		bgt.s	loc_199D0
00019A72 6600                       		bne.s	loc_1996A
00019A74 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019A7A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019A80                            
00019A80                            loc_1996A:
00019A80 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019A86 6E00                       		bgt.s	loc_19976
00019A88 4268 0010                  		clr.w	$10(a0)
00019A8C                            
00019A8C                            loc_19976:
00019A8C 0668 0024 0012             		addi.w	#$24,$12(a0)
00019A92 4A68 0012                  		tst.w	$12(a0)
00019A96 6B00                       		bmi.s	Obj82_FindBlocks
00019A98 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019A9E 6500                       		bcs.s	Obj82_FindBlocks
00019AA0 317C 5357 0028             		move.w	#$5357,$28(a0)
00019AA6 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019AAC 6500                       		bcs.s	Obj82_FindBlocks
00019AAE 317C 059B 000C             		move.w	#$59B,$C(a0)
00019AB4 4268 0012                  		clr.w	$12(a0)
00019AB8                            
00019AB8                            Obj82_FindBlocks:
00019AB8 3028 0010                  		move.w	$10(a0),d0
00019ABC 8068 0012                  		or.w	$12(a0),d0
00019AC0 6600                       		bne.s	loc_199D0
00019AC2 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019AC6 703E                       		moveq	#$3E,d0
00019AC8 7240                       		moveq	#$40,d1
00019ACA                            
00019ACA                            Obj82_FindLoop:	
00019ACA D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019ACC 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019AD0 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019AD4                            
00019AD4 6600                       		bne.s	loc_199D0
00019AD6 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019ADC 5428 0025                  		addq.b	#2,$25(a0)
00019AE0 117C 0001 001C             		move.b	#1,$1C(a0)
00019AE6                            
00019AE6                            loc_199D0:
00019AE6 6000 FF62                  		bra.w	loc_19934
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            Obj82_Switch:				; XREF: Obj82_Index
00019AEA 7000                       		moveq	#0,d0
00019AEC 1028 0025                  		move.b	$25(a0),d0
00019AF0 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019AF4 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019AF8                            ; ===========================================================================
00019AF8 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019AFA 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019AFC                            ; ===========================================================================
00019AFC                            
00019AFC                            loc_199E6:				; XREF: Obj82_SwIndex
00019AFC 2268 0034                  		movea.l	$34(a0),a1
00019B00 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019B06 6600                       		bne.s	Obj82_SwDisplay
00019B08 117C 0001 001A             		move.b	#1,$1A(a0)
00019B0E 5428 0025                  		addq.b	#2,$25(a0)
00019B12                            
00019B12                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019B12 4EF9 0000 D73C             		jmp	DisplaySprite
00019B18                            ; ===========================================================================
00019B18                            Ani_obj82:
00019B18                            	include "_anim\obj82.asm"
00019B18                            ; ---------------------------------------------------------------------------
00019B18                            ; Animation script - Eggman (SBZ2)
00019B18                            ; ---------------------------------------------------------------------------
00019B18 0000                       		dc.w byte_19A10-Ani_obj82
00019B1A 0000                       		dc.w byte_19A14-Ani_obj82
00019B1C 0000                       		dc.w byte_19A18-Ani_obj82
00019B1E 0000                       		dc.w byte_19A20-Ani_obj82
00019B20 0000                       		dc.w byte_19A24-Ani_obj82
00019B22 0000                       		dc.w byte_19A2A-Ani_obj82
00019B24 0000                       		dc.w byte_19A30-Ani_obj82
00019B26 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019B2A 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019B2E 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019B36 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019B3A 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019B40 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019B46 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019B4A                            		even
00019B4A                            		even
00019B4A                            
00019B4A                            ; ---------------------------------------------------------------------------
00019B4A                            ; Sprite mappings - Eggman (SBZ2)
00019B4A                            ; ---------------------------------------------------------------------------
00019B4A                            Map_obj82:
00019B4A                            	include "_maps\obj82.asm"
00019B4A                            ; ---------------------------------------------------------------------------
00019B4A                            ; Sprite mappings - Eggman (SBZ2)
00019B4A                            ; ---------------------------------------------------------------------------
00019B4A 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019B4E 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019B52 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019B56 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019B5A 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019B5E 0000                       		dc.w byte_19B4F-Map_obj82
00019B60 03                         byte_19A4A:	dc.b 3
00019B61 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019B66 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B6B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019B70 04                         byte_19A5A:	dc.b 4
00019B71 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019B76 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B7B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019B80 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019B85 00                         		dc.b 0
00019B86 04                         byte_19A70:	dc.b 4
00019B87 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019B8C E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019B91 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019B96 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019B9B 00                         		dc.b 0
00019B9C 04                         byte_19A86:	dc.b 4
00019B9D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019BA2 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019BA7 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019BAC EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019BB1 00                         		dc.b 0
00019BB2 04                         byte_19A9C:	dc.b 4
00019BB3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019BB8 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019BBD 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019BC2 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019BC7 00                         		dc.b 0
00019BC8 04                         byte_19AB2:	dc.b 4
00019BC9 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019BCE E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019BD3 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019BD8 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019BDD 00                         		dc.b 0
00019BDE 07                         byte_19AC8:	dc.b 7
00019BDF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019BE4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019BE9 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019BEE 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019BF3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019BF8 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019BFD F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019C02 05                         byte_19AEC:	dc.b 5
00019C03 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019C08 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019C0D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019C12 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019C17 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C1C 06                         byte_19B06:	dc.b 6
00019C1D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019C22 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019C27 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019C2C 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019C31 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019C36 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019C3B 00                         		dc.b 0
00019C3C 08                         byte_19B26:	dc.b 8
00019C3D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019C42 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019C47 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C4C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019C51 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019C56 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019C5B 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019C60 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019C65 03                         byte_19B4F:	dc.b 3
00019C66 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019C6B F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019C70 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019C76 00                         		even
00019C76 00                         		even
00019C76                            
00019C76                            ; ===========================================================================
00019C76                            ; ---------------------------------------------------------------------------
00019C76                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019C76                            ; ---------------------------------------------------------------------------
00019C76                            
00019C76                            Obj83:					; XREF: Obj_Index
00019C76 7000                       		moveq	#0,d0
00019C78 1028 0024                  		move.b	$24(a0),d0
00019C7C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019C80 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019C84                            ; ===========================================================================
00019C84 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019C86 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019C88 0000                       		dc.w loc_19C36-Obj83_Index
00019C8A 0000                       		dc.w loc_19C62-Obj83_Index
00019C8C 0000                       		dc.w loc_19C72-Obj83_Index
00019C8E 0000                       		dc.w loc_19C80-Obj83_Index
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            Obj83_Main:				; XREF: Obj83_Index
00019C90 317C 2080 0008             		move.w	#$2080,8(a0)
00019C96 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019C9C 117C 0080 0019             		move.b	#$80,$19(a0)
00019CA2 117C 0010 0016             		move.b	#$10,$16(a0)
00019CA8 117C 0004 0001             		move.b	#4,1(a0)
00019CAE 08E8 0007 0001             		bset	#7,1(a0)
00019CB4 7800                       		moveq	#0,d4
00019CB6 3A3C 2010                  		move.w	#$2010,d5
00019CBA 7C07                       		moveq	#7,d6
00019CBC 45E8 0030                  		lea	$30(a0),a2
00019CC0                            
00019CC0                            Obj83_MakeBlock:
00019CC0 4EB9 0000 DBC2             		jsr	SingleObjLoad
00019CC6 6600                       		bne.s	Obj83_ExitMake
00019CC8 34C9                       		move.w	a1,(a2)+
00019CCA 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019CCE 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019CD6 337C 4518 0002             		move.w	#$4518,2(a1)
00019CDC 137C 0004 0001             		move.b	#4,1(a1)
00019CE2 137C 0010 0019             		move.b	#$10,$19(a1)
00019CE8 137C 0010 0016             		move.b	#$10,$16(a1)
00019CEE 137C 0003 0018             		move.b	#3,$18(a1)
00019CF4 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019CF8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019CFE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019D02 137C 0008 0024             		move.b	#8,$24(a1)
00019D08 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019D0C                            
00019D0C                            Obj83_ExitMake:
00019D0C 5428 0024                  		addq.b	#2,$24(a0)
00019D10 4E75                       		rts	
00019D12                            ; ===========================================================================
00019D12                            
00019D12                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019D12 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019D18 6600                       		bne.s	Obj83_Solid	; if not, branch
00019D1A 4228 001A                  		clr.b	$1A(a0)
00019D1E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019D22                            
00019D22                            Obj83_Solid:
00019D22 7000                       		moveq	#0,d0
00019D24 1028 001A                  		move.b	$1A(a0),d0
00019D28 4400                       		neg.b	d0
00019D2A 4880                       		ext.w	d0
00019D2C 5040                       		addq.w	#8,d0
00019D2E E940                       		asl.w	#4,d0
00019D30 383C 2100                  		move.w	#$2100,d4
00019D34 9840                       		sub.w	d0,d4
00019D36 1140 0019                  		move.b	d0,$19(a0)
00019D3A 3144 0008                  		move.w	d4,8(a0)
00019D3E 720B                       		moveq	#$B,d1
00019D40 D240                       		add.w	d0,d1
00019D42 7410                       		moveq	#$10,d2
00019D44 7611                       		moveq	#$11,d3
00019D46 4EF9 0000 FB0C             		jmp	SolidObject
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            loc_19C36:				; XREF: Obj83_Index
00019D4C 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019D52 6400                       		bcc.s	Obj83_Solid2
00019D54 70FF                       		moveq	#-1,d0
00019D56 1028 001A                  		move.b	$1A(a0),d0
00019D5A 4880                       		ext.w	d0
00019D5C D040                       		add.w	d0,d0
00019D5E 3030 0030                  		move.w	$30(a0,d0.w),d0
00019D62 2240                       		movea.l	d0,a1
00019D64 337C 474F 0028             		move.w	#$474F,$28(a1)
00019D6A 5228 001A                  		addq.b	#1,$1A(a0)
00019D6E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019D74 6700                       		beq.s	loc_19C62
00019D76                            
00019D76                            Obj83_Solid2:
00019D76 60AA                       		bra.s	Obj83_Solid
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            loc_19C62:				; XREF: Obj83_Index
00019D78 08A8 0003 0022             		bclr	#3,$22(a0)
00019D7E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019D84 6000 FBBC                  		bra.w	loc_1982C
00019D88                            ; ===========================================================================
00019D88                            
00019D88                            loc_19C72:				; XREF: Obj83_Index
00019D88 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019D8E 6700                       		beq.s	Obj83_Break	; if yes, branch
00019D90 4EF9 0000 D73C             		jmp	DisplaySprite
00019D96                            ; ===========================================================================
00019D96                            
00019D96                            loc_19C80:				; XREF: Obj83_Index
00019D96 4A28 0001                  		tst.b	1(a0)
00019D9A 6A00 FBA6                  		bpl.w	loc_1982C
00019D9E 4EB9 0000 D6EA             		jsr	ObjectFall
00019DA4 4EF9 0000 D73C             		jmp	DisplaySprite
00019DAA                            ; ===========================================================================
00019DAA                            
00019DAA                            Obj83_Break:				; XREF: loc_19C72
00019DAA 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019DAE 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019DB2 7801                       		moveq	#1,d4
00019DB4 7203                       		moveq	#3,d1
00019DB6 7438                       		moveq	#$38,d2
00019DB8 5428 0024                  		addq.b	#2,$24(a0)
00019DBC 117C 0008 0019             		move.b	#8,$19(a0)
00019DC2 117C 0008 0016             		move.b	#8,$16(a0)
00019DC8 43D0                       		lea	(a0),a1
00019DCA 6000                       		bra.s	Obj83_MakeFrag
00019DCC                            ; ===========================================================================
00019DCC                            
00019DCC                            Obj83_LoopFrag:
00019DCC 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00019DD2 6600                       		bne.s	Obj83_BreakSnd
00019DD4                            
00019DD4                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019DD4 45D0                       		lea	(a0),a2
00019DD6 47D1                       		lea	(a1),a3
00019DD8 7603                       		moveq	#3,d3
00019DDA                            
00019DDA                            loc_19CC4:
00019DDA 26DA                       		move.l	(a2)+,(a3)+
00019DDC 26DA                       		move.l	(a2)+,(a3)+
00019DDE 26DA                       		move.l	(a2)+,(a3)+
00019DE0 26DA                       		move.l	(a2)+,(a3)+
00019DE2 51CB FFF6                  		dbf	d3,loc_19CC4
00019DE6                            
00019DE6 335C 0012                  		move.w	(a4)+,$12(a1)
00019DEA 361D                       		move.w	(a5)+,d3
00019DEC D769 0008                  		add.w	d3,8(a1)
00019DF0 361D                       		move.w	(a5)+,d3
00019DF2 D769 000C                  		add.w	d3,$C(a1)
00019DF6 1344 001A                  		move.b	d4,$1A(a1)
00019DFA 5244                       		addq.w	#1,d4
00019DFC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019E00                            
00019E00                            Obj83_BreakSnd:
00019E00 303C 00CB                  		move.w	#$CB,d0
00019E04 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play smashing sound
00019E0A 4EF9 0000 D73C             		jmp	DisplaySprite
00019E10                            ; ===========================================================================
00019E10 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019E14 0120 00C0                  		dc.w $120, $C0
00019E18 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019E1C 0010 0000                  		dc.w $10, 0
00019E20 0000 0010                  		dc.w 0,	$10
00019E24 0010 0010                  		dc.w $10, $10
00019E28                            ; ---------------------------------------------------------------------------
00019E28                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019E28                            ; ---------------------------------------------------------------------------
00019E28                            Map_obj83:
00019E28                            	include "_maps\obj83.asm"
00019E28                            ; ---------------------------------------------------------------------------
00019E28                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019E28                            ; ---------------------------------------------------------------------------
00019E28 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019E2C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019E30 0000                       		dc.w byte_19D46-Map_obj83
00019E32 01                         byte_19D1C:	dc.b 1
00019E33 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019E38 02                         byte_19D22:	dc.b 2
00019E39 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019E3E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019E43 00                         		dc.b 0
00019E44 02                         byte_19D2E:	dc.b 2
00019E45 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019E4A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019E4F 00                         		dc.b 0
00019E50 02                         byte_19D3A:	dc.b 2
00019E51 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019E56 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019E5B 00                         		dc.b 0
00019E5C 02                         byte_19D46:	dc.b 2
00019E5D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019E62 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019E68 00                         		even
00019E68 00                         		even
00019E68                            
00019E68                            ; ===========================================================================
00019E68                            ; ---------------------------------------------------------------------------
00019E68                            ; Object 85 - Eggman (FZ)
00019E68                            ; ---------------------------------------------------------------------------
00019E68                            
00019E68                            Obj85_Delete:
00019E68 4EF9 0000 D778             		jmp	DeleteObject
00019E6E                            ; ===========================================================================
00019E6E                            
00019E6E                            Obj85:					; XREF: Obj_Index
00019E6E 7000                       		moveq	#0,d0
00019E70 1028 0024                  		move.b	$24(a0),d0
00019E74 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019E78 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019E7C                            ; ===========================================================================
00019E7C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019E7E 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019E80 0000                       		dc.w loc_1A38E-Obj85_Index
00019E82 0000                       		dc.w loc_1A346-Obj85_Index
00019E84 0000                       		dc.w loc_1A2C6-Obj85_Index
00019E86 0000                       		dc.w loc_1A3AC-Obj85_Index
00019E88 0000                       		dc.w loc_1A264-Obj85_Index
00019E8A                            
00019E8A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019E90 0001 9B4A                  		dc.l Map_obj82		; mappings pointer
00019E94 25B0 0590 0300             		dc.w $25B0, $590, $300
00019E9A 0000 0000                  		dc.l Map_obj84
00019E9E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019EA4 0000 0000                  		dc.l Map_FZBoss
00019EA8 26E0 0596 0470             		dc.w $26E0, $596, $470
00019EAE 0001 9B4A                  		dc.l Map_obj82
00019EB2 26E0 0596 0400             		dc.w $26E0, $596, $400
00019EB8 0001 7E2C                  		dc.l Map_Eggman
00019EBC 26E0 0596 0400             		dc.w $26E0, $596, $400
00019EC2 0001 7E2C                  		dc.l Map_Eggman
00019EC6                            
00019EC6 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019ECB 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019ED0 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019ED5 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019EDA 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019EDF 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            Obj85_Main:				; XREF: Obj85_Index
00019EE4 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019EE8 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019EEC 2248                       		movea.l	a0,a1
00019EEE 7205                       		moveq	#5,d1
00019EF0 6000                       		bra.s	Obj85_LoadBoss
00019EF2                            ; ===========================================================================
00019EF2                            
00019EF2                            Obj85_Loop:
00019EF2 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00019EF8 6600                       		bne.s	loc_19E20
00019EFA                            
00019EFA                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019EFA 12BC 0085                  		move.b	#$85,(a1)
00019EFE 335A 0008                  		move.w	(a2)+,8(a1)
00019F02 335A 000C                  		move.w	(a2)+,$C(a1)
00019F06 335A 0002                  		move.w	(a2)+,2(a1)
00019F0A 235A 0004                  		move.l	(a2)+,4(a1)
00019F0E 135B 0024                  		move.b	(a3)+,$24(a1)
00019F12 135B 001C                  		move.b	(a3)+,$1C(a1)
00019F16 135B 0018                  		move.b	(a3)+,$18(a1)
00019F1A 135B 0017                  		move.b	(a3)+,$17(a1)
00019F1E 135B 0016                  		move.b	(a3)+,$16(a1)
00019F22 137C 0004 0001             		move.b	#4,1(a1)
00019F28 08E8 0007 0001             		bset	#7,1(a0)
00019F2E 2348 0034                  		move.l	a0,$34(a1)
00019F32 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019F36                            
00019F36                            loc_19E20:
00019F36 45E8 0036                  		lea	$36(a0),a2
00019F3A 4EB9 0000 DBC2             		jsr	SingleObjLoad
00019F40 6600                       		bne.s	loc_19E5A
00019F42 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019F46 3489                       		move.w	a1,(a2)
00019F48 2348 0034                  		move.l	a0,$34(a1)
00019F4C 45E8 0038                  		lea	$38(a0),a2
00019F50 7400                       		moveq	#0,d2
00019F52 7203                       		moveq	#3,d1
00019F54                            
00019F54                            loc_19E3E:
00019F54 4EB9 0000 DBD8             		jsr	SingleObjLoad2
00019F5A 6600                       		bne.s	loc_19E5A
00019F5C 34C9                       		move.w	a1,(a2)+
00019F5E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00019F62 2348 0034                  		move.l	a0,$34(a1)
00019F66 1342 0028                  		move.b	d2,$28(a1)
00019F6A 5442                       		addq.w	#2,d2
00019F6C 51C9 FFE6                  		dbf	d1,loc_19E3E
00019F70                            
00019F70                            loc_19E5A:
00019F70 317C 0000 0034             		move.w	#0,$34(a0)
00019F76 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019F7C 317C FFFF 0030             		move.w	#-1,$30(a0)
00019F82                            
00019F82                            Obj85_Eggman:				; XREF: Obj85_Index
00019F82 7000                       		moveq	#0,d0
00019F84 1028 0034                  		move.b	$34(a0),d0
00019F88 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00019F8C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00019F90 4EF9 0000 D73C             		jmp	DisplaySprite
00019F96                            ; ===========================================================================
00019F96 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00019F9A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00019F9E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00019FA2 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_19E90:				; XREF: off_19E80
00019FA6 4AB8 F680                  		tst.l	($FFFFF680).w
00019FAA 6600                       		bne.s	loc_19EA2
00019FAC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00019FB2 6500                       		bcs.s	loc_19EA2
00019FB4 5428 0034                  		addq.b	#2,$34(a0)
00019FB8                            
00019FB8                            loc_19EA2:
00019FB8 52B8 F636                  		addq.l	#1,($FFFFF636).w
00019FBC 4E75                       		rts	
00019FBE                            ; ===========================================================================
00019FBE                            
00019FBE                            loc_19EA8:				; XREF: off_19E80
00019FBE 4A68 0030                  		tst.w	$30(a0)
00019FC2 6A00                       		bpl.s	loc_19F10
00019FC4 4268 0030                  		clr.w	$30(a0)
00019FC8 4EB9 0000 29B4             		jsr	(RandomNumber).l
00019FCE 0240 000C                  		andi.w	#$C,d0
00019FD2 3200                       		move.w	d0,d1
00019FD4 5441                       		addq.w	#2,d1
00019FD6 4A80                       		tst.l	d0
00019FD8 6A00                       		bpl.s	loc_19EC6
00019FDA C141                       		exg	d1,d0
00019FDC                            
00019FDC                            loc_19EC6:
00019FDC 43FA 0000                  		lea	word_19FD6(pc),a1
00019FE0 3031 0000                  		move.w	(a1,d0.w),d0
00019FE4 3231 1000                  		move.w	(a1,d1.w),d1
00019FE8 3140 0030                  		move.w	d0,$30(a0)
00019FEC 74FF                       		moveq	#-1,d2
00019FEE 3430 0038                  		move.w	$38(a0,d0.w),d2
00019FF2 2242                       		movea.l	d2,a1
00019FF4 137C 00FF 0029             		move.b	#-1,$29(a1)
00019FFA 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A000 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A004 2242                       		movea.l	d2,a1
0001A006 137C 0001 0029             		move.b	#1,$29(a1)
0001A00C 337C 0000 0030             		move.w	#0,$30(a1)
0001A012 317C 0001 0032             		move.w	#1,$32(a0)
0001A018 4228 0035                  		clr.b	$35(a0)
0001A01C 303C 00B7                  		move.w	#$B7,d0
0001A020 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A026                            
0001A026                            loc_19F10:
0001A026 4A68 0032                  		tst.w	$32(a0)
0001A02A 6B00 0000                  		bmi.w	loc_19FA6
0001A02E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A034 3038 D008                  		move.w	($FFFFD008).w,d0
0001A038 9068 0008                  		sub.w	8(a0),d0
0001A03C 6500                       		bcs.s	loc_19F2E
0001A03E 08E8 0000 0022             		bset	#0,$22(a0)
0001A044                            
0001A044                            loc_19F2E:
0001A044 323C 002B                  		move.w	#$2B,d1
0001A048 343C 0014                  		move.w	#$14,d2
0001A04C 363C 0014                  		move.w	#$14,d3
0001A050 3828 0008                  		move.w	8(a0),d4
0001A054 4EB9 0000 FB0C             		jsr	SolidObject
0001A05A 4A44                       		tst.w	d4
0001A05C 6E00                       		bgt.s	loc_19F50
0001A05E                            
0001A05E                            loc_19F48:
0001A05E 4A28 0035                  		tst.b	$35(a0)
0001A062 6600                       		bne.s	loc_19F88
0001A064 6000                       		bra.s	loc_19F96
0001A066                            ; ===========================================================================
0001A066                            
0001A066                            loc_19F50:
0001A066 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A06A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A070 66EC                       		bne.s	loc_19F48
0001A072 303C 0300                  		move.w	#$300,d0
0001A076 0828 0000 0022             		btst	#0,$22(a0)
0001A07C 6600                       		bne.s	loc_19F6A
0001A07E 4440                       		neg.w	d0
0001A080                            
0001A080                            loc_19F6A:
0001A080 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A084 4A28 0035                  		tst.b	$35(a0)
0001A088 6600                       		bne.s	loc_19F88
0001A08A 5328 0021                  		subq.b	#1,$21(a0)
0001A08E 117C 0064 0035             		move.b	#$64,$35(a0)
0001A094 303C 00AC                  		move.w	#$AC,d0
0001A098 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A09E                            
0001A09E                            loc_19F88:
0001A09E 5328 0035                  		subq.b	#1,$35(a0)
0001A0A2 6700                       		beq.s	loc_19F96
0001A0A4 117C 0003 001C             		move.b	#3,$1C(a0)
0001A0AA 6000                       		bra.s	loc_19F9C
0001A0AC                            ; ===========================================================================
0001A0AC                            
0001A0AC                            loc_19F96:
0001A0AC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A0B2                            
0001A0B2                            loc_19F9C:
0001A0B2 43FA FA64                  		lea	Ani_obj82(pc),a1
0001A0B6 4EF9 0000 A7EE             		jmp	AnimateSprite
0001A0BC                            ; ===========================================================================
0001A0BC                            
0001A0BC                            loc_19FA6:
0001A0BC 4A28 0021                  		tst.b	$21(a0)
0001A0C0 6700                       		beq.s	loc_19FBC
0001A0C2 5428 0034                  		addq.b	#2,$34(a0)
0001A0C6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A0CC 4268 0032                  		clr.w	$32(a0)
0001A0D0 4E75                       		rts	
0001A0D2                            ; ===========================================================================
0001A0D2                            
0001A0D2                            loc_19FBC:
0001A0D2 117C 0006 0034             		move.b	#6,$34(a0)
0001A0D8 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A0DE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A0E4 117C 0014 0016             		move.b	#$14,$16(a0)
0001A0EA 4E75                       		rts	
0001A0EC                            ; ===========================================================================
0001A0EC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A0FC                            ; ===========================================================================
0001A0FC                            
0001A0FC                            loc_19FE6:				; XREF: off_19E80
0001A0FC 70FF                       		moveq	#-1,d0
0001A0FE 3028 0036                  		move.w	$36(a0),d0
0001A102 2240                       		movea.l	d0,a1
0001A104 4A68 0030                  		tst.w	$30(a0)
0001A108 6A00                       		bpl.s	loc_1A000
0001A10A 4268 0030                  		clr.w	$30(a0)
0001A10E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A114 6100                       		bsr.s	loc_1A020
0001A116                            
0001A116                            loc_1A000:
0001A116 700F                       		moveq	#$F,d0
0001A118 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A11C 6600                       		bne.s	loc_1A00A
0001A11E 6100                       		bsr.s	loc_1A020
0001A120                            
0001A120                            loc_1A00A:
0001A120 4A68 0032                  		tst.w	$32(a0)
0001A124 6700                       		beq.s	locret_1A01E
0001A126 5528 0034                  		subq.b	#2,$34(a0)
0001A12A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A130 4268 0032                  		clr.w	$32(a0)
0001A134                            
0001A134                            locret_1A01E:
0001A134 4E75                       		rts	
0001A136                            ; ===========================================================================
0001A136                            
0001A136                            loc_1A020:
0001A136 303C 00B1                  		move.w	#$B1,d0
0001A13A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            loc_1A02A:				; XREF: off_19E80
0001A140 117C 0030 0017             		move.b	#$30,$17(a0)
0001A146 08E8 0000 0022             		bset	#0,$22(a0)
0001A14C 4EB9 0000 D716             		jsr	SpeedToPos
0001A152 117C 0006 001A             		move.b	#6,$1A(a0)
0001A158 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A15E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A164 6500                       		bcs.s	loc_1A070
0001A166 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A16C 5428 0034                  		addq.b	#2,$34(a0)
0001A170 117C 0020 0017             		move.b	#$20,$17(a0)
0001A176 317C 0100 0010             		move.w	#$100,$10(a0)
0001A17C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A182 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A186                            
0001A186                            loc_1A070:
0001A186 6000 0000                  		bra.w	loc_1A166
0001A18A                            ; ===========================================================================
0001A18A                            
0001A18A                            loc_1A074:				; XREF: off_19E80
0001A18A 08E8 0000 0022             		bset	#0,$22(a0)
0001A190 117C 0004 001C             		move.b	#4,$1C(a0)
0001A196 4EB9 0000 D716             		jsr	SpeedToPos
0001A19C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A1A2 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A1A8 6500                       		bcs.s	loc_1A09A
0001A1AA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A1B0                            
0001A1B0                            loc_1A09A:
0001A1B0 317C 0400 0010             		move.w	#$400,$10(a0)
0001A1B6 3028 0008                  		move.w	8(a0),d0
0001A1BA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A1BE 6A00                       		bpl.s	loc_1A0B4
0001A1C0 317C 0500 0010             		move.w	#$500,$10(a0)
0001A1C6 6000 0000                  		bra.w	loc_1A0F2
0001A1CA                            ; ===========================================================================
0001A1CA                            
0001A1CA                            loc_1A0B4:
0001A1CA 0440 0070                  		subi.w	#$70,d0
0001A1CE 6500                       		bcs.s	loc_1A0F2
0001A1D0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A1D6 5140                       		subq.w	#8,d0
0001A1D8 6500                       		bcs.s	loc_1A0F2
0001A1DA 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A1E0 5140                       		subq.w	#8,d0
0001A1E2 6500                       		bcs.s	loc_1A0F2
0001A1E4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A1EA 5140                       		subq.w	#8,d0
0001A1EC 6500                       		bcs.s	loc_1A0F2
0001A1EE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A1F4 5140                       		subq.w	#8,d0
0001A1F6 6500                       		bcs.s	loc_1A0F2
0001A1F8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A1FE 0440 0038                  		subi.w	#$38,d0
0001A202 6500                       		bcs.s	loc_1A0F2
0001A204 4268 0010                  		clr.w	$10(a0)
0001A208                            
0001A208                            loc_1A0F2:
0001A208 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A20E 6500                       		bcs.s	loc_1A110
0001A210 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A216 317C 0240 0010             		move.w	#$240,$10(a0)
0001A21C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A222 5428 0034                  		addq.b	#2,$34(a0)
0001A226                            
0001A226                            loc_1A110:
0001A226 6000                       		bra.s	loc_1A15C
0001A228                            ; ===========================================================================
0001A228                            
0001A228                            loc_1A112:				; XREF: off_19E80
0001A228 4EB9 0000 D716             		jsr	SpeedToPos
0001A22E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A234 6500                       		bcs.s	loc_1A124
0001A236 4268 0010                  		clr.w	$10(a0)
0001A23A                            
0001A23A                            loc_1A124:
0001A23A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A240 4A68 0012                  		tst.w	$12(a0)
0001A244 6B00                       		bmi.s	loc_1A142
0001A246 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A24C 6500                       		bcs.s	loc_1A142
0001A24E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A254 4268 0012                  		clr.w	$12(a0)
0001A258                            
0001A258                            loc_1A142:
0001A258 3028 0010                  		move.w	$10(a0),d0
0001A25C 8068 0012                  		or.w	$12(a0),d0
0001A260 6600                       		bne.s	loc_1A15C
0001A262 5428 0034                  		addq.b	#2,$34(a0)
0001A266 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A26C 117C 0001 0021             		move.b	#1,$21(a0)
0001A272                            
0001A272                            loc_1A15C:
0001A272 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A276 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A27C                            
0001A27C                            loc_1A166:
0001A27C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A282 6C00                       		bge.s	loc_1A172
0001A284 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A288                            
0001A288                            loc_1A172:
0001A288 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A28E 6C00                       		bge.s	locret_1A190
0001A290 323C 001B                  		move.w	#$1B,d1
0001A294 343C 0070                  		move.w	#$70,d2
0001A298 363C 0071                  		move.w	#$71,d3
0001A29C 3828 0008                  		move.w	8(a0),d4
0001A2A0 4EF9 0000 FB0C             		jmp	SolidObject
0001A2A6                            ; ===========================================================================
0001A2A6                            
0001A2A6                            locret_1A190:
0001A2A6 4E75                       		rts	
0001A2A8                            ; ===========================================================================
0001A2A8                            
0001A2A8                            loc_1A192:				; XREF: off_19E80
0001A2A8 217C 0001 7E2C 0004        		move.l	#Map_Eggman,4(a0)
0001A2B0 317C 0400 0002             		move.w	#$400,2(a0)
0001A2B6 117C 0000 001C             		move.b	#0,$1C(a0)
0001A2BC 08E8 0000 0022             		bset	#0,$22(a0)
0001A2C2 4EB9 0000 D716             		jsr	SpeedToPos
0001A2C8 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A2CE 6400                       		bcc.s	loc_1A1D0
0001A2D0 317C 0180 0010             		move.w	#$180,$10(a0)
0001A2D6 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A2DC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A2E2 5428 0034                  		addq.b	#2,$34(a0)
0001A2E6                            
0001A2E6                            loc_1A1D0:
0001A2E6 6000 FF8A                  		bra.w	loc_1A15C
0001A2EA                            ; ===========================================================================
0001A2EA                            
0001A2EA                            loc_1A1D4:				; XREF: off_19E80
0001A2EA 08E8 0000 0022             		bset	#0,$22(a0)
0001A2F0 4EB9 0000 D716             		jsr	SpeedToPos
0001A2F6 4A68 0030                  		tst.w	$30(a0)
0001A2FA 6600                       		bne.s	loc_1A1FC
0001A2FC 4A28 0020                  		tst.b	$20(a0)
0001A300 6600                       		bne.s	loc_1A216
0001A302 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A308 303C 00AC                  		move.w	#$AC,d0
0001A30C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A312                            
0001A312                            loc_1A1FC:
0001A312 5368 0030                  		subq.w	#1,$30(a0)
0001A316 6600                       		bne.s	loc_1A216
0001A318 4A28 0022                  		tst.b	$22(a0)
0001A31C 6A00                       		bpl.s	loc_1A210
0001A31E 317C 0060 0012             		move.w	#$60,$12(a0)
0001A324 6000                       		bra.s	loc_1A216
0001A326                            ; ===========================================================================
0001A326                            
0001A326                            loc_1A210:
0001A326 117C 000F 0020             		move.b	#$F,$20(a0)
0001A32C                            
0001A32C                            loc_1A216:
0001A32C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A332 6D00                       		blt.s	loc_1A23A
0001A334 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A33A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A340 4278 D014                  		clr.w	($FFFFD014).w
0001A344 4A68 0012                  		tst.w	$12(a0)
0001A348 6A00                       		bpl.s	loc_1A248
0001A34A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A350                            
0001A350                            loc_1A23A:
0001A350 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A356 6D00                       		blt.s	loc_1A248
0001A358 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A35E                            
0001A35E                            loc_1A248:
0001A35E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A364 6500                       		bcs.s	loc_1A260
0001A366 4A28 0001                  		tst.b	1(a0)
0001A36A 6B00                       		bmi.s	loc_1A260
0001A36C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A372 6000 FAF4                  		bra.w	Obj85_Delete
0001A376                            ; ===========================================================================
0001A376                            
0001A376                            loc_1A260:
0001A376 6000 FEFA                  		bra.w	loc_1A15C
0001A37A                            ; ===========================================================================
0001A37A                            
0001A37A                            loc_1A264:				; XREF: Obj85_Index
0001A37A 2268 0034                  		movea.l	$34(a0),a1
0001A37E 1011                       		move.b	(a1),d0
0001A380 B010                       		cmp.b	(a0),d0
0001A382 6600 FAE4                  		bne.w	Obj85_Delete
0001A386 117C 0007 001C             		move.b	#7,$1C(a0)
0001A38C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A392 6C00                       		bge.s	loc_1A280
0001A394 6000                       		bra.s	loc_1A2A6
0001A396                            ; ===========================================================================
0001A396                            
0001A396                            loc_1A280:
0001A396 4A69 0010                  		tst.w	$10(a1)
0001A39A 6700                       		beq.s	loc_1A28C
0001A39C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A3A2                            
0001A3A2                            loc_1A28C:
0001A3A2 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A3A6 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A3AC                            
0001A3AC                            loc_1A296:
0001A3AC 2268 0034                  		movea.l	$34(a0),a1
0001A3B0 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3B6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A3BC                            
0001A3BC                            loc_1A2A6:
0001A3BC 2268 0034                  		movea.l	$34(a0),a1
0001A3C0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A3C6 7003                       		moveq	#3,d0
0001A3C8 C028 0022                  		and.b	$22(a0),d0
0001A3CC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A3D2 8128 0001                  		or.b	d0,1(a0)
0001A3D6 4EF9 0000 D73C             		jmp	DisplaySprite
0001A3DC                            ; ===========================================================================
0001A3DC                            
0001A3DC                            loc_1A2C6:				; XREF: Obj85_Index
0001A3DC 2268 0034                  		movea.l	$34(a0),a1
0001A3E0 1011                       		move.b	(a1),d0
0001A3E2 B010                       		cmp.b	(a0),d0
0001A3E4 6600 FA82                  		bne.w	Obj85_Delete
0001A3E8 0CA9 0001 7E2C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A3F0 6700                       		beq.s	loc_1A2E4
0001A3F2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A3F8 60C2                       		bra.s	loc_1A2A6
0001A3FA                            ; ===========================================================================
0001A3FA                            
0001A3FA                            loc_1A2E4:
0001A3FA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A400 4A29 0021                  		tst.b	$21(a1)
0001A404 6F00                       		ble.s	loc_1A312
0001A406 117C 0006 001C             		move.b	#6,$1C(a0)
0001A40C 217C 0001 7E2C 0004        		move.l	#Map_Eggman,4(a0)
0001A414 317C 0400 0002             		move.w	#$400,2(a0)
0001A41A 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A41E 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A424 6000 FF86                  		bra.w	loc_1A296
0001A428                            ; ===========================================================================
0001A428                            
0001A428                            loc_1A312:
0001A428 4A28 0001                  		tst.b	1(a0)
0001A42C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A430 6100 D558                  		bsr.w	BossDefeated
0001A434 117C 0002 0018             		move.b	#2,$18(a0)
0001A43A 117C 0000 001C             		move.b	#0,$1C(a0)
0001A440 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A448 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A44E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A452 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A458 6000 FF52                  		bra.w	loc_1A296
0001A45C                            ; ===========================================================================
0001A45C                            
0001A45C                            loc_1A346:				; XREF: Obj85_Index
0001A45C 08E8 0000 0022             		bset	#0,$22(a0)
0001A462 2268 0034                  		movea.l	$34(a0),a1
0001A466 0CA9 0001 7E2C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A46E 6700                       		beq.s	loc_1A35E
0001A470 6000 FF4A                  		bra.w	loc_1A2A6
0001A474                            ; ===========================================================================
0001A474                            
0001A474                            loc_1A35E:
0001A474 3169 0008 0008             		move.w	8(a1),8(a0)
0001A47A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A480 4A28 001E                  		tst.b	$1E(a0)
0001A484 6600                       		bne.s	loc_1A376
0001A486 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A48C                            
0001A48C                            loc_1A376:
0001A48C 5328 001E                  		subq.b	#1,$1E(a0)
0001A490 6E00                       		bgt.s	loc_1A38A
0001A492 5228 001A                  		addq.b	#1,$1A(a0)
0001A496 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A49C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A4A0                            
0001A4A0                            loc_1A38A:
0001A4A0 6000 FF0A                  		bra.w	loc_1A296
0001A4A4                            ; ===========================================================================
0001A4A4                            
0001A4A4                            loc_1A38E:				; XREF: Obj85_Index
0001A4A4 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A4AA 3038 D008                  		move.w	($FFFFD008).w,d0
0001A4AE 9068 0008                  		sub.w	8(a0),d0
0001A4B2 6500                       		bcs.s	loc_1A3A6
0001A4B4 4A28 0001                  		tst.b	1(a0)
0001A4B8 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A4BC                            
0001A4BC                            loc_1A3A6:
0001A4BC 4EF9 0000 D73C             		jmp	DisplaySprite
0001A4C2                            ; ===========================================================================
0001A4C2                            
0001A4C2                            loc_1A3AC:				; XREF: Obj85_Index
0001A4C2 117C 0000 001A             		move.b	#0,$1A(a0)
0001A4C8 08E8 0000 0022             		bset	#0,$22(a0)
0001A4CE 2268 0034                  		movea.l	$34(a0),a1
0001A4D2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A4D8 6600                       		bne.s	loc_1A3D0
0001A4DA 0CA9 0001 7E2C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A4E2 6700 F984                  		beq.w	Obj85_Delete
0001A4E6                            
0001A4E6                            loc_1A3D0:
0001A4E6 6000 FED4                  		bra.w	loc_1A2A6
0001A4EA                            ; ===========================================================================
0001A4EA                            Ani_obj85:
0001A4EA                            	include "_anim\obj85.asm"
0001A4EA                            ; ---------------------------------------------------------------------------
0001A4EA                            ; Animation script - Eggman (FZ)
0001A4EA                            ; ---------------------------------------------------------------------------
0001A4EA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A4EC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A4F0                            		even
0001A4F0                            		even
0001A4F0                            
0001A4F0                            Map_Eggman2:
0001A4F0                            	include "_maps\Eggman2.asm"
0001A4F0                            ; ---------------------------------------------------------------------------
0001A4F0                            ; Sprite mappings - Eggman (FZ)
0001A4F0                            ; ---------------------------------------------------------------------------
0001A4F0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A4F2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A4F4 06                         byte_1A3DE:	dc.b 6
0001A4F5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A4FA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A4FF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A504 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A509 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A50E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A513 06                         byte_1A3FD:	dc.b 6
0001A514 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A519 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A51E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A523 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A528 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A52D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A532                            		even
0001A532                            		even
0001A532                            
0001A532                            Map_FZBoss:
0001A532                            	include "_maps\FZ boss.asm"
0001A532                            ; ---------------------------------------------------------------------------
0001A532                            ; Sprite mappings - boss (FZ)
0001A532                            ; ---------------------------------------------------------------------------
0001A532 0000                       		dc.w byte_1A422-Map_FZBoss
0001A534 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A536 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A538 02                         byte_1A422:	dc.b 2
0001A539 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A53E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A543 03                         byte_1A42D:	dc.b 3
0001A544 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A549 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A54E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A553 02                         byte_1A43D:	dc.b 2
0001A554 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A559 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A55E                            		even
0001A55E                            		even
0001A55E                            
0001A55E                            ; ===========================================================================
0001A55E                            
0001A55E                            Obj84_Delete:
0001A55E 4EF9 0000 D778             		jmp	DeleteObject
0001A564                            ; ===========================================================================
0001A564                            ; ---------------------------------------------------------------------------
0001A564                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A564                            ; ---------------------------------------------------------------------------
0001A564                            
0001A564                            Obj84:					; XREF: Obj_Index
0001A564 7000                       		moveq	#0,d0
0001A566 1028 0024                  		move.b	$24(a0),d0
0001A56A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A56E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A572                            ; ===========================================================================
0001A572 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A574 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A576 0000                       		dc.w loc_1A57E-Obj84_Index
0001A578                            
0001A578 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A57C 2550 0620                  		dc.w $2550, $620
0001A580 2490 04C0                  		dc.w $2490, $4C0
0001A584 2510 04C0                  		dc.w $2510, $4C0
0001A588                            ; ===========================================================================
0001A588                            
0001A588                            Obj84_Main:				; XREF: Obj84_Index
0001A588 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A58C 7000                       		moveq	#0,d0
0001A58E 1028 0028                  		move.b	$28(a0),d0
0001A592 D040                       		add.w	d0,d0
0001A594 D2C0                       		adda.w	d0,a1
0001A596 117C 0004 0001             		move.b	#4,1(a0)
0001A59C 08E8 0007 0001             		bset	#7,1(a0)
0001A5A2 08E8 0004 0001             		bset	#4,1(a0)
0001A5A8 317C 0300 0002             		move.w	#$300,2(a0)
0001A5AE 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A5B6 3159 0008                  		move.w	(a1)+,8(a0)
0001A5BA 3151 000C                  		move.w	(a1),$C(a0)
0001A5BE 3159 0038                  		move.w	(a1)+,$38(a0)
0001A5C2 117C 0020 0016             		move.b	#$20,$16(a0)
0001A5C8 117C 0060 0017             		move.b	#$60,$17(a0)
0001A5CE 117C 0020 0019             		move.b	#$20,$19(a0)
0001A5D4 117C 0060 0016             		move.b	#$60,$16(a0)
0001A5DA 117C 0003 0018             		move.b	#3,$18(a0)
0001A5E0 5428 0024                  		addq.b	#2,$24(a0)
0001A5E4                            
0001A5E4                            loc_1A4CE:				; XREF: Obj84_Index
0001A5E4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A5EA 6F00                       		ble.s	loc_1A4DC
0001A5EC 08E8 0001 0001             		bset	#1,1(a0)
0001A5F2                            
0001A5F2                            loc_1A4DC:
0001A5F2 42A8 003C                  		clr.l	$3C(a0)
0001A5F6 4A28 0029                  		tst.b	$29(a0)
0001A5FA 6700                       		beq.s	loc_1A4EA
0001A5FC 5428 0024                  		addq.b	#2,$24(a0)
0001A600                            
0001A600                            loc_1A4EA:
0001A600 2028 003C                  		move.l	$3C(a0),d0
0001A604 2228 0038                  		move.l	$38(a0),d1
0001A608 D280                       		add.l	d0,d1
0001A60A 4841                       		swap	d1
0001A60C 3141 000C                  		move.w	d1,$C(a0)
0001A610 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A616 6600                       		bne.s	loc_1A524
0001A618 4A68 0030                  		tst.w	$30(a0)
0001A61C 6A00                       		bpl.s	loc_1A524
0001A61E 70F6                       		moveq	#-$A,d0
0001A620 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A626 6F00                       		ble.s	loc_1A514
0001A628 700E                       		moveq	#$E,d0
0001A62A                            
0001A62A                            loc_1A514:
0001A62A D240                       		add.w	d0,d1
0001A62C 2268 0034                  		movea.l	$34(a0),a1
0001A630 3341 000C                  		move.w	d1,$C(a1)
0001A634 3368 0008 0008             		move.w	8(a0),8(a1)
0001A63A                            
0001A63A                            loc_1A524:
0001A63A 323C 002B                  		move.w	#$2B,d1
0001A63E 343C 0060                  		move.w	#$60,d2
0001A642 363C 0061                  		move.w	#$61,d3
0001A646 3828 0008                  		move.w	8(a0),d4
0001A64A 4EB9 0000 FB0C             		jsr	SolidObject
0001A650 7000                       		moveq	#0,d0
0001A652 3228 003C                  		move.w	$3C(a0),d1
0001A656 6A00                       		bpl.s	loc_1A550
0001A658 4441                       		neg.w	d1
0001A65A 5141                       		subq.w	#8,d1
0001A65C 6500                       		bcs.s	loc_1A55C
0001A65E 5200                       		addq.b	#1,d0
0001A660 E841                       		asr.w	#4,d1
0001A662 D041                       		add.w	d1,d0
0001A664 6000                       		bra.s	loc_1A55C
0001A666                            ; ===========================================================================
0001A666                            
0001A666                            loc_1A550:
0001A666 0441 0027                  		subi.w	#$27,d1
0001A66A 6500                       		bcs.s	loc_1A55C
0001A66C 5200                       		addq.b	#1,d0
0001A66E E841                       		asr.w	#4,d1
0001A670 D041                       		add.w	d1,d0
0001A672                            
0001A672                            loc_1A55C:
0001A672 1140 001A                  		move.b	d0,$1A(a0)
0001A676 3038 D008                  		move.w	($FFFFD008).w,d0
0001A67A 9068 0008                  		sub.w	8(a0),d0
0001A67E 6B00                       		bmi.s	loc_1A578
0001A680 0440 0140                  		subi.w	#$140,d0
0001A684 6B00                       		bmi.s	loc_1A578
0001A686 4A28 0001                  		tst.b	1(a0)
0001A68A 6A00 FED2                  		bpl.w	Obj84_Delete
0001A68E                            
0001A68E                            loc_1A578:
0001A68E 4EF9 0000 D73C             		jmp	DisplaySprite
0001A694                            ; ===========================================================================
0001A694                            
0001A694                            loc_1A57E:				; XREF: Obj84_Index
0001A694 7000                       		moveq	#0,d0
0001A696 1028 0028                  		move.b	$28(a0),d0
0001A69A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A69E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A6A2 6000 FF5C                  		bra.w	loc_1A4EA
0001A6A6                            ; ===========================================================================
0001A6A6 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A6A8 0000                       		dc.w loc_1A598-off_1A590
0001A6AA 0000                       		dc.w loc_1A604-off_1A590
0001A6AC 0000                       		dc.w loc_1A604-off_1A590
0001A6AE                            ; ===========================================================================
0001A6AE                            
0001A6AE                            loc_1A598:				; XREF: off_1A590
0001A6AE 4A28 0029                  		tst.b	$29(a0)
0001A6B2 6600                       		bne.s	loc_1A5D4
0001A6B4 2268 0034                  		movea.l	$34(a0),a1
0001A6B8 4A29 0021                  		tst.b	$21(a1)
0001A6BC 6600                       		bne.s	loc_1A5B4
0001A6BE 6100 D2CA                  		bsr.w	BossDefeated
0001A6C2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A6CA                            
0001A6CA                            loc_1A5B4:
0001A6CA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A6D2 6400                       		bcc.s	locret_1A602
0001A6D4 42A8 003C                  		clr.l	$3C(a0)
0001A6D8 2268 0034                  		movea.l	$34(a0),a1
0001A6DC 5369 0032                  		subq.w	#1,$32(a1)
0001A6E0 4269 0030                  		clr.w	$30(a1)
0001A6E4 5528 0024                  		subq.b	#2,$24(a0)
0001A6E8 4E75                       		rts	
0001A6EA                            ; ===========================================================================
0001A6EA                            
0001A6EA                            loc_1A5D4:
0001A6EA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A6F0 6C00                       		bge.s	loc_1A5E4
0001A6F2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A6FA                            
0001A6FA                            loc_1A5E4:
0001A6FA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A702 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A708 6E00                       		bgt.s	locret_1A602
0001A70A 4268 003E                  		clr.w	$3E(a0)
0001A70E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A714 4228 0029                  		clr.b	$29(a0)
0001A718                            
0001A718                            locret_1A602:
0001A718 4E75                       		rts	
0001A71A                            ; ===========================================================================
0001A71A                            
0001A71A                            loc_1A604:				; XREF: off_1A590
0001A71A 08E8 0001 0001             		bset	#1,1(a0)
0001A720 4A28 0029                  		tst.b	$29(a0)
0001A724 6600                       		bne.s	loc_1A646
0001A726 2268 0034                  		movea.l	$34(a0),a1
0001A72A 4A29 0021                  		tst.b	$21(a1)
0001A72E 6600                       		bne.s	loc_1A626
0001A730 6100 D258                  		bsr.w	BossDefeated
0001A734 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A73C                            
0001A73C                            loc_1A626:
0001A73C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A744 6400                       		bcc.s	locret_1A674
0001A746 42A8 003C                  		clr.l	$3C(a0)
0001A74A 2268 0034                  		movea.l	$34(a0),a1
0001A74E 5369 0032                  		subq.w	#1,$32(a1)
0001A752 4269 0030                  		clr.w	$30(a1)
0001A756 5528 0024                  		subq.b	#2,$24(a0)
0001A75A 4E75                       		rts	
0001A75C                            ; ===========================================================================
0001A75C                            
0001A75C                            loc_1A646:
0001A75C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A762 6D00                       		blt.s	loc_1A656
0001A764 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A76C                            
0001A76C                            loc_1A656:
0001A76C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A774 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A77A 6D00                       		blt.s	locret_1A674
0001A77C 4268 003E                  		clr.w	$3E(a0)
0001A780 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A786 4228 0029                  		clr.b	$29(a0)
0001A78A                            
0001A78A                            locret_1A674:
0001A78A 4E75                       		rts	
0001A78C                            ; ===========================================================================
0001A78C                            ; ---------------------------------------------------------------------------
0001A78C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A78C                            ; ---------------------------------------------------------------------------
0001A78C                            Map_obj84:
0001A78C                            	include "_maps\obj84.asm"
0001A78C                            ; ---------------------------------------------------------------------------
0001A78C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A78C                            ; ---------------------------------------------------------------------------
0001A78C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A790 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A794 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A798 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A79C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A7A0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A7A4 06                         byte_1A68E:	dc.b 6
0001A7A5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A7AA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A7AF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A7B4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A7B9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A7BE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A7C3 08                         byte_1A6AD:	dc.b 8
0001A7C4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A7C9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A7CE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A7D3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A7D8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A7DD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A7E2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A7E7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A7EC 0A                         byte_1A6D6:	dc.b $A
0001A7ED A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A7F2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A7F7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A7FC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A801 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A806 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A80B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A810 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A815 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A81A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A81F 0C                         byte_1A709:	dc.b $C
0001A820 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A825 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A82A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A82F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A834 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A839 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A83E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A843 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A848 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A84D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A852 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A857 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A85C 0D                         byte_1A746:	dc.b $D
0001A85D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A862 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A867 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A86C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A871 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A876 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A87B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A880 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A885 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A88A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A88F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A894 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A899 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A89E 0E                         byte_1A788:	dc.b $E
0001A89F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A8A4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A8A9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A8AE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A8B3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A8B8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A8BD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A8C2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A8C7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A8CC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A8D1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A8D6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A8DB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A8E0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A8E5 02                         byte_1A7CF:	dc.b 2
0001A8E6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A8EB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A8F0                            		even
0001A8F0                            		even
0001A8F0                            
0001A8F0                            ; ===========================================================================
0001A8F0                            ; ---------------------------------------------------------------------------
0001A8F0                            ; Object 86 - energy balls (FZ)
0001A8F0                            ; ---------------------------------------------------------------------------
0001A8F0                            
0001A8F0                            Obj86:					; XREF: Obj_Index
0001A8F0 7000                       		moveq	#0,d0
0001A8F2 1028 0024                  		move.b	$24(a0),d0
0001A8F6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A8FA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A8FE                            ; ===========================================================================
0001A8FE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A900 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A902 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A904 0000                       		dc.w loc_1A962-Obj86_Index
0001A906 0000                       		dc.w loc_1A982-Obj86_Index
0001A908                            ; ===========================================================================
0001A908                            
0001A908                            Obj86_Main:				; XREF: Obj86_Index
0001A908 317C 2588 0008             		move.w	#$2588,8(a0)
0001A90E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A914 317C 0300 0002             		move.w	#$300,2(a0)
0001A91A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A922 117C 0000 001C             		move.b	#0,$1C(a0)
0001A928 117C 0003 0018             		move.b	#3,$18(a0)
0001A92E 117C 0008 0017             		move.b	#8,$17(a0)
0001A934 117C 0008 0016             		move.b	#8,$16(a0)
0001A93A 117C 0004 0001             		move.b	#4,1(a0)
0001A940 08E8 0007 0001             		bset	#7,1(a0)
0001A946 5428 0024                  		addq.b	#2,$24(a0)
0001A94A                            
0001A94A                            Obj86_Generator:			; XREF: Obj86_Index
0001A94A 2268 0034                  		movea.l	$34(a0),a1
0001A94E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A954 6600                       		bne.s	loc_1A850
0001A956 10BC 003F                  		move.b	#$3F,(a0)
0001A95A 117C 0000 0024             		move.b	#0,$24(a0)
0001A960 4EF9 0000 D73C             		jmp	DisplaySprite
0001A966                            ; ===========================================================================
0001A966                            
0001A966                            loc_1A850:
0001A966 117C 0000 001C             		move.b	#0,$1C(a0)
0001A96C 4A28 0029                  		tst.b	$29(a0)
0001A970 6700                       		beq.s	loc_1A86C
0001A972 5428 0024                  		addq.b	#2,$24(a0)
0001A976 117C 0001 001C             		move.b	#1,$1C(a0)
0001A97C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001A982                            
0001A982                            loc_1A86C:
0001A982 323C 0013                  		move.w	#$13,d1
0001A986 343C 0008                  		move.w	#8,d2
0001A98A 363C 0011                  		move.w	#$11,d3
0001A98E 3828 0008                  		move.w	8(a0),d4
0001A992 4EB9 0000 FB0C             		jsr	SolidObject
0001A998 3038 D008                  		move.w	($FFFFD008).w,d0
0001A99C 9068 0008                  		sub.w	8(a0),d0
0001A9A0 6B00                       		bmi.s	loc_1A89A
0001A9A2 0440 0140                  		subi.w	#$140,d0
0001A9A6 6B00                       		bmi.s	loc_1A89A
0001A9A8 4A28 0001                  		tst.b	1(a0)
0001A9AC 6A00 FBB0                  		bpl.w	Obj84_Delete
0001A9B0                            
0001A9B0                            loc_1A89A:
0001A9B0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001A9B4 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A9BA 4EF9 0000 D73C             		jmp	DisplaySprite
0001A9C0                            ; ===========================================================================
0001A9C0                            
0001A9C0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001A9C0 4A28 0029                  		tst.b	$29(a0)
0001A9C4 6700 0000                  		beq.w	loc_1A954
0001A9C8 4228 0029                  		clr.b	$29(a0)
0001A9CC D068 0030                  		add.w	$30(a0),d0
0001A9D0 0240 001E                  		andi.w	#$1E,d0
0001A9D4 D4C0                       		adda.w	d0,a2
0001A9D6 5868 0030                  		addq.w	#4,$30(a0)
0001A9DA 4268 0032                  		clr.w	$32(a0)
0001A9DE 7403                       		moveq	#3,d2
0001A9E0                            
0001A9E0                            Obj86_Loop:
0001A9E0 4EB9 0000 DBD8             		jsr	SingleObjLoad2
0001A9E6 6600 0000                  		bne.w	loc_1A954
0001A9EA 12BC 0086                  		move.b	#$86,(a1)
0001A9EE 3368 0008 0008             		move.w	8(a0),8(a1)
0001A9F4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001A9FA 137C 0008 0024             		move.b	#8,$24(a1)
0001AA00 337C 2300 0002             		move.w	#$2300,2(a1)
0001AA06 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AA0E 137C 000C 0016             		move.b	#$C,$16(a1)
0001AA14 137C 000C 0017             		move.b	#$C,$17(a1)
0001AA1A 137C 0000 0020             		move.b	#0,$20(a1)
0001AA20 137C 0003 0018             		move.b	#3,$18(a1)
0001AA26 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AA2C 137C 0004 0001             		move.b	#4,1(a1)
0001AA32 08E9 0007 0001             		bset	#7,1(a1)
0001AA38 2348 0034                  		move.l	a0,$34(a1)
0001AA3C 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AA42 3228 0032                  		move.w	$32(a0),d1
0001AA46 C3FC FFB1                  		muls.w	#-$4F,d1
0001AA4A 0641 2578                  		addi.w	#$2578,d1
0001AA4E 0240 001F                  		andi.w	#$1F,d0
0001AA52 0440 0010                  		subi.w	#$10,d0
0001AA56 D041                       		add.w	d1,d0
0001AA58 3340 0030                  		move.w	d0,$30(a1)
0001AA5C 5268 0032                  		addq.w	#1,$32(a0)
0001AA60 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AA66 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AA6A                            
0001AA6A                            loc_1A954:
0001AA6A 4A68 0032                  		tst.w	$32(a0)
0001AA6E 6600                       		bne.s	loc_1A95E
0001AA70 5428 0024                  		addq.b	#2,$24(a0)
0001AA74                            
0001AA74                            loc_1A95E:
0001AA74 6000 FF0C                  		bra.w	loc_1A86C
0001AA78                            ; ===========================================================================
0001AA78                            
0001AA78                            loc_1A962:				; XREF: Obj86_Index
0001AA78 117C 0002 001C             		move.b	#2,$1C(a0)
0001AA7E 4A68 0038                  		tst.w	$38(a0)
0001AA82 6600                       		bne.s	loc_1A97E
0001AA84 117C 0002 0024             		move.b	#2,$24(a0)
0001AA8A 2268 0034                  		movea.l	$34(a0),a1
0001AA8E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AA94                            
0001AA94                            loc_1A97E:
0001AA94 6000 FEEC                  		bra.w	loc_1A86C
0001AA98                            ; ===========================================================================
0001AA98                            
0001AA98                            loc_1A982:				; XREF: Obj86_Index
0001AA98 7000                       		moveq	#0,d0
0001AA9A 1028 0025                  		move.b	$25(a0),d0
0001AA9E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AAA2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AAA6 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AAAA 4EB9 0000 A7EE             		jsr	AnimateSprite
0001AAB0 4EF9 0000 D73C             		jmp	DisplaySprite
0001AAB6                            ; ===========================================================================
0001AAB6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AAB8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AABA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            loc_1A9A6:				; XREF: Obj86_Index2
0001AABC 3028 0030                  		move.w	$30(a0),d0
0001AAC0 9068 0008                  		sub.w	8(a0),d0
0001AAC4 E940                       		asl.w	#4,d0
0001AAC6 3140 0010                  		move.w	d0,$10(a0)
0001AACA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AAD0 5428 0025                  		addq.b	#2,$25(a0)
0001AAD4 4E75                       		rts	
0001AAD6                            ; ===========================================================================
0001AAD6                            
0001AAD6                            loc_1A9C0:				; XREF: Obj86_Index2
0001AAD6 4A68 0010                  		tst.w	$10(a0)
0001AADA 6700                       		beq.s	loc_1A9E6
0001AADC 4EB9 0000 D716             		jsr	SpeedToPos
0001AAE2 3028 0008                  		move.w	8(a0),d0
0001AAE6 9068 0030                  		sub.w	$30(a0),d0
0001AAEA 6400                       		bcc.s	loc_1A9E6
0001AAEC 4268 0010                  		clr.w	$10(a0)
0001AAF0 D168 0008                  		add.w	d0,8(a0)
0001AAF4 2268 0034                  		movea.l	$34(a0),a1
0001AAF8 5369 0032                  		subq.w	#1,$32(a1)
0001AAFC                            
0001AAFC                            loc_1A9E6:
0001AAFC 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB02 5368 0028                  		subq.w	#1,$28(a0)
0001AB06 6600                       		bne.s	locret_1AA1C
0001AB08 5428 0025                  		addq.b	#2,$25(a0)
0001AB0C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB12 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AB18 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AB1E 7000                       		moveq	#0,d0
0001AB20 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB24 9068 0008                  		sub.w	8(a0),d0
0001AB28 3140 0010                  		move.w	d0,$10(a0)
0001AB2C 317C 0140 0012             		move.w	#$140,$12(a0)
0001AB32                            
0001AB32                            locret_1AA1C:
0001AB32 4E75                       		rts	
0001AB34                            ; ===========================================================================
0001AB34                            
0001AB34                            loc_1AA1E:				; XREF: Obj86_Index2
0001AB34 4EB9 0000 D716             		jsr	SpeedToPos
0001AB3A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AB40 6400                       		bcc.s	loc_1AA34
0001AB42 5368 0028                  		subq.w	#1,$28(a0)
0001AB46 6700                       		beq.s	loc_1AA34
0001AB48 4E75                       		rts	
0001AB4A                            ; ===========================================================================
0001AB4A                            
0001AB4A                            loc_1AA34:
0001AB4A 2268 0034                  		movea.l	$34(a0),a1
0001AB4E 5369 0038                  		subq.w	#1,$38(a1)
0001AB52 6000 FA0A                  		bra.w	Obj84_Delete
0001AB56                            ; ===========================================================================
0001AB56                            Ani_obj86:
0001AB56                            	include "_anim\obj86.asm"
0001AB56                            ; ---------------------------------------------------------------------------
0001AB56                            ; Animation script - energy ball launcher (FZ)
0001AB56                            ; ---------------------------------------------------------------------------
0001AB56 0000                       		dc.w byte_1AA46-Ani_obj86
0001AB58 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AB5A 0000                       		dc.w byte_1AA50-Ani_obj86
0001AB5C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AB60 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AB66 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AB6C                            		even
0001AB6C                            		even
0001AB6C                            
0001AB6C                            ; ---------------------------------------------------------------------------
0001AB6C                            ; Sprite mappings - energy ball	launcher (FZ)
0001AB6C                            ; ---------------------------------------------------------------------------
0001AB6C                            Map_obj86:
0001AB6C                            	include "_maps\obj86.asm"
0001AB6C                            ; ---------------------------------------------------------------------------
0001AB6C                            ; Sprite mappings - energy ball	launcher (FZ)
0001AB6C                            ; ---------------------------------------------------------------------------
0001AB6C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AB70 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AB74 01                         byte_1AA5E:	dc.b 1
0001AB75 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AB7A 01                         byte_1AA64:	dc.b 1
0001AB7B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AB80 01                         byte_1AA6A:	dc.b 1
0001AB81 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AB86 01                         byte_1AA70:	dc.b 1
0001AB87 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AB8C                            		even
0001AB8C                            		even
0001AB8C                            
0001AB8C                            Ani_obj86a:
0001AB8C                            	include "_anim\obj86a.asm"
0001AB8C                            ; ---------------------------------------------------------------------------
0001AB8C                            ; Animation script - energy balls (FZ)
0001AB8C                            ; ---------------------------------------------------------------------------
0001AB8C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AB8E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AB90 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AB9F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001ABAE 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001ABB2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001ABBC                            		even
0001ABBC                            		even
0001ABBC                            
0001ABBC                            ; ---------------------------------------------------------------------------
0001ABBC                            ; Sprite mappings - energy balls (FZ)
0001ABBC                            ; ---------------------------------------------------------------------------
0001ABBC                            Map_obj86a:
0001ABBC                            	include "_maps\obj86a.asm"
0001ABBC                            ; ---------------------------------------------------------------------------
0001ABBC                            ; Sprite mappings - energy balls (FZ)
0001ABBC                            ; ---------------------------------------------------------------------------
0001ABBC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001ABC0 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001ABC4 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001ABC8 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001ABCC 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001ABD0 0000                       		dc.w byte_1AB20-Map_obj86a
0001ABD2 02                         byte_1AABC:	dc.b 2
0001ABD3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001ABD8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001ABDD 02                         byte_1AAC7:	dc.b 2
0001ABDE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001ABE3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001ABE8 02                         byte_1AAD2:	dc.b 2
0001ABE9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001ABEE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001ABF3 02                         byte_1AADD:	dc.b 2
0001ABF4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001ABF9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001ABFE 02                         byte_1AAE8:	dc.b 2
0001ABFF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AC04 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AC09 02                         byte_1AAF3:	dc.b 2
0001AC0A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AC0F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AC14 01                         byte_1AAFE:	dc.b 1
0001AC15 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AC1A 01                         byte_1AB04:	dc.b 1
0001AC1B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AC20 02                         byte_1AB0A:	dc.b 2
0001AC21 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AC26 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AC2B 02                         byte_1AB15:	dc.b 2
0001AC2C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AC31 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AC36 00                         byte_1AB20:	dc.b 0
0001AC38 00                         		even
0001AC38 00                         		even
0001AC38                            
0001AC38                            ; ===========================================================================
0001AC38                            ; ---------------------------------------------------------------------------
0001AC38                            ; Object 3E - prison capsule
0001AC38                            ; ---------------------------------------------------------------------------
0001AC38                            
0001AC38                            Obj3E:					; XREF: Obj_Index
0001AC38 7000                       		moveq	#0,d0
0001AC3A 1028 0024                  		move.b	$24(a0),d0
0001AC3E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AC42 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AC46 3028 0008                  		move.w	8(a0),d0
0001AC4A 0240 FF80                  		andi.w	#$FF80,d0
0001AC4E 3238 F700                  		move.w	($FFFFF700).w,d1
0001AC52 0441 0080                  		subi.w	#$80,d1
0001AC56 0241 FF80                  		andi.w	#$FF80,d1
0001AC5A 9041                       		sub.w	d1,d0
0001AC5C 0C40 0280                  		cmpi.w	#$280,d0
0001AC60 6200                       		bhi.s	Obj3E_Delete
0001AC62 4EF9 0000 D73C             		jmp	DisplaySprite
0001AC68                            ; ===========================================================================
0001AC68                            
0001AC68                            Obj3E_Delete:
0001AC68 4EF9 0000 D778             		jmp	DeleteObject
0001AC6E                            ; ===========================================================================
0001AC6E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AC70 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AC72 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AC74 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AC76 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AC78 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AC7A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AC7C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AC7E                            
0001AC7E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AC82 040C 0501                  		dc.b 4,	$C, 5, 1
0001AC86 0610 0403                  		dc.b 6,	$10, 4,	3
0001AC8A 0810 0305                  		dc.b 8,	$10, 3,	5
0001AC8E                            ; ===========================================================================
0001AC8E                            
0001AC8E                            Obj3E_Main:				; XREF: Obj3E_Index
0001AC8E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AC96 317C 049D 0002             		move.w	#$49D,2(a0)
0001AC9C 117C 0004 0001             		move.b	#4,1(a0)
0001ACA2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001ACA8 7000                       		moveq	#0,d0
0001ACAA 1028 0028                  		move.b	$28(a0),d0
0001ACAE E548                       		lsl.w	#2,d0
0001ACB0 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001ACB4 1159 0024                  		move.b	(a1)+,$24(a0)
0001ACB8 1159 0019                  		move.b	(a1)+,$19(a0)
0001ACBC 1159 0018                  		move.b	(a1)+,$18(a0)
0001ACC0 1159 001A                  		move.b	(a1)+,$1A(a0)
0001ACC4 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001ACC8 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001ACCA 117C 0006 0020             		move.b	#6,$20(a0)
0001ACD0 117C 0008 0021             		move.b	#8,$21(a0)
0001ACD6                            
0001ACD6                            Obj3E_Not02:
0001ACD6 4E75                       		rts	
0001ACD8                            ; ===========================================================================
0001ACD8                            
0001ACD8                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001ACD8 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001ACDE 6700                       		beq.s	Obj3E_ChkOpened
0001ACE0 323C 002B                  		move.w	#$2B,d1
0001ACE4 343C 0018                  		move.w	#$18,d2
0001ACE8 363C 0018                  		move.w	#$18,d3
0001ACEC 3828 0008                  		move.w	8(a0),d4
0001ACF0 4EF9 0000 FB0C             		jmp	SolidObject
0001ACF6                            ; ===========================================================================
0001ACF6                            
0001ACF6                            Obj3E_ChkOpened:
0001ACF6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001ACFA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001ACFC 4228 0025                  		clr.b	$25(a0)
0001AD00 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AD06 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AD0C                            
0001AD0C                            Obj3E_DoOpen:
0001AD0C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AD12 4E75                       		rts	
0001AD14                            ; ===========================================================================
0001AD14                            
0001AD14                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AD14 323C 0017                  		move.w	#$17,d1
0001AD18 343C 0008                  		move.w	#8,d2
0001AD1C 363C 0008                  		move.w	#8,d3
0001AD20 3828 0008                  		move.w	8(a0),d4
0001AD24 4EB9 0000 FB0C             		jsr	SolidObject
0001AD2A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AD30 4EB9 0000 A7EE             		jsr	AnimateSprite
0001AD36 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001AD3C 4A28 0025                  		tst.b	$25(a0)
0001AD40 6700                       		beq.s	locret_1AC60
0001AD42 5068 000C                  		addq.w	#8,$C(a0)
0001AD46 117C 000A 0024             		move.b	#$A,$24(a0)
0001AD4C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001AD52 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001AD56 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001AD5A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001AD60 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001AD66 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001AD68 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001AD6E 6000                       		bra.s	Obj3E_ContinueCode
0001AD70                            
0001AD70                            Obj3E_MoveLeft:
0001AD70 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001AD76                            
0001AD76                            Obj3E_ContinueCode:
0001AD76 4228 0025                  		clr.b	$25(a0)
0001AD7A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AD80 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AD86                            
0001AD86                            locret_1AC60:
0001AD86 4E75                       		rts	
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001AD88 7007                       		moveq	#7,d0
0001AD8A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AD8E 6600                       		bne.s	loc_1ACA0
0001AD90 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001AD96 6600                       		bne.s	loc_1ACA0
0001AD98 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001AD9C 3368 0008 0008             		move.w	8(a0),8(a1)
0001ADA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ADA8 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001ADAE 7200                       		moveq	#0,d1
0001ADB0 1200                       		move.b	d0,d1
0001ADB2 E409                       		lsr.b	#2,d1
0001ADB4 0441 0020                  		subi.w	#$20,d1
0001ADB8 D369 0008                  		add.w	d1,8(a1)
0001ADBC E048                       		lsr.w	#8,d0
0001ADBE E608                       		lsr.b	#3,d0
0001ADC0 D169 000C                  		add.w	d0,$C(a1)
0001ADC4                            
0001ADC4                            loc_1ACA0:
0001ADC4 5368 001E                  		subq.w	#1,$1E(a0)
0001ADC8 6700                       		beq.s	Obj3E_MakeAnimal
0001ADCA 4E75                       		rts	
0001ADCC                            ; ===========================================================================
0001ADCC                            
0001ADCC                            Obj3E_MakeAnimal:
0001ADCC 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001ADD2 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001ADD8 117C 0006 001A             		move.b	#6,$1A(a0)
0001ADDE 317C 0096 001E             		move.w	#$96,$1E(a0)
0001ADE4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001ADEA 7C07                       		moveq	#7,d6
0001ADEC 3A3C 009A                  		move.w	#$9A,d5
0001ADF0 78E4                       		moveq	#-$1C,d4
0001ADF2                            
0001ADF2                            Obj3E_Loop:
0001ADF2 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001ADF8 6600                       		bne.s	locret_1ACF8
0001ADFA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001ADFE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE04 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE0A D969 0008                  		add.w	d4,8(a1)
0001AE0E 5E44                       		addq.w	#7,d4
0001AE10 3345 0036                  		move.w	d5,$36(a1)
0001AE14 5145                       		subq.w	#8,d5
0001AE16 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001AE1A                            
0001AE1A                            locret_1ACF8:
0001AE1A 4E75                       		rts	
0001AE1C                            ; ===========================================================================
0001AE1C                            
0001AE1C                            Obj3E_Animals:				; XREF: Obj3E_Index
0001AE1C 7007                       		moveq	#7,d0
0001AE1E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AE22 6600                       		bne.s	loc_1AD38
0001AE24 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001AE2A 6600                       		bne.s	loc_1AD38
0001AE2C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AE30 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE3C 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AE42 0240 001F                  		andi.w	#$1F,d0
0001AE46 5D40                       		subq.w	#6,d0
0001AE48 4A41                       		tst.w	d1
0001AE4A 6A00                       		bpl.s	loc_1AD2E
0001AE4C 4440                       		neg.w	d0
0001AE4E                            
0001AE4E                            loc_1AD2E:
0001AE4E D169 0008                  		add.w	d0,8(a1)
0001AE52 337C 000C 0036             		move.w	#$C,$36(a1)
0001AE58                            
0001AE58                            loc_1AD38:
0001AE58 5368 001E                  		subq.w	#1,$1E(a0)
0001AE5C 6600                       		bne.s	locret_1AD48
0001AE5E 5428 0024                  		addq.b	#2,$24(a0)
0001AE62 317C 00B4 001E             		move.w	#180,$1E(a0)
0001AE68                            
0001AE68                            locret_1AD48:
0001AE68 4E75                       		rts	
0001AE6A                            ; ===========================================================================
0001AE6A                            
0001AE6A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001AE6A 703E                       		moveq	#$3E,d0
0001AE6C 7228                       		moveq	#$28,d1
0001AE6E 7440                       		moveq	#$40,d2
0001AE70 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001AE74                            
0001AE74                            Obj3E_FindObj28:
0001AE74 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001AE76 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001AE78 D2C2                       		adda.w	d2,a1		; next object RAM
0001AE7A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001AE7E                            
0001AE7E 4EB9 0000 EDC8             		jsr	GotThroughAct
0001AE84 4EF9 0000 D778             		jmp	DeleteObject
0001AE8A                            ; ===========================================================================
0001AE8A                            
0001AE8A                            Obj3E_Obj28Found:
0001AE8A 4E75                       		rts	
0001AE8C                            ; ===========================================================================
0001AE8C                            Ani_obj3E:
0001AE8C                            	include "_anim\obj3E.asm"
0001AE8C                            ; ---------------------------------------------------------------------------
0001AE8C                            ; Animation script - prison capsule
0001AE8C                            ; ---------------------------------------------------------------------------
0001AE8C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AE8E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AE90 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AE94                            		even
0001AE94                            		even
0001AE94                            
0001AE94                            ; ---------------------------------------------------------------------------
0001AE94                            ; Sprite mappings - prison capsule
0001AE94                            ; ---------------------------------------------------------------------------
0001AE94                            Map_obj3E:
0001AE94                            	include "_maps\obj3E.asm"
0001AE94                            ; ---------------------------------------------------------------------------
0001AE94                            ; Sprite mappings - prison capsule
0001AE94                            ; ---------------------------------------------------------------------------
0001AE94 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AE98 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AE9C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AEA0 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AEA2 07                         byte_1AD82:	dc.b 7
0001AEA3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001AEA8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001AEAD E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001AEB2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001AEB7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001AEBC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AEC1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AEC6 01                         byte_1ADA6:	dc.b 1
0001AEC7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001AECC 06                         byte_1ADAC:	dc.b 6
0001AECD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001AED2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001AED7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001AEDC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001AEE1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AEE6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AEEB 01                         byte_1ADCB:	dc.b 1
0001AEEC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001AEF1 02                         byte_1ADD1:	dc.b 2
0001AEF2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001AEF7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001AEFC 01                         byte_1ADDC:	dc.b 1
0001AEFD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001AF02 00                         byte_1ADE2:	dc.b 0
0001AF04 00                         		even
0001AF04 00                         		even
0001AF04                            
0001AF04                            ; ---------------------------------------------------------------------------
0001AF04                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001AF04                            ; ---------------------------------------------------------------------------
0001AF04                            
0001AF04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AF04                            
0001AF04                            
0001AF04                            TouchResponse:				; XREF: Obj01
0001AF04 4E71                       		nop	
0001AF06 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001AF0A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001AF0E 5142                       		subq.w	#8,d2
0001AF10 7A00                       		moveq	#0,d5
0001AF12 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001AF16 5705                       		subq.b	#3,d5
0001AF18 9645                       		sub.w	d5,d3
0001AF1A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001AF20 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001AF22 0643 000C                  		addi.w	#$C,d3
0001AF26 7A0A                       		moveq	#$A,d5
0001AF28                            
0001AF28                            Touch_NoDuck:
0001AF28 383C 0010                  		move.w	#$10,d4
0001AF2C DA45                       		add.w	d5,d5
0001AF2E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001AF32 3C3C 005F                  		move.w	#$5F,d6
0001AF36                            
0001AF36                            Touch_Loop:
0001AF36 4A29 0001                  		tst.b	1(a1)
0001AF3A 6A00                       		bpl.s	Touch_NextObj
0001AF3C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AF40 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AF42                            
0001AF42                            Touch_NextObj:
0001AF42 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AF46 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AF4A                            
0001AF4A 7000                       		moveq	#0,d0
0001AF4C 4E75                       		rts	
0001AF4E                            ; ===========================================================================
0001AF4E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AF50 0C14                       		dc.b   $C, $14
0001AF52 140C                       		dc.b  $14,  $C
0001AF54 0410                       		dc.b	4, $10
0001AF56 0C12                       		dc.b   $C, $12
0001AF58 1010                       		dc.b  $10, $10
0001AF5A 0606                       		dc.b	6,   6
0001AF5C 180C                       		dc.b  $18,  $C
0001AF5E 0C10                       		dc.b   $C, $10
0001AF60 100C                       		dc.b  $10,  $C
0001AF62 0808                       		dc.b	8,   8
0001AF64 1410                       		dc.b  $14, $10
0001AF66 1408                       		dc.b  $14,   8
0001AF68 0E0E                       		dc.b   $E,  $E
0001AF6A 1818                       		dc.b  $18, $18
0001AF6C 2810                       		dc.b  $28, $10
0001AF6E 1018                       		dc.b  $10, $18
0001AF70 0810                       		dc.b	8, $10
0001AF72 2070                       		dc.b  $20, $70
0001AF74 4020                       		dc.b  $40, $20
0001AF76 8020                       		dc.b  $80, $20
0001AF78 2020                       		dc.b  $20, $20
0001AF7A 0808                       		dc.b	8,   8
0001AF7C 0404                       		dc.b	4,   4
0001AF7E 2008                       		dc.b  $20,   8
0001AF80 0C0C                       		dc.b   $C,  $C
0001AF82 0804                       		dc.b	8,   4
0001AF84 1804                       		dc.b  $18,   4
0001AF86 2804                       		dc.b  $28,   4
0001AF88 0408                       		dc.b	4,   8
0001AF8A 0418                       		dc.b	4, $18
0001AF8C 0428                       		dc.b	4, $28
0001AF8E 0420                       		dc.b	4, $20
0001AF90 1818                       		dc.b  $18, $18
0001AF92 0C18                       		dc.b   $C, $18
0001AF94 4808                       		dc.b  $48,   8
0001AF96                            ; ===========================================================================
0001AF96                            
0001AF96                            Touch_Height:				; XREF: TouchResponse
0001AF96 0240 003F                  		andi.w	#$3F,d0
0001AF9A D040                       		add.w	d0,d0
0001AF9C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001AFA0 7200                       		moveq	#0,d1
0001AFA2 121A                       		move.b	(a2)+,d1
0001AFA4 3029 0008                  		move.w	8(a1),d0
0001AFA8 9041                       		sub.w	d1,d0
0001AFAA 9042                       		sub.w	d2,d0
0001AFAC 6400                       		bcc.s	loc_1AE98
0001AFAE D241                       		add.w	d1,d1
0001AFB0 D041                       		add.w	d1,d0
0001AFB2 6500                       		bcs.s	Touch_Width
0001AFB4 6000 FF8C                  		bra.w	Touch_NextObj
0001AFB8                            ; ===========================================================================
0001AFB8                            
0001AFB8                            loc_1AE98:
0001AFB8 B044                       		cmp.w	d4,d0
0001AFBA 6200 FF86                  		bhi.w	Touch_NextObj
0001AFBE                            
0001AFBE                            Touch_Width:
0001AFBE 7200                       		moveq	#0,d1
0001AFC0 121A                       		move.b	(a2)+,d1
0001AFC2 3029 000C                  		move.w	$C(a1),d0
0001AFC6 9041                       		sub.w	d1,d0
0001AFC8 9043                       		sub.w	d3,d0
0001AFCA 6400                       		bcc.s	loc_1AEB6
0001AFCC D241                       		add.w	d1,d1
0001AFCE D240                       		add.w	d0,d1
0001AFD0 6500                       		bcs.s	Touch_ChkValue
0001AFD2 6000 FF6E                  		bra.w	Touch_NextObj
0001AFD6                            ; ===========================================================================
0001AFD6                            
0001AFD6                            loc_1AEB6:
0001AFD6 B045                       		cmp.w	d5,d0
0001AFD8 6200 FF68                  		bhi.w	Touch_NextObj
0001AFDC                            
0001AFDC                            Touch_ChkValue:
0001AFDC 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001AFE0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001AFE4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001AFE8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001AFEC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001AFF0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001AFF2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001AFF6                            
0001AFF6                            ; touch	response is $40-$7F
0001AFF6                            
0001AFF6 1029 0020                  		move.b	$20(a1),d0
0001AFFA 0200 003F                  		andi.b	#$3F,d0
0001AFFE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B002 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B004 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B00A 6400 0000                  		bcc.w	locret_1AEF2
0001B00E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B012                            
0001B012                            locret_1AEF2:
0001B012 4E75                       		rts	
0001B014                            ; ===========================================================================
0001B014                            
0001B014                            Touch_Monitor:
0001B014 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B018 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B01A 3028 000C                  		move.w	$C(a0),d0
0001B01E 0440 0010                  		subi.w	#$10,d0
0001B022 B069 000C                  		cmp.w	$C(a1),d0
0001B026 6500                       		bcs.s	locret_1AF2E
0001B028 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B02C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B032 4A29 0025                  		tst.b	$25(a1)
0001B036 6600                       		bne.s	locret_1AF2E
0001B038 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B03C 4E75                       		rts	
0001B03E                            ; ===========================================================================
0001B03E                            
0001B03E                            loc_1AF1E:
0001B03E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B044 6600                       		bne.s	locret_1AF2E
0001B046 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B04A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B04E                            
0001B04E                            locret_1AF2E:
0001B04E 4E75                       		rts	
0001B050                            ; ===========================================================================
0001B050                            
0001B050                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B050 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B054 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B056 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B05C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B060                            
0001B060                            loc_1AF40:
0001B060 4A29 0021                  		tst.b	$21(a1)
0001B064 6700                       		beq.s	Touch_KillEnemy
0001B066 4468 0010                  		neg.w	$10(a0)
0001B06A 4468 0012                  		neg.w	$12(a0)
0001B06E E0E8 0010                  		asr	$10(a0)
0001B072 E0E8 0012                  		asr	$12(a0)
0001B076 137C 0000 0020             		move.b	#0,$20(a1)
0001B07C 5329 0021                  		subq.b	#1,$21(a1)
0001B080 6600                       		bne.s	locret_1AF68
0001B082 08E9 0007 0022             		bset	#7,$22(a1)
0001B088                            
0001B088                            locret_1AF68:
0001B088 4E75                       		rts	
0001B08A                            ; ===========================================================================
0001B08A                            
0001B08A                            Touch_KillEnemy:
0001B08A 08E9 0007 0022             		bset	#7,$22(a1)
0001B090 7000                       		moveq	#0,d0
0001B092 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B096 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B09A 0C40 0006                  		cmpi.w	#6,d0
0001B09E 6500                       		bcs.s	loc_1AF82
0001B0A0 7006                       		moveq	#6,d0
0001B0A2                            
0001B0A2                            loc_1AF82:
0001B0A2 3340 003E                  		move.w	d0,$3E(a1)
0001B0A6 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B0AA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B0B0 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B0B2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B0B6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B0BC                            
0001B0BC                            loc_1AF9C:
0001B0BC 6100 0000                  		bsr.w	AddPoints
0001B0C0 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B0C4 137C 0000 0024             		move.b	#0,$24(a1)
0001B0CA 4A68 0012                  		tst.w	$12(a0)
0001B0CE 6B00                       		bmi.s	loc_1AFC2
0001B0D0 3028 000C                  		move.w	$C(a0),d0
0001B0D4 B069 000C                  		cmp.w	$C(a1),d0
0001B0D8 6400                       		bcc.s	loc_1AFCA
0001B0DA 4468 0012                  		neg.w	$12(a0)
0001B0DE 4E75                       		rts	
0001B0E0                            ; ===========================================================================
0001B0E0                            
0001B0E0                            loc_1AFC2:
0001B0E0 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B0E6 4E75                       		rts	
0001B0E8                            ; ===========================================================================
0001B0E8                            
0001B0E8                            loc_1AFCA:
0001B0E8 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B0EE 4E75                       		rts	
0001B0F0                            ; ===========================================================================
0001B0F0 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B0F8                            ; ===========================================================================
0001B0F8                            
0001B0F8                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B0F8 08E9 0007 0022             		bset	#7,$22(a1)
0001B0FE                            
0001B0FE                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B0FE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B102 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B104                            
0001B104                            loc_1AFE6:				; XREF: Touch_Hurt
0001B104 70FF                       		moveq	#-1,d0
0001B106 4E75                       		rts	
0001B108                            ; ===========================================================================
0001B108                            
0001B108                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B108 4E71                       		nop	
0001B10A 4A68 0030                  		tst.w	$30(a0)
0001B10E 66F4                       		bne.s	loc_1AFE6
0001B110 2449                       		movea.l	a1,a2
0001B112                            
0001B112                            ; End of function TouchResponse
0001B112                            ; continue straight to HurtSonic
0001B112                            
0001B112                            ; ---------------------------------------------------------------------------
0001B112                            ; Hurting Sonic	subroutine
0001B112                            ; ---------------------------------------------------------------------------
0001B112                            
0001B112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B112                            
0001B112                            
0001B112                            HurtSonic:
0001B112 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B116 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B118 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B11C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B120 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001B126 6600                       		bne.s	Hurt_Shield
0001B128 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B12C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B132 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B138                            
0001B138                            Hurt_Shield:
0001B138 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B13E 117C 0004 0024             		move.b	#4,$24(a0)
0001B144 6100 87A6                  		bsr.w	Sonic_ResetOnFloor
0001B148 08E8 0001 0022             		bset	#1,$22(a0)
0001B14E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B154 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B15A 0828 0006 0022             		btst	#6,$22(a0)
0001B160 6700                       		beq.s	Hurt_Reverse
0001B162 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B168 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B16E                            
0001B16E                            Hurt_Reverse:
0001B16E 3028 0008                  		move.w	8(a0),d0
0001B172 B06A 0008                  		cmp.w	8(a2),d0
0001B176 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B178 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B17C                            
0001B17C                            Hurt_ChkSpikes:
0001B17C 317C 0000 0014             		move.w	#0,$14(a0)
0001B182 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B188 317C 0078 0030             		move.w	#$78,$30(a0)
0001B18E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B192 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B196 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B198 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B19C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B19E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B1A2                            
0001B1A2                            Hurt_Sound:
0001B1A2 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B1A8 70FF                       		moveq	#-1,d0
0001B1AA 4E75                       		rts	
0001B1AC                            ; ===========================================================================
0001B1AC                            
0001B1AC                            Hurt_NoRings:
0001B1AC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B1B0 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B1B4                            ; End of function HurtSonic
0001B1B4                            
0001B1B4                            ; ---------------------------------------------------------------------------
0001B1B4                            ; Subroutine to	kill Sonic
0001B1B4                            ; ---------------------------------------------------------------------------
0001B1B4                            
0001B1B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B1B4                            
0001B1B4                            
0001B1B4                            KillSonic:
0001B1B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B1B8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B1BA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B1C0 117C 0006 0024             		move.b	#6,$24(a0)
0001B1C6 6100 8724                  		bsr.w	Sonic_ResetOnFloor
0001B1CA 08E8 0001 0022             		bset	#1,$22(a0)
0001B1D0 317C F900 0012             		move.w	#-$700,$12(a0)
0001B1D6 317C 0000 0010             		move.w	#0,$10(a0)
0001B1DC 317C 0000 0014             		move.w	#0,$14(a0)
0001B1E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B1E8 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B1EE 08E8 0007 0002             		bset	#7,2(a0)
0001B1F4 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B1F8 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B1FC 6600                       		bne.s	Kill_Sound
0001B1FE 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B202                            
0001B202                            Kill_Sound:
0001B202 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B208                            
0001B208                            Kill_NoDeath:
0001B208 70FF                       		moveq	#-1,d0
0001B20A 4E75                       		rts	
0001B20C                            ; End of function KillSonic
0001B20C                            
0001B20C                            
0001B20C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B20C                            
0001B20C                            
0001B20C                            Touch_Special:				; XREF: Touch_ChkValue
0001B20C 1229 0020                  		move.b	$20(a1),d1
0001B210 0201 003F                  		andi.b	#$3F,d1
0001B214 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B218 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B21A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B21E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B220 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B224 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B226 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B22A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B22C 4E75                       		rts	
0001B22E                            ; ===========================================================================
0001B22E                            
0001B22E                            Touch_CatKiller:			; XREF: Touch_Special
0001B22E 6000 FEC8                  		bra.w	loc_1AFDA
0001B232                            ; ===========================================================================
0001B232                            
0001B232                            Touch_Yadrin:				; XREF: Touch_Special
0001B232 9A40                       		sub.w	d0,d5
0001B234 0C45 0008                  		cmpi.w	#8,d5
0001B238 6400                       		bcc.s	loc_1B144
0001B23A 3029 0008                  		move.w	8(a1),d0
0001B23E 5940                       		subq.w	#4,d0
0001B240 0829 0000 0022             		btst	#0,$22(a1)
0001B246 6700                       		beq.s	loc_1B130
0001B248 0440 0010                  		subi.w	#$10,d0
0001B24C                            
0001B24C                            loc_1B130:
0001B24C 9042                       		sub.w	d2,d0
0001B24E 6400                       		bcc.s	loc_1B13C
0001B250 0640 0018                  		addi.w	#$18,d0
0001B254 6500                       		bcs.s	loc_1B140
0001B256 6000                       		bra.s	loc_1B144
0001B258                            ; ===========================================================================
0001B258                            
0001B258                            loc_1B13C:
0001B258 B044                       		cmp.w	d4,d0
0001B25A 6200                       		bhi.s	loc_1B144
0001B25C                            
0001B25C                            loc_1B140:
0001B25C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B260                            ; ===========================================================================
0001B260                            
0001B260                            loc_1B144:
0001B260 6000 FDEE                  		bra.w	Touch_Enemy
0001B264                            ; ===========================================================================
0001B264                            
0001B264                            Touch_D7orE1:				; XREF: Touch_Special
0001B264 5229 0021                  		addq.b	#1,$21(a1)
0001B268 4E75                       		rts	
0001B26A                            ; End of function Touch_Special
0001B26A                            
0001B26A                            ; ---------------------------------------------------------------------------
0001B26A                            ; Subroutine to	show the special stage layout
0001B26A                            ; ---------------------------------------------------------------------------
0001B26A                            
0001B26A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B26A                            
0001B26A                            
0001B26A                            SS_ShowLayout:				; XREF: SpecialStage
0001B26A 6100 0000                  		bsr.w	SS_AniWallsRings
0001B26E 6100 0000                  		bsr.w	SS_AniItems
0001B272 3F05                       		move.w	d5,-(sp)
0001B274 43F8 8000                  		lea	($FFFF8000).w,a1
0001B278 1038 F780                  		move.b	($FFFFF780).w,d0
0001B27C 0200 00FC                  		andi.b	#$FC,d0
0001B280 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B286 3800                       		move.w	d0,d4
0001B288 3A01                       		move.w	d1,d5
0001B28A C9FC 0018                  		muls.w	#$18,d4
0001B28E CBFC 0018                  		muls.w	#$18,d5
0001B292 7400                       		moveq	#0,d2
0001B294 3438 F700                  		move.w	($FFFFF700).w,d2
0001B298 84FC 0018                  		divu.w	#$18,d2
0001B29C 4842                       		swap	d2
0001B29E 4442                       		neg.w	d2
0001B2A0 0642 FF4C                  		addi.w	#-$B4,d2
0001B2A4 7600                       		moveq	#0,d3
0001B2A6 3638 F704                  		move.w	($FFFFF704).w,d3
0001B2AA 86FC 0018                  		divu.w	#$18,d3
0001B2AE 4843                       		swap	d3
0001B2B0 4443                       		neg.w	d3
0001B2B2 0643 FF4C                  		addi.w	#-$B4,d3
0001B2B6 3E3C 000F                  		move.w	#$F,d7
0001B2BA                            
0001B2BA                            loc_1B19E:
0001B2BA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B2BE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B2C2 4440                       		neg.w	d0
0001B2C4 C3C2                       		muls.w	d2,d1
0001B2C6 C1C3                       		muls.w	d3,d0
0001B2C8 2C00                       		move.l	d0,d6
0001B2CA DC81                       		add.l	d1,d6
0001B2CC 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B2D0 C1C2                       		muls.w	d2,d0
0001B2D2 C3C3                       		muls.w	d3,d1
0001B2D4 D280                       		add.l	d0,d1
0001B2D6 2406                       		move.l	d6,d2
0001B2D8 3C3C 000F                  		move.w	#$F,d6
0001B2DC                            
0001B2DC                            loc_1B1C0:
0001B2DC 2002                       		move.l	d2,d0
0001B2DE E080                       		asr.l	#8,d0
0001B2E0 32C0                       		move.w	d0,(a1)+
0001B2E2 2001                       		move.l	d1,d0
0001B2E4 E080                       		asr.l	#8,d0
0001B2E6 32C0                       		move.w	d0,(a1)+
0001B2E8 D485                       		add.l	d5,d2
0001B2EA D284                       		add.l	d4,d1
0001B2EC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B2F0                            
0001B2F0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B2F4 0643 0018                  		addi.w	#$18,d3
0001B2F8 51CF FFC0                  		dbf	d7,loc_1B19E
0001B2FC                            
0001B2FC 3A1F                       		move.w	(sp)+,d5
0001B2FE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B304 7000                       		moveq	#0,d0
0001B306 3038 F704                  		move.w	($FFFFF704).w,d0
0001B30A 80FC 0018                  		divu.w	#$18,d0
0001B30E C0FC 0080                  		mulu.w	#$80,d0
0001B312 D1C0                       		adda.l	d0,a0
0001B314 7000                       		moveq	#0,d0
0001B316 3038 F700                  		move.w	($FFFFF700).w,d0
0001B31A 80FC 0018                  		divu.w	#$18,d0
0001B31E D0C0                       		adda.w	d0,a0
0001B320 49F8 8000                  		lea	($FFFF8000).w,a4
0001B324 3E3C 000F                  		move.w	#$F,d7
0001B328                            
0001B328                            loc_1B20C:
0001B328 3C3C 000F                  		move.w	#$F,d6
0001B32C                            
0001B32C                            loc_1B210:
0001B32C 7000                       		moveq	#0,d0
0001B32E 1018                       		move.b	(a0)+,d0
0001B330 6700                       		beq.s	loc_1B268
0001B332 0C00 004E                  		cmpi.b	#$4E,d0
0001B336 6200                       		bhi.s	loc_1B268
0001B338 3614                       		move.w	(a4),d3
0001B33A 0643 0120                  		addi.w	#$120,d3
0001B33E 0C43 0070                  		cmpi.w	#$70,d3
0001B342 6500                       		bcs.s	loc_1B268
0001B344 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B348 6400                       		bcc.s	loc_1B268
0001B34A 342C 0002                  		move.w	2(a4),d2
0001B34E 0642 00F0                  		addi.w	#$F0,d2
0001B352 0C42 0070                  		cmpi.w	#$70,d2
0001B356 6500                       		bcs.s	loc_1B268
0001B358 0C42 0170                  		cmpi.w	#$170,d2
0001B35C 6400                       		bcc.s	loc_1B268
0001B35E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B364 E748                       		lsl.w	#3,d0
0001B366 4BF5 0000                  		lea	(a5,d0.w),a5
0001B36A 225D                       		movea.l	(a5)+,a1
0001B36C 321D                       		move.w	(a5)+,d1
0001B36E D241                       		add.w	d1,d1
0001B370 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B374 365D                       		movea.w	(a5)+,a3
0001B376 7200                       		moveq	#0,d1
0001B378 1219                       		move.b	(a1)+,d1
0001B37A 5301                       		subq.b	#1,d1
0001B37C 6B00                       		bmi.s	loc_1B268
0001B37E 4EB9 0000 D89A             		jsr	sub_D762
0001B384                            
0001B384                            loc_1B268:
0001B384 584C                       		addq.w	#4,a4
0001B386 51CE FFA4                  		dbf	d6,loc_1B210
0001B38A                            
0001B38A 41E8 0070                  		lea	$70(a0),a0
0001B38E 51CF FF98                  		dbf	d7,loc_1B20C
0001B392                            
0001B392 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B396 0C05 0050                  		cmpi.b	#$50,d5
0001B39A 6700                       		beq.s	loc_1B288
0001B39C 24BC 0000 0000             		move.l	#0,(a2)
0001B3A2 4E75                       		rts	
0001B3A4                            ; ===========================================================================
0001B3A4                            
0001B3A4                            loc_1B288:
0001B3A4 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B3AA 4E75                       		rts	
0001B3AC                            ; End of function SS_ShowLayout
0001B3AC                            
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            ; Subroutine to	animate	walls and rings	in the special stage
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            
0001B3AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3AC                            
0001B3AC                            
0001B3AC                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B3AC 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B3B2 7000                       		moveq	#0,d0
0001B3B4 1038 F780                  		move.b	($FFFFF780).w,d0
0001B3B8 E408                       		lsr.b	#2,d0
0001B3BA 0240 000F                  		andi.w	#$F,d0
0001B3BE 7223                       		moveq	#$23,d1
0001B3C0                            
0001B3C0                            loc_1B2A4:
0001B3C0 3280                       		move.w	d0,(a1)
0001B3C2 5049                       		addq.w	#8,a1
0001B3C4 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B3C8                            
0001B3C8 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B3CE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B3D2 6A00                       		bpl.s	loc_1B2C8
0001B3D4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B3DA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B3DE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B3E4                            
0001B3E4                            loc_1B2C8:
0001B3E4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B3EA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B3EE 6A00                       		bpl.s	loc_1B2E4
0001B3F0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B3F6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B3FA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B400                            
0001B400                            loc_1B2E4:
0001B400 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B404 1340 0138                  		move.b	d0,$138(a1)
0001B408 1340 0160                  		move.b	d0,$160(a1)
0001B40C 1340 0148                  		move.b	d0,$148(a1)
0001B410 1340 0150                  		move.b	d0,$150(a1)
0001B414 1340 01D8                  		move.b	d0,$1D8(a1)
0001B418 1340 01E0                  		move.b	d0,$1E0(a1)
0001B41C 1340 01E8                  		move.b	d0,$1E8(a1)
0001B420 1340 01F0                  		move.b	d0,$1F0(a1)
0001B424 1340 01F8                  		move.b	d0,$1F8(a1)
0001B428 1340 0200                  		move.b	d0,$200(a1)
0001B42C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B430 6A00                       		bpl.s	loc_1B326
0001B432 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B438 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B43C 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B442                            
0001B442                            loc_1B326:
0001B442 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B446 1340 0168                  		move.b	d0,$168(a1)
0001B44A 1340 0170                  		move.b	d0,$170(a1)
0001B44E 1340 0178                  		move.b	d0,$178(a1)
0001B452 1340 0180                  		move.b	d0,$180(a1)
0001B456 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B45A 6A00                       		bpl.s	loc_1B350
0001B45C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B462 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B466 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B46C                            
0001B46C                            loc_1B350:
0001B46C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B472 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B478 7000                       		moveq	#0,d0
0001B47A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B47E D040                       		add.w	d0,d0
0001B480 41F0 0000                  		lea	(a0,d0.w),a0
0001B484 3290                       		move.w	(a0),(a1)
0001B486 3368 0002 0008             		move.w	2(a0),8(a1)
0001B48C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B492 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B498 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B49E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B4A4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B4AA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B4B0 D0FC 0020                  		adda.w	#$20,a0
0001B4B4 D2FC 0048                  		adda.w	#$48,a1
0001B4B8 3290                       		move.w	(a0),(a1)
0001B4BA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B4C0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B4C6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B4CC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B4D2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B4D8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B4DE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B4E4 D0FC 0020                  		adda.w	#$20,a0
0001B4E8 D2FC 0048                  		adda.w	#$48,a1
0001B4EC 3290                       		move.w	(a0),(a1)
0001B4EE 3368 0002 0008             		move.w	2(a0),8(a1)
0001B4F4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B4FA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B500 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B506 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B50C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B512 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B518 D0FC 0020                  		adda.w	#$20,a0
0001B51C D2FC 0048                  		adda.w	#$48,a1
0001B520 3290                       		move.w	(a0),(a1)
0001B522 3368 0002 0008             		move.w	2(a0),8(a1)
0001B528 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B52E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B534 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B53A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B540 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B546 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B54C D0FC 0020                  		adda.w	#$20,a0
0001B550 D2FC 0048                  		adda.w	#$48,a1
0001B554 4E75                       		rts	
0001B556                            ; End of function SS_AniWallsRings
0001B556                            
0001B556                            ; ===========================================================================
0001B556 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B566 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B576 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B586 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B596 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B5A6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B5B6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B5C6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B5D6                            ; ---------------------------------------------------------------------------
0001B5D6                            ; Subroutine to	remove items when you collect them in the special stage
0001B5D6                            ; ---------------------------------------------------------------------------
0001B5D6                            
0001B5D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5D6                            
0001B5D6                            
0001B5D6                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B5D6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B5DC 303C 001F                  		move.w	#$1F,d0
0001B5E0                            
0001B5E0                            loc_1B4C4:
0001B5E0 4A12                       		tst.b	(a2)
0001B5E2 6700                       		beq.s	locret_1B4CE
0001B5E4 504A                       		addq.w	#8,a2
0001B5E6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B5EA                            
0001B5EA                            locret_1B4CE:
0001B5EA 4E75                       		rts	
0001B5EC                            ; End of function SS_RemoveCollectedItem
0001B5EC                            
0001B5EC                            ; ---------------------------------------------------------------------------
0001B5EC                            ; Subroutine to	animate	special	stage items when you touch them
0001B5EC                            ; ---------------------------------------------------------------------------
0001B5EC                            
0001B5EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5EC                            
0001B5EC                            
0001B5EC                            SS_AniItems:				; XREF: SS_ShowLayout
0001B5EC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B5F2 3E3C 001F                  		move.w	#$1F,d7
0001B5F6                            
0001B5F6                            loc_1B4DA:
0001B5F6 7000                       		moveq	#0,d0
0001B5F8 1010                       		move.b	(a0),d0
0001B5FA 6700                       		beq.s	loc_1B4E8
0001B5FC E548                       		lsl.w	#2,d0
0001B5FE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B602 4E91                       		jsr	(a1)
0001B604                            
0001B604                            loc_1B4E8:
0001B604 5048                       		addq.w	#8,a0
0001B606                            
0001B606                            loc_1B4EA:
0001B606 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B60A                            
0001B60A 4E75                       		rts	
0001B60C                            ; End of function SS_AniItems
0001B60C                            
0001B60C                            ; ===========================================================================
0001B60C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B610 0000 0000                  		dc.l SS_AniBumper
0001B614 0000 0000                  		dc.l SS_Ani1Up
0001B618 0000 0000                  		dc.l SS_AniReverse
0001B61C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B620 0000 0000                  		dc.l SS_AniGlassBlock
0001B624                            ; ===========================================================================
0001B624                            
0001B624                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B624 5328 0002                  		subq.b	#1,2(a0)
0001B628 6A00                       		bpl.s	locret_1B530
0001B62A 117C 0005 0002             		move.b	#5,2(a0)
0001B630 7000                       		moveq	#0,d0
0001B632 1028 0003                  		move.b	3(a0),d0
0001B636 5228 0003                  		addq.b	#1,3(a0)
0001B63A 2268 0004                  		movea.l	4(a0),a1
0001B63E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B642 1280                       		move.b	d0,(a1)
0001B644 6600                       		bne.s	locret_1B530
0001B646 4290                       		clr.l	(a0)
0001B648 42A8 0004                  		clr.l	4(a0)
0001B64C                            
0001B64C                            locret_1B530:
0001B64C 4E75                       		rts	
0001B64E                            ; ===========================================================================
0001B64E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B654                            ; ===========================================================================
0001B654                            
0001B654                            SS_AniBumper:				; XREF: SS_AniIndex
0001B654 5328 0002                  		subq.b	#1,2(a0)
0001B658 6A00                       		bpl.s	locret_1B566
0001B65A 117C 0007 0002             		move.b	#7,2(a0)
0001B660 7000                       		moveq	#0,d0
0001B662 1028 0003                  		move.b	3(a0),d0
0001B666 5228 0003                  		addq.b	#1,3(a0)
0001B66A 2268 0004                  		movea.l	4(a0),a1
0001B66E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B672 6600                       		bne.s	loc_1B564
0001B674 4290                       		clr.l	(a0)
0001B676 42A8 0004                  		clr.l	4(a0)
0001B67A 12BC 0025                  		move.b	#$25,(a1)
0001B67E 4E75                       		rts	
0001B680                            ; ===========================================================================
0001B680                            
0001B680                            loc_1B564:
0001B680 1280                       		move.b	d0,(a1)
0001B682                            
0001B682                            locret_1B566:
0001B682 4E75                       		rts	
0001B684                            ; ===========================================================================
0001B684 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B68A                            ; ===========================================================================
0001B68A                            
0001B68A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B68A 5328 0002                  		subq.b	#1,2(a0)
0001B68E 6A00                       		bpl.s	locret_1B596
0001B690 117C 0005 0002             		move.b	#5,2(a0)
0001B696 7000                       		moveq	#0,d0
0001B698 1028 0003                  		move.b	3(a0),d0
0001B69C 5228 0003                  		addq.b	#1,3(a0)
0001B6A0 2268 0004                  		movea.l	4(a0),a1
0001B6A4 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B6A8 1280                       		move.b	d0,(a1)
0001B6AA 6600                       		bne.s	locret_1B596
0001B6AC 4290                       		clr.l	(a0)
0001B6AE 42A8 0004                  		clr.l	4(a0)
0001B6B2                            
0001B6B2                            locret_1B596:
0001B6B2 4E75                       		rts	
0001B6B4                            ; ===========================================================================
0001B6B4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B6BA                            ; ===========================================================================
0001B6BA                            
0001B6BA                            SS_AniReverse:				; XREF: SS_AniIndex
0001B6BA 5328 0002                  		subq.b	#1,2(a0)
0001B6BE 6A00                       		bpl.s	locret_1B5CC
0001B6C0 117C 0007 0002             		move.b	#7,2(a0)
0001B6C6 7000                       		moveq	#0,d0
0001B6C8 1028 0003                  		move.b	3(a0),d0
0001B6CC 5228 0003                  		addq.b	#1,3(a0)
0001B6D0 2268 0004                  		movea.l	4(a0),a1
0001B6D4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B6D8 6600                       		bne.s	loc_1B5CA
0001B6DA 4290                       		clr.l	(a0)
0001B6DC 42A8 0004                  		clr.l	4(a0)
0001B6E0 12BC 002B                  		move.b	#$2B,(a1)
0001B6E4 4E75                       		rts	
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            loc_1B5CA:
0001B6E6 1280                       		move.b	d0,(a1)
0001B6E8                            
0001B6E8                            locret_1B5CC:
0001B6E8 4E75                       		rts	
0001B6EA                            ; ===========================================================================
0001B6EA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B6F0                            ; ===========================================================================
0001B6F0                            
0001B6F0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B6F0 5328 0002                  		subq.b	#1,2(a0)
0001B6F4 6A00                       		bpl.s	locret_1B60C
0001B6F6 117C 0005 0002             		move.b	#5,2(a0)
0001B6FC 7000                       		moveq	#0,d0
0001B6FE 1028 0003                  		move.b	3(a0),d0
0001B702 5228 0003                  		addq.b	#1,3(a0)
0001B706 2268 0004                  		movea.l	4(a0),a1
0001B70A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B70E 1280                       		move.b	d0,(a1)
0001B710 6600                       		bne.s	locret_1B60C
0001B712 4290                       		clr.l	(a0)
0001B714 42A8 0004                  		clr.l	4(a0)
0001B718 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B71E 303C 00A8                  		move.w	#$A8,d0
0001B722 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B728                            
0001B728                            locret_1B60C:
0001B728 4E75                       		rts	
0001B72A                            ; ===========================================================================
0001B72A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B730 5328 0002                  		subq.b	#1,2(a0)
0001B734 6A00                       		bpl.s	locret_1B640
0001B736 117C 0001 0002             		move.b	#1,2(a0)
0001B73C 7000                       		moveq	#0,d0
0001B73E 1028 0003                  		move.b	3(a0),d0
0001B742 5228 0003                  		addq.b	#1,3(a0)
0001B746 2268 0004                  		movea.l	4(a0),a1
0001B74A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B74E 1280                       		move.b	d0,(a1)
0001B750 6600                       		bne.s	locret_1B640
0001B752 12A8 0004                  		move.b	4(a0),(a1)
0001B756 4290                       		clr.l	(a0)
0001B758 42A8 0004                  		clr.l	4(a0)
0001B75C                            
0001B75C                            locret_1B640:
0001B75C 4E75                       		rts	
0001B75E                            ; ===========================================================================
0001B75E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            ; Special stage	layout pointers
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            SS_LayoutIndex:
0001B768                            	include "_inc\Special stage layout pointers.asm"
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            ; Special stage	layout pointers
0001B768                            ; ---------------------------------------------------------------------------
0001B768 0000 0000                  	dc.l SS_1
0001B76C 0000 0000                  	dc.l SS_2
0001B770 0000 0000                  	dc.l SS_3
0001B774 0000 0000                  	dc.l SS_4
0001B778 0000 0000                  	dc.l SS_5
0001B77C 0000 0000                  	dc.l SS_6
0001B780                            	even
0001B780                            	even
0001B780                            
0001B780                            ; ---------------------------------------------------------------------------
0001B780                            ; Special stage	start locations
0001B780                            ; ---------------------------------------------------------------------------
0001B780                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B798                            		even
0001B798                            
0001B798                            ; ---------------------------------------------------------------------------
0001B798                            ; Subroutine to	load special stage layout
0001B798                            ; ---------------------------------------------------------------------------
0001B798                            
0001B798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B798                            
0001B798                            
0001B798                            SS_Load:				; XREF: SpecialStage
0001B798 7000                       		moveq	#0,d0
0001B79A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B79E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B7A2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B7A8 6500                       		bcs.s	SS_ChkEmldNum
0001B7AA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B7B0                            
0001B7B0                            SS_ChkEmldNum:
0001B7B0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B7B6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B7B8 7200                       		moveq	#0,d1
0001B7BA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B7BE 5301                       		subq.b	#1,d1
0001B7C0 6500                       		bcs.s	SS_LoadData
0001B7C2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B7C6                            
0001B7C6                            SS_ChkEmldLoop:	
0001B7C6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B7CA 6600                       		bne.s	SS_ChkEmldRepeat
0001B7CC 60CA                       		bra.s	SS_Load
0001B7CE                            ; ===========================================================================
0001B7CE                            
0001B7CE                            SS_ChkEmldRepeat:
0001B7CE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B7D2                            
0001B7D2                            SS_LoadData:
0001B7D2 E548                       		lsl.w	#2,d0
0001B7D4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B7D8 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B7DC 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B7E0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B7E4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B7EA 303C 0000                  		move.w	#0,d0
0001B7EE 4EB9 0000 171E             		jsr	(EniDec).l
0001B7F4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B7FA 303C 0FFF                  		move.w	#$FFF,d0
0001B7FE                            
0001B7FE                            SS_ClrRAM3:
0001B7FE 4299                       		clr.l	(a1)+
0001B800 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B804                            
0001B804 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B80A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B810 723F                       		moveq	#$3F,d1
0001B812                            
0001B812                            loc_1B6F6:
0001B812 743F                       		moveq	#$3F,d2
0001B814                            
0001B814                            loc_1B6F8:
0001B814 12D8                       		move.b	(a0)+,(a1)+
0001B816 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B81A                            
0001B81A 43E9 0040                  		lea	$40(a1),a1
0001B81E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B822                            
0001B822 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B828 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B82E 724D                       		moveq	#$4D,d1
0001B830                            
0001B830                            loc_1B714:
0001B830 22D8                       		move.l	(a0)+,(a1)+
0001B832 32FC 0000                  		move.w	#0,(a1)+
0001B836 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B83C 32D8                       		move.w	(a0)+,(a1)+
0001B83E 51C9 FFF0                  		dbf	d1,loc_1B714
0001B842                            
0001B842 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B848 323C 003F                  		move.w	#$3F,d1
0001B84C                            
0001B84C                            loc_1B730:
0001B84C                            
0001B84C 4299                       		clr.l	(a1)+
0001B84E 51C9 FFFC                  		dbf	d1,loc_1B730
0001B852                            
0001B852 4E75                       		rts	
0001B854                            ; End of function SS_Load
0001B854                            
0001B854                            ; ===========================================================================
0001B854                            ; ---------------------------------------------------------------------------
0001B854                            ; Special stage	mappings and VRAM pointers
0001B854                            ; ---------------------------------------------------------------------------
0001B854                            SS_MapIndex:
0001B854                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B854                            ; ---------------------------------------------------------------------------
0001B854                            ; Special stage	mappings and VRAM pointers
0001B854                            ; ---------------------------------------------------------------------------
0001B854 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B858 0142                       	dc.w $142		; VRAM setting
0001B85A 0000 0000                  	dc.l Map_SSWalls
0001B85E 0142                       	dc.w $142
0001B860 0000 0000                  	dc.l Map_SSWalls
0001B864 0142                       	dc.w $142
0001B866 0000 0000                  	dc.l Map_SSWalls
0001B86A 0142                       	dc.w $142
0001B86C 0000 0000                  	dc.l Map_SSWalls
0001B870 0142                       	dc.w $142
0001B872 0000 0000                  	dc.l Map_SSWalls
0001B876 0142                       	dc.w $142
0001B878 0000 0000                  	dc.l Map_SSWalls
0001B87C 0142                       	dc.w $142
0001B87E 0000 0000                  	dc.l Map_SSWalls
0001B882 0142                       	dc.w $142
0001B884 0000 0000                  	dc.l Map_SSWalls
0001B888 0142                       	dc.w $142
0001B88A 0000 0000                  	dc.l Map_SSWalls
0001B88E 2142                       	dc.w $2142
0001B890 0000 0000                  	dc.l Map_SSWalls
0001B894 2142                       	dc.w $2142
0001B896 0000 0000                  	dc.l Map_SSWalls
0001B89A 2142                       	dc.w $2142
0001B89C 0000 0000                  	dc.l Map_SSWalls
0001B8A0 2142                       	dc.w $2142
0001B8A2 0000 0000                  	dc.l Map_SSWalls
0001B8A6 2142                       	dc.w $2142
0001B8A8 0000 0000                  	dc.l Map_SSWalls
0001B8AC 2142                       	dc.w $2142
0001B8AE 0000 0000                  	dc.l Map_SSWalls
0001B8B2 2142                       	dc.w $2142
0001B8B4 0000 0000                  	dc.l Map_SSWalls
0001B8B8 2142                       	dc.w $2142
0001B8BA 0000 0000                  	dc.l Map_SSWalls
0001B8BE 2142                       	dc.w $2142
0001B8C0 0000 0000                  	dc.l Map_SSWalls
0001B8C4 4142                       	dc.w $4142
0001B8C6 0000 0000                  	dc.l Map_SSWalls
0001B8CA 4142                       	dc.w $4142
0001B8CC 0000 0000                  	dc.l Map_SSWalls
0001B8D0 4142                       	dc.w $4142
0001B8D2 0000 0000                  	dc.l Map_SSWalls
0001B8D6 4142                       	dc.w $4142
0001B8D8 0000 0000                  	dc.l Map_SSWalls
0001B8DC 4142                       	dc.w $4142
0001B8DE 0000 0000                  	dc.l Map_SSWalls
0001B8E2 4142                       	dc.w $4142
0001B8E4 0000 0000                  	dc.l Map_SSWalls
0001B8E8 4142                       	dc.w $4142
0001B8EA 0000 0000                  	dc.l Map_SSWalls
0001B8EE 4142                       	dc.w $4142
0001B8F0 0000 0000                  	dc.l Map_SSWalls
0001B8F4 4142                       	dc.w $4142
0001B8F6 0000 0000                  	dc.l Map_SSWalls
0001B8FA 6142                       	dc.w $6142
0001B8FC 0000 0000                  	dc.l Map_SSWalls
0001B900 6142                       	dc.w $6142
0001B902 0000 0000                  	dc.l Map_SSWalls
0001B906 6142                       	dc.w $6142
0001B908 0000 0000                  	dc.l Map_SSWalls
0001B90C 6142                       	dc.w $6142
0001B90E 0000 0000                  	dc.l Map_SSWalls
0001B912 6142                       	dc.w $6142
0001B914 0000 0000                  	dc.l Map_SSWalls
0001B918 6142                       	dc.w $6142
0001B91A 0000 0000                  	dc.l Map_SSWalls
0001B91E 6142                       	dc.w $6142
0001B920 0000 0000                  	dc.l Map_SSWalls
0001B924 6142                       	dc.w $6142
0001B926 0000 0000                  	dc.l Map_SSWalls
0001B92A 6142                       	dc.w $6142
0001B92C 0000 EC30                  	dc.l Map_obj47
0001B930 023B                       	dc.w $23B
0001B932 0000 0000                  	dc.l Map_SS_R
0001B936 0570                       	dc.w $570
0001B938 0000 0000                  	dc.l Map_SS_R
0001B93C 0251                       	dc.w $251
0001B93E 0000 0000                  	dc.l Map_SS_R
0001B942 0370                       	dc.w $370
0001B944 0000 0000                  	dc.l Map_SS_Up
0001B948 0263                       	dc.w $263
0001B94A 0000 0000                  	dc.l Map_SS_Down
0001B94E 0263                       	dc.w $263
0001B950 0000 0000                  	dc.l Map_SS_R
0001B954 22F0                       	dc.w $22F0
0001B956 0000 0000                  	dc.l Map_SS_Glass
0001B95A 0470                       	dc.w $470
0001B95C 0000 0000                  	dc.l Map_SS_Glass
0001B960 05F0                       	dc.w $5F0
0001B962 0000 0000                  	dc.l Map_SS_Glass
0001B966 65F0                       	dc.w $65F0
0001B968 0000 0000                  	dc.l Map_SS_Glass
0001B96C 25F0                       	dc.w $25F0
0001B96E 0000 0000                  	dc.l Map_SS_Glass
0001B972 45F0                       	dc.w $45F0
0001B974 0000 0000                  	dc.l Map_SS_R
0001B978 02F0                       	dc.w $2F0
0001B97A 0100 EC30                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001B97E 023B                       	dc.w $23B
0001B980 0200 EC30                  	dc.l Map_obj47+$2000000
0001B984 023B                       	dc.w $23B
0001B986 0000 0000                  	dc.l Map_SS_R
0001B98A 0797                       	dc.w $797
0001B98C 0000 0000                  	dc.l Map_SS_R
0001B990 07A0                       	dc.w $7A0
0001B992 0000 0000                  	dc.l Map_SS_R
0001B996 07A9                       	dc.w $7A9
0001B998 0000 0000                  	dc.l Map_SS_R
0001B99C 0797                       	dc.w $797
0001B99E 0000 0000                  	dc.l Map_SS_R
0001B9A2 07A0                       	dc.w $7A0
0001B9A4 0000 0000                  	dc.l Map_SS_R
0001B9A8 07A9                       	dc.w $7A9
0001B9AA 0000 A068                  	dc.l Map_obj25
0001B9AE 27B2                       	dc.w $27B2
0001B9B0 0000 0000                  	dc.l Map_SS_Chaos3
0001B9B4 0770                       	dc.w $770
0001B9B6 0000 0000                  	dc.l Map_SS_Chaos3
0001B9BA 2770                       	dc.w $2770
0001B9BC 0000 0000                  	dc.l Map_SS_Chaos3
0001B9C0 4770                       	dc.w $4770
0001B9C2 0000 0000                  	dc.l Map_SS_Chaos3
0001B9C6 6770                       	dc.w $6770
0001B9C8 0000 0000                  	dc.l Map_SS_Chaos1
0001B9CC 0770                       	dc.w $770
0001B9CE 0000 0000                  	dc.l Map_SS_Chaos2
0001B9D2 0770                       	dc.w $770
0001B9D4 0000 0000                  	dc.l Map_SS_R
0001B9D8 04F0                       	dc.w $4F0
0001B9DA 0400 A068                  	dc.l Map_obj25+$4000000
0001B9DE 27B2                       	dc.w $27B2
0001B9E0 0500 A068                  	dc.l Map_obj25+$5000000
0001B9E4 27B2                       	dc.w $27B2
0001B9E6 0600 A068                  	dc.l Map_obj25+$6000000
0001B9EA 27B2                       	dc.w $27B2
0001B9EC 0700 A068                  	dc.l Map_obj25+$7000000
0001B9F0 27B2                       	dc.w $27B2
0001B9F2 0000 0000                  	dc.l Map_SS_Glass
0001B9F6 23F0                       	dc.w $23F0
0001B9F8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001B9FC 23F0                       	dc.w $23F0
0001B9FE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BA02 23F0                       	dc.w $23F0
0001BA04 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BA08 23F0                       	dc.w $23F0
0001BA0A 0000 0000                  	dc.l Map_SS_R+$2000000
0001BA0E 04F0                       	dc.w $4F0
0001BA10 0000 0000                  	dc.l Map_SS_Glass
0001BA14 05F0                       	dc.w $5F0
0001BA16 0000 0000                  	dc.l Map_SS_Glass
0001BA1A 65F0                       	dc.w $65F0
0001BA1C 0000 0000                  	dc.l Map_SS_Glass
0001BA20 25F0                       	dc.w $25F0
0001BA22 0000 0000                  	dc.l Map_SS_Glass
0001BA26 45F0                       	dc.w $45F0
0001BA26 45F0                       	dc.w $45F0
0001BA28                            
0001BA28                            ; ---------------------------------------------------------------------------
0001BA28                            ; Sprite mappings - special stage "R" block
0001BA28                            ; ---------------------------------------------------------------------------
0001BA28                            Map_SS_R:
0001BA28                            	include "_maps\SSRblock.asm"
0001BA28                            ; ---------------------------------------------------------------------------
0001BA28                            ; Sprite mappings - special stage "R" block
0001BA28                            ; ---------------------------------------------------------------------------
0001BA28 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BA2C 0000                       		dc.w byte_1B91E-Map_SS_R
0001BA2E 01                         byte_1B912:	dc.b 1
0001BA2F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BA34 01                         byte_1B918:	dc.b 1
0001BA35 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BA3A 00                         byte_1B91E:	dc.b 0
0001BA3C 00                         		even
0001BA3C 00                         		even
0001BA3C                            
0001BA3C                            ; ---------------------------------------------------------------------------
0001BA3C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BA3C                            ; ---------------------------------------------------------------------------
0001BA3C                            Map_SS_Glass:
0001BA3C                            	include "_maps\SSglassblock.asm"
0001BA3C                            ; ---------------------------------------------------------------------------
0001BA3C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BA3C                            ; ---------------------------------------------------------------------------
0001BA3C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BA40 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BA44 01                         byte_1B928:	dc.b 1
0001BA45 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BA4A 01                         byte_1B92E:	dc.b 1
0001BA4B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BA50 01                         byte_1B934:	dc.b 1
0001BA51 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BA56 01                         byte_1B93A:	dc.b 1
0001BA57 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BA5C                            		even
0001BA5C                            		even
0001BA5C                            
0001BA5C                            ; ---------------------------------------------------------------------------
0001BA5C                            ; Sprite mappings - special stage "UP" block
0001BA5C                            ; ---------------------------------------------------------------------------
0001BA5C                            Map_SS_Up:
0001BA5C                            	include "_maps\SSUPblock.asm"
0001BA5C                            ; ---------------------------------------------------------------------------
0001BA5C                            ; Sprite mappings - special stage "UP" block
0001BA5C                            ; ---------------------------------------------------------------------------
0001BA5C 0000                       		dc.w byte_1B944-Map_SS_Up
0001BA5E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BA60 01                         byte_1B944:	dc.b 1
0001BA61 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BA66 01                         byte_1B94A:	dc.b 1
0001BA67 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BA6C                            		even
0001BA6C                            		even
0001BA6C                            
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C                            ; Sprite mappings - special stage "DOWN" block
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C                            Map_SS_Down:
0001BA6C                            	include "_maps\SSDOWNblock.asm"
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C                            ; Sprite mappings - special stage "DOWN" block
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C 0000                       		dc.w byte_1B954-Map_SS_Down
0001BA6E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BA70 01                         byte_1B954:	dc.b 1
0001BA71 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BA76 01                         byte_1B95A:	dc.b 1
0001BA77 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BA7C                            		even
0001BA7C                            		even
0001BA7C                            
0001BA7C                            ; ---------------------------------------------------------------------------
0001BA7C                            ; Sprite mappings - special stage chaos	emeralds
0001BA7C                            ; ---------------------------------------------------------------------------
0001BA7C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BA7E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BA80 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BA82 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BA84 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BA86 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BA88 01                         byte_1B96C:	dc.b 1
0001BA89 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BA8E 01                         byte_1B972:	dc.b 1
0001BA8F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BA94 01                         byte_1B978:	dc.b 1
0001BA95 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BA9A 01                         byte_1B97E:	dc.b 1
0001BA9B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BAA0                            		even
0001BAA0                            ; ===========================================================================
0001BAA0                            ; ---------------------------------------------------------------------------
0001BAA0                            ; Object 09 - Sonic (special stage)
0001BAA0                            ; ---------------------------------------------------------------------------
0001BAA0                            
0001BAA0                            Obj09:					; XREF: Obj_Index
0001BAA0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BAA4 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BAA6 6100 0000                  		bsr.w	SS_FixCamera
0001BAAA 6000 0000                  		bra.w	DebugMode
0001BAAE                            ; ===========================================================================
0001BAAE                            
0001BAAE                            Obj09_Normal:
0001BAAE 7000                       		moveq	#0,d0
0001BAB0 1028 0024                  		move.b	$24(a0),d0
0001BAB4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BAB8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BABC                            ; ===========================================================================
0001BABC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BABE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BAC0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BAC2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BAC4                            ; ===========================================================================
0001BAC4                            
0001BAC4                            Obj09_Main:				; XREF: Obj09_Index
0001BAC4 5428 0024                  		addq.b	#2,$24(a0)
0001BAC8 117C 000E 0016             		move.b	#$E,$16(a0)
0001BACE 117C 0007 0017             		move.b	#7,$17(a0)
0001BAD4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BADC 317C 0780 0002             		move.w	#$780,2(a0)
0001BAE2 117C 0004 0001             		move.b	#4,1(a0)
0001BAE8 117C 0000 0018             		move.b	#0,$18(a0)
0001BAEE 117C 0002 001C             		move.b	#2,$1C(a0)
0001BAF4 08E8 0002 0022             		bset	#2,$22(a0)
0001BAFA 08E8 0001 0022             		bset	#1,$22(a0)
0001BB00                            
0001BB00                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BB00 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BB04 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BB06 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BB0C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BB0E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BB14                            
0001BB14                            Obj09_NoDebug:
0001BB14 117C 0000 0030             		move.b	#0,$30(a0)
0001BB1A 7000                       		moveq	#0,d0
0001BB1C 1028 0022                  		move.b	$22(a0),d0
0001BB20 0240 0002                  		andi.w	#2,d0
0001BB24 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BB28 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BB2C 4EBA 8254                  		jsr	LoadSonicDynPLC
0001BB30 4EF9 0000 D73C             		jmp	DisplaySprite
0001BB36                            ; ===========================================================================
0001BB36 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BB38 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BB3A                            ; ===========================================================================
0001BB3A                            
0001BB3A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BB3A 6100 0000                  		bsr.w	Obj09_Jump
0001BB3E 6100 0000                  		bsr.w	Obj09_Move
0001BB42 6100 0000                  		bsr.w	Obj09_Fall
0001BB46 6000                       		bra.s	Obj09_Display
0001BB48                            ; ===========================================================================
0001BB48                            
0001BB48                            Obj09_InAir:				; XREF: Obj09_Modes
0001BB48 6100 0000                  		bsr.w	nullsub_2
0001BB4C 6100 0000                  		bsr.w	Obj09_Move
0001BB50 6100 0000                  		bsr.w	Obj09_Fall
0001BB54                            
0001BB54                            Obj09_Display:				; XREF: Obj09_OnWall
0001BB54 6100 0000                  		bsr.w	Obj09_ChkItems
0001BB58 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BB5C 4EB9 0000 D716             		jsr	SpeedToPos
0001BB62 6100 0000                  		bsr.w	SS_FixCamera
0001BB66 3038 F780                  		move.w	($FFFFF780).w,d0
0001BB6A D078 F782                  		add.w	($FFFFF782).w,d0
0001BB6E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BB72 4EB9 0001 3B08             		jsr	Sonic_Animate
0001BB78 4E75                       		rts	
0001BB7A                            
0001BB7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB7A                            
0001BB7A                            
0001BB7A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BB7A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BB80 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BB82 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BB86                            
0001BB86                            Obj09_ChkRight:
0001BB86 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BB8C 6700                       		beq.s	loc_1BA78	; if not, branch
0001BB8E 6100 0000                  		bsr.w	Obj09_MoveRight
0001BB92                            
0001BB92                            loc_1BA78:
0001BB92 1038 F602                  		move.b	($FFFFF602).w,d0
0001BB96 0200 000C                  		andi.b	#$C,d0
0001BB9A 6600                       		bne.s	loc_1BAA8
0001BB9C 3028 0014                  		move.w	$14(a0),d0
0001BBA0 6700                       		beq.s	loc_1BAA8
0001BBA2 6B00                       		bmi.s	loc_1BA9A
0001BBA4 0440 000C                  		subi.w	#$C,d0
0001BBA8 6400                       		bcc.s	loc_1BA94
0001BBAA 303C 0000                  		move.w	#0,d0
0001BBAE                            
0001BBAE                            loc_1BA94:
0001BBAE 3140 0014                  		move.w	d0,$14(a0)
0001BBB2 6000                       		bra.s	loc_1BAA8
0001BBB4                            ; ===========================================================================
0001BBB4                            
0001BBB4                            loc_1BA9A:
0001BBB4 0640 000C                  		addi.w	#$C,d0
0001BBB8 6400                       		bcc.s	loc_1BAA4
0001BBBA 303C 0000                  		move.w	#0,d0
0001BBBE                            
0001BBBE                            loc_1BAA4:
0001BBBE 3140 0014                  		move.w	d0,$14(a0)
0001BBC2                            
0001BBC2                            loc_1BAA8:
0001BBC2 1038 F780                  		move.b	($FFFFF780).w,d0
0001BBC6 0600 0020                  		addi.b	#$20,d0
0001BBCA 0200 00C0                  		andi.b	#$C0,d0
0001BBCE 4400                       		neg.b	d0
0001BBD0 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BBD6 C3E8 0014                  		muls.w	$14(a0),d1
0001BBDA D3A8 0008                  		add.l	d1,8(a0)
0001BBDE C1E8 0014                  		muls.w	$14(a0),d0
0001BBE2 D1A8 000C                  		add.l	d0,$C(a0)
0001BBE6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BBEA 2428 000C                  		move.l	$C(a0),d2
0001BBEE 2628 0008                  		move.l	8(a0),d3
0001BBF2 6100 0000                  		bsr.w	sub_1BCE8
0001BBF6 6700                       		beq.s	loc_1BAF2
0001BBF8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BBFC 93A8 0008                  		sub.l	d1,8(a0)
0001BC00 91A8 000C                  		sub.l	d0,$C(a0)
0001BC04 317C 0000 0014             		move.w	#0,$14(a0)
0001BC0A 4E75                       		rts	
0001BC0C                            ; ===========================================================================
0001BC0C                            
0001BC0C                            loc_1BAF2:
0001BC0C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BC10 4E75                       		rts	
0001BC12                            ; End of function Obj09_Move
0001BC12                            
0001BC12                            
0001BC12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC12                            
0001BC12                            
0001BC12                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BC12 08E8 0000 0022             		bset	#0,$22(a0)
0001BC18 3028 0014                  		move.w	$14(a0),d0
0001BC1C 6700                       		beq.s	loc_1BB06
0001BC1E 6A00                       		bpl.s	loc_1BB1A
0001BC20                            
0001BC20                            loc_1BB06:
0001BC20 0440 000C                  		subi.w	#$C,d0
0001BC24 0C40 F800                  		cmpi.w	#-$800,d0
0001BC28 6E00                       		bgt.s	loc_1BB14
0001BC2A 303C F800                  		move.w	#-$800,d0
0001BC2E                            
0001BC2E                            loc_1BB14:
0001BC2E 3140 0014                  		move.w	d0,$14(a0)
0001BC32 4E75                       		rts	
0001BC34                            ; ===========================================================================
0001BC34                            
0001BC34                            loc_1BB1A:
0001BC34 0440 0040                  		subi.w	#$40,d0
0001BC38 6400                       		bcc.s	loc_1BB22
0001BC3A 4E71                       		nop	
0001BC3C                            
0001BC3C                            loc_1BB22:
0001BC3C 3140 0014                  		move.w	d0,$14(a0)
0001BC40 4E75                       		rts	
0001BC42                            ; End of function Obj09_MoveLeft
0001BC42                            
0001BC42                            
0001BC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC42                            
0001BC42                            
0001BC42                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BC42 08A8 0000 0022             		bclr	#0,$22(a0)
0001BC48 3028 0014                  		move.w	$14(a0),d0
0001BC4C 6B00                       		bmi.s	loc_1BB48
0001BC4E 0640 000C                  		addi.w	#$C,d0
0001BC52 0C40 0800                  		cmpi.w	#$800,d0
0001BC56 6D00                       		blt.s	loc_1BB42
0001BC58 303C 0800                  		move.w	#$800,d0
0001BC5C                            
0001BC5C                            loc_1BB42:
0001BC5C 3140 0014                  		move.w	d0,$14(a0)
0001BC60 6000                       		bra.s	locret_1BB54
0001BC62                            ; ===========================================================================
0001BC62                            
0001BC62                            loc_1BB48:
0001BC62 0640 0040                  		addi.w	#$40,d0
0001BC66 6400                       		bcc.s	loc_1BB50
0001BC68 4E71                       		nop	
0001BC6A                            
0001BC6A                            loc_1BB50:
0001BC6A 3140 0014                  		move.w	d0,$14(a0)
0001BC6E                            
0001BC6E                            locret_1BB54:
0001BC6E 4E75                       		rts	
0001BC70                            ; End of function Obj09_MoveRight
0001BC70                            
0001BC70                            
0001BC70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC70                            
0001BC70                            
0001BC70                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BC70 1038 F603                  		move.b	($FFFFF603).w,d0
0001BC74 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BC78 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BC7A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC7E 0200 00FC                  		andi.b	#$FC,d0
0001BC82 4400                       		neg.b	d0
0001BC84 0400 0040                  		subi.b	#$40,d0
0001BC88 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BC8E C3FC 0680                  		muls.w	#$680,d1
0001BC92 E081                       		asr.l	#8,d1
0001BC94 3141 0010                  		move.w	d1,$10(a0)
0001BC98 C1FC 0680                  		muls.w	#$680,d0
0001BC9C E080                       		asr.l	#8,d0
0001BC9E 3140 0012                  		move.w	d0,$12(a0)
0001BCA2 08E8 0001 0022             		bset	#1,$22(a0)
0001BCA8 303C 00A0                  		move.w	#$A0,d0
0001BCAC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BCB2                            
0001BCB2                            Obj09_NoJump:
0001BCB2 4E75                       		rts	
0001BCB4                            ; End of function Obj09_Jump
0001BCB4                            
0001BCB4                            
0001BCB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCB4                            
0001BCB4                            
0001BCB4                            nullsub_2:				; XREF: Obj09_InAir
0001BCB4 4E75                       		rts	
0001BCB6                            ; End of function nullsub_2
0001BCB6                            
0001BCB6                            ; ===========================================================================
0001BCB6                            ; ---------------------------------------------------------------------------
0001BCB6                            ; unused subroutine to limit Sonic's upward vertical speed
0001BCB6                            ; ---------------------------------------------------------------------------
0001BCB6 323C FC00                  		move.w	#-$400,d1
0001BCBA B268 0012                  		cmp.w	$12(a0),d1
0001BCBE 6F00                       		ble.s	locret_1BBB4
0001BCC0 1038 F602                  		move.b	($FFFFF602).w,d0
0001BCC4 0200 0070                  		andi.b	#$70,d0
0001BCC8 6600                       		bne.s	locret_1BBB4
0001BCCA 3141 0012                  		move.w	d1,$12(a0)
0001BCCE                            
0001BCCE                            locret_1BBB4:
0001BCCE 4E75                       		rts	
0001BCD0                            ; ---------------------------------------------------------------------------
0001BCD0                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BCD0                            ; ---------------------------------------------------------------------------
0001BCD0                            
0001BCD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCD0                            
0001BCD0                            
0001BCD0                            SS_FixCamera:				; XREF: Obj09
0001BCD0 3428 000C                  		move.w	$C(a0),d2
0001BCD4 3628 0008                  		move.w	8(a0),d3
0001BCD8 3038 F700                  		move.w	($FFFFF700).w,d0
0001BCDC 0443 00A0                  		subi.w	#$A0,d3
0001BCE0 6500                       		bcs.s	loc_1BBCE
0001BCE2 9043                       		sub.w	d3,d0
0001BCE4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BCE8                            
0001BCE8                            loc_1BBCE:
0001BCE8 3038 F704                  		move.w	($FFFFF704).w,d0
0001BCEC 0442 0070                  		subi.w	#$70,d2
0001BCF0 6500                       		bcs.s	locret_1BBDE
0001BCF2 9042                       		sub.w	d2,d0
0001BCF4 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BCF8                            
0001BCF8                            locret_1BBDE:
0001BCF8 4E75                       		rts	
0001BCFA                            ; End of function SS_FixCamera
0001BCFA                            
0001BCFA                            ; ===========================================================================
0001BCFA                            
0001BCFA                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BCFA 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BD00 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BD06 6600                       		bne.s	loc_1BBF4
0001BD08 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BD0E                            
0001BD0E                            loc_1BBF4:
0001BD0E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BD14 6D00                       		blt.s	loc_1BC12
0001BD16 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BD1C 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BD22 5428 0024                  		addq.b	#2,$24(a0)
0001BD26 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BD2C                            
0001BD2C                            loc_1BC12:
0001BD2C 3038 F780                  		move.w	($FFFFF780).w,d0
0001BD30 D078 F782                  		add.w	($FFFFF782).w,d0
0001BD34 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BD38 4EB9 0001 3B08             		jsr	Sonic_Animate
0001BD3E 4EBA 8042                  		jsr	LoadSonicDynPLC
0001BD42 6100 FF8C                  		bsr.w	SS_FixCamera
0001BD46 4EF9 0000 D73C             		jmp	DisplaySprite
0001BD4C                            ; ===========================================================================
0001BD4C                            
0001BD4C                            Obj09_Exit2:				; XREF: Obj09_Index
0001BD4C 5368 0038                  		subq.w	#1,$38(a0)
0001BD50 6600                       		bne.s	loc_1BC40
0001BD52 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BD58                            
0001BD58                            loc_1BC40:
0001BD58 4EB9 0001 3B08             		jsr	Sonic_Animate
0001BD5E 4EBA 8022                  		jsr	LoadSonicDynPLC
0001BD62 6100 FF6C                  		bsr.w	SS_FixCamera
0001BD66 4EF9 0000 D73C             		jmp	DisplaySprite
0001BD6C                            
0001BD6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD6C                            
0001BD6C                            
0001BD6C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BD6C 2428 000C                  		move.l	$C(a0),d2
0001BD70 2628 0008                  		move.l	8(a0),d3
0001BD74 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD78 0200 00FC                  		andi.b	#$FC,d0
0001BD7C 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BD82 3828 0010                  		move.w	$10(a0),d4
0001BD86 48C4                       		ext.l	d4
0001BD88 E184                       		asl.l	#8,d4
0001BD8A C1FC 002A                  		muls.w	#$2A,d0
0001BD8E D084                       		add.l	d4,d0
0001BD90 3828 0012                  		move.w	$12(a0),d4
0001BD94 48C4                       		ext.l	d4
0001BD96 E184                       		asl.l	#8,d4
0001BD98 C3FC 002A                  		muls.w	#$2A,d1
0001BD9C D284                       		add.l	d4,d1
0001BD9E D680                       		add.l	d0,d3
0001BDA0 6100 0000                  		bsr.w	sub_1BCE8
0001BDA4 6700                       		beq.s	loc_1BCB0
0001BDA6 9680                       		sub.l	d0,d3
0001BDA8 7000                       		moveq	#0,d0
0001BDAA 3140 0010                  		move.w	d0,$10(a0)
0001BDAE 08A8 0001 0022             		bclr	#1,$22(a0)
0001BDB4 D481                       		add.l	d1,d2
0001BDB6 6100 0000                  		bsr.w	sub_1BCE8
0001BDBA 6700                       		beq.s	loc_1BCC6
0001BDBC 9481                       		sub.l	d1,d2
0001BDBE 7200                       		moveq	#0,d1
0001BDC0 3141 0012                  		move.w	d1,$12(a0)
0001BDC4 4E75                       		rts	
0001BDC6                            ; ===========================================================================
0001BDC6                            
0001BDC6                            loc_1BCB0:
0001BDC6 D481                       		add.l	d1,d2
0001BDC8 6100 0000                  		bsr.w	sub_1BCE8
0001BDCC 6700                       		beq.s	loc_1BCD4
0001BDCE 9481                       		sub.l	d1,d2
0001BDD0 7200                       		moveq	#0,d1
0001BDD2 3141 0012                  		move.w	d1,$12(a0)
0001BDD6 08A8 0001 0022             		bclr	#1,$22(a0)
0001BDDC                            
0001BDDC                            loc_1BCC6:
0001BDDC E080                       		asr.l	#8,d0
0001BDDE E081                       		asr.l	#8,d1
0001BDE0 3140 0010                  		move.w	d0,$10(a0)
0001BDE4 3141 0012                  		move.w	d1,$12(a0)
0001BDE8 4E75                       		rts	
0001BDEA                            ; ===========================================================================
0001BDEA                            
0001BDEA                            loc_1BCD4:
0001BDEA E080                       		asr.l	#8,d0
0001BDEC E081                       		asr.l	#8,d1
0001BDEE 3140 0010                  		move.w	d0,$10(a0)
0001BDF2 3141 0012                  		move.w	d1,$12(a0)
0001BDF6 08E8 0001 0022             		bset	#1,$22(a0)
0001BDFC 4E75                       		rts	
0001BDFE                            ; End of function Obj09_Fall
0001BDFE                            
0001BDFE                            
0001BDFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDFE                            
0001BDFE                            
0001BDFE                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BDFE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BE04 7800                       		moveq	#0,d4
0001BE06 4842                       		swap	d2
0001BE08 3802                       		move.w	d2,d4
0001BE0A 4842                       		swap	d2
0001BE0C 0644 0044                  		addi.w	#$44,d4
0001BE10 88FC 0018                  		divu.w	#$18,d4
0001BE14 C8FC 0080                  		mulu.w	#$80,d4
0001BE18 D3C4                       		adda.l	d4,a1
0001BE1A 7800                       		moveq	#0,d4
0001BE1C 4843                       		swap	d3
0001BE1E 3803                       		move.w	d3,d4
0001BE20 4843                       		swap	d3
0001BE22 0644 0014                  		addi.w	#$14,d4
0001BE26 88FC 0018                  		divu.w	#$18,d4
0001BE2A D2C4                       		adda.w	d4,a1
0001BE2C 7A00                       		moveq	#0,d5
0001BE2E 1819                       		move.b	(a1)+,d4
0001BE30 6100                       		bsr.s	sub_1BD30
0001BE32 1819                       		move.b	(a1)+,d4
0001BE34 6100                       		bsr.s	sub_1BD30
0001BE36 D2FC 007E                  		adda.w	#$7E,a1
0001BE3A 1819                       		move.b	(a1)+,d4
0001BE3C 6100                       		bsr.s	sub_1BD30
0001BE3E 1819                       		move.b	(a1)+,d4
0001BE40 6100                       		bsr.s	sub_1BD30
0001BE42 4A05                       		tst.b	d5
0001BE44 4E75                       		rts	
0001BE46                            ; End of function sub_1BCE8
0001BE46                            
0001BE46                            
0001BE46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE46                            
0001BE46                            
0001BE46                            sub_1BD30:				; XREF: sub_1BCE8
0001BE46 6700                       		beq.s	locret_1BD44
0001BE48 0C04 0028                  		cmpi.b	#$28,d4
0001BE4C 6700                       		beq.s	locret_1BD44
0001BE4E 0C04 003A                  		cmpi.b	#$3A,d4
0001BE52 6500                       		bcs.s	loc_1BD46
0001BE54 0C04 004B                  		cmpi.b	#$4B,d4
0001BE58 6400                       		bcc.s	loc_1BD46
0001BE5A                            
0001BE5A                            locret_1BD44:
0001BE5A 4E75                       		rts	
0001BE5C                            ; ===========================================================================
0001BE5C                            
0001BE5C                            loc_1BD46:
0001BE5C 1144 0030                  		move.b	d4,$30(a0)
0001BE60 2149 0032                  		move.l	a1,$32(a0)
0001BE64 7AFF                       		moveq	#-1,d5
0001BE66 4E75                       		rts	
0001BE68                            ; End of function sub_1BD30
0001BE68                            
0001BE68                            
0001BE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE68                            
0001BE68                            
0001BE68                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BE68 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BE6E 7800                       		moveq	#0,d4
0001BE70 3828 000C                  		move.w	$C(a0),d4
0001BE74 0644 0050                  		addi.w	#$50,d4
0001BE78 88FC 0018                  		divu.w	#$18,d4
0001BE7C C8FC 0080                  		mulu.w	#$80,d4
0001BE80 D3C4                       		adda.l	d4,a1
0001BE82 7800                       		moveq	#0,d4
0001BE84 3828 0008                  		move.w	8(a0),d4
0001BE88 0644 0020                  		addi.w	#$20,d4
0001BE8C 88FC 0018                  		divu.w	#$18,d4
0001BE90 D2C4                       		adda.w	d4,a1
0001BE92 1811                       		move.b	(a1),d4
0001BE94 6600                       		bne.s	Obj09_ChkCont
0001BE96 4A28 003A                  		tst.b	$3A(a0)
0001BE9A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BE9E 7800                       		moveq	#0,d4
0001BEA0 4E75                       		rts	
0001BEA2                            ; ===========================================================================
0001BEA2                            
0001BEA2                            Obj09_ChkCont:
0001BEA2 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BEA6 6600                       		bne.s	Obj09_Chk1Up
0001BEA8 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001BEAC 6600                       		bne.s	Obj09_GetCont
0001BEAE 14BC 0001                  		move.b	#1,(a2)
0001BEB2 2549 0004                  		move.l	a1,4(a2)
0001BEB6                            
0001BEB6                            Obj09_GetCont:
0001BEB6 4EB9 0000 9D50             		jsr	CollectRing
0001BEBC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BEC2 6500                       		bcs.s	Obj09_NoCont
0001BEC4 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BECA 6600                       		bne.s	Obj09_NoCont
0001BECC 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BED0 303C 00BF                  		move.w	#$BF,d0
0001BED4 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra continue sound
0001BEDA                            
0001BEDA                            Obj09_NoCont:
0001BEDA 7800                       		moveq	#0,d4
0001BEDC 4E75                       		rts	
0001BEDE                            ; ===========================================================================
0001BEDE                            
0001BEDE                            Obj09_Chk1Up:
0001BEDE 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BEE2 6600                       		bne.s	Obj09_ChkEmer
0001BEE4 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001BEE8 6600                       		bne.s	Obj09_Get1Up
0001BEEA 14BC 0003                  		move.b	#3,(a2)
0001BEEE 2549 0004                  		move.l	a1,4(a2)
0001BEF2                            
0001BEF2                            Obj09_Get1Up:
0001BEF2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BEF6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BEFA 303C 0088                  		move.w	#$88,d0
0001BEFE 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra life music
0001BF04 7800                       		moveq	#0,d4
0001BF06 4E75                       		rts	
0001BF08                            ; ===========================================================================
0001BF08                            
0001BF08                            Obj09_ChkEmer:
0001BF08 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BF0C 6500                       		bcs.s	Obj09_ChkGhost
0001BF0E 0C04 0040                  		cmpi.b	#$40,d4
0001BF12 6200                       		bhi.s	Obj09_ChkGhost
0001BF14 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001BF18 6600                       		bne.s	Obj09_GetEmer
0001BF1A 14BC 0005                  		move.b	#5,(a2)
0001BF1E 2549 0004                  		move.l	a1,4(a2)
0001BF22                            
0001BF22                            Obj09_GetEmer:
0001BF22 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BF28 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BF2A 0404 003B                  		subi.b	#$3B,d4
0001BF2E 7000                       		moveq	#0,d0
0001BF30 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BF34 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BF38 1584 0000                  		move.b	d4,(a2,d0.w)
0001BF3C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BF40                            
0001BF40                            Obj09_NoEmer:
0001BF40 303C 0093                  		move.w	#$93,d0
0001BF44 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play emerald music
0001BF4A 7800                       		moveq	#0,d4
0001BF4C 4E75                       		rts	
0001BF4E                            ; ===========================================================================
0001BF4E                            
0001BF4E                            Obj09_ChkGhost:
0001BF4E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BF52 6600                       		bne.s	Obj09_ChkGhostTag
0001BF54 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BF5A                            
0001BF5A                            Obj09_ChkGhostTag:
0001BF5A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BF5E 6600                       		bne.s	Obj09_NoGhost
0001BF60 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001BF66 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001BF68 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001BF6E                            
0001BF6E                            Obj09_NoGhost:
0001BF6E 78FF                       		moveq	#-1,d4
0001BF70 4E75                       		rts	
0001BF72                            ; ===========================================================================
0001BF72                            
0001BF72                            Obj09_MakeGhostSolid:
0001BF72 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001BF78 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001BF7A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BF80 723F                       		moveq	#$3F,d1
0001BF82                            
0001BF82                            Obj09_GhostLoop2:
0001BF82 743F                       		moveq	#$3F,d2
0001BF84                            
0001BF84                            Obj09_GhostLoop:
0001BF84 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001BF88 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001BF8A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001BF8E                            
0001BF8E                            Obj09_NoReplace:
0001BF8E 5249                       		addq.w	#1,a1
0001BF90 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001BF94 43E9 0040                  		lea	$40(a1),a1
0001BF98 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001BF9C                            
0001BF9C                            Obj09_GhostNotSolid:
0001BF9C 4228 003A                  		clr.b	$3A(a0)
0001BFA0 7800                       		moveq	#0,d4
0001BFA2 4E75                       		rts	
0001BFA4                            ; End of function Obj09_ChkItems
0001BFA4                            
0001BFA4                            
0001BFA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFA4                            
0001BFA4                            
0001BFA4                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001BFA4 1028 0030                  		move.b	$30(a0),d0
0001BFA8 6600                       		bne.s	Obj09_ChkBumper
0001BFAA 5328 0036                  		subq.b	#1,$36(a0)
0001BFAE 6A00                       		bpl.s	loc_1BEA0
0001BFB0 117C 0000 0036             		move.b	#0,$36(a0)
0001BFB6                            
0001BFB6                            loc_1BEA0:
0001BFB6 5328 0037                  		subq.b	#1,$37(a0)
0001BFBA 6A00                       		bpl.s	locret_1BEAC
0001BFBC 117C 0000 0037             		move.b	#0,$37(a0)
0001BFC2                            
0001BFC2                            locret_1BEAC:
0001BFC2 4E75                       		rts	
0001BFC4                            ; ===========================================================================
0001BFC4                            
0001BFC4                            Obj09_ChkBumper:
0001BFC4 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001BFC8 6600                       		bne.s	Obj09_GOAL
0001BFCA 2228 0032                  		move.l	$32(a0),d1
0001BFCE 0481 00FF 0001             		subi.l	#$FF0001,d1
0001BFD4 3401                       		move.w	d1,d2
0001BFD6 0241 007F                  		andi.w	#$7F,d1
0001BFDA C2FC 0018                  		mulu.w	#$18,d1
0001BFDE 0441 0014                  		subi.w	#$14,d1
0001BFE2 EE4A                       		lsr.w	#7,d2
0001BFE4 0242 007F                  		andi.w	#$7F,d2
0001BFE8 C4FC 0018                  		mulu.w	#$18,d2
0001BFEC 0442 0044                  		subi.w	#$44,d2
0001BFF0 9268 0008                  		sub.w	8(a0),d1
0001BFF4 9468 000C                  		sub.w	$C(a0),d2
0001BFF8 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001BFFE 4EB9 0000 29DA             		jsr	(CalcSine).l
0001C004 C3FC F900                  		muls.w	#-$700,d1
0001C008 E081                       		asr.l	#8,d1
0001C00A 3141 0010                  		move.w	d1,$10(a0)
0001C00E C1FC F900                  		muls.w	#-$700,d0
0001C012 E080                       		asr.l	#8,d0
0001C014 3140 0012                  		move.w	d0,$12(a0)
0001C018 08E8 0001 0022             		bset	#1,$22(a0)
0001C01E 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001C022 6600                       		bne.s	Obj09_BumpSnd
0001C024 14BC 0002                  		move.b	#2,(a2)
0001C028 2028 0032                  		move.l	$32(a0),d0
0001C02C 5380                       		subq.l	#1,d0
0001C02E 2540 0004                  		move.l	d0,4(a2)
0001C032                            
0001C032                            Obj09_BumpSnd:
0001C032 303C 00B4                  		move.w	#$B4,d0
0001C036 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C03C                            ; ===========================================================================
0001C03C                            
0001C03C                            Obj09_GOAL:
0001C03C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C040 6600                       		bne.s	Obj09_UPblock
0001C042 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C046 303C 00A8                  		move.w	#$A8,d0		; change item
0001C04A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C050 4E75                       		rts	
0001C052                            ; ===========================================================================
0001C052                            
0001C052                            Obj09_UPblock:
0001C052 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C056 6600                       		bne.s	Obj09_DOWNblock
0001C058 4A28 0036                  		tst.b	$36(a0)
0001C05C 6600 0000                  		bne.w	Obj09_NoGlass
0001C060 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C066 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C06C 6700                       		beq.s	Obj09_UPsnd
0001C06E E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C072 2268 0032                  		movea.l	$32(a0),a1
0001C076 5389                       		subq.l	#1,a1
0001C078 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C07C                            
0001C07C                            Obj09_UPsnd:
0001C07C 303C 00A9                  		move.w	#$A9,d0
0001C080 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C086                            ; ===========================================================================
0001C086                            
0001C086                            Obj09_DOWNblock:
0001C086 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C08A 6600                       		bne.s	Obj09_Rblock
0001C08C 4A28 0036                  		tst.b	$36(a0)
0001C090 6600 0000                  		bne.w	Obj09_NoGlass
0001C094 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C09A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C0A0 6600                       		bne.s	Obj09_DOWNsnd
0001C0A2 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C0A6 2268 0032                  		movea.l	$32(a0),a1
0001C0AA 5389                       		subq.l	#1,a1
0001C0AC 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C0B0                            
0001C0B0                            Obj09_DOWNsnd:
0001C0B0 303C 00A9                  		move.w	#$A9,d0
0001C0B4 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C0BA                            ; ===========================================================================
0001C0BA                            
0001C0BA                            Obj09_Rblock:
0001C0BA 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C0BE 6600                       		bne.s	Obj09_ChkGlass
0001C0C0 4A28 0037                  		tst.b	$37(a0)
0001C0C4 6600 0000                  		bne.w	Obj09_NoGlass
0001C0C8 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C0CE 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001C0D2 6600                       		bne.s	Obj09_RevStage
0001C0D4 14BC 0004                  		move.b	#4,(a2)
0001C0D8 2028 0032                  		move.l	$32(a0),d0
0001C0DC 5380                       		subq.l	#1,d0
0001C0DE 2540 0004                  		move.l	d0,4(a2)
0001C0E2                            
0001C0E2                            Obj09_RevStage:
0001C0E2 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C0E6 303C 00A9                  		move.w	#$A9,d0
0001C0EA 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play sound
0001C0F0                            ; ===========================================================================
0001C0F0                            
0001C0F0                            Obj09_ChkGlass:
0001C0F0 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C0F4 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C0F6 0C00 002E                  		cmpi.b	#$2E,d0
0001C0FA 6700                       		beq.s	Obj09_Glass
0001C0FC 0C00 002F                  		cmpi.b	#$2F,d0
0001C100 6700                       		beq.s	Obj09_Glass
0001C102 0C00 0030                  		cmpi.b	#$30,d0
0001C106 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C108                            
0001C108                            Obj09_Glass:
0001C108 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001C10C 6600                       		bne.s	Obj09_GlassSnd
0001C10E 14BC 0006                  		move.b	#6,(a2)
0001C112 2268 0032                  		movea.l	$32(a0),a1
0001C116 5389                       		subq.l	#1,a1
0001C118 2549 0004                  		move.l	a1,4(a2)
0001C11C 1011                       		move.b	(a1),d0
0001C11E 5200                       		addq.b	#1,d0		; change glass type when touched
0001C120 0C00 0030                  		cmpi.b	#$30,d0
0001C124 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C126 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C128                            
0001C128                            Obj09_GlassUpdate:
0001C128 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C12C                            
0001C12C                            Obj09_GlassSnd:
0001C12C 303C 00BA                  		move.w	#$BA,d0
0001C130 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C136                            ; ===========================================================================
0001C136                            
0001C136                            Obj09_NoGlass:
0001C136 4E75                       		rts	
0001C138                            ; End of function Obj09_ChkItems2
0001C138                            
0001C138                            ; ===========================================================================
0001C138                            ; ---------------------------------------------------------------------------
0001C138                            ; Object 10 - blank
0001C138                            ; ---------------------------------------------------------------------------
0001C138                            
0001C138                            Obj10:					; XREF: Obj_Index
0001C138 4E75                       		rts	
0001C13A                            ; ---------------------------------------------------------------------------
0001C13A                            ; Subroutine to	animate	level graphics
0001C13A                            ; ---------------------------------------------------------------------------
0001C13A                            
0001C13A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C13A                            
0001C13A                            
0001C13A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C13A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C13E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C140 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C146 6100 0000                  		bsr.w	AniArt_GiantRing
0001C14A 7000                       		moveq	#0,d0
0001C14C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C150 D040                       		add.w	d0,d0
0001C152 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C156 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C15A                            ; ===========================================================================
0001C15A                            
0001C15A                            AniArt_Pause:
0001C15A 4E75                       		rts	
0001C15C                            ; End of function AniArt_Load
0001C15C                            
0001C15C                            ; ===========================================================================
0001C15C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C160 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C164 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C168 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C16A                            ; ===========================================================================
0001C16A                            ; ---------------------------------------------------------------------------
0001C16A                            ; Animated pattern routine - Green Hill
0001C16A                            ; ---------------------------------------------------------------------------
0001C16A                            
0001C16A                            AniArt_GHZ:				; XREF: AniArt_Index
0001C16A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C16E 6A00                       		bpl.s	loc_1C08A
0001C170 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C176 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C17C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C180 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C184 0240 0001                  		andi.w	#1,d0
0001C188 6700                       		beq.s	loc_1C078
0001C18A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C18E                            
0001C18E                            loc_1C078:
0001C18E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C198 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C19C 6000 0000                  		bra.w	LoadTiles
0001C1A0                            ; ===========================================================================
0001C1A0                            
0001C1A0                            loc_1C08A:
0001C1A0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C1A4 6A00                       		bpl.s	loc_1C0C0
0001C1A6 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C1AC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C1B2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C1B6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C1BA 0240 0001                  		andi.w	#1,d0
0001C1BE 6700                       		beq.s	loc_1C0AE
0001C1C0 43E9 0200                  		lea	$200(a1),a1
0001C1C4                            
0001C1C4                            loc_1C0AE:
0001C1C4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C1CE 323C 000F                  		move.w	#$F,d1
0001C1D2 6000 0000                  		bra.w	LoadTiles
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            loc_1C0C0:
0001C1D6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C1DA 6A00                       		bpl.s	locret_1C10C
0001C1DC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C1E2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C1E6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C1EA 0240 0003                  		andi.w	#3,d0
0001C1EE 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C1F2 0800 0000                  		btst	#0,d0
0001C1F6 6600                       		bne.s	loc_1C0E8
0001C1F8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C1FE                            
0001C1FE                            loc_1C0E8:
0001C1FE EF48                       		lsl.w	#7,d0
0001C200 3200                       		move.w	d0,d1
0001C202 D040                       		add.w	d0,d0
0001C204 D041                       		add.w	d1,d0
0001C206 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C210 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C216 43F1 0000                  		lea	(a1,d0.w),a1
0001C21A 323C 000B                  		move.w	#$B,d1
0001C21E 6100 0000                  		bsr.w	LoadTiles
0001C222                            
0001C222                            locret_1C10C:
0001C222 4E75                       		rts	
0001C224                            ; ===========================================================================
0001C224 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C228                            ; ===========================================================================
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            ; Animated pattern routine - Marble
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            
0001C228                            AniArt_MZ:				; XREF: AniArt_Index
0001C228 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C22C 6A00                       		bpl.s	loc_1C150
0001C22E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C234 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C23A 7000                       		moveq	#0,d0
0001C23C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C240 5200                       		addq.b	#1,d0
0001C242 0C00 0003                  		cmpi.b	#3,d0
0001C246 6600                       		bne.s	loc_1C134
0001C248 7000                       		moveq	#0,d0
0001C24A                            
0001C24A                            loc_1C134:
0001C24A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C24E C0FC 0100                  		mulu.w	#$100,d0
0001C252 D2C0                       		adda.w	d0,a1
0001C254 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C25E 323C 0007                  		move.w	#7,d1
0001C262 6100 0000                  		bsr.w	LoadTiles
0001C266                            
0001C266                            loc_1C150:
0001C266 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C26A 6A00                       		bpl.s	loc_1C1AE
0001C26C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C272 7000                       		moveq	#0,d0
0001C274 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C278 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C27E EE58                       		ror.w	#7,d0
0001C280 D8C0                       		adda.w	d0,a4
0001C282 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C28C 7600                       		moveq	#0,d3
0001C28E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C292 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C296 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C29A 343C 0003                  		move.w	#3,d2
0001C29E                            
0001C29E                            loc_1C188:
0001C29E 3003                       		move.w	d3,d0
0001C2A0 D040                       		add.w	d0,d0
0001C2A2 0240 001E                  		andi.w	#$1E,d0
0001C2A6 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C2AC 3033 0000                  		move.w	(a3,d0.w),d0
0001C2B0 47F3 0000                  		lea	(a3,d0.w),a3
0001C2B4 224C                       		movea.l	a4,a1
0001C2B6 323C 001F                  		move.w	#$1F,d1
0001C2BA 4E93                       		jsr	(a3)
0001C2BC 5843                       		addq.w	#4,d3
0001C2BE 51CA FFDE                  		dbf	d2,loc_1C188
0001C2C2 4E75                       		rts	
0001C2C4                            ; ===========================================================================
0001C2C4                            
0001C2C4                            loc_1C1AE:
0001C2C4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C2C8 6A00 0000                  		bpl.w	locret_1C1EA
0001C2CC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C2D2 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C2D8 7000                       		moveq	#0,d0
0001C2DA 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C2DE 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C2E2 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C2E8 C0FC 00C0                  		mulu.w	#$C0,d0
0001C2EC D2C0                       		adda.w	d0,a1
0001C2EE 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C2F8 323C 0005                  		move.w	#5,d1
0001C2FC 6000 0000                  		bra.w	LoadTiles
0001C300                            ; ===========================================================================
0001C300                            
0001C300                            locret_1C1EA:
0001C300 4E75                       		rts	
0001C302                            ; ===========================================================================
0001C302                            ; ---------------------------------------------------------------------------
0001C302                            ; Animated pattern routine - Scrap Brain
0001C302                            ; ---------------------------------------------------------------------------
0001C302                            
0001C302                            AniArt_SBZ:				; XREF: AniArt_Index
0001C302 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C306 6700                       		beq.s	loc_1C1F8
0001C308 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C30C 6000                       		bra.s	loc_1C250
0001C30E                            ; ===========================================================================
0001C30E                            
0001C30E                            loc_1C1F8:
0001C30E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C312 6A00                       		bpl.s	loc_1C250
0001C314 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C31A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C320 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C32A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C32E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C332 0240 0007                  		andi.w	#7,d0
0001C336 6700                       		beq.s	loc_1C234
0001C338 5340                       		subq.w	#1,d0
0001C33A C0FC 0180                  		mulu.w	#$180,d0
0001C33E 43F1 0000                  		lea	(a1,d0.w),a1
0001C342 323C 000B                  		move.w	#$B,d1
0001C346 6000 0000                  		bra.w	LoadTiles
0001C34A                            ; ===========================================================================
0001C34A                            
0001C34A                            loc_1C234:
0001C34A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C350                            
0001C350                            loc_1C23A:
0001C350 323C 0005                  		move.w	#5,d1
0001C354 6100 0000                  		bsr.w	LoadTiles
0001C358 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C35E 323C 0005                  		move.w	#5,d1
0001C362 6000 0000                  		bra.w	LoadTiles
0001C366                            ; ===========================================================================
0001C366                            
0001C366                            loc_1C250:
0001C366 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C36A 6700                       		beq.s	loc_1C25C
0001C36C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C370 6000                       		bra.s	locret_1C2A0
0001C372                            ; ===========================================================================
0001C372                            
0001C372                            loc_1C25C:
0001C372 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C376 6A00                       		bpl.s	locret_1C2A0
0001C378 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C37E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C384 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C38E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C392 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C396 0240 0007                  		andi.w	#7,d0
0001C39A 6700                       		beq.s	loc_1C298
0001C39C 5340                       		subq.w	#1,d0
0001C39E C0FC 0180                  		mulu.w	#$180,d0
0001C3A2 43F1 0000                  		lea	(a1,d0.w),a1
0001C3A6 323C 000B                  		move.w	#$B,d1
0001C3AA 6000 0000                  		bra.w	LoadTiles
0001C3AE                            ; ===========================================================================
0001C3AE                            
0001C3AE                            loc_1C298:
0001C3AE 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C3B4 609A                       		bra.s	loc_1C23A
0001C3B6                            ; ===========================================================================
0001C3B6                            
0001C3B6                            locret_1C2A0:
0001C3B6 4E75                       		rts	
0001C3B8                            ; ===========================================================================
0001C3B8                            ; ---------------------------------------------------------------------------
0001C3B8                            ; Animated pattern routine - ending sequence
0001C3B8                            ; ---------------------------------------------------------------------------
0001C3B8                            
0001C3B8                            AniArt_Ending:				; XREF: AniArt_Index
0001C3B8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C3BC 6A00                       		bpl.s	loc_1C2F4
0001C3BE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C3C4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C3CA 45F8 9400                  		lea	($FFFF9400).w,a2
0001C3CE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C3D2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C3D6 0240 0001                  		andi.w	#1,d0
0001C3DA 6700                       		beq.s	loc_1C2CE
0001C3DC 43E9 0200                  		lea	$200(a1),a1
0001C3E0 45EA 0200                  		lea	$200(a2),a2
0001C3E4                            
0001C3E4                            loc_1C2CE:
0001C3E4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C3EE 323C 000F                  		move.w	#$F,d1
0001C3F2 6100 0000                  		bsr.w	LoadTiles
0001C3F6 224A                       		movea.l	a2,a1
0001C3F8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C402 323C 000F                  		move.w	#$F,d1
0001C406 6000 0000                  		bra.w	LoadTiles
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            loc_1C2F4:
0001C40A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C40E 6A00                       		bpl.s	loc_1C33C
0001C410 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C416 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C41A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C41E 0240 0007                  		andi.w	#7,d0
0001C422 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C426 EF48                       		lsl.w	#7,d0
0001C428 3200                       		move.w	d0,d1
0001C42A D040                       		add.w	d0,d0
0001C42C D041                       		add.w	d1,d0
0001C42E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C438 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C43E 43F1 0000                  		lea	(a1,d0.w),a1
0001C442 323C 000B                  		move.w	#$B,d1
0001C446 6000 0000                  		bra.w	LoadTiles
0001C44A                            ; ===========================================================================
0001C44A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            loc_1C33C:
0001C452 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C456 6A00                       		bpl.s	loc_1C37A
0001C458 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C45E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C462 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C466 0240 0003                  		andi.w	#3,d0
0001C46A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C46E E148                       		lsl.w	#8,d0
0001C470 D040                       		add.w	d0,d0
0001C472 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C47C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C480 43F1 0000                  		lea	(a1,d0.w),a1
0001C484 323C 000F                  		move.w	#$F,d1
0001C488 6000 0000                  		bra.w	LoadTiles
0001C48C                            ; ===========================================================================
0001C48C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C490                            ; ===========================================================================
0001C490                            
0001C490                            loc_1C37A:
0001C490 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C494 6A00                       		bpl.s	locret_1C3B4
0001C496 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C49C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C4A0 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C4A4 0240 0003                  		andi.w	#3,d0
0001C4A8 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C4AC E148                       		lsl.w	#8,d0
0001C4AE D040                       		add.w	d0,d0
0001C4B0 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C4BA 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C4BE 43F1 0000                  		lea	(a1,d0.w),a1
0001C4C2 323C 000F                  		move.w	#$F,d1
0001C4C6 6000 0000                  		bra.w	LoadTiles
0001C4CA                            ; ===========================================================================
0001C4CA                            
0001C4CA                            locret_1C3B4:
0001C4CA 4E75                       		rts	
0001C4CC                            ; ===========================================================================
0001C4CC                            
0001C4CC                            AniArt_none:				; XREF: AniArt_Index
0001C4CC 4E75                       		rts	
0001C4CE                            
0001C4CE                            ; ---------------------------------------------------------------------------
0001C4CE                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C4CE                            ; ---------------------------------------------------------------------------
0001C4CE                            
0001C4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4CE                            
0001C4CE                            
0001C4CE                            LoadTiles:
0001C4CE 2C99                       		move.l	(a1)+,(a6)
0001C4D0 2C99                       		move.l	(a1)+,(a6)
0001C4D2 2C99                       		move.l	(a1)+,(a6)
0001C4D4 2C99                       		move.l	(a1)+,(a6)
0001C4D6 2C99                       		move.l	(a1)+,(a6)
0001C4D8 2C99                       		move.l	(a1)+,(a6)
0001C4DA 2C99                       		move.l	(a1)+,(a6)
0001C4DC 2C99                       		move.l	(a1)+,(a6)
0001C4DE 51C9 FFEE                  		dbf	d1,LoadTiles
0001C4E2 4E75                       		rts	
0001C4E4                            ; End of function LoadTiles
0001C4E4                            
0001C4E4                            ; ===========================================================================
0001C4E4                            ; ---------------------------------------------------------------------------
0001C4E4                            ; Animated pattern routine - more Marble Zone
0001C4E4                            ; ---------------------------------------------------------------------------
0001C4E4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C4E8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C4EC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C4F0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C4F4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C4F8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C4FC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C500 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C504                            ; ===========================================================================
0001C504                            
0001C504                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C504 2C91                       		move.l	(a1),(a6)
0001C506 43E9 0010                  		lea	$10(a1),a1
0001C50A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C50E 4E75                       		rts	
0001C510                            ; ===========================================================================
0001C510                            
0001C510                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C510 2029 0002                  		move.l	2(a1),d0
0001C514 1029 0001                  		move.b	1(a1),d0
0001C518 E098                       		ror.l	#8,d0
0001C51A 2C80                       		move.l	d0,(a6)
0001C51C 43E9 0010                  		lea	$10(a1),a1
0001C520 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C524 4E75                       		rts	
0001C526                            ; ===========================================================================
0001C526                            
0001C526                            loc_1C410:				; XREF: AniArt_MZextra
0001C526 2CA9 0002                  		move.l	2(a1),(a6)
0001C52A 43E9 0010                  		lea	$10(a1),a1
0001C52E 51C9 FFF6                  		dbf	d1,loc_1C410
0001C532 4E75                       		rts	
0001C534                            ; ===========================================================================
0001C534                            
0001C534                            loc_1C41E:				; XREF: AniArt_MZextra
0001C534 2029 0004                  		move.l	4(a1),d0
0001C538 1029 0003                  		move.b	3(a1),d0
0001C53C E098                       		ror.l	#8,d0
0001C53E 2C80                       		move.l	d0,(a6)
0001C540 43E9 0010                  		lea	$10(a1),a1
0001C544 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C548 4E75                       		rts	
0001C54A                            ; ===========================================================================
0001C54A                            
0001C54A                            loc_1C434:				; XREF: AniArt_MZextra
0001C54A 2CA9 0004                  		move.l	4(a1),(a6)
0001C54E 43E9 0010                  		lea	$10(a1),a1
0001C552 51C9 FFF6                  		dbf	d1,loc_1C434
0001C556 4E75                       		rts	
0001C558                            ; ===========================================================================
0001C558                            
0001C558                            loc_1C442:				; XREF: AniArt_MZextra
0001C558 2029 0006                  		move.l	6(a1),d0
0001C55C 1029 0005                  		move.b	5(a1),d0
0001C560 E098                       		ror.l	#8,d0
0001C562 2C80                       		move.l	d0,(a6)
0001C564 43E9 0010                  		lea	$10(a1),a1
0001C568 51C9 FFEE                  		dbf	d1,loc_1C442
0001C56C 4E75                       		rts	
0001C56E                            ; ===========================================================================
0001C56E                            
0001C56E                            loc_1C458:				; XREF: AniArt_MZextra
0001C56E 2CA9 0006                  		move.l	6(a1),(a6)
0001C572 43E9 0010                  		lea	$10(a1),a1
0001C576 51C9 FFF6                  		dbf	d1,loc_1C458
0001C57A 4E75                       		rts	
0001C57C                            ; ===========================================================================
0001C57C                            
0001C57C                            loc_1C466:				; XREF: AniArt_MZextra
0001C57C 2029 0008                  		move.l	8(a1),d0
0001C580 1029 0007                  		move.b	7(a1),d0
0001C584 E098                       		ror.l	#8,d0
0001C586 2C80                       		move.l	d0,(a6)
0001C588 43E9 0010                  		lea	$10(a1),a1
0001C58C 51C9 FFEE                  		dbf	d1,loc_1C466
0001C590 4E75                       		rts	
0001C592                            ; ===========================================================================
0001C592                            
0001C592                            loc_1C47C:				; XREF: AniArt_MZextra
0001C592 2CA9 0008                  		move.l	8(a1),(a6)
0001C596 43E9 0010                  		lea	$10(a1),a1
0001C59A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C59E 4E75                       		rts	
0001C5A0                            ; ===========================================================================
0001C5A0                            
0001C5A0                            loc_1C48A:				; XREF: AniArt_MZextra
0001C5A0 2029 000A                  		move.l	$A(a1),d0
0001C5A4 1029 0009                  		move.b	9(a1),d0
0001C5A8 E098                       		ror.l	#8,d0
0001C5AA 2C80                       		move.l	d0,(a6)
0001C5AC 43E9 0010                  		lea	$10(a1),a1
0001C5B0 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C5B4 4E75                       		rts	
0001C5B6                            ; ===========================================================================
0001C5B6                            
0001C5B6                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C5B6 2CA9 000A                  		move.l	$A(a1),(a6)
0001C5BA 43E9 0010                  		lea	$10(a1),a1
0001C5BE 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C5C2 4E75                       		rts	
0001C5C4                            ; ===========================================================================
0001C5C4                            
0001C5C4                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C5C4 2029 000C                  		move.l	$C(a1),d0
0001C5C8 1029 000B                  		move.b	$B(a1),d0
0001C5CC E098                       		ror.l	#8,d0
0001C5CE 2C80                       		move.l	d0,(a6)
0001C5D0 43E9 0010                  		lea	$10(a1),a1
0001C5D4 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C5D8 4E75                       		rts	
0001C5DA                            ; ===========================================================================
0001C5DA                            
0001C5DA                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C5DA 2CA9 000C                  		move.l	$C(a1),(a6)
0001C5DE 43E9 0010                  		lea	$10(a1),a1
0001C5E2 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C5E6 4E75                       		rts	
0001C5E8                            ; ===========================================================================
0001C5E8                            
0001C5E8                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C5E8 2029 000C                  		move.l	$C(a1),d0
0001C5EC E198                       		rol.l	#8,d0
0001C5EE 1011                       		move.b	0(a1),d0
0001C5F0 2C80                       		move.l	d0,(a6)
0001C5F2 43E9 0010                  		lea	$10(a1),a1
0001C5F6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C5FA 4E75                       		rts	
0001C5FC                            ; ===========================================================================
0001C5FC                            
0001C5FC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C5FC 3CA9 000E                  		move.w	$E(a1),(a6)
0001C600 3C91                       		move.w	0(a1),(a6)
0001C602 43E9 0010                  		lea	$10(a1),a1
0001C606 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C60A 4E75                       		rts	
0001C60C                            ; ===========================================================================
0001C60C                            
0001C60C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C60C 2011                       		move.l	0(a1),d0
0001C60E 1029 000F                  		move.b	$F(a1),d0
0001C612 E098                       		ror.l	#8,d0
0001C614 2C80                       		move.l	d0,(a6)
0001C616 43E9 0010                  		lea	$10(a1),a1
0001C61A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C61E 4E75                       		rts	
0001C620                            
0001C620                            ; ---------------------------------------------------------------------------
0001C620                            ; Animated pattern routine - giant ring
0001C620                            ; ---------------------------------------------------------------------------
0001C620                            
0001C620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C620                            
0001C620                            
0001C620                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C620 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C624 6600                       		bne.s	loc_1C518
0001C626 4E75                       		rts	
0001C628                            ; ===========================================================================
0001C628                            
0001C628                            loc_1C518:
0001C628 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C62E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C634 7000                       		moveq	#0,d0
0001C636 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C63A 43F1 0000                  		lea	(a1,d0.w),a1
0001C63E 0640 8000                  		addi.w	#$8000,d0
0001C642 E588                       		lsl.l	#2,d0
0001C644 E448                       		lsr.w	#2,d0
0001C646 0040 4000                  		ori.w	#$4000,d0
0001C64A 4840                       		swap	d0
0001C64C 2D40 0004                  		move.l	d0,4(a6)
0001C650 323C 000D                  		move.w	#$D,d1
0001C654 6000 FE78                  		bra.w	LoadTiles
0001C658                            ; End of function AniArt_GiantRing
0001C658                            
0001C658                            ; ===========================================================================
0001C658                            ; ---------------------------------------------------------------------------
0001C658                            ; Object 21 - SCORE, TIME, RINGS
0001C658                            ; ---------------------------------------------------------------------------
0001C658                            
0001C658                            Obj21:					; XREF: Obj_Index
0001C658 7000                       		moveq	#0,d0
0001C65A 1028 0024                  		move.b	$24(a0),d0
0001C65E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C662 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C666                            ; ===========================================================================
0001C666 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C668 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C66A                            ; ===========================================================================
0001C66A                            
0001C66A                            Obj21_Main:				; XREF: Obj21_Main
0001C66A 5428 0024                  		addq.b	#2,$24(a0)
0001C66E 317C 0090 0008             		move.w	#$90,8(a0)
0001C674 317C 0108 000A             		move.w	#$108,$A(a0)
0001C67A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C682 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C688 117C 0000 0001             		move.b	#0,1(a0)
0001C68E 117C 0000 0018             		move.b	#0,$18(a0)
0001C694                            
0001C694                            Obj21_Flash:				; XREF: Obj21_Main
0001C694 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C698 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C69A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C69E 4EF9 0000 D73C             		jmp	DisplaySprite
0001C6A4                            ; ===========================================================================
0001C6A4                            
0001C6A4                            Obj21_Flash2:
0001C6A4 7000                       		moveq	#0,d0
0001C6A6 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C6AC 6600                       		bne.s	Obj21_Display
0001C6AE 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C6B0 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C6B6 6600                       		bne.s	Obj21_Display	; if not, branch
0001C6B8 5440                       		addq.w	#2,d0		; make time counter flash red
0001C6BA                            
0001C6BA                            Obj21_Display:
0001C6BA 1140 001A                  		move.b	d0,$1A(a0)
0001C6BE 4EF9 0000 D73C             		jmp	DisplaySprite
0001C6C4                            ; ===========================================================================
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4                            ; Sprite mappings - SCORE, TIME, RINGS
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4                            Map_obj21:
0001C6C4                            	include "_maps\obj21.asm"
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4                            ; Sprite mappings - SCORE, TIME, RINGS
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C6C8 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C6CC 0A                         byte_1C5BC:	dc.b $A
0001C6CD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C6D2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C6D7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C6DC 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C6E1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C6E6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C6EB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C6F0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C6F5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C6FA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C6FF 00                         		dc.b 0
0001C700 0A                         byte_1C5F0:	dc.b $A
0001C701 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C706 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C70B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C710 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C715 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C71A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C71F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C724 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C729 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C72E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C733 00                         		dc.b 0
0001C734 0A                         byte_1C624:	dc.b $A
0001C735 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C73A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C73F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C744 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C749 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C74E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C753 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C758 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C75D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C762 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C767 00                         		dc.b 0
0001C768 0A                         byte_1C658:	dc.b $A
0001C769 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C76E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C773 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C778 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C77D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C782 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C787 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C78C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C791 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C796 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C79C 00                         		even
0001C79C 00                         		even
0001C79C                            
0001C79C                            ; ---------------------------------------------------------------------------
0001C79C                            ; Add points subroutine
0001C79C                            ; ---------------------------------------------------------------------------
0001C79C                            
0001C79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C79C                            
0001C79C                            
0001C79C                            AddPoints:
0001C79C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C7A2 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C7A6 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C7AA D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C7AC 223C 000F 423F             		move.l	#999999,d1
0001C7B2 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C7B4 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C7B8 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C7BA 2481                       		move.l	d1,(a2)
0001C7BC                            
0001C7BC                            loc_1C6AC:
0001C7BC 2013                       		move.l	(a3),d0
0001C7BE B092                       		cmp.l	(a2),d0
0001C7C0 6500 0000                  		bcs.w	locret_1C6B6
0001C7C4 2480                       		move.l	d0,(a2)
0001C7C6                            
0001C7C6                            locret_1C6B6:
0001C7C6 4E75                       		rts	
0001C7C8                            ; End of function AddPoints
0001C7C8                            
0001C7C8                            ; ---------------------------------------------------------------------------
0001C7C8                            ; Subroutine to	update the HUD
0001C7C8                            ; ---------------------------------------------------------------------------
0001C7C8                            
0001C7C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7C8                            
0001C7C8                            
0001C7C8                            HudUpdate:
0001C7C8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C7CC 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C7D0 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C7D4 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C7D6 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C7DA 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C7E0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C7E4 6100 0000                  		bsr.w	Hud_Score
0001C7E8                            
0001C7E8                            Hud_ChkRings:
0001C7E8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C7EC 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C7EE 6A00                       		bpl.s	loc_1C6E4
0001C7F0 6100 0000                  		bsr.w	Hud_LoadZero
0001C7F4                            
0001C7F4                            loc_1C6E4:
0001C7F4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C7F8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C7FE 7200                       		moveq	#0,d1
0001C800 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C804 6100 0000                  		bsr.w	Hud_Rings
0001C808                            
0001C808                            Hud_ChkTime:
0001C808 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C80C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C80E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C812 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C814 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C818 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C81E 6700                       		beq.s	TimeOver	; if yes, branch
0001C820 5221                       		addq.b	#1,-(a1)
0001C822 0C11 003C                  		cmpi.b	#60,(a1)
0001C826 6500                       		bcs.s	Hud_ChkLives
0001C828 12BC 0000                  		move.b	#0,(a1)
0001C82C 5221                       		addq.b	#1,-(a1)
0001C82E 0C11 003C                  		cmpi.b	#60,(a1)
0001C832 6500                       		bcs.s	loc_1C734
0001C834 12BC 0000                  		move.b	#0,(a1)
0001C838 5221                       		addq.b	#1,-(a1)
0001C83A 0C11 0009                  		cmpi.b	#9,(a1)
0001C83E 6500                       		bcs.s	loc_1C734
0001C840 12BC 0009                  		move.b	#9,(a1)
0001C844                            
0001C844                            loc_1C734:
0001C844 203C 5E40 0003             		move.l	#$5E400003,d0
0001C84A 7200                       		moveq	#0,d1
0001C84C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C850 6100 0000                  		bsr.w	Hud_Mins
0001C854 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C85A 7200                       		moveq	#0,d1
0001C85C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C860 6100 0000                  		bsr.w	Hud_Secs
0001C864                            
0001C864                            Hud_ChkLives:
0001C864 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C868 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C86A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C86E 6100 0000                  		bsr.w	Hud_Lives
0001C872                            
0001C872                            Hud_ChkBonus:
0001C872 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C876 6700                       		beq.s	Hud_End		; if not, branch
0001C878 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C87C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C886 7200                       		moveq	#0,d1
0001C888 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C88C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C890 7200                       		moveq	#0,d1
0001C892 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C896 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C89A                            
0001C89A                            Hud_End:
0001C89A 4E75                       		rts	
0001C89C                            ; ===========================================================================
0001C89C                            
0001C89C                            TimeOver:				; XREF: Hud_ChkTime
0001C89C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C8A0 41F8 D000                  		lea	($FFFFD000).w,a0
0001C8A4 2448                       		movea.l	a0,a2
0001C8A6 6100 E90C                  		bsr.w	KillSonic
0001C8AA 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C8B0 4E75                       		rts	
0001C8B2                            ; ===========================================================================
0001C8B2                            
0001C8B2                            HudDebug:				; XREF: HudUpdate
0001C8B2 6100 0000                  		bsr.w	HudDb_XY
0001C8B6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C8BA 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C8BC 6A00                       		bpl.s	HudDb_Rings
0001C8BE 6100 0000                  		bsr.w	Hud_LoadZero
0001C8C2                            
0001C8C2                            HudDb_Rings:
0001C8C2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C8C6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C8CC 7200                       		moveq	#0,d1
0001C8CE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C8D2 6100 0000                  		bsr.w	Hud_Rings
0001C8D6                            
0001C8D6                            HudDb_ObjCount:
0001C8D6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C8DC 7200                       		moveq	#0,d1
0001C8DE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C8E2 6100 0000                  		bsr.w	Hud_Secs
0001C8E6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C8EA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C8EC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C8F0 6100 0000                  		bsr.w	Hud_Lives
0001C8F4                            
0001C8F4                            HudDb_ChkBonus:
0001C8F4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C8F8 6700                       		beq.s	HudDb_End	; if not, branch
0001C8FA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C8FE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C908 7200                       		moveq	#0,d1
0001C90A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C90E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C912 7200                       		moveq	#0,d1
0001C914 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C918 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C91C                            
0001C91C                            HudDb_End:
0001C91C 4E75                       		rts	
0001C91E                            ; End of function HudUpdate
0001C91E                            
0001C91E                            ; ---------------------------------------------------------------------------
0001C91E                            ; Subroutine to	load "0" on the	HUD
0001C91E                            ; ---------------------------------------------------------------------------
0001C91E                            
0001C91E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C91E                            
0001C91E                            
0001C91E                            Hud_LoadZero:				; XREF: HudUpdate
0001C91E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C928 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C92C 343C 0002                  		move.w	#2,d2
0001C930 6000                       		bra.s	loc_1C83E
0001C932                            ; End of function Hud_LoadZero
0001C932                            
0001C932                            ; ---------------------------------------------------------------------------
0001C932                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C932                            ; ---------------------------------------------------------------------------
0001C932                            
0001C932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C932                            
0001C932                            
0001C932                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C932 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C938 6100 0000                  		bsr.w	Hud_Lives
0001C93C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C946 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C94A 343C 000E                  		move.w	#$E,d2
0001C94E                            
0001C94E                            loc_1C83E:				; XREF: Hud_LoadZero
0001C94E 43FA 0000                  		lea	Art_Hud(pc),a1
0001C952                            
0001C952                            loc_1C842:
0001C952 323C 000F                  		move.w	#$F,d1
0001C956 101A                       		move.b	(a2)+,d0
0001C958 6B00                       		bmi.s	loc_1C85E
0001C95A 4880                       		ext.w	d0
0001C95C EB48                       		lsl.w	#5,d0
0001C95E 47F1 0000                  		lea	(a1,d0.w),a3
0001C962                            
0001C962                            loc_1C852:
0001C962 2C9B                       		move.l	(a3)+,(a6)
0001C964 51C9 FFFC                  		dbf	d1,loc_1C852
0001C968                            
0001C968                            loc_1C858:
0001C968 51CA FFE8                  		dbf	d2,loc_1C842
0001C96C                            
0001C96C 4E75                       		rts	
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            loc_1C85E:
0001C96E 2CBC 0000 0000             		move.l	#0,(a6)
0001C974 51C9 FFF8                  		dbf	d1,loc_1C85E
0001C978                            
0001C978 60EE                       		bra.s	loc_1C858
0001C97A                            ; End of function Hud_Base
0001C97A                            
0001C97A                            ; ===========================================================================
0001C97A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001C986 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001C98A                            ; ---------------------------------------------------------------------------
0001C98A                            ; Subroutine to	load debug mode	numbers	patterns
0001C98A                            ; ---------------------------------------------------------------------------
0001C98A                            
0001C98A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C98A                            
0001C98A                            
0001C98A                            HudDb_XY:				; XREF: HudDebug
0001C98A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001C994 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001C998 4841                       		swap	d1
0001C99A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001C99E 6100                       		bsr.s	HudDb_XY2
0001C9A0 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001C9A4 4841                       		swap	d1
0001C9A6 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001C9AA                            ; End of function HudDb_XY
0001C9AA                            
0001C9AA                            
0001C9AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9AA                            
0001C9AA                            
0001C9AA                            HudDb_XY2:
0001C9AA 7C07                       		moveq	#7,d6
0001C9AC 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001C9B2                            
0001C9B2                            HudDb_XYLoop:
0001C9B2 E959                       		rol.w	#4,d1
0001C9B4 3401                       		move.w	d1,d2
0001C9B6 0242 000F                  		andi.w	#$F,d2
0001C9BA 0C42 000A                  		cmpi.w	#$A,d2
0001C9BE 6500                       		bcs.s	loc_1C8B2
0001C9C0 5E42                       		addq.w	#7,d2
0001C9C2                            
0001C9C2                            loc_1C8B2:
0001C9C2 EB4A                       		lsl.w	#5,d2
0001C9C4 47F1 2000                  		lea	(a1,d2.w),a3
0001C9C8 2C9B                       		move.l	(a3)+,(a6)
0001C9CA 2C9B                       		move.l	(a3)+,(a6)
0001C9CC 2C9B                       		move.l	(a3)+,(a6)
0001C9CE 2C9B                       		move.l	(a3)+,(a6)
0001C9D0 2C9B                       		move.l	(a3)+,(a6)
0001C9D2 2C9B                       		move.l	(a3)+,(a6)
0001C9D4 2C9B                       		move.l	(a3)+,(a6)
0001C9D6 2C9B                       		move.l	(a3)+,(a6)
0001C9D8 4841                       		swap	d1
0001C9DA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001C9DE                            
0001C9DE 4E75                       		rts	
0001C9E0                            ; End of function HudDb_XY2
0001C9E0                            
0001C9E0                            ; ---------------------------------------------------------------------------
0001C9E0                            ; Subroutine to	load rings numbers patterns
0001C9E0                            ; ---------------------------------------------------------------------------
0001C9E0                            
0001C9E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9E0                            
0001C9E0                            
0001C9E0                            Hud_Rings:				; XREF: HudUpdate
0001C9E0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001C9E6 7C02                       		moveq	#2,d6
0001C9E8 6000                       		bra.s	Hud_LoadArt
0001C9EA                            ; End of function Hud_Rings
0001C9EA                            
0001C9EA                            ; ---------------------------------------------------------------------------
0001C9EA                            ; Subroutine to	load score numbers patterns
0001C9EA                            ; ---------------------------------------------------------------------------
0001C9EA                            
0001C9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9EA                            
0001C9EA                            
0001C9EA                            Hud_Score:				; XREF: HudUpdate
0001C9EA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001C9F0 7C05                       		moveq	#5,d6
0001C9F2                            
0001C9F2                            Hud_LoadArt:
0001C9F2 7800                       		moveq	#0,d4
0001C9F4 43FA 0000                  		lea	Art_Hud(pc),a1
0001C9F8                            
0001C9F8                            Hud_ScoreLoop:
0001C9F8 7400                       		moveq	#0,d2
0001C9FA 261A                       		move.l	(a2)+,d3
0001C9FC                            
0001C9FC                            loc_1C8EC:
0001C9FC 9283                       		sub.l	d3,d1
0001C9FE 6500                       		bcs.s	loc_1C8F4
0001CA00 5242                       		addq.w	#1,d2
0001CA02 60F8                       		bra.s	loc_1C8EC
0001CA04                            ; ===========================================================================
0001CA04                            
0001CA04                            loc_1C8F4:
0001CA04 D283                       		add.l	d3,d1
0001CA06 4A42                       		tst.w	d2
0001CA08 6700                       		beq.s	loc_1C8FE
0001CA0A 383C 0001                  		move.w	#1,d4
0001CA0E                            
0001CA0E                            loc_1C8FE:
0001CA0E 4A44                       		tst.w	d4
0001CA10 6700                       		beq.s	loc_1C92C
0001CA12 ED4A                       		lsl.w	#6,d2
0001CA14 2D40 0004                  		move.l	d0,4(a6)
0001CA18 47F1 2000                  		lea	(a1,d2.w),a3
0001CA1C 2C9B                       		move.l	(a3)+,(a6)
0001CA1E 2C9B                       		move.l	(a3)+,(a6)
0001CA20 2C9B                       		move.l	(a3)+,(a6)
0001CA22 2C9B                       		move.l	(a3)+,(a6)
0001CA24 2C9B                       		move.l	(a3)+,(a6)
0001CA26 2C9B                       		move.l	(a3)+,(a6)
0001CA28 2C9B                       		move.l	(a3)+,(a6)
0001CA2A 2C9B                       		move.l	(a3)+,(a6)
0001CA2C 2C9B                       		move.l	(a3)+,(a6)
0001CA2E 2C9B                       		move.l	(a3)+,(a6)
0001CA30 2C9B                       		move.l	(a3)+,(a6)
0001CA32 2C9B                       		move.l	(a3)+,(a6)
0001CA34 2C9B                       		move.l	(a3)+,(a6)
0001CA36 2C9B                       		move.l	(a3)+,(a6)
0001CA38 2C9B                       		move.l	(a3)+,(a6)
0001CA3A 2C9B                       		move.l	(a3)+,(a6)
0001CA3C                            
0001CA3C                            loc_1C92C:
0001CA3C 0680 0040 0000             		addi.l	#$400000,d0
0001CA42 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CA46                            
0001CA46 4E75                       		rts	
0001CA48                            ; End of function Hud_Score
0001CA48                            
0001CA48                            ; ---------------------------------------------------------------------------
0001CA48                            ; Subroutine to	load countdown numbers on the continue screen
0001CA48                            ; ---------------------------------------------------------------------------
0001CA48                            
0001CA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA48                            
0001CA48                            
0001CA48                            ContScrCounter:				; XREF: ContinueScreen
0001CA48 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CA52 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CA58 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CA5E 7C01                       		moveq	#1,d6
0001CA60 7800                       		moveq	#0,d4
0001CA62 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CA66                            
0001CA66                            ContScr_Loop:
0001CA66 7400                       		moveq	#0,d2
0001CA68 261A                       		move.l	(a2)+,d3
0001CA6A                            
0001CA6A                            loc_1C95A:
0001CA6A 9283                       		sub.l	d3,d1
0001CA6C 6500                       		bcs.s	loc_1C962
0001CA6E 5242                       		addq.w	#1,d2
0001CA70 60F8                       		bra.s	loc_1C95A
0001CA72                            ; ===========================================================================
0001CA72                            
0001CA72                            loc_1C962:
0001CA72 D283                       		add.l	d3,d1
0001CA74 ED4A                       		lsl.w	#6,d2
0001CA76 47F1 2000                  		lea	(a1,d2.w),a3
0001CA7A 2C9B                       		move.l	(a3)+,(a6)
0001CA7C 2C9B                       		move.l	(a3)+,(a6)
0001CA7E 2C9B                       		move.l	(a3)+,(a6)
0001CA80 2C9B                       		move.l	(a3)+,(a6)
0001CA82 2C9B                       		move.l	(a3)+,(a6)
0001CA84 2C9B                       		move.l	(a3)+,(a6)
0001CA86 2C9B                       		move.l	(a3)+,(a6)
0001CA88 2C9B                       		move.l	(a3)+,(a6)
0001CA8A 2C9B                       		move.l	(a3)+,(a6)
0001CA8C 2C9B                       		move.l	(a3)+,(a6)
0001CA8E 2C9B                       		move.l	(a3)+,(a6)
0001CA90 2C9B                       		move.l	(a3)+,(a6)
0001CA92 2C9B                       		move.l	(a3)+,(a6)
0001CA94 2C9B                       		move.l	(a3)+,(a6)
0001CA96 2C9B                       		move.l	(a3)+,(a6)
0001CA98 2C9B                       		move.l	(a3)+,(a6)
0001CA9A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CA9E                            
0001CA9E 4E75                       		rts	
0001CAA0                            ; End of function ContScrCounter
0001CAA0                            
0001CAA0                            ; ===========================================================================
0001CAA0                            ; ---------------------------------------------------------------------------
0001CAA0                            ; HUD counter sizes
0001CAA0                            ; ---------------------------------------------------------------------------
0001CAA0 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CAA4 0000 2710                  Hud_10000:	dc.l 10000
0001CAA8 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CAAC 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CAB0 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CAB4 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CAB8                            
0001CAB8                            ; ---------------------------------------------------------------------------
0001CAB8                            ; Subroutine to	load time numbers patterns
0001CAB8                            ; ---------------------------------------------------------------------------
0001CAB8                            
0001CAB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAB8                            
0001CAB8                            
0001CAB8                            Hud_Mins:				; XREF: Hud_ChkTime
0001CAB8 45F9 0001 CAB4             		lea	(Hud_1).l,a2
0001CABE 7C00                       		moveq	#0,d6
0001CAC0 6000                       		bra.s	loc_1C9BA
0001CAC2                            ; End of function Hud_Mins
0001CAC2                            
0001CAC2                            
0001CAC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC2                            
0001CAC2                            
0001CAC2                            Hud_Secs:				; XREF: Hud_ChkTime
0001CAC2 45F9 0001 CAB0             		lea	(Hud_10).l,a2
0001CAC8 7C01                       		moveq	#1,d6
0001CACA                            
0001CACA                            loc_1C9BA:
0001CACA 7800                       		moveq	#0,d4
0001CACC 43FA 0000                  		lea	Art_Hud(pc),a1
0001CAD0                            
0001CAD0                            Hud_TimeLoop:
0001CAD0 7400                       		moveq	#0,d2
0001CAD2 261A                       		move.l	(a2)+,d3
0001CAD4                            
0001CAD4                            loc_1C9C4:
0001CAD4 9283                       		sub.l	d3,d1
0001CAD6 6500                       		bcs.s	loc_1C9CC
0001CAD8 5242                       		addq.w	#1,d2
0001CADA 60F8                       		bra.s	loc_1C9C4
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1C9CC:
0001CADC D283                       		add.l	d3,d1
0001CADE 4A42                       		tst.w	d2
0001CAE0 6700                       		beq.s	loc_1C9D6
0001CAE2 383C 0001                  		move.w	#1,d4
0001CAE6                            
0001CAE6                            loc_1C9D6:
0001CAE6 ED4A                       		lsl.w	#6,d2
0001CAE8 2D40 0004                  		move.l	d0,4(a6)
0001CAEC 47F1 2000                  		lea	(a1,d2.w),a3
0001CAF0 2C9B                       		move.l	(a3)+,(a6)
0001CAF2 2C9B                       		move.l	(a3)+,(a6)
0001CAF4 2C9B                       		move.l	(a3)+,(a6)
0001CAF6 2C9B                       		move.l	(a3)+,(a6)
0001CAF8 2C9B                       		move.l	(a3)+,(a6)
0001CAFA 2C9B                       		move.l	(a3)+,(a6)
0001CAFC 2C9B                       		move.l	(a3)+,(a6)
0001CAFE 2C9B                       		move.l	(a3)+,(a6)
0001CB00 2C9B                       		move.l	(a3)+,(a6)
0001CB02 2C9B                       		move.l	(a3)+,(a6)
0001CB04 2C9B                       		move.l	(a3)+,(a6)
0001CB06 2C9B                       		move.l	(a3)+,(a6)
0001CB08 2C9B                       		move.l	(a3)+,(a6)
0001CB0A 2C9B                       		move.l	(a3)+,(a6)
0001CB0C 2C9B                       		move.l	(a3)+,(a6)
0001CB0E 2C9B                       		move.l	(a3)+,(a6)
0001CB10 0680 0040 0000             		addi.l	#$400000,d0
0001CB16 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CB1A                            
0001CB1A 4E75                       		rts	
0001CB1C                            ; End of function Hud_Secs
0001CB1C                            
0001CB1C                            ; ---------------------------------------------------------------------------
0001CB1C                            ; Subroutine to	load time/ring bonus numbers patterns
0001CB1C                            ; ---------------------------------------------------------------------------
0001CB1C                            
0001CB1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB1C                            
0001CB1C                            
0001CB1C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CB1C 45F9 0001 CAA8             		lea	(Hud_1000).l,a2
0001CB22 7C03                       		moveq	#3,d6
0001CB24 7800                       		moveq	#0,d4
0001CB26 43FA 0000                  		lea	Art_Hud(pc),a1
0001CB2A                            
0001CB2A                            Hud_BonusLoop:
0001CB2A 7400                       		moveq	#0,d2
0001CB2C 261A                       		move.l	(a2)+,d3
0001CB2E                            
0001CB2E                            loc_1CA1E:
0001CB2E 9283                       		sub.l	d3,d1
0001CB30 6500                       		bcs.s	loc_1CA26
0001CB32 5242                       		addq.w	#1,d2
0001CB34 60F8                       		bra.s	loc_1CA1E
0001CB36                            ; ===========================================================================
0001CB36                            
0001CB36                            loc_1CA26:
0001CB36 D283                       		add.l	d3,d1
0001CB38 4A42                       		tst.w	d2
0001CB3A 6700                       		beq.s	loc_1CA30
0001CB3C 383C 0001                  		move.w	#1,d4
0001CB40                            
0001CB40                            loc_1CA30:
0001CB40 4A44                       		tst.w	d4
0001CB42 6700                       		beq.s	Hud_ClrBonus
0001CB44 ED4A                       		lsl.w	#6,d2
0001CB46 47F1 2000                  		lea	(a1,d2.w),a3
0001CB4A 2C9B                       		move.l	(a3)+,(a6)
0001CB4C 2C9B                       		move.l	(a3)+,(a6)
0001CB4E 2C9B                       		move.l	(a3)+,(a6)
0001CB50 2C9B                       		move.l	(a3)+,(a6)
0001CB52 2C9B                       		move.l	(a3)+,(a6)
0001CB54 2C9B                       		move.l	(a3)+,(a6)
0001CB56 2C9B                       		move.l	(a3)+,(a6)
0001CB58 2C9B                       		move.l	(a3)+,(a6)
0001CB5A 2C9B                       		move.l	(a3)+,(a6)
0001CB5C 2C9B                       		move.l	(a3)+,(a6)
0001CB5E 2C9B                       		move.l	(a3)+,(a6)
0001CB60 2C9B                       		move.l	(a3)+,(a6)
0001CB62 2C9B                       		move.l	(a3)+,(a6)
0001CB64 2C9B                       		move.l	(a3)+,(a6)
0001CB66 2C9B                       		move.l	(a3)+,(a6)
0001CB68 2C9B                       		move.l	(a3)+,(a6)
0001CB6A                            
0001CB6A                            loc_1CA5A:
0001CB6A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CB6E                            
0001CB6E 4E75                       		rts	
0001CB70                            ; ===========================================================================
0001CB70                            
0001CB70                            Hud_ClrBonus:
0001CB70 7A0F                       		moveq	#$F,d5
0001CB72                            
0001CB72                            Hud_ClrBonusLoop:
0001CB72 2CBC 0000 0000             		move.l	#0,(a6)
0001CB78 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CB7C                            
0001CB7C 60EC                       		bra.s	loc_1CA5A
0001CB7E                            ; End of function Hud_TimeRingBonus
0001CB7E                            
0001CB7E                            ; ---------------------------------------------------------------------------
0001CB7E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CB7E                            ; ---------------------------------------------------------------------------
0001CB7E                            
0001CB7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB7E                            
0001CB7E                            
0001CB7E                            Hud_Lives:				; XREF: Hud_ChkLives
0001CB7E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CB84 7200                       		moveq	#0,d1
0001CB86 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CB8A 45F9 0001 CAB0             		lea	(Hud_10).l,a2
0001CB90 7C01                       		moveq	#1,d6
0001CB92 7800                       		moveq	#0,d4
0001CB94 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CB98                            
0001CB98                            Hud_LivesLoop:
0001CB98 2D40 0004                  		move.l	d0,4(a6)
0001CB9C 7400                       		moveq	#0,d2
0001CB9E 261A                       		move.l	(a2)+,d3
0001CBA0                            
0001CBA0                            loc_1CA90:
0001CBA0 9283                       		sub.l	d3,d1
0001CBA2 6500                       		bcs.s	loc_1CA98
0001CBA4 5242                       		addq.w	#1,d2
0001CBA6 60F8                       		bra.s	loc_1CA90
0001CBA8                            ; ===========================================================================
0001CBA8                            
0001CBA8                            loc_1CA98:
0001CBA8 D283                       		add.l	d3,d1
0001CBAA 4A42                       		tst.w	d2
0001CBAC 6700                       		beq.s	loc_1CAA2
0001CBAE 383C 0001                  		move.w	#1,d4
0001CBB2                            
0001CBB2                            loc_1CAA2:
0001CBB2 4A44                       		tst.w	d4
0001CBB4 6700                       		beq.s	Hud_ClrLives
0001CBB6                            
0001CBB6                            loc_1CAA6:
0001CBB6 EB4A                       		lsl.w	#5,d2
0001CBB8 47F1 2000                  		lea	(a1,d2.w),a3
0001CBBC 2C9B                       		move.l	(a3)+,(a6)
0001CBBE 2C9B                       		move.l	(a3)+,(a6)
0001CBC0 2C9B                       		move.l	(a3)+,(a6)
0001CBC2 2C9B                       		move.l	(a3)+,(a6)
0001CBC4 2C9B                       		move.l	(a3)+,(a6)
0001CBC6 2C9B                       		move.l	(a3)+,(a6)
0001CBC8 2C9B                       		move.l	(a3)+,(a6)
0001CBCA 2C9B                       		move.l	(a3)+,(a6)
0001CBCC                            
0001CBCC                            loc_1CABC:
0001CBCC 0680 0040 0000             		addi.l	#$400000,d0
0001CBD2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CBD6                            
0001CBD6 4E75                       		rts	
0001CBD8                            ; ===========================================================================
0001CBD8                            
0001CBD8                            Hud_ClrLives:
0001CBD8 4A46                       		tst.w	d6
0001CBDA 67DA                       		beq.s	loc_1CAA6
0001CBDC 7A07                       		moveq	#7,d5
0001CBDE                            
0001CBDE                            Hud_ClrLivesLoop:
0001CBDE 2CBC 0000 0000             		move.l	#0,(a6)
0001CBE4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CBE8 60E2                       		bra.s	loc_1CABC
0001CBEA                            ; End of function Hud_Lives
0001CBEA                            
0001CBEA                            ; ===========================================================================
0001CBEA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CEEA                            		even
0001CEEA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D02A                            		even
0001D02A                            ; ===========================================================================
0001D02A                            ; ---------------------------------------------------------------------------
0001D02A                            ; When debug mode is currently in use
0001D02A                            ; ---------------------------------------------------------------------------
0001D02A                            
0001D02A                            DebugMode:				; XREF: Obj01; Obj09
0001D02A 7000                       		moveq	#0,d0
0001D02C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D030 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D034 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D038                            ; ===========================================================================
0001D038 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D03A 0000                       		dc.w Debug_Skip-Debug_Index
0001D03C                            ; ===========================================================================
0001D03C                            
0001D03C                            Debug_Main:				; XREF: Debug_Index
0001D03C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D040 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D046 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D04C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D052 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D058 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D05E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D064 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D06A 117C 0000 001A             		move.b	#0,$1A(a0)
0001D070 117C 0000 001C             		move.b	#0,$1C(a0)
0001D076 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D07C 6600                       		bne.s	Debug_Zone	; if not, branch
0001D07E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D084 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D08A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D08C 6000                       		bra.s	Debug_UseList
0001D08E                            ; ===========================================================================
0001D08E                            
0001D08E                            Debug_Zone:
0001D08E 7000                       		moveq	#0,d0
0001D090 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D094                            
0001D094                            Debug_UseList:
0001D094 45F9 0000 0000             		lea	(DebugList).l,a2
0001D09A D040                       		add.w	d0,d0
0001D09C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D0A0 3C1A                       		move.w	(a2)+,d6
0001D0A2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D0A6 6200                       		bhi.s	loc_1CF9E
0001D0A8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D0AE                            
0001D0AE                            loc_1CF9E:
0001D0AE 6100 0000                  		bsr.w	Debug_ShowItem
0001D0B2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D0B8 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D0BE                            
0001D0BE                            Debug_Skip:				; XREF: Debug_Index
0001D0BE 7006                       		moveq	#6,d0
0001D0C0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D0C6 6700                       		beq.s	loc_1CFBE
0001D0C8 7000                       		moveq	#0,d0
0001D0CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D0CE                            
0001D0CE                            loc_1CFBE:
0001D0CE 45F9 0000 0000             		lea	(DebugList).l,a2
0001D0D4 D040                       		add.w	d0,d0
0001D0D6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D0DA 3C1A                       		move.w	(a2)+,d6
0001D0DC 6100 0000                  		bsr.w	Debug_Control
0001D0E0 4EF9 0000 D73C             		jmp	DisplaySprite
0001D0E6                            
0001D0E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0E6                            
0001D0E6                            
0001D0E6                            Debug_Control:
0001D0E6 7800                       		moveq	#0,d4
0001D0E8 323C 0001                  		move.w	#1,d1
0001D0EC 1838 F605                  		move.b	($FFFFF605).w,d4
0001D0F0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D0F4 6600                       		bne.s	loc_1D018	; if yes, branch
0001D0F6 1038 F604                  		move.b	($FFFFF604).w,d0
0001D0FA 0240 000F                  		andi.w	#$F,d0
0001D0FE 6600                       		bne.s	loc_1D000
0001D100 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D106 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D10C 6000 0000                  		bra.w	Debug_BackItem
0001D110                            ; ===========================================================================
0001D110                            
0001D110                            loc_1D000:
0001D110 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D114 6600                       		bne.s	loc_1D01C
0001D116 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D11C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D120 6600                       		bne.s	loc_1D018
0001D122 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D128                            
0001D128                            loc_1D018:
0001D128 1838 F604                  		move.b	($FFFFF604).w,d4
0001D12C                            
0001D12C                            loc_1D01C:
0001D12C 7200                       		moveq	#0,d1
0001D12E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D132 5241                       		addq.w	#1,d1
0001D134 4841                       		swap	d1
0001D136 E881                       		asr.l	#4,d1
0001D138 2428 000C                  		move.l	$C(a0),d2
0001D13C 2628 0008                  		move.l	8(a0),d3
0001D140 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D144 6700                       		beq.s	loc_1D03C	; if not, branch
0001D146 9481                       		sub.l	d1,d2
0001D148 6400                       		bcc.s	loc_1D03C
0001D14A 7400                       		moveq	#0,d2
0001D14C                            
0001D14C                            loc_1D03C:
0001D14C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D150 6700                       		beq.s	loc_1D052	; if not, branch
0001D152 D481                       		add.l	d1,d2
0001D154 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D15A 6500                       		bcs.s	loc_1D052
0001D15C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D162                            
0001D162                            loc_1D052:
0001D162 0804 0002                  		btst	#2,d4
0001D166 6700                       		beq.s	loc_1D05E
0001D168 9681                       		sub.l	d1,d3
0001D16A 6400                       		bcc.s	loc_1D05E
0001D16C 7600                       		moveq	#0,d3
0001D16E                            
0001D16E                            loc_1D05E:
0001D16E 0804 0003                  		btst	#3,d4
0001D172 6700                       		beq.s	loc_1D066
0001D174 D681                       		add.l	d1,d3
0001D176                            
0001D176                            loc_1D066:
0001D176 2142 000C                  		move.l	d2,$C(a0)
0001D17A 2143 0008                  		move.l	d3,8(a0)
0001D17E                            
0001D17E                            Debug_BackItem:
0001D17E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D184 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D186 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D18C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D18E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D192 6400                       		bcc.s	Debug_NoLoop
0001D194 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D198 6000                       		bra.s	Debug_NoLoop
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            Debug_NextItem:
0001D19A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D1A0 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D1A2 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D1A6 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D1AA 6200                       		bhi.s	Debug_NoLoop
0001D1AC 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D1B2                            
0001D1B2                            Debug_NoLoop:
0001D1B2 6000 0000                  		bra.w	Debug_ShowItem
0001D1B6                            ; ===========================================================================
0001D1B6                            
0001D1B6                            Debug_MakeItem:
0001D1B6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D1BC 6700                       		beq.s	Debug_Exit	; if not, branch
0001D1BE 4EB9 0000 DBC2             		jsr	SingleObjLoad
0001D1C4 6600                       		bne.s	Debug_Exit
0001D1C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001D1CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D1D2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D1D6 1368 0001 0001             		move.b	1(a0),1(a1)
0001D1DC 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D1E2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D1E8 7000                       		moveq	#0,d0
0001D1EA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D1EE E748                       		lsl.w	#3,d0
0001D1F0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D1F6 4E75                       		rts	
0001D1F8                            ; ===========================================================================
0001D1F8                            
0001D1F8                            Debug_Exit:
0001D1F8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D1FE 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D200 7000                       		moveq	#0,d0
0001D202 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D206 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D20E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D214 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D218 3140 000A                  		move.w	d0,$A(a0)
0001D21C 3140 000E                  		move.w	d0,$E(a0)
0001D220 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D226 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D22C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D232 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D234 4278 F780                  		clr.w	($FFFFF780).w
0001D238 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D23E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D246 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D24C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D252 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D258 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D25E                            
0001D25E                            Debug_DoNothing:
0001D25E 4E75                       		rts	
0001D260                            ; End of function Debug_Control
0001D260                            
0001D260                            
0001D260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D260                            
0001D260                            
0001D260                            Debug_ShowItem:				; XREF: Debug_Main
0001D260 7000                       		moveq	#0,d0
0001D262 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D266 E748                       		lsl.w	#3,d0
0001D268 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D26E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D274 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D27A 4E75                       		rts	
0001D27C                            ; End of function Debug_ShowItem
0001D27C                            
0001D27C                            ; ===========================================================================
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            ; Debug	list pointers
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            DebugList:
0001D27C                            	include "_inc\Debug list pointers.asm"
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            ; Debug	list pointers
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C 0000                       	dc.w Debug_GHZ-DebugList
0001D27E 0000                       	dc.w Debug_LZ-DebugList
0001D280 0000                       	dc.w Debug_MZ-DebugList
0001D282 0000                       	dc.w Debug_SLZ-DebugList
0001D284 0000                       	dc.w Debug_SYZ-DebugList
0001D286 0000                       	dc.w Debug_SBZ-DebugList
0001D288 0000                       	dc.w Debug_Ending-DebugList
0001D288 0000                       	dc.w Debug_Ending-DebugList
0001D28A                            
0001D28A                            ; ---------------------------------------------------------------------------
0001D28A                            ; Debug	list - Green Hill
0001D28A                            ; ---------------------------------------------------------------------------
0001D28A                            Debug_GHZ:
0001D28A                            	include "_inc\Debug list - GHZ.asm"
0001D28A                            ; ---------------------------------------------------------------------------
0001D28A                            ; Debug	list - Green Hill
0001D28A                            ; ---------------------------------------------------------------------------
0001D28A 0010                       	dc.w $10			; number of items in list
0001D28C 2500 A068                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D290 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D294 2600 A660                  	dc.l Map_obj26+$26000000
0001D298 0000 0680                  	dc.b 0,	0, 6, $80
0001D29C 1F00 983C                  	dc.l Map_obj1F+$1F000000
0001D2A0 0000 0400                  	dc.b 0,	0, 4, 0
0001D2A4 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D2A8 0000 0444                  	dc.b 0,	0, 4, $44
0001D2AC 2B00 AC60                  	dc.l Map_obj2B+$2B000000
0001D2B0 0000 047B                  	dc.b 0,	0, 4, $7B
0001D2B4 3600 D124                  	dc.l Map_obj36+$36000000
0001D2B8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D2BC 1800 823A                  	dc.l Map_obj18+$18000000
0001D2C0 0000 4000                  	dc.b 0,	0, $40,	0
0001D2C4 3B00 D24A                  	dc.l Map_obj3B+$3B000000
0001D2C8 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D2CC 4000 F8D6                  	dc.l Map_obj40+$40000000
0001D2D0 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D2D4 4100 DE50                  	dc.l Map_obj41+$41000000
0001D2D8 0000 0523                  	dc.b 0,	0, 5, $23
0001D2DC 4200 E076                  	dc.l Map_obj42+$42000000
0001D2E0 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D2E4 4400 E384                  	dc.l Map_obj44+$44000000
0001D2E8 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D2EC 1900 82A8                  	dc.l Map_obj48+$19000000
0001D2F0 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D2F4 7901 7206                  	dc.l Map_obj79+$79000000
0001D2F8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D2FC 4B00 A0A8                  	dc.l Map_obj4B+$4B000000
0001D300 0000 2400                  	dc.b 0,	0, $24,	0
0001D304 7D01 7356                  	dc.l Map_obj7D+$7D000000
0001D308 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D30C                            	even
0001D30C                            	even
0001D30C                            
0001D30C                            ; ---------------------------------------------------------------------------
0001D30C                            ; Debug	list - Labyrinth
0001D30C                            ; ---------------------------------------------------------------------------
0001D30C                            Debug_LZ:
0001D30C                            	include "_inc\Debug list - LZ.asm"
0001D30C                            ; ---------------------------------------------------------------------------
0001D30C                            ; Debug	list - Labyrinth
0001D30C                            ; ---------------------------------------------------------------------------
0001D30C 0019                       	dc.w $19
0001D30E 2500 A068                  	dc.l Map_obj25+$25000000
0001D312 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D316 2600 A660                  	dc.l Map_obj26+$26000000
0001D31A 0000 0680                  	dc.b 0,	0, 6, $80
0001D31E 4100 DE50                  	dc.l Map_obj41+$41000000
0001D322 0000 0523                  	dc.b 0,	0, 5, $23
0001D326 2C00 AD06                  	dc.l Map_obj2C+$2C000000
0001D32A 0800 2486                  	dc.b 8,	0, $24,	$86
0001D32E 2D00 AEF2                  	dc.l Map_obj2D+$2D000000
0001D332 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D336 1601 20B2                  	dc.l Map_obj16+$16000000
0001D33A 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D33E 1601 20B2                  	dc.l Map_obj16+$16000000
0001D342 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D346 3300 C370                  	dc.l Map_obj33+$33000000
0001D34A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D34E 3200 BF30                  	dc.l Map_obj32+$32000000
0001D352 0000 0513                  	dc.b 0,	0, 5, $13
0001D356 3600 D124                  	dc.l Map_obj36+$36000000
0001D35A 0000 051B                  	dc.b 0,	0, 5, $1B
0001D35E 5201 01D4                  	dc.l Map_obj52a+$52000000
0001D362 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D366 6101 22DA                  	dc.l Map_obj61+$61000000
0001D36A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D36E 6101 22DA                  	dc.l Map_obj61+$61000000
0001D372 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D376 6101 22DA                  	dc.l Map_obj61+$61000000
0001D37A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D37E 6201 242E                  	dc.l Map_obj62+$62000000
0001D382 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D386 6101 22DA                  	dc.l Map_obj61+$61000000
0001D38A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D38E 6101 22DA                  	dc.l Map_obj61+$61000000
0001D392 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D396 6301 2790                  	dc.l Map_obj63+$63000000
0001D39A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D39E 6001 1FFC                  	dc.l Map_obj60+$60000000
0001D3A2 0000 0467                  	dc.b 0,	0, 4, $67
0001D3A6 6401 2AD6                  	dc.l Map_obj64+$64000000
0001D3AA 8413 8348                  	dc.b $84, $13, $83, $48
0001D3AE 6501 2C5E                  	dc.l Map_obj65+$65000000
0001D3B2 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D3B6 6501 2C5E                  	dc.l Map_obj65+$65000000
0001D3BA 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D3BE 0B01 144C                  	dc.l Map_obj0B+$B000000
0001D3C2 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D3C6 0C01 151C                  	dc.l Map_obj0C+$C000000
0001D3CA 0200 4328                  	dc.b 2,	0, $43,	$28
0001D3CE 7901 7206                  	dc.l Map_obj79+$79000000
0001D3D2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D3D6                            	even
0001D3D6                            	even
0001D3D6                            
0001D3D6                            ; ---------------------------------------------------------------------------
0001D3D6                            ; Debug	list - Marble
0001D3D6                            ; ---------------------------------------------------------------------------
0001D3D6                            Debug_MZ:
0001D3D6                            	include "_inc\Debug list - MZ.asm"
0001D3D6                            ; ---------------------------------------------------------------------------
0001D3D6                            ; Debug	list - Marble
0001D3D6                            ; ---------------------------------------------------------------------------
0001D3D6 0012                       	dc.w $12
0001D3D8 2500 A068                  	dc.l Map_obj25+$25000000
0001D3DC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D3E0 2600 A660                  	dc.l Map_obj26+$26000000
0001D3E4 0000 0680                  	dc.b 0,	0, 6, $80
0001D3E8 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D3EC 0000 0444                  	dc.b 0,	0, 4, $44
0001D3F0 3600 D124                  	dc.l Map_obj36+$36000000
0001D3F4 0000 051B                  	dc.b 0,	0, 5, $1B
0001D3F8 4100 DE50                  	dc.l Map_obj41+$41000000
0001D3FC 0000 0523                  	dc.b 0,	0, 5, $23
0001D400 1300 B400                  	dc.l Map_obj14+$13000000
0001D404 0000 0345                  	dc.b 0,	0, 3, $45
0001D408 4600 EA36                  	dc.l Map_obj46+$46000000
0001D40C 0000 4000                  	dc.b 0,	0, $40,	0
0001D410 4C00 F382                  	dc.l Map_obj4C+$4C000000
0001D414 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D418 4E00 F666                  	dc.l Map_obj4E+$4E000000
0001D41C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D420 3300 C370                  	dc.l Map_obj33+$33000000
0001D424 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D428 5000 FA64                  	dc.l Map_obj50+$50000000
0001D42C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D430 5100 FF08                  	dc.l Map_obj51+$51000000
0001D434 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D438 5201 017E                  	dc.l Map_obj52+$52000000
0001D43C 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D440 5300 8840                  	dc.l Map_obj53+$53000000
0001D444 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D448 5400 F348                  	dc.l Map_obj54+$54000000
0001D44C 0000 8680                  	dc.b 0,	0, $86,	$80
0001D450 5501 0372                  	dc.l Map_obj55+$55000000
0001D454 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D458 7801 6E80                  	dc.l Map_obj78+$78000000
0001D45C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D460 7901 7206                  	dc.l Map_obj79+$79000000
0001D464 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D468                            	even
0001D468                            	even
0001D468                            
0001D468                            ; ---------------------------------------------------------------------------
0001D468                            ; Debug	list - Star Light
0001D468                            ; ---------------------------------------------------------------------------
0001D468                            Debug_SLZ:
0001D468                            	include "_inc\Debug list - SLZ.asm"
0001D468                            ; ---------------------------------------------------------------------------
0001D468                            ; Debug	list - Star Light
0001D468                            ; ---------------------------------------------------------------------------
0001D468 000F                       	dc.w $F
0001D46A 2500 A068                  	dc.l Map_obj25+$25000000
0001D46E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D472 2600 A660                  	dc.l Map_obj26+$26000000
0001D476 0000 0680                  	dc.b 0,	0, 6, $80
0001D47A 5901 0E74                  	dc.l Map_obj59+$59000000
0001D47E 0000 4000                  	dc.b 0,	0, $40,	0
0001D482 5300 8840                  	dc.l Map_obj53+$53000000
0001D486 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D48A 1800 8298                  	dc.l Map_obj18b+$18000000
0001D48E 0000 4000                  	dc.b 0,	0, $40,	0
0001D492 5A01 0FAE                  	dc.l Map_obj5A+$5A000000
0001D496 0000 4000                  	dc.b 0,	0, $40,	0
0001D49A 5B01 1166                  	dc.l Map_obj5B+$5B000000
0001D49E 0000 4000                  	dc.b 0,	0, $40,	0
0001D4A2 5D01 1736                  	dc.l Map_obj5D+$5D000000
0001D4A6 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D4AA 5E01 1AC8                  	dc.l Map_obj5E+$5E000000
0001D4AE 0000 0374                  	dc.b 0,	0, 3, $74
0001D4B2 4100 DE50                  	dc.l Map_obj41+$41000000
0001D4B6 0000 0523                  	dc.b 0,	0, 5, $23
0001D4BA 1300 B400                  	dc.l Map_obj14+$13000000
0001D4BE 0000 0480                  	dc.b 0,	0, 4, $80
0001D4C2 1C00 8950                  	dc.l Map_obj1C+$1C000000
0001D4C6 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D4CA 5F01 1D46                  	dc.l Map_obj5F+$5F000000
0001D4CE 0000 0400                  	dc.b 0,	0, 4, 0
0001D4D2 6001 1FFC                  	dc.l Map_obj60+$60000000
0001D4D6 0000 2429                  	dc.b 0,	0, $24,	$29
0001D4DA 7901 7206                  	dc.l Map_obj79+$79000000
0001D4DE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D4E2                            	even
0001D4E2                            	even
0001D4E2                            
0001D4E2                            ; ---------------------------------------------------------------------------
0001D4E2                            ; Debug	list - Spring Yard
0001D4E2                            ; ---------------------------------------------------------------------------
0001D4E2                            Debug_SYZ:
0001D4E2                            	include "_inc\Debug list - SYZ.asm"
0001D4E2                            ; ---------------------------------------------------------------------------
0001D4E2                            ; Debug	list - Spring Yard
0001D4E2                            ; ---------------------------------------------------------------------------
0001D4E2 000F                       	dc.w $F
0001D4E4 2500 A068                  	dc.l Map_obj25+$25000000
0001D4E8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D4EC 2600 A660                  	dc.l Map_obj26+$26000000
0001D4F0 0000 0680                  	dc.b 0,	0, 6, $80
0001D4F4 3600 D124                  	dc.l Map_obj36+$36000000
0001D4F8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D4FC 4100 DE50                  	dc.l Map_obj41+$41000000
0001D500 0000 0523                  	dc.b 0,	0, 5, $23
0001D504 4300 E2D6                  	dc.l Map_obj43+$43000000
0001D508 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D50C 1200 EAB4                  	dc.l Map_obj12+$12000000
0001D510 0000 0000                  	dc.b 0,	0, 0, 0
0001D514 4700 EC30                  	dc.l Map_obj47+$47000000
0001D518 0000 0380                  	dc.b 0,	0, 3, $80
0001D51C 1F00 983C                  	dc.l Map_obj1F+$1F000000
0001D520 0000 0400                  	dc.b 0,	0, 4, 0
0001D524 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D528 0000 0444                  	dc.b 0,	0, 4, $44
0001D52C 5000 FA64                  	dc.l Map_obj50+$50000000
0001D530 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D534 1800 8286                  	dc.l Map_obj18a+$18000000
0001D538 0000 4000                  	dc.b 0,	0, $40,	0
0001D53C 5601 0834                  	dc.l Map_obj56+$56000000
0001D540 0000 4000                  	dc.b 0,	0, $40,	0
0001D544 3200 BF30                  	dc.l Map_obj32+$32000000
0001D548 0000 0513                  	dc.b 0,	0, 5, $13
0001D54C 7801 6E80                  	dc.l Map_obj78+$78000000
0001D550 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D554 7901 7206                  	dc.l Map_obj79+$79000000
0001D558 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D55C                            	even
0001D55C                            	even
0001D55C                            
0001D55C                            ; ---------------------------------------------------------------------------
0001D55C                            ; Debug	list - Scrap Brain
0001D55C                            ; ---------------------------------------------------------------------------
0001D55C                            Debug_SBZ:
0001D55C                            	include "_inc\Debug list - SBZ.asm"
0001D55C                            ; ---------------------------------------------------------------------------
0001D55C                            ; Debug	list - Scrap Brain
0001D55C                            ; ---------------------------------------------------------------------------
0001D55C 001D                       	dc.w $1D
0001D55E 2500 A068                  	dc.l Map_obj25+$25000000
0001D562 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D566 2600 A660                  	dc.l Map_obj26+$26000000
0001D56A 0000 0680                  	dc.b 0,	0, 6, $80
0001D56E 5F01 1D46                  	dc.l Map_obj5F+$5F000000
0001D572 0000 0400                  	dc.b 0,	0, 4, 0
0001D576 6001 1FFC                  	dc.l Map_obj60+$60000000
0001D57A 0000 0429                  	dc.b 0,	0, 4, $29
0001D57E 7801 6E80                  	dc.l Map_obj78+$78000000
0001D582 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D586 1501 0BD0                  	dc.l Map_obj15b+$15000000
0001D58A 0702 4391                  	dc.b 7,	2, $43,	$91
0001D58E 6701 57A4                  	dc.l Map_obj67+$67000000
0001D592 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D596 5201 017E                  	dc.l Map_obj52+$52000000
0001D59A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D59E 3200 BF30                  	dc.l Map_obj32+$32000000
0001D5A2 0000 0513                  	dc.b 0,	0, 5, $13
0001D5A6 6901 59FE                  	dc.l Map_obj69+$69000000
0001D5AA 0300 4492                  	dc.b 3,	0, $44,	$92
0001D5AE 6901 5A58                  	dc.l Map_obj69a+$69000000
0001D5B2 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D5B6 6A01 5CB6                  	dc.l Map_obj6A+$6A000000
0001D5BA 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D5BE 5300 8840                  	dc.l Map_obj53+$53000000
0001D5C2 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D5C6 5201 017E                  	dc.l Map_obj52+$52000000
0001D5CA 3903 4460                  	dc.b $39, 3, $44, $60
0001D5CE 6B01 6086                  	dc.l Map_obj6B+$6B000000
0001D5D2 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D5D6 2A00 8AE6                  	dc.l Map_obj2A+$2A000000
0001D5DA 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D5DE 6B01 6086                  	dc.l Map_obj6B+$6B000000
0001D5E2 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D5E6 6A01 5CB6                  	dc.l Map_obj6A+$6A000000
0001D5EA 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D5EE 6B01 6086                  	dc.l Map_obj6B+$6B000000
0001D5F2 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D5F6 6A01 5CB6                  	dc.l Map_obj6A+$6A000000
0001D5FA 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D5FE 6B01 6086                  	dc.l Map_obj6B+$6B000000
0001D602 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D606 6C01 6248                  	dc.l Map_obj6C+$6C000000
0001D60A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D60E 6D00 E726                  	dc.l Map_obj6D+$6D000000
0001D612 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D616 6D00 E726                  	dc.l Map_obj6D+$6D000000
0001D61A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D61E 6E01 62FE                  	dc.l Map_obj6E+$6E000000
0001D622 0400 047E                  	dc.b 4,	0, 4, $7E
0001D626 7001 6744                  	dc.l Map_obj70+$70000000
0001D62A 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D62E 7101 15DC                  	dc.l Map_obj71+$71000000
0001D632 1100 8680                  	dc.b $11, 0, $86, $80
0001D636 1E00 8F54                  	dc.l Map_obj1E+$1E000000
0001D63A 0400 2302                  	dc.b 4,	0, $23,	2
0001D63E 7901 7206                  	dc.l Map_obj79+$79000000
0001D642 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D646                            	even
0001D646                            	even
0001D646                            
0001D646                            ; ---------------------------------------------------------------------------
0001D646                            ; Debug	list - ending sequence / special stage
0001D646                            ; ---------------------------------------------------------------------------
0001D646                            Debug_Ending:
0001D646                            	include "_inc\Debug list - Ending and SS.asm"
0001D646                            ; ---------------------------------------------------------------------------
0001D646                            ; Debug	list - ending sequence / special stage
0001D646                            ; ---------------------------------------------------------------------------
0001D646 000D                       	dc.w $D
0001D648 2500 A068                  	dc.l Map_obj25+$25000000
0001D64C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D650 4700 EC30                  	dc.l Map_obj47+$47000000
0001D654 0000 0380                  	dc.b 0,	0, 3, $80
0001D658 2800 956E                  	dc.l Map_obj28a+$28000000
0001D65C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D660 2800 956E                  	dc.l Map_obj28a+$28000000
0001D664 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D668 2800 956E                  	dc.l Map_obj28a+$28000000
0001D66C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D670 2800 9556                  	dc.l Map_obj28+$28000000
0001D674 0D00 0553                  	dc.b $D, 0, 5, $53
0001D678 2800 9556                  	dc.l Map_obj28+$28000000
0001D67C 0E00 0553                  	dc.b $E, 0, 5, $53
0001D680 2800 9556                  	dc.l Map_obj28+$28000000
0001D684 0F00 0573                  	dc.b $F, 0, 5, $73
0001D688 2800 9556                  	dc.l Map_obj28+$28000000
0001D68C 1000 0573                  	dc.b $10, 0, 5,	$73
0001D690 2800 956E                  	dc.l Map_obj28a+$28000000
0001D694 1100 0585                  	dc.b $11, 0, 5,	$85
0001D698 2800 9586                  	dc.l Map_obj28b+$28000000
0001D69C 1200 0593                  	dc.b $12, 0, 5,	$93
0001D6A0 2800 956E                  	dc.l Map_obj28a+$28000000
0001D6A4 1300 0565                  	dc.b $13, 0, 5,	$65
0001D6A8 2800 9586                  	dc.l Map_obj28b+$28000000
0001D6AC 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D6B0                            	even
0001D6B0                            	even
0001D6B0                            
0001D6B0                            ; ---------------------------------------------------------------------------
0001D6B0                            ; Main level load blocks
0001D6B0                            ; ---------------------------------------------------------------------------
0001D6B0                            MainLoadBlocks:
0001D6B0                            	include "_inc\Main level load blocks.asm"
0001D6B0                            ; ---------------------------------------------------------------------------
0001D6B0                            ; Main level load blocks
0001D6B0                            ;
0001D6B0                            ; ===FORMAT===
0001D6B0                            ; level	patterns + (1st	PLC num	* 10^6)
0001D6B0                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D6B0                            ; 256x256 mappings
0001D6B0                            ; blank, music (unused), pal index (unused), pal index
0001D6B0                            ; ---------------------------------------------------------------------------
0001D6B0 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D6B4 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D6B8 0000 0000                  	dc.l Blk256_GHZ
0001D6BC 0081 0404                  	dc.b 0,	$81, 4,	4
0001D6C0 0000 0000                  	dc.l Nem_LZ+$6000000
0001D6C4 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D6C8 0000 0000                  	dc.l Blk256_LZ
0001D6CC 0082 0505                  	dc.b 0,	$82, 5,	5
0001D6D0 0000 0000                  	dc.l Nem_MZ+$8000000
0001D6D4 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D6D8 0000 0000                  	dc.l Blk256_MZ
0001D6DC 0083 0606                  	dc.b 0,	$83, 6,	6
0001D6E0 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D6E4 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D6E8 0000 0000                  	dc.l Blk256_SLZ
0001D6EC 0084 0707                  	dc.b 0,	$84, 7,	7
0001D6F0 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D6F4 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D6F8 0000 0000                  	dc.l Blk256_SYZ
0001D6FC 0085 0808                  	dc.b 0,	$85, 8,	8
0001D700 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D704 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D708 0000 0000                  	dc.l Blk256_SBZ
0001D70C 0086 0909                  	dc.b 0,	$86, 9,	9
0001D710 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D714 0000 0000                  	dc.l Blk16_GHZ
0001D718 0000 0000                  	dc.l Blk256_GHZ
0001D71C 0086 1313                  	dc.b 0,	$86, $13, $13
0001D720                            	even
0001D720                            	even
0001D720                            
0001D720                            ; ---------------------------------------------------------------------------
0001D720                            ; Pattern load cues
0001D720                            ; ---------------------------------------------------------------------------
0001D720                            ArtLoadCues:
0001D720                            	include "_inc\Pattern load cues.asm"
0001D720                            ; ---------------------------------------------------------------------------
0001D720                            ; Pattern load cues - index
0001D720                            ; ---------------------------------------------------------------------------
0001D720 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D724 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D728 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D72C 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D730 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D734 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D738 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D73C 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D740 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D744 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D748 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D74C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D750 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D754 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D758 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D75C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ; Pattern load cues - standard block 1
0001D760                            ; ---------------------------------------------------------------------------
0001D760 0004                       PLC_Main:	dc.w 4
0001D762 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D766 F400                       		dc.w $F400
0001D768 0000 0000                  		dc.l Nem_Hud		; HUD
0001D76C D940                       		dc.w $D940
0001D76E 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D772 FA80                       		dc.w $FA80
0001D774 0000 0000                  		dc.l Nem_Ring		; rings
0001D778 F640                       		dc.w $F640
0001D77A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D77E F2E0                       		dc.w $F2E0
0001D780                            ; ---------------------------------------------------------------------------
0001D780                            ; Pattern load cues - standard block 2
0001D780                            ; ---------------------------------------------------------------------------
0001D780 0002                       PLC_Main2:	dc.w 2
0001D782 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D786 D000                       		dc.w $D000
0001D788 0000 0000                  		dc.l Nem_Shield		; shield
0001D78C A820                       		dc.w $A820
0001D78E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D792 AB80                       		dc.w $AB80
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            ; Pattern load cues - explosion
0001D794                            ; ---------------------------------------------------------------------------
0001D794 0000                       PLC_Explode:	dc.w 0
0001D796 0000 0000                  		dc.l Nem_Explode	; explosion
0001D79A B400                       		dc.w $B400
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C                            ; Pattern load cues - game/time	over
0001D79C                            ; ---------------------------------------------------------------------------
0001D79C 0000                       PLC_GameOver:	dc.w 0
0001D79E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D7A2 ABC0                       		dc.w $ABC0
0001D7A4                            ; ---------------------------------------------------------------------------
0001D7A4                            ; Pattern load cues - Green Hill
0001D7A4                            ; ---------------------------------------------------------------------------
0001D7A4 000B                       PLC_GHZ:	dc.w $B
0001D7A6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D7AA 0000                       		dc.w 0
0001D7AC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D7B0 39A0                       		dc.w $39A0
0001D7B2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D7B6 6B00                       		dc.w $6B00
0001D7B8 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D7BC 7A00                       		dc.w $7A00
0001D7BE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D7C2 8000                       		dc.w $8000
0001D7C4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D7C8 8880                       		dc.w $8880
0001D7CA 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D7CE 8F60                       		dc.w $8F60
0001D7D0 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D7D4 9360                       		dc.w $9360
0001D7D6 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D7DA 9E00                       		dc.w $9E00
0001D7DC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D7E0 A360                       		dc.w $A360
0001D7E2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D7E6 A460                       		dc.w $A460
0001D7E8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D7EC A660                       		dc.w $A660
0001D7EE 0005                       PLC_GHZ2:	dc.w 5
0001D7F0 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D7F4 7000                       		dc.w $7000
0001D7F6 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D7FA 71C0                       		dc.w $71C0
0001D7FC 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D800 7300                       		dc.w $7300
0001D802 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D806 7540                       		dc.w $7540
0001D808 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D80C A1E0                       		dc.w $A1E0
0001D80E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D812 6980                       		dc.w $6980
0001D814                            ; ---------------------------------------------------------------------------
0001D814                            ; Pattern load cues - Labyrinth
0001D814                            ; ---------------------------------------------------------------------------
0001D814 000B                       PLC_LZ:		dc.w $B
0001D816 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D81A 0000                       		dc.w 0
0001D81C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D820 3C00                       		dc.w $3C00
0001D822 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D826 3E00                       		dc.w $3E00
0001D828 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D82C 4B20                       		dc.w $4B20
0001D82E 0000 0000                  		dc.l Nem_Water		; water	surface
0001D832 6000                       		dc.w $6000
0001D834 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D838 6200                       		dc.w $6200
0001D83A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D83E 6500                       		dc.w $6500
0001D840 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D844 6900                       		dc.w $6900
0001D846 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D84A 7780                       		dc.w $7780
0001D84C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D850 7880                       		dc.w $7880
0001D852 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D856 7980                       		dc.w $7980
0001D858 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D85C 94C0                       		dc.w $94C0
0001D85E 000C                       PLC_LZ2:	dc.w $C
0001D860 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D864 7BC0                       		dc.w $7BC0
0001D866 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D86A 7CC0                       		dc.w $7CC0
0001D86C 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D870 7EC0                       		dc.w $7EC0
0001D872 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D876 5D20                       		dc.w $5D20
0001D878 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D87C 8800                       		dc.w $8800
0001D87E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D882 89E0                       		dc.w $89E0
0001D884 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D888 8CE0                       		dc.w $8CE0
0001D88A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D88E 90C0                       		dc.w $90C0
0001D890 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D894 A1E0                       		dc.w $A1E0
0001D896 0000 0000                  		dc.l Nem_Cork		; cork block
0001D89A A000                       		dc.w $A000
0001D89C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D8A0 A360                       		dc.w $A360
0001D8A2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D8A6 A460                       		dc.w $A460
0001D8A8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D8AC A660                       		dc.w $A660
0001D8AE                            ; ---------------------------------------------------------------------------
0001D8AE                            ; Pattern load cues - Marble
0001D8AE                            ; ---------------------------------------------------------------------------
0001D8AE 0009                       PLC_MZ:		dc.w 9
0001D8B0 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D8B4 0000                       		dc.w 0
0001D8B6 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D8BA 6000                       		dc.w $6000
0001D8BC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D8C0 68A0                       		dc.w $68A0
0001D8C2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D8C6 7000                       		dc.w $7000
0001D8C8 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D8CC 71C0                       		dc.w $71C0
0001D8CE 0000 0000                  		dc.l Nem_Lava		; lava
0001D8D2 7500                       		dc.w $7500
0001D8D4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D8D8 8880                       		dc.w $8880
0001D8DA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D8DE 8F60                       		dc.w $8F60
0001D8E0 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D8E4 9700                       		dc.w $9700
0001D8E6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D8EA 9FE0                       		dc.w $9FE0
0001D8EC 0004                       PLC_MZ2:	dc.w 4
0001D8EE 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D8F2 A260                       		dc.w $A260
0001D8F4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D8F8 A360                       		dc.w $A360
0001D8FA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D8FE A460                       		dc.w $A460
0001D900 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D904 A660                       		dc.w $A660
0001D906 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D90A 5700                       		dc.w $5700
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C                            ; Pattern load cues - Star Light
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C 0008                       PLC_SLZ:	dc.w 8
0001D90E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D912 0000                       		dc.w 0
0001D914 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D918 8000                       		dc.w $8000
0001D91A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D91E 8520                       		dc.w $8520
0001D920 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D924 9000                       		dc.w $9000
0001D926 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D92A 9C00                       		dc.w $9C00
0001D92C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D930 A260                       		dc.w $A260
0001D932 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D936 A360                       		dc.w $A360
0001D938 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D93C A460                       		dc.w $A460
0001D93E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D942 A660                       		dc.w $A660
0001D944 0005                       PLC_SLZ2:	dc.w 5
0001D946 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D94A 6E80                       		dc.w $6E80
0001D94C 0000 0000                  		dc.l Nem_Fan		; fan
0001D950 7400                       		dc.w $7400
0001D952 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D956 7980                       		dc.w $7980
0001D958 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D95C 7B80                       		dc.w $7B80
0001D95E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001D962 9B00                       		dc.w $9B00
0001D964 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001D968 9E00                       		dc.w $9E00
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            ; Pattern load cues - Spring Yard
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A 0004                       PLC_SYZ:	dc.w 4
0001D96C 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001D970 0000                       		dc.w 0
0001D972 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D976 8000                       		dc.w $8000
0001D978 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D97C 8880                       		dc.w $8880
0001D97E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D982 8F60                       		dc.w $8F60
0001D984 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001D988 9700                       		dc.w $9700
0001D98A 0007                       PLC_SYZ2:	dc.w 7
0001D98C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D990 7000                       		dc.w $7000
0001D992 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D996 72C0                       		dc.w $72C0
0001D998 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001D99C 7740                       		dc.w $7740
0001D99E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D9A2 9FE0                       		dc.w $9FE0
0001D9A4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D9A8 A1E0                       		dc.w $A1E0
0001D9AA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D9AE A360                       		dc.w $A360
0001D9B0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D9B4 A460                       		dc.w $A460
0001D9B6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D9BA A660                       		dc.w $A660
0001D9BC                            ; ---------------------------------------------------------------------------
0001D9BC                            ; Pattern load cues - Scrap Brain
0001D9BC                            ; ---------------------------------------------------------------------------
0001D9BC 000B                       PLC_SBZ:	dc.w $B
0001D9BE 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001D9C2 0000                       		dc.w 0
0001D9C4 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001D9C8 5800                       		dc.w $5800
0001D9CA 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001D9CE 5D00                       		dc.w $5D00
0001D9D0 0000 0000                  		dc.l Nem_Girder		; girder
0001D9D4 5E00                       		dc.w $5E00
0001D9D6 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001D9DA 6040                       		dc.w $6040
0001D9DC 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001D9E0 6880                       		dc.w $6880
0001D9E2 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001D9E6 6900                       		dc.w $6900
0001D9E8 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D9EC 7220                       		dc.w $7220
0001D9EE 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001D9F2 76A0                       		dc.w $76A0
0001D9F4 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001D9F8 7B20                       		dc.w $7B20
0001D9FA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D9FE 7EA0                       		dc.w $7EA0
0001DA00 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DA04 9860                       		dc.w $9860
0001DA06 000C                       PLC_SBZ2:	dc.w $C
0001DA08 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DA0C 5600                       		dc.w $5600
0001DA0E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DA12 8000                       		dc.w $8000
0001DA14 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DA18 8520                       		dc.w $8520
0001DA1A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DA1E 8C00                       		dc.w $8C00
0001DA20 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DA24 8DE0                       		dc.w $8DE0
0001DA26 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DA2A 8FC0                       		dc.w $8FC0
0001DA2C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DA30 9240                       		dc.w $9240
0001DA32 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DA36 7F20                       		dc.w $7F20
0001DA38 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DA3C 9BE0                       		dc.w $9BE0
0001DA3E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DA42 A1E0                       		dc.w $A1E0
0001DA44 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DA48 A360                       		dc.w $A360
0001DA4A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DA4E A460                       		dc.w $A460
0001DA50 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DA54 A660                       		dc.w $A660
0001DA56                            ; ---------------------------------------------------------------------------
0001DA56                            ; Pattern load cues - title card
0001DA56                            ; ---------------------------------------------------------------------------
0001DA56 0000                       PLC_TitleCard:	dc.w 0
0001DA58 0000 0000                  		dc.l Nem_TitleCard
0001DA5C B000                       		dc.w $B000
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            ; Pattern load cues - act 3 boss
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E 0005                       PLC_Boss:	dc.w 5
0001DA60 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DA64 8000                       		dc.w $8000
0001DA66 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DA6A 8D80                       		dc.w $8D80
0001DA6C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DA70 93A0                       		dc.w $93A0
0001DA72 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DA76 A300                       		dc.w $A300
0001DA78 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DA7C A300                       		dc.w $A300
0001DA7E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DA82 A540                       		dc.w $A540
0001DA84                            ; ---------------------------------------------------------------------------
0001DA84                            ; Pattern load cues - act 1/2 signpost
0001DA84                            ; ---------------------------------------------------------------------------
0001DA84 0002                       PLC_Signpost:	dc.w 2
0001DA86 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DA8A D000                       		dc.w $D000
0001DA8C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DA90 96C0                       		dc.w $96C0
0001DA92 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DA96 8C40                       		dc.w $8C40
0001DA98                            ; ---------------------------------------------------------------------------
0001DA98                            ; Pattern load cues - beta special stage warp effect
0001DA98                            ; ---------------------------------------------------------------------------
0001DA98 0000                       PLC_Warp:	dc.w 0
0001DA9A 0000 0000                  		dc.l Nem_Warp
0001DA9E A820                       		dc.w $A820
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            ; Pattern load cues - special stage
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0 0010                       PLC_SpeStage:	dc.w $10
0001DAA2 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DAA6 0000                       		dc.w 0
0001DAA8 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DAAC 0A20                       		dc.w $A20
0001DAAE 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DAB2 2840                       		dc.w $2840
0001DAB4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DAB8 4760                       		dc.w $4760
0001DABA 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DABE 4A20                       		dc.w $4A20
0001DAC0 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DAC4 4C60                       		dc.w $4C60
0001DAC6 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DACA 5E00                       		dc.w $5E00
0001DACC 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DAD0 6E00                       		dc.w $6E00
0001DAD2 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DAD6 7E00                       		dc.w $7E00
0001DAD8 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DADC 8E00                       		dc.w $8E00
0001DADE 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DAE2 9E00                       		dc.w $9E00
0001DAE4 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DAE8 AE00                       		dc.w $AE00
0001DAEA 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DAEE BE00                       		dc.w $BE00
0001DAF0 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DAF4 EE00                       		dc.w $EE00
0001DAF6 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DAFA F2E0                       		dc.w $F2E0
0001DAFC 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DB00 F400                       		dc.w $F400
0001DB02 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DB06 F520                       		dc.w $F520
0001DB08 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DB0C F2E0                       		dc.w $F2E0
0001DB0E 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DB12 F400                       		dc.w $F400
0001DB14 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DB18 F520                       		dc.w $F520
0001DB1A                            ; ---------------------------------------------------------------------------
0001DB1A                            ; Pattern load cues - GHZ animals
0001DB1A                            ; ---------------------------------------------------------------------------
0001DB1A 0001                       PLC_GHZAnimals:	dc.w 1
0001DB1C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DB20 B000                       		dc.w $B000
0001DB22 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DB26 B240                       		dc.w $B240
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28                            ; Pattern load cues - LZ animals
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28 0001                       PLC_LZAnimals:	dc.w 1
0001DB2A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DB2E B000                       		dc.w $B000
0001DB30 0000 0000                  		dc.l Nem_Seal		; seal
0001DB34 B240                       		dc.w $B240
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            ; Pattern load cues - MZ animals
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36 0001                       PLC_MZAnimals:	dc.w 1
0001DB38 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DB3C B000                       		dc.w $B000
0001DB3E 0000 0000                  		dc.l Nem_Seal		; seal
0001DB42 B240                       		dc.w $B240
0001DB44                            ; ---------------------------------------------------------------------------
0001DB44                            ; Pattern load cues - SLZ animals
0001DB44                            ; ---------------------------------------------------------------------------
0001DB44 0001                       PLC_SLZAnimals:	dc.w 1
0001DB46 0000 0000                  		dc.l Nem_Pig		; pig
0001DB4A B000                       		dc.w $B000
0001DB4C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DB50 B240                       		dc.w $B240
0001DB52                            ; ---------------------------------------------------------------------------
0001DB52                            ; Pattern load cues - SYZ animals
0001DB52                            ; ---------------------------------------------------------------------------
0001DB52 0001                       PLC_SYZAnimals:	dc.w 1
0001DB54 0000 0000                  		dc.l Nem_Pig		; pig
0001DB58 B000                       		dc.w $B000
0001DB5A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DB5E B240                       		dc.w $B240
0001DB60                            ; ---------------------------------------------------------------------------
0001DB60                            ; Pattern load cues - SBZ animals
0001DB60                            ; ---------------------------------------------------------------------------
0001DB60 0001                       PLC_SBZAnimals:	dc.w 1
0001DB62 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DB66 B000                       		dc.w $B000
0001DB68 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DB6C B240                       		dc.w $B240
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E                            ; Pattern load cues - special stage results screen
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E 0001                       PLC_SpeStResult:dc.w 1
0001DB70 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DB74 A820                       		dc.w $A820
0001DB76 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DB7A AA20                       		dc.w $AA20
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C                            ; Pattern load cues - ending sequence
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C 000E                       PLC_Ending:	dc.w $E
0001DB7E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DB82 0000                       		dc.w 0
0001DB84 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DB88 39A0                       		dc.w $39A0
0001DB8A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DB8E 6B00                       		dc.w $6B00
0001DB90 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DB94 7400                       		dc.w $7400
0001DB96 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DB9A 78A0                       		dc.w $78A0
0001DB9C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DBA0 7C20                       		dc.w $7C20
0001DBA2 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DBA6 A480                       		dc.w $A480
0001DBA8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DBAC AA60                       		dc.w $AA60
0001DBAE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DBB2 ACA0                       		dc.w $ACA0
0001DBB4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DBB8 AE60                       		dc.w $AE60
0001DBBA 0000 0000                  		dc.l Nem_Seal		; seal
0001DBBE B0A0                       		dc.w $B0A0
0001DBC0 0000 0000                  		dc.l Nem_Pig		; pig
0001DBC4 B260                       		dc.w $B260
0001DBC6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DBCA B4A0                       		dc.w $B4A0
0001DBCC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DBD0 B660                       		dc.w $B660
0001DBD2 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DBD6 B8A0                       		dc.w $B8A0
0001DBD8                            ; ---------------------------------------------------------------------------
0001DBD8                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DBD8                            ; ---------------------------------------------------------------------------
0001DBD8 0002                       PLC_TryAgain:	dc.w 2
0001DBDA 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DBDE 78A0                       		dc.w $78A0
0001DBE0 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DBE4 7C20                       		dc.w $7C20
0001DBE6 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DBEA B400                       		dc.w $B400
0001DBEC                            ; ---------------------------------------------------------------------------
0001DBEC                            ; Pattern load cues - Eggman on SBZ 2
0001DBEC                            ; ---------------------------------------------------------------------------
0001DBEC 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DBEE 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DBF2 A300                       		dc.w $A300
0001DBF4 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DBF8 8000                       		dc.w $8000
0001DBFA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DBFE 9400                       		dc.w $9400
0001DC00                            ; ---------------------------------------------------------------------------
0001DC00                            ; Pattern load cues - final boss
0001DC00                            ; ---------------------------------------------------------------------------
0001DC00 0004                       PLC_FZBoss:	dc.w 4
0001DC02 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DC06 7400                       		dc.w $7400
0001DC08 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DC0C 6000                       		dc.w $6000
0001DC0E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DC12 8000                       		dc.w $8000
0001DC14 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DC18 8E00                       		dc.w $8E00
0001DC1A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DC1E A540                       		dc.w $A540
0001DC20                            		even
0001DC20                            		even
0001DC20                            
0001DC20                            		incbin	misc\padding.bin
0001DD0E                            		even
0001DD0E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E170                            		even
0001E170                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E268                            		even
0001E268                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E37C                            		even
0001E37C                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F388                            		even
0001F388                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000224E4                            		even
000224E4                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022518                            		even
00022518                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000225D6                            		even
000225D6                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022A7E                            		even
00022A7E                            ; ---------------------------------------------------------------------------
00022A7E                            ; Sprite mappings - Sonic
00022A7E                            ; ---------------------------------------------------------------------------
00022A7E                            Map_Sonic:
00022A7E                            	include "_maps\Sonic.asm"
00022A7E                            Mappings:
00022A7E 0000                       Mappings_0: 	dc.w Mappings_B2-Mappings
00022A80 0000                       Mappings_2: 	dc.w Mappings_B3-Mappings
00022A82 0000                       Mappings_4: 	dc.w Mappings_BE-Mappings
00022A84 0000                       Mappings_6: 	dc.w Mappings_CE-Mappings
00022A86 0000                       Mappings_8: 	dc.w Mappings_DE-Mappings
00022A88 0000                       Mappings_A: 	dc.w Mappings_EE-Mappings
00022A8A 0000                       Mappings_C: 	dc.w Mappings_FE-Mappings
00022A8C 0000                       Mappings_E: 	dc.w Mappings_113-Mappings
00022A8E 0000                       Mappings_10: 	dc.w Mappings_11E-Mappings
00022A90 0000                       Mappings_12: 	dc.w Mappings_129-Mappings
00022A92 0000                       Mappings_14: 	dc.w Mappings_13E-Mappings
00022A94 0000                       Mappings_16: 	dc.w Mappings_149-Mappings
00022A96 0000                       Mappings_18: 	dc.w Mappings_159-Mappings
00022A98 0000                       Mappings_1A: 	dc.w Mappings_173-Mappings
00022A9A 0000                       Mappings_1C: 	dc.w Mappings_192-Mappings
00022A9C 0000                       Mappings_1E: 	dc.w Mappings_1A7-Mappings
00022A9E 0000                       Mappings_20: 	dc.w Mappings_1C1-Mappings
00022AA0 0000                       Mappings_22: 	dc.w Mappings_1D6-Mappings
00022AA2 0000                       Mappings_24: 	dc.w Mappings_1F0-Mappings
00022AA4 0000                       Mappings_26: 	dc.w Mappings_205-Mappings
00022AA6 0000                       Mappings_28: 	dc.w Mappings_210-Mappings
00022AA8 0000                       Mappings_2A: 	dc.w Mappings_21B-Mappings
00022AAA 0000                       Mappings_2C: 	dc.w Mappings_230-Mappings
00022AAC 0000                       Mappings_2E: 	dc.w Mappings_23B-Mappings
00022AAE 0000                       Mappings_30: 	dc.w Mappings_24B-Mappings
00022AB0 0000                       Mappings_32: 	dc.w Mappings_26A-Mappings
00022AB2 0000                       Mappings_34: 	dc.w Mappings_289-Mappings
00022AB4 0000                       Mappings_36: 	dc.w Mappings_29E-Mappings
00022AB6 0000                       Mappings_38: 	dc.w Mappings_2B8-Mappings
00022AB8 0000                       Mappings_3A: 	dc.w Mappings_2CD-Mappings
00022ABA 0000                       Mappings_3C: 	dc.w Mappings_2E7-Mappings
00022ABC 0000                       Mappings_3E: 	dc.w Mappings_2F2-Mappings
00022ABE 0000                       Mappings_40: 	dc.w Mappings_2FD-Mappings
00022AC0 0000                       Mappings_42: 	dc.w Mappings_308-Mappings
00022AC2 0000                       Mappings_44: 	dc.w Mappings_313-Mappings
00022AC4 0000                       Mappings_46: 	dc.w Mappings_328-Mappings
00022AC6 0000                       Mappings_48: 	dc.w Mappings_338-Mappings
00022AC8 0000                       Mappings_4A: 	dc.w Mappings_34D-Mappings
00022ACA 0000                       Mappings_4C: 	dc.w Mappings_35D-Mappings
00022ACC 0000                       Mappings_4E: 	dc.w Mappings_368-Mappings
00022ACE 0000                       Mappings_50: 	dc.w Mappings_373-Mappings
00022AD0 0000                       Mappings_52: 	dc.w Mappings_37E-Mappings
00022AD2 0000                       Mappings_54: 	dc.w Mappings_389-Mappings
00022AD4 0000                       Mappings_56: 	dc.w Mappings_39E-Mappings
00022AD6 0000                       Mappings_58: 	dc.w Mappings_3A9-Mappings
00022AD8 0000                       Mappings_5A: 	dc.w Mappings_3BE-Mappings
00022ADA 0000                       Mappings_5C: 	dc.w Mappings_3C9-Mappings
00022ADC 0000                       Mappings_5E: 	dc.w Mappings_3CF-Mappings
00022ADE 0000                       Mappings_60: 	dc.w Mappings_3D5-Mappings
00022AE0 0000                       Mappings_62: 	dc.w Mappings_3DB-Mappings
00022AE2 0000                       Mappings_64: 	dc.w Mappings_3E1-Mappings
00022AE4 0000                       Mappings_66: 	dc.w Mappings_3E7-Mappings
00022AE6 0000                       Mappings_68: 	dc.w Mappings_3F2-Mappings
00022AE8 0000                       Mappings_6A: 	dc.w Mappings_3F8-Mappings
00022AEA 0000                       Mappings_6C: 	dc.w Mappings_403-Mappings
00022AEC 0000                       Mappings_6E: 	dc.w Mappings_409-Mappings
00022AEE 0000                       Mappings_70: 	dc.w Mappings_414-Mappings
00022AF0 0000                       Mappings_72: 	dc.w Mappings_429-Mappings
00022AF2 0000                       Mappings_74: 	dc.w Mappings_43E-Mappings
00022AF4 0000                       Mappings_76: 	dc.w Mappings_44E-Mappings
00022AF6 0000                       Mappings_78: 	dc.w Mappings_45E-Mappings
00022AF8 0000                       Mappings_7A: 	dc.w Mappings_46E-Mappings
00022AFA 0000                       Mappings_7C: 	dc.w Mappings_479-Mappings
00022AFC 0000                       Mappings_7E: 	dc.w Mappings_489-Mappings
00022AFE 0000                       Mappings_80: 	dc.w Mappings_499-Mappings
00022B00 0000                       Mappings_82: 	dc.w Mappings_4A9-Mappings
00022B02 0000                       Mappings_84: 	dc.w Mappings_4BE-Mappings
00022B04 0000                       Mappings_86: 	dc.w Mappings_4D3-Mappings
00022B06 0000                       Mappings_88: 	dc.w Mappings_4ED-Mappings
00022B08 0000                       Mappings_8A: 	dc.w Mappings_507-Mappings
00022B0A 0000                       Mappings_8C: 	dc.w Mappings_512-Mappings
00022B0C 0000                       Mappings_8E: 	dc.w Mappings_522-Mappings
00022B0E 0000                       Mappings_90: 	dc.w Mappings_52D-Mappings
00022B10 0000                       Mappings_92: 	dc.w Mappings_53D-Mappings
00022B12 0000                       Mappings_94: 	dc.w Mappings_548-Mappings
00022B14 0000                       Mappings_96: 	dc.w Mappings_558-Mappings
00022B16 0000                       Mappings_98: 	dc.w Mappings_568-Mappings
00022B18 0000                       Mappings_9A: 	dc.w Mappings_582-Mappings
00022B1A 0000                       Mappings_9C: 	dc.w Mappings_59C-Mappings
00022B1C 0000                       Mappings_9E: 	dc.w Mappings_5A7-Mappings
00022B1E 0000                       Mappings_A0: 	dc.w Mappings_5B7-Mappings
00022B20 0000                       Mappings_A2: 	dc.w Mappings_5BD-Mappings
00022B22 0000                       Mappings_A4: 	dc.w Mappings_5C3-Mappings
00022B24 0000                       Mappings_A6: 	dc.w Mappings_5C9-Mappings
00022B26 0000                       Mappings_A8: 	dc.w Mappings_5D9-Mappings
00022B28 0000                       Mappings_AA: 	dc.w Mappings_5E9-Mappings
00022B2A 0000                       Mappings_AC: 	dc.w Mappings_5F9-Mappings
00022B2C 0000                       Mappings_AE: 	dc.w Mappings_609-Mappings
00022B2E 0000                       Mappings_B0: 	dc.w Mappings_614-Mappings
00022B30 00                         Mappings_B2: 	dc.b $0
00022B31 02                         Mappings_B3: 	dc.b $2
00022B32 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00022B37 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00022B3C 03                         Mappings_BE: 	dc.b $3
00022B3D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022B42 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022B47 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022B4C 03                         Mappings_CE: 	dc.b $3
00022B4D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022B52 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022B57 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022B5C 03                         Mappings_DE: 	dc.b $3
00022B5D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022B62 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022B67 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022B6C 03                         Mappings_EE: 	dc.b $3
00022B6D EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00022B72 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00022B77 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022B7C 04                         Mappings_FE: 	dc.b $4
00022B7D EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00022B82 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00022B87 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00022B8C 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00022B91 02                         Mappings_113: 	dc.b $2
00022B92 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00022B97 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00022B9C 02                         Mappings_11E: 	dc.b $2
00022B9D ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00022BA2 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00022BA7 04                         Mappings_129: 	dc.b $4
00022BA8 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00022BAD FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00022BB2 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00022BB7 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00022BBC 02                         Mappings_13E: 	dc.b $2
00022BBD EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00022BC2 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00022BC7 03                         Mappings_149: 	dc.b $3
00022BC8 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00022BCD FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00022BD2 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00022BD7 05                         Mappings_159: 	dc.b $5
00022BD8 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00022BDD EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00022BE2 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00022BE7 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00022BEC 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00022BF1 06                         Mappings_173: 	dc.b $6
00022BF2 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00022BF7 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00022BFC FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00022C01 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00022C06 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00022C0B F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00022C10 04                         Mappings_192: 	dc.b $4
00022C11 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00022C16 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00022C1B FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00022C20 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00022C25 05                         Mappings_1A7: 	dc.b $5
00022C26 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00022C2B EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00022C30 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00022C35 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00022C3A 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00022C3F 04                         Mappings_1C1: 	dc.b $4
00022C40 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00022C45 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00022C4A FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00022C4F 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00022C54 05                         Mappings_1D6: 	dc.b $5
00022C55 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00022C5A ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00022C5F FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00022C64 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00022C69 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00022C6E 04                         Mappings_1F0: 	dc.b $4
00022C6F F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00022C74 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00022C79 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00022C7E 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00022C83 02                         Mappings_205: 	dc.b $2
00022C84 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00022C89 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00022C8E 02                         Mappings_210: 	dc.b $2
00022C8F F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00022C94 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00022C99 04                         Mappings_21B: 	dc.b $4
00022C9A F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00022C9F EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00022CA4 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00022CA9 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00022CAE 02                         Mappings_230: 	dc.b $2
00022CAF F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00022CB4 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00022CB9 03                         Mappings_23B: 	dc.b $3
00022CBA F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00022CBF EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00022CC4 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00022CC9 06                         Mappings_24B: 	dc.b $6
00022CCA FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00022CCF ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00022CD4 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00022CD9 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00022CDE 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00022CE3 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00022CE8 06                         Mappings_26A: 	dc.b $6
00022CE9 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022CEE E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00022CF3 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00022CF8 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00022CFD F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00022D02 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00022D07 04                         Mappings_289: 	dc.b $4
00022D08 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00022D0D F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00022D12 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00022D17 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00022D1C 05                         Mappings_29E: 	dc.b $5
00022D1D FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00022D22 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00022D27 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00022D2C F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00022D31 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00022D36 04                         Mappings_2B8: 	dc.b $4
00022D37 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022D3C F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00022D41 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00022D46 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00022D4B 05                         Mappings_2CD: 	dc.b $5
00022D4C FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00022D51 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00022D56 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00022D5B 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00022D60 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00022D65 02                         Mappings_2E7: 	dc.b $2
00022D66 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022D6B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022D70 02                         Mappings_2F2: 	dc.b $2
00022D71 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022D76 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022D7B 02                         Mappings_2FD: 	dc.b $2
00022D7C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022D81 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022D86 02                         Mappings_308: 	dc.b $2
00022D87 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022D8C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022D91 04                         Mappings_313: 	dc.b $4
00022D92 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022D97 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022D9C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022DA1 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00022DA6 03                         Mappings_328: 	dc.b $3
00022DA7 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022DAC EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022DB1 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022DB6 04                         Mappings_338: 	dc.b $4
00022DB7 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022DBC EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022DC1 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022DC6 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00022DCB 03                         Mappings_34D: 	dc.b $3
00022DCC EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00022DD1 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00022DD6 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00022DDB 02                         Mappings_35D: 	dc.b $2
00022DDC F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022DE1 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022DE6 02                         Mappings_368: 	dc.b $2
00022DE7 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022DEC F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022DF1 02                         Mappings_373: 	dc.b $2
00022DF2 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022DF7 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022DFC 02                         Mappings_37E: 	dc.b $2
00022DFD F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00022E02 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00022E07 04                         Mappings_389: 	dc.b $4
00022E08 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00022E0D F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00022E12 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022E17 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00022E1C 02                         Mappings_39E: 	dc.b $2
00022E1D F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00022E22 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022E27 04                         Mappings_3A9: 	dc.b $4
00022E28 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00022E2D F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00022E32 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022E37 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00022E3C 02                         Mappings_3BE: 	dc.b $2
00022E3D F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00022E42 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00022E47 01                         Mappings_3C9: 	dc.b $1
00022E48 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E4D 01                         Mappings_3CF: 	dc.b $1
00022E4E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E53 01                         Mappings_3D5: 	dc.b $1
00022E54 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E59 01                         Mappings_3DB: 	dc.b $1
00022E5A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E5F 01                         Mappings_3E1: 	dc.b $1
00022E60 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E65 02                         Mappings_3E7: 	dc.b $2
00022E66 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00022E6B F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00022E70 01                         Mappings_3F2: 	dc.b $1
00022E71 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E76 02                         Mappings_3F8: 	dc.b $2
00022E77 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00022E7C 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00022E81 01                         Mappings_403: 	dc.b $1
00022E82 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00022E87 02                         Mappings_409: 	dc.b $2
00022E88 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00022E8D FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00022E92 04                         Mappings_414: 	dc.b $4
00022E93 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00022E98 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00022E9D 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00022EA2 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00022EA7 04                         Mappings_429: 	dc.b $4
00022EA8 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00022EAD FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00022EB2 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00022EB7 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00022EBC 03                         Mappings_43E: 	dc.b $3
00022EBD EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00022EC2 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00022EC7 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00022ECC 03                         Mappings_44E: 	dc.b $3
00022ECD EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00022ED2 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00022ED7 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00022EDC 03                         Mappings_45E: 	dc.b $3
00022EDD F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00022EE2 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00022EE7 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00022EEC 02                         Mappings_46E: 	dc.b $2
00022EED F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00022EF2 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00022EF7 03                         Mappings_479: 	dc.b $3
00022EF8 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00022EFD FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00022F02 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00022F07 03                         Mappings_489: 	dc.b $3
00022F08 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00022F0D FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00022F12 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00022F17 03                         Mappings_499: 	dc.b $3
00022F18 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00022F1D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00022F22 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00022F27 04                         Mappings_4A9: 	dc.b $4
00022F28 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00022F2D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00022F32 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00022F37 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00022F3C 04                         Mappings_4BE: 	dc.b $4
00022F3D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00022F42 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00022F47 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00022F4C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00022F51 05                         Mappings_4D3: 	dc.b $5
00022F52 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00022F57 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00022F5C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00022F61 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00022F66 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00022F6B 05                         Mappings_4ED: 	dc.b $5
00022F6C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00022F71 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00022F76 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00022F7B 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00022F80 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00022F85 02                         Mappings_507: 	dc.b $2
00022F86 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00022F8B 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00022F90 03                         Mappings_512: 	dc.b $3
00022F91 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00022F96 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00022F9B 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00022FA0 02                         Mappings_522: 	dc.b $2
00022FA1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00022FA6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00022FAB 03                         Mappings_52D: 	dc.b $3
00022FAC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00022FB1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00022FB6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00022FBB 02                         Mappings_53D: 	dc.b $2
00022FBC EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022FC1 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00022FC6 03                         Mappings_548: 	dc.b $3
00022FC7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00022FCC 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00022FD1 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00022FD6 03                         Mappings_558: 	dc.b $3
00022FD7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00022FDC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00022FE1 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00022FE6 05                         Mappings_568: 	dc.b $5
00022FE7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00022FEC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00022FF1 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00022FF6 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00022FFB 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00023000 05                         Mappings_582: 	dc.b $5
00023001 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023006 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002300B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00023010 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00023015 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002301A 02                         Mappings_59C: 	dc.b $2
0002301B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00023020 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00023025 03                         Mappings_5A7: 	dc.b $3
00023026 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002302B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00023030 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00023035 01                         Mappings_5B7: 	dc.b $1
00023036 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002303B 01                         Mappings_5BD: 	dc.b $1
0002303C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00023041 01                         Mappings_5C3: 	dc.b $1
00023042 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00023047 03                         Mappings_5C9: 	dc.b $3
00023048 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002304D FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00023052 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00023057 03                         Mappings_5D9: 	dc.b $3
00023058 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
0002305D FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00023062 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00023067 03                         Mappings_5E9: 	dc.b $3
00023068 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002306D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00023072 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00023077 03                         Mappings_5F9: 	dc.b $3
00023078 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002307D FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00023082 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00023087 02                         Mappings_609: 	dc.b $2
00023088 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002308D F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00023092 02                         Mappings_614: 	dc.b $2
00023093 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00023098 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002309E 00                         	even
0002309E 00                         	even
0002309E                            
0002309E                            ; ---------------------------------------------------------------------------
0002309E                            ; Uncompressed graphics	loading	array for Sonic
0002309E                            ; ---------------------------------------------------------------------------
0002309E                            SonicDynPLC:
0002309E                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002309E                            DPLCS:
0002309E 0000                       DPLCS_0: 	dc.w DPLCS_B2-DPLCS
000230A0 0000                       DPLCS_2: 	dc.w DPLCS_B3-DPLCS
000230A2 0000                       DPLCS_4: 	dc.w DPLCS_B8-DPLCS
000230A4 0000                       DPLCS_6: 	dc.w DPLCS_BF-DPLCS
000230A6 0000                       DPLCS_8: 	dc.w DPLCS_C6-DPLCS
000230A8 0000                       DPLCS_A: 	dc.w DPLCS_CD-DPLCS
000230AA 0000                       DPLCS_C: 	dc.w DPLCS_D4-DPLCS
000230AC 0000                       DPLCS_E: 	dc.w DPLCS_DD-DPLCS
000230AE 0000                       DPLCS_10: 	dc.w DPLCS_E2-DPLCS
000230B0 0000                       DPLCS_12: 	dc.w DPLCS_E7-DPLCS
000230B2 0000                       DPLCS_14: 	dc.w DPLCS_F0-DPLCS
000230B4 0000                       DPLCS_16: 	dc.w DPLCS_F5-DPLCS
000230B6 0000                       DPLCS_18: 	dc.w DPLCS_FC-DPLCS
000230B8 0000                       DPLCS_1A: 	dc.w DPLCS_107-DPLCS
000230BA 0000                       DPLCS_1C: 	dc.w DPLCS_114-DPLCS
000230BC 0000                       DPLCS_1E: 	dc.w DPLCS_11D-DPLCS
000230BE 0000                       DPLCS_20: 	dc.w DPLCS_128-DPLCS
000230C0 0000                       DPLCS_22: 	dc.w DPLCS_131-DPLCS
000230C2 0000                       DPLCS_24: 	dc.w DPLCS_13C-DPLCS
000230C4 0000                       DPLCS_26: 	dc.w DPLCS_145-DPLCS
000230C6 0000                       DPLCS_28: 	dc.w DPLCS_14A-DPLCS
000230C8 0000                       DPLCS_2A: 	dc.w DPLCS_14F-DPLCS
000230CA 0000                       DPLCS_2C: 	dc.w DPLCS_158-DPLCS
000230CC 0000                       DPLCS_2E: 	dc.w DPLCS_15D-DPLCS
000230CE 0000                       DPLCS_30: 	dc.w DPLCS_164-DPLCS
000230D0 0000                       DPLCS_32: 	dc.w DPLCS_171-DPLCS
000230D2 0000                       DPLCS_34: 	dc.w DPLCS_17E-DPLCS
000230D4 0000                       DPLCS_36: 	dc.w DPLCS_187-DPLCS
000230D6 0000                       DPLCS_38: 	dc.w DPLCS_192-DPLCS
000230D8 0000                       DPLCS_3A: 	dc.w DPLCS_19B-DPLCS
000230DA 0000                       DPLCS_3C: 	dc.w DPLCS_1A6-DPLCS
000230DC 0000                       DPLCS_3E: 	dc.w DPLCS_1AB-DPLCS
000230DE 0000                       DPLCS_40: 	dc.w DPLCS_1B0-DPLCS
000230E0 0000                       DPLCS_42: 	dc.w DPLCS_1B5-DPLCS
000230E2 0000                       DPLCS_44: 	dc.w DPLCS_1BA-DPLCS
000230E4 0000                       DPLCS_46: 	dc.w DPLCS_1C3-DPLCS
000230E6 0000                       DPLCS_48: 	dc.w DPLCS_1CA-DPLCS
000230E8 0000                       DPLCS_4A: 	dc.w DPLCS_1D3-DPLCS
000230EA 0000                       DPLCS_4C: 	dc.w DPLCS_1DA-DPLCS
000230EC 0000                       DPLCS_4E: 	dc.w DPLCS_1DF-DPLCS
000230EE 0000                       DPLCS_50: 	dc.w DPLCS_1E4-DPLCS
000230F0 0000                       DPLCS_52: 	dc.w DPLCS_1E9-DPLCS
000230F2 0000                       DPLCS_54: 	dc.w DPLCS_1EE-DPLCS
000230F4 0000                       DPLCS_56: 	dc.w DPLCS_1F7-DPLCS
000230F6 0000                       DPLCS_58: 	dc.w DPLCS_1FC-DPLCS
000230F8 0000                       DPLCS_5A: 	dc.w DPLCS_205-DPLCS
000230FA 0000                       DPLCS_5C: 	dc.w DPLCS_20A-DPLCS
000230FC 0000                       DPLCS_5E: 	dc.w DPLCS_20D-DPLCS
000230FE 0000                       DPLCS_60: 	dc.w DPLCS_210-DPLCS
00023100 0000                       DPLCS_62: 	dc.w DPLCS_213-DPLCS
00023102 0000                       DPLCS_64: 	dc.w DPLCS_216-DPLCS
00023104 0000                       DPLCS_66: 	dc.w DPLCS_219-DPLCS
00023106 0000                       DPLCS_68: 	dc.w DPLCS_21E-DPLCS
00023108 0000                       DPLCS_6A: 	dc.w DPLCS_221-DPLCS
0002310A 0000                       DPLCS_6C: 	dc.w DPLCS_226-DPLCS
0002310C 0000                       DPLCS_6E: 	dc.w DPLCS_229-DPLCS
0002310E 0000                       DPLCS_70: 	dc.w DPLCS_22E-DPLCS
00023110 0000                       DPLCS_72: 	dc.w DPLCS_237-DPLCS
00023112 0000                       DPLCS_74: 	dc.w DPLCS_240-DPLCS
00023114 0000                       DPLCS_76: 	dc.w DPLCS_247-DPLCS
00023116 0000                       DPLCS_78: 	dc.w DPLCS_24E-DPLCS
00023118 0000                       DPLCS_7A: 	dc.w DPLCS_255-DPLCS
0002311A 0000                       DPLCS_7C: 	dc.w DPLCS_258-DPLCS
0002311C 0000                       DPLCS_7E: 	dc.w DPLCS_25F-DPLCS
0002311E 0000                       DPLCS_80: 	dc.w DPLCS_266-DPLCS
00023120 0000                       DPLCS_82: 	dc.w DPLCS_26D-DPLCS
00023122 0000                       DPLCS_84: 	dc.w DPLCS_276-DPLCS
00023124 0000                       DPLCS_86: 	dc.w DPLCS_27F-DPLCS
00023126 0000                       DPLCS_88: 	dc.w DPLCS_28A-DPLCS
00023128 0000                       DPLCS_8A: 	dc.w DPLCS_295-DPLCS
0002312A 0000                       DPLCS_8C: 	dc.w DPLCS_29A-DPLCS
0002312C 0000                       DPLCS_8E: 	dc.w DPLCS_2A1-DPLCS
0002312E 0000                       DPLCS_90: 	dc.w DPLCS_2A6-DPLCS
00023130 0000                       DPLCS_92: 	dc.w DPLCS_2AD-DPLCS
00023132 0000                       DPLCS_94: 	dc.w DPLCS_2B2-DPLCS
00023134 0000                       DPLCS_96: 	dc.w DPLCS_2B9-DPLCS
00023136 0000                       DPLCS_98: 	dc.w DPLCS_2C0-DPLCS
00023138 0000                       DPLCS_9A: 	dc.w DPLCS_2CB-DPLCS
0002313A 0000                       DPLCS_9C: 	dc.w DPLCS_2D6-DPLCS
0002313C 0000                       DPLCS_9E: 	dc.w DPLCS_2DB-DPLCS
0002313E 0000                       DPLCS_A0: 	dc.w DPLCS_2E2-DPLCS
00023140 0000                       DPLCS_A2: 	dc.w DPLCS_2E5-DPLCS
00023142 0000                       DPLCS_A4: 	dc.w DPLCS_2E8-DPLCS
00023144 0000                       DPLCS_A6: 	dc.w DPLCS_2EB-DPLCS
00023146 0000                       DPLCS_A8: 	dc.w DPLCS_2F2-DPLCS
00023148 0000                       DPLCS_AA: 	dc.w DPLCS_2F9-DPLCS
0002314A 0000                       DPLCS_AC: 	dc.w DPLCS_300-DPLCS
0002314C 0000                       DPLCS_AE: 	dc.w DPLCS_307-DPLCS
0002314E 0000                       DPLCS_B0: 	dc.w DPLCS_30C-DPLCS
00023150 00                         DPLCS_B2: 	dc.b $0
00023151 02                         DPLCS_B3: 	dc.b $2
00023152 F000                       	dc.b $F0, $0
00023154 1010                       	dc.b $10, $10
00023156 03                         DPLCS_B8: 	dc.b $3
00023157 5012                       	dc.b $50, $12
00023159 5018                       	dc.b $50, $18
0002315B 201E                       	dc.b $20, $1E
0002315D 03                         DPLCS_BF: 	dc.b $3
0002315E 5021                       	dc.b $50, $21
00023160 5018                       	dc.b $50, $18
00023162 201E                       	dc.b $20, $1E
00023164 03                         DPLCS_C6: 	dc.b $3
00023165 5021                       	dc.b $50, $21
00023167 5018                       	dc.b $50, $18
00023169 2027                       	dc.b $20, $27
0002316B 03                         DPLCS_CD: 	dc.b $3
0002316C 802A                       	dc.b $80, $2A
0002316E 2033                       	dc.b $20, $33
00023170 2036                       	dc.b $20, $36
00023172 04                         DPLCS_D4: 	dc.b $4
00023173 7039                       	dc.b $70, $39
00023175 5041                       	dc.b $50, $41
00023177 5047                       	dc.b $50, $47
00023179 104D                       	dc.b $10, $4D
0002317B 02                         DPLCS_DD: 	dc.b $2
0002317C 7039                       	dc.b $70, $39
0002317E B04F                       	dc.b $B0, $4F
00023180 02                         DPLCS_E2: 	dc.b $2
00023181 505B                       	dc.b $50, $5B
00023183 8061                       	dc.b $80, $61
00023185 04                         DPLCS_E7: 	dc.b $4
00023186 505B                       	dc.b $50, $5B
00023188 506A                       	dc.b $50, $6A
0002318A 5070                       	dc.b $50, $70
0002318C 1076                       	dc.b $10, $76
0002318E 02                         DPLCS_F0: 	dc.b $2
0002318F 505B                       	dc.b $50, $5B
00023191 B078                       	dc.b $B0, $78
00023193 03                         DPLCS_F5: 	dc.b $3
00023194 7039                       	dc.b $70, $39
00023196 3084                       	dc.b $30, $84
00023198 5088                       	dc.b $50, $88
0002319A 05                         DPLCS_FC: 	dc.b $5
0002319B 508E                       	dc.b $50, $8E
0002319D 5094                       	dc.b $50, $94
0002319F 209A                       	dc.b $20, $9A
000231A1 509D                       	dc.b $50, $9D
000231A3 00A3                       	dc.b $0, $A3
000231A5 06                         DPLCS_107: 	dc.b $6
000231A6 508E                       	dc.b $50, $8E
000231A8 10A4                       	dc.b $10, $A4
000231AA 30A6                       	dc.b $30, $A6
000231AC 50AA                       	dc.b $50, $AA
000231AE 30B0                       	dc.b $30, $B0
000231B0 00B4                       	dc.b $0, $B4
000231B2 04                         DPLCS_114: 	dc.b $4
000231B3 50B5                       	dc.b $50, $B5
000231B5 10BB                       	dc.b $10, $BB
000231B7 70BD                       	dc.b $70, $BD
000231B9 20C5                       	dc.b $20, $C5
000231BB 05                         DPLCS_11D: 	dc.b $5
000231BC 50C8                       	dc.b $50, $C8
000231BE 30CE                       	dc.b $30, $CE
000231C0 70D2                       	dc.b $70, $D2
000231C2 20DA                       	dc.b $20, $DA
000231C4 10DD                       	dc.b $10, $DD
000231C6 04                         DPLCS_128: 	dc.b $4
000231C7 50C8                       	dc.b $50, $C8
000231C9 10DF                       	dc.b $10, $DF
000231CB 70E1                       	dc.b $70, $E1
000231CD 20E9                       	dc.b $20, $E9
000231CF 05                         DPLCS_131: 	dc.b $5
000231D0 508E                       	dc.b $50, $8E
000231D2 10A4                       	dc.b $10, $A4
000231D4 009A                       	dc.b $0, $9A
000231D6 70EC                       	dc.b $70, $EC
000231D8 20F4                       	dc.b $20, $F4
000231DA 04                         DPLCS_13C: 	dc.b $4
000231DB 70F7                       	dc.b $70, $F7
000231DD 50FF                       	dc.b $50, $FF
000231DF 1105                       	dc.b $11, $5
000231E1 5107                       	dc.b $51, $7
000231E3 02                         DPLCS_145: 	dc.b $2
000231E4 70F7                       	dc.b $70, $F7
000231E6 B10D                       	dc.b $B1, $D
000231E8 02                         DPLCS_14A: 	dc.b $2
000231E9 5119                       	dc.b $51, $19
000231EB 811F                       	dc.b $81, $1F
000231ED 04                         DPLCS_14F: 	dc.b $4
000231EE 5119                       	dc.b $51, $19
000231F0 5128                       	dc.b $51, $28
000231F2 112E                       	dc.b $11, $2E
000231F4 5130                       	dc.b $51, $30
000231F6 02                         DPLCS_158: 	dc.b $2
000231F7 5119                       	dc.b $51, $19
000231F9 B136                       	dc.b $B1, $36
000231FB 03                         DPLCS_15D: 	dc.b $3
000231FC 70F7                       	dc.b $70, $F7
000231FE 010D                       	dc.b $1, $D
00023200 8142                       	dc.b $81, $42
00023202 06                         DPLCS_164: 	dc.b $6
00023203 514B                       	dc.b $51, $4B
00023205 1151                       	dc.b $11, $51
00023207 1153                       	dc.b $11, $53
00023209 8155                       	dc.b $81, $55
0002320B 015E                       	dc.b $1, $5E
0002320D 015F                       	dc.b $1, $5F
0002320F 06                         DPLCS_171: 	dc.b $6
00023210 514B                       	dc.b $51, $4B
00023212 2160                       	dc.b $21, $60
00023214 1163                       	dc.b $11, $63
00023216 1165                       	dc.b $11, $65
00023218 8167                       	dc.b $81, $67
0002321A 015E                       	dc.b $1, $5E
0002321C 04                         DPLCS_17E: 	dc.b $4
0002321D 5170                       	dc.b $51, $70
0002321F 1176                       	dc.b $11, $76
00023221 8178                       	dc.b $81, $78
00023223 1181                       	dc.b $11, $81
00023225 05                         DPLCS_187: 	dc.b $5
00023226 5183                       	dc.b $51, $83
00023228 2189                       	dc.b $21, $89
0002322A 118C                       	dc.b $11, $8C
0002322C 718E                       	dc.b $71, $8E
0002322E 2196                       	dc.b $21, $96
00023230 04                         DPLCS_192: 	dc.b $4
00023231 5183                       	dc.b $51, $83
00023233 1199                       	dc.b $11, $99
00023235 819B                       	dc.b $81, $9B
00023237 11A4                       	dc.b $11, $A4
00023239 05                         DPLCS_19B: 	dc.b $5
0002323A 514B                       	dc.b $51, $4B
0002323C 81A6                       	dc.b $81, $A6
0002323E 1165                       	dc.b $11, $65
00023240 11AF                       	dc.b $11, $AF
00023242 015E                       	dc.b $1, $5E
00023244 02                         DPLCS_1A6: 	dc.b $2
00023245 51B1                       	dc.b $51, $B1
00023247 B1B7                       	dc.b $B1, $B7
00023249 02                         DPLCS_1AB: 	dc.b $2
0002324A 505B                       	dc.b $50, $5B
0002324C B1C3                       	dc.b $B1, $C3
0002324E 02                         DPLCS_1B0: 	dc.b $2
0002324F 51B1                       	dc.b $51, $B1
00023251 B1CF                       	dc.b $B1, $CF
00023253 02                         DPLCS_1B5: 	dc.b $2
00023254 505B                       	dc.b $50, $5B
00023256 B1DB                       	dc.b $B1, $DB
00023258 04                         DPLCS_1BA: 	dc.b $4
00023259 51E7                       	dc.b $51, $E7
0002325B 11ED                       	dc.b $11, $ED
0002325D B1EF                       	dc.b $B1, $EF
0002325F 01FB                       	dc.b $1, $FB
00023261 03                         DPLCS_1C3: 	dc.b $3
00023262 51FC                       	dc.b $51, $FC
00023264 1202                       	dc.b $12, $2
00023266 B204                       	dc.b $B2, $4
00023268 04                         DPLCS_1CA: 	dc.b $4
00023269 51E7                       	dc.b $51, $E7
0002326B 1210                       	dc.b $12, $10
0002326D B212                       	dc.b $B2, $12
0002326F 01FB                       	dc.b $1, $FB
00023271 03                         DPLCS_1D3: 	dc.b $3
00023272 51FC                       	dc.b $51, $FC
00023274 1202                       	dc.b $12, $2
00023276 B21E                       	dc.b $B2, $1E
00023278 02                         DPLCS_1DA: 	dc.b $2
00023279 522A                       	dc.b $52, $2A
0002327B B230                       	dc.b $B2, $30
0002327D 02                         DPLCS_1DF: 	dc.b $2
0002327E 5119                       	dc.b $51, $19
00023280 B23C                       	dc.b $B2, $3C
00023282 02                         DPLCS_1E4: 	dc.b $2
00023283 522A                       	dc.b $52, $2A
00023285 B248                       	dc.b $B2, $48
00023287 02                         DPLCS_1E9: 	dc.b $2
00023288 5119                       	dc.b $51, $19
0002328A B254                       	dc.b $B2, $54
0002328C 04                         DPLCS_1EE: 	dc.b $4
0002328D 5260                       	dc.b $52, $60
0002328F 1266                       	dc.b $12, $66
00023291 B268                       	dc.b $B2, $68
00023293 0274                       	dc.b $2, $74
00023295 02                         DPLCS_1F7: 	dc.b $2
00023296 7275                       	dc.b $72, $75
00023298 B27D                       	dc.b $B2, $7D
0002329A 04                         DPLCS_1FC: 	dc.b $4
0002329B 5260                       	dc.b $52, $60
0002329D 1289                       	dc.b $12, $89
0002329F B28B                       	dc.b $B2, $8B
000232A1 0274                       	dc.b $2, $74
000232A3 02                         DPLCS_205: 	dc.b $2
000232A4 7275                       	dc.b $72, $75
000232A6 B297                       	dc.b $B2, $97
000232A8 01                         DPLCS_20A: 	dc.b $1
000232A9 F2A3                       	dc.b $F2, $A3
000232AB 01                         DPLCS_20D: 	dc.b $1
000232AC F2B3                       	dc.b $F2, $B3
000232AE 01                         DPLCS_210: 	dc.b $1
000232AF F2C3                       	dc.b $F2, $C3
000232B1 01                         DPLCS_213: 	dc.b $1
000232B2 F2D3                       	dc.b $F2, $D3
000232B4 01                         DPLCS_216: 	dc.b $1
000232B5 F2E3                       	dc.b $F2, $E3
000232B7 02                         DPLCS_219: 	dc.b $2
000232B8 B2F3                       	dc.b $B2, $F3
000232BA 22FF                       	dc.b $22, $FF
000232BC 01                         DPLCS_21E: 	dc.b $1
000232BD F302                       	dc.b $F3, $2
000232BF 02                         DPLCS_221: 	dc.b $2
000232C0 B312                       	dc.b $B3, $12
000232C2 231E                       	dc.b $23, $1E
000232C4 01                         DPLCS_226: 	dc.b $1
000232C5 F321                       	dc.b $F3, $21
000232C7 02                         DPLCS_229: 	dc.b $2
000232C8 5331                       	dc.b $53, $31
000232CA B337                       	dc.b $B3, $37
000232CC 04                         DPLCS_22E: 	dc.b $4
000232CD 5343                       	dc.b $53, $43
000232CF 7349                       	dc.b $73, $49
000232D1 1351                       	dc.b $13, $51
000232D3 0353                       	dc.b $3, $53
000232D5 04                         DPLCS_237: 	dc.b $4
000232D6 1354                       	dc.b $13, $54
000232D8 7356                       	dc.b $73, $56
000232DA 235E                       	dc.b $23, $5E
000232DC 0361                       	dc.b $3, $61
000232DE 03                         DPLCS_240: 	dc.b $3
000232DF 2362                       	dc.b $23, $62
000232E1 2365                       	dc.b $23, $65
000232E3 F368                       	dc.b $F3, $68
000232E5 03                         DPLCS_247: 	dc.b $3
000232E6 B378                       	dc.b $B3, $78
000232E8 7384                       	dc.b $73, $84
000232EA 0078                       	dc.b $0, $78
000232EC 03                         DPLCS_24E: 	dc.b $3
000232ED 738C                       	dc.b $73, $8C
000232EF 3394                       	dc.b $33, $94
000232F1 2398                       	dc.b $23, $98
000232F3 01                         DPLCS_255: 	dc.b $1
000232F4 839B                       	dc.b $83, $9B
000232F6 03                         DPLCS_258: 	dc.b $3
000232F7 73A4                       	dc.b $73, $A4
000232F9 03AC                       	dc.b $3, $AC
000232FB 33AD                       	dc.b $33, $AD
000232FD 03                         DPLCS_25F: 	dc.b $3
000232FE 73B1                       	dc.b $73, $B1
00023300 33B9                       	dc.b $33, $B9
00023302 23BD                       	dc.b $23, $BD
00023304 03                         DPLCS_266: 	dc.b $3
00023305 B3C0                       	dc.b $B3, $C0
00023307 13CC                       	dc.b $13, $CC
00023309 03CE                       	dc.b $3, $CE
0002330B 04                         DPLCS_26D: 	dc.b $4
0002330C B3CF                       	dc.b $B3, $CF
0002330E 33DB                       	dc.b $33, $DB
00023310 03DF                       	dc.b $3, $DF
00023312 03E0                       	dc.b $3, $E0
00023314 04                         DPLCS_276: 	dc.b $4
00023315 B3E1                       	dc.b $B3, $E1
00023317 33ED                       	dc.b $33, $ED
00023319 03F1                       	dc.b $3, $F1
0002331B 03F2                       	dc.b $3, $F2
0002331D 05                         DPLCS_27F: 	dc.b $5
0002331E 83F3                       	dc.b $83, $F3
00023320 13FC                       	dc.b $13, $FC
00023322 53FE                       	dc.b $53, $FE
00023324 1404                       	dc.b $14, $4
00023326 0406                       	dc.b $4, $6
00023328 05                         DPLCS_28A: 	dc.b $5
00023329 8407                       	dc.b $84, $7
0002332B 1410                       	dc.b $14, $10
0002332D 53FE                       	dc.b $53, $FE
0002332F 1404                       	dc.b $14, $4
00023331 0406                       	dc.b $4, $6
00023333 02                         DPLCS_295: 	dc.b $2
00023334 8412                       	dc.b $84, $12
00023336 741B                       	dc.b $74, $1B
00023338 03                         DPLCS_29A: 	dc.b $3
00023339 8423                       	dc.b $84, $23
0002333B 242C                       	dc.b $24, $2C
0002333D 142F                       	dc.b $14, $2F
0002333F 02                         DPLCS_2A1: 	dc.b $2
00023340 8431                       	dc.b $84, $31
00023342 743A                       	dc.b $74, $3A
00023344 03                         DPLCS_2A6: 	dc.b $3
00023345 8423                       	dc.b $84, $23
00023347 2442                       	dc.b $24, $42
00023349 1445                       	dc.b $14, $45
0002334B 02                         DPLCS_2AD: 	dc.b $2
0002334C 5447                       	dc.b $54, $47
0002334E B44D                       	dc.b $B4, $4D
00023350 03                         DPLCS_2B2: 	dc.b $3
00023351 8459                       	dc.b $84, $59
00023353 3462                       	dc.b $34, $62
00023355 0466                       	dc.b $4, $66
00023357 03                         DPLCS_2B9: 	dc.b $3
00023358 7467                       	dc.b $74, $67
0002335A 146F                       	dc.b $14, $6F
0002335C B471                       	dc.b $B4, $71
0002335E 05                         DPLCS_2C0: 	dc.b $5
0002335F 747D                       	dc.b $74, $7D
00023361 1485                       	dc.b $14, $85
00023363 5487                       	dc.b $54, $87
00023365 348D                       	dc.b $34, $8D
00023367 0491                       	dc.b $4, $91
00023369 05                         DPLCS_2CB: 	dc.b $5
0002336A 7492                       	dc.b $74, $92
0002336C 1485                       	dc.b $14, $85
0002336E 549A                       	dc.b $54, $9A
00023370 348D                       	dc.b $34, $8D
00023372 0491                       	dc.b $4, $91
00023374 02                         DPLCS_2D6: 	dc.b $2
00023375 24A0                       	dc.b $24, $A0
00023377 F4A3                       	dc.b $F4, $A3
00023379 03                         DPLCS_2DB: 	dc.b $3
0002337A 24B3                       	dc.b $24, $B3
0002337C B4B6                       	dc.b $B4, $B6
0002337E 24C2                       	dc.b $24, $C2
00023380 01                         DPLCS_2E2: 	dc.b $1
00023381 B4C5                       	dc.b $B4, $C5
00023383 01                         DPLCS_2E5: 	dc.b $1
00023384 54D1                       	dc.b $54, $D1
00023386 01                         DPLCS_2E8: 	dc.b $1
00023387 14D7                       	dc.b $14, $D7
00023389 03                         DPLCS_2EB: 	dc.b $3
0002338A 738C                       	dc.b $73, $8C
0002338C 3394                       	dc.b $33, $94
0002338E 2398                       	dc.b $23, $98
00023390 03                         DPLCS_2F2: 	dc.b $3
00023391 73A4                       	dc.b $73, $A4
00023393 03AC                       	dc.b $3, $AC
00023395 33AD                       	dc.b $33, $AD
00023397 03                         DPLCS_2F9: 	dc.b $3
00023398 B4D9                       	dc.b $B4, $D9
0002339A 14E5                       	dc.b $14, $E5
0002339C 34E7                       	dc.b $34, $E7
0002339E 03                         DPLCS_300: 	dc.b $3
0002339F 54EB                       	dc.b $54, $EB
000233A1 B4F1                       	dc.b $B4, $F1
000233A3 1074                       	dc.b $10, $74
000233A5 02                         DPLCS_307: 	dc.b $2
000233A6 F4FD                       	dc.b $F4, $FD
000233A8 250D                       	dc.b $25, $D
000233AA 02                         DPLCS_30C: 	dc.b $2
000233AB F510                       	dc.b $F5, $10
000233AD 1520                       	dc.b $15, $20
000233B0 00                         	even
000233B0 00                         	even
000233B0                            
000233B0                            ; ---------------------------------------------------------------------------
000233B0                            ; Uncompressed graphics	- Sonic
000233B0                            ; ---------------------------------------------------------------------------
000233B0                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002D7F0                            		even
0002D7F0                            ; ---------------------------------------------------------------------------
0002D7F0                            ; Compressed graphics - various
0002D7F0                            ; ---------------------------------------------------------------------------
0002D7F0                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002D8F4                            		even
0002D8F4                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002D92E                            		even
0002D92E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002DAC4                            		even
0002DAC4                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002DC0C                            		even
0002DC0C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002DD16                            		even
0002DD16                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002DD68                            		even
0002DD68                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002DFB0                            		even
0002DFB0                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E136                            		even
0002E136                            ; ---------------------------------------------------------------------------
0002E136                            ; Sprite mappings - walls of the special stage
0002E136                            ; ---------------------------------------------------------------------------
0002E136                            Map_SSWalls:
0002E136                            	include "_maps\SSwalls.asm"
0002E136                            ; ---------------------------------------------------------------------------
0002E136                            ; Sprite mappings - walls of the special stage
0002E136                            ; ---------------------------------------------------------------------------
0002E136 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002E13A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002E13E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002E142 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002E146 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002E14A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002E14E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002E152 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002E156 01                         byte_2C584:	dc.b 1
0002E157 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002E15C 01                         byte_2C58A:	dc.b 1
0002E15D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002E162 01                         byte_2C590:	dc.b 1
0002E163 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002E168 01                         byte_2C596:	dc.b 1
0002E169 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002E16E 01                         byte_2C59C:	dc.b 1
0002E16F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002E174 01                         byte_2C5A2:	dc.b 1
0002E175 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002E17A 01                         byte_2C5A8:	dc.b 1
0002E17B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002E180 01                         byte_2C5AE:	dc.b 1
0002E181 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002E186 01                         byte_2C5B4:	dc.b 1
0002E187 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002E18C 01                         byte_2C5BA:	dc.b 1
0002E18D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002E192 01                         byte_2C5C0:	dc.b 1
0002E193 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002E198 01                         byte_2C5C6:	dc.b 1
0002E199 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002E19E 01                         byte_2C5CC:	dc.b 1
0002E19F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002E1A4 01                         byte_2C5D2:	dc.b 1
0002E1A5 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002E1AA 01                         byte_2C5D8:	dc.b 1
0002E1AB F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002E1B0 01                         byte_2C5DE:	dc.b 1
0002E1B1 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002E1B6                            		even
0002E1B6                            		even
0002E1B6                            ; ---------------------------------------------------------------------------
0002E1B6                            ; Compressed graphics - special stage
0002E1B6                            ; ---------------------------------------------------------------------------
0002E1B6                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002EAEE                            		even
0002EAEE                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002EC22                            		even
0002EC22                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002F8B2                            		even
0002F8B2                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002FBB2                            		even
0002FBB2                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000300A6                            		even
000300A6                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00030194                            		even
00030194                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00030264                            		even
00030264                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003035A                            		even
0003035A                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000303B8                            		even
000303B8                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003044A                            		even
0003044A                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003050C                            		even
0003050C                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000305DA                            		even
000305DA                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000306A6                            		even
000306A6                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003076E                            		even
0003076E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030838                            		even
00030838                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030908                            		even
00030908                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030AFC                            		even
00030AFC                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00030C64                            		even
00030C64                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00030D14                            		even
00030D14                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00030DEE                            		even
00030DEE                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00030E72                            		even
00030E72                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00030FF0                            		even
00030FF0                            ; ---------------------------------------------------------------------------
00030FF0                            ; Compressed graphics - GHZ stuff
00030FF0                            ; ---------------------------------------------------------------------------
00030FF0                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003103A                            		even
0003103A                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00031154                            		even
00031154                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00031240                            		even
00031240                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00031288                            		even
00031288                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00031426                            		even
00031426                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000314A2                            		even
000314A2                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000316B6                            		even
000316B6                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000317E2                            		even
000317E2                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00031910                            		even
00031910                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000319AE                            		even
000319AE                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031A0E                            		even
00031A0E                            ; ---------------------------------------------------------------------------
00031A0E                            ; Compressed graphics - LZ stuff
00031A0E                            ; ---------------------------------------------------------------------------
00031A0E                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00031B32                            		even
00031B32                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00032326                            		even
00032326                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000324A6                            		even
000324A6                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00032610                            		even
00032610                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00032C66                            		even
00032C66                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00032D1C                            		even
00032D1C                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00032DBE                            		even
00032DBE                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00032F1A                            		even
00032F1A                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00032F7E                            		even
00032F7E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000330D0                            		even
000330D0                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000335B2                            		even
000335B2                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00033722                            		even
00033722                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000339DA                            		even
000339DA                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00033B12                            		even
00033B12                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00033C3C                            		even
00033C3C                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00033D4C                            		even
00033D4C                            ; ---------------------------------------------------------------------------
00033D4C                            ; Compressed graphics - MZ stuff
00033D4C                            ; ---------------------------------------------------------------------------
00033D4C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00033FDA                            		even
00033FDA                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00034098                            		even
00034098                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00034150                            		even
00034150                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000341A4                            		even
000341A4                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00034482                            		even
00034482                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00034D98                            		even
00034D98                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00034EFC                            		even
00034EFC                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00034F84                            		even
00034F84                            ; ---------------------------------------------------------------------------
00034F84                            ; Compressed graphics - SLZ stuff
00034F84                            ; ---------------------------------------------------------------------------
00034F84                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000351C0                            		even
000351C0                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00035306                            		even
00035306                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003554A                            		even
0003554A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000355AC                            		even
000355AC                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003568E                            		even
0003568E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00035870                            		even
00035870                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003597C                            		even
0003597C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00035A20                            		even
00035A20                            ; ---------------------------------------------------------------------------
00035A20                            ; Compressed graphics - SYZ stuff
00035A20                            ; ---------------------------------------------------------------------------
00035A20                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00035B8A                            		even
00035B8A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00035BEC                            		even
00035BEC                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00035CCE                            		even
00035CCE                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00035F5C                            		even
00035F5C                            ; ---------------------------------------------------------------------------
00035F5C                            ; Compressed graphics - SBZ stuff
00035F5C                            ; ---------------------------------------------------------------------------
00035F5C                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00035FB0                            		even
00035FB0                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003624C                            		even
0003624C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00036450                            		even
00036450                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000365EE                            		even
000365EE                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003691E                            		even
0003691E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036AFC                            		even
00036AFC                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00036B54                            		even
00036B54                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00036CD4                            		even
00036CD4                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00036DD2                            		even
00036DD2                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00036F5E                            		even
00036F5E                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00036FAE                            		even
00036FAE                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00037006                            		even
00037006                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00037102                            		even
00037102                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00037218                            		even
00037218                            ; ---------------------------------------------------------------------------
00037218                            ; Compressed graphics - enemies
00037218                            ; ---------------------------------------------------------------------------
00037218                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000375D8                            		even
000375D8                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00037AC6                            		even
00037AC6                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00037E88 00                         		even
00037E88                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00038070                            		even
00038070                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003875A                            		even
0003875A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
000389C2                            		even
000389C2                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00038C4C                            		even
00038C4C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00039170                            		even
00039170                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00039366                            		even
00039366                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039984                            		even
00039984                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00039D6C                            		even
00039D6C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003A068                            		even
0003A068                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003A2B0                            		even
0003A2B0                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A548                            		even
0003A548                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003A726                            		even
0003A726                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003A8B4                            		even
0003A8B4                            ; ---------------------------------------------------------------------------
0003A8B4                            ; Compressed graphics - various
0003A8B4                            ; ---------------------------------------------------------------------------
0003A8B4                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003AEC2                            		even
0003AEC2                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003AFB8                            		even
0003AFB8                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003B0BE                            		even
0003B0BE                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003B1B2                            		even
0003B1B2                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B60A                            		even
0003B60A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003BC70                            		even
0003BC70                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003BD20                            		even
0003BD20                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003BEB2                            		even
0003BEB2                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003BFB4                            		even
0003BFB4                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003C090                            		even
0003C090                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C50C                            		even
0003C50C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C5CC                            		even
0003C5CC                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C740                            		even
0003C740                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003CA42                            		even
0003CA42                            ; ---------------------------------------------------------------------------
0003CA42                            ; Compressed graphics - continue screen
0003CA42                            ; ---------------------------------------------------------------------------
0003CA42                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003CCF2                            		even
0003CCF2                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003CF2C                            		even
0003CF2C                            ; ---------------------------------------------------------------------------
0003CF2C                            ; Compressed graphics - animals
0003CF2C                            ; ---------------------------------------------------------------------------
0003CF2C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003D084                            		even
0003D084                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003D1E0                            		even
0003D1E0                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003D35C                            		even
0003D35C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003D478                            		even
0003D478                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D5AE                            		even
0003D5AE                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D6E8                            		even
0003D6E8                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003D844                            		even
0003D844                            ; ---------------------------------------------------------------------------
0003D844                            ; Compressed graphics - primary patterns and block mappings
0003D844                            ; ---------------------------------------------------------------------------
0003D844                            Blk16_GHZ:	incbin	map16\ghz.bin
0003E158                            		even
0003E158                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003F76A                            		even
0003F76A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00040AFE                            		even
00040AFE                            Blk256_GHZ:	incbin	map256\ghz.bin
00042DF6                            		even
00042DF6                            Blk16_LZ:	incbin	map16\lz.bin
00043120                            		even
00043120                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00044C68                            		even
00044C68                            Blk256_LZ:	incbin	map256\lz.bin
00047458                            		even
00047458                            Blk16_MZ:	incbin	map16\mz.bin
00047C62                            		even
00047C62                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004A4A6                            		even
0004A4A6                            Blk256_MZ:	incbin	map256\mz.bin
0004BC66                            		even
0004BC66                            Blk16_SLZ:	incbin	map16\slz.bin
0004BF4C                            		even
0004BF4C                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004D06E                            		even
0004D06E                            Blk256_SLZ:	incbin	map256\slz.bin
0004D228                            		even
0004D228                            Blk16_SYZ:	incbin	map16\syz.bin
0004DABC                            		even
0004DABC                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005112A                            		even
0005112A                            Blk256_SYZ:	incbin	map256\syz.bin
000534AC                            		even
000534AC                            Blk16_SBZ:	incbin	map16\sbz.bin
00054346                            		even
00054346                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00056AF2                            		even
00056AF2                            Blk256_SBZ:	incbin	map256\sbz.bin
00059542                            		even
00059542                            ; ---------------------------------------------------------------------------
00059542                            ; Compressed graphics - bosses and ending sequence
00059542                            ; ---------------------------------------------------------------------------
00059542                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00059D5C 00                         		even
00059D5C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005A046                            		even
0005A046                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005A8CA                            		even
0005A8CA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005B0F6                            		even
0005B0F6                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005B85E                            		even
0005B85E                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005BDDE                            		even
0005BDDE                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005BEFE                            		even
0005BEFE                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005C0FC                            		even
0005C0FC                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005D2DA                            		even
0005D2DA                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005DC1E                            		even
0005DC1E                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005DFF4                            		even
0005DFF4                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005E584                            		even
0005E584                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005E80C                            		even
0005E80C                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0005EE0A                            		even
0005EE0A                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0005F092                            		even
0005F092                            		incbin	misc\padding2.bin
0005F196                            		even
0005F196                            ; ---------------------------------------------------------------------------
0005F196                            ; Collision data
0005F196                            ; ---------------------------------------------------------------------------
0005F196                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0005F296                            		even
0005F296                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00060296                            		even
00060296                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00061296                            		even
00061296                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006144E 00                         		even
0006144E                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00061516                            		even
00061516                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000616A6                            		even
000616A6                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006189A                            		even
0006189A                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00061A8E                            		even
00061A8E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00061CE6                            		even
00061CE6                            ; ---------------------------------------------------------------------------
00061CE6                            ; Special layouts
00061CE6                            ; ---------------------------------------------------------------------------
00061CE6                            SS_1:		incbin	sslayout\1.bin
00061F60                            		even
00061F60                            SS_2:		incbin	sslayout\2.bin
00062372                            		even
00062372                            SS_3:		incbin	sslayout\3.bin
000626CE                            		even
000626CE                            SS_4:		incbin	sslayout\4.bin
00062BA8                            		even
00062BA8                            SS_5:		incbin	sslayout\5.bin
0006307A                            		even
0006307A                            SS_6:		incbin	sslayout\6.bin
0006338A                            		even
0006338A                            ; ---------------------------------------------------------------------------
0006338A                            ; Animated uncompressed graphics
0006338A                            ; ---------------------------------------------------------------------------
0006338A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006358A                            		even
0006358A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006398A                            		even
0006398A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00063E0A                            		even
00063E0A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006410A                            		even
0006410A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006470A                            		even
0006470A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00064A0A                            		even
00064A0A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006548A                            		even
0006548A                            
0006548A                            ; ---------------------------------------------------------------------------
0006548A                            ; Level	layout index
0006548A                            ; ---------------------------------------------------------------------------
0006548A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00065490 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00065496 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006549C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000654A2 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000654A8 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000654AE 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000654B4 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000654BA 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000654C0 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000654C6 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000654CC 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000654D2 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000654D8 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000654DE 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000654E4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000654EA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000654F0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000654F6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000654FC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00065502 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00065508 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006550E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00065514 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006551A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00065520 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00065526 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006552C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00065532                            
00065532                            Level_GHZ1:	incbin	levels\ghz1.bin
00065624                            		even
00065624 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00065628                            Level_GHZ2:	incbin	levels\ghz2.bin
000656F0                            		even
000656F0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000656F4                            Level_GHZ3:	incbin	levels\ghz3.bin
00065816                            		even
00065816                            Level_GHZbg:	incbin	levels\ghzbg.bin
00065838                            		even
00065838 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006583C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00065840                            
00065840                            Level_LZ1:	incbin	levels\lz1.bin
00065942                            		even
00065942                            Level_LZbg:	incbin	levels\lzbg.bin
00065A44                            		even
00065A44 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00065A48                            Level_LZ2:	incbin	levels\lz2.bin
00065AE2                            		even
00065AE2 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00065AE6                            Level_LZ3:	incbin	levels\lz3.bin
00065C00                            		even
00065C00 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00065C04                            Level_SBZ3:	incbin	levels\sbz3.bin
00065CBE                            		even
00065CBE 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00065CC2                            
00065CC2                            Level_MZ1:	incbin	levels\mz1.bin
00065D60                            		even
00065D60                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00065DDA                            		even
00065DDA                            Level_MZ2:	incbin	levels\mz2.bin
00065E7E                            		even
00065E7E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00065F10                            		even
00065F10 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00065F14                            Level_MZ3:	incbin	levels\mz3.bin
00065FF6                            		even
00065FF6                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006609A                            		even
0006609A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006609E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000660A2                            
000660A2                            Level_SLZ1:	incbin	levels\slz1.bin
000661B4                            		even
000661B4                            Level_SLZbg:	incbin	levels\slzbg.bin
000661CE                            		even
000661CE                            Level_SLZ2:	incbin	levels\slz2.bin
000662BE                            		even
000662BE                            Level_SLZ3:	incbin	levels\slz3.bin
000663D8                            		even
000663D8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000663DC                            
000663DC                            Level_SYZ1:	incbin	levels\syz1.bin
00066498 00                         		even
00066498                            Level_SYZbg:	incbin	levels\syzbg.bin
000664D2                            		even
000664D2 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000664D6                            Level_SYZ2:	incbin	levels\syz2.bin
000665DA                            		even
000665DA 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000665DE                            Level_SYZ3:	incbin	levels\syz3.bin
00066738 00                         		even
00066738 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006673C 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00066740                            
00066740                            Level_SBZ1:	incbin	levels\sbz1.bin
00066862                            		even
00066862                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000668A0                            		even
000668A0                            Level_SBZ2:	incbin	levels\sbz2.bin
000669E2                            		even
000669E2                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00066B4C                            		even
00066B4C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00066B50 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00066B54                            Level_End:	incbin	levels\ending.bin
00066B84 00                         		even
00066B84 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00066B88                            
00066B88                            ; ---------------------------------------------------------------------------
00066B88                            ; Animated uncompressed giant ring graphics
00066B88                            ; ---------------------------------------------------------------------------
00066B88                            Art_BigRing:	incbin	artunc\bigring.bin
000677C8                            		even
000677C8                            
000677C8                            		incbin	misc\padding3.bin
00067864                            		even
00067864                            
00067864                            ; ---------------------------------------------------------------------------
00067864                            ; Sprite locations index
00067864                            ; ---------------------------------------------------------------------------
00067864 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067868 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006786C 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067870 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067874 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067878 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006787C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067880 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067884 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067888 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006788C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067890 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067894 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067898 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006789C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678A0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678A4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678A8 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678AC 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678B0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678B4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678B8 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678BC 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678C0 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678C4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678C8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678CC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678D0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000678D4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000678D8 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
000678DC 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
000678E0 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000678E4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000678E8 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000678EC 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000678F0 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000678F4 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000678FA                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006811C                            		even
0006811C                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000681D0                            		even
000681D0                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006888A                            		even
0006888A                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00068CF8                            		even
00068CF8                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006903A                            		even
0006903A                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006961C                            		even
0006961C                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00069AB4                            		even
00069AB4                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00069AE6                            		even
00069AE6                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00069B18                            		even
00069B18                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00069B4A                            		even
00069B4A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00069B7C                            		even
00069B7C                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00069BC6                            		even
00069BC6                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00069C04                            		even
00069C04                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00069F70                            		even
00069F70                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006A41A                            		even
0006A41A                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006A990                            		even
0006A990                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006AED0                            		even
0006AED0                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006B338                            		even
0006B338                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006B91A                            		even
0006B91A                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006BF86                            		even
0006BF86                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006C4F0                            		even
0006C4F0                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006CAF6                            		even
0006CAF6                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006D234                            		even
0006D234                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006D912                            		even
0006D912                            ObjPos_FZ:	incbin	objpos\fz.bin
0006D924                            		even
0006D924                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006D956                            		even
0006D956                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006D988                            		even
0006D988                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006D9BA                            		even
0006D9BA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006D9EC                            		even
0006D9EC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006DA1E                            		even
0006DA1E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006DA56                            		even
0006DA56                            ObjPos_End:	incbin	objpos\ending.bin
0006DBB2                            		even
0006DBB2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006DBB8                            ; ---------------------------------------------------------------------------
0006DBB8                            		incbin	misc\padding4.bin
0006E1E2                            		even
0006E1E2                            
0006E1E2 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006E1E6 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006E1EA 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006E1EE 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006E1F2 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006E1F6 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006E1FA                            ; ---------------------------------------------------------------------------
0006E1FA                            ; PSG instruments used in music
0006E1FA                            ; ---------------------------------------------------------------------------
0006E1FA 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006E206 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006E212 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006E21E                            PSG1:		incbin	sound\psg1.bin
0006E235                            PSG2:		incbin	sound\psg2.bin
0006E23C                            PSG3:		incbin	sound\psg3.bin
0006E24D                            PSG4:		incbin	sound\psg4.bin
0006E258                            PSG6:		incbin	sound\psg6.bin
0006E267                            PSG5:		incbin	sound\psg5.bin
0006E291                            PSG7:		incbin	sound\psg7.bin
0006E2AD                            PSG8:		incbin	sound\psg8.bin
0006E2D5                            PSG9:		incbin	sound\psg9.bin
0006E2E6                            
0006E2E6 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006E2EE                            ; ---------------------------------------------------------------------------
0006E2EE                            ; Music	Pointers
0006E2EE                            ; ---------------------------------------------------------------------------
0006E2EE 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006E2F6 0000 0000 0000 0000        		dc.l Music83, Music84
0006E2FE 0000 0000 0000 0000        		dc.l Music85, Music86
0006E306 0000 0000 0000 0000        		dc.l Music87, Music88
0006E30E 0000 0000 0000 0000        		dc.l Music89, Music8A
0006E316 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006E31E 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006E326 0000 0000 0000 0000        		dc.l Music8F, Music90
0006E32E 0000 0000 0000 0000        		dc.l Music91, Music92
0006E336 0000 0000                  		dc.l Music93
0006E33A                            ; ---------------------------------------------------------------------------
0006E33A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006E33A                            ; ---------------------------------------------------------------------------
0006E33A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006E34A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006E35A 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006E36A 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006E37A 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006E38A 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006E39A 9090 9090                  		dc.b $90, $90, $90, $90
0006E39E                            
0006E39E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E39E                            
0006E39E                            
0006E39E                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006E39E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006E3A6 4E71                       		nop	
0006E3A8 4E71                       		nop	
0006E3AA 4E71                       		nop	
0006E3AC                            
0006E3AC                            loc_71B5A:
0006E3AC 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006E3B4 66F6                       		bne.s	loc_71B5A
0006E3B6                            
0006E3B6 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006E3BE 6700                       		beq.s	loc_71B82
0006E3C0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006E3C8 4E71                       		nop	
0006E3CA 4E71                       		nop	
0006E3CC 4E71                       		nop	
0006E3CE 4E71                       		nop	
0006E3D0 4E71                       		nop	
0006E3D2 60CA                       		bra.s	sub_71B4C
0006E3D4                            ; ===========================================================================
0006E3D4                            
0006E3D4                            loc_71B82:
0006E3D4 4DF9 00FF F000             		lea	($FFF000).l,a6
0006E3DA 422E 000E                  		clr.b	$E(a6)
0006E3DE 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006E3E2 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006E3E6 532E 0001                  		subq.b	#1,1(a6)
0006E3EA 6600                       		bne.s	loc_71B9E
0006E3EC 4EBA 0000                  		jsr	sub_7260C(pc)
0006E3F0                            
0006E3F0                            loc_71B9E:
0006E3F0 102E 0004                  		move.b	4(a6),d0
0006E3F4 6700                       		beq.s	loc_71BA8
0006E3F6 4EBA 0000                  		jsr	sub_72504(pc)
0006E3FA                            
0006E3FA                            loc_71BA8:
0006E3FA 4A2E 0024                  		tst.b	$24(a6)
0006E3FE 6700                       		beq.s	loc_71BB2
0006E400 4EBA 0000                  		jsr	sub_7267C(pc)
0006E404                            
0006E404                            loc_71BB2:
0006E404 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006E408 6700                       		beq.s	loc_71BBC	; if not, branch
0006E40A 4EBA 0000                  		jsr	Sound_Play(pc)
0006E40E                            
0006E40E                            loc_71BBC:
0006E40E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006E414 6700                       		beq.s	loc_71BC8
0006E416 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006E41A                            
0006E41A                            loc_71BC8:
0006E41A 4BEE 0040                  		lea	$40(a6),a5
0006E41E 4A15                       		tst.b	(a5)
0006E420 6A00                       		bpl.s	loc_71BD4
0006E422 4EBA 0000                  		jsr	sub_71C4E(pc)
0006E426                            
0006E426                            loc_71BD4:
0006E426 422E 0008                  		clr.b	8(a6)
0006E42A 7E05                       		moveq	#5,d7
0006E42C                            
0006E42C                            loc_71BDA:
0006E42C DAFC 0030                  		adda.w	#$30,a5
0006E430 4A15                       		tst.b	(a5)
0006E432 6A00                       		bpl.s	loc_71BE6
0006E434 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E438                            
0006E438                            loc_71BE6:
0006E438 51CF FFF2                  		dbf	d7,loc_71BDA
0006E43C                            
0006E43C 7E02                       		moveq	#2,d7
0006E43E                            
0006E43E                            loc_71BEC:
0006E43E DAFC 0030                  		adda.w	#$30,a5
0006E442 4A15                       		tst.b	(a5)
0006E444 6A00                       		bpl.s	loc_71BF8
0006E446 4EBA 0000                  		jsr	sub_72850(pc)
0006E44A                            
0006E44A                            loc_71BF8:
0006E44A 51CF FFF2                  		dbf	d7,loc_71BEC
0006E44E                            
0006E44E 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006E454 7E02                       		moveq	#2,d7
0006E456                            
0006E456                            loc_71C04:
0006E456 DAFC 0030                  		adda.w	#$30,a5
0006E45A 4A15                       		tst.b	(a5)
0006E45C 6A00                       		bpl.s	loc_71C10
0006E45E 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E462                            
0006E462                            loc_71C10:
0006E462 51CF FFF2                  		dbf	d7,loc_71C04
0006E466                            
0006E466 7E02                       		moveq	#2,d7
0006E468                            
0006E468                            loc_71C16:
0006E468 DAFC 0030                  		adda.w	#$30,a5
0006E46C 4A15                       		tst.b	(a5)
0006E46E 6A00                       		bpl.s	loc_71C22
0006E470 4EBA 0000                  		jsr	sub_72850(pc)
0006E474                            
0006E474                            loc_71C22:
0006E474 51CF FFF2                  		dbf	d7,loc_71C16
0006E478 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006E47E DAFC 0030                  		adda.w	#$30,a5
0006E482 4A15                       		tst.b	(a5)
0006E484 6A00                       		bpl.s	loc_71C38
0006E486 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E48A                            
0006E48A                            loc_71C38:
0006E48A DAFC 0030                  		adda.w	#$30,a5
0006E48E 4A15                       		tst.b	(a5)
0006E490 6A00                       		bpl.s	loc_71C44
0006E492 4EBA 0000                  		jsr	sub_72850(pc)
0006E496                            
0006E496                            loc_71C44:
0006E496 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006E49E 4E75                       		rts	
0006E4A0                            ; End of function sub_71B4C
0006E4A0                            
0006E4A0                            
0006E4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E4A0                            
0006E4A0                            
0006E4A0                            sub_71C4E:				; XREF: sub_71B4C
0006E4A0 532D 000E                  		subq.b	#1,$E(a5)
0006E4A4 6600                       		bne.s	locret_71CAA
0006E4A6 1D7C 0080 0008             		move.b	#$80,8(a6)
0006E4AC 286D 0004                  		movea.l	4(a5),a4
0006E4B0                            
0006E4B0                            loc_71C5E:
0006E4B0 7A00                       		moveq	#0,d5
0006E4B2 1A1C                       		move.b	(a4)+,d5
0006E4B4 0C05 00E0                  		cmpi.b	#-$20,d5
0006E4B8 6500                       		bcs.s	loc_71C6E
0006E4BA 4EBA 0000                  		jsr	sub_72A5A(pc)
0006E4BE 60F0                       		bra.s	loc_71C5E
0006E4C0                            ; ===========================================================================
0006E4C0                            
0006E4C0                            loc_71C6E:
0006E4C0 4A05                       		tst.b	d5
0006E4C2 6A00                       		bpl.s	loc_71C84
0006E4C4 1B45 0010                  		move.b	d5,$10(a5)
0006E4C8 1A1C                       		move.b	(a4)+,d5
0006E4CA 6A00                       		bpl.s	loc_71C84
0006E4CC 534C                       		subq.w	#1,a4
0006E4CE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006E4D4 6000                       		bra.s	loc_71C88
0006E4D6                            ; ===========================================================================
0006E4D6                            
0006E4D6                            loc_71C84:
0006E4D6 4EBA 0000                  		jsr	sub_71D40(pc)
0006E4DA                            
0006E4DA                            loc_71C88:
0006E4DA 2B4C 0004                  		move.l	a4,4(a5)
0006E4DE 0815 0002                  		btst	#2,(a5)
0006E4E2 6600                       		bne.s	locret_71CAA
0006E4E4 7000                       		moveq	#0,d0
0006E4E6 102D 0010                  		move.b	$10(a5),d0
0006E4EA 0C00 0080                  		cmpi.b	#$80,d0
0006E4EE 6700                       		beq.s	locret_71CAA
0006E4F0 0800 0003                  		btst	#3,d0
0006E4F4 6600                       		bne.s	loc_71CAC
0006E4F6 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006E4FC                            
0006E4FC                            locret_71CAA:
0006E4FC 4E75                       		rts	
0006E4FE                            ; ===========================================================================
0006E4FE                            
0006E4FE                            loc_71CAC:
0006E4FE 0400 0088                  		subi.b	#$88,d0
0006E502 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006E506 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006E50C 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006E514 4E75                       		rts	
0006E516                            ; End of function sub_71C4E
0006E516                            
0006E516                            ; ===========================================================================
0006E516 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006E51C                            
0006E51C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E51C                            
0006E51C                            
0006E51C                            sub_71CCA:				; XREF: sub_71B4C
0006E51C 532D 000E                  		subq.b	#1,$E(a5)
0006E520 6600                       		bne.s	loc_71CE0
0006E522 0895 0004                  		bclr	#4,(a5)
0006E526 4EBA 0000                  		jsr	sub_71CEC(pc)
0006E52A 4EBA 0000                  		jsr	sub_71E18(pc)
0006E52E 6000 0000                  		bra.w	loc_726E2
0006E532                            ; ===========================================================================
0006E532                            
0006E532                            loc_71CE0:
0006E532 4EBA 0000                  		jsr	sub_71D9E(pc)
0006E536 4EBA 0000                  		jsr	sub_71DC6(pc)
0006E53A 6000 0000                  		bra.w	loc_71E24
0006E53E                            ; End of function sub_71CCA
0006E53E                            
0006E53E                            
0006E53E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E53E                            
0006E53E                            
0006E53E                            sub_71CEC:				; XREF: sub_71CCA
0006E53E 286D 0004                  		movea.l	4(a5),a4
0006E542 0895 0001                  		bclr	#1,(a5)
0006E546                            
0006E546                            loc_71CF4:
0006E546 7A00                       		moveq	#0,d5
0006E548 1A1C                       		move.b	(a4)+,d5
0006E54A 0C05 00E0                  		cmpi.b	#-$20,d5
0006E54E 6500                       		bcs.s	loc_71D04
0006E550 4EBA 0000                  		jsr	sub_72A5A(pc)
0006E554 60F0                       		bra.s	loc_71CF4
0006E556                            ; ===========================================================================
0006E556                            
0006E556                            loc_71D04:
0006E556 4EBA 0000                  		jsr	sub_726FE(pc)
0006E55A 4A05                       		tst.b	d5
0006E55C 6A00                       		bpl.s	loc_71D1A
0006E55E 4EBA 0000                  		jsr	sub_71D22(pc)
0006E562 1A1C                       		move.b	(a4)+,d5
0006E564 6A00                       		bpl.s	loc_71D1A
0006E566 534C                       		subq.w	#1,a4
0006E568 6000 0000                  		bra.w	sub_71D60
0006E56C                            ; ===========================================================================
0006E56C                            
0006E56C                            loc_71D1A:
0006E56C 4EBA 0000                  		jsr	sub_71D40(pc)
0006E570 6000 0000                  		bra.w	sub_71D60
0006E574                            ; End of function sub_71CEC
0006E574                            
0006E574                            
0006E574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E574                            
0006E574                            
0006E574                            sub_71D22:				; XREF: sub_71CEC
0006E574 0405 0080                  		subi.b	#$80,d5
0006E578 6700                       		beq.s	loc_71D58
0006E57A DA2D 0008                  		add.b	8(a5),d5
0006E57E 0245 007F                  		andi.w	#$7F,d5
0006E582 E34D                       		lsl.w	#1,d5
0006E584 41FA 0000                  		lea	word_72790(pc),a0
0006E588 3C30 5000                  		move.w	(a0,d5.w),d6
0006E58C 3B46 0010                  		move.w	d6,$10(a5)
0006E590 4E75                       		rts	
0006E592                            ; End of function sub_71D22
0006E592                            
0006E592                            
0006E592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E592                            
0006E592                            
0006E592                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006E592 1005                       		move.b	d5,d0
0006E594 122D 0002                  		move.b	2(a5),d1
0006E598                            
0006E598                            loc_71D46:
0006E598 5301                       		subq.b	#1,d1
0006E59A 6700                       		beq.s	loc_71D4E
0006E59C D005                       		add.b	d5,d0
0006E59E 60F8                       		bra.s	loc_71D46
0006E5A0                            ; ===========================================================================
0006E5A0                            
0006E5A0                            loc_71D4E:
0006E5A0 1B40 000F                  		move.b	d0,$F(a5)
0006E5A4 1B40 000E                  		move.b	d0,$E(a5)
0006E5A8 4E75                       		rts	
0006E5AA                            ; End of function sub_71D40
0006E5AA                            
0006E5AA                            ; ===========================================================================
0006E5AA                            
0006E5AA                            loc_71D58:				; XREF: sub_71D22
0006E5AA 08D5 0001                  		bset	#1,(a5)
0006E5AE 426D 0010                  		clr.w	$10(a5)
0006E5B2                            
0006E5B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E5B2                            
0006E5B2                            
0006E5B2                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006E5B2 2B4C 0004                  		move.l	a4,4(a5)
0006E5B6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006E5BC 0815 0004                  		btst	#4,(a5)
0006E5C0 6600                       		bne.s	locret_71D9C
0006E5C2 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006E5C8 422D 000C                  		clr.b	$C(a5)
0006E5CC 0815 0003                  		btst	#3,(a5)
0006E5D0 6700                       		beq.s	locret_71D9C
0006E5D2 206D 0014                  		movea.l	$14(a5),a0
0006E5D6 1B58 0018                  		move.b	(a0)+,$18(a5)
0006E5DA 1B58 0019                  		move.b	(a0)+,$19(a5)
0006E5DE 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006E5E2 1018                       		move.b	(a0)+,d0
0006E5E4 E208                       		lsr.b	#1,d0
0006E5E6 1B40 001B                  		move.b	d0,$1B(a5)
0006E5EA 426D 001C                  		clr.w	$1C(a5)
0006E5EE                            
0006E5EE                            locret_71D9C:
0006E5EE 4E75                       		rts	
0006E5F0                            ; End of function sub_71D60
0006E5F0                            
0006E5F0                            
0006E5F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E5F0                            
0006E5F0                            
0006E5F0                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006E5F0 4A2D 0012                  		tst.b	$12(a5)
0006E5F4 6700                       		beq.s	locret_71DC4
0006E5F6 532D 0012                  		subq.b	#1,$12(a5)
0006E5FA 6600                       		bne.s	locret_71DC4
0006E5FC 08D5 0001                  		bset	#1,(a5)
0006E600 4A2D 0001                  		tst.b	1(a5)
0006E604 6B00 0000                  		bmi.w	loc_71DBE
0006E608 4EBA 0000                  		jsr	sub_726FE(pc)
0006E60C 584F                       		addq.w	#4,sp
0006E60E 4E75                       		rts	
0006E610                            ; ===========================================================================
0006E610                            
0006E610                            loc_71DBE:
0006E610 4EBA 0000                  		jsr	sub_729A0(pc)
0006E614 584F                       		addq.w	#4,sp
0006E616                            
0006E616                            locret_71DC4:
0006E616 4E75                       		rts	
0006E618                            ; End of function sub_71D9E
0006E618                            
0006E618                            
0006E618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E618                            
0006E618                            
0006E618                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006E618 584F                       		addq.w	#4,sp
0006E61A 0815 0003                  		btst	#3,(a5)
0006E61E 6700                       		beq.s	locret_71E16
0006E620 4A2D 0018                  		tst.b	$18(a5)
0006E624 6700                       		beq.s	loc_71DDA
0006E626 532D 0018                  		subq.b	#1,$18(a5)
0006E62A 4E75                       		rts	
0006E62C                            ; ===========================================================================
0006E62C                            
0006E62C                            loc_71DDA:
0006E62C 532D 0019                  		subq.b	#1,$19(a5)
0006E630 6700                       		beq.s	loc_71DE2
0006E632 4E75                       		rts	
0006E634                            ; ===========================================================================
0006E634                            
0006E634                            loc_71DE2:
0006E634 206D 0014                  		movea.l	$14(a5),a0
0006E638 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006E63E 4A2D 001B                  		tst.b	$1B(a5)
0006E642 6600                       		bne.s	loc_71DFE
0006E644 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006E64A 442D 001A                  		neg.b	$1A(a5)
0006E64E 4E75                       		rts	
0006E650                            ; ===========================================================================
0006E650                            
0006E650                            loc_71DFE:
0006E650 532D 001B                  		subq.b	#1,$1B(a5)
0006E654 1C2D 001A                  		move.b	$1A(a5),d6
0006E658 4886                       		ext.w	d6
0006E65A DC6D 001C                  		add.w	$1C(a5),d6
0006E65E 3B46 001C                  		move.w	d6,$1C(a5)
0006E662 DC6D 0010                  		add.w	$10(a5),d6
0006E666 594F                       		subq.w	#4,sp
0006E668                            
0006E668                            locret_71E16:
0006E668 4E75                       		rts	
0006E66A                            ; End of function sub_71DC6
0006E66A                            
0006E66A                            
0006E66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E66A                            
0006E66A                            
0006E66A                            sub_71E18:				; XREF: sub_71CCA
0006E66A 0815 0001                  		btst	#1,(a5)
0006E66E 6600                       		bne.s	locret_71E48
0006E670 3C2D 0010                  		move.w	$10(a5),d6
0006E674 6700                       		beq.s	loc_71E4A
0006E676                            
0006E676                            loc_71E24:				; XREF: sub_71CCA
0006E676 102D 001E                  		move.b	$1E(a5),d0
0006E67A 4880                       		ext.w	d0
0006E67C DC40                       		add.w	d0,d6
0006E67E 0815 0002                  		btst	#2,(a5)
0006E682 6600                       		bne.s	locret_71E48
0006E684 3206                       		move.w	d6,d1
0006E686 E049                       		lsr.w	#8,d1
0006E688 103C 00A4                  		move.b	#-$5C,d0
0006E68C 4EBA 0000                  		jsr	sub_72722(pc)
0006E690 1206                       		move.b	d6,d1
0006E692 103C 00A0                  		move.b	#-$60,d0
0006E696 4EBA 0000                  		jsr	sub_72722(pc)
0006E69A                            
0006E69A                            locret_71E48:
0006E69A 4E75                       		rts	
0006E69C                            ; ===========================================================================
0006E69C                            
0006E69C                            loc_71E4A:
0006E69C 08D5 0001                  		bset	#1,(a5)
0006E6A0 4E75                       		rts	
0006E6A2                            ; End of function sub_71E18
0006E6A2                            
0006E6A2                            ; ===========================================================================
0006E6A2                            
0006E6A2                            loc_71E50:				; XREF: sub_71B4C
0006E6A2 6B00                       		bmi.s	loc_71E94
0006E6A4 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006E6AA 6700 0000                  		beq.w	loc_71EFE
0006E6AE 1D7C 0002 0003             		move.b	#2,3(a6)
0006E6B4 7602                       		moveq	#2,d3
0006E6B6 103C 00B4                  		move.b	#-$4C,d0
0006E6BA 7200                       		moveq	#0,d1
0006E6BC                            
0006E6BC                            loc_71E6A:
0006E6BC 4EBA 0000                  		jsr	sub_7272E(pc)
0006E6C0 4EBA 0000                  		jsr	sub_72764(pc)
0006E6C4 5200                       		addq.b	#1,d0
0006E6C6 51CB FFF4                  		dbf	d3,loc_71E6A
0006E6CA                            
0006E6CA 7602                       		moveq	#2,d3
0006E6CC 7028                       		moveq	#$28,d0
0006E6CE                            
0006E6CE                            loc_71E7C:
0006E6CE 1203                       		move.b	d3,d1
0006E6D0 4EBA 0000                  		jsr	sub_7272E(pc)
0006E6D4 5801                       		addq.b	#4,d1
0006E6D6 4EBA 0000                  		jsr	sub_7272E(pc)
0006E6DA 51CB FFF2                  		dbf	d3,loc_71E7C
0006E6DE                            
0006E6DE 4EBA 0000                  		jsr	sub_729B6(pc)
0006E6E2 6000 FDB2                  		bra.w	loc_71C44
0006E6E6                            ; ===========================================================================
0006E6E6                            
0006E6E6                            loc_71E94:				; XREF: loc_71E50
0006E6E6 422E 0003                  		clr.b	3(a6)
0006E6EA 7630                       		moveq	#$30,d3
0006E6EC 4BEE 0040                  		lea	$40(a6),a5
0006E6F0 7806                       		moveq	#6,d4
0006E6F2                            
0006E6F2                            loc_71EA0:
0006E6F2 0815 0007                  		btst	#7,(a5)
0006E6F6 6700                       		beq.s	loc_71EB8
0006E6F8 0815 0002                  		btst	#2,(a5)
0006E6FC 6600                       		bne.s	loc_71EB8
0006E6FE 103C 00B4                  		move.b	#-$4C,d0
0006E702 122D 000A                  		move.b	$A(a5),d1
0006E706 4EBA 0000                  		jsr	sub_72722(pc)
0006E70A                            
0006E70A                            loc_71EB8:
0006E70A DAC3                       		adda.w	d3,a5
0006E70C 51CC FFE4                  		dbf	d4,loc_71EA0
0006E710                            
0006E710 4BEE 0220                  		lea	$220(a6),a5
0006E714 7802                       		moveq	#2,d4
0006E716                            
0006E716                            loc_71EC4:
0006E716 0815 0007                  		btst	#7,(a5)
0006E71A 6700                       		beq.s	loc_71EDC
0006E71C 0815 0002                  		btst	#2,(a5)
0006E720 6600                       		bne.s	loc_71EDC
0006E722 103C 00B4                  		move.b	#-$4C,d0
0006E726 122D 000A                  		move.b	$A(a5),d1
0006E72A 4EBA 0000                  		jsr	sub_72722(pc)
0006E72E                            
0006E72E                            loc_71EDC:
0006E72E DAC3                       		adda.w	d3,a5
0006E730 51CC FFE4                  		dbf	d4,loc_71EC4
0006E734                            
0006E734 4BEE 0340                  		lea	$340(a6),a5
0006E738 0815 0007                  		btst	#7,(a5)
0006E73C 6700                       		beq.s	loc_71EFE
0006E73E 0815 0002                  		btst	#2,(a5)
0006E742 6600                       		bne.s	loc_71EFE
0006E744 103C 00B4                  		move.b	#-$4C,d0
0006E748 122D 000A                  		move.b	$A(a5),d1
0006E74C 4EBA 0000                  		jsr	sub_72722(pc)
0006E750                            
0006E750                            loc_71EFE:
0006E750 6000 FD44                  		bra.w	loc_71C44
0006E754                            
0006E754                            ; ---------------------------------------------------------------------------
0006E754                            ; Subroutine to	play a sound or	music track
0006E754                            ; ---------------------------------------------------------------------------
0006E754                            
0006E754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E754                            
0006E754                            
0006E754                            Sound_Play:				; XREF: sub_71B4C
0006E754 2079 0006 E1E2             		movea.l	(Go_SoundTypes).l,a0
0006E75A 43EE 000A                  		lea	$A(a6),a1	; load music track number
0006E75E 1616                       		move.b	0(a6),d3
0006E760 7802                       		moveq	#2,d4
0006E762                            
0006E762                            loc_71F12:
0006E762 1011                       		move.b	(a1),d0		; move track number to d0
0006E764 1200                       		move.b	d0,d1
0006E766 4219                       		clr.b	(a1)+
0006E768 0400 0081                  		subi.b	#$81,d0
0006E76C 6500                       		bcs.s	loc_71F3E
0006E76E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006E774 6700                       		beq.s	loc_71F2C
0006E776 1D41 000A                  		move.b	d1,$A(a6)
0006E77A 6000                       		bra.s	loc_71F3E
0006E77C                            ; ===========================================================================
0006E77C                            
0006E77C                            loc_71F2C:
0006E77C 0240 007F                  		andi.w	#$7F,d0
0006E780 1430 0000                  		move.b	(a0,d0.w),d2
0006E784 B403                       		cmp.b	d3,d2
0006E786 6500                       		bcs.s	loc_71F3E
0006E788 1602                       		move.b	d2,d3
0006E78A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0006E78E                            
0006E78E                            loc_71F3E:
0006E78E 51CC FFD2                  		dbf	d4,loc_71F12
0006E792                            
0006E792 4A03                       		tst.b	d3
0006E794 6B00                       		bmi.s	locret_71F4A
0006E796 1C83                       		move.b	d3,0(a6)
0006E798                            
0006E798                            locret_71F4A:
0006E798 4E75                       		rts	
0006E79A                            ; End of function Sound_Play
0006E79A                            
0006E79A                            
0006E79A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E79A                            
0006E79A                            
0006E79A                            Sound_ChkValue:				; XREF: sub_71B4C
0006E79A 7E00                       		moveq	#0,d7
0006E79C 1E2E 0009                  		move.b	9(a6),d7
0006E7A0 6700 0000                  		beq.w	Sound_E4
0006E7A4 6A00                       		bpl.s	locret_71F8C
0006E7A6 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0006E7AC 0C07 009F                  		cmpi.b	#$9F,d7
0006E7B0 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0006E7B4 0C07 00A0                  		cmpi.b	#$A0,d7
0006E7B8 6500 0000                  		bcs.w	locret_71F8C
0006E7BC 0C07 00CF                  		cmpi.b	#$CF,d7
0006E7C0 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0006E7C4 0C07 00D0                  		cmpi.b	#$D0,d7
0006E7C8 6500 0000                  		bcs.w	locret_71F8C
0006E7CC 0C07 00E0                  		cmpi.b	#$E0,d7
0006E7D0 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0006E7D4 0C07 00E4                  		cmpi.b	#$E4,d7
0006E7D8 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0006E7DA                            
0006E7DA                            locret_71F8C:
0006E7DA 4E75                       		rts	
0006E7DC                            ; ===========================================================================
0006E7DC                            
0006E7DC                            Sound_E0toE4:				; XREF: Sound_ChkValue
0006E7DC 0407 00E0                  		subi.b	#$E0,d7
0006E7E0 E54F                       		lsl.w	#2,d7
0006E7E2 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0006E7E6                            ; ===========================================================================
0006E7E6                            
0006E7E6                            Sound_ExIndex:
0006E7E6 6000 0000                  		bra.w	Sound_E0
0006E7EA                            ; ===========================================================================
0006E7EA 6000 0000                  		bra.w	Sound_E1
0006E7EE                            ; ===========================================================================
0006E7EE 6000 0000                  		bra.w	Sound_E2
0006E7F2                            ; ===========================================================================
0006E7F2 6000 0000                  		bra.w	Sound_E3
0006E7F6                            ; ===========================================================================
0006E7F6 6000 0000                  		bra.w	Sound_E4
0006E7FA                            ; ===========================================================================
0006E7FA                            ; ---------------------------------------------------------------------------
0006E7FA                            ; Play "Say-gaa" PCM sound
0006E7FA                            ; ---------------------------------------------------------------------------
0006E7FA                            
0006E7FA                            Sound_E1:				  
0006E7FA 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0006E800 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0006E806 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0006E80E                            PlayPCM_Loop:	  
0006E80E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0006E814 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0006E818 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0006E81C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0006E81E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0006E820 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0006E824 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0006E82A 4EB8 11F4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0006E82E 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0006E834 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0006E836 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0006E838                            return_PlayPCM: 
0006E838 584F                       		addq.w	#4,sp 
0006E83A 4E75                       		rts
0006E83C                            ; ===========================================================================
0006E83C                            ; ---------------------------------------------------------------------------
0006E83C                            ; Play music track $81-$9F
0006E83C                            ; ---------------------------------------------------------------------------
0006E83C                            
0006E83C                            Sound_81to9F:				; XREF: Sound_ChkValue
0006E83C 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0006E840 6600                       		bne.s	loc_72024	; if not, branch
0006E842 4A2E 0027                  		tst.b	$27(a6)
0006E846 6600 0000                  		bne.w	loc_721B6
0006E84A 4BEE 0040                  		lea	$40(a6),a5
0006E84E 7009                       		moveq	#9,d0
0006E850                            
0006E850                            loc_71FE6:
0006E850 0895 0002                  		bclr	#2,(a5)
0006E854 DAFC 0030                  		adda.w	#$30,a5
0006E858 51C8 FFF6                  		dbf	d0,loc_71FE6
0006E85C                            
0006E85C 4BEE 0220                  		lea	$220(a6),a5
0006E860 7005                       		moveq	#5,d0
0006E862                            
0006E862                            loc_71FF8:
0006E862 0895 0007                  		bclr	#7,(a5)
0006E866 DAFC 0030                  		adda.w	#$30,a5
0006E86A 51C8 FFF6                  		dbf	d0,loc_71FF8
0006E86E 4216                       		clr.b	0(a6)
0006E870 204E                       		movea.l	a6,a0
0006E872 43EE 03A0                  		lea	$3A0(a6),a1
0006E876 303C 0087                  		move.w	#$87,d0
0006E87A                            
0006E87A                            loc_72012:
0006E87A 22D8                       		move.l	(a0)+,(a1)+
0006E87C 51C8 FFFC                  		dbf	d0,loc_72012
0006E880                            
0006E880 1D7C 0080 0027             		move.b	#$80,$27(a6)
0006E886 4216                       		clr.b	0(a6)
0006E888 6000                       		bra.s	loc_7202C
0006E88A                            ; ===========================================================================
0006E88A                            
0006E88A                            loc_72024:
0006E88A 422E 0027                  		clr.b	$27(a6)
0006E88E 422E 0026                  		clr.b	$26(a6)
0006E892                            
0006E892                            loc_7202C:
0006E892 4EBA 0000                  		jsr	sub_725CA(pc)
0006E896 2879 0006 E1F2             		movea.l	(off_719A0).l,a4
0006E89C 0407 0081                  		subi.b	#$81,d7
0006E8A0 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0006E8A6 2879 0006 E1EA             		movea.l	(Go_MusicIndex).l,a4
0006E8AC E54F                       		lsl.w	#2,d7
0006E8AE 2874 7000                  		movea.l	(a4,d7.w),a4
0006E8B2 7000                       		moveq	#0,d0
0006E8B4 3014                       		move.w	(a4),d0
0006E8B6 D08C                       		add.l	a4,d0
0006E8B8 2D40 0018                  		move.l	d0,$18(a6)
0006E8BC 102C 0005                  		move.b	5(a4),d0
0006E8C0 1D40 0028                  		move.b	d0,$28(a6)
0006E8C4 4A2E 002A                  		tst.b	$2A(a6)
0006E8C8 6700                       		beq.s	loc_72068
0006E8CA 102E 0029                  		move.b	$29(a6),d0
0006E8CE                            
0006E8CE                            loc_72068:
0006E8CE 1D40 0002                  		move.b	d0,2(a6)
0006E8D2 1D40 0001                  		move.b	d0,1(a6)
0006E8D6 7200                       		moveq	#0,d1
0006E8D8 264C                       		movea.l	a4,a3
0006E8DA 5C4C                       		addq.w	#6,a4
0006E8DC 7E00                       		moveq	#0,d7
0006E8DE 1E2B 0002                  		move.b	2(a3),d7
0006E8E2 6700 0000                  		beq.w	loc_72114
0006E8E6 5307                       		subq.b	#1,d7
0006E8E8 123C 00C0                  		move.b	#-$40,d1
0006E8EC 182B 0004                  		move.b	4(a3),d4
0006E8F0 7C30                       		moveq	#$30,d6
0006E8F2 1A3C 0001                  		move.b	#1,d5
0006E8F6 43EE 0040                  		lea	$40(a6),a1
0006E8FA 45FA 0000                  		lea	byte_721BA(pc),a2
0006E8FE                            
0006E8FE                            loc_72098:
0006E8FE 08D1 0007                  		bset	#7,(a1)
0006E902 135A 0001                  		move.b	(a2)+,1(a1)
0006E906 1344 0002                  		move.b	d4,2(a1)
0006E90A 1346 000D                  		move.b	d6,$D(a1)
0006E90E 1341 000A                  		move.b	d1,$A(a1)
0006E912 1345 000E                  		move.b	d5,$E(a1)
0006E916 7000                       		moveq	#0,d0
0006E918 301C                       		move.w	(a4)+,d0
0006E91A D08B                       		add.l	a3,d0
0006E91C 2340 0004                  		move.l	d0,4(a1)
0006E920 335C 0008                  		move.w	(a4)+,8(a1)
0006E924 D2C6                       		adda.w	d6,a1
0006E926 51CF FFD6                  		dbf	d7,loc_72098
0006E92A 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0006E930 6600                       		bne.s	loc_720D8
0006E932 702B                       		moveq	#$2B,d0
0006E934 7200                       		moveq	#0,d1
0006E936 4EBA 0000                  		jsr	sub_7272E(pc)
0006E93A 6000 0000                  		bra.w	loc_72114
0006E93E                            ; ===========================================================================
0006E93E                            
0006E93E                            loc_720D8:
0006E93E 7028                       		moveq	#$28,d0
0006E940 7206                       		moveq	#6,d1
0006E942 4EBA 0000                  		jsr	sub_7272E(pc)
0006E946 103C 0042                  		move.b	#$42,d0
0006E94A 727F                       		moveq	#$7F,d1
0006E94C 4EBA 0000                  		jsr	sub_72764(pc)
0006E950 103C 004A                  		move.b	#$4A,d0
0006E954 727F                       		moveq	#$7F,d1
0006E956 4EBA 0000                  		jsr	sub_72764(pc)
0006E95A 103C 0046                  		move.b	#$46,d0
0006E95E 727F                       		moveq	#$7F,d1
0006E960 4EBA 0000                  		jsr	sub_72764(pc)
0006E964 103C 004E                  		move.b	#$4E,d0
0006E968 727F                       		moveq	#$7F,d1
0006E96A 4EBA 0000                  		jsr	sub_72764(pc)
0006E96E 103C 00B6                  		move.b	#-$4A,d0
0006E972 123C 00C0                  		move.b	#-$40,d1
0006E976 4EBA 0000                  		jsr	sub_72764(pc)
0006E97A                            
0006E97A                            loc_72114:
0006E97A 7E00                       		moveq	#0,d7
0006E97C 1E2B 0003                  		move.b	3(a3),d7
0006E980 6700                       		beq.s	loc_72154
0006E982 5307                       		subq.b	#1,d7
0006E984 43EE 0190                  		lea	$190(a6),a1
0006E988 45FA 0000                  		lea	byte_721C2(pc),a2
0006E98C                            
0006E98C                            loc_72126:
0006E98C 08D1 0007                  		bset	#7,(a1)
0006E990 135A 0001                  		move.b	(a2)+,1(a1)
0006E994 1344 0002                  		move.b	d4,2(a1)
0006E998 1346 000D                  		move.b	d6,$D(a1)
0006E99C 1345 000E                  		move.b	d5,$E(a1)
0006E9A0 7000                       		moveq	#0,d0
0006E9A2 301C                       		move.w	(a4)+,d0
0006E9A4 D08B                       		add.l	a3,d0
0006E9A6 2340 0004                  		move.l	d0,4(a1)
0006E9AA 335C 0008                  		move.w	(a4)+,8(a1)
0006E9AE 101C                       		move.b	(a4)+,d0
0006E9B0 135C 000B                  		move.b	(a4)+,$B(a1)
0006E9B4 D2C6                       		adda.w	d6,a1
0006E9B6 51CF FFD4                  		dbf	d7,loc_72126
0006E9BA                            
0006E9BA                            loc_72154:
0006E9BA 43EE 0220                  		lea	$220(a6),a1
0006E9BE 7E05                       		moveq	#5,d7
0006E9C0                            
0006E9C0                            loc_7215A:
0006E9C0 4A11                       		tst.b	(a1)
0006E9C2 6A00 0000                  		bpl.w	loc_7217C
0006E9C6 7000                       		moveq	#0,d0
0006E9C8 1029 0001                  		move.b	1(a1),d0
0006E9CC 6B00                       		bmi.s	loc_7216E
0006E9CE 5500                       		subq.b	#2,d0
0006E9D0 E508                       		lsl.b	#2,d0
0006E9D2 6000                       		bra.s	loc_72170
0006E9D4                            ; ===========================================================================
0006E9D4                            
0006E9D4                            loc_7216E:
0006E9D4 E608                       		lsr.b	#3,d0
0006E9D6                            
0006E9D6                            loc_72170:
0006E9D6 41FA 0000                  		lea	dword_722CC(pc),a0
0006E9DA 2070 0000                  		movea.l	(a0,d0.w),a0
0006E9DE 08D0 0002                  		bset	#2,(a0)
0006E9E2                            
0006E9E2                            loc_7217C:
0006E9E2 D2C6                       		adda.w	d6,a1
0006E9E4 51CF FFDA                  		dbf	d7,loc_7215A
0006E9E8                            
0006E9E8 4A6E 0340                  		tst.w	$340(a6)
0006E9EC 6A00                       		bpl.s	loc_7218E
0006E9EE 08EE 0002 0100             		bset	#2,$100(a6)
0006E9F4                            
0006E9F4                            loc_7218E:
0006E9F4 4A6E 0370                  		tst.w	$370(a6)
0006E9F8 6A00                       		bpl.s	loc_7219A
0006E9FA 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006EA00                            
0006EA00                            loc_7219A:
0006EA00 4BEE 0070                  		lea	$70(a6),a5
0006EA04 7805                       		moveq	#5,d4
0006EA06                            
0006EA06                            loc_721A0:
0006EA06 4EBA 0000                  		jsr	sub_726FE(pc)
0006EA0A DAC6                       		adda.w	d6,a5
0006EA0C 51CC FFF8                  		dbf	d4,loc_721A0
0006EA10 7802                       		moveq	#2,d4
0006EA12                            
0006EA12                            loc_721AC:
0006EA12 4EBA 0000                  		jsr	sub_729A0(pc)
0006EA16 DAC6                       		adda.w	d6,a5
0006EA18 51CC FFF8                  		dbf	d4,loc_721AC
0006EA1C                            
0006EA1C                            loc_721B6:
0006EA1C 584F                       		addq.w	#4,sp
0006EA1E 4E75                       		rts	
0006EA20                            ; ===========================================================================
0006EA20 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0006EA28                            		even
0006EA28 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0006EA2C                            		even
0006EA2C                            ; ===========================================================================
0006EA2C                            ; ---------------------------------------------------------------------------
0006EA2C                            ; Play normal sound effect
0006EA2C                            ; ---------------------------------------------------------------------------
0006EA2C                            
0006EA2C                            Sound_A0toCF:				; XREF: Sound_ChkValue
0006EA2C 4A2E 0027                  		tst.b	$27(a6)
0006EA30 6600 0000                  		bne.w	loc_722C6
0006EA34 4A2E 0004                  		tst.b	4(a6)
0006EA38 6600 0000                  		bne.w	loc_722C6
0006EA3C 4A2E 0024                  		tst.b	$24(a6)
0006EA40 6600 0000                  		bne.w	loc_722C6
0006EA44 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0006EA48 6600                       		bne.s	Sound_notB5	; if not, branch
0006EA4A 4A2E 002B                  		tst.b	$2B(a6)
0006EA4E 6600                       		bne.s	loc_721EE
0006EA50 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0006EA54                            
0006EA54                            loc_721EE:
0006EA54 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0006EA5A                            
0006EA5A                            Sound_notB5:
0006EA5A 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0006EA5E 6600                       		bne.s	Sound_notA7	; if not, branch
0006EA60 4A2E 002C                  		tst.b	$2C(a6)
0006EA64 6600 0000                  		bne.w	locret_722C4
0006EA68 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0006EA6E                            
0006EA6E                            Sound_notA7:
0006EA6E 2079 0006 E1EE             		movea.l	(Go_SoundIndex).l,a0
0006EA74 0407 00A0                  		subi.b	#$A0,d7
0006EA78 E54F                       		lsl.w	#2,d7
0006EA7A 2670 7000                  		movea.l	(a0,d7.w),a3
0006EA7E 224B                       		movea.l	a3,a1
0006EA80 7200                       		moveq	#0,d1
0006EA82 3219                       		move.w	(a1)+,d1
0006EA84 D28B                       		add.l	a3,d1
0006EA86 1A19                       		move.b	(a1)+,d5
0006EA88 1E19                       		move.b	(a1)+,d7
0006EA8A 5307                       		subq.b	#1,d7
0006EA8C 7C30                       		moveq	#$30,d6
0006EA8E                            
0006EA8E                            loc_72228:
0006EA8E 7600                       		moveq	#0,d3
0006EA90 1629 0001                  		move.b	1(a1),d3
0006EA94 1803                       		move.b	d3,d4
0006EA96 6B00                       		bmi.s	loc_72244
0006EA98 5543                       		subq.w	#2,d3
0006EA9A E54B                       		lsl.w	#2,d3
0006EA9C 4BFA 0000                  		lea	dword_722CC(pc),a5
0006EAA0 2A75 3000                  		movea.l	(a5,d3.w),a5
0006EAA4 08D5 0002                  		bset	#2,(a5)
0006EAA8 6000                       		bra.s	loc_7226E
0006EAAA                            ; ===========================================================================
0006EAAA                            
0006EAAA                            loc_72244:
0006EAAA E64B                       		lsr.w	#3,d3
0006EAAC 4BFA 0000                  		lea	dword_722CC(pc),a5
0006EAB0 2A75 3000                  		movea.l	(a5,d3.w),a5
0006EAB4 08D5 0002                  		bset	#2,(a5)
0006EAB8 0C04 00C0                  		cmpi.b	#$C0,d4
0006EABC 6600                       		bne.s	loc_7226E
0006EABE 1004                       		move.b	d4,d0
0006EAC0 0000 001F                  		ori.b	#$1F,d0
0006EAC4 13C0 00C0 0011             		move.b	d0,($C00011).l
0006EACA 0840 0005                  		bchg	#5,d0
0006EACE 13C0 00C0 0011             		move.b	d0,($C00011).l
0006EAD4                            
0006EAD4                            loc_7226E:
0006EAD4 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006EAD8 244D                       		movea.l	a5,a2
0006EADA 700B                       		moveq	#$B,d0
0006EADC                            
0006EADC                            loc_72276:
0006EADC 429A                       		clr.l	(a2)+
0006EADE 51C8 FFFC                  		dbf	d0,loc_72276
0006EAE2                            
0006EAE2 3A99                       		move.w	(a1)+,(a5)
0006EAE4 1B45 0002                  		move.b	d5,2(a5)
0006EAE8 7000                       		moveq	#0,d0
0006EAEA 3019                       		move.w	(a1)+,d0
0006EAEC D08B                       		add.l	a3,d0
0006EAEE 2B40 0004                  		move.l	d0,4(a5)
0006EAF2 3B59 0008                  		move.w	(a1)+,8(a5)
0006EAF6 1B7C 0001 000E             		move.b	#1,$E(a5)
0006EAFC 1B46 000D                  		move.b	d6,$D(a5)
0006EB00 4A04                       		tst.b	d4
0006EB02 6B00                       		bmi.s	loc_722A8
0006EB04 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006EB0A 2B41 0020                  		move.l	d1,$20(a5)
0006EB0E                            
0006EB0E                            loc_722A8:
0006EB0E 51CF FF7E                  		dbf	d7,loc_72228
0006EB12                            
0006EB12 4A2E 0250                  		tst.b	$250(a6)
0006EB16 6A00                       		bpl.s	loc_722B8
0006EB18 08EE 0002 0340             		bset	#2,$340(a6)
0006EB1E                            
0006EB1E                            loc_722B8:
0006EB1E 4A2E 0310                  		tst.b	$310(a6)
0006EB22 6A00                       		bpl.s	locret_722C4
0006EB24 08EE 0002 0370             		bset	#2,$370(a6)
0006EB2A                            
0006EB2A                            locret_722C4:
0006EB2A 4E75                       		rts	
0006EB2C                            ; ===========================================================================
0006EB2C                            
0006EB2C                            loc_722C6:
0006EB2C 4216                       		clr.b	0(a6)
0006EB2E 4E75                       		rts	
0006EB30                            ; ===========================================================================
0006EB30 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0006EB34 0000 0000                  		dc.l 0
0006EB38 00FF F100                  		dc.l $FFF100
0006EB3C 00FF F130                  		dc.l $FFF130
0006EB40 00FF F190                  		dc.l $FFF190
0006EB44 00FF F1C0                  		dc.l $FFF1C0
0006EB48 00FF F1F0                  		dc.l $FFF1F0
0006EB4C 00FF F1F0                  		dc.l $FFF1F0
0006EB50 00FF F220                  dword_722EC:	dc.l $FFF220
0006EB54 0000 0000                  		dc.l 0
0006EB58 00FF F250                  		dc.l $FFF250
0006EB5C 00FF F280                  		dc.l $FFF280
0006EB60 00FF F2B0                  		dc.l $FFF2B0
0006EB64 00FF F2E0                  		dc.l $FFF2E0
0006EB68 00FF F310                  		dc.l $FFF310
0006EB6C 00FF F310                  		dc.l $FFF310
0006EB70                            ; ===========================================================================
0006EB70                            ; ---------------------------------------------------------------------------
0006EB70                            ; Play GHZ waterfall sound
0006EB70                            ; ---------------------------------------------------------------------------
0006EB70                            
0006EB70                            Sound_D0toDF:				; XREF: Sound_ChkValue
0006EB70 4A2E 0027                  		tst.b	$27(a6)
0006EB74 6600 0000                  		bne.w	locret_723C6
0006EB78 4A2E 0004                  		tst.b	4(a6)
0006EB7C 6600 0000                  		bne.w	locret_723C6
0006EB80 4A2E 0024                  		tst.b	$24(a6)
0006EB84 6600 0000                  		bne.w	locret_723C6
0006EB88 2079 0006 E1E6             		movea.l	(Go_SoundD0).l,a0
0006EB8E 0407 00D0                  		subi.b	#$D0,d7
0006EB92 E54F                       		lsl.w	#2,d7
0006EB94 2670 7000                  		movea.l	(a0,d7.w),a3
0006EB98 224B                       		movea.l	a3,a1
0006EB9A 7000                       		moveq	#0,d0
0006EB9C 3019                       		move.w	(a1)+,d0
0006EB9E D08B                       		add.l	a3,d0
0006EBA0 2D40 0020                  		move.l	d0,$20(a6)
0006EBA4 1A19                       		move.b	(a1)+,d5
0006EBA6 1E19                       		move.b	(a1)+,d7
0006EBA8 5307                       		subq.b	#1,d7
0006EBAA 7C30                       		moveq	#$30,d6
0006EBAC                            
0006EBAC                            loc_72348:
0006EBAC 1829 0001                  		move.b	1(a1),d4
0006EBB0 6B00                       		bmi.s	loc_7235A
0006EBB2 08EE 0002 0100             		bset	#2,$100(a6)
0006EBB8 4BEE 0340                  		lea	$340(a6),a5
0006EBBC 6000                       		bra.s	loc_72364
0006EBBE                            ; ===========================================================================
0006EBBE                            
0006EBBE                            loc_7235A:
0006EBBE 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006EBC4 4BEE 0370                  		lea	$370(a6),a5
0006EBC8                            
0006EBC8                            loc_72364:
0006EBC8 244D                       		movea.l	a5,a2
0006EBCA 700B                       		moveq	#$B,d0
0006EBCC                            
0006EBCC                            loc_72368:
0006EBCC 429A                       		clr.l	(a2)+
0006EBCE 51C8 FFFC                  		dbf	d0,loc_72368
0006EBD2                            
0006EBD2 3A99                       		move.w	(a1)+,(a5)
0006EBD4 1B45 0002                  		move.b	d5,2(a5)
0006EBD8 7000                       		moveq	#0,d0
0006EBDA 3019                       		move.w	(a1)+,d0
0006EBDC D08B                       		add.l	a3,d0
0006EBDE 2B40 0004                  		move.l	d0,4(a5)
0006EBE2 3B59 0008                  		move.w	(a1)+,8(a5)
0006EBE6 1B7C 0001 000E             		move.b	#1,$E(a5)
0006EBEC 1B46 000D                  		move.b	d6,$D(a5)
0006EBF0 4A04                       		tst.b	d4
0006EBF2 6B00                       		bmi.s	loc_72396
0006EBF4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006EBFA                            
0006EBFA                            loc_72396:
0006EBFA 51CF FFB0                  		dbf	d7,loc_72348
0006EBFE                            
0006EBFE 4A2E 0250                  		tst.b	$250(a6)
0006EC02 6A00                       		bpl.s	loc_723A6
0006EC04 08EE 0002 0340             		bset	#2,$340(a6)
0006EC0A                            
0006EC0A                            loc_723A6:
0006EC0A 4A2E 0310                  		tst.b	$310(a6)
0006EC0E 6A00                       		bpl.s	locret_723C6
0006EC10 08EE 0002 0370             		bset	#2,$370(a6)
0006EC16 0004 001F                  		ori.b	#$1F,d4
0006EC1A 13C4 00C0 0011             		move.b	d4,($C00011).l
0006EC20 0844 0005                  		bchg	#5,d4
0006EC24 13C4 00C0 0011             		move.b	d4,($C00011).l
0006EC2A                            
0006EC2A                            locret_723C6:
0006EC2A 4E75                       		rts	
0006EC2C                            ; End of function Sound_ChkValue
0006EC2C                            
0006EC2C                            ; ===========================================================================
0006EC2C 00FF F100                  		dc.l $FFF100
0006EC30 00FF F1F0                  		dc.l $FFF1F0
0006EC34 00FF F250                  		dc.l $FFF250
0006EC38 00FF F310                  		dc.l $FFF310
0006EC3C 00FF F340                  		dc.l $FFF340
0006EC40 00FF F370                  		dc.l $FFF370
0006EC44                            
0006EC44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EC44                            
0006EC44                            
0006EC44                            Snd_FadeOut1:				; XREF: Sound_E0
0006EC44 4216                       		clr.b	0(a6)
0006EC46 4BEE 0220                  		lea	$220(a6),a5
0006EC4A 7E05                       		moveq	#5,d7
0006EC4C                            
0006EC4C                            loc_723EA:
0006EC4C 4A15                       		tst.b	(a5)
0006EC4E 6A00 0000                  		bpl.w	loc_72472
0006EC52 0895 0007                  		bclr	#7,(a5)
0006EC56 7600                       		moveq	#0,d3
0006EC58 162D 0001                  		move.b	1(a5),d3
0006EC5C 6B00                       		bmi.s	loc_7243C
0006EC5E 4EBA 0000                  		jsr	sub_726FE(pc)
0006EC62 0C03 0004                  		cmpi.b	#4,d3
0006EC66 6600                       		bne.s	loc_72416
0006EC68 4A2E 0340                  		tst.b	$340(a6)
0006EC6C 6A00                       		bpl.s	loc_72416
0006EC6E 4BEE 0340                  		lea	$340(a6),a5
0006EC72 226E 0020                  		movea.l	$20(a6),a1
0006EC76 6000                       		bra.s	loc_72428
0006EC78                            ; ===========================================================================
0006EC78                            
0006EC78                            loc_72416:
0006EC78 5503                       		subq.b	#2,d3
0006EC7A E50B                       		lsl.b	#2,d3
0006EC7C 41FA FEB2                  		lea	dword_722CC(pc),a0
0006EC80 264D                       		movea.l	a5,a3
0006EC82 2A70 3000                  		movea.l	(a0,d3.w),a5
0006EC86 226E 0018                  		movea.l	$18(a6),a1
0006EC8A                            
0006EC8A                            loc_72428:
0006EC8A 0895 0002                  		bclr	#2,(a5)
0006EC8E 08D5 0001                  		bset	#1,(a5)
0006EC92 102D 000B                  		move.b	$B(a5),d0
0006EC96 4EBA 0000                  		jsr	sub_72C4E(pc)
0006EC9A 2A4B                       		movea.l	a3,a5
0006EC9C 6000                       		bra.s	loc_72472
0006EC9E                            ; ===========================================================================
0006EC9E                            
0006EC9E                            loc_7243C:
0006EC9E 4EBA 0000                  		jsr	sub_729A0(pc)
0006ECA2 41EE 0370                  		lea	$370(a6),a0
0006ECA6 0C03 00E0                  		cmpi.b	#$E0,d3
0006ECAA 6700                       		beq.s	loc_7245A
0006ECAC 0C03 00C0                  		cmpi.b	#$C0,d3
0006ECB0 6700                       		beq.s	loc_7245A
0006ECB2 E60B                       		lsr.b	#3,d3
0006ECB4 41FA FE7A                  		lea	dword_722CC(pc),a0
0006ECB8 2070 3000                  		movea.l	(a0,d3.w),a0
0006ECBC                            
0006ECBC                            loc_7245A:
0006ECBC 0890 0002                  		bclr	#2,(a0)
0006ECC0 08D0 0001                  		bset	#1,(a0)
0006ECC4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006ECCA 6600                       		bne.s	loc_72472
0006ECCC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006ECD4                            
0006ECD4                            loc_72472:
0006ECD4 DAFC 0030                  		adda.w	#$30,a5
0006ECD8 51CF FF72                  		dbf	d7,loc_723EA
0006ECDC                            
0006ECDC 4E75                       		rts	
0006ECDE                            ; End of function Snd_FadeOut1
0006ECDE                            
0006ECDE                            
0006ECDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006ECDE                            
0006ECDE                            
0006ECDE                            Snd_FadeOut2:				; XREF: Sound_E0
0006ECDE 4BEE 0340                  		lea	$340(a6),a5
0006ECE2 4A15                       		tst.b	(a5)
0006ECE4 6A00                       		bpl.s	loc_724AE
0006ECE6 0895 0007                  		bclr	#7,(a5)
0006ECEA 0815 0002                  		btst	#2,(a5)
0006ECEE 6600                       		bne.s	loc_724AE
0006ECF0 4EBA 0000                  		jsr	loc_7270A(pc)
0006ECF4 4BEE 0100                  		lea	$100(a6),a5
0006ECF8 0895 0002                  		bclr	#2,(a5)
0006ECFC 08D5 0001                  		bset	#1,(a5)
0006ED00 4A15                       		tst.b	(a5)
0006ED02 6A00                       		bpl.s	loc_724AE
0006ED04 226E 0018                  		movea.l	$18(a6),a1
0006ED08 102D 000B                  		move.b	$B(a5),d0
0006ED0C 4EBA 0000                  		jsr	sub_72C4E(pc)
0006ED10                            
0006ED10                            loc_724AE:
0006ED10 4BEE 0370                  		lea	$370(a6),a5
0006ED14 4A15                       		tst.b	(a5)
0006ED16 6A00                       		bpl.s	locret_724E4
0006ED18 0895 0007                  		bclr	#7,(a5)
0006ED1C 0815 0002                  		btst	#2,(a5)
0006ED20 6600                       		bne.s	locret_724E4
0006ED22 4EBA 0000                  		jsr	loc_729A6(pc)
0006ED26 4BEE 01F0                  		lea	$1F0(a6),a5
0006ED2A 0895 0002                  		bclr	#2,(a5)
0006ED2E 08D5 0001                  		bset	#1,(a5)
0006ED32 4A15                       		tst.b	(a5)
0006ED34 6A00                       		bpl.s	locret_724E4
0006ED36 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0006ED3C 6600                       		bne.s	locret_724E4
0006ED3E 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0006ED46                            
0006ED46                            locret_724E4:
0006ED46 4E75                       		rts	
0006ED48                            ; End of function Snd_FadeOut2
0006ED48                            
0006ED48                            ; ===========================================================================
0006ED48                            ; ---------------------------------------------------------------------------
0006ED48                            ; Fade out music
0006ED48                            ; ---------------------------------------------------------------------------
0006ED48                            
0006ED48                            Sound_E0:				; XREF: Sound_ExIndex
0006ED48 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0006ED4C 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0006ED50 1D7C 0003 0006             		move.b	#3,6(a6)
0006ED56 1D7C 0028 0004             		move.b	#$28,4(a6)
0006ED5C 422E 0040                  		clr.b	$40(a6)
0006ED60 422E 002A                  		clr.b	$2A(a6)
0006ED64 4E75                       		rts	
0006ED66                            
0006ED66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006ED66                            
0006ED66                            
0006ED66                            sub_72504:				; XREF: sub_71B4C
0006ED66 102E 0006                  		move.b	6(a6),d0
0006ED6A 6700                       		beq.s	loc_72510
0006ED6C 532E 0006                  		subq.b	#1,6(a6)
0006ED70 4E75                       		rts	
0006ED72                            ; ===========================================================================
0006ED72                            
0006ED72                            loc_72510:
0006ED72 532E 0004                  		subq.b	#1,4(a6)
0006ED76 6700 0000                  		beq.w	Sound_E4
0006ED7A 1D7C 0003 0006             		move.b	#3,6(a6)
0006ED80 4BEE 0070                  		lea	$70(a6),a5
0006ED84 7E05                       		moveq	#5,d7
0006ED86                            
0006ED86                            loc_72524:
0006ED86 4A15                       		tst.b	(a5)
0006ED88 6A00                       		bpl.s	loc_72538
0006ED8A 522D 0009                  		addq.b	#1,9(a5)
0006ED8E 6A00                       		bpl.s	loc_72534
0006ED90 0895 0007                  		bclr	#7,(a5)
0006ED94 6000                       		bra.s	loc_72538
0006ED96                            ; ===========================================================================
0006ED96                            
0006ED96                            loc_72534:
0006ED96 4EBA 0000                  		jsr	sub_72CB4(pc)
0006ED9A                            
0006ED9A                            loc_72538:
0006ED9A DAFC 0030                  		adda.w	#$30,a5
0006ED9E 51CF FFE6                  		dbf	d7,loc_72524
0006EDA2                            
0006EDA2 7E02                       		moveq	#2,d7
0006EDA4                            
0006EDA4                            loc_72542:
0006EDA4 4A15                       		tst.b	(a5)
0006EDA6 6A00                       		bpl.s	loc_72560
0006EDA8 522D 0009                  		addq.b	#1,9(a5)
0006EDAC 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0006EDB2 6500                       		bcs.s	loc_72558
0006EDB4 0895 0007                  		bclr	#7,(a5)
0006EDB8 6000                       		bra.s	loc_72560
0006EDBA                            ; ===========================================================================
0006EDBA                            
0006EDBA                            loc_72558:
0006EDBA 1C2D 0009                  		move.b	9(a5),d6
0006EDBE 4EBA 0000                  		jsr	sub_7296A(pc)
0006EDC2                            
0006EDC2                            loc_72560:
0006EDC2 DAFC 0030                  		adda.w	#$30,a5
0006EDC6 51CF FFDC                  		dbf	d7,loc_72542
0006EDCA                            
0006EDCA 4E75                       		rts	
0006EDCC                            ; End of function sub_72504
0006EDCC                            
0006EDCC                            
0006EDCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EDCC                            
0006EDCC                            
0006EDCC                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0006EDCC 7602                       		moveq	#2,d3
0006EDCE 7028                       		moveq	#$28,d0
0006EDD0                            
0006EDD0                            loc_7256E:
0006EDD0 1203                       		move.b	d3,d1
0006EDD2 4EBA 0000                  		jsr	sub_7272E(pc)
0006EDD6 5801                       		addq.b	#4,d1
0006EDD8 4EBA 0000                  		jsr	sub_7272E(pc)
0006EDDC 51CB FFF2                  		dbf	d3,loc_7256E
0006EDE0                            
0006EDE0 7040                       		moveq	#$40,d0
0006EDE2 727F                       		moveq	#$7F,d1
0006EDE4 7802                       		moveq	#2,d4
0006EDE6                            
0006EDE6                            loc_72584:
0006EDE6 7603                       		moveq	#3,d3
0006EDE8                            
0006EDE8                            loc_72586:
0006EDE8 4EBA 0000                  		jsr	sub_7272E(pc)
0006EDEC 4EBA 0000                  		jsr	sub_72764(pc)
0006EDF0 5840                       		addq.w	#4,d0
0006EDF2 51CB FFF4                  		dbf	d3,loc_72586
0006EDF6                            
0006EDF6 0400 000F                  		subi.b	#$F,d0
0006EDFA 51CC FFEA                  		dbf	d4,loc_72584
0006EDFE                            
0006EDFE 4E75                       		rts	
0006EE00                            ; End of function sub_7256A
0006EE00                            
0006EE00                            ; ===========================================================================
0006EE00                            ; ---------------------------------------------------------------------------
0006EE00                            ; Stop music
0006EE00                            ; ---------------------------------------------------------------------------
0006EE00                            
0006EE00                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0006EE00 702B                       		moveq	#$2B,d0
0006EE02 123C 0080                  		move.b	#$80,d1
0006EE06 4EBA 0000                  		jsr	sub_7272E(pc)
0006EE0A 7027                       		moveq	#$27,d0
0006EE0C 7200                       		moveq	#0,d1
0006EE0E 4EBA 0000                  		jsr	sub_7272E(pc)
0006EE12 204E                       		movea.l	a6,a0
0006EE14 303C 00E3                  		move.w	#$E3,d0
0006EE18                            
0006EE18                            loc_725B6:
0006EE18 4298                       		clr.l	(a0)+
0006EE1A 51C8 FFFC                  		dbf	d0,loc_725B6
0006EE1E                            
0006EE1E 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0006EE24 4EBA FFA6                  		jsr	sub_7256A(pc)
0006EE28 6000 0000                  		bra.w	sub_729B6
0006EE2C                            
0006EE2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EE2C                            
0006EE2C                            
0006EE2C                            sub_725CA:				; XREF: Sound_ChkValue
0006EE2C 204E                       		movea.l	a6,a0
0006EE2E 1216                       		move.b	0(a6),d1
0006EE30 142E 0027                  		move.b	$27(a6),d2
0006EE34 162E 002A                  		move.b	$2A(a6),d3
0006EE38 182E 0026                  		move.b	$26(a6),d4
0006EE3C 3A2E 000A                  		move.w	$A(a6),d5
0006EE40 303C 0087                  		move.w	#$87,d0
0006EE44                            
0006EE44                            loc_725E4:
0006EE44 4298                       		clr.l	(a0)+
0006EE46 51C8 FFFC                  		dbf	d0,loc_725E4
0006EE4A                            
0006EE4A 1C81                       		move.b	d1,0(a6)
0006EE4C 1D42 0027                  		move.b	d2,$27(a6)
0006EE50 1D43 002A                  		move.b	d3,$2A(a6)
0006EE54 1D44 0026                  		move.b	d4,$26(a6)
0006EE58 3D45 000A                  		move.w	d5,$A(a6)
0006EE5C 1D7C 0080 0009             		move.b	#$80,9(a6)
0006EE62 4EBA FF68                  		jsr	sub_7256A(pc)
0006EE66 6000 0000                  		bra.w	sub_729B6
0006EE6A                            ; End of function sub_725CA
0006EE6A                            
0006EE6A                            
0006EE6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EE6A                            
0006EE6A                            
0006EE6A                            sub_7260C:				; XREF: sub_71B4C
0006EE6A 1D6E 0002 0001             		move.b	2(a6),1(a6)
0006EE70 41EE 004E                  		lea	$4E(a6),a0
0006EE74 7030                       		moveq	#$30,d0
0006EE76 7209                       		moveq	#9,d1
0006EE78                            
0006EE78                            loc_7261A:
0006EE78 5210                       		addq.b	#1,(a0)
0006EE7A D0C0                       		adda.w	d0,a0
0006EE7C 51C9 FFFA                  		dbf	d1,loc_7261A
0006EE80                            
0006EE80 4E75                       		rts	
0006EE82                            ; End of function sub_7260C
0006EE82                            
0006EE82                            ; ===========================================================================
0006EE82                            ; ---------------------------------------------------------------------------
0006EE82                            ; Speed	up music
0006EE82                            ; ---------------------------------------------------------------------------
0006EE82                            
0006EE82                            Sound_E2:				; XREF: Sound_ExIndex
0006EE82 4A2E 0027                  		tst.b	$27(a6)
0006EE86 6600                       		bne.s	loc_7263E
0006EE88 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0006EE8E 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0006EE94 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006EE9A 4E75                       		rts	
0006EE9C                            ; ===========================================================================
0006EE9C                            
0006EE9C                            loc_7263E:
0006EE9C 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0006EEA2 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006EEA8 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0006EEAE 4E75                       		rts	
0006EEB0                            ; ===========================================================================
0006EEB0                            ; ---------------------------------------------------------------------------
0006EEB0                            ; Change music back to normal speed
0006EEB0                            ; ---------------------------------------------------------------------------
0006EEB0                            
0006EEB0                            Sound_E3:				; XREF: Sound_ExIndex
0006EEB0 4A2E 0027                  		tst.b	$27(a6)
0006EEB4 6600                       		bne.s	loc_7266A
0006EEB6 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0006EEBC 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0006EEC2 422E 002A                  		clr.b	$2A(a6)
0006EEC6 4E75                       		rts	
0006EEC8                            ; ===========================================================================
0006EEC8                            
0006EEC8                            loc_7266A:
0006EEC8 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0006EECE 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0006EED4 422E 03CA                  		clr.b	$3CA(a6)
0006EED8 4E75                       		rts	
0006EEDA                            
0006EEDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EEDA                            
0006EEDA                            
0006EEDA                            sub_7267C:				; XREF: sub_71B4C
0006EEDA 4A2E 0025                  		tst.b	$25(a6)
0006EEDE 6700                       		beq.s	loc_72688
0006EEE0 532E 0025                  		subq.b	#1,$25(a6)
0006EEE4 4E75                       		rts	
0006EEE6                            ; ===========================================================================
0006EEE6                            
0006EEE6                            loc_72688:
0006EEE6 4A2E 0026                  		tst.b	$26(a6)
0006EEEA 6700                       		beq.s	loc_726D6
0006EEEC 532E 0026                  		subq.b	#1,$26(a6)
0006EEF0 1D7C 0002 0025             		move.b	#2,$25(a6)
0006EEF6 4BEE 0070                  		lea	$70(a6),a5
0006EEFA 7E05                       		moveq	#5,d7
0006EEFC                            
0006EEFC                            loc_7269E:
0006EEFC 4A15                       		tst.b	(a5)
0006EEFE 6A00                       		bpl.s	loc_726AA
0006EF00 532D 0009                  		subq.b	#1,9(a5)
0006EF04 4EBA 0000                  		jsr	sub_72CB4(pc)
0006EF08                            
0006EF08                            loc_726AA:
0006EF08 DAFC 0030                  		adda.w	#$30,a5
0006EF0C 51CF FFEE                  		dbf	d7,loc_7269E
0006EF10 7E02                       		moveq	#2,d7
0006EF12                            
0006EF12                            loc_726B4:
0006EF12 4A15                       		tst.b	(a5)
0006EF14 6A00                       		bpl.s	loc_726CC
0006EF16 532D 0009                  		subq.b	#1,9(a5)
0006EF1A 1C2D 0009                  		move.b	9(a5),d6
0006EF1E 0C06 0010                  		cmpi.b	#$10,d6
0006EF22 6500                       		bcs.s	loc_726C8
0006EF24 7C0F                       		moveq	#$F,d6
0006EF26                            
0006EF26                            loc_726C8:
0006EF26 4EBA 0000                  		jsr	sub_7296A(pc)
0006EF2A                            
0006EF2A                            loc_726CC:
0006EF2A DAFC 0030                  		adda.w	#$30,a5
0006EF2E 51CF FFE2                  		dbf	d7,loc_726B4
0006EF32 4E75                       		rts	
0006EF34                            ; ===========================================================================
0006EF34                            
0006EF34                            loc_726D6:
0006EF34 08AE 0002 0040             		bclr	#2,$40(a6)
0006EF3A 422E 0024                  		clr.b	$24(a6)
0006EF3E 4E75                       		rts	
0006EF40                            ; End of function sub_7267C
0006EF40                            
0006EF40                            ; ===========================================================================
0006EF40                            
0006EF40                            loc_726E2:				; XREF: sub_71CCA
0006EF40 0815 0001                  		btst	#1,(a5)
0006EF44 6600                       		bne.s	locret_726FC
0006EF46 0815 0002                  		btst	#2,(a5)
0006EF4A 6600                       		bne.s	locret_726FC
0006EF4C 7028                       		moveq	#$28,d0
0006EF4E 122D 0001                  		move.b	1(a5),d1
0006EF52 0001 00F0                  		ori.b	#-$10,d1
0006EF56 6000 0000                  		bra.w	sub_7272E
0006EF5A                            ; ===========================================================================
0006EF5A                            
0006EF5A                            locret_726FC:
0006EF5A 4E75                       		rts	
0006EF5C                            
0006EF5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EF5C                            
0006EF5C                            
0006EF5C                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0006EF5C 0815 0004                  		btst	#4,(a5)
0006EF60 6600                       		bne.s	locret_72714
0006EF62 0815 0002                  		btst	#2,(a5)
0006EF66 6600                       		bne.s	locret_72714
0006EF68                            
0006EF68                            loc_7270A:				; XREF: Snd_FadeOut2
0006EF68 7028                       		moveq	#$28,d0
0006EF6A 122D 0001                  		move.b	1(a5),d1
0006EF6E 6000 0000                  		bra.w	sub_7272E
0006EF72                            ; ===========================================================================
0006EF72                            
0006EF72                            locret_72714:
0006EF72 4E75                       		rts	
0006EF74                            ; End of function sub_726FE
0006EF74                            
0006EF74                            ; ===========================================================================
0006EF74                            
0006EF74                            loc_72716:				; XREF: sub_72A5A
0006EF74 0815 0002                  		btst	#2,(a5)
0006EF78 6600                       		bne.s	locret_72720
0006EF7A 6000 0000                  		bra.w	sub_72722
0006EF7E                            ; ===========================================================================
0006EF7E                            
0006EF7E                            locret_72720:
0006EF7E 4E75                       		rts	
0006EF80                            
0006EF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EF80                            
0006EF80                            
0006EF80                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0006EF80 082D 0002 0001             		btst	#2,1(a5)
0006EF86 6600                       		bne.s	loc_7275A
0006EF88 D02D 0001                  		add.b	1(a5),d0
0006EF8C                            ; End of function sub_72722
0006EF8C                            
0006EF8C                            
0006EF8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EF8C                            
0006EF8C                            
0006EF8C                            sub_7272E:				; XREF: loc_71E6A
0006EF8C 1439 00A0 4000             		move.b	($A04000).l,d2
0006EF92 0802 0007                  		btst	#7,d2
0006EF96 66F4                       		bne.s	sub_7272E
0006EF98 13C0 00A0 4000             		move.b	d0,($A04000).l
0006EF9E 4E71                       		nop	
0006EFA0 4E71                       		nop	
0006EFA2 4E71                       		nop	
0006EFA4                            
0006EFA4                            loc_72746:
0006EFA4 1439 00A0 4000             		move.b	($A04000).l,d2
0006EFAA 0802 0007                  		btst	#7,d2
0006EFAE 66F4                       		bne.s	loc_72746
0006EFB0                            
0006EFB0 13C1 00A0 4001             		move.b	d1,($A04001).l
0006EFB6 4E75                       		rts	
0006EFB8                            ; End of function sub_7272E
0006EFB8                            
0006EFB8                            ; ===========================================================================
0006EFB8                            
0006EFB8                            loc_7275A:				; XREF: sub_72722
0006EFB8 142D 0001                  		move.b	1(a5),d2
0006EFBC 0882 0002                  		bclr	#2,d2
0006EFC0 D002                       		add.b	d2,d0
0006EFC2                            
0006EFC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EFC2                            
0006EFC2                            
0006EFC2                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0006EFC2 1439 00A0 4000             		move.b	($A04000).l,d2
0006EFC8 0802 0007                  		btst	#7,d2
0006EFCC 66F4                       		bne.s	sub_72764
0006EFCE 13C0 00A0 4002             		move.b	d0,($A04002).l
0006EFD4 4E71                       		nop	
0006EFD6 4E71                       		nop	
0006EFD8 4E71                       		nop	
0006EFDA                            
0006EFDA                            loc_7277C:
0006EFDA 1439 00A0 4000             		move.b	($A04000).l,d2
0006EFE0 0802 0007                  		btst	#7,d2
0006EFE4 66F4                       		bne.s	loc_7277C
0006EFE6                            
0006EFE6 13C1 00A0 4003             		move.b	d1,($A04003).l
0006EFEC 4E75                       		rts	
0006EFEE                            ; End of function sub_72764
0006EFEE                            
0006EFEE                            ; ===========================================================================
0006EFEE 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0006F000 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0006F012 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0006F022 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0006F032 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0006F042 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0006F052 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0006F062 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0006F072 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0006F082 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0006F092 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0006F0A2 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0006F0AE                            
0006F0AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F0AE                            
0006F0AE                            
0006F0AE                            sub_72850:				; XREF: sub_71B4C
0006F0AE 532D 000E                  		subq.b	#1,$E(a5)
0006F0B2 6600                       		bne.s	loc_72866
0006F0B4 0895 0004                  		bclr	#4,(a5)
0006F0B8 4EBA 0000                  		jsr	sub_72878(pc)
0006F0BC 4EBA 0000                  		jsr	sub_728DC(pc)
0006F0C0 6000 0000                  		bra.w	loc_7292E
0006F0C4                            ; ===========================================================================
0006F0C4                            
0006F0C4                            loc_72866:
0006F0C4 4EBA F52A                  		jsr	sub_71D9E(pc)
0006F0C8 4EBA 0000                  		jsr	sub_72926(pc)
0006F0CC 4EBA F54A                  		jsr	sub_71DC6(pc)
0006F0D0 4EBA 0000                  		jsr	sub_728E2(pc)
0006F0D4 4E75                       		rts	
0006F0D6                            ; End of function sub_72850
0006F0D6                            
0006F0D6                            
0006F0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F0D6                            
0006F0D6                            
0006F0D6                            sub_72878:				; XREF: sub_72850
0006F0D6 0895 0001                  		bclr	#1,(a5)
0006F0DA 286D 0004                  		movea.l	4(a5),a4
0006F0DE                            
0006F0DE                            loc_72880:
0006F0DE 7A00                       		moveq	#0,d5
0006F0E0 1A1C                       		move.b	(a4)+,d5
0006F0E2 0C05 00E0                  		cmpi.b	#$E0,d5
0006F0E6 6500                       		bcs.s	loc_72890
0006F0E8 4EBA 0000                  		jsr	sub_72A5A(pc)
0006F0EC 60F0                       		bra.s	loc_72880
0006F0EE                            ; ===========================================================================
0006F0EE                            
0006F0EE                            loc_72890:
0006F0EE 4A05                       		tst.b	d5
0006F0F0 6A00                       		bpl.s	loc_728A4
0006F0F2 4EBA 0000                  		jsr	sub_728AC(pc)
0006F0F6 1A1C                       		move.b	(a4)+,d5
0006F0F8 4A05                       		tst.b	d5
0006F0FA 6A00                       		bpl.s	loc_728A4
0006F0FC 534C                       		subq.w	#1,a4
0006F0FE 6000 F4B2                  		bra.w	sub_71D60
0006F102                            ; ===========================================================================
0006F102                            
0006F102                            loc_728A4:
0006F102 4EBA F48E                  		jsr	sub_71D40(pc)
0006F106 6000 F4AA                  		bra.w	sub_71D60
0006F10A                            ; End of function sub_72878
0006F10A                            
0006F10A                            
0006F10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F10A                            
0006F10A                            
0006F10A                            sub_728AC:				; XREF: sub_72878
0006F10A 0405 0081                  		subi.b	#$81,d5
0006F10E 6500                       		bcs.s	loc_728CA
0006F110 DA2D 0008                  		add.b	8(a5),d5
0006F114 0245 007F                  		andi.w	#$7F,d5
0006F118 E34D                       		lsl.w	#1,d5
0006F11A 41FA 0000                  		lea	word_729CE(pc),a0
0006F11E 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0006F124 6000 F48C                  		bra.w	sub_71D60
0006F128                            ; ===========================================================================
0006F128                            
0006F128                            loc_728CA:
0006F128 08D5 0001                  		bset	#1,(a5)
0006F12C 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0006F132 4EBA F47E                  		jsr	sub_71D60(pc)
0006F136 6000 0000                  		bra.w	sub_729A0
0006F13A                            ; End of function sub_728AC
0006F13A                            
0006F13A                            
0006F13A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F13A                            
0006F13A                            
0006F13A                            sub_728DC:				; XREF: sub_72850
0006F13A 3C2D 0010                  		move.w	$10(a5),d6
0006F13E 6B00                       		bmi.s	loc_72920
0006F140                            ; End of function sub_728DC
0006F140                            
0006F140                            
0006F140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F140                            
0006F140                            
0006F140                            sub_728E2:				; XREF: sub_72850
0006F140 102D 001E                  		move.b	$1E(a5),d0
0006F144 4880                       		ext.w	d0
0006F146 DC40                       		add.w	d0,d6
0006F148 0815 0002                  		btst	#2,(a5)
0006F14C 6600                       		bne.s	locret_7291E
0006F14E 0815 0001                  		btst	#1,(a5)
0006F152 6600                       		bne.s	locret_7291E
0006F154 102D 0001                  		move.b	1(a5),d0
0006F158 0C00 00E0                  		cmpi.b	#$E0,d0
0006F15C 6600                       		bne.s	loc_72904
0006F15E 103C 00C0                  		move.b	#$C0,d0
0006F162                            
0006F162                            loc_72904:
0006F162 3206                       		move.w	d6,d1
0006F164 0201 000F                  		andi.b	#$F,d1
0006F168 8001                       		or.b	d1,d0
0006F16A E84E                       		lsr.w	#4,d6
0006F16C 0206 003F                  		andi.b	#$3F,d6
0006F170 13C0 00C0 0011             		move.b	d0,($C00011).l
0006F176 13C6 00C0 0011             		move.b	d6,($C00011).l
0006F17C                            
0006F17C                            locret_7291E:
0006F17C 4E75                       		rts	
0006F17E                            ; End of function sub_728E2
0006F17E                            
0006F17E                            ; ===========================================================================
0006F17E                            
0006F17E                            loc_72920:				; XREF: sub_728DC
0006F17E 08D5 0001                  		bset	#1,(a5)
0006F182 4E75                       		rts	
0006F184                            
0006F184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F184                            
0006F184                            
0006F184                            sub_72926:				; XREF: sub_72850
0006F184 4A2D 000B                  		tst.b	$B(a5)
0006F188 6700 0000                  		beq.w	locret_7298A
0006F18C                            
0006F18C                            loc_7292E:				; XREF: sub_72850
0006F18C 1C2D 0009                  		move.b	9(a5),d6
0006F190 7000                       		moveq	#0,d0
0006F192 102D 000B                  		move.b	$B(a5),d0
0006F196 6700                       		beq.s	sub_7296A
0006F198 2079 0006 E1F6             		movea.l	(Go_PSGIndex).l,a0
0006F19E 5340                       		subq.w	#1,d0
0006F1A0 E548                       		lsl.w	#2,d0
0006F1A2 2070 0000                  		movea.l	(a0,d0.w),a0
0006F1A6 102D 000C                  		move.b	$C(a5),d0
0006F1AA 1030 0000                  		move.b	(a0,d0.w),d0
0006F1AE 522D 000C                  		addq.b	#1,$C(a5)
0006F1B2 0800 0007                  		btst	#7,d0
0006F1B6 6700                       		beq.s	loc_72960
0006F1B8 0C00 0080                  		cmpi.b	#$80,d0
0006F1BC 6700                       		beq.s	loc_7299A
0006F1BE                            
0006F1BE                            loc_72960:
0006F1BE DC40                       		add.w	d0,d6
0006F1C0 0C06 0010                  		cmpi.b	#$10,d6
0006F1C4 6500                       		bcs.s	sub_7296A
0006F1C6 7C0F                       		moveq	#$F,d6
0006F1C8                            ; End of function sub_72926
0006F1C8                            
0006F1C8                            
0006F1C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F1C8                            
0006F1C8                            
0006F1C8                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006F1C8 0815 0001                  		btst	#1,(a5)
0006F1CC 6600                       		bne.s	locret_7298A
0006F1CE 0815 0002                  		btst	#2,(a5)
0006F1D2 6600                       		bne.s	locret_7298A
0006F1D4 0815 0004                  		btst	#4,(a5)
0006F1D8 6600                       		bne.s	loc_7298C
0006F1DA                            
0006F1DA                            loc_7297C:
0006F1DA 8C2D 0001                  		or.b	1(a5),d6
0006F1DE 0606 0010                  		addi.b	#$10,d6
0006F1E2 13C6 00C0 0011             		move.b	d6,($C00011).l
0006F1E8                            
0006F1E8                            locret_7298A:
0006F1E8 4E75                       		rts	
0006F1EA                            ; ===========================================================================
0006F1EA                            
0006F1EA                            loc_7298C:
0006F1EA 4A2D 0013                  		tst.b	$13(a5)
0006F1EE 67EA                       		beq.s	loc_7297C
0006F1F0 4A2D 0012                  		tst.b	$12(a5)
0006F1F4 66E4                       		bne.s	loc_7297C
0006F1F6 4E75                       		rts	
0006F1F8                            ; End of function sub_7296A
0006F1F8                            
0006F1F8                            ; ===========================================================================
0006F1F8                            
0006F1F8                            loc_7299A:				; XREF: sub_72926
0006F1F8 532D 000C                  		subq.b	#1,$C(a5)
0006F1FC 4E75                       		rts	
0006F1FE                            
0006F1FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F1FE                            
0006F1FE                            
0006F1FE                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0006F1FE 0815 0002                  		btst	#2,(a5)
0006F202 6600                       		bne.s	locret_729B4
0006F204                            
0006F204                            loc_729A6:				; XREF: Snd_FadeOut2
0006F204 102D 0001                  		move.b	1(a5),d0
0006F208 0000 001F                  		ori.b	#$1F,d0
0006F20C 13C0 00C0 0011             		move.b	d0,($C00011).l
0006F212                            
0006F212                            locret_729B4:
0006F212 4E75                       		rts	
0006F214                            ; End of function sub_729A0
0006F214                            
0006F214                            
0006F214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F214                            
0006F214                            
0006F214                            sub_729B6:				; XREF: loc_71E7C
0006F214 41F9 00C0 0011             		lea	($C00011).l,a0
0006F21A 10BC 009F                  		move.b	#$9F,(a0)
0006F21E 10BC 00BF                  		move.b	#$BF,(a0)
0006F222 10BC 00DF                  		move.b	#$DF,(a0)
0006F226 10BC 00FF                  		move.b	#$FF,(a0)
0006F22A 4E75                       		rts	
0006F22C                            ; End of function sub_729B6
0006F22C                            
0006F22C                            ; ===========================================================================
0006F22C 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0006F23E 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0006F250 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0006F264 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0006F278 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0006F28C 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0006F2A0 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0006F2B4 0011 0000                  		dc.w $11, 0
0006F2B8                            
0006F2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F2B8                            
0006F2B8                            
0006F2B8                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006F2B8 0445 00E0                  		subi.w	#$E0,d5
0006F2BC E54D                       		lsl.w	#2,d5
0006F2BE 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0006F2C2                            ; End of function sub_72A5A
0006F2C2                            
0006F2C2                            ; ===========================================================================
0006F2C2                            
0006F2C2                            loc_72A64:
0006F2C2 6000 0000                  		bra.w	loc_72ACC
0006F2C6                            ; ===========================================================================
0006F2C6 6000 0000                  		bra.w	loc_72AEC
0006F2CA                            ; ===========================================================================
0006F2CA 6000 0000                  		bra.w	loc_72AF2
0006F2CE                            ; ===========================================================================
0006F2CE 6000 0000                  		bra.w	loc_72AF8
0006F2D2                            ; ===========================================================================
0006F2D2 6000 0000                  		bra.w	loc_72B14
0006F2D6                            ; ===========================================================================
0006F2D6 6000 0000                  		bra.w	loc_72B9E
0006F2DA                            ; ===========================================================================
0006F2DA 6000 0000                  		bra.w	loc_72BA4
0006F2DE                            ; ===========================================================================
0006F2DE 6000 0000                  		bra.w	loc_72BAE
0006F2E2                            ; ===========================================================================
0006F2E2 6000 0000                  		bra.w	loc_72BB4
0006F2E6                            ; ===========================================================================
0006F2E6 6000 0000                  		bra.w	loc_72BBE
0006F2EA                            ; ===========================================================================
0006F2EA 6000 0000                  		bra.w	loc_72BC6
0006F2EE                            ; ===========================================================================
0006F2EE 6000 0000                  		bra.w	loc_72BD0
0006F2F2                            ; ===========================================================================
0006F2F2 6000 0000                  		bra.w	loc_72BE6
0006F2F6                            ; ===========================================================================
0006F2F6 6000 0000                  		bra.w	loc_72BEE
0006F2FA                            ; ===========================================================================
0006F2FA 6000 0000                  		bra.w	loc_72BF4
0006F2FE                            ; ===========================================================================
0006F2FE 6000 0000                  		bra.w	loc_72C26
0006F302                            ; ===========================================================================
0006F302 6000 0000                  		bra.w	loc_72D30
0006F306                            ; ===========================================================================
0006F306 6000 0000                  		bra.w	loc_72D52
0006F30A                            ; ===========================================================================
0006F30A 6000 0000                  		bra.w	loc_72D58
0006F30E                            ; ===========================================================================
0006F30E 6000 0000                  		bra.w	loc_72E06
0006F312                            ; ===========================================================================
0006F312 6000 0000                  		bra.w	loc_72E20
0006F316                            ; ===========================================================================
0006F316 6000 0000                  		bra.w	loc_72E26
0006F31A                            ; ===========================================================================
0006F31A 6000 0000                  		bra.w	loc_72E2C
0006F31E                            ; ===========================================================================
0006F31E 6000 0000                  		bra.w	loc_72E38
0006F322                            ; ===========================================================================
0006F322 6000 0000                  		bra.w	loc_72E52
0006F326                            ; ===========================================================================
0006F326 6000 0000                  		bra.w	loc_72E64
0006F32A                            ; ===========================================================================
0006F32A                            
0006F32A                            loc_72ACC:				; XREF: loc_72A64
0006F32A 121C                       		move.b	(a4)+,d1
0006F32C 4A2D 0001                  		tst.b	1(a5)
0006F330 6B00                       		bmi.s	locret_72AEA
0006F332 102D 000A                  		move.b	$A(a5),d0
0006F336 0200 0037                  		andi.b	#$37,d0
0006F33A 8200                       		or.b	d0,d1
0006F33C 1B41 000A                  		move.b	d1,$A(a5)
0006F340 103C 00B4                  		move.b	#$B4,d0
0006F344 6000 FC2E                  		bra.w	loc_72716
0006F348                            ; ===========================================================================
0006F348                            
0006F348                            locret_72AEA:
0006F348 4E75                       		rts	
0006F34A                            ; ===========================================================================
0006F34A                            
0006F34A                            loc_72AEC:				; XREF: loc_72A64
0006F34A 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0006F34E 4E75                       		rts	
0006F350                            ; ===========================================================================
0006F350                            
0006F350                            loc_72AF2:				; XREF: loc_72A64
0006F350 1D5C 0007                  		move.b	(a4)+,7(a6)
0006F354 4E75                       		rts	
0006F356                            ; ===========================================================================
0006F356                            
0006F356                            loc_72AF8:				; XREF: loc_72A64
0006F356 7000                       		moveq	#0,d0
0006F358 102D 000D                  		move.b	$D(a5),d0
0006F35C 2875 0000                  		movea.l	(a5,d0.w),a4
0006F360 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0006F368 544C                       		addq.w	#2,a4
0006F36A 5800                       		addq.b	#4,d0
0006F36C 1B40 000D                  		move.b	d0,$D(a5)
0006F370 4E75                       		rts	
0006F372                            ; ===========================================================================
0006F372                            
0006F372                            loc_72B14:				; XREF: loc_72A64
0006F372 204E                       		movea.l	a6,a0
0006F374 43EE 03A0                  		lea	$3A0(a6),a1
0006F378 303C 0087                  		move.w	#$87,d0
0006F37C                            
0006F37C                            loc_72B1E:
0006F37C 20D9                       		move.l	(a1)+,(a0)+
0006F37E 51C8 FFFC                  		dbf	d0,loc_72B1E
0006F382                            
0006F382 08EE 0002 0040             		bset	#2,$40(a6)
0006F388 264D                       		movea.l	a5,a3
0006F38A 1C3C 0028                  		move.b	#$28,d6
0006F38E 9C2E 0026                  		sub.b	$26(a6),d6
0006F392 7E05                       		moveq	#5,d7
0006F394 4BEE 0070                  		lea	$70(a6),a5
0006F398                            
0006F398                            loc_72B3A:
0006F398 0815 0007                  		btst	#7,(a5)
0006F39C 6700                       		beq.s	loc_72B5C
0006F39E 08D5 0001                  		bset	#1,(a5)
0006F3A2 DD2D 0009                  		add.b	d6,9(a5)
0006F3A6 0815 0002                  		btst	#2,(a5)
0006F3AA 6600                       		bne.s	loc_72B5C
0006F3AC 7000                       		moveq	#0,d0
0006F3AE 102D 000B                  		move.b	$B(a5),d0
0006F3B2 226E 0018                  		movea.l	$18(a6),a1
0006F3B6 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F3BA                            
0006F3BA                            loc_72B5C:
0006F3BA DAFC 0030                  		adda.w	#$30,a5
0006F3BE 51CF FFD8                  		dbf	d7,loc_72B3A
0006F3C2                            
0006F3C2 7E02                       		moveq	#2,d7
0006F3C4                            
0006F3C4                            loc_72B66:
0006F3C4 0815 0007                  		btst	#7,(a5)
0006F3C8 6700                       		beq.s	loc_72B78
0006F3CA 08D5 0001                  		bset	#1,(a5)
0006F3CE 4EBA FE2E                  		jsr	sub_729A0(pc)
0006F3D2 DD2D 0009                  		add.b	d6,9(a5)
0006F3D6                            
0006F3D6                            loc_72B78:
0006F3D6 DAFC 0030                  		adda.w	#$30,a5
0006F3DA 51CF FFE8                  		dbf	d7,loc_72B66
0006F3DE 2A4B                       		movea.l	a3,a5
0006F3E0 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006F3E6 1D7C 0028 0026             		move.b	#$28,$26(a6)
0006F3EC 422E 0027                  		clr.b	$27(a6)
0006F3F0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006F3F8 504F                       		addq.w	#8,sp
0006F3FA 4E75                       		rts	
0006F3FC                            ; ===========================================================================
0006F3FC                            
0006F3FC                            loc_72B9E:				; XREF: loc_72A64
0006F3FC 1B5C 0002                  		move.b	(a4)+,2(a5)
0006F400 4E75                       		rts	
0006F402                            ; ===========================================================================
0006F402                            
0006F402                            loc_72BA4:				; XREF: loc_72A64
0006F402 101C                       		move.b	(a4)+,d0
0006F404 D12D 0009                  		add.b	d0,9(a5)
0006F408 6000 0000                  		bra.w	sub_72CB4
0006F40C                            ; ===========================================================================
0006F40C                            
0006F40C                            loc_72BAE:				; XREF: loc_72A64
0006F40C 08D5 0004                  		bset	#4,(a5)
0006F410 4E75                       		rts	
0006F412                            ; ===========================================================================
0006F412                            
0006F412                            loc_72BB4:				; XREF: loc_72A64
0006F412 1B54 0012                  		move.b	(a4),$12(a5)
0006F416 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006F41A 4E75                       		rts	
0006F41C                            ; ===========================================================================
0006F41C                            
0006F41C                            loc_72BBE:				; XREF: loc_72A64
0006F41C 101C                       		move.b	(a4)+,d0
0006F41E D12D 0008                  		add.b	d0,8(a5)
0006F422 4E75                       		rts	
0006F424                            ; ===========================================================================
0006F424                            
0006F424                            loc_72BC6:				; XREF: loc_72A64
0006F424 1D54 0002                  		move.b	(a4),2(a6)
0006F428 1D5C 0001                  		move.b	(a4)+,1(a6)
0006F42C 4E75                       		rts	
0006F42E                            ; ===========================================================================
0006F42E                            
0006F42E                            loc_72BD0:				; XREF: loc_72A64
0006F42E 41EE 0040                  		lea	$40(a6),a0
0006F432 101C                       		move.b	(a4)+,d0
0006F434 7230                       		moveq	#$30,d1
0006F436 7409                       		moveq	#9,d2
0006F438                            
0006F438                            loc_72BDA:
0006F438 1140 0002                  		move.b	d0,2(a0)
0006F43C D0C1                       		adda.w	d1,a0
0006F43E 51CA FFF8                  		dbf	d2,loc_72BDA
0006F442                            
0006F442 4E75                       		rts	
0006F444                            ; ===========================================================================
0006F444                            
0006F444                            loc_72BE6:				; XREF: loc_72A64
0006F444 101C                       		move.b	(a4)+,d0
0006F446 D12D 0009                  		add.b	d0,9(a5)
0006F44A 4E75                       		rts	
0006F44C                            ; ===========================================================================
0006F44C                            
0006F44C                            loc_72BEE:				; XREF: loc_72A64
0006F44C 422E 002C                  		clr.b	$2C(a6)
0006F450 4E75                       		rts	
0006F452                            ; ===========================================================================
0006F452                            
0006F452                            loc_72BF4:				; XREF: loc_72A64
0006F452 0895 0007                  		bclr	#7,(a5)
0006F456 0895 0004                  		bclr	#4,(a5)
0006F45A 4EBA FB00                  		jsr	sub_726FE(pc)
0006F45E 4A2E 0250                  		tst.b	$250(a6)
0006F462 6B00                       		bmi.s	loc_72C22
0006F464 264D                       		movea.l	a5,a3
0006F466 4BEE 0100                  		lea	$100(a6),a5
0006F46A 226E 0018                  		movea.l	$18(a6),a1
0006F46E 0895 0002                  		bclr	#2,(a5)
0006F472 08D5 0001                  		bset	#1,(a5)
0006F476 102D 000B                  		move.b	$B(a5),d0
0006F47A 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F47E 2A4B                       		movea.l	a3,a5
0006F480                            
0006F480                            loc_72C22:
0006F480 504F                       		addq.w	#8,sp
0006F482 4E75                       		rts	
0006F484                            ; ===========================================================================
0006F484                            
0006F484                            loc_72C26:				; XREF: loc_72A64
0006F484 7000                       		moveq	#0,d0
0006F486 101C                       		move.b	(a4)+,d0
0006F488 1B40 000B                  		move.b	d0,$B(a5)
0006F48C 0815 0002                  		btst	#2,(a5)
0006F490 6600 0000                  		bne.w	locret_72CAA
0006F494 226E 0018                  		movea.l	$18(a6),a1
0006F498 4A2E 000E                  		tst.b	$E(a6)
0006F49C 6700                       		beq.s	sub_72C4E
0006F49E 226D 0020                  		movea.l	$20(a5),a1
0006F4A2 4A2E 000E                  		tst.b	$E(a6)
0006F4A6 6B00                       		bmi.s	sub_72C4E
0006F4A8 226E 0020                  		movea.l	$20(a6),a1
0006F4AC                            
0006F4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F4AC                            
0006F4AC                            
0006F4AC                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0006F4AC 5340                       		subq.w	#1,d0
0006F4AE 6B00                       		bmi.s	loc_72C5C
0006F4B0 323C 0019                  		move.w	#$19,d1
0006F4B4                            
0006F4B4                            loc_72C56:
0006F4B4 D2C1                       		adda.w	d1,a1
0006F4B6 51C8 FFFC                  		dbf	d0,loc_72C56
0006F4BA                            
0006F4BA                            loc_72C5C:
0006F4BA 1219                       		move.b	(a1)+,d1
0006F4BC 1B41 001F                  		move.b	d1,$1F(a5)
0006F4C0 1801                       		move.b	d1,d4
0006F4C2 103C 00B0                  		move.b	#$B0,d0
0006F4C6 4EBA FAB8                  		jsr	sub_72722(pc)
0006F4CA 45FA 0000                  		lea	byte_72D18(pc),a2
0006F4CE 7613                       		moveq	#$13,d3
0006F4D0                            
0006F4D0                            loc_72C72:
0006F4D0 101A                       		move.b	(a2)+,d0
0006F4D2 1219                       		move.b	(a1)+,d1
0006F4D4 4EBA FAAA                  		jsr	sub_72722(pc)
0006F4D8 51CB FFF6                  		dbf	d3,loc_72C72
0006F4DC 7A03                       		moveq	#3,d5
0006F4DE 0244 0007                  		andi.w	#7,d4
0006F4E2 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0006F4E6 162D 0009                  		move.b	9(a5),d3
0006F4EA                            
0006F4EA                            loc_72C8C:
0006F4EA 101A                       		move.b	(a2)+,d0
0006F4EC 1219                       		move.b	(a1)+,d1
0006F4EE E20C                       		lsr.b	#1,d4
0006F4F0 6400                       		bcc.s	loc_72C96
0006F4F2 D203                       		add.b	d3,d1
0006F4F4                            
0006F4F4                            loc_72C96:
0006F4F4 4EBA FA8A                  		jsr	sub_72722(pc)
0006F4F8 51CD FFF0                  		dbf	d5,loc_72C8C
0006F4FC 103C 00B4                  		move.b	#$B4,d0
0006F500 122D 000A                  		move.b	$A(a5),d1
0006F504 4EBA FA7A                  		jsr	sub_72722(pc)
0006F508                            
0006F508                            locret_72CAA:
0006F508 4E75                       		rts	
0006F50A                            ; End of function sub_72C4E
0006F50A                            
0006F50A                            ; ===========================================================================
0006F50A 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0006F512                            
0006F512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F512                            
0006F512                            
0006F512                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0006F512 0815 0002                  		btst	#2,(a5)
0006F516 6600                       		bne.s	locret_72D16
0006F518 7000                       		moveq	#0,d0
0006F51A 102D 000B                  		move.b	$B(a5),d0
0006F51E 226E 0018                  		movea.l	$18(a6),a1
0006F522 4A2E 000E                  		tst.b	$E(a6)
0006F526 6700                       		beq.s	loc_72CD8
0006F528 226E 0020                  		movea.l	$20(a6),a1
0006F52C 4A2E 000E                  		tst.b	$E(a6)
0006F530 6B00                       		bmi.s	loc_72CD8
0006F532 226E 0020                  		movea.l	$20(a6),a1
0006F536                            
0006F536                            loc_72CD8:
0006F536 5340                       		subq.w	#1,d0
0006F538 6B00                       		bmi.s	loc_72CE6
0006F53A 323C 0019                  		move.w	#$19,d1
0006F53E                            
0006F53E                            loc_72CE0:
0006F53E D2C1                       		adda.w	d1,a1
0006F540 51C8 FFFC                  		dbf	d0,loc_72CE0
0006F544                            
0006F544                            loc_72CE6:
0006F544 D2FC 0015                  		adda.w	#$15,a1
0006F548 45FA 0000                  		lea	byte_72D2C(pc),a2
0006F54C 102D 001F                  		move.b	$1F(a5),d0
0006F550 0240 0007                  		andi.w	#7,d0
0006F554 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0006F558 162D 0009                  		move.b	9(a5),d3
0006F55C 6B00                       		bmi.s	locret_72D16
0006F55E 7A03                       		moveq	#3,d5
0006F560                            
0006F560                            loc_72D02:
0006F560 101A                       		move.b	(a2)+,d0
0006F562 1219                       		move.b	(a1)+,d1
0006F564 E20C                       		lsr.b	#1,d4
0006F566 6400                       		bcc.s	loc_72D12
0006F568 D203                       		add.b	d3,d1
0006F56A 6500                       		bcs.s	loc_72D12
0006F56C 4EBA FA12                  		jsr	sub_72722(pc)
0006F570                            
0006F570                            loc_72D12:
0006F570 51CD FFEE                  		dbf	d5,loc_72D02
0006F574                            
0006F574                            locret_72D16:
0006F574 4E75                       		rts	
0006F576                            ; End of function sub_72CB4
0006F576                            
0006F576                            ; ===========================================================================
0006F576 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0006F580 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0006F58A 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0006F58E                            ; ===========================================================================
0006F58E                            
0006F58E                            loc_72D30:				; XREF: loc_72A64
0006F58E 08D5 0003                  		bset	#3,(a5)
0006F592 2B4C 0014                  		move.l	a4,$14(a5)
0006F596 1B5C 0018                  		move.b	(a4)+,$18(a5)
0006F59A 1B5C 0019                  		move.b	(a4)+,$19(a5)
0006F59E 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0006F5A2 101C                       		move.b	(a4)+,d0
0006F5A4 E208                       		lsr.b	#1,d0
0006F5A6 1B40 001B                  		move.b	d0,$1B(a5)
0006F5AA 426D 001C                  		clr.w	$1C(a5)
0006F5AE 4E75                       		rts	
0006F5B0                            ; ===========================================================================
0006F5B0                            
0006F5B0                            loc_72D52:				; XREF: loc_72A64
0006F5B0 08D5 0003                  		bset	#3,(a5)
0006F5B4 4E75                       		rts	
0006F5B6                            ; ===========================================================================
0006F5B6                            
0006F5B6                            loc_72D58:				; XREF: loc_72A64
0006F5B6 0895 0007                  		bclr	#7,(a5)
0006F5BA 0895 0004                  		bclr	#4,(a5)
0006F5BE 4A2D 0001                  		tst.b	1(a5)
0006F5C2 6B00                       		bmi.s	loc_72D74
0006F5C4 4A2E 0008                  		tst.b	8(a6)
0006F5C8 6B00 0000                  		bmi.w	loc_72E02
0006F5CC 4EBA F98E                  		jsr	sub_726FE(pc)
0006F5D0 6000                       		bra.s	loc_72D78
0006F5D2                            ; ===========================================================================
0006F5D2                            
0006F5D2                            loc_72D74:
0006F5D2 4EBA FC2A                  		jsr	sub_729A0(pc)
0006F5D6                            
0006F5D6                            loc_72D78:
0006F5D6 4A2E 000E                  		tst.b	$E(a6)
0006F5DA 6A00 0000                  		bpl.w	loc_72E02
0006F5DE 4216                       		clr.b	0(a6)
0006F5E0 7000                       		moveq	#0,d0
0006F5E2 102D 0001                  		move.b	1(a5),d0
0006F5E6 6B00                       		bmi.s	loc_72DCC
0006F5E8 41FA F546                  		lea	dword_722CC(pc),a0
0006F5EC 264D                       		movea.l	a5,a3
0006F5EE 0C00 0004                  		cmpi.b	#4,d0
0006F5F2 6600                       		bne.s	loc_72DA8
0006F5F4 4A2E 0340                  		tst.b	$340(a6)
0006F5F8 6A00                       		bpl.s	loc_72DA8
0006F5FA 4BEE 0340                  		lea	$340(a6),a5
0006F5FE 226E 0020                  		movea.l	$20(a6),a1
0006F602 6000                       		bra.s	loc_72DB8
0006F604                            ; ===========================================================================
0006F604                            
0006F604                            loc_72DA8:
0006F604 5500                       		subq.b	#2,d0
0006F606 E508                       		lsl.b	#2,d0
0006F608 2A70 0000                  		movea.l	(a0,d0.w),a5
0006F60C 4A15                       		tst.b	(a5)
0006F60E 6A00                       		bpl.s	loc_72DC8
0006F610 226E 0018                  		movea.l	$18(a6),a1
0006F614                            
0006F614                            loc_72DB8:
0006F614 0895 0002                  		bclr	#2,(a5)
0006F618 08D5 0001                  		bset	#1,(a5)
0006F61C 102D 000B                  		move.b	$B(a5),d0
0006F620 4EBA FE8A                  		jsr	sub_72C4E(pc)
0006F624                            
0006F624                            loc_72DC8:
0006F624 2A4B                       		movea.l	a3,a5
0006F626 6000                       		bra.s	loc_72E02
0006F628                            ; ===========================================================================
0006F628                            
0006F628                            loc_72DCC:
0006F628 41EE 0370                  		lea	$370(a6),a0
0006F62C 4A10                       		tst.b	(a0)
0006F62E 6A00                       		bpl.s	loc_72DE0
0006F630 0C00 00E0                  		cmpi.b	#$E0,d0
0006F634 6700                       		beq.s	loc_72DEA
0006F636 0C00 00C0                  		cmpi.b	#$C0,d0
0006F63A 6700                       		beq.s	loc_72DEA
0006F63C                            
0006F63C                            loc_72DE0:
0006F63C 41FA F4F2                  		lea	dword_722CC(pc),a0
0006F640 E608                       		lsr.b	#3,d0
0006F642 2070 0000                  		movea.l	(a0,d0.w),a0
0006F646                            
0006F646                            loc_72DEA:
0006F646 0890 0002                  		bclr	#2,(a0)
0006F64A 08D0 0001                  		bset	#1,(a0)
0006F64E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006F654 6600                       		bne.s	loc_72E02
0006F656 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006F65E                            
0006F65E                            loc_72E02:
0006F65E 504F                       		addq.w	#8,sp
0006F660 4E75                       		rts	
0006F662                            ; ===========================================================================
0006F662                            
0006F662                            loc_72E06:				; XREF: loc_72A64
0006F662 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0006F668 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0006F66C 0815 0002                  		btst	#2,(a5)
0006F670 6600                       		bne.s	locret_72E1E
0006F672 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0006F67A                            
0006F67A                            locret_72E1E:
0006F67A 4E75                       		rts	
0006F67C                            ; ===========================================================================
0006F67C                            
0006F67C                            loc_72E20:				; XREF: loc_72A64
0006F67C 0895 0003                  		bclr	#3,(a5)
0006F680 4E75                       		rts	
0006F682                            ; ===========================================================================
0006F682                            
0006F682                            loc_72E26:				; XREF: loc_72A64
0006F682 1B5C 000B                  		move.b	(a4)+,$B(a5)
0006F686 4E75                       		rts	
0006F688                            ; ===========================================================================
0006F688                            
0006F688                            loc_72E2C:				; XREF: loc_72A64
0006F688 101C                       		move.b	(a4)+,d0
0006F68A E148                       		lsl.w	#8,d0
0006F68C 101C                       		move.b	(a4)+,d0
0006F68E D8C0                       		adda.w	d0,a4
0006F690 534C                       		subq.w	#1,a4
0006F692 4E75                       		rts	
0006F694                            ; ===========================================================================
0006F694                            
0006F694                            loc_72E38:				; XREF: loc_72A64
0006F694 7000                       		moveq	#0,d0
0006F696 101C                       		move.b	(a4)+,d0
0006F698 121C                       		move.b	(a4)+,d1
0006F69A 4A35 0024                  		tst.b	$24(a5,d0.w)
0006F69E 6600                       		bne.s	loc_72E48
0006F6A0 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0006F6A4                            
0006F6A4                            loc_72E48:
0006F6A4 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0006F6A8 66DE                       		bne.s	loc_72E2C
0006F6AA 544C                       		addq.w	#2,a4
0006F6AC 4E75                       		rts	
0006F6AE                            ; ===========================================================================
0006F6AE                            
0006F6AE                            loc_72E52:				; XREF: loc_72A64
0006F6AE 7000                       		moveq	#0,d0
0006F6B0 102D 000D                  		move.b	$D(a5),d0
0006F6B4 5900                       		subq.b	#4,d0
0006F6B6 2B8C 0000                  		move.l	a4,(a5,d0.w)
0006F6BA 1B40 000D                  		move.b	d0,$D(a5)
0006F6BE 60C8                       		bra.s	loc_72E2C
0006F6C0                            ; ===========================================================================
0006F6C0                            
0006F6C0                            loc_72E64:				; XREF: loc_72A64
0006F6C0 103C 0088                  		move.b	#$88,d0
0006F6C4 123C 000F                  		move.b	#$F,d1
0006F6C8 4EBA F8C2                  		jsr	sub_7272E(pc)
0006F6CC 103C 008C                  		move.b	#$8C,d0
0006F6D0 123C 000F                  		move.b	#$F,d1
0006F6D4 6000 F8B6                  		bra.w	sub_7272E
0006F6D8                            ; ===========================================================================
0006F6D8                            Kos_Z80:	incbin	sound\z80_1.bin
0006F788 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0006F78A 21                         		dc.b $21
0006F78B 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0006F78D                            		incbin	sound\z80_2.bin
00070E38                            		even
00070E38                            Music81:	incbin	sound\jahl.bin
00077638                            		even
00077638                            Music82:	incbin	sound\music82.bin
00080ED6                            		even
00080ED6                            Music83:	incbin	sound\music83.bin
00081464                            		even
00081464                            Music84:	include	sound\music84.asm
00081464                            music84_Header:
00081464 =00000001                  smpsHeaderStartSong = 1
00081464 0000                       	smpsHeaderVoice     music84_Voices
00081466 0603                       	smpsHeaderChan      $06, $03
00081468 0205                       	smpsHeaderTempo     $02, $05
0008146A                            
0008146E 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00081472 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00081476 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008147A 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008147E 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00081482 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00081488 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008148E 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00081494                            
00081494                            ; FM1 Data
00081494                            music84_FM1:
00081494 E0C0                       	smpsPan             panCenter, $00
00081498 E107                       	smpsAlterNote       $07
0008149A 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008149E E106                       	smpsAlterNote       $06
000814A0 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000814A4 E10B                       	smpsAlterNote       $0B
000814A6 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000814AC E10C                       	smpsAlterNote       $0C
000814AE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000814B1 E10B                       	smpsAlterNote       $0B
000814B3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000814B6 E109                       	smpsAlterNote       $09
000814B8 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000814BD E108                       	smpsAlterNote       $08
000814BF 8001                       	dc.b	nRst, $01
000814C1 E10B                       	smpsAlterNote       $0B
000814C3 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000814C9 E107                       	smpsAlterNote       $07
000814CB 9B03                       	dc.b	nD2, $03
000814CD                            
000814CD                            music84_Jump04:
000814CD E107                       	smpsAlterNote       $07
000814CF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000814D3 E10B                       	smpsAlterNote       $0B
000814D5 A202 8001                  	dc.b	nA2, $02, nRst, $01
000814D9 E107                       	smpsAlterNote       $07
000814DB 9B03                       	dc.b	nD2, $03
000814DD E11A                       	smpsAlterNote       $1A
000814DF A301                       	dc.b	nBb2, $01
000814E1 E1F2                       	smpsAlterNote       $F2
000814E3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000814E6 E1FF                       	smpsAlterNote       $FF
000814E8 E701                       	dc.b	smpsNoAttack, $01
000814EA E111                       	smpsAlterNote       $11
000814EC E701                       	dc.b	smpsNoAttack, $01
000814EE E106                       	smpsAlterNote       $06
000814F0 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000814F3 E107                       	smpsAlterNote       $07
000814F5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000814F9 E108                       	smpsAlterNote       $08
000814FB 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00081503 E109                       	smpsAlterNote       $09
00081505 A003                       	dc.b	nG2, $03
00081507 E10C                       	smpsAlterNote       $0C
00081509 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008150D E1FD                       	smpsAlterNote       $FD
0008150F A401                       	dc.b	nB2, $01
00081511 E109                       	smpsAlterNote       $09
00081513 E701                       	dc.b	smpsNoAttack, $01
00081515 E106                       	smpsAlterNote       $06
00081517 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008151A E109                       	smpsAlterNote       $09
0008151C A007                       	dc.b	nG2, $07
0008151E E108                       	smpsAlterNote       $08
00081520 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00081524 E107                       	smpsAlterNote       $07
00081526 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008152C E10B                       	smpsAlterNote       $0B
0008152E A203 8001                  	dc.b	nA2, $03, nRst, $01
00081532 E107                       	smpsAlterNote       $07
00081534 9B03                       	dc.b	nD2, $03
00081536 E11A                       	smpsAlterNote       $1A
00081538 A301                       	dc.b	nBb2, $01
0008153A E1F9                       	smpsAlterNote       $F9
0008153C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008153F E107                       	smpsAlterNote       $07
00081541 E701                       	dc.b	smpsNoAttack, $01
00081543 E111                       	smpsAlterNote       $11
00081545 E701                       	dc.b	smpsNoAttack, $01
00081547 E106                       	smpsAlterNote       $06
00081549 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008154E E107                       	smpsAlterNote       $07
00081550 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00081558 E1EC                       	smpsAlterNote       $EC
0008155A A101                       	dc.b	nAb2, $01
0008155C E108                       	smpsAlterNote       $08
0008155E E701                       	dc.b	smpsNoAttack, $01
00081560 E116                       	smpsAlterNote       $16
00081562 E701                       	dc.b	smpsNoAttack, $01
00081564 E1F5                       	smpsAlterNote       $F5
00081566 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081569 E10B                       	smpsAlterNote       $0B
0008156B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008156F E107                       	smpsAlterNote       $07
00081571 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00081577 E109                       	smpsAlterNote       $09
00081579 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008157D E10B                       	smpsAlterNote       $0B
0008157F 9603                       	dc.b	nA1, $03
00081581 E107                       	smpsAlterNote       $07
00081583 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00081589 E10B                       	smpsAlterNote       $0B
0008158B A203 8001                  	dc.b	nA2, $03, nRst, $01
0008158F E107                       	smpsAlterNote       $07
00081591 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081595 E11A                       	smpsAlterNote       $1A
00081597 A301                       	dc.b	nBb2, $01
00081599 E1F9                       	smpsAlterNote       $F9
0008159B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008159E E107                       	smpsAlterNote       $07
000815A0 E701                       	dc.b	smpsNoAttack, $01
000815A2 E1FB                       	smpsAlterNote       $FB
000815A4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000815A7 E106                       	smpsAlterNote       $06
000815A9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000815AD E107                       	smpsAlterNote       $07
000815AF 9B03                       	dc.b	nD2, $03
000815B1 E108                       	smpsAlterNote       $08
000815B3 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000815B9 E109                       	smpsAlterNote       $09
000815BB A002 8001                  	dc.b	nG2, $02, nRst, $01
000815BF E10C                       	smpsAlterNote       $0C
000815C1 A303                       	dc.b	nBb2, $03
000815C3 E1F0                       	smpsAlterNote       $F0
000815C5 A401                       	dc.b	nB2, $01
000815C7 E1FD                       	smpsAlterNote       $FD
000815C9 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000815CE E106                       	smpsAlterNote       $06
000815D0 8001                       	dc.b	nRst, $01
000815D2 E109                       	smpsAlterNote       $09
000815D4 A006 8001                  	dc.b	nG2, $06, nRst, $01
000815D8 E108                       	smpsAlterNote       $08
000815DA 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000815DE E107                       	smpsAlterNote       $07
000815E0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000815E6 E10B                       	smpsAlterNote       $0B
000815E8 A203                       	dc.b	nA2, $03
000815EA E107                       	smpsAlterNote       $07
000815EC 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000815F0 E1F2                       	smpsAlterNote       $F2
000815F2 A401                       	dc.b	nB2, $01
000815F4 E1FF                       	smpsAlterNote       $FF
000815F6 E701                       	dc.b	smpsNoAttack, $01
000815F8 E107                       	smpsAlterNote       $07
000815FA E701                       	dc.b	smpsNoAttack, $01
000815FC E1FB                       	smpsAlterNote       $FB
000815FE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081601 E106                       	smpsAlterNote       $06
00081603 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081607 E107                       	smpsAlterNote       $07
00081609 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00081613 E117                       	smpsAlterNote       $17
00081615 A001                       	dc.b	nG2, $01
00081617 E1FA                       	smpsAlterNote       $FA
00081619 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008161C E108                       	smpsAlterNote       $08
0008161E E701                       	dc.b	smpsNoAttack, $01
00081620 E1E7                       	smpsAlterNote       $E7
00081622 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081625 E103                       	smpsAlterNote       $03
00081627 E701                       	dc.b	smpsNoAttack, $01
00081629 E10B                       	smpsAlterNote       $0B
0008162B E702                       	dc.b	smpsNoAttack, $02
0008162D E107                       	smpsAlterNote       $07
0008162F 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00081637 E106                       	smpsAlterNote       $06
00081639 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008163F E10C                       	smpsAlterNote       $0C
00081641 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00081647 E109                       	smpsAlterNote       $09
00081649 9E03                       	dc.b	nF2, $03
0008164B E10C                       	smpsAlterNote       $0C
0008164D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081651 E1EA                       	smpsAlterNote       $EA
00081653 A201                       	dc.b	nA2, $01
00081655 E106                       	smpsAlterNote       $06
00081657 E701                       	dc.b	smpsNoAttack, $01
00081659 E1E2                       	smpsAlterNote       $E2
0008165B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008165E E1F0                       	smpsAlterNote       $F0
00081660 E701                       	dc.b	smpsNoAttack, $01
00081662 E10C                       	smpsAlterNote       $0C
00081664 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00081670 E116                       	smpsAlterNote       $16
00081672 9C01                       	dc.b	nEb2, $01
00081674 E105                       	smpsAlterNote       $05
00081676 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081679 E1F1                       	smpsAlterNote       $F1
0008167B E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008167E E1FF                       	smpsAlterNote       $FF
00081680 E701                       	dc.b	smpsNoAttack, $01
00081682 E109                       	smpsAlterNote       $09
00081684 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081688 E10C                       	smpsAlterNote       $0C
0008168A 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00081696 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008169C E109                       	smpsAlterNote       $09
0008169E 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000816A2 E10C                       	smpsAlterNote       $0C
000816A4 9703                       	dc.b	nBb1, $03
000816A6 E11A                       	smpsAlterNote       $1A
000816A8 A101                       	dc.b	nAb2, $01
000816AA E1FB                       	smpsAlterNote       $FB
000816AC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000816AF E10A                       	smpsAlterNote       $0A
000816B1 E701                       	dc.b	smpsNoAttack, $01
000816B3 E1E8                       	smpsAlterNote       $E8
000816B5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000816B8 E106                       	smpsAlterNote       $06
000816BA E701                       	dc.b	smpsNoAttack, $01
000816BC E10C                       	smpsAlterNote       $0C
000816BE E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000816CA E1F9                       	smpsAlterNote       $F9
000816CC 9D01                       	dc.b	nE2, $01
000816CE E108                       	smpsAlterNote       $08
000816D0 E701                       	dc.b	smpsNoAttack, $01
000816D2 E1F6                       	smpsAlterNote       $F6
000816D4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000816D7 E109                       	smpsAlterNote       $09
000816D9 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000816DD E10C                       	smpsAlterNote       $0C
000816DF 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000816EB E108                       	smpsAlterNote       $08
000816ED 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000816F3 E106                       	smpsAlterNote       $06
000816F5 A403 8001                  	dc.b	nB2, $03, nRst, $01
000816F9 E108                       	smpsAlterNote       $08
000816FB 9D03                       	dc.b	nE2, $03
000816FD E1EB                       	smpsAlterNote       $EB
000816FF A801                       	dc.b	nEb3, $01
00081701 E109                       	smpsAlterNote       $09
00081703 E701                       	dc.b	smpsNoAttack, $01
00081705 E1FA                       	smpsAlterNote       $FA
00081707 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008170A E108                       	smpsAlterNote       $08
0008170C E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00081718 E1E9                       	smpsAlterNote       $E9
0008171A A301                       	dc.b	nBb2, $01
0008171C E107                       	smpsAlterNote       $07
0008171E E701                       	dc.b	smpsNoAttack, $01
00081720 E1F0                       	smpsAlterNote       $F0
00081722 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081725 E1F7                       	smpsAlterNote       $F7
00081727 E701                       	dc.b	smpsNoAttack, $01
00081729 E107                       	smpsAlterNote       $07
0008172B E701                       	dc.b	smpsNoAttack, $01
0008172D E106                       	smpsAlterNote       $06
0008172F E701                       	dc.b	smpsNoAttack, $01
00081731 E108                       	smpsAlterNote       $08
00081733 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00081739 E106                       	smpsAlterNote       $06
0008173B A403 8001                  	dc.b	nB2, $03, nRst, $01
0008173F E108                       	smpsAlterNote       $08
00081741 9D03                       	dc.b	nE2, $03
00081743 E10B                       	smpsAlterNote       $0B
00081745 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008174D E108                       	smpsAlterNote       $08
0008174F 9D03                       	dc.b	nE2, $03
00081751 E10B                       	smpsAlterNote       $0B
00081753 9603 8001                  	dc.b	nA1, $03, nRst, $01
00081757 E113                       	smpsAlterNote       $13
00081759 A001                       	dc.b	nG2, $01
0008175B E118                       	smpsAlterNote       $18
0008175D E701                       	dc.b	smpsNoAttack, $01
0008175F E1E9                       	smpsAlterNote       $E9
00081761 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081764 E1F3                       	smpsAlterNote       $F3
00081766 E701                       	dc.b	smpsNoAttack, $01
00081768 E1FD                       	smpsAlterNote       $FD
0008176A E701                       	dc.b	smpsNoAttack, $01
0008176C E102                       	smpsAlterNote       $02
0008176E E701                       	dc.b	smpsNoAttack, $01
00081770 E107                       	smpsAlterNote       $07
00081772 8001                       	dc.b	nRst, $01
00081774 E10B                       	smpsAlterNote       $0B
00081776 9603                       	dc.b	nA1, $03
00081778 E10C                       	smpsAlterNote       $0C
0008177A 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00081780 E10B                       	smpsAlterNote       $0B
00081782 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008178E 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00081794 E107                       	smpsAlterNote       $07
00081796 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008179C E10B                       	smpsAlterNote       $0B
0008179E A203                       	dc.b	nA2, $03
000817A0 E107                       	smpsAlterNote       $07
000817A2 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000817A6 E1F2                       	smpsAlterNote       $F2
000817A8 A401                       	dc.b	nB2, $01
000817AA E1FF                       	smpsAlterNote       $FF
000817AC E701                       	dc.b	smpsNoAttack, $01
000817AE E107                       	smpsAlterNote       $07
000817B0 E701                       	dc.b	smpsNoAttack, $01
000817B2 E1FB                       	smpsAlterNote       $FB
000817B4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000817B7 E106                       	smpsAlterNote       $06
000817B9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000817BD E107                       	smpsAlterNote       $07
000817BF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000817C3 E108                       	smpsAlterNote       $08
000817C5 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000817CB E109                       	smpsAlterNote       $09
000817CD A003 8001                  	dc.b	nG2, $03, nRst, $01
000817D1 E10C                       	smpsAlterNote       $0C
000817D3 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000817D7 E1F0                       	smpsAlterNote       $F0
000817D9 A401                       	dc.b	nB2, $01
000817DB E109                       	smpsAlterNote       $09
000817DD E701                       	dc.b	smpsNoAttack, $01
000817DF E106                       	smpsAlterNote       $06
000817E1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000817E4 E109                       	smpsAlterNote       $09
000817E6 A007                       	dc.b	nG2, $07
000817E8 E108                       	smpsAlterNote       $08
000817EA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000817EE E107                       	smpsAlterNote       $07
000817F0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000817F6 E10B                       	smpsAlterNote       $0B
000817F8 A202 8001                  	dc.b	nA2, $02, nRst, $01
000817FC E107                       	smpsAlterNote       $07
000817FE 9B03                       	dc.b	nD2, $03
00081800 E11A                       	smpsAlterNote       $1A
00081802 A301                       	dc.b	nBb2, $01
00081804 E1F2                       	smpsAlterNote       $F2
00081806 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081809 E1FF                       	smpsAlterNote       $FF
0008180B E701                       	dc.b	smpsNoAttack, $01
0008180D E111                       	smpsAlterNote       $11
0008180F E701                       	dc.b	smpsNoAttack, $01
00081811 E106                       	smpsAlterNote       $06
00081813 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081816 E107                       	smpsAlterNote       $07
00081818 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00081824 E117                       	smpsAlterNote       $17
00081826 A001                       	dc.b	nG2, $01
00081828 E1FA                       	smpsAlterNote       $FA
0008182A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008182D E116                       	smpsAlterNote       $16
0008182F E701                       	dc.b	smpsNoAttack, $01
00081831 E1F5                       	smpsAlterNote       $F5
00081833 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081836 E103                       	smpsAlterNote       $03
00081838 E701                       	dc.b	smpsNoAttack, $01
0008183A E10B                       	smpsAlterNote       $0B
0008183C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00081840 E107                       	smpsAlterNote       $07
00081842 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081848 E109                       	smpsAlterNote       $09
0008184A 9E03                       	dc.b	nF2, $03
0008184C E10B                       	smpsAlterNote       $0B
0008184E 9603 8001                  	dc.b	nA1, $03, nRst, $01
00081852 E107                       	smpsAlterNote       $07
00081854 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008185A E10B                       	smpsAlterNote       $0B
0008185C A203 8001                  	dc.b	nA2, $03, nRst, $01
00081860 E107                       	smpsAlterNote       $07
00081862 9B03                       	dc.b	nD2, $03
00081864 E11A                       	smpsAlterNote       $1A
00081866 A301                       	dc.b	nBb2, $01
00081868 E1F9                       	smpsAlterNote       $F9
0008186A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008186D E107                       	smpsAlterNote       $07
0008186F E701                       	dc.b	smpsNoAttack, $01
00081871 E111                       	smpsAlterNote       $11
00081873 E701                       	dc.b	smpsNoAttack, $01
00081875 E106                       	smpsAlterNote       $06
00081877 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008187C E107                       	smpsAlterNote       $07
0008187E 9B03                       	dc.b	nD2, $03
00081880 E108                       	smpsAlterNote       $08
00081882 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00081888 E109                       	smpsAlterNote       $09
0008188A A003                       	dc.b	nG2, $03
0008188C E10C                       	smpsAlterNote       $0C
0008188E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00081892 E1FD                       	smpsAlterNote       $FD
00081894 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00081899 E106                       	smpsAlterNote       $06
0008189B 8001                       	dc.b	nRst, $01
0008189D E109                       	smpsAlterNote       $09
0008189F A006 8001                  	dc.b	nG2, $06, nRst, $01
000818A3 E108                       	smpsAlterNote       $08
000818A5 9C03                       	dc.b	nEb2, $03
000818A7 E107                       	smpsAlterNote       $07
000818A9 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000818AF E10B                       	smpsAlterNote       $0B
000818B1 A203 8001                  	dc.b	nA2, $03, nRst, $01
000818B5 E107                       	smpsAlterNote       $07
000818B7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000818BB E11A                       	smpsAlterNote       $1A
000818BD A301                       	dc.b	nBb2, $01
000818BF E1F9                       	smpsAlterNote       $F9
000818C1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000818C4 E107                       	smpsAlterNote       $07
000818C6 E701                       	dc.b	smpsNoAttack, $01
000818C8 E1FB                       	smpsAlterNote       $FB
000818CA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000818CD E106                       	smpsAlterNote       $06
000818CF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000818D3 E107                       	smpsAlterNote       $07
000818D5 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000818DD E1EC                       	smpsAlterNote       $EC
000818DF A101                       	dc.b	nAb2, $01
000818E1 E108                       	smpsAlterNote       $08
000818E3 E701                       	dc.b	smpsNoAttack, $01
000818E5 E1E7                       	smpsAlterNote       $E7
000818E7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000818EA E1F5                       	smpsAlterNote       $F5
000818EC E701                       	dc.b	smpsNoAttack, $01
000818EE E10B                       	smpsAlterNote       $0B
000818F0 E702                       	dc.b	smpsNoAttack, $02
000818F2 E107                       	smpsAlterNote       $07
000818F4 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000818FA E106                       	smpsAlterNote       $06
000818FC 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00081902 E10C                       	smpsAlterNote       $0C
00081904 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008190C E109                       	smpsAlterNote       $09
0008190E 9E03                       	dc.b	nF2, $03
00081910 E10C                       	smpsAlterNote       $0C
00081912 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081916 E1EA                       	smpsAlterNote       $EA
00081918 A201                       	dc.b	nA2, $01
0008191A E106                       	smpsAlterNote       $06
0008191C E701                       	dc.b	smpsNoAttack, $01
0008191E E114                       	smpsAlterNote       $14
00081920 E701                       	dc.b	smpsNoAttack, $01
00081922 E1F0                       	smpsAlterNote       $F0
00081924 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081927 E10C                       	smpsAlterNote       $0C
00081929 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00081935 9703                       	dc.b	nBb1, $03
00081937 E116                       	smpsAlterNote       $16
00081939 9C01                       	dc.b	nEb2, $01
0008193B E105                       	smpsAlterNote       $05
0008193D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081940 E113                       	smpsAlterNote       $13
00081942 E701                       	dc.b	smpsNoAttack, $01
00081944 E1FF                       	smpsAlterNote       $FF
00081946 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081949 E109                       	smpsAlterNote       $09
0008194B E703                       	dc.b	smpsNoAttack, $03
0008194D E10C                       	smpsAlterNote       $0C
0008194F 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008195B 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081963 E109                       	smpsAlterNote       $09
00081965 9E03                       	dc.b	nF2, $03
00081967 E10C                       	smpsAlterNote       $0C
00081969 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008196D E1EC                       	smpsAlterNote       $EC
0008196F A201                       	dc.b	nA2, $01
00081971 E10A                       	smpsAlterNote       $0A
00081973 E701                       	dc.b	smpsNoAttack, $01
00081975 E1E8                       	smpsAlterNote       $E8
00081977 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008197A E1F7                       	smpsAlterNote       $F7
0008197C E701                       	dc.b	smpsNoAttack, $01
0008197E E10C                       	smpsAlterNote       $0C
00081980 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008198C E1EA                       	smpsAlterNote       $EA
0008198E 9D01                       	dc.b	nE2, $01
00081990 E108                       	smpsAlterNote       $08
00081992 E701                       	dc.b	smpsNoAttack, $01
00081994 E1F6                       	smpsAlterNote       $F6
00081996 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081999 E105                       	smpsAlterNote       $05
0008199B E701                       	dc.b	smpsNoAttack, $01
0008199D E109                       	smpsAlterNote       $09
0008199F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000819A3 E10C                       	smpsAlterNote       $0C
000819A5 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000819B1 E108                       	smpsAlterNote       $08
000819B3 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000819B9 E106                       	smpsAlterNote       $06
000819BB A403 8001                  	dc.b	nB2, $03, nRst, $01
000819BF E108                       	smpsAlterNote       $08
000819C1 9D03                       	dc.b	nE2, $03
000819C3 E1EB                       	smpsAlterNote       $EB
000819C5 A801                       	dc.b	nEb3, $01
000819C7 E109                       	smpsAlterNote       $09
000819C9 E701                       	dc.b	smpsNoAttack, $01
000819CB E1EB                       	smpsAlterNote       $EB
000819CD E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000819D0 E108                       	smpsAlterNote       $08
000819D2 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000819DE E1E9                       	smpsAlterNote       $E9
000819E0 A301                       	dc.b	nBb2, $01
000819E2 E1F8                       	smpsAlterNote       $F8
000819E4 E701                       	dc.b	smpsNoAttack, $01
000819E6 E116                       	smpsAlterNote       $16
000819E8 E701                       	dc.b	smpsNoAttack, $01
000819EA E1F7                       	smpsAlterNote       $F7
000819EC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000819EF E107                       	smpsAlterNote       $07
000819F1 E701                       	dc.b	smpsNoAttack, $01
000819F3 E1EE                       	smpsAlterNote       $EE
000819F5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000819F8 E106                       	smpsAlterNote       $06
000819FA 8001                       	dc.b	nRst, $01
000819FC E108                       	smpsAlterNote       $08
000819FE 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00081A04 E106                       	smpsAlterNote       $06
00081A06 A402 8001                  	dc.b	nB2, $02, nRst, $01
00081A0A E108                       	smpsAlterNote       $08
00081A0C 9D03                       	dc.b	nE2, $03
00081A0E E10B                       	smpsAlterNote       $0B
00081A10 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00081A16 E108                       	smpsAlterNote       $08
00081A18 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00081A1C E10B                       	smpsAlterNote       $0B
00081A1E 9603                       	dc.b	nA1, $03
00081A20 E10E                       	smpsAlterNote       $0E
00081A22 A001                       	dc.b	nG2, $01
00081A24 E118                       	smpsAlterNote       $18
00081A26 E701                       	dc.b	smpsNoAttack, $01
00081A28 E1E9                       	smpsAlterNote       $E9
00081A2A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081A2D E1EE                       	smpsAlterNote       $EE
00081A2F E701                       	dc.b	smpsNoAttack, $01
00081A31 E1F8                       	smpsAlterNote       $F8
00081A33 E701                       	dc.b	smpsNoAttack, $01
00081A35 E102                       	smpsAlterNote       $02
00081A37 E701                       	dc.b	smpsNoAttack, $01
00081A39 E107                       	smpsAlterNote       $07
00081A3B 8001                       	dc.b	nRst, $01
00081A3D E10B                       	smpsAlterNote       $0B
00081A3F 9603                       	dc.b	nA1, $03
00081A41 E10C                       	smpsAlterNote       $0C
00081A43 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00081A49 E10B                       	smpsAlterNote       $0B
00081A4B 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00081A57 8001 9603                  	dc.b	nRst, $01, nA1, $03
00081A5B E10C                       	smpsAlterNote       $0C
00081A5D 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00081A69 8001                       	dc.b	nRst, $01
00081A6B E10B                       	smpsAlterNote       $0B
00081A6D 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00081A75 E107                       	smpsAlterNote       $07
00081A77 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00081A7B E10B                       	smpsAlterNote       $0B
00081A7D 9603                       	dc.b	nA1, $03
00081A7F E109                       	smpsAlterNote       $09
00081A81 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081A85 E108                       	smpsAlterNote       $08
00081A87 9D06                       	dc.b	nE2, $06
00081A89 E107                       	smpsAlterNote       $07
00081A8B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081A8F E106                       	smpsAlterNote       $06
00081A91 9903                       	dc.b	nC2, $03
00081A93 E10C                       	smpsAlterNote       $0C
00081A95 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081A99 E10B                       	smpsAlterNote       $0B
00081A9B 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00081AA7 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081AB1 E10C                       	smpsAlterNote       $0C
00081AB3 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00081ABF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00081ACB 8001                       	dc.b	nRst, $01
00081ACD E10B                       	smpsAlterNote       $0B
00081ACF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081ADB 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00081AE7 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00081AF3 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081AFD E10C                       	smpsAlterNote       $0C
00081AFF 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00081B0B E10B                       	smpsAlterNote       $0B
00081B0D 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00081B15 E107                       	smpsAlterNote       $07
00081B17 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00081B1B E10B                       	smpsAlterNote       $0B
00081B1D 9603                       	dc.b	nA1, $03
00081B1F E109                       	smpsAlterNote       $09
00081B21 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081B25 E108                       	smpsAlterNote       $08
00081B27 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00081B2B E107                       	smpsAlterNote       $07
00081B2D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081B31 E106                       	smpsAlterNote       $06
00081B33 9903                       	dc.b	nC2, $03
00081B35 E10C                       	smpsAlterNote       $0C
00081B37 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081B3B E10B                       	smpsAlterNote       $0B
00081B3D 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081B49 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081B53 E10C                       	smpsAlterNote       $0C
00081B55 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00081B61 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00081B6D 8001                       	dc.b	nRst, $01
00081B6F E10B                       	smpsAlterNote       $0B
00081B71 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081B7D 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081B87 E10C                       	smpsAlterNote       $0C
00081B89 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081B95 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00081BA1 E10B                       	smpsAlterNote       $0B
00081BA3 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081BAF 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00081BB9 E10C                       	smpsAlterNote       $0C
00081BBB 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081BC7 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00081BD3 E10B                       	smpsAlterNote       $0B
00081BD5 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00081BE1 8001                       	dc.b	nRst, $01
00081BE3 E1EC                       	smpsAlterNote       $EC
00081BE5 A101                       	dc.b	nAb2, $01
00081BE7 E1FA                       	smpsAlterNote       $FA
00081BE9 E701                       	dc.b	smpsNoAttack, $01
00081BEB E116                       	smpsAlterNote       $16
00081BED E701                       	dc.b	smpsNoAttack, $01
00081BEF E1F5                       	smpsAlterNote       $F5
00081BF1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081BF4 E10B                       	smpsAlterNote       $0B
00081BF6 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00081C02 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00081C0E E107                       	smpsAlterNote       $07
00081C10 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081C16 E10B                       	smpsAlterNote       $0B
00081C18 A203                       	dc.b	nA2, $03
00081C1A E107                       	smpsAlterNote       $07
00081C1C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081C20 E1F3                       	smpsAlterNote       $F3
00081C22 A401                       	dc.b	nB2, $01
00081C24 E102                       	smpsAlterNote       $02
00081C26 E701                       	dc.b	smpsNoAttack, $01
00081C28 E109                       	smpsAlterNote       $09
00081C2A E701                       	dc.b	smpsNoAttack, $01
00081C2C E102                       	smpsAlterNote       $02
00081C2E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081C31 E106                       	smpsAlterNote       $06
00081C33 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081C37 E107                       	smpsAlterNote       $07
00081C39 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081C3D E108                       	smpsAlterNote       $08
00081C3F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00081C45 E109                       	smpsAlterNote       $09
00081C47 A003 8001                  	dc.b	nG2, $03, nRst, $01
00081C4B E1F2                       	smpsAlterNote       $F2
00081C4D A401                       	dc.b	nB2, $01
00081C4F E1FF                       	smpsAlterNote       $FF
00081C51 E701                       	dc.b	smpsNoAttack, $01
00081C53 E111                       	smpsAlterNote       $11
00081C55 E701                       	dc.b	smpsNoAttack, $01
00081C57 E1FB                       	smpsAlterNote       $FB
00081C59 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081C5C E106                       	smpsAlterNote       $06
00081C5E E702                       	dc.b	smpsNoAttack, $02
00081C60 E109                       	smpsAlterNote       $09
00081C62 A007                       	dc.b	nG2, $07
00081C64 E108                       	smpsAlterNote       $08
00081C66 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00081C6A E107                       	smpsAlterNote       $07
00081C6C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081C72 E10B                       	smpsAlterNote       $0B
00081C74 A202 8001                  	dc.b	nA2, $02, nRst, $01
00081C78 E107                       	smpsAlterNote       $07
00081C7A 9B03                       	dc.b	nD2, $03
00081C7C E11A                       	smpsAlterNote       $1A
00081C7E A301                       	dc.b	nBb2, $01
00081C80 E1F2                       	smpsAlterNote       $F2
00081C82 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081C85 E1FF                       	smpsAlterNote       $FF
00081C87 E701                       	dc.b	smpsNoAttack, $01
00081C89 E111                       	smpsAlterNote       $11
00081C8B E701                       	dc.b	smpsNoAttack, $01
00081C8D E106                       	smpsAlterNote       $06
00081C8F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081C92 E107                       	smpsAlterNote       $07
00081C94 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00081CA0 E117                       	smpsAlterNote       $17
00081CA2 A001                       	dc.b	nG2, $01
00081CA4 E1FA                       	smpsAlterNote       $FA
00081CA6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081CA9 E116                       	smpsAlterNote       $16
00081CAB E701                       	dc.b	smpsNoAttack, $01
00081CAD E1F5                       	smpsAlterNote       $F5
00081CAF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081CB2 E103                       	smpsAlterNote       $03
00081CB4 E701                       	dc.b	smpsNoAttack, $01
00081CB6 E10B                       	smpsAlterNote       $0B
00081CB8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00081CBC E107                       	smpsAlterNote       $07
00081CBE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081CC4 E109                       	smpsAlterNote       $09
00081CC6 9E03                       	dc.b	nF2, $03
00081CC8 E10B                       	smpsAlterNote       $0B
00081CCA 9603 8001                  	dc.b	nA1, $03, nRst, $01
00081CCE E107                       	smpsAlterNote       $07
00081CD0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00081CD6 E10B                       	smpsAlterNote       $0B
00081CD8 A203 8001                  	dc.b	nA2, $03, nRst, $01
00081CDC E107                       	smpsAlterNote       $07
00081CDE 9B03                       	dc.b	nD2, $03
00081CE0 E11A                       	smpsAlterNote       $1A
00081CE2 A301                       	dc.b	nBb2, $01
00081CE4 E1F9                       	smpsAlterNote       $F9
00081CE6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081CE9 E1FF                       	smpsAlterNote       $FF
00081CEB E701                       	dc.b	smpsNoAttack, $01
00081CED E111                       	smpsAlterNote       $11
00081CEF E701                       	dc.b	smpsNoAttack, $01
00081CF1 E106                       	smpsAlterNote       $06
00081CF3 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081CF6 E107                       	smpsAlterNote       $07
00081CF8 9B03                       	dc.b	nD2, $03
00081CFA E108                       	smpsAlterNote       $08
00081CFC 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00081D02 E109                       	smpsAlterNote       $09
00081D04 A003                       	dc.b	nG2, $03
00081D06 E1F0                       	smpsAlterNote       $F0
00081D08 A501                       	dc.b	nC3, $01
00081D0A E106                       	smpsAlterNote       $06
00081D0C E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00081D10 E109                       	smpsAlterNote       $09
00081D12 A006 8001                  	dc.b	nG2, $06, nRst, $01
00081D16 E108                       	smpsAlterNote       $08
00081D18 9C03                       	dc.b	nEb2, $03
00081D1A E107                       	smpsAlterNote       $07
00081D1C 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00081D22 E10B                       	smpsAlterNote       $0B
00081D24 A203 8001                  	dc.b	nA2, $03, nRst, $01
00081D28 E107                       	smpsAlterNote       $07
00081D2A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081D2E E11A                       	smpsAlterNote       $1A
00081D30 A301                       	dc.b	nBb2, $01
00081D32 E1F9                       	smpsAlterNote       $F9
00081D34 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081D37 E107                       	smpsAlterNote       $07
00081D39 E701                       	dc.b	smpsNoAttack, $01
00081D3B E1FB                       	smpsAlterNote       $FB
00081D3D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081D40 E106                       	smpsAlterNote       $06
00081D42 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081D46 E107                       	smpsAlterNote       $07
00081D48 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00081D50 E1EC                       	smpsAlterNote       $EC
00081D52 A101                       	dc.b	nAb2, $01
00081D54 E108                       	smpsAlterNote       $08
00081D56 E701                       	dc.b	smpsNoAttack, $01
00081D58 E1E7                       	smpsAlterNote       $E7
00081D5A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081D5D E1F5                       	smpsAlterNote       $F5
00081D5F E701                       	dc.b	smpsNoAttack, $01
00081D61 E10B                       	smpsAlterNote       $0B
00081D63 E702                       	dc.b	smpsNoAttack, $02
00081D65 E107                       	smpsAlterNote       $07
00081D67 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00081D6D E106                       	smpsAlterNote       $06
00081D6F 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00081D75 E10C                       	smpsAlterNote       $0C
00081D77 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00081D7F E109                       	smpsAlterNote       $09
00081D81 9E03                       	dc.b	nF2, $03
00081D83 E10C                       	smpsAlterNote       $0C
00081D85 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081D89 E1EA                       	smpsAlterNote       $EA
00081D8B A201                       	dc.b	nA2, $01
00081D8D E106                       	smpsAlterNote       $06
00081D8F E701                       	dc.b	smpsNoAttack, $01
00081D91 E114                       	smpsAlterNote       $14
00081D93 E701                       	dc.b	smpsNoAttack, $01
00081D95 E1F0                       	smpsAlterNote       $F0
00081D97 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081D9A E10C                       	smpsAlterNote       $0C
00081D9C E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00081DA8 9703                       	dc.b	nBb1, $03
00081DAA E116                       	smpsAlterNote       $16
00081DAC 9C01                       	dc.b	nEb2, $01
00081DAE E105                       	smpsAlterNote       $05
00081DB0 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081DB3 E113                       	smpsAlterNote       $13
00081DB5 E701                       	dc.b	smpsNoAttack, $01
00081DB7 E1FF                       	smpsAlterNote       $FF
00081DB9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081DBC E109                       	smpsAlterNote       $09
00081DBE E703                       	dc.b	smpsNoAttack, $03
00081DC0 E10C                       	smpsAlterNote       $0C
00081DC2 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00081DCE 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081DD6 E109                       	smpsAlterNote       $09
00081DD8 9E03                       	dc.b	nF2, $03
00081DDA E10C                       	smpsAlterNote       $0C
00081DDC 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081DE0 E1EA                       	smpsAlterNote       $EA
00081DE2 A201                       	dc.b	nA2, $01
00081DE4 E106                       	smpsAlterNote       $06
00081DE6 E701                       	dc.b	smpsNoAttack, $01
00081DE8 E1E2                       	smpsAlterNote       $E2
00081DEA E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081DED E1F0                       	smpsAlterNote       $F0
00081DEF E701                       	dc.b	smpsNoAttack, $01
00081DF1 E10C                       	smpsAlterNote       $0C
00081DF3 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00081DFF E116                       	smpsAlterNote       $16
00081E01 9C01                       	dc.b	nEb2, $01
00081E03 E105                       	smpsAlterNote       $05
00081E05 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081E08 E1F1                       	smpsAlterNote       $F1
00081E0A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081E0D E1FF                       	smpsAlterNote       $FF
00081E0F E701                       	dc.b	smpsNoAttack, $01
00081E11 E109                       	smpsAlterNote       $09
00081E13 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081E17 E10C                       	smpsAlterNote       $0C
00081E19 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00081E25 E106                       	smpsAlterNote       $06
00081E27 9903                       	dc.b	nC2, $03
00081E29 E107                       	smpsAlterNote       $07
00081E2B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081E2F E109                       	smpsAlterNote       $09
00081E31 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00081E37 E107                       	smpsAlterNote       $07
00081E39 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081E3D E108                       	smpsAlterNote       $08
00081E3F 9D03                       	dc.b	nE2, $03
00081E41 E10B                       	smpsAlterNote       $0B
00081E43 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00081E49 E109                       	smpsAlterNote       $09
00081E4B 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00081E51 E10C                       	smpsAlterNote       $0C
00081E53 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00081E59 E106                       	smpsAlterNote       $06
00081E5B 9903                       	dc.b	nC2, $03
00081E5D E11A                       	smpsAlterNote       $1A
00081E5F A301                       	dc.b	nBb2, $01
00081E61 E1F9                       	smpsAlterNote       $F9
00081E63 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081E66 E1FF                       	smpsAlterNote       $FF
00081E68 E701                       	dc.b	smpsNoAttack, $01
00081E6A E111                       	smpsAlterNote       $11
00081E6C E701                       	dc.b	smpsNoAttack, $01
00081E6E E106                       	smpsAlterNote       $06
00081E70 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00081E77 E109                       	smpsAlterNote       $09
00081E79 A003                       	dc.b	nG2, $03
00081E7B E106                       	smpsAlterNote       $06
00081E7D 9907                       	dc.b	nC2, $07
00081E7F E107                       	smpsAlterNote       $07
00081E81 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00081E89 E10B                       	smpsAlterNote       $0B
00081E8B A203                       	dc.b	nA2, $03
00081E8D E107                       	smpsAlterNote       $07
00081E8F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081E93 E1F2                       	smpsAlterNote       $F2
00081E95 A401                       	dc.b	nB2, $01
00081E97 E1F9                       	smpsAlterNote       $F9
00081E99 E701                       	dc.b	smpsNoAttack, $01
00081E9B E107                       	smpsAlterNote       $07
00081E9D E701                       	dc.b	smpsNoAttack, $01
00081E9F E1FB                       	smpsAlterNote       $FB
00081EA1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081EA4 E106                       	smpsAlterNote       $06
00081EA6 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081EAA E107                       	smpsAlterNote       $07
00081EAC 9B03                       	dc.b	nD2, $03
00081EAE E108                       	smpsAlterNote       $08
00081EB0 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00081EB6 E109                       	smpsAlterNote       $09
00081EB8 A003 8001                  	dc.b	nG2, $03, nRst, $01
00081EBC E1F2                       	smpsAlterNote       $F2
00081EBE A401                       	dc.b	nB2, $01
00081EC0 E1F9                       	smpsAlterNote       $F9
00081EC2 E701                       	dc.b	smpsNoAttack, $01
00081EC4 E107                       	smpsAlterNote       $07
00081EC6 E701                       	dc.b	smpsNoAttack, $01
00081EC8 E1FB                       	smpsAlterNote       $FB
00081ECA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081ECD E106                       	smpsAlterNote       $06
00081ECF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081ED3 E108                       	smpsAlterNote       $08
00081ED5 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00081ED9 E10C                       	smpsAlterNote       $0C
00081EDB A302 8001                  	dc.b	nBb2, $02, nRst, $01
00081EDF E107                       	smpsAlterNote       $07
00081EE1 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081EE7 E10B                       	smpsAlterNote       $0B
00081EE9 A203                       	dc.b	nA2, $03
00081EEB E107                       	smpsAlterNote       $07
00081EED 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081EF1 E1F2                       	smpsAlterNote       $F2
00081EF3 A401                       	dc.b	nB2, $01
00081EF5 E1FF                       	smpsAlterNote       $FF
00081EF7 E701                       	dc.b	smpsNoAttack, $01
00081EF9 E107                       	smpsAlterNote       $07
00081EFB E701                       	dc.b	smpsNoAttack, $01
00081EFD E1FB                       	smpsAlterNote       $FB
00081EFF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081F02 E106                       	smpsAlterNote       $06
00081F04 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081F08 E107                       	smpsAlterNote       $07
00081F0A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081F0E E108                       	smpsAlterNote       $08
00081F10 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00081F16 E109                       	smpsAlterNote       $09
00081F18 A003 8001                  	dc.b	nG2, $03, nRst, $01
00081F1C E1F2                       	smpsAlterNote       $F2
00081F1E A401                       	dc.b	nB2, $01
00081F20 E1FF                       	smpsAlterNote       $FF
00081F22 E701                       	dc.b	smpsNoAttack, $01
00081F24 E111                       	smpsAlterNote       $11
00081F26 E701                       	dc.b	smpsNoAttack, $01
00081F28 E1FB                       	smpsAlterNote       $FB
00081F2A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081F2D E106                       	smpsAlterNote       $06
00081F2F E702                       	dc.b	smpsNoAttack, $02
00081F31 E108                       	smpsAlterNote       $08
00081F33 9C07                       	dc.b	nEb2, $07
00081F35 E10C                       	smpsAlterNote       $0C
00081F37 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00081F3B E107                       	smpsAlterNote       $07
00081F3D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081F43 E10B                       	smpsAlterNote       $0B
00081F45 A202 8001                  	dc.b	nA2, $02, nRst, $01
00081F49 E107                       	smpsAlterNote       $07
00081F4B 9B03                       	dc.b	nD2, $03
00081F4D E11A                       	smpsAlterNote       $1A
00081F4F A301                       	dc.b	nBb2, $01
00081F51 E1F2                       	smpsAlterNote       $F2
00081F53 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081F56 E1FF                       	smpsAlterNote       $FF
00081F58 E701                       	dc.b	smpsNoAttack, $01
00081F5A E111                       	smpsAlterNote       $11
00081F5C E701                       	dc.b	smpsNoAttack, $01
00081F5E E106                       	smpsAlterNote       $06
00081F60 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081F63 E107                       	smpsAlterNote       $07
00081F65 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081F69 E108                       	smpsAlterNote       $08
00081F6B 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00081F73 E109                       	smpsAlterNote       $09
00081F75 A003                       	dc.b	nG2, $03
00081F77 E11A                       	smpsAlterNote       $1A
00081F79 A301                       	dc.b	nBb2, $01
00081F7B E1F2                       	smpsAlterNote       $F2
00081F7D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081F80 E1FF                       	smpsAlterNote       $FF
00081F82 E701                       	dc.b	smpsNoAttack, $01
00081F84 E111                       	smpsAlterNote       $11
00081F86 E701                       	dc.b	smpsNoAttack, $01
00081F88 E106                       	smpsAlterNote       $06
00081F8A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081F8D E108                       	smpsAlterNote       $08
00081F8F 9C07                       	dc.b	nEb2, $07
00081F91 E10C                       	smpsAlterNote       $0C
00081F93 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00081F97 E107                       	smpsAlterNote       $07
00081F99 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00081FA5 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00081FAF E108                       	smpsAlterNote       $08
00081FB1 9C06                       	dc.b	nEb2, $06
00081FB3 E10C                       	smpsAlterNote       $0C
00081FB5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081FB9 E108                       	smpsAlterNote       $08
00081FBB 9C03                       	dc.b	nEb2, $03
00081FBD E109                       	smpsAlterNote       $09
00081FBF A003 8001                  	dc.b	nG2, $03, nRst, $01
00081FC3 E10C                       	smpsAlterNote       $0C
00081FC5 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00081FCD E107                       	smpsAlterNote       $07
00081FCF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081FD3 F6F4 F8                    	smpsJump            music84_Jump04
00081FD6                            
00081FD6                            ; FM2 Data
00081FD6                            music84_FM2:
00081FD6 E0C0                       	smpsPan             panCenter, $00
00081FDA E10B                       	smpsAlterNote       $0B
00081FDC C603 8007                  	dc.b	nA5, $03, nRst, $07
00081FE0 E109                       	smpsAlterNote       $09
00081FE2 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00081FE6 E108                       	smpsAlterNote       $08
00081FE8 C103 8004                  	dc.b	nE5, $03, nRst, $04
00081FEE E080                       	smpsPan             panLeft, $00
00081FF0 E10C                       	smpsAlterNote       $0C
00081FF2 E6F9                       	smpsAlterVol        $F9
00081FF4 C703                       	dc.b	nBb5, $03
00081FF6 E10B                       	smpsAlterNote       $0B
00081FF8 C603 8001                  	dc.b	nA5, $03, nRst, $01
00081FFC E109                       	smpsAlterNote       $09
00081FFE C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00082004 E108                       	smpsAlterNote       $08
00082006 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008200A E106                       	smpsAlterNote       $06
0008200C BD03                       	dc.b	nC5, $03
0008200E E10B                       	smpsAlterNote       $0B
00082010 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00082016 E0C0                       	smpsPan             panCenter, $00
00082018 E107                       	smpsAlterNote       $07
0008201A E606                       	smpsAlterVol        $06
0008201C BF03                       	dc.b	nD5, $03
0008201E                            
0008201E                            music84_Jump03:
0008201E E108                       	smpsAlterNote       $08
00082020 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082024 E109                       	smpsAlterNote       $09
00082026 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008202C E10B                       	smpsAlterNote       $0B
0008202E C607                       	dc.b	nA5, $07
00082030 E107                       	smpsAlterNote       $07
00082032 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082036 E106                       	smpsAlterNote       $06
00082038 C90D                       	dc.b	nC6, $0D
0008203A E100                       	smpsAlterNote       $00
0008203C E701                       	dc.b	smpsNoAttack, $01
0008203E E1FF                       	smpsAlterNote       $FF
00082040 E701                       	dc.b	smpsNoAttack, $01
00082042 E103                       	smpsAlterNote       $03
00082044 E701                       	dc.b	smpsNoAttack, $01
00082046 E109                       	smpsAlterNote       $09
00082048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008204C E106                       	smpsAlterNote       $06
0008204E E701                       	dc.b	smpsNoAttack, $01
00082050 E100                       	smpsAlterNote       $00
00082052 E701                       	dc.b	smpsNoAttack, $01
00082054 E10C                       	smpsAlterNote       $0C
00082056 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008205A E10B                       	smpsAlterNote       $0B
0008205C C603                       	dc.b	nA5, $03
0008205E E109                       	smpsAlterNote       $09
00082060 C403 8001                  	dc.b	nG5, $03, nRst, $01
00082064 E10B                       	smpsAlterNote       $0B
00082066 C60D                       	dc.b	nA5, $0D
00082068 E105                       	smpsAlterNote       $05
0008206A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008206E E10B                       	smpsAlterNote       $0B
00082070 E701                       	dc.b	smpsNoAttack, $01
00082072 E10E                       	smpsAlterNote       $0E
00082074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082078 E108                       	smpsAlterNote       $08
0008207A E701                       	dc.b	smpsNoAttack, $01
0008207C E104                       	smpsAlterNote       $04
0008207E E701                       	dc.b	smpsNoAttack, $01
00082080 E105                       	smpsAlterNote       $05
00082082 E701                       	dc.b	smpsNoAttack, $01
00082084 E10B                       	smpsAlterNote       $0B
00082086 E701                       	dc.b	smpsNoAttack, $01
00082088 E10F                       	smpsAlterNote       $0F
0008208A E701                       	dc.b	smpsNoAttack, $01
0008208C E10B                       	smpsAlterNote       $0B
0008208E E701                       	dc.b	smpsNoAttack, $01
00082090 E108                       	smpsAlterNote       $08
00082092 E701                       	dc.b	smpsNoAttack, $01
00082094 E104                       	smpsAlterNote       $04
00082096 E701                       	dc.b	smpsNoAttack, $01
00082098 E108                       	smpsAlterNote       $08
0008209A E701                       	dc.b	smpsNoAttack, $01
0008209C E10E                       	smpsAlterNote       $0E
0008209E E701                       	dc.b	smpsNoAttack, $01
000820A0 E10F                       	smpsAlterNote       $0F
000820A2 E701                       	dc.b	smpsNoAttack, $01
000820A4 E10B                       	smpsAlterNote       $0B
000820A6 E701                       	dc.b	smpsNoAttack, $01
000820A8 E105                       	smpsAlterNote       $05
000820AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000820AE E108                       	smpsAlterNote       $08
000820B0 E701                       	dc.b	smpsNoAttack, $01
000820B2 E10E                       	smpsAlterNote       $0E
000820B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000820B8 E108                       	smpsAlterNote       $08
000820BA E701                       	dc.b	smpsNoAttack, $01
000820BC E105                       	smpsAlterNote       $05
000820BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000820C2 E10B                       	smpsAlterNote       $0B
000820C4 E701                       	dc.b	smpsNoAttack, $01
000820C6 E10F                       	smpsAlterNote       $0F
000820C8 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000820CC E107                       	smpsAlterNote       $07
000820CE BF03 8001                  	dc.b	nD5, $03, nRst, $01
000820D2 E108                       	smpsAlterNote       $08
000820D4 C103                       	dc.b	nE5, $03
000820D6 E109                       	smpsAlterNote       $09
000820D8 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000820E0 E10B                       	smpsAlterNote       $0B
000820E2 C606 8001                  	dc.b	nA5, $06, nRst, $01
000820E6 E107                       	smpsAlterNote       $07
000820E8 BF03                       	dc.b	nD5, $03
000820EA E106                       	smpsAlterNote       $06
000820EC C90D 8001                  	dc.b	nC6, $0D, nRst, $01
000820F0 E107                       	smpsAlterNote       $07
000820F2 CB03                       	dc.b	nD6, $03
000820F4 E10C                       	smpsAlterNote       $0C
000820F6 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000820FA E10B                       	smpsAlterNote       $0B
000820FC C604 8001                  	dc.b	nA5, $04, nRst, $01
00082100 E109                       	smpsAlterNote       $09
00082102 C404                       	dc.b	nG5, $04
00082104 E10B                       	smpsAlterNote       $0B
00082106 C60D                       	dc.b	nA5, $0D
00082108 E108                       	smpsAlterNote       $08
0008210A E701                       	dc.b	smpsNoAttack, $01
0008210C E104                       	smpsAlterNote       $04
0008210E E701                       	dc.b	smpsNoAttack, $01
00082110 E108                       	smpsAlterNote       $08
00082112 E701                       	dc.b	smpsNoAttack, $01
00082114 E10B                       	smpsAlterNote       $0B
00082116 E701                       	dc.b	smpsNoAttack, $01
00082118 E10F                       	smpsAlterNote       $0F
0008211A E701                       	dc.b	smpsNoAttack, $01
0008211C E10B                       	smpsAlterNote       $0B
0008211E E701                       	dc.b	smpsNoAttack, $01
00082120 E105                       	smpsAlterNote       $05
00082122 E701                       	dc.b	smpsNoAttack, $01
00082124 E104                       	smpsAlterNote       $04
00082126 E701                       	dc.b	smpsNoAttack, $01
00082128 E108                       	smpsAlterNote       $08
0008212A E701                       	dc.b	smpsNoAttack, $01
0008212C E10E                       	smpsAlterNote       $0E
0008212E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082132 E10B                       	smpsAlterNote       $0B
00082134 E701                       	dc.b	smpsNoAttack, $01
00082136 E105                       	smpsAlterNote       $05
00082138 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008213C E10B                       	smpsAlterNote       $0B
0008213E E701                       	dc.b	smpsNoAttack, $01
00082140 E10E                       	smpsAlterNote       $0E
00082142 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082146 E108                       	smpsAlterNote       $08
00082148 E701                       	dc.b	smpsNoAttack, $01
0008214A E104                       	smpsAlterNote       $04
0008214C E701                       	dc.b	smpsNoAttack, $01
0008214E E105                       	smpsAlterNote       $05
00082150 E701                       	dc.b	smpsNoAttack, $01
00082152 E10B                       	smpsAlterNote       $0B
00082154 E701                       	dc.b	smpsNoAttack, $01
00082156 E10F                       	smpsAlterNote       $0F
00082158 E701                       	dc.b	smpsNoAttack, $01
0008215A E10B                       	smpsAlterNote       $0B
0008215C E701                       	dc.b	smpsNoAttack, $01
0008215E E108                       	smpsAlterNote       $08
00082160 E701                       	dc.b	smpsNoAttack, $01
00082162 E105                       	smpsAlterNote       $05
00082164 8001                       	dc.b	nRst, $01
00082166 E109                       	smpsAlterNote       $09
00082168 C401                       	dc.b	nG5, $01
0008216A E10B                       	smpsAlterNote       $0B
0008216C E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00082175 E109                       	smpsAlterNote       $09
00082177 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008217B E10B                       	smpsAlterNote       $0B
0008217D C604 8001                  	dc.b	nA5, $04, nRst, $01
00082181 E107                       	smpsAlterNote       $07
00082183 BF0D                       	dc.b	nD5, $0D
00082185 E101                       	smpsAlterNote       $01
00082187 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008218B E104                       	smpsAlterNote       $04
0008218D E701                       	dc.b	smpsNoAttack, $01
0008218F E10A                       	smpsAlterNote       $0A
00082191 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082195 E104                       	smpsAlterNote       $04
00082197 E701                       	dc.b	smpsNoAttack, $01
00082199 E101                       	smpsAlterNote       $01
0008219B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008219F E107                       	smpsAlterNote       $07
000821A1 E701                       	dc.b	smpsNoAttack, $01
000821A3 E10B                       	smpsAlterNote       $0B
000821A5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000821A9 E108                       	smpsAlterNote       $08
000821AB C101                       	dc.b	nE5, $01
000821AD E109                       	smpsAlterNote       $09
000821AF E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000821B4 E10B                       	smpsAlterNote       $0B
000821B6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000821BE E108                       	smpsAlterNote       $08
000821C0 CD06                       	dc.b	nE6, $06
000821C2 E109                       	smpsAlterNote       $09
000821C4 CE07                       	dc.b	nF6, $07
000821C6 E108                       	smpsAlterNote       $08
000821C8 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000821CC E106                       	smpsAlterNote       $06
000821CE C903                       	dc.b	nC6, $03
000821D0 E109                       	smpsAlterNote       $09
000821D2 C403 8001                  	dc.b	nG5, $03, nRst, $01
000821D6 E10C                       	smpsAlterNote       $0C
000821D8 C70D                       	dc.b	nBb5, $0D
000821DA E106                       	smpsAlterNote       $06
000821DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000821E0 E109                       	smpsAlterNote       $09
000821E2 E701                       	dc.b	smpsNoAttack, $01
000821E4 E10F                       	smpsAlterNote       $0F
000821E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000821EA E109                       	smpsAlterNote       $09
000821EC E701                       	dc.b	smpsNoAttack, $01
000821EE E106                       	smpsAlterNote       $06
000821F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000821F4 E10C                       	smpsAlterNote       $0C
000821F6 E701                       	dc.b	smpsNoAttack, $01
000821F8 E110                       	smpsAlterNote       $10
000821FA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000821FE E10B                       	smpsAlterNote       $0B
00082200 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00082204 E105                       	smpsAlterNote       $05
00082206 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008220A E10B                       	smpsAlterNote       $0B
0008220C E701                       	dc.b	smpsNoAttack, $01
0008220E E10E                       	smpsAlterNote       $0E
00082210 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082214 E108                       	smpsAlterNote       $08
00082216 E701                       	dc.b	smpsNoAttack, $01
00082218 E104                       	smpsAlterNote       $04
0008221A E701                       	dc.b	smpsNoAttack, $01
0008221C E105                       	smpsAlterNote       $05
0008221E E701                       	dc.b	smpsNoAttack, $01
00082220 E10B                       	smpsAlterNote       $0B
00082222 E701                       	dc.b	smpsNoAttack, $01
00082224 E10F                       	smpsAlterNote       $0F
00082226 E701                       	dc.b	smpsNoAttack, $01
00082228 E10B                       	smpsAlterNote       $0B
0008222A E701                       	dc.b	smpsNoAttack, $01
0008222C E108                       	smpsAlterNote       $08
0008222E E701                       	dc.b	smpsNoAttack, $01
00082230 E104                       	smpsAlterNote       $04
00082232 E701                       	dc.b	smpsNoAttack, $01
00082234 E108                       	smpsAlterNote       $08
00082236 E701                       	dc.b	smpsNoAttack, $01
00082238 E10E                       	smpsAlterNote       $0E
0008223A E701                       	dc.b	smpsNoAttack, $01
0008223C E10F                       	smpsAlterNote       $0F
0008223E E701                       	dc.b	smpsNoAttack, $01
00082240 E10B                       	smpsAlterNote       $0B
00082242 E701                       	dc.b	smpsNoAttack, $01
00082244 E105                       	smpsAlterNote       $05
00082246 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008224A E108                       	smpsAlterNote       $08
0008224C E701                       	dc.b	smpsNoAttack, $01
0008224E E10E                       	smpsAlterNote       $0E
00082250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082254 E108                       	smpsAlterNote       $08
00082256 E701                       	dc.b	smpsNoAttack, $01
00082258 E105                       	smpsAlterNote       $05
0008225A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008225E E10B                       	smpsAlterNote       $0B
00082260 E701                       	dc.b	smpsNoAttack, $01
00082262 E10F                       	smpsAlterNote       $0F
00082264 E701                       	dc.b	smpsNoAttack, $01
00082266 E10E                       	smpsAlterNote       $0E
00082268 E701                       	dc.b	smpsNoAttack, $01
0008226A E108                       	smpsAlterNote       $08
0008226C E701                       	dc.b	smpsNoAttack, $01
0008226E E104                       	smpsAlterNote       $04
00082270 E701                       	dc.b	smpsNoAttack, $01
00082272 E108                       	smpsAlterNote       $08
00082274 E701                       	dc.b	smpsNoAttack, $01
00082276 E10E                       	smpsAlterNote       $0E
00082278 E701                       	dc.b	smpsNoAttack, $01
0008227A E10F                       	smpsAlterNote       $0F
0008227C E701                       	dc.b	smpsNoAttack, $01
0008227E E10B                       	smpsAlterNote       $0B
00082280 E701                       	dc.b	smpsNoAttack, $01
00082282 E105                       	smpsAlterNote       $05
00082284 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082288 E108                       	smpsAlterNote       $08
0008228A E701                       	dc.b	smpsNoAttack, $01
0008228C E10E                       	smpsAlterNote       $0E
0008228E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082292 E108                       	smpsAlterNote       $08
00082294 E701                       	dc.b	smpsNoAttack, $01
00082296 E105                       	smpsAlterNote       $05
00082298 E701                       	dc.b	smpsNoAttack, $01
0008229A E10B                       	smpsAlterNote       $0B
0008229C C60D                       	dc.b	nA5, $0D
0008229E E108                       	smpsAlterNote       $08
000822A0 E701                       	dc.b	smpsNoAttack, $01
000822A2 E104                       	smpsAlterNote       $04
000822A4 E701                       	dc.b	smpsNoAttack, $01
000822A6 E105                       	smpsAlterNote       $05
000822A8 E701                       	dc.b	smpsNoAttack, $01
000822AA E10B                       	smpsAlterNote       $0B
000822AC E701                       	dc.b	smpsNoAttack, $01
000822AE E10F                       	smpsAlterNote       $0F
000822B0 E701                       	dc.b	smpsNoAttack, $01
000822B2 E10B                       	smpsAlterNote       $0B
000822B4 E701                       	dc.b	smpsNoAttack, $01
000822B6 E108                       	smpsAlterNote       $08
000822B8 E701                       	dc.b	smpsNoAttack, $01
000822BA E104                       	smpsAlterNote       $04
000822BC E701                       	dc.b	smpsNoAttack, $01
000822BE E108                       	smpsAlterNote       $08
000822C0 E701                       	dc.b	smpsNoAttack, $01
000822C2 E10E                       	smpsAlterNote       $0E
000822C4 E701                       	dc.b	smpsNoAttack, $01
000822C6 E10F                       	smpsAlterNote       $0F
000822C8 E701                       	dc.b	smpsNoAttack, $01
000822CC E109                       	smpsAlterNote       $09
000822CE E6FF                       	smpsAlterVol        $FF
000822D0 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000822DA E108                       	smpsAlterNote       $08
000822DC C103 800E                  	dc.b	nE5, $03, nRst, $0E
000822E2 E107                       	smpsAlterNote       $07
000822E4 E601                       	smpsAlterVol        $01
000822E6 BF03                       	dc.b	nD5, $03
000822E8 E108                       	smpsAlterNote       $08
000822EA C103 8001                  	dc.b	nE5, $03, nRst, $01
000822EE E109                       	smpsAlterNote       $09
000822F0 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000822F6 E10B                       	smpsAlterNote       $0B
000822F8 C606 8001                  	dc.b	nA5, $06, nRst, $01
000822FC E107                       	smpsAlterNote       $07
000822FE BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082302 E106                       	smpsAlterNote       $06
00082304 C90D                       	dc.b	nC6, $0D
00082306 E103                       	smpsAlterNote       $03
00082308 E701                       	dc.b	smpsNoAttack, $01
0008230A E1FF                       	smpsAlterNote       $FF
0008230C E701                       	dc.b	smpsNoAttack, $01
0008230E E103                       	smpsAlterNote       $03
00082310 E701                       	dc.b	smpsNoAttack, $01
00082312 E109                       	smpsAlterNote       $09
00082314 E701                       	dc.b	smpsNoAttack, $01
00082316 E10A                       	smpsAlterNote       $0A
00082318 E701                       	dc.b	smpsNoAttack, $01
0008231A E106                       	smpsAlterNote       $06
0008231C E701                       	dc.b	smpsNoAttack, $01
0008231E E100                       	smpsAlterNote       $00
00082320 E701                       	dc.b	smpsNoAttack, $01
00082322 E10C                       	smpsAlterNote       $0C
00082324 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00082328 E10B                       	smpsAlterNote       $0B
0008232A C603                       	dc.b	nA5, $03
0008232C E109                       	smpsAlterNote       $09
0008232E C403 8001                  	dc.b	nG5, $03, nRst, $01
00082332 E10B                       	smpsAlterNote       $0B
00082334 C60D                       	dc.b	nA5, $0D
00082336 E105                       	smpsAlterNote       $05
00082338 E701                       	dc.b	smpsNoAttack, $01
0008233A E104                       	smpsAlterNote       $04
0008233C E701                       	dc.b	smpsNoAttack, $01
0008233E E108                       	smpsAlterNote       $08
00082340 E701                       	dc.b	smpsNoAttack, $01
00082342 E10E                       	smpsAlterNote       $0E
00082344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082348 E10B                       	smpsAlterNote       $0B
0008234A E701                       	dc.b	smpsNoAttack, $01
0008234C E105                       	smpsAlterNote       $05
0008234E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082352 E10B                       	smpsAlterNote       $0B
00082354 E701                       	dc.b	smpsNoAttack, $01
00082356 E10E                       	smpsAlterNote       $0E
00082358 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008235C E108                       	smpsAlterNote       $08
0008235E E701                       	dc.b	smpsNoAttack, $01
00082360 E104                       	smpsAlterNote       $04
00082362 E701                       	dc.b	smpsNoAttack, $01
00082364 E105                       	smpsAlterNote       $05
00082366 E701                       	dc.b	smpsNoAttack, $01
00082368 E10B                       	smpsAlterNote       $0B
0008236A E701                       	dc.b	smpsNoAttack, $01
0008236C E10F                       	smpsAlterNote       $0F
0008236E E701                       	dc.b	smpsNoAttack, $01
00082370 E10B                       	smpsAlterNote       $0B
00082372 E701                       	dc.b	smpsNoAttack, $01
00082374 E108                       	smpsAlterNote       $08
00082376 E701                       	dc.b	smpsNoAttack, $01
00082378 E104                       	smpsAlterNote       $04
0008237A E701                       	dc.b	smpsNoAttack, $01
0008237C E108                       	smpsAlterNote       $08
0008237E E701                       	dc.b	smpsNoAttack, $01
00082380 E10E                       	smpsAlterNote       $0E
00082382 E701                       	dc.b	smpsNoAttack, $01
00082384 E10F                       	smpsAlterNote       $0F
00082386 E701                       	dc.b	smpsNoAttack, $01
00082388 E10B                       	smpsAlterNote       $0B
0008238A E701                       	dc.b	smpsNoAttack, $01
0008238C E105                       	smpsAlterNote       $05
0008238E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082392 E108                       	smpsAlterNote       $08
00082394 E701                       	dc.b	smpsNoAttack, $01
00082396 E10E                       	smpsAlterNote       $0E
00082398 E701                       	dc.b	smpsNoAttack, $01
0008239A E10F                       	smpsAlterNote       $0F
0008239C 800F                       	dc.b	nRst, $0F
0008239E E107                       	smpsAlterNote       $07
000823A0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000823A4 E108                       	smpsAlterNote       $08
000823A6 C103                       	dc.b	nE5, $03
000823A8 E109                       	smpsAlterNote       $09
000823AA C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000823B0 E10B                       	smpsAlterNote       $0B
000823B2 C606 8001                  	dc.b	nA5, $06, nRst, $01
000823B6 E107                       	smpsAlterNote       $07
000823B8 BF03                       	dc.b	nD5, $03
000823BA E106                       	smpsAlterNote       $06
000823BC C90E                       	dc.b	nC6, $0E
000823BE E107                       	smpsAlterNote       $07
000823C0 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000823C4 E10C                       	smpsAlterNote       $0C
000823C6 C704                       	dc.b	nBb5, $04
000823C8 E10B                       	smpsAlterNote       $0B
000823CA C604 8001                  	dc.b	nA5, $04, nRst, $01
000823CE E109                       	smpsAlterNote       $09
000823D0 C404                       	dc.b	nG5, $04
000823D2 E10B                       	smpsAlterNote       $0B
000823D4 C60D                       	dc.b	nA5, $0D
000823D6 E108                       	smpsAlterNote       $08
000823D8 E701                       	dc.b	smpsNoAttack, $01
000823DA E105                       	smpsAlterNote       $05
000823DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000823E0 E10B                       	smpsAlterNote       $0B
000823E2 E701                       	dc.b	smpsNoAttack, $01
000823E4 E10F                       	smpsAlterNote       $0F
000823E6 E701                       	dc.b	smpsNoAttack, $01
000823E8 E10E                       	smpsAlterNote       $0E
000823EA E701                       	dc.b	smpsNoAttack, $01
000823EC E108                       	smpsAlterNote       $08
000823EE E701                       	dc.b	smpsNoAttack, $01
000823F0 E104                       	smpsAlterNote       $04
000823F2 E701                       	dc.b	smpsNoAttack, $01
000823F4 E108                       	smpsAlterNote       $08
000823F6 E701                       	dc.b	smpsNoAttack, $01
000823F8 E10B                       	smpsAlterNote       $0B
000823FA E701                       	dc.b	smpsNoAttack, $01
000823FC E10F                       	smpsAlterNote       $0F
000823FE E701                       	dc.b	smpsNoAttack, $01
00082400 E10B                       	smpsAlterNote       $0B
00082402 E701                       	dc.b	smpsNoAttack, $01
00082404 E105                       	smpsAlterNote       $05
00082406 E701                       	dc.b	smpsNoAttack, $01
00082408 E104                       	smpsAlterNote       $04
0008240A E701                       	dc.b	smpsNoAttack, $01
0008240C E108                       	smpsAlterNote       $08
0008240E E701                       	dc.b	smpsNoAttack, $01
00082410 E10E                       	smpsAlterNote       $0E
00082412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082416 E10B                       	smpsAlterNote       $0B
00082418 E701                       	dc.b	smpsNoAttack, $01
0008241A E105                       	smpsAlterNote       $05
0008241C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082420 E10B                       	smpsAlterNote       $0B
00082422 E701                       	dc.b	smpsNoAttack, $01
00082424 E10E                       	smpsAlterNote       $0E
00082426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008242A E108                       	smpsAlterNote       $08
0008242C E701                       	dc.b	smpsNoAttack, $01
0008242E E105                       	smpsAlterNote       $05
00082430 8001                       	dc.b	nRst, $01
00082432 E109                       	smpsAlterNote       $09
00082434 C402                       	dc.b	nG5, $02
00082436 E10B                       	smpsAlterNote       $0B
00082438 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00082441 E109                       	smpsAlterNote       $09
00082443 C404                       	dc.b	nG5, $04
00082445 E10B                       	smpsAlterNote       $0B
00082447 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008244B E107                       	smpsAlterNote       $07
0008244D BF0D                       	dc.b	nD5, $0D
0008244F E101                       	smpsAlterNote       $01
00082451 E701                       	dc.b	smpsNoAttack, $01
00082453 E100                       	smpsAlterNote       $00
00082455 E701                       	dc.b	smpsNoAttack, $01
00082457 E104                       	smpsAlterNote       $04
00082459 E701                       	dc.b	smpsNoAttack, $01
0008245B E10A                       	smpsAlterNote       $0A
0008245D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082461 E107                       	smpsAlterNote       $07
00082463 E701                       	dc.b	smpsNoAttack, $01
00082465 E101                       	smpsAlterNote       $01
00082467 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008246B E107                       	smpsAlterNote       $07
0008246D E701                       	dc.b	smpsNoAttack, $01
0008246F E10A                       	smpsAlterNote       $0A
00082471 E701                       	dc.b	smpsNoAttack, $01
00082473 E10B                       	smpsAlterNote       $0B
00082475 8001                       	dc.b	nRst, $01
00082477 E108                       	smpsAlterNote       $08
00082479 C101                       	dc.b	nE5, $01
0008247B E109                       	smpsAlterNote       $09
0008247D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00082482 E10B                       	smpsAlterNote       $0B
00082484 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008248C E108                       	smpsAlterNote       $08
0008248E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00082492 E109                       	smpsAlterNote       $09
00082494 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00082498 E108                       	smpsAlterNote       $08
0008249A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008249E E106                       	smpsAlterNote       $06
000824A0 C903                       	dc.b	nC6, $03
000824A2 E109                       	smpsAlterNote       $09
000824A4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000824A8 E10C                       	smpsAlterNote       $0C
000824AA C70D                       	dc.b	nBb5, $0D
000824AC E109                       	smpsAlterNote       $09
000824AE E701                       	dc.b	smpsNoAttack, $01
000824B0 E105                       	smpsAlterNote       $05
000824B2 E701                       	dc.b	smpsNoAttack, $01
000824B4 E109                       	smpsAlterNote       $09
000824B6 E701                       	dc.b	smpsNoAttack, $01
000824B8 E10F                       	smpsAlterNote       $0F
000824BA E701                       	dc.b	smpsNoAttack, $01
000824BC E110                       	smpsAlterNote       $10
000824BE E701                       	dc.b	smpsNoAttack, $01
000824C0 E10C                       	smpsAlterNote       $0C
000824C2 E701                       	dc.b	smpsNoAttack, $01
000824C4 E106                       	smpsAlterNote       $06
000824C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824CA E109                       	smpsAlterNote       $09
000824CC E701                       	dc.b	smpsNoAttack, $01
000824CE E10F                       	smpsAlterNote       $0F
000824D0 E701                       	dc.b	smpsNoAttack, $01
000824D2 E110                       	smpsAlterNote       $10
000824D4 8001                       	dc.b	nRst, $01
000824D6 E10B                       	smpsAlterNote       $0B
000824D8 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000824DE E105                       	smpsAlterNote       $05
000824E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824E4 E108                       	smpsAlterNote       $08
000824E6 E701                       	dc.b	smpsNoAttack, $01
000824E8 E10E                       	smpsAlterNote       $0E
000824EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824EE E108                       	smpsAlterNote       $08
000824F0 E701                       	dc.b	smpsNoAttack, $01
000824F2 E105                       	smpsAlterNote       $05
000824F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824F8 E10B                       	smpsAlterNote       $0B
000824FA E701                       	dc.b	smpsNoAttack, $01
000824FC E10F                       	smpsAlterNote       $0F
000824FE E701                       	dc.b	smpsNoAttack, $01
00082500 E10E                       	smpsAlterNote       $0E
00082502 E701                       	dc.b	smpsNoAttack, $01
00082504 E108                       	smpsAlterNote       $08
00082506 E701                       	dc.b	smpsNoAttack, $01
00082508 E104                       	smpsAlterNote       $04
0008250A E701                       	dc.b	smpsNoAttack, $01
0008250C E108                       	smpsAlterNote       $08
0008250E E701                       	dc.b	smpsNoAttack, $01
00082510 E10B                       	smpsAlterNote       $0B
00082512 E701                       	dc.b	smpsNoAttack, $01
00082514 E10F                       	smpsAlterNote       $0F
00082516 E701                       	dc.b	smpsNoAttack, $01
00082518 E10B                       	smpsAlterNote       $0B
0008251A E701                       	dc.b	smpsNoAttack, $01
0008251C E105                       	smpsAlterNote       $05
0008251E E701                       	dc.b	smpsNoAttack, $01
00082520 E104                       	smpsAlterNote       $04
00082522 E701                       	dc.b	smpsNoAttack, $01
00082524 E108                       	smpsAlterNote       $08
00082526 E701                       	dc.b	smpsNoAttack, $01
00082528 E10E                       	smpsAlterNote       $0E
0008252A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008252E E10B                       	smpsAlterNote       $0B
00082530 E701                       	dc.b	smpsNoAttack, $01
00082532 E105                       	smpsAlterNote       $05
00082534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082538 E10B                       	smpsAlterNote       $0B
0008253A E701                       	dc.b	smpsNoAttack, $01
0008253C E10E                       	smpsAlterNote       $0E
0008253E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082542 E108                       	smpsAlterNote       $08
00082544 E701                       	dc.b	smpsNoAttack, $01
00082546 E104                       	smpsAlterNote       $04
00082548 E701                       	dc.b	smpsNoAttack, $01
0008254A E105                       	smpsAlterNote       $05
0008254C E701                       	dc.b	smpsNoAttack, $01
0008254E E10B                       	smpsAlterNote       $0B
00082550 E701                       	dc.b	smpsNoAttack, $01
00082552 E10F                       	smpsAlterNote       $0F
00082554 E701                       	dc.b	smpsNoAttack, $01
00082556 E10B                       	smpsAlterNote       $0B
00082558 E701                       	dc.b	smpsNoAttack, $01
0008255A E108                       	smpsAlterNote       $08
0008255C E701                       	dc.b	smpsNoAttack, $01
0008255E E104                       	smpsAlterNote       $04
00082560 E701                       	dc.b	smpsNoAttack, $01
00082562 E108                       	smpsAlterNote       $08
00082564 E701                       	dc.b	smpsNoAttack, $01
00082566 E10E                       	smpsAlterNote       $0E
00082568 E701                       	dc.b	smpsNoAttack, $01
0008256A E10F                       	smpsAlterNote       $0F
0008256C E701                       	dc.b	smpsNoAttack, $01
0008256E E10B                       	smpsAlterNote       $0B
00082570 E701                       	dc.b	smpsNoAttack, $01
00082572 E105                       	smpsAlterNote       $05
00082574 E701                       	dc.b	smpsNoAttack, $01
00082576 E10B                       	smpsAlterNote       $0B
00082578 C60E                       	dc.b	nA5, $0E
0008257A E105                       	smpsAlterNote       $05
0008257C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082580 E10B                       	smpsAlterNote       $0B
00082582 E701                       	dc.b	smpsNoAttack, $01
00082584 E10E                       	smpsAlterNote       $0E
00082586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008258A E108                       	smpsAlterNote       $08
0008258C E701                       	dc.b	smpsNoAttack, $01
0008258E E104                       	smpsAlterNote       $04
00082590 E701                       	dc.b	smpsNoAttack, $01
00082592 E105                       	smpsAlterNote       $05
00082594 E701                       	dc.b	smpsNoAttack, $01
00082596 E10B                       	smpsAlterNote       $0B
00082598 E701                       	dc.b	smpsNoAttack, $01
0008259A E10F                       	smpsAlterNote       $0F
0008259C E701                       	dc.b	smpsNoAttack, $01
0008259E E10B                       	smpsAlterNote       $0B
000825A0 E701                       	dc.b	smpsNoAttack, $01
000825A2 E108                       	smpsAlterNote       $08
000825A4 E701                       	dc.b	smpsNoAttack, $01
000825A6 E104                       	smpsAlterNote       $04
000825A8 E701                       	dc.b	smpsNoAttack, $01
000825AA E108                       	smpsAlterNote       $08
000825AC E701                       	dc.b	smpsNoAttack, $01
000825AE E10E                       	smpsAlterNote       $0E
000825B0 E701                       	dc.b	smpsNoAttack, $01
000825B2 E10F                       	smpsAlterNote       $0F
000825B4 E701                       	dc.b	smpsNoAttack, $01
000825B6 E10B                       	smpsAlterNote       $0B
000825B8 E701                       	dc.b	smpsNoAttack, $01
000825BA E105                       	smpsAlterNote       $05
000825BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825C0 E108                       	smpsAlterNote       $08
000825C2 E701                       	dc.b	smpsNoAttack, $01
000825C4 E10E                       	smpsAlterNote       $0E
000825C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825CA E108                       	smpsAlterNote       $08
000825CC E701                       	dc.b	smpsNoAttack, $01
000825CE E105                       	smpsAlterNote       $05
000825D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825D4 E10B                       	smpsAlterNote       $0B
000825D6 E701                       	dc.b	smpsNoAttack, $01
000825D8 E10F                       	smpsAlterNote       $0F
000825DA E701                       	dc.b	smpsNoAttack, $01
000825DC E10E                       	smpsAlterNote       $0E
000825DE E701                       	dc.b	smpsNoAttack, $01
000825E0 E108                       	smpsAlterNote       $08
000825E2 E701                       	dc.b	smpsNoAttack, $01
000825E4 E104                       	smpsAlterNote       $04
000825E6 E701                       	dc.b	smpsNoAttack, $01
000825E8 E108                       	smpsAlterNote       $08
000825EA E701                       	dc.b	smpsNoAttack, $01
000825EC E10E                       	smpsAlterNote       $0E
000825EE E701                       	dc.b	smpsNoAttack, $01
000825F0 E10F                       	smpsAlterNote       $0F
000825F2 E701                       	dc.b	smpsNoAttack, $01
000825F4 E10B                       	smpsAlterNote       $0B
000825F6 E701                       	dc.b	smpsNoAttack, $01
000825F8 E105                       	smpsAlterNote       $05
000825FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825FE E108                       	smpsAlterNote       $08
00082600 E701                       	dc.b	smpsNoAttack, $01
00082602 E10E                       	smpsAlterNote       $0E
00082604 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082608 E108                       	smpsAlterNote       $08
0008260A E701                       	dc.b	smpsNoAttack, $01
0008260C E105                       	smpsAlterNote       $05
0008260E E701                       	dc.b	smpsNoAttack, $01
00082612 E10B                       	smpsAlterNote       $0B
00082614 E6FD                       	smpsAlterVol        $FD
00082616 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008261A E109                       	smpsAlterNote       $09
0008261C C404                       	dc.b	nG5, $04
0008261E E10B                       	smpsAlterNote       $0B
00082620 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082624 E107                       	smpsAlterNote       $07
00082626 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008262C E10B                       	smpsAlterNote       $0B
0008262E C604                       	dc.b	nA5, $04
00082630 E109                       	smpsAlterNote       $09
00082632 C404 8001                  	dc.b	nG5, $04, nRst, $01
00082636 E10B                       	smpsAlterNote       $0B
00082638 C604                       	dc.b	nA5, $04
0008263A E108                       	smpsAlterNote       $08
0008263C C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00082644 E106                       	smpsAlterNote       $06
00082646 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008264A E10C                       	smpsAlterNote       $0C
0008264C C704                       	dc.b	nBb5, $04
0008264E E10B                       	smpsAlterNote       $0B
00082650 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082654 E109                       	smpsAlterNote       $09
00082656 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00082660 E10B                       	smpsAlterNote       $0B
00082662 C60D                       	dc.b	nA5, $0D
00082664 E108                       	smpsAlterNote       $08
00082666 E701                       	dc.b	smpsNoAttack, $01
00082668 E104                       	smpsAlterNote       $04
0008266A E701                       	dc.b	smpsNoAttack, $01
0008266C E108                       	smpsAlterNote       $08
0008266E E701                       	dc.b	smpsNoAttack, $01
00082670 E10E                       	smpsAlterNote       $0E
00082672 E701                       	dc.b	smpsNoAttack, $01
00082674 E10F                       	smpsAlterNote       $0F
00082676 E701                       	dc.b	smpsNoAttack, $01
00082678 E10B                       	smpsAlterNote       $0B
0008267A E701                       	dc.b	smpsNoAttack, $01
0008267C E105                       	smpsAlterNote       $05
0008267E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082682 E108                       	smpsAlterNote       $08
00082684 E701                       	dc.b	smpsNoAttack, $01
00082686 E10E                       	smpsAlterNote       $0E
00082688 E701                       	dc.b	smpsNoAttack, $01
0008268A E10F                       	smpsAlterNote       $0F
0008268C 8001                       	dc.b	nRst, $01
0008268E E109                       	smpsAlterNote       $09
00082690 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00082696 E108                       	smpsAlterNote       $08
00082698 C10D                       	dc.b	nE5, $0D
0008269A E102                       	smpsAlterNote       $02
0008269C E701                       	dc.b	smpsNoAttack, $01
0008269E E101                       	smpsAlterNote       $01
000826A0 E701                       	dc.b	smpsNoAttack, $01
000826A2 E105                       	smpsAlterNote       $05
000826A4 E701                       	dc.b	smpsNoAttack, $01
000826A6 E10B                       	smpsAlterNote       $0B
000826A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826AC E108                       	smpsAlterNote       $08
000826AE E701                       	dc.b	smpsNoAttack, $01
000826B0 E102                       	smpsAlterNote       $02
000826B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826B6 E108                       	smpsAlterNote       $08
000826B8 E701                       	dc.b	smpsNoAttack, $01
000826BA E10B                       	smpsAlterNote       $0B
000826BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826C0 E105                       	smpsAlterNote       $05
000826C2 E701                       	dc.b	smpsNoAttack, $01
000826C4 E101                       	smpsAlterNote       $01
000826C6 E701                       	dc.b	smpsNoAttack, $01
000826C8 E102                       	smpsAlterNote       $02
000826CA E701                       	dc.b	smpsNoAttack, $01
000826CC E108                       	smpsAlterNote       $08
000826CE E701                       	dc.b	smpsNoAttack, $01
000826D0 E10C                       	smpsAlterNote       $0C
000826D2 E701                       	dc.b	smpsNoAttack, $01
000826D4 E108                       	smpsAlterNote       $08
000826D6 E701                       	dc.b	smpsNoAttack, $01
000826D8 E105                       	smpsAlterNote       $05
000826DA E701                       	dc.b	smpsNoAttack, $01
000826DC E101                       	smpsAlterNote       $01
000826DE E701                       	dc.b	smpsNoAttack, $01
000826E0 E105                       	smpsAlterNote       $05
000826E2 E701                       	dc.b	smpsNoAttack, $01
000826E4 E10B                       	smpsAlterNote       $0B
000826E6 E701                       	dc.b	smpsNoAttack, $01
000826E8 E10C                       	smpsAlterNote       $0C
000826EA E701                       	dc.b	smpsNoAttack, $01
000826EC E108                       	smpsAlterNote       $08
000826EE E701                       	dc.b	smpsNoAttack, $01
000826F0 E102                       	smpsAlterNote       $02
000826F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826F6 E105                       	smpsAlterNote       $05
000826F8 E701                       	dc.b	smpsNoAttack, $01
000826FA E10B                       	smpsAlterNote       $0B
000826FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082700 E105                       	smpsAlterNote       $05
00082702 E701                       	dc.b	smpsNoAttack, $01
00082704 E102                       	smpsAlterNote       $02
00082706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008270A E108                       	smpsAlterNote       $08
0008270C E701                       	dc.b	smpsNoAttack, $01
0008270E E10C                       	smpsAlterNote       $0C
00082710 E701                       	dc.b	smpsNoAttack, $01
00082712 E10B                       	smpsAlterNote       $0B
00082714 E701                       	dc.b	smpsNoAttack, $01
00082716 E105                       	smpsAlterNote       $05
00082718 E701                       	dc.b	smpsNoAttack, $01
0008271A E101                       	smpsAlterNote       $01
0008271C E701                       	dc.b	smpsNoAttack, $01
0008271E E105                       	smpsAlterNote       $05
00082720 E701                       	dc.b	smpsNoAttack, $01
00082722 E108                       	smpsAlterNote       $08
00082724 E701                       	dc.b	smpsNoAttack, $01
00082726 E10C                       	smpsAlterNote       $0C
00082728 E701                       	dc.b	smpsNoAttack, $01
0008272A E108                       	smpsAlterNote       $08
0008272C E701                       	dc.b	smpsNoAttack, $01
0008272E E102                       	smpsAlterNote       $02
00082730 E701                       	dc.b	smpsNoAttack, $01
00082732 E101                       	smpsAlterNote       $01
00082734 E701                       	dc.b	smpsNoAttack, $01
00082736 E105                       	smpsAlterNote       $05
00082738 E701                       	dc.b	smpsNoAttack, $01
0008273A E10B                       	smpsAlterNote       $0B
0008273C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082740 E108                       	smpsAlterNote       $08
00082742 E701                       	dc.b	smpsNoAttack, $01
00082744 E102                       	smpsAlterNote       $02
00082746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008274A E108                       	smpsAlterNote       $08
0008274C E701                       	dc.b	smpsNoAttack, $01
0008274E E10B                       	smpsAlterNote       $0B
00082750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082754 E105                       	smpsAlterNote       $05
00082756 E701                       	dc.b	smpsNoAttack, $01
00082758 E101                       	smpsAlterNote       $01
0008275A E701                       	dc.b	smpsNoAttack, $01
0008275C E102                       	smpsAlterNote       $02
0008275E E701                       	dc.b	smpsNoAttack, $01
00082760 E108                       	smpsAlterNote       $08
00082762 E701                       	dc.b	smpsNoAttack, $01
00082764 E10C                       	smpsAlterNote       $0C
00082766 E701                       	dc.b	smpsNoAttack, $01
00082768 E108                       	smpsAlterNote       $08
0008276A E701                       	dc.b	smpsNoAttack, $01
0008276C E105                       	smpsAlterNote       $05
0008276E E701                       	dc.b	smpsNoAttack, $01
00082770 E101                       	smpsAlterNote       $01
00082772 E701                       	dc.b	smpsNoAttack, $01
00082774 E105                       	smpsAlterNote       $05
00082776 E701                       	dc.b	smpsNoAttack, $01
00082778 E10B                       	smpsAlterNote       $0B
0008277A E701                       	dc.b	smpsNoAttack, $01
0008277C E10C                       	smpsAlterNote       $0C
0008277E E701                       	dc.b	smpsNoAttack, $01
00082780 E108                       	smpsAlterNote       $08
00082782 E701                       	dc.b	smpsNoAttack, $01
00082784 E102                       	smpsAlterNote       $02
00082786 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008278A E105                       	smpsAlterNote       $05
0008278C E701                       	dc.b	smpsNoAttack, $01
0008278E E10B                       	smpsAlterNote       $0B
00082790 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082794 E105                       	smpsAlterNote       $05
00082796 E701                       	dc.b	smpsNoAttack, $01
00082798 E101                       	smpsAlterNote       $01
0008279A E701                       	dc.b	smpsNoAttack, $01
0008279C E102                       	smpsAlterNote       $02
0008279E E701                       	dc.b	smpsNoAttack, $01
000827A0 E108                       	smpsAlterNote       $08
000827A2 E701                       	dc.b	smpsNoAttack, $01
000827A4 E10C                       	smpsAlterNote       $0C
000827A6 E701                       	dc.b	smpsNoAttack, $01
000827A8 E108                       	smpsAlterNote       $08
000827AA E701                       	dc.b	smpsNoAttack, $01
000827AC E105                       	smpsAlterNote       $05
000827AE E701                       	dc.b	smpsNoAttack, $01
000827B0 E101                       	smpsAlterNote       $01
000827B2 E701                       	dc.b	smpsNoAttack, $01
000827B4 E105                       	smpsAlterNote       $05
000827B6 E701                       	dc.b	smpsNoAttack, $01
000827B8 E10B                       	smpsAlterNote       $0B
000827BA E701                       	dc.b	smpsNoAttack, $01
000827BC E10C                       	smpsAlterNote       $0C
000827BE E701                       	dc.b	smpsNoAttack, $01
000827C0 E108                       	smpsAlterNote       $08
000827C2 E701                       	dc.b	smpsNoAttack, $01
000827C4 E102                       	smpsAlterNote       $02
000827C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827CA E105                       	smpsAlterNote       $05
000827CC E701                       	dc.b	smpsNoAttack, $01
000827CE E10B                       	smpsAlterNote       $0B
000827D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827D4 E105                       	smpsAlterNote       $05
000827D6 E701                       	dc.b	smpsNoAttack, $01
000827D8 E102                       	smpsAlterNote       $02
000827DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827DE E108                       	smpsAlterNote       $08
000827E0 E701                       	dc.b	smpsNoAttack, $01
000827E2 E10C                       	smpsAlterNote       $0C
000827E4 E701                       	dc.b	smpsNoAttack, $01
000827E6 E10B                       	smpsAlterNote       $0B
000827E8 E701                       	dc.b	smpsNoAttack, $01
000827EA E105                       	smpsAlterNote       $05
000827EC E701                       	dc.b	smpsNoAttack, $01
000827EE E101                       	smpsAlterNote       $01
000827F0 E701                       	dc.b	smpsNoAttack, $01
000827F2 E105                       	smpsAlterNote       $05
000827F4 E701                       	dc.b	smpsNoAttack, $01
000827F6 E108                       	smpsAlterNote       $08
000827F8 E701                       	dc.b	smpsNoAttack, $01
000827FA E10C                       	smpsAlterNote       $0C
000827FC E701                       	dc.b	smpsNoAttack, $01
00082800 E10B                       	smpsAlterNote       $0B
00082802 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082806 E109                       	smpsAlterNote       $09
00082808 C404                       	dc.b	nG5, $04
0008280A E10B                       	smpsAlterNote       $0B
0008280C C604 8001                  	dc.b	nA5, $04, nRst, $01
00082810 E107                       	smpsAlterNote       $07
00082812 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00082818 E10B                       	smpsAlterNote       $0B
0008281A C604                       	dc.b	nA5, $04
0008281C E109                       	smpsAlterNote       $09
0008281E C404 8001                  	dc.b	nG5, $04, nRst, $01
00082822 E10B                       	smpsAlterNote       $0B
00082824 C604                       	dc.b	nA5, $04
00082826 E108                       	smpsAlterNote       $08
00082828 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008282E E106                       	smpsAlterNote       $06
00082830 C904 8001                  	dc.b	nC6, $04, nRst, $01
00082834 E10C                       	smpsAlterNote       $0C
00082836 C704                       	dc.b	nBb5, $04
00082838 E10B                       	smpsAlterNote       $0B
0008283A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008283E E109                       	smpsAlterNote       $09
00082840 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008284A E10B                       	smpsAlterNote       $0B
0008284C C60D                       	dc.b	nA5, $0D
0008284E E108                       	smpsAlterNote       $08
00082850 E701                       	dc.b	smpsNoAttack, $01
00082852 E104                       	smpsAlterNote       $04
00082854 E701                       	dc.b	smpsNoAttack, $01
00082856 E108                       	smpsAlterNote       $08
00082858 E701                       	dc.b	smpsNoAttack, $01
0008285A E10B                       	smpsAlterNote       $0B
0008285C E701                       	dc.b	smpsNoAttack, $01
0008285E E10F                       	smpsAlterNote       $0F
00082860 E701                       	dc.b	smpsNoAttack, $01
00082862 E10B                       	smpsAlterNote       $0B
00082864 E701                       	dc.b	smpsNoAttack, $01
00082866 E105                       	smpsAlterNote       $05
00082868 E701                       	dc.b	smpsNoAttack, $01
0008286A E104                       	smpsAlterNote       $04
0008286C E701                       	dc.b	smpsNoAttack, $01
0008286E E108                       	smpsAlterNote       $08
00082870 E701                       	dc.b	smpsNoAttack, $01
00082872 E10E                       	smpsAlterNote       $0E
00082874 E701                       	dc.b	smpsNoAttack, $01
00082876 E10F                       	smpsAlterNote       $0F
00082878 8001                       	dc.b	nRst, $01
0008287A E109                       	smpsAlterNote       $09
0008287C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00082882 E108                       	smpsAlterNote       $08
00082884 C10D                       	dc.b	nE5, $0D
00082886 E105                       	smpsAlterNote       $05
00082888 E701                       	dc.b	smpsNoAttack, $01
0008288A E101                       	smpsAlterNote       $01
0008288C E701                       	dc.b	smpsNoAttack, $01
0008288E E105                       	smpsAlterNote       $05
00082890 E701                       	dc.b	smpsNoAttack, $01
00082892 E10B                       	smpsAlterNote       $0B
00082894 E701                       	dc.b	smpsNoAttack, $01
00082896 E10C                       	smpsAlterNote       $0C
00082898 E701                       	dc.b	smpsNoAttack, $01
0008289A E108                       	smpsAlterNote       $08
0008289C E701                       	dc.b	smpsNoAttack, $01
0008289E E102                       	smpsAlterNote       $02
000828A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828A4 E105                       	smpsAlterNote       $05
000828A6 E701                       	dc.b	smpsNoAttack, $01
000828A8 E10B                       	smpsAlterNote       $0B
000828AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828AE E105                       	smpsAlterNote       $05
000828B0 E701                       	dc.b	smpsNoAttack, $01
000828B2 E102                       	smpsAlterNote       $02
000828B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828B8 E108                       	smpsAlterNote       $08
000828BA E701                       	dc.b	smpsNoAttack, $01
000828BC E10C                       	smpsAlterNote       $0C
000828BE E701                       	dc.b	smpsNoAttack, $01
000828C0 E10B                       	smpsAlterNote       $0B
000828C2 E701                       	dc.b	smpsNoAttack, $01
000828C4 E105                       	smpsAlterNote       $05
000828C6 E701                       	dc.b	smpsNoAttack, $01
000828C8 E101                       	smpsAlterNote       $01
000828CA E701                       	dc.b	smpsNoAttack, $01
000828CC E105                       	smpsAlterNote       $05
000828CE E701                       	dc.b	smpsNoAttack, $01
000828D0 E108                       	smpsAlterNote       $08
000828D2 E701                       	dc.b	smpsNoAttack, $01
000828D4 E10C                       	smpsAlterNote       $0C
000828D6 E701                       	dc.b	smpsNoAttack, $01
000828D8 E108                       	smpsAlterNote       $08
000828DA E701                       	dc.b	smpsNoAttack, $01
000828DC E102                       	smpsAlterNote       $02
000828DE E701                       	dc.b	smpsNoAttack, $01
000828E0 E101                       	smpsAlterNote       $01
000828E2 E701                       	dc.b	smpsNoAttack, $01
000828E4 E105                       	smpsAlterNote       $05
000828E6 E701                       	dc.b	smpsNoAttack, $01
000828E8 E10B                       	smpsAlterNote       $0B
000828EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828EE E108                       	smpsAlterNote       $08
000828F0 E701                       	dc.b	smpsNoAttack, $01
000828F2 E102                       	smpsAlterNote       $02
000828F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828F8 E108                       	smpsAlterNote       $08
000828FA E701                       	dc.b	smpsNoAttack, $01
000828FC E10B                       	smpsAlterNote       $0B
000828FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082902 E105                       	smpsAlterNote       $05
00082904 E701                       	dc.b	smpsNoAttack, $01
00082906 E101                       	smpsAlterNote       $01
00082908 E701                       	dc.b	smpsNoAttack, $01
0008290A E102                       	smpsAlterNote       $02
0008290C E701                       	dc.b	smpsNoAttack, $01
0008290E E108                       	smpsAlterNote       $08
00082910 E701                       	dc.b	smpsNoAttack, $01
00082912 E10C                       	smpsAlterNote       $0C
00082914 E701                       	dc.b	smpsNoAttack, $01
00082916 E108                       	smpsAlterNote       $08
00082918 E701                       	dc.b	smpsNoAttack, $01
0008291A E105                       	smpsAlterNote       $05
0008291C E701                       	dc.b	smpsNoAttack, $01
0008291E E101                       	smpsAlterNote       $01
00082920 E701                       	dc.b	smpsNoAttack, $01
00082922 E105                       	smpsAlterNote       $05
00082924 E701                       	dc.b	smpsNoAttack, $01
00082926 E10B                       	smpsAlterNote       $0B
00082928 E701                       	dc.b	smpsNoAttack, $01
0008292A E10C                       	smpsAlterNote       $0C
0008292C E701                       	dc.b	smpsNoAttack, $01
0008292E E108                       	smpsAlterNote       $08
00082930 E701                       	dc.b	smpsNoAttack, $01
00082932 E102                       	smpsAlterNote       $02
00082934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082938 E108                       	smpsAlterNote       $08
0008293A E701                       	dc.b	smpsNoAttack, $01
0008293C E10B                       	smpsAlterNote       $0B
0008293E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082942 E105                       	smpsAlterNote       $05
00082944 E701                       	dc.b	smpsNoAttack, $01
00082946 E101                       	smpsAlterNote       $01
00082948 E701                       	dc.b	smpsNoAttack, $01
0008294A E102                       	smpsAlterNote       $02
0008294C E701                       	dc.b	smpsNoAttack, $01
0008294E E108                       	smpsAlterNote       $08
00082950 E701                       	dc.b	smpsNoAttack, $01
00082952 E10C                       	smpsAlterNote       $0C
00082954 E701                       	dc.b	smpsNoAttack, $01
00082956 E108                       	smpsAlterNote       $08
00082958 E701                       	dc.b	smpsNoAttack, $01
0008295A E105                       	smpsAlterNote       $05
0008295C E701                       	dc.b	smpsNoAttack, $01
0008295E E101                       	smpsAlterNote       $01
00082960 E701                       	dc.b	smpsNoAttack, $01
00082962 E105                       	smpsAlterNote       $05
00082964 E701                       	dc.b	smpsNoAttack, $01
00082966 E10B                       	smpsAlterNote       $0B
00082968 E701                       	dc.b	smpsNoAttack, $01
0008296A E10C                       	smpsAlterNote       $0C
0008296C E701                       	dc.b	smpsNoAttack, $01
0008296E E108                       	smpsAlterNote       $08
00082970 E701                       	dc.b	smpsNoAttack, $01
00082972 E102                       	smpsAlterNote       $02
00082974 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082978 E105                       	smpsAlterNote       $05
0008297A E701                       	dc.b	smpsNoAttack, $01
0008297C E10B                       	smpsAlterNote       $0B
0008297E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082982 E105                       	smpsAlterNote       $05
00082984 E701                       	dc.b	smpsNoAttack, $01
00082986 E102                       	smpsAlterNote       $02
00082988 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008298C E108                       	smpsAlterNote       $08
0008298E E701                       	dc.b	smpsNoAttack, $01
00082990 E10C                       	smpsAlterNote       $0C
00082992 E701                       	dc.b	smpsNoAttack, $01
00082994 E10B                       	smpsAlterNote       $0B
00082996 E701                       	dc.b	smpsNoAttack, $01
00082998 E105                       	smpsAlterNote       $05
0008299A E701                       	dc.b	smpsNoAttack, $01
0008299C E101                       	smpsAlterNote       $01
0008299E E701                       	dc.b	smpsNoAttack, $01
000829A0 E105                       	smpsAlterNote       $05
000829A2 E701                       	dc.b	smpsNoAttack, $01
000829A4 E108                       	smpsAlterNote       $08
000829A6 E701                       	dc.b	smpsNoAttack, $01
000829A8 E10C                       	smpsAlterNote       $0C
000829AA E701                       	dc.b	smpsNoAttack, $01
000829AC E108                       	smpsAlterNote       $08
000829AE E701                       	dc.b	smpsNoAttack, $01
000829B0 E102                       	smpsAlterNote       $02
000829B2 E701                       	dc.b	smpsNoAttack, $01
000829B4 E101                       	smpsAlterNote       $01
000829B6 E701                       	dc.b	smpsNoAttack, $01
000829B8 E105                       	smpsAlterNote       $05
000829BA E701                       	dc.b	smpsNoAttack, $01
000829BC E10B                       	smpsAlterNote       $0B
000829BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829C2 E108                       	smpsAlterNote       $08
000829C4 E701                       	dc.b	smpsNoAttack, $01
000829C6 E102                       	smpsAlterNote       $02
000829C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829CC E108                       	smpsAlterNote       $08
000829CE E701                       	dc.b	smpsNoAttack, $01
000829D0 E10B                       	smpsAlterNote       $0B
000829D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829D6 E105                       	smpsAlterNote       $05
000829D8 E701                       	dc.b	smpsNoAttack, $01
000829DA E102                       	smpsAlterNote       $02
000829DC 8001                       	dc.b	nRst, $01
000829DE E107                       	smpsAlterNote       $07
000829E0 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000829E4 E108                       	smpsAlterNote       $08
000829E6 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000829EA E102                       	smpsAlterNote       $02
000829EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829F0 E108                       	smpsAlterNote       $08
000829F2 E701                       	dc.b	smpsNoAttack, $01
000829F4 E10B                       	smpsAlterNote       $0B
000829F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829FA E105                       	smpsAlterNote       $05
000829FC E701                       	dc.b	smpsNoAttack, $01
000829FE E101                       	smpsAlterNote       $01
00082A00 E701                       	dc.b	smpsNoAttack, $01
00082A02 E102                       	smpsAlterNote       $02
00082A04 E701                       	dc.b	smpsNoAttack, $01
00082A06 E108                       	smpsAlterNote       $08
00082A08 E701                       	dc.b	smpsNoAttack, $01
00082A0A E10C                       	smpsAlterNote       $0C
00082A0C E701                       	dc.b	smpsNoAttack, $01
00082A0E E108                       	smpsAlterNote       $08
00082A10 E701                       	dc.b	smpsNoAttack, $01
00082A12 E105                       	smpsAlterNote       $05
00082A14 E701                       	dc.b	smpsNoAttack, $01
00082A16 E101                       	smpsAlterNote       $01
00082A18 E701                       	dc.b	smpsNoAttack, $01
00082A1A E105                       	smpsAlterNote       $05
00082A1C E701                       	dc.b	smpsNoAttack, $01
00082A1E E10B                       	smpsAlterNote       $0B
00082A20 E701                       	dc.b	smpsNoAttack, $01
00082A22 E10C                       	smpsAlterNote       $0C
00082A24 E701                       	dc.b	smpsNoAttack, $01
00082A26 E108                       	smpsAlterNote       $08
00082A28 E701                       	dc.b	smpsNoAttack, $01
00082A2A E102                       	smpsAlterNote       $02
00082A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A30 E105                       	smpsAlterNote       $05
00082A32 E701                       	dc.b	smpsNoAttack, $01
00082A34 E10B                       	smpsAlterNote       $0B
00082A36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A3A E105                       	smpsAlterNote       $05
00082A3C E701                       	dc.b	smpsNoAttack, $01
00082A3E E102                       	smpsAlterNote       $02
00082A40 E701                       	dc.b	smpsNoAttack, $01
00082A42 E109                       	smpsAlterNote       $09
00082A44 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00082A48 E108                       	smpsAlterNote       $08
00082A4A C10D                       	dc.b	nE5, $0D
00082A4C E105                       	smpsAlterNote       $05
00082A4E E701                       	dc.b	smpsNoAttack, $01
00082A50 E101                       	smpsAlterNote       $01
00082A52 E701                       	dc.b	smpsNoAttack, $01
00082A54 E102                       	smpsAlterNote       $02
00082A56 E701                       	dc.b	smpsNoAttack, $01
00082A58 E108                       	smpsAlterNote       $08
00082A5A E701                       	dc.b	smpsNoAttack, $01
00082A5C E10C                       	smpsAlterNote       $0C
00082A5E E701                       	dc.b	smpsNoAttack, $01
00082A60 E108                       	smpsAlterNote       $08
00082A62 E701                       	dc.b	smpsNoAttack, $01
00082A64 E105                       	smpsAlterNote       $05
00082A66 E701                       	dc.b	smpsNoAttack, $01
00082A68 E101                       	smpsAlterNote       $01
00082A6A E701                       	dc.b	smpsNoAttack, $01
00082A6C E105                       	smpsAlterNote       $05
00082A6E E701                       	dc.b	smpsNoAttack, $01
00082A70 E10B                       	smpsAlterNote       $0B
00082A72 E701                       	dc.b	smpsNoAttack, $01
00082A74 E10C                       	smpsAlterNote       $0C
00082A76 E701                       	dc.b	smpsNoAttack, $01
00082A78 E108                       	smpsAlterNote       $08
00082A7A E701                       	dc.b	smpsNoAttack, $01
00082A7C E102                       	smpsAlterNote       $02
00082A7E E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00082A86 E10B                       	smpsAlterNote       $0B
00082A88 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00082A8C E10C                       	smpsAlterNote       $0C
00082A8E BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00082A92 E10B                       	smpsAlterNote       $0B
00082A94 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00082A9A E107                       	smpsAlterNote       $07
00082A9C BF03                       	dc.b	nD5, $03
00082A9E E108                       	smpsAlterNote       $08
00082AA0 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082AA4 E109                       	smpsAlterNote       $09
00082AA6 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00082AAC E10B                       	smpsAlterNote       $0B
00082AAE C606 8001                  	dc.b	nA5, $06, nRst, $01
00082AB2 E107                       	smpsAlterNote       $07
00082AB4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082AB8 E106                       	smpsAlterNote       $06
00082ABA C90D                       	dc.b	nC6, $0D
00082ABC E103                       	smpsAlterNote       $03
00082ABE E701                       	dc.b	smpsNoAttack, $01
00082AC0 E1FF                       	smpsAlterNote       $FF
00082AC2 E701                       	dc.b	smpsNoAttack, $01
00082AC4 E103                       	smpsAlterNote       $03
00082AC6 E701                       	dc.b	smpsNoAttack, $01
00082AC8 E109                       	smpsAlterNote       $09
00082ACA E701                       	dc.b	smpsNoAttack, $01
00082ACC E10A                       	smpsAlterNote       $0A
00082ACE E701                       	dc.b	smpsNoAttack, $01
00082AD0 E106                       	smpsAlterNote       $06
00082AD2 E701                       	dc.b	smpsNoAttack, $01
00082AD4 E100                       	smpsAlterNote       $00
00082AD6 E701                       	dc.b	smpsNoAttack, $01
00082AD8 E10C                       	smpsAlterNote       $0C
00082ADA C703 8001                  	dc.b	nBb5, $03, nRst, $01
00082ADE E10B                       	smpsAlterNote       $0B
00082AE0 C603                       	dc.b	nA5, $03
00082AE2 E109                       	smpsAlterNote       $09
00082AE4 C403 8001                  	dc.b	nG5, $03, nRst, $01
00082AE8 E10B                       	smpsAlterNote       $0B
00082AEA C60D                       	dc.b	nA5, $0D
00082AEC E105                       	smpsAlterNote       $05
00082AEE E701                       	dc.b	smpsNoAttack, $01
00082AF0 E104                       	smpsAlterNote       $04
00082AF2 E701                       	dc.b	smpsNoAttack, $01
00082AF4 E108                       	smpsAlterNote       $08
00082AF6 E701                       	dc.b	smpsNoAttack, $01
00082AF8 E10E                       	smpsAlterNote       $0E
00082AFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082AFE E10B                       	smpsAlterNote       $0B
00082B00 E701                       	dc.b	smpsNoAttack, $01
00082B02 E105                       	smpsAlterNote       $05
00082B04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B08 E10B                       	smpsAlterNote       $0B
00082B0A E701                       	dc.b	smpsNoAttack, $01
00082B0C E10E                       	smpsAlterNote       $0E
00082B0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B12 E108                       	smpsAlterNote       $08
00082B14 E701                       	dc.b	smpsNoAttack, $01
00082B16 E104                       	smpsAlterNote       $04
00082B18 E701                       	dc.b	smpsNoAttack, $01
00082B1A E105                       	smpsAlterNote       $05
00082B1C E701                       	dc.b	smpsNoAttack, $01
00082B1E E10B                       	smpsAlterNote       $0B
00082B20 E701                       	dc.b	smpsNoAttack, $01
00082B22 E10F                       	smpsAlterNote       $0F
00082B24 E701                       	dc.b	smpsNoAttack, $01
00082B26 E10B                       	smpsAlterNote       $0B
00082B28 E701                       	dc.b	smpsNoAttack, $01
00082B2A E108                       	smpsAlterNote       $08
00082B2C E701                       	dc.b	smpsNoAttack, $01
00082B2E E104                       	smpsAlterNote       $04
00082B30 E701                       	dc.b	smpsNoAttack, $01
00082B32 E108                       	smpsAlterNote       $08
00082B34 E701                       	dc.b	smpsNoAttack, $01
00082B36 E10E                       	smpsAlterNote       $0E
00082B38 E701                       	dc.b	smpsNoAttack, $01
00082B3A E10F                       	smpsAlterNote       $0F
00082B3C E701                       	dc.b	smpsNoAttack, $01
00082B3E E10B                       	smpsAlterNote       $0B
00082B40 E701                       	dc.b	smpsNoAttack, $01
00082B42 E105                       	smpsAlterNote       $05
00082B44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B48 E108                       	smpsAlterNote       $08
00082B4A E701                       	dc.b	smpsNoAttack, $01
00082B4C E10E                       	smpsAlterNote       $0E
00082B4E E701                       	dc.b	smpsNoAttack, $01
00082B50 E10F                       	smpsAlterNote       $0F
00082B52 800F                       	dc.b	nRst, $0F
00082B54 E107                       	smpsAlterNote       $07
00082B56 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082B5A E108                       	smpsAlterNote       $08
00082B5C C103                       	dc.b	nE5, $03
00082B5E E109                       	smpsAlterNote       $09
00082B60 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00082B66 E10B                       	smpsAlterNote       $0B
00082B68 C607                       	dc.b	nA5, $07
00082B6A E107                       	smpsAlterNote       $07
00082B6C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082B70 E106                       	smpsAlterNote       $06
00082B72 C90D                       	dc.b	nC6, $0D
00082B74 E107                       	smpsAlterNote       $07
00082B76 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00082B7A E10C                       	smpsAlterNote       $0C
00082B7C C704                       	dc.b	nBb5, $04
00082B7E E10B                       	smpsAlterNote       $0B
00082B80 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082B84 E109                       	smpsAlterNote       $09
00082B86 C404                       	dc.b	nG5, $04
00082B88 E10B                       	smpsAlterNote       $0B
00082B8A C60D                       	dc.b	nA5, $0D
00082B8C E108                       	smpsAlterNote       $08
00082B8E E701                       	dc.b	smpsNoAttack, $01
00082B90 E105                       	smpsAlterNote       $05
00082B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B96 E10B                       	smpsAlterNote       $0B
00082B98 E701                       	dc.b	smpsNoAttack, $01
00082B9A E10F                       	smpsAlterNote       $0F
00082B9C E701                       	dc.b	smpsNoAttack, $01
00082B9E E10E                       	smpsAlterNote       $0E
00082BA0 E701                       	dc.b	smpsNoAttack, $01
00082BA2 E108                       	smpsAlterNote       $08
00082BA4 E701                       	dc.b	smpsNoAttack, $01
00082BA6 E104                       	smpsAlterNote       $04
00082BA8 E701                       	dc.b	smpsNoAttack, $01
00082BAA E108                       	smpsAlterNote       $08
00082BAC E701                       	dc.b	smpsNoAttack, $01
00082BAE E10B                       	smpsAlterNote       $0B
00082BB0 E701                       	dc.b	smpsNoAttack, $01
00082BB2 E10F                       	smpsAlterNote       $0F
00082BB4 E701                       	dc.b	smpsNoAttack, $01
00082BB6 E10B                       	smpsAlterNote       $0B
00082BB8 E701                       	dc.b	smpsNoAttack, $01
00082BBA E105                       	smpsAlterNote       $05
00082BBC E701                       	dc.b	smpsNoAttack, $01
00082BBE E104                       	smpsAlterNote       $04
00082BC0 E701                       	dc.b	smpsNoAttack, $01
00082BC2 E108                       	smpsAlterNote       $08
00082BC4 E701                       	dc.b	smpsNoAttack, $01
00082BC6 E10E                       	smpsAlterNote       $0E
00082BC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BCC E10B                       	smpsAlterNote       $0B
00082BCE E701                       	dc.b	smpsNoAttack, $01
00082BD0 E105                       	smpsAlterNote       $05
00082BD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BD6 E10B                       	smpsAlterNote       $0B
00082BD8 E701                       	dc.b	smpsNoAttack, $01
00082BDA E10E                       	smpsAlterNote       $0E
00082BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BE0 E108                       	smpsAlterNote       $08
00082BE2 E701                       	dc.b	smpsNoAttack, $01
00082BE4 E105                       	smpsAlterNote       $05
00082BE6 8001                       	dc.b	nRst, $01
00082BE8 E109                       	smpsAlterNote       $09
00082BEA C401 8001                  	dc.b	nG5, $01, nRst, $01
00082BEE E10B                       	smpsAlterNote       $0B
00082BF0 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00082BF8 E109                       	smpsAlterNote       $09
00082BFA C404                       	dc.b	nG5, $04
00082BFC E10B                       	smpsAlterNote       $0B
00082BFE C604 8001                  	dc.b	nA5, $04, nRst, $01
00082C02 E107                       	smpsAlterNote       $07
00082C04 BF0D                       	dc.b	nD5, $0D
00082C06 E101                       	smpsAlterNote       $01
00082C08 E701                       	dc.b	smpsNoAttack, $01
00082C0A E100                       	smpsAlterNote       $00
00082C0C E701                       	dc.b	smpsNoAttack, $01
00082C0E E104                       	smpsAlterNote       $04
00082C10 E701                       	dc.b	smpsNoAttack, $01
00082C12 E10A                       	smpsAlterNote       $0A
00082C14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C18 E107                       	smpsAlterNote       $07
00082C1A E701                       	dc.b	smpsNoAttack, $01
00082C1C E101                       	smpsAlterNote       $01
00082C1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C22 E107                       	smpsAlterNote       $07
00082C24 E701                       	dc.b	smpsNoAttack, $01
00082C26 E10A                       	smpsAlterNote       $0A
00082C28 E701                       	dc.b	smpsNoAttack, $01
00082C2A E10B                       	smpsAlterNote       $0B
00082C2C 8001                       	dc.b	nRst, $01
00082C2E E108                       	smpsAlterNote       $08
00082C30 8001                       	dc.b	nRst, $01
00082C32 E109                       	smpsAlterNote       $09
00082C34 8001 C401                  	dc.b	nRst, $01, nG5, $01
00082C38 E10B                       	smpsAlterNote       $0B
00082C3A C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00082C42 E108                       	smpsAlterNote       $08
00082C44 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00082C48 E109                       	smpsAlterNote       $09
00082C4A CE06 8001                  	dc.b	nF6, $06, nRst, $01
00082C4E E108                       	smpsAlterNote       $08
00082C50 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00082C54 E106                       	smpsAlterNote       $06
00082C56 C903                       	dc.b	nC6, $03
00082C58 E109                       	smpsAlterNote       $09
00082C5A C403 8001                  	dc.b	nG5, $03, nRst, $01
00082C5E E10C                       	smpsAlterNote       $0C
00082C60 C70D                       	dc.b	nBb5, $0D
00082C62 E109                       	smpsAlterNote       $09
00082C64 E701                       	dc.b	smpsNoAttack, $01
00082C66 E105                       	smpsAlterNote       $05
00082C68 E701                       	dc.b	smpsNoAttack, $01
00082C6A E109                       	smpsAlterNote       $09
00082C6C E701                       	dc.b	smpsNoAttack, $01
00082C6E E10F                       	smpsAlterNote       $0F
00082C70 E701                       	dc.b	smpsNoAttack, $01
00082C72 E110                       	smpsAlterNote       $10
00082C74 E701                       	dc.b	smpsNoAttack, $01
00082C76 E10C                       	smpsAlterNote       $0C
00082C78 E701                       	dc.b	smpsNoAttack, $01
00082C7A E106                       	smpsAlterNote       $06
00082C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C80 E109                       	smpsAlterNote       $09
00082C82 E701                       	dc.b	smpsNoAttack, $01
00082C84 E10F                       	smpsAlterNote       $0F
00082C86 E701                       	dc.b	smpsNoAttack, $01
00082C88 E110                       	smpsAlterNote       $10
00082C8A 8001                       	dc.b	nRst, $01
00082C8C E10B                       	smpsAlterNote       $0B
00082C8E C606 8001                  	dc.b	nA5, $06, nRst, $01
00082C92 E109                       	smpsAlterNote       $09
00082C94 C40D                       	dc.b	nG5, $0D
00082C96 E103                       	smpsAlterNote       $03
00082C98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C9C E106                       	smpsAlterNote       $06
00082C9E E701                       	dc.b	smpsNoAttack, $01
00082CA0 E10C                       	smpsAlterNote       $0C
00082CA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082CA6 E106                       	smpsAlterNote       $06
00082CA8 E701                       	dc.b	smpsNoAttack, $01
00082CAA E103                       	smpsAlterNote       $03
00082CAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082CB0 E109                       	smpsAlterNote       $09
00082CB2 E701                       	dc.b	smpsNoAttack, $01
00082CB4 E10D                       	smpsAlterNote       $0D
00082CB6 E701                       	dc.b	smpsNoAttack, $01
00082CB8 E10C                       	smpsAlterNote       $0C
00082CBA E701                       	dc.b	smpsNoAttack, $01
00082CBC E106                       	smpsAlterNote       $06
00082CBE E701                       	dc.b	smpsNoAttack, $01
00082CC0 E102                       	smpsAlterNote       $02
00082CC2 E701                       	dc.b	smpsNoAttack, $01
00082CC4 E103                       	smpsAlterNote       $03
00082CC6 8001                       	dc.b	nRst, $01
00082CC8 E10B                       	smpsAlterNote       $0B
00082CCA C60D                       	dc.b	nA5, $0D
00082CCC E108                       	smpsAlterNote       $08
00082CCE E701                       	dc.b	smpsNoAttack, $01
00082CD0 E104                       	smpsAlterNote       $04
00082CD2 E701                       	dc.b	smpsNoAttack, $01
00082CD4 E108                       	smpsAlterNote       $08
00082CD6 E701                       	dc.b	smpsNoAttack, $01
00082CD8 E10B                       	smpsAlterNote       $0B
00082CDA E701                       	dc.b	smpsNoAttack, $01
00082CDC E10F                       	smpsAlterNote       $0F
00082CDE E701                       	dc.b	smpsNoAttack, $01
00082CE0 E10B                       	smpsAlterNote       $0B
00082CE2 E701                       	dc.b	smpsNoAttack, $01
00082CE4 E105                       	smpsAlterNote       $05
00082CE6 E701                       	dc.b	smpsNoAttack, $01
00082CE8 E104                       	smpsAlterNote       $04
00082CEA E701                       	dc.b	smpsNoAttack, $01
00082CEC E108                       	smpsAlterNote       $08
00082CEE E701                       	dc.b	smpsNoAttack, $01
00082CF0 E10E                       	smpsAlterNote       $0E
00082CF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082CF6 E10B                       	smpsAlterNote       $0B
00082CF8 E701                       	dc.b	smpsNoAttack, $01
00082CFA E105                       	smpsAlterNote       $05
00082CFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D00 E10C                       	smpsAlterNote       $0C
00082D02 C70E                       	dc.b	nBb5, $0E
00082D04 E106                       	smpsAlterNote       $06
00082D06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D0A E10C                       	smpsAlterNote       $0C
00082D0C E701                       	dc.b	smpsNoAttack, $01
00082D0E E10F                       	smpsAlterNote       $0F
00082D10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D14 E109                       	smpsAlterNote       $09
00082D16 E701                       	dc.b	smpsNoAttack, $01
00082D18 E105                       	smpsAlterNote       $05
00082D1A E701                       	dc.b	smpsNoAttack, $01
00082D1C E106                       	smpsAlterNote       $06
00082D1E E701                       	dc.b	smpsNoAttack, $01
00082D20 E10C                       	smpsAlterNote       $0C
00082D22 E701                       	dc.b	smpsNoAttack, $01
00082D24 E110                       	smpsAlterNote       $10
00082D26 E701                       	dc.b	smpsNoAttack, $01
00082D28 E10C                       	smpsAlterNote       $0C
00082D2A E701                       	dc.b	smpsNoAttack, $01
00082D2C E109                       	smpsAlterNote       $09
00082D2E E701                       	dc.b	smpsNoAttack, $01
00082D30 E105                       	smpsAlterNote       $05
00082D32 E701                       	dc.b	smpsNoAttack, $01
00082D34 E106                       	smpsAlterNote       $06
00082D36 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00082D3A E107                       	smpsAlterNote       $07
00082D3C CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00082D41 E108                       	smpsAlterNote       $08
00082D43 CD0D                       	dc.b	nE6, $0D
00082D45 E107                       	smpsAlterNote       $07
00082D47 CB0D                       	dc.b	nD6, $0D
00082D49 E104                       	smpsAlterNote       $04
00082D4B E701                       	dc.b	smpsNoAttack, $01
00082D4D E100                       	smpsAlterNote       $00
00082D4F E701                       	dc.b	smpsNoAttack, $01
00082D51 E101                       	smpsAlterNote       $01
00082D53 E701                       	dc.b	smpsNoAttack, $01
00082D55 E107                       	smpsAlterNote       $07
00082D57 E701                       	dc.b	smpsNoAttack, $01
00082D59 E10B                       	smpsAlterNote       $0B
00082D5B E701                       	dc.b	smpsNoAttack, $01
00082D5D E107                       	smpsAlterNote       $07
00082D5F E701                       	dc.b	smpsNoAttack, $01
00082D61 E104                       	smpsAlterNote       $04
00082D63 E701                       	dc.b	smpsNoAttack, $01
00082D65 E100                       	smpsAlterNote       $00
00082D67 E701                       	dc.b	smpsNoAttack, $01
00082D69 E104                       	smpsAlterNote       $04
00082D6B E701                       	dc.b	smpsNoAttack, $01
00082D6D E10A                       	smpsAlterNote       $0A
00082D6F E701                       	dc.b	smpsNoAttack, $01
00082D71 E10B                       	smpsAlterNote       $0B
00082D73 E701                       	dc.b	smpsNoAttack, $01
00082D75 E108                       	smpsAlterNote       $08
00082D77 CC0D                       	dc.b	nEb6, $0D
00082D79 E105                       	smpsAlterNote       $05
00082D7B E701                       	dc.b	smpsNoAttack, $01
00082D7D E101                       	smpsAlterNote       $01
00082D7F E701                       	dc.b	smpsNoAttack, $01
00082D81 E102                       	smpsAlterNote       $02
00082D83 E701                       	dc.b	smpsNoAttack, $01
00082D85 E108                       	smpsAlterNote       $08
00082D87 E701                       	dc.b	smpsNoAttack, $01
00082D89 E106                       	smpsAlterNote       $06
00082D8B C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00082D97 8001                       	dc.b	nRst, $01
00082D99 E107                       	smpsAlterNote       $07
00082D9B CB0D                       	dc.b	nD6, $0D
00082D9D E104                       	smpsAlterNote       $04
00082D9F E701                       	dc.b	smpsNoAttack, $01
00082DA1 E100                       	smpsAlterNote       $00
00082DA3 E701                       	dc.b	smpsNoAttack, $01
00082DA5 E104                       	smpsAlterNote       $04
00082DA7 E701                       	dc.b	smpsNoAttack, $01
00082DA9 E107                       	smpsAlterNote       $07
00082DAB E701                       	dc.b	smpsNoAttack, $01
00082DAD E10B                       	smpsAlterNote       $0B
00082DAF E701                       	dc.b	smpsNoAttack, $01
00082DB1 E107                       	smpsAlterNote       $07
00082DB3 E701                       	dc.b	smpsNoAttack, $01
00082DB5 E101                       	smpsAlterNote       $01
00082DB7 E701                       	dc.b	smpsNoAttack, $01
00082DB9 E100                       	smpsAlterNote       $00
00082DBB E701                       	dc.b	smpsNoAttack, $01
00082DBD E104                       	smpsAlterNote       $04
00082DBF E701                       	dc.b	smpsNoAttack, $01
00082DC1 E10A                       	smpsAlterNote       $0A
00082DC3 E701                       	dc.b	smpsNoAttack, $01
00082DC5 E10B                       	smpsAlterNote       $0B
00082DC7 8001                       	dc.b	nRst, $01
00082DC9 E109                       	smpsAlterNote       $09
00082DCB CE0A                       	dc.b	nF6, $0A
00082DCD E108                       	smpsAlterNote       $08
00082DCF CC07                       	dc.b	nEb6, $07
00082DD1 E106                       	smpsAlterNote       $06
00082DD3 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00082DDF E107                       	smpsAlterNote       $07
00082DE1 CB0D                       	dc.b	nD6, $0D
00082DE3 E101                       	smpsAlterNote       $01
00082DE5 E701                       	dc.b	smpsNoAttack, $01
00082DE7 E100                       	smpsAlterNote       $00
00082DE9 E701                       	dc.b	smpsNoAttack, $01
00082DEB E104                       	smpsAlterNote       $04
00082DED E701                       	dc.b	smpsNoAttack, $01
00082DEF E10A                       	smpsAlterNote       $0A
00082DF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DF5 E107                       	smpsAlterNote       $07
00082DF7 E701                       	dc.b	smpsNoAttack, $01
00082DF9 E101                       	smpsAlterNote       $01
00082DFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DFF E107                       	smpsAlterNote       $07
00082E01 E701                       	dc.b	smpsNoAttack, $01
00082E03 E10A                       	smpsAlterNote       $0A
00082E05 E701                       	dc.b	smpsNoAttack, $01
00082E07 E10B                       	smpsAlterNote       $0B
00082E09 8001                       	dc.b	nRst, $01
00082E0B E108                       	smpsAlterNote       $08
00082E0D CC0D                       	dc.b	nEb6, $0D
00082E0F E102                       	smpsAlterNote       $02
00082E11 E701                       	dc.b	smpsNoAttack, $01
00082E13 E101                       	smpsAlterNote       $01
00082E15 E701                       	dc.b	smpsNoAttack, $01
00082E17 E105                       	smpsAlterNote       $05
00082E19 E701                       	dc.b	smpsNoAttack, $01
00082E1B E108                       	smpsAlterNote       $08
00082E1D 8001                       	dc.b	nRst, $01
00082E1F E106                       	smpsAlterNote       $06
00082E21 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00082E2D 8001                       	dc.b	nRst, $01
00082E2F E107                       	smpsAlterNote       $07
00082E31 CB0D                       	dc.b	nD6, $0D
00082E33 E101                       	smpsAlterNote       $01
00082E35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E39 E104                       	smpsAlterNote       $04
00082E3B E701                       	dc.b	smpsNoAttack, $01
00082E3D E10A                       	smpsAlterNote       $0A
00082E3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E43 E104                       	smpsAlterNote       $04
00082E45 E701                       	dc.b	smpsNoAttack, $01
00082E47 E101                       	smpsAlterNote       $01
00082E49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E4D E107                       	smpsAlterNote       $07
00082E4F E701                       	dc.b	smpsNoAttack, $01
00082E51 E10B                       	smpsAlterNote       $0B
00082E53 E701                       	dc.b	smpsNoAttack, $01
00082E55 E10A                       	smpsAlterNote       $0A
00082E57 E701                       	dc.b	smpsNoAttack, $01
00082E59 E104                       	smpsAlterNote       $04
00082E5B E701                       	dc.b	smpsNoAttack, $01
00082E5D E100                       	smpsAlterNote       $00
00082E5F E701                       	dc.b	smpsNoAttack, $01
00082E61 E101                       	smpsAlterNote       $01
00082E63 801C                       	dc.b	nRst, $1C
00082E67 E107                       	smpsAlterNote       $07
00082E69 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082E6D E603                       	smpsAlterVol        $03
00082E6F F6F1 AD                    	smpsJump            music84_Jump03
00082E72                            
00082E72                            ; FM3 Data
00082E72                            music84_FM3:
00082E72 E0C0                       	smpsPan             panCenter, $00
00082E76 E109                       	smpsAlterNote       $09
00082E78 C203 8007                  	dc.b	nF5, $03, nRst, $07
00082E7C E108                       	smpsAlterNote       $08
00082E7E C103 800B                  	dc.b	nE5, $03, nRst, $0B
00082E82 E10B                       	smpsAlterNote       $0B
00082E84 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00082E8A E040                       	smpsPan             panRight, $00
00082E8C E110                       	smpsAlterNote       $10
00082E8E E6F9                       	smpsAlterVol        $F9
00082E90 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00082E94 E10F                       	smpsAlterNote       $0F
00082E96 C603                       	dc.b	nA5, $03
00082E98 E10D                       	smpsAlterNote       $0D
00082E9A C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00082EA0 E10C                       	smpsAlterNote       $0C
00082EA2 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082EA6 E10A                       	smpsAlterNote       $0A
00082EA8 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00082EAC E10F                       	smpsAlterNote       $0F
00082EAE BA01 8001                  	dc.b	nA4, $01, nRst, $01
00082EB2 E0C0                       	smpsPan             panCenter, $00
00082EB6 E109                       	smpsAlterNote       $09
00082EB8 E609                       	smpsAlterVol        $09
00082EBA B603                       	dc.b	nF4, $03
00082EBC                            
00082EBC                            music84_Jump02:
00082EBC E70A                       	dc.b	smpsNoAttack, $0A
00082EBE E103                       	smpsAlterNote       $03
00082EC0 E701                       	dc.b	smpsNoAttack, $01
00082EC2 E102                       	smpsAlterNote       $02
00082EC4 E701                       	dc.b	smpsNoAttack, $01
00082EC6 E106                       	smpsAlterNote       $06
00082EC8 E701                       	dc.b	smpsNoAttack, $01
00082ECA E10C                       	smpsAlterNote       $0C
00082ECC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082ED0 E109                       	smpsAlterNote       $09
00082ED2 E701                       	dc.b	smpsNoAttack, $01
00082ED4 E103                       	smpsAlterNote       $03
00082ED6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082EDA E109                       	smpsAlterNote       $09
00082EDC E701                       	dc.b	smpsNoAttack, $01
00082EDE E10C                       	smpsAlterNote       $0C
00082EE0 E701                       	dc.b	smpsNoAttack, $01
00082EE2 E10D                       	smpsAlterNote       $0D
00082EE4 8001                       	dc.b	nRst, $01
00082EE6 E109                       	smpsAlterNote       $09
00082EE8 B80D                       	dc.b	nG4, $0D
00082EEA E103                       	smpsAlterNote       $03
00082EEC E701                       	dc.b	smpsNoAttack, $01
00082EEE E102                       	smpsAlterNote       $02
00082EF0 E701                       	dc.b	smpsNoAttack, $01
00082EF2 E106                       	smpsAlterNote       $06
00082EF4 E701                       	dc.b	smpsNoAttack, $01
00082EF6 E10C                       	smpsAlterNote       $0C
00082EF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082EFC E109                       	smpsAlterNote       $09
00082EFE E701                       	dc.b	smpsNoAttack, $01
00082F00 E103                       	smpsAlterNote       $03
00082F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F06 E109                       	smpsAlterNote       $09
00082F08 E701                       	dc.b	smpsNoAttack, $01
00082F0A E10C                       	smpsAlterNote       $0C
00082F0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F10 E106                       	smpsAlterNote       $06
00082F12 E701                       	dc.b	smpsNoAttack, $01
00082F14 E102                       	smpsAlterNote       $02
00082F16 E701                       	dc.b	smpsNoAttack, $01
00082F18 E103                       	smpsAlterNote       $03
00082F1A E701                       	dc.b	smpsNoAttack, $01
00082F1C E109                       	smpsAlterNote       $09
00082F1E E701                       	dc.b	smpsNoAttack, $01
00082F20 E10D                       	smpsAlterNote       $0D
00082F22 E701                       	dc.b	smpsNoAttack, $01
00082F24 E109                       	smpsAlterNote       $09
00082F26 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00082F2A E10B                       	smpsAlterNote       $0B
00082F2C BA0D                       	dc.b	nA4, $0D
00082F2E E105                       	smpsAlterNote       $05
00082F30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F34 E108                       	smpsAlterNote       $08
00082F36 E701                       	dc.b	smpsNoAttack, $01
00082F38 E10E                       	smpsAlterNote       $0E
00082F3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F3E E108                       	smpsAlterNote       $08
00082F40 E701                       	dc.b	smpsNoAttack, $01
00082F42 E104                       	smpsAlterNote       $04
00082F44 E701                       	dc.b	smpsNoAttack, $01
00082F46 E105                       	smpsAlterNote       $05
00082F48 E701                       	dc.b	smpsNoAttack, $01
00082F4A E10B                       	smpsAlterNote       $0B
00082F4C E701                       	dc.b	smpsNoAttack, $01
00082F4E E10F                       	smpsAlterNote       $0F
00082F50 E701                       	dc.b	smpsNoAttack, $01
00082F52 E10B                       	smpsAlterNote       $0B
00082F54 E701                       	dc.b	smpsNoAttack, $01
00082F56 E108                       	smpsAlterNote       $08
00082F58 E701                       	dc.b	smpsNoAttack, $01
00082F5A E104                       	smpsAlterNote       $04
00082F5C E701                       	dc.b	smpsNoAttack, $01
00082F5E E108                       	smpsAlterNote       $08
00082F60 E701                       	dc.b	smpsNoAttack, $01
00082F62 E10E                       	smpsAlterNote       $0E
00082F64 E701                       	dc.b	smpsNoAttack, $01
00082F66 E10F                       	smpsAlterNote       $0F
00082F68 E701                       	dc.b	smpsNoAttack, $01
00082F6A E10B                       	smpsAlterNote       $0B
00082F6C E701                       	dc.b	smpsNoAttack, $01
00082F6E E105                       	smpsAlterNote       $05
00082F70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F74 E108                       	smpsAlterNote       $08
00082F76 E701                       	dc.b	smpsNoAttack, $01
00082F78 E10E                       	smpsAlterNote       $0E
00082F7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F7E E108                       	smpsAlterNote       $08
00082F80 E701                       	dc.b	smpsNoAttack, $01
00082F82 E105                       	smpsAlterNote       $05
00082F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F88 E10B                       	smpsAlterNote       $0B
00082F8A E701                       	dc.b	smpsNoAttack, $01
00082F8C E10F                       	smpsAlterNote       $0F
00082F8E E701                       	dc.b	smpsNoAttack, $01
00082F90 E10E                       	smpsAlterNote       $0E
00082F92 E701                       	dc.b	smpsNoAttack, $01
00082F94 E108                       	smpsAlterNote       $08
00082F96 E701                       	dc.b	smpsNoAttack, $01
00082F98 E104                       	smpsAlterNote       $04
00082F9A E701                       	dc.b	smpsNoAttack, $01
00082F9C E105                       	smpsAlterNote       $05
00082F9E 8001                       	dc.b	nRst, $01
00082FA0 E108                       	smpsAlterNote       $08
00082FA2 B50A                       	dc.b	nE4, $0A
00082FA4 E109                       	smpsAlterNote       $09
00082FA6 B60D                       	dc.b	nF4, $0D
00082FA8 E106                       	smpsAlterNote       $06
00082FAA E701                       	dc.b	smpsNoAttack, $01
00082FAC E103                       	smpsAlterNote       $03
00082FAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082FB2 E109                       	smpsAlterNote       $09
00082FB4 E701                       	dc.b	smpsNoAttack, $01
00082FB6 E10D                       	smpsAlterNote       $0D
00082FB8 E701                       	dc.b	smpsNoAttack, $01
00082FBA E10C                       	smpsAlterNote       $0C
00082FBC E701                       	dc.b	smpsNoAttack, $01
00082FBE E106                       	smpsAlterNote       $06
00082FC0 E701                       	dc.b	smpsNoAttack, $01
00082FC2 E102                       	smpsAlterNote       $02
00082FC4 E701                       	dc.b	smpsNoAttack, $01
00082FC6 E106                       	smpsAlterNote       $06
00082FC8 E701                       	dc.b	smpsNoAttack, $01
00082FCA E109                       	smpsAlterNote       $09
00082FCC E701                       	dc.b	smpsNoAttack, $01
00082FCE E10D                       	smpsAlterNote       $0D
00082FD0 E701                       	dc.b	smpsNoAttack, $01
00082FD2 E109                       	smpsAlterNote       $09
00082FD4 B80D                       	dc.b	nG4, $0D
00082FD6 E106                       	smpsAlterNote       $06
00082FD8 E701                       	dc.b	smpsNoAttack, $01
00082FDA E103                       	smpsAlterNote       $03
00082FDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082FE0 E109                       	smpsAlterNote       $09
00082FE2 E701                       	dc.b	smpsNoAttack, $01
00082FE4 E10D                       	smpsAlterNote       $0D
00082FE6 E701                       	dc.b	smpsNoAttack, $01
00082FE8 E10C                       	smpsAlterNote       $0C
00082FEA E701                       	dc.b	smpsNoAttack, $01
00082FEC E106                       	smpsAlterNote       $06
00082FEE E701                       	dc.b	smpsNoAttack, $01
00082FF0 E102                       	smpsAlterNote       $02
00082FF2 E701                       	dc.b	smpsNoAttack, $01
00082FF4 E106                       	smpsAlterNote       $06
00082FF6 E701                       	dc.b	smpsNoAttack, $01
00082FF8 E109                       	smpsAlterNote       $09
00082FFA E701                       	dc.b	smpsNoAttack, $01
00082FFC E10D                       	smpsAlterNote       $0D
00082FFE E701                       	dc.b	smpsNoAttack, $01
00083000 E109                       	smpsAlterNote       $09
00083002 E701                       	dc.b	smpsNoAttack, $01
00083004 E103                       	smpsAlterNote       $03
00083006 E701                       	dc.b	smpsNoAttack, $01
00083008 E102                       	smpsAlterNote       $02
0008300A E701                       	dc.b	smpsNoAttack, $01
0008300C E106                       	smpsAlterNote       $06
0008300E E701                       	dc.b	smpsNoAttack, $01
00083010 E10C                       	smpsAlterNote       $0C
00083012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083016 E109                       	smpsAlterNote       $09
00083018 E701                       	dc.b	smpsNoAttack, $01
0008301A E10B                       	smpsAlterNote       $0B
0008301C BA0D                       	dc.b	nA4, $0D
0008301E E108                       	smpsAlterNote       $08
00083020 E701                       	dc.b	smpsNoAttack, $01
00083022 E104                       	smpsAlterNote       $04
00083024 E701                       	dc.b	smpsNoAttack, $01
00083026 E108                       	smpsAlterNote       $08
00083028 E701                       	dc.b	smpsNoAttack, $01
0008302A E10B                       	smpsAlterNote       $0B
0008302C E701                       	dc.b	smpsNoAttack, $01
0008302E E10F                       	smpsAlterNote       $0F
00083030 E701                       	dc.b	smpsNoAttack, $01
00083032 E10B                       	smpsAlterNote       $0B
00083034 E701                       	dc.b	smpsNoAttack, $01
00083036 E105                       	smpsAlterNote       $05
00083038 E701                       	dc.b	smpsNoAttack, $01
0008303A E104                       	smpsAlterNote       $04
0008303C E701                       	dc.b	smpsNoAttack, $01
0008303E E108                       	smpsAlterNote       $08
00083040 E701                       	dc.b	smpsNoAttack, $01
00083042 E10E                       	smpsAlterNote       $0E
00083044 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083048 E10B                       	smpsAlterNote       $0B
0008304A E701                       	dc.b	smpsNoAttack, $01
0008304C E105                       	smpsAlterNote       $05
0008304E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083052 E10B                       	smpsAlterNote       $0B
00083054 E701                       	dc.b	smpsNoAttack, $01
00083056 E10E                       	smpsAlterNote       $0E
00083058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008305C E108                       	smpsAlterNote       $08
0008305E E701                       	dc.b	smpsNoAttack, $01
00083060 E104                       	smpsAlterNote       $04
00083062 E701                       	dc.b	smpsNoAttack, $01
00083064 E105                       	smpsAlterNote       $05
00083066 E701                       	dc.b	smpsNoAttack, $01
00083068 E10B                       	smpsAlterNote       $0B
0008306A E701                       	dc.b	smpsNoAttack, $01
0008306C E10F                       	smpsAlterNote       $0F
0008306E E701                       	dc.b	smpsNoAttack, $01
00083070 E10B                       	smpsAlterNote       $0B
00083072 E701                       	dc.b	smpsNoAttack, $01
00083074 E108                       	smpsAlterNote       $08
00083076 E701                       	dc.b	smpsNoAttack, $01
00083078 E105                       	smpsAlterNote       $05
0008307A 8001                       	dc.b	nRst, $01
0008307C E109                       	smpsAlterNote       $09
0008307E B609 8001                  	dc.b	nF4, $09, nRst, $01
00083082 E108                       	smpsAlterNote       $08
00083084 B506 8001                  	dc.b	nE4, $06, nRst, $01
00083088 E107                       	smpsAlterNote       $07
0008308A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008308E E108                       	smpsAlterNote       $08
00083090 B502 8001                  	dc.b	nE4, $02, nRst, $01
00083094 E109                       	smpsAlterNote       $09
00083096 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008309C E10B                       	smpsAlterNote       $0B
0008309E BA0D                       	dc.b	nA4, $0D
000830A0 E108                       	smpsAlterNote       $08
000830A2 E701                       	dc.b	smpsNoAttack, $01
000830A4 E104                       	smpsAlterNote       $04
000830A6 E701                       	dc.b	smpsNoAttack, $01
000830A8 E108                       	smpsAlterNote       $08
000830AA E701                       	dc.b	smpsNoAttack, $01
000830AC E10E                       	smpsAlterNote       $0E
000830AE E701                       	dc.b	smpsNoAttack, $01
000830B0 E10F                       	smpsAlterNote       $0F
000830B2 E701                       	dc.b	smpsNoAttack, $01
000830B4 E10B                       	smpsAlterNote       $0B
000830B6 E701                       	dc.b	smpsNoAttack, $01
000830B8 E105                       	smpsAlterNote       $05
000830BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830BE E108                       	smpsAlterNote       $08
000830C0 E701                       	dc.b	smpsNoAttack, $01
000830C2 E10E                       	smpsAlterNote       $0E
000830C4 E701                       	dc.b	smpsNoAttack, $01
000830C6 E10F                       	smpsAlterNote       $0F
000830C8 8001                       	dc.b	nRst, $01
000830CA E109                       	smpsAlterNote       $09
000830CC C20D                       	dc.b	nF5, $0D
000830CE E103                       	smpsAlterNote       $03
000830D0 E701                       	dc.b	smpsNoAttack, $01
000830D2 E102                       	smpsAlterNote       $02
000830D4 E701                       	dc.b	smpsNoAttack, $01
000830D6 E106                       	smpsAlterNote       $06
000830D8 E701                       	dc.b	smpsNoAttack, $01
000830DA E10C                       	smpsAlterNote       $0C
000830DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830E0 E109                       	smpsAlterNote       $09
000830E2 E701                       	dc.b	smpsNoAttack, $01
000830E4 E103                       	smpsAlterNote       $03
000830E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830EA E109                       	smpsAlterNote       $09
000830EC E701                       	dc.b	smpsNoAttack, $01
000830EE E10C                       	smpsAlterNote       $0C
000830F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830F4 E106                       	smpsAlterNote       $06
000830F6 E701                       	dc.b	smpsNoAttack, $01
000830F8 E102                       	smpsAlterNote       $02
000830FA E701                       	dc.b	smpsNoAttack, $01
000830FC E103                       	smpsAlterNote       $03
000830FE E701                       	dc.b	smpsNoAttack, $01
00083100 E109                       	smpsAlterNote       $09
00083102 E701                       	dc.b	smpsNoAttack, $01
00083104 E10D                       	smpsAlterNote       $0D
00083106 E701                       	dc.b	smpsNoAttack, $01
00083108 E109                       	smpsAlterNote       $09
0008310A E701                       	dc.b	smpsNoAttack, $01
0008310C E106                       	smpsAlterNote       $06
0008310E E701                       	dc.b	smpsNoAttack, $01
00083110 E102                       	smpsAlterNote       $02
00083112 E701                       	dc.b	smpsNoAttack, $01
00083114 E106                       	smpsAlterNote       $06
00083116 E701                       	dc.b	smpsNoAttack, $01
00083118 E10C                       	smpsAlterNote       $0C
0008311A E701                       	dc.b	smpsNoAttack, $01
0008311C E10D                       	smpsAlterNote       $0D
0008311E E701                       	dc.b	smpsNoAttack, $01
00083120 E109                       	smpsAlterNote       $09
00083122 E701                       	dc.b	smpsNoAttack, $01
00083124 E103                       	smpsAlterNote       $03
00083126 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008312A E106                       	smpsAlterNote       $06
0008312C E701                       	dc.b	smpsNoAttack, $01
0008312E E10C                       	smpsAlterNote       $0C
00083130 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083134 E106                       	smpsAlterNote       $06
00083136 E701                       	dc.b	smpsNoAttack, $01
00083138 E103                       	smpsAlterNote       $03
0008313A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008313E E109                       	smpsAlterNote       $09
00083140 E701                       	dc.b	smpsNoAttack, $01
00083142 E10D                       	smpsAlterNote       $0D
00083144 E701                       	dc.b	smpsNoAttack, $01
00083146 E10C                       	smpsAlterNote       $0C
00083148 E701                       	dc.b	smpsNoAttack, $01
0008314A E106                       	smpsAlterNote       $06
0008314C E701                       	dc.b	smpsNoAttack, $01
0008314E E102                       	smpsAlterNote       $02
00083150 E701                       	dc.b	smpsNoAttack, $01
00083152 E106                       	smpsAlterNote       $06
00083154 E701                       	dc.b	smpsNoAttack, $01
00083156 E109                       	smpsAlterNote       $09
00083158 E701                       	dc.b	smpsNoAttack, $01
0008315A E10D                       	smpsAlterNote       $0D
0008315C E701                       	dc.b	smpsNoAttack, $01
0008315E E109                       	smpsAlterNote       $09
00083160 E701                       	dc.b	smpsNoAttack, $01
00083162 E103                       	smpsAlterNote       $03
00083164 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083168 E109                       	smpsAlterNote       $09
0008316A C206                       	dc.b	nF5, $06
0008316C E108                       	smpsAlterNote       $08
0008316E C10E                       	dc.b	nE5, $0E
00083170 E102                       	smpsAlterNote       $02
00083172 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083176 E108                       	smpsAlterNote       $08
00083178 E701                       	dc.b	smpsNoAttack, $01
0008317A E10B                       	smpsAlterNote       $0B
0008317C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083180 E105                       	smpsAlterNote       $05
00083182 E701                       	dc.b	smpsNoAttack, $01
00083184 E101                       	smpsAlterNote       $01
00083186 E701                       	dc.b	smpsNoAttack, $01
00083188 E102                       	smpsAlterNote       $02
0008318A E701                       	dc.b	smpsNoAttack, $01
0008318C E108                       	smpsAlterNote       $08
0008318E E701                       	dc.b	smpsNoAttack, $01
00083190 E10C                       	smpsAlterNote       $0C
00083192 E701                       	dc.b	smpsNoAttack, $01
00083194 E107                       	smpsAlterNote       $07
00083196 BF0E                       	dc.b	nD5, $0E
00083198 E101                       	smpsAlterNote       $01
0008319A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008319E E107                       	smpsAlterNote       $07
000831A0 E701                       	dc.b	smpsNoAttack, $01
000831A2 E10A                       	smpsAlterNote       $0A
000831A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831A8 E104                       	smpsAlterNote       $04
000831AA E701                       	dc.b	smpsNoAttack, $01
000831AC E100                       	smpsAlterNote       $00
000831AE E701                       	dc.b	smpsNoAttack, $01
000831B0 E104                       	smpsAlterNote       $04
000831B2 E701                       	dc.b	smpsNoAttack, $01
000831B4 E107                       	smpsAlterNote       $07
000831B6 E701                       	dc.b	smpsNoAttack, $01
000831B8 E10B                       	smpsAlterNote       $0B
000831BA E701                       	dc.b	smpsNoAttack, $01
000831BC E107                       	smpsAlterNote       $07
000831BE E701                       	dc.b	smpsNoAttack, $01
000831C0 E101                       	smpsAlterNote       $01
000831C2 E701                       	dc.b	smpsNoAttack, $01
000831C4 E100                       	smpsAlterNote       $00
000831C6 E701                       	dc.b	smpsNoAttack, $01
000831C8 E104                       	smpsAlterNote       $04
000831CA E701                       	dc.b	smpsNoAttack, $01
000831CC E10A                       	smpsAlterNote       $0A
000831CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831D2 E107                       	smpsAlterNote       $07
000831D4 E701                       	dc.b	smpsNoAttack, $01
000831D6 E101                       	smpsAlterNote       $01
000831D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831DC E107                       	smpsAlterNote       $07
000831DE E701                       	dc.b	smpsNoAttack, $01
000831E0 E10A                       	smpsAlterNote       $0A
000831E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000831E6 E104                       	smpsAlterNote       $04
000831E8 E701                       	dc.b	smpsNoAttack, $01
000831EA E100                       	smpsAlterNote       $00
000831EC E701                       	dc.b	smpsNoAttack, $01
000831EE E101                       	smpsAlterNote       $01
000831F0 E701                       	dc.b	smpsNoAttack, $01
000831F2 E107                       	smpsAlterNote       $07
000831F4 E701                       	dc.b	smpsNoAttack, $01
000831F6 E10B                       	smpsAlterNote       $0B
000831F8 E701                       	dc.b	smpsNoAttack, $01
000831FA E107                       	smpsAlterNote       $07
000831FC E701                       	dc.b	smpsNoAttack, $01
000831FE E104                       	smpsAlterNote       $04
00083200 E701                       	dc.b	smpsNoAttack, $01
00083202 E100                       	smpsAlterNote       $00
00083204 E701                       	dc.b	smpsNoAttack, $01
00083206 E104                       	smpsAlterNote       $04
00083208 E701                       	dc.b	smpsNoAttack, $01
0008320A E10A                       	smpsAlterNote       $0A
0008320C E701                       	dc.b	smpsNoAttack, $01
0008320E E10B                       	smpsAlterNote       $0B
00083210 E701                       	dc.b	smpsNoAttack, $01
00083212 E107                       	smpsAlterNote       $07
00083214 E701                       	dc.b	smpsNoAttack, $01
00083216 E101                       	smpsAlterNote       $01
00083218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008321C E104                       	smpsAlterNote       $04
0008321E E701                       	dc.b	smpsNoAttack, $01
00083220 E10A                       	smpsAlterNote       $0A
00083222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083226 E104                       	smpsAlterNote       $04
00083228 E701                       	dc.b	smpsNoAttack, $01
0008322A E101                       	smpsAlterNote       $01
0008322C E701                       	dc.b	smpsNoAttack, $01
00083230 E107                       	smpsAlterNote       $07
00083232 E6FF                       	smpsAlterVol        $FF
00083234 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00083240 8004                       	dc.b	nRst, $04
00083244 E109                       	smpsAlterNote       $09
00083246 E602                       	smpsAlterVol        $02
00083248 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008324E E108                       	smpsAlterNote       $08
00083250 B502 8001                  	dc.b	nE4, $02, nRst, $01
00083254 E109                       	smpsAlterNote       $09
00083256 B60D                       	dc.b	nF4, $0D
00083258 E106                       	smpsAlterNote       $06
0008325A E701                       	dc.b	smpsNoAttack, $01
0008325C E102                       	smpsAlterNote       $02
0008325E E701                       	dc.b	smpsNoAttack, $01
00083260 E106                       	smpsAlterNote       $06
00083262 E701                       	dc.b	smpsNoAttack, $01
00083264 E109                       	smpsAlterNote       $09
00083266 E701                       	dc.b	smpsNoAttack, $01
00083268 E10D                       	smpsAlterNote       $0D
0008326A E701                       	dc.b	smpsNoAttack, $01
0008326C E109                       	smpsAlterNote       $09
0008326E E701                       	dc.b	smpsNoAttack, $01
00083270 E103                       	smpsAlterNote       $03
00083272 E701                       	dc.b	smpsNoAttack, $01
00083274 E102                       	smpsAlterNote       $02
00083276 E701                       	dc.b	smpsNoAttack, $01
00083278 E106                       	smpsAlterNote       $06
0008327A E701                       	dc.b	smpsNoAttack, $01
0008327C E10C                       	smpsAlterNote       $0C
0008327E E701                       	dc.b	smpsNoAttack, $01
00083280 E10D                       	smpsAlterNote       $0D
00083282 8001                       	dc.b	nRst, $01
00083284 E109                       	smpsAlterNote       $09
00083286 B80D                       	dc.b	nG4, $0D
00083288 E106                       	smpsAlterNote       $06
0008328A E701                       	dc.b	smpsNoAttack, $01
0008328C E102                       	smpsAlterNote       $02
0008328E E701                       	dc.b	smpsNoAttack, $01
00083290 E106                       	smpsAlterNote       $06
00083292 E701                       	dc.b	smpsNoAttack, $01
00083294 E10C                       	smpsAlterNote       $0C
00083296 E701                       	dc.b	smpsNoAttack, $01
00083298 E10D                       	smpsAlterNote       $0D
0008329A E701                       	dc.b	smpsNoAttack, $01
0008329C E109                       	smpsAlterNote       $09
0008329E E701                       	dc.b	smpsNoAttack, $01
000832A0 E103                       	smpsAlterNote       $03
000832A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832A6 E106                       	smpsAlterNote       $06
000832A8 E701                       	dc.b	smpsNoAttack, $01
000832AA E10C                       	smpsAlterNote       $0C
000832AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832B0 E106                       	smpsAlterNote       $06
000832B2 E701                       	dc.b	smpsNoAttack, $01
000832B4 E103                       	smpsAlterNote       $03
000832B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832BA E109                       	smpsAlterNote       $09
000832BC E701                       	dc.b	smpsNoAttack, $01
000832BE E10D                       	smpsAlterNote       $0D
000832C0 E701                       	dc.b	smpsNoAttack, $01
000832C2 E10C                       	smpsAlterNote       $0C
000832C4 E701                       	dc.b	smpsNoAttack, $01
000832C6 E109                       	smpsAlterNote       $09
000832C8 8001                       	dc.b	nRst, $01
000832CA E10B                       	smpsAlterNote       $0B
000832CC BA03                       	dc.b	nA4, $03
000832CE E10C                       	smpsAlterNote       $0C
000832D0 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000832D4 E10B                       	smpsAlterNote       $0B
000832D6 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000832DC E10C                       	smpsAlterNote       $0C
000832DE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000832E2 E10B                       	smpsAlterNote       $0B
000832E4 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000832EA E10C                       	smpsAlterNote       $0C
000832EC D303                       	dc.b	nBb6, $03
000832EE E10B                       	smpsAlterNote       $0B
000832F0 D20D                       	dc.b	nA6, $0D
000832F2 E108                       	smpsAlterNote       $08
000832F4 E701                       	dc.b	smpsNoAttack, $01
000832F6 E104                       	smpsAlterNote       $04
000832F8 E701                       	dc.b	smpsNoAttack, $01
000832FA E105                       	smpsAlterNote       $05
000832FC E701                       	dc.b	smpsNoAttack, $01
000832FE E10B                       	smpsAlterNote       $0B
00083300 E701                       	dc.b	smpsNoAttack, $01
00083302 E10F                       	smpsAlterNote       $0F
00083304 E701                       	dc.b	smpsNoAttack, $01
00083306 E10B                       	smpsAlterNote       $0B
00083308 E701                       	dc.b	smpsNoAttack, $01
0008330A E108                       	smpsAlterNote       $08
0008330C E701                       	dc.b	smpsNoAttack, $01
0008330E E104                       	smpsAlterNote       $04
00083310 E701                       	dc.b	smpsNoAttack, $01
00083312 E108                       	smpsAlterNote       $08
00083314 E701                       	dc.b	smpsNoAttack, $01
00083316 E10E                       	smpsAlterNote       $0E
00083318 E701                       	dc.b	smpsNoAttack, $01
0008331A E10F                       	smpsAlterNote       $0F
0008331C E701                       	dc.b	smpsNoAttack, $01
0008331E E10B                       	smpsAlterNote       $0B
00083320 E701                       	dc.b	smpsNoAttack, $01
00083322 E105                       	smpsAlterNote       $05
00083324 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008332A E109                       	smpsAlterNote       $09
0008332C CE07                       	dc.b	nF6, $07
0008332E E108                       	smpsAlterNote       $08
00083330 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00083334 E109                       	smpsAlterNote       $09
00083336 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008333A E108                       	smpsAlterNote       $08
0008333C CC0D                       	dc.b	nEb6, $0D
0008333E E102                       	smpsAlterNote       $02
00083340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083344 E108                       	smpsAlterNote       $08
00083346 E701                       	dc.b	smpsNoAttack, $01
00083348 E10B                       	smpsAlterNote       $0B
0008334A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008334E E105                       	smpsAlterNote       $05
00083350 E701                       	dc.b	smpsNoAttack, $01
00083352 E101                       	smpsAlterNote       $01
00083354 E701                       	dc.b	smpsNoAttack, $01
00083356 E102                       	smpsAlterNote       $02
00083358 E701                       	dc.b	smpsNoAttack, $01
0008335A E108                       	smpsAlterNote       $08
0008335C E701                       	dc.b	smpsNoAttack, $01
0008335E E10C                       	smpsAlterNote       $0C
00083360 E701                       	dc.b	smpsNoAttack, $01
00083362 E108                       	smpsAlterNote       $08
00083364 E701                       	dc.b	smpsNoAttack, $01
00083366 E105                       	smpsAlterNote       $05
00083368 E701                       	dc.b	smpsNoAttack, $01
0008336A E101                       	smpsAlterNote       $01
0008336C E701                       	dc.b	smpsNoAttack, $01
0008336E E105                       	smpsAlterNote       $05
00083370 E701                       	dc.b	smpsNoAttack, $01
00083372 E10B                       	smpsAlterNote       $0B
00083374 E701                       	dc.b	smpsNoAttack, $01
00083376 E10C                       	smpsAlterNote       $0C
00083378 E701                       	dc.b	smpsNoAttack, $01
0008337A E108                       	smpsAlterNote       $08
0008337C E701                       	dc.b	smpsNoAttack, $01
0008337E E107                       	smpsAlterNote       $07
00083380 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008338A E10B                       	smpsAlterNote       $0B
0008338C C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00083396 E109                       	smpsAlterNote       $09
00083398 C203                       	dc.b	nF5, $03
0008339A E108                       	smpsAlterNote       $08
0008339C C103 8001                  	dc.b	nE5, $03, nRst, $01
000833A0 E109                       	smpsAlterNote       $09
000833A2 C20D                       	dc.b	nF5, $0D
000833A4 E108                       	smpsAlterNote       $08
000833A6 C10E                       	dc.b	nE5, $0E
000833A8 E107                       	smpsAlterNote       $07
000833AA BF0D                       	dc.b	nD5, $0D
000833AC E104                       	smpsAlterNote       $04
000833AE E701                       	dc.b	smpsNoAttack, $01
000833B0 E100                       	smpsAlterNote       $00
000833B2 E701                       	dc.b	smpsNoAttack, $01
000833B4 E104                       	smpsAlterNote       $04
000833B6 E701                       	dc.b	smpsNoAttack, $01
000833B8 E107                       	smpsAlterNote       $07
000833BA E701                       	dc.b	smpsNoAttack, $01
000833BC E10B                       	smpsAlterNote       $0B
000833BE E701                       	dc.b	smpsNoAttack, $01
000833C0 E107                       	smpsAlterNote       $07
000833C2 E701                       	dc.b	smpsNoAttack, $01
000833C4 E101                       	smpsAlterNote       $01
000833C6 E701                       	dc.b	smpsNoAttack, $01
000833C8 E100                       	smpsAlterNote       $00
000833CA E701                       	dc.b	smpsNoAttack, $01
000833CC E104                       	smpsAlterNote       $04
000833CE E701                       	dc.b	smpsNoAttack, $01
000833D0 E10A                       	smpsAlterNote       $0A
000833D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000833D6 E107                       	smpsAlterNote       $07
000833D8 E701                       	dc.b	smpsNoAttack, $01
000833DA E101                       	smpsAlterNote       $01
000833DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000833E0 E107                       	smpsAlterNote       $07
000833E2 E701                       	dc.b	smpsNoAttack, $01
000833E4 E10A                       	smpsAlterNote       $0A
000833E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000833EA E104                       	smpsAlterNote       $04
000833EC E701                       	dc.b	smpsNoAttack, $01
000833EE E100                       	smpsAlterNote       $00
000833F0 E701                       	dc.b	smpsNoAttack, $01
000833F2 E101                       	smpsAlterNote       $01
000833F4 E701                       	dc.b	smpsNoAttack, $01
000833F6 E107                       	smpsAlterNote       $07
000833F8 E701                       	dc.b	smpsNoAttack, $01
000833FA E10B                       	smpsAlterNote       $0B
000833FC E701                       	dc.b	smpsNoAttack, $01
000833FE E107                       	smpsAlterNote       $07
00083400 E701                       	dc.b	smpsNoAttack, $01
00083402 E104                       	smpsAlterNote       $04
00083404 E701                       	dc.b	smpsNoAttack, $01
00083406 E100                       	smpsAlterNote       $00
00083408 E701                       	dc.b	smpsNoAttack, $01
0008340A E104                       	smpsAlterNote       $04
0008340C E701                       	dc.b	smpsNoAttack, $01
0008340E E10A                       	smpsAlterNote       $0A
00083410 E701                       	dc.b	smpsNoAttack, $01
00083412 E10B                       	smpsAlterNote       $0B
00083414 E701                       	dc.b	smpsNoAttack, $01
00083416 E107                       	smpsAlterNote       $07
00083418 E701                       	dc.b	smpsNoAttack, $01
0008341A E101                       	smpsAlterNote       $01
0008341C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083420 E104                       	smpsAlterNote       $04
00083422 E701                       	dc.b	smpsNoAttack, $01
00083424 E10A                       	smpsAlterNote       $0A
00083426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008342A E104                       	smpsAlterNote       $04
0008342C E701                       	dc.b	smpsNoAttack, $01
0008342E E101                       	smpsAlterNote       $01
00083430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083434 E107                       	smpsAlterNote       $07
00083436 E701                       	dc.b	smpsNoAttack, $01
00083438 E10B                       	smpsAlterNote       $0B
0008343A E701                       	dc.b	smpsNoAttack, $01
0008343C E10A                       	smpsAlterNote       $0A
0008343E E701                       	dc.b	smpsNoAttack, $01
00083440 E104                       	smpsAlterNote       $04
00083442 E701                       	dc.b	smpsNoAttack, $01
00083444 E100                       	smpsAlterNote       $00
00083446 E701                       	dc.b	smpsNoAttack, $01
00083448 E104                       	smpsAlterNote       $04
0008344A E701                       	dc.b	smpsNoAttack, $01
0008344C E107                       	smpsAlterNote       $07
0008344E E701                       	dc.b	smpsNoAttack, $01
00083450 E10B                       	smpsAlterNote       $0B
00083452 E701                       	dc.b	smpsNoAttack, $01
00083454 E107                       	smpsAlterNote       $07
00083456 E701                       	dc.b	smpsNoAttack, $01
00083458 E101                       	smpsAlterNote       $01
0008345A E701                       	dc.b	smpsNoAttack, $01
0008345C E100                       	smpsAlterNote       $00
0008345E E701                       	dc.b	smpsNoAttack, $01
00083460 E104                       	smpsAlterNote       $04
00083462 E701                       	dc.b	smpsNoAttack, $01
00083464 E10A                       	smpsAlterNote       $0A
00083466 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008346A E107                       	smpsAlterNote       $07
0008346C E701                       	dc.b	smpsNoAttack, $01
0008346E E101                       	smpsAlterNote       $01
00083470 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083474 E107                       	smpsAlterNote       $07
00083476 E701                       	dc.b	smpsNoAttack, $01
00083478 E10A                       	smpsAlterNote       $0A
0008347A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008347E E104                       	smpsAlterNote       $04
00083480 E701                       	dc.b	smpsNoAttack, $01
00083482 E100                       	smpsAlterNote       $00
00083484 E701                       	dc.b	smpsNoAttack, $01
00083486 E101                       	smpsAlterNote       $01
00083488 E701                       	dc.b	smpsNoAttack, $01
0008348A E107                       	smpsAlterNote       $07
0008348C E701                       	dc.b	smpsNoAttack, $01
0008348E E10B                       	smpsAlterNote       $0B
00083490 E701                       	dc.b	smpsNoAttack, $01
00083492 E107                       	smpsAlterNote       $07
00083494 E701                       	dc.b	smpsNoAttack, $01
00083496 E104                       	smpsAlterNote       $04
00083498 E701                       	dc.b	smpsNoAttack, $01
0008349A E100                       	smpsAlterNote       $00
0008349C E701                       	dc.b	smpsNoAttack, $01
0008349E E101                       	smpsAlterNote       $01
000834A0 8001                       	dc.b	nRst, $01
000834A2 E109                       	smpsAlterNote       $09
000834A4 C20D                       	dc.b	nF5, $0D
000834A6 E106                       	smpsAlterNote       $06
000834A8 E701                       	dc.b	smpsNoAttack, $01
000834AA E102                       	smpsAlterNote       $02
000834AC E701                       	dc.b	smpsNoAttack, $01
000834AE E106                       	smpsAlterNote       $06
000834B0 E701                       	dc.b	smpsNoAttack, $01
000834B2 E10C                       	smpsAlterNote       $0C
000834B4 E701                       	dc.b	smpsNoAttack, $01
000834B6 E10D                       	smpsAlterNote       $0D
000834B8 E701                       	dc.b	smpsNoAttack, $01
000834BA E109                       	smpsAlterNote       $09
000834BC E701                       	dc.b	smpsNoAttack, $01
000834BE E103                       	smpsAlterNote       $03
000834C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834C4 E106                       	smpsAlterNote       $06
000834C6 E701                       	dc.b	smpsNoAttack, $01
000834C8 E10C                       	smpsAlterNote       $0C
000834CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834CE E106                       	smpsAlterNote       $06
000834D0 E701                       	dc.b	smpsNoAttack, $01
000834D2 E103                       	smpsAlterNote       $03
000834D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834D8 E109                       	smpsAlterNote       $09
000834DA E701                       	dc.b	smpsNoAttack, $01
000834DC E10D                       	smpsAlterNote       $0D
000834DE E701                       	dc.b	smpsNoAttack, $01
000834E0 E10C                       	smpsAlterNote       $0C
000834E2 E701                       	dc.b	smpsNoAttack, $01
000834E4 E109                       	smpsAlterNote       $09
000834E6 8001                       	dc.b	nRst, $01
000834E8 E108                       	smpsAlterNote       $08
000834EA C10D                       	dc.b	nE5, $0D
000834EC E109                       	smpsAlterNote       $09
000834EE C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000834F2 E108                       	smpsAlterNote       $08
000834F4 C10D                       	dc.b	nE5, $0D
000834F6 E102                       	smpsAlterNote       $02
000834F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834FC E105                       	smpsAlterNote       $05
000834FE E701                       	dc.b	smpsNoAttack, $01
00083500 E108                       	smpsAlterNote       $08
00083502 8001                       	dc.b	nRst, $01
00083504 E107                       	smpsAlterNote       $07
00083506 BF0D                       	dc.b	nD5, $0D
00083508 E108                       	smpsAlterNote       $08
0008350A C107                       	dc.b	nE5, $07
0008350C E109                       	smpsAlterNote       $09
0008350E C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00083514 E10B                       	smpsAlterNote       $0B
00083516 C603                       	dc.b	nA5, $03
00083518 E10C                       	smpsAlterNote       $0C
0008351A C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00083520 E10B                       	smpsAlterNote       $0B
00083522 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00083528 E109                       	smpsAlterNote       $09
0008352A D003                       	dc.b	nG6, $03
0008352C E108                       	smpsAlterNote       $08
0008352E CD02 8001                  	dc.b	nE6, $02, nRst, $01
00083532 E10B                       	smpsAlterNote       $0B
00083534 C601 8001                  	dc.b	nA5, $01, nRst, $01
00083538 E108                       	smpsAlterNote       $08
0008353A C102                       	dc.b	nE5, $02
0008353E E10C                       	smpsAlterNote       $0C
00083540 E6FB                       	smpsAlterVol        $FB
00083542 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008354E 8001                       	dc.b	nRst, $01
00083550 E10B                       	smpsAlterNote       $0B
00083552 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008355A E107                       	smpsAlterNote       $07
0008355C A706 8001                  	dc.b	nD3, $06, nRst, $01
00083560 E10B                       	smpsAlterNote       $0B
00083562 A203                       	dc.b	nA2, $03
00083564 E109                       	smpsAlterNote       $09
00083566 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008356A E108                       	smpsAlterNote       $08
0008356C A906                       	dc.b	nE3, $06
0008356E E107                       	smpsAlterNote       $07
00083570 A703 8001                  	dc.b	nD3, $03, nRst, $01
00083574 E106                       	smpsAlterNote       $06
00083576 A503                       	dc.b	nC3, $03
00083578 E10C                       	smpsAlterNote       $0C
0008357A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008357E E10B                       	smpsAlterNote       $0B
00083580 A203 8004                  	dc.b	nA2, $03, nRst, $04
00083584 E11B                       	smpsAlterNote       $1B
00083586 C401                       	dc.b	nG5, $01
00083588 E1F4                       	smpsAlterNote       $F4
0008358A E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008358D E106                       	smpsAlterNote       $06
0008358F E701                       	dc.b	smpsNoAttack, $01
00083591 E10F                       	smpsAlterNote       $0F
00083593 E701                       	dc.b	smpsNoAttack, $01
00083595 E1E4                       	smpsAlterNote       $E4
00083597 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008359A E1F6                       	smpsAlterNote       $F6
0008359C E701                       	dc.b	smpsNoAttack, $01
0008359E E108                       	smpsAlterNote       $08
000835A0 E701                       	dc.b	smpsNoAttack, $01
000835A2 E10B                       	smpsAlterNote       $0B
000835A4 E706                       	dc.b	smpsNoAttack, $06
000835A6 E105                       	smpsAlterNote       $05
000835A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835AC E108                       	smpsAlterNote       $08
000835AE E701                       	dc.b	smpsNoAttack, $01
000835B0 E10E                       	smpsAlterNote       $0E
000835B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835B6 E108                       	smpsAlterNote       $08
000835B8 E701                       	dc.b	smpsNoAttack, $01
000835BA E105                       	smpsAlterNote       $05
000835BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835C0 E10B                       	smpsAlterNote       $0B
000835C2 E701                       	dc.b	smpsNoAttack, $01
000835C4 E10F                       	smpsAlterNote       $0F
000835C6 E701                       	dc.b	smpsNoAttack, $01
000835C8 E10E                       	smpsAlterNote       $0E
000835CA E701                       	dc.b	smpsNoAttack, $01
000835CC E108                       	smpsAlterNote       $08
000835CE E701                       	dc.b	smpsNoAttack, $01
000835D0 E104                       	smpsAlterNote       $04
000835D2 E701                       	dc.b	smpsNoAttack, $01
000835D4 E108                       	smpsAlterNote       $08
000835D6 E701                       	dc.b	smpsNoAttack, $01
000835D8 E10B                       	smpsAlterNote       $0B
000835DA E701                       	dc.b	smpsNoAttack, $01
000835DC E10F                       	smpsAlterNote       $0F
000835DE E701                       	dc.b	smpsNoAttack, $01
000835E0 E10B                       	smpsAlterNote       $0B
000835E2 E701                       	dc.b	smpsNoAttack, $01
000835E4 E105                       	smpsAlterNote       $05
000835E6 E701                       	dc.b	smpsNoAttack, $01
000835E8 E104                       	smpsAlterNote       $04
000835EA E701                       	dc.b	smpsNoAttack, $01
000835EC E108                       	smpsAlterNote       $08
000835EE E701                       	dc.b	smpsNoAttack, $01
000835F0 E10E                       	smpsAlterNote       $0E
000835F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835F6 E10B                       	smpsAlterNote       $0B
000835F8 E701                       	dc.b	smpsNoAttack, $01
000835FA E105                       	smpsAlterNote       $05
000835FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083600 E10B                       	smpsAlterNote       $0B
00083602 E701                       	dc.b	smpsNoAttack, $01
00083604 E10E                       	smpsAlterNote       $0E
00083606 E701                       	dc.b	smpsNoAttack, $01
00083608 E10F                       	smpsAlterNote       $0F
0008360A 8001                       	dc.b	nRst, $01
0008360C E109                       	smpsAlterNote       $09
0008360E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00083614 E108                       	smpsAlterNote       $08
00083616 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008361A E109                       	smpsAlterNote       $09
0008361C C202                       	dc.b	nF5, $02
0008361E E108                       	smpsAlterNote       $08
00083620 C102                       	dc.b	nE5, $02
00083622 E107                       	smpsAlterNote       $07
00083624 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083628 E108                       	smpsAlterNote       $08
0008362A C101 8001                  	dc.b	nE5, $01, nRst, $01
0008362E E107                       	smpsAlterNote       $07
00083630 BF02                       	dc.b	nD5, $02
00083632 E106                       	smpsAlterNote       $06
00083634 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00083638 E107                       	smpsAlterNote       $07
0008363A BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008363E E106                       	smpsAlterNote       $06
00083640 BD02                       	dc.b	nC5, $02
00083642 E10C                       	smpsAlterNote       $0C
00083644 BB02                       	dc.b	nBb4, $02
00083646 E106                       	smpsAlterNote       $06
00083648 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008364C E10C                       	smpsAlterNote       $0C
0008364E BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00083652 E10B                       	smpsAlterNote       $0B
00083654 BA02                       	dc.b	nA4, $02
00083656 E10C                       	smpsAlterNote       $0C
00083658 BB02                       	dc.b	nBb4, $02
0008365A E10B                       	smpsAlterNote       $0B
0008365C BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00083666 E108                       	smpsAlterNote       $08
00083668 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00083670 E107                       	smpsAlterNote       $07
00083672 BE02                       	dc.b	nCs5, $02
00083674 E10B                       	smpsAlterNote       $0B
00083676 BA02                       	dc.b	nA4, $02
00083678 E109                       	smpsAlterNote       $09
0008367A B802 8001                  	dc.b	nG4, $02, nRst, $01
0008367E E108                       	smpsAlterNote       $08
00083680 B501 8001                  	dc.b	nE4, $01, nRst, $01
00083684 E10B                       	smpsAlterNote       $0B
00083686 AE02                       	dc.b	nA3, $02
00083688 E10C                       	smpsAlterNote       $0C
0008368A A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00083696 E10B                       	smpsAlterNote       $0B
00083698 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000836A0 E107                       	smpsAlterNote       $07
000836A2 A706 8001                  	dc.b	nD3, $06, nRst, $01
000836A6 E10B                       	smpsAlterNote       $0B
000836A8 A203                       	dc.b	nA2, $03
000836AA E109                       	smpsAlterNote       $09
000836AC AA03 8001                  	dc.b	nF3, $03, nRst, $01
000836B0 E108                       	smpsAlterNote       $08
000836B2 A906 8001                  	dc.b	nE3, $06, nRst, $01
000836B6 E107                       	smpsAlterNote       $07
000836B8 A702 8001                  	dc.b	nD3, $02, nRst, $01
000836BC E106                       	smpsAlterNote       $06
000836BE A503                       	dc.b	nC3, $03
000836C0 E10C                       	smpsAlterNote       $0C
000836C2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000836C8 E107                       	smpsAlterNote       $07
000836CA B20D                       	dc.b	nCs4, $0D
000836CC E104                       	smpsAlterNote       $04
000836CE E701                       	dc.b	smpsNoAttack, $01
000836D0 E100                       	smpsAlterNote       $00
000836D2 E701                       	dc.b	smpsNoAttack, $01
000836D4 E104                       	smpsAlterNote       $04
000836D6 E701                       	dc.b	smpsNoAttack, $01
000836D8 E10A                       	smpsAlterNote       $0A
000836DA E701                       	dc.b	smpsNoAttack, $01
000836DC E10B                       	smpsAlterNote       $0B
000836DE E701                       	dc.b	smpsNoAttack, $01
000836E0 E107                       	smpsAlterNote       $07
000836E2 E701                       	dc.b	smpsNoAttack, $01
000836E4 E101                       	smpsAlterNote       $01
000836E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000836EA E104                       	smpsAlterNote       $04
000836EC E701                       	dc.b	smpsNoAttack, $01
000836EE E10A                       	smpsAlterNote       $0A
000836F0 E701                       	dc.b	smpsNoAttack, $01
000836F2 E10B                       	smpsAlterNote       $0B
000836F4 8001                       	dc.b	nRst, $01
000836F6 E107                       	smpsAlterNote       $07
000836F8 B30D                       	dc.b	nD4, $0D
000836FA E104                       	smpsAlterNote       $04
000836FC E701                       	dc.b	smpsNoAttack, $01
000836FE E100                       	smpsAlterNote       $00
00083700 E701                       	dc.b	smpsNoAttack, $01
00083702 E104                       	smpsAlterNote       $04
00083704 E701                       	dc.b	smpsNoAttack, $01
00083706 E10A                       	smpsAlterNote       $0A
00083708 E701                       	dc.b	smpsNoAttack, $01
0008370A E10B                       	smpsAlterNote       $0B
0008370C E701                       	dc.b	smpsNoAttack, $01
0008370E E107                       	smpsAlterNote       $07
00083710 E701                       	dc.b	smpsNoAttack, $01
00083712 E101                       	smpsAlterNote       $01
00083714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083718 E104                       	smpsAlterNote       $04
0008371A E701                       	dc.b	smpsNoAttack, $01
0008371C E10A                       	smpsAlterNote       $0A
0008371E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083722 E104                       	smpsAlterNote       $04
00083724 E701                       	dc.b	smpsNoAttack, $01
00083726 E101                       	smpsAlterNote       $01
00083728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008372C E107                       	smpsAlterNote       $07
0008372E E701                       	dc.b	smpsNoAttack, $01
00083730 E10B                       	smpsAlterNote       $0B
00083732 E701                       	dc.b	smpsNoAttack, $01
00083734 E10A                       	smpsAlterNote       $0A
00083736 E701                       	dc.b	smpsNoAttack, $01
00083738 E107                       	smpsAlterNote       $07
0008373A 8001                       	dc.b	nRst, $01
0008373C E108                       	smpsAlterNote       $08
0008373E B50D                       	dc.b	nE4, $0D
00083740 E102                       	smpsAlterNote       $02
00083742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083746 E105                       	smpsAlterNote       $05
00083748 E701                       	dc.b	smpsNoAttack, $01
0008374A E10B                       	smpsAlterNote       $0B
0008374C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083750 E105                       	smpsAlterNote       $05
00083752 E701                       	dc.b	smpsNoAttack, $01
00083754 E102                       	smpsAlterNote       $02
00083756 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008375A E108                       	smpsAlterNote       $08
0008375C E701                       	dc.b	smpsNoAttack, $01
0008375E E10C                       	smpsAlterNote       $0C
00083760 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083764 E107                       	smpsAlterNote       $07
00083766 B30D                       	dc.b	nD4, $0D
00083768 E101                       	smpsAlterNote       $01
0008376A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008376E E104                       	smpsAlterNote       $04
00083770 E701                       	dc.b	smpsNoAttack, $01
00083772 E10A                       	smpsAlterNote       $0A
00083774 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083778 E104                       	smpsAlterNote       $04
0008377A E701                       	dc.b	smpsNoAttack, $01
0008377C E101                       	smpsAlterNote       $01
0008377E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083782 E107                       	smpsAlterNote       $07
00083784 E701                       	dc.b	smpsNoAttack, $01
00083786 E10B                       	smpsAlterNote       $0B
00083788 E701                       	dc.b	smpsNoAttack, $01
0008378A E10A                       	smpsAlterNote       $0A
0008378C E701                       	dc.b	smpsNoAttack, $01
0008378E E104                       	smpsAlterNote       $04
00083790 E701                       	dc.b	smpsNoAttack, $01
00083792 E100                       	smpsAlterNote       $00
00083794 E701                       	dc.b	smpsNoAttack, $01
00083796 E104                       	smpsAlterNote       $04
00083798 E701                       	dc.b	smpsNoAttack, $01
0008379A E107                       	smpsAlterNote       $07
0008379C E701                       	dc.b	smpsNoAttack, $01
0008379E E10B                       	smpsAlterNote       $0B
000837A0 E701                       	dc.b	smpsNoAttack, $01
000837A2 E107                       	smpsAlterNote       $07
000837A4 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000837A8 E101                       	smpsAlterNote       $01
000837AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000837AE E107                       	smpsAlterNote       $07
000837B0 E701                       	dc.b	smpsNoAttack, $01
000837B2 E10A                       	smpsAlterNote       $0A
000837B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000837B8 E104                       	smpsAlterNote       $04
000837BA E701                       	dc.b	smpsNoAttack, $01
000837BC E100                       	smpsAlterNote       $00
000837BE E701                       	dc.b	smpsNoAttack, $01
000837C0 E101                       	smpsAlterNote       $01
000837C2 E701                       	dc.b	smpsNoAttack, $01
000837C4 E107                       	smpsAlterNote       $07
000837C6 E701                       	dc.b	smpsNoAttack, $01
000837C8 E10B                       	smpsAlterNote       $0B
000837CA E701                       	dc.b	smpsNoAttack, $01
000837CC E107                       	smpsAlterNote       $07
000837CE B30E                       	dc.b	nD4, $0E
000837D0 E101                       	smpsAlterNote       $01
000837D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000837D6 E107                       	smpsAlterNote       $07
000837D8 E701                       	dc.b	smpsNoAttack, $01
000837DA E10A                       	smpsAlterNote       $0A
000837DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000837E0 E104                       	smpsAlterNote       $04
000837E2 E701                       	dc.b	smpsNoAttack, $01
000837E4 E100                       	smpsAlterNote       $00
000837E6 E701                       	dc.b	smpsNoAttack, $01
000837E8 E101                       	smpsAlterNote       $01
000837EA E701                       	dc.b	smpsNoAttack, $01
000837EC E107                       	smpsAlterNote       $07
000837EE E701                       	dc.b	smpsNoAttack, $01
000837F0 E10B                       	smpsAlterNote       $0B
000837F2 E701                       	dc.b	smpsNoAttack, $01
000837F4 E107                       	smpsAlterNote       $07
000837F6 E701                       	dc.b	smpsNoAttack, $01
000837F8 E104                       	smpsAlterNote       $04
000837FA E701                       	dc.b	smpsNoAttack, $01
000837FC E100                       	smpsAlterNote       $00
000837FE E701                       	dc.b	smpsNoAttack, $01
00083800 E104                       	smpsAlterNote       $04
00083802 E701                       	dc.b	smpsNoAttack, $01
00083804 E10A                       	smpsAlterNote       $0A
00083806 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008380A E107                       	smpsAlterNote       $07
0008380C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00083810 E104                       	smpsAlterNote       $04
00083812 E701                       	dc.b	smpsNoAttack, $01
00083814 E100                       	smpsAlterNote       $00
00083816 E701                       	dc.b	smpsNoAttack, $01
00083818 E101                       	smpsAlterNote       $01
0008381A E701                       	dc.b	smpsNoAttack, $01
0008381C E107                       	smpsAlterNote       $07
0008381E E701                       	dc.b	smpsNoAttack, $01
00083820 E10B                       	smpsAlterNote       $0B
00083822 E701                       	dc.b	smpsNoAttack, $01
00083824 E107                       	smpsAlterNote       $07
00083826 E701                       	dc.b	smpsNoAttack, $01
00083828 E104                       	smpsAlterNote       $04
0008382A E701                       	dc.b	smpsNoAttack, $01
0008382C E100                       	smpsAlterNote       $00
0008382E E701                       	dc.b	smpsNoAttack, $01
00083830 E104                       	smpsAlterNote       $04
00083832 E701                       	dc.b	smpsNoAttack, $01
00083834 E10A                       	smpsAlterNote       $0A
00083836 E701                       	dc.b	smpsNoAttack, $01
00083838 E10B                       	smpsAlterNote       $0B
0008383A E701                       	dc.b	smpsNoAttack, $01
0008383E E6FF                       	smpsAlterVol        $FF
00083840 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008384C 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00083854 E109                       	smpsAlterNote       $09
00083856 E601                       	smpsAlterVol        $01
00083858 B60D                       	dc.b	nF4, $0D
0008385A E106                       	smpsAlterNote       $06
0008385C E701                       	dc.b	smpsNoAttack, $01
0008385E E102                       	smpsAlterNote       $02
00083860 E701                       	dc.b	smpsNoAttack, $01
00083862 E106                       	smpsAlterNote       $06
00083864 E701                       	dc.b	smpsNoAttack, $01
00083866 E109                       	smpsAlterNote       $09
00083868 E701                       	dc.b	smpsNoAttack, $01
0008386A E10D                       	smpsAlterNote       $0D
0008386C E701                       	dc.b	smpsNoAttack, $01
0008386E E109                       	smpsAlterNote       $09
00083870 E701                       	dc.b	smpsNoAttack, $01
00083872 E103                       	smpsAlterNote       $03
00083874 E701                       	dc.b	smpsNoAttack, $01
00083876 E102                       	smpsAlterNote       $02
00083878 E701                       	dc.b	smpsNoAttack, $01
0008387A E106                       	smpsAlterNote       $06
0008387C E701                       	dc.b	smpsNoAttack, $01
0008387E E10C                       	smpsAlterNote       $0C
00083880 E701                       	dc.b	smpsNoAttack, $01
00083882 E10D                       	smpsAlterNote       $0D
00083884 8001                       	dc.b	nRst, $01
00083886 E109                       	smpsAlterNote       $09
00083888 B80D                       	dc.b	nG4, $0D
0008388A E106                       	smpsAlterNote       $06
0008388C E701                       	dc.b	smpsNoAttack, $01
0008388E E102                       	smpsAlterNote       $02
00083890 E701                       	dc.b	smpsNoAttack, $01
00083892 E106                       	smpsAlterNote       $06
00083894 E701                       	dc.b	smpsNoAttack, $01
00083896 E109                       	smpsAlterNote       $09
00083898 E701                       	dc.b	smpsNoAttack, $01
0008389A E10D                       	smpsAlterNote       $0D
0008389C E701                       	dc.b	smpsNoAttack, $01
0008389E E109                       	smpsAlterNote       $09
000838A0 E701                       	dc.b	smpsNoAttack, $01
000838A2 E103                       	smpsAlterNote       $03
000838A4 E701                       	dc.b	smpsNoAttack, $01
000838A6 E102                       	smpsAlterNote       $02
000838A8 E701                       	dc.b	smpsNoAttack, $01
000838AA E106                       	smpsAlterNote       $06
000838AC E701                       	dc.b	smpsNoAttack, $01
000838AE E10C                       	smpsAlterNote       $0C
000838B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838B4 E106                       	smpsAlterNote       $06
000838B6 E701                       	dc.b	smpsNoAttack, $01
000838B8 E103                       	smpsAlterNote       $03
000838BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838BE E109                       	smpsAlterNote       $09
000838C0 E701                       	dc.b	smpsNoAttack, $01
000838C2 E10D                       	smpsAlterNote       $0D
000838C4 E701                       	dc.b	smpsNoAttack, $01
000838C6 E10C                       	smpsAlterNote       $0C
000838C8 E701                       	dc.b	smpsNoAttack, $01
000838CA E109                       	smpsAlterNote       $09
000838CC 8001                       	dc.b	nRst, $01
000838CE E10B                       	smpsAlterNote       $0B
000838D0 BA0D                       	dc.b	nA4, $0D
000838D2 E105                       	smpsAlterNote       $05
000838D4 E701                       	dc.b	smpsNoAttack, $01
000838D6 E104                       	smpsAlterNote       $04
000838D8 E701                       	dc.b	smpsNoAttack, $01
000838DA E108                       	smpsAlterNote       $08
000838DC E701                       	dc.b	smpsNoAttack, $01
000838DE E10E                       	smpsAlterNote       $0E
000838E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838E4 E10B                       	smpsAlterNote       $0B
000838E6 E701                       	dc.b	smpsNoAttack, $01
000838E8 E105                       	smpsAlterNote       $05
000838EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838EE E10B                       	smpsAlterNote       $0B
000838F0 E701                       	dc.b	smpsNoAttack, $01
000838F2 E10E                       	smpsAlterNote       $0E
000838F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838F8 E108                       	smpsAlterNote       $08
000838FA E701                       	dc.b	smpsNoAttack, $01
000838FC E104                       	smpsAlterNote       $04
000838FE E701                       	dc.b	smpsNoAttack, $01
00083900 E105                       	smpsAlterNote       $05
00083902 E701                       	dc.b	smpsNoAttack, $01
00083904 E10B                       	smpsAlterNote       $0B
00083906 E701                       	dc.b	smpsNoAttack, $01
00083908 E10F                       	smpsAlterNote       $0F
0008390A E701                       	dc.b	smpsNoAttack, $01
0008390C E10B                       	smpsAlterNote       $0B
0008390E E701                       	dc.b	smpsNoAttack, $01
00083910 E108                       	smpsAlterNote       $08
00083912 E701                       	dc.b	smpsNoAttack, $01
00083914 E104                       	smpsAlterNote       $04
00083916 E701                       	dc.b	smpsNoAttack, $01
00083918 E108                       	smpsAlterNote       $08
0008391A E701                       	dc.b	smpsNoAttack, $01
0008391C E10E                       	smpsAlterNote       $0E
0008391E E701                       	dc.b	smpsNoAttack, $01
00083920 E10F                       	smpsAlterNote       $0F
00083922 E701                       	dc.b	smpsNoAttack, $01
00083924 E10B                       	smpsAlterNote       $0B
00083926 E701                       	dc.b	smpsNoAttack, $01
00083928 E105                       	smpsAlterNote       $05
0008392A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008392E E108                       	smpsAlterNote       $08
00083930 E701                       	dc.b	smpsNoAttack, $01
00083932 E10E                       	smpsAlterNote       $0E
00083934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083938 E108                       	smpsAlterNote       $08
0008393A E701                       	dc.b	smpsNoAttack, $01
0008393C E105                       	smpsAlterNote       $05
0008393E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083942 E108                       	smpsAlterNote       $08
00083944 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00083948 E109                       	smpsAlterNote       $09
0008394A B60D                       	dc.b	nF4, $0D
0008394C E103                       	smpsAlterNote       $03
0008394E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083952 E106                       	smpsAlterNote       $06
00083954 E701                       	dc.b	smpsNoAttack, $01
00083956 E10C                       	smpsAlterNote       $0C
00083958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008395C E106                       	smpsAlterNote       $06
0008395E E701                       	dc.b	smpsNoAttack, $01
00083960 E103                       	smpsAlterNote       $03
00083962 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083966 E109                       	smpsAlterNote       $09
00083968 E701                       	dc.b	smpsNoAttack, $01
0008396A E10D                       	smpsAlterNote       $0D
0008396C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083970 E109                       	smpsAlterNote       $09
00083972 B80D                       	dc.b	nG4, $0D
00083974 E103                       	smpsAlterNote       $03
00083976 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008397A E109                       	smpsAlterNote       $09
0008397C E701                       	dc.b	smpsNoAttack, $01
0008397E E10C                       	smpsAlterNote       $0C
00083980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083984 E106                       	smpsAlterNote       $06
00083986 E701                       	dc.b	smpsNoAttack, $01
00083988 E102                       	smpsAlterNote       $02
0008398A E701                       	dc.b	smpsNoAttack, $01
0008398C E103                       	smpsAlterNote       $03
0008398E E701                       	dc.b	smpsNoAttack, $01
00083990 E109                       	smpsAlterNote       $09
00083992 E701                       	dc.b	smpsNoAttack, $01
00083994 E10D                       	smpsAlterNote       $0D
00083996 E701                       	dc.b	smpsNoAttack, $01
00083998 E109                       	smpsAlterNote       $09
0008399A E701                       	dc.b	smpsNoAttack, $01
0008399C E106                       	smpsAlterNote       $06
0008399E E701                       	dc.b	smpsNoAttack, $01
000839A0 E102                       	smpsAlterNote       $02
000839A2 E701                       	dc.b	smpsNoAttack, $01
000839A4 E106                       	smpsAlterNote       $06
000839A6 E701                       	dc.b	smpsNoAttack, $01
000839A8 E10C                       	smpsAlterNote       $0C
000839AA E701                       	dc.b	smpsNoAttack, $01
000839AC E10D                       	smpsAlterNote       $0D
000839AE E701                       	dc.b	smpsNoAttack, $01
000839B0 E109                       	smpsAlterNote       $09
000839B2 E701                       	dc.b	smpsNoAttack, $01
000839B4 E10B                       	smpsAlterNote       $0B
000839B6 BA0D                       	dc.b	nA4, $0D
000839B8 E108                       	smpsAlterNote       $08
000839BA E701                       	dc.b	smpsNoAttack, $01
000839BC E105                       	smpsAlterNote       $05
000839BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000839C2 E10B                       	smpsAlterNote       $0B
000839C4 E701                       	dc.b	smpsNoAttack, $01
000839C6 E10F                       	smpsAlterNote       $0F
000839C8 E701                       	dc.b	smpsNoAttack, $01
000839CA E10E                       	smpsAlterNote       $0E
000839CC E701                       	dc.b	smpsNoAttack, $01
000839CE E108                       	smpsAlterNote       $08
000839D0 E701                       	dc.b	smpsNoAttack, $01
000839D2 E104                       	smpsAlterNote       $04
000839D4 E701                       	dc.b	smpsNoAttack, $01
000839D6 E108                       	smpsAlterNote       $08
000839D8 E701                       	dc.b	smpsNoAttack, $01
000839DA E10B                       	smpsAlterNote       $0B
000839DC E701                       	dc.b	smpsNoAttack, $01
000839DE E10F                       	smpsAlterNote       $0F
000839E0 E701                       	dc.b	smpsNoAttack, $01
000839E2 E10B                       	smpsAlterNote       $0B
000839E4 E701                       	dc.b	smpsNoAttack, $01
000839E6 E105                       	smpsAlterNote       $05
000839E8 E701                       	dc.b	smpsNoAttack, $01
000839EA E104                       	smpsAlterNote       $04
000839EC E701                       	dc.b	smpsNoAttack, $01
000839EE E108                       	smpsAlterNote       $08
000839F0 E701                       	dc.b	smpsNoAttack, $01
000839F2 E10E                       	smpsAlterNote       $0E
000839F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000839F8 E10B                       	smpsAlterNote       $0B
000839FA E701                       	dc.b	smpsNoAttack, $01
000839FC E105                       	smpsAlterNote       $05
000839FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A02 E10B                       	smpsAlterNote       $0B
00083A04 E701                       	dc.b	smpsNoAttack, $01
00083A06 E10E                       	smpsAlterNote       $0E
00083A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A0C E108                       	smpsAlterNote       $08
00083A0E E701                       	dc.b	smpsNoAttack, $01
00083A10 E105                       	smpsAlterNote       $05
00083A12 8001                       	dc.b	nRst, $01
00083A14 E109                       	smpsAlterNote       $09
00083A16 B60A                       	dc.b	nF4, $0A
00083A18 E108                       	smpsAlterNote       $08
00083A1A B507                       	dc.b	nE4, $07
00083A1C E107                       	smpsAlterNote       $07
00083A1E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00083A22 E108                       	smpsAlterNote       $08
00083A24 B503                       	dc.b	nE4, $03
00083A26 E109                       	smpsAlterNote       $09
00083A28 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00083A30 E10B                       	smpsAlterNote       $0B
00083A32 BA0D                       	dc.b	nA4, $0D
00083A34 E108                       	smpsAlterNote       $08
00083A36 E701                       	dc.b	smpsNoAttack, $01
00083A38 E104                       	smpsAlterNote       $04
00083A3A E701                       	dc.b	smpsNoAttack, $01
00083A3C E108                       	smpsAlterNote       $08
00083A3E E701                       	dc.b	smpsNoAttack, $01
00083A40 E10B                       	smpsAlterNote       $0B
00083A42 E701                       	dc.b	smpsNoAttack, $01
00083A44 E10F                       	smpsAlterNote       $0F
00083A46 E701                       	dc.b	smpsNoAttack, $01
00083A48 E10B                       	smpsAlterNote       $0B
00083A4A E701                       	dc.b	smpsNoAttack, $01
00083A4C E105                       	smpsAlterNote       $05
00083A4E E701                       	dc.b	smpsNoAttack, $01
00083A50 E104                       	smpsAlterNote       $04
00083A52 E701                       	dc.b	smpsNoAttack, $01
00083A54 E108                       	smpsAlterNote       $08
00083A56 E701                       	dc.b	smpsNoAttack, $01
00083A58 E10E                       	smpsAlterNote       $0E
00083A5A E701                       	dc.b	smpsNoAttack, $01
00083A5C E10F                       	smpsAlterNote       $0F
00083A5E 8001                       	dc.b	nRst, $01
00083A60 E109                       	smpsAlterNote       $09
00083A62 C20D                       	dc.b	nF5, $0D
00083A64 E106                       	smpsAlterNote       $06
00083A66 E701                       	dc.b	smpsNoAttack, $01
00083A68 E102                       	smpsAlterNote       $02
00083A6A E701                       	dc.b	smpsNoAttack, $01
00083A6C E106                       	smpsAlterNote       $06
00083A6E E701                       	dc.b	smpsNoAttack, $01
00083A70 E109                       	smpsAlterNote       $09
00083A72 E701                       	dc.b	smpsNoAttack, $01
00083A74 E10D                       	smpsAlterNote       $0D
00083A76 E701                       	dc.b	smpsNoAttack, $01
00083A78 E109                       	smpsAlterNote       $09
00083A7A E701                       	dc.b	smpsNoAttack, $01
00083A7C E103                       	smpsAlterNote       $03
00083A7E E701                       	dc.b	smpsNoAttack, $01
00083A80 E102                       	smpsAlterNote       $02
00083A82 E701                       	dc.b	smpsNoAttack, $01
00083A84 E106                       	smpsAlterNote       $06
00083A86 E701                       	dc.b	smpsNoAttack, $01
00083A88 E10C                       	smpsAlterNote       $0C
00083A8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A8E E109                       	smpsAlterNote       $09
00083A90 E701                       	dc.b	smpsNoAttack, $01
00083A92 E103                       	smpsAlterNote       $03
00083A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A98 E109                       	smpsAlterNote       $09
00083A9A E701                       	dc.b	smpsNoAttack, $01
00083A9C E10C                       	smpsAlterNote       $0C
00083A9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AA2 E106                       	smpsAlterNote       $06
00083AA4 E701                       	dc.b	smpsNoAttack, $01
00083AA6 E102                       	smpsAlterNote       $02
00083AA8 E701                       	dc.b	smpsNoAttack, $01
00083AAA E103                       	smpsAlterNote       $03
00083AAC E701                       	dc.b	smpsNoAttack, $01
00083AAE E109                       	smpsAlterNote       $09
00083AB0 E701                       	dc.b	smpsNoAttack, $01
00083AB2 E10D                       	smpsAlterNote       $0D
00083AB4 E701                       	dc.b	smpsNoAttack, $01
00083AB6 E109                       	smpsAlterNote       $09
00083AB8 E701                       	dc.b	smpsNoAttack, $01
00083ABA E106                       	smpsAlterNote       $06
00083ABC E701                       	dc.b	smpsNoAttack, $01
00083ABE E102                       	smpsAlterNote       $02
00083AC0 E701                       	dc.b	smpsNoAttack, $01
00083AC2 E106                       	smpsAlterNote       $06
00083AC4 E701                       	dc.b	smpsNoAttack, $01
00083AC6 E10C                       	smpsAlterNote       $0C
00083AC8 E701                       	dc.b	smpsNoAttack, $01
00083ACA E10D                       	smpsAlterNote       $0D
00083ACC E701                       	dc.b	smpsNoAttack, $01
00083ACE E109                       	smpsAlterNote       $09
00083AD0 E701                       	dc.b	smpsNoAttack, $01
00083AD2 E103                       	smpsAlterNote       $03
00083AD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AD8 E106                       	smpsAlterNote       $06
00083ADA E701                       	dc.b	smpsNoAttack, $01
00083ADC E10C                       	smpsAlterNote       $0C
00083ADE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AE2 E106                       	smpsAlterNote       $06
00083AE4 E701                       	dc.b	smpsNoAttack, $01
00083AE6 E103                       	smpsAlterNote       $03
00083AE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083AEC E109                       	smpsAlterNote       $09
00083AEE E701                       	dc.b	smpsNoAttack, $01
00083AF0 E10D                       	smpsAlterNote       $0D
00083AF2 E701                       	dc.b	smpsNoAttack, $01
00083AF4 E10C                       	smpsAlterNote       $0C
00083AF6 E701                       	dc.b	smpsNoAttack, $01
00083AF8 E106                       	smpsAlterNote       $06
00083AFA E701                       	dc.b	smpsNoAttack, $01
00083AFC E103                       	smpsAlterNote       $03
00083AFE 8001                       	dc.b	nRst, $01
00083B00 E109                       	smpsAlterNote       $09
00083B02 C206 8001                  	dc.b	nF5, $06, nRst, $01
00083B08 E10C                       	smpsAlterNote       $0C
00083B0A E601                       	smpsAlterVol        $01
00083B0C BB0D                       	dc.b	nBb4, $0D
00083B0E E106                       	smpsAlterNote       $06
00083B10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B14 E109                       	smpsAlterNote       $09
00083B16 E701                       	dc.b	smpsNoAttack, $01
00083B18 E10F                       	smpsAlterNote       $0F
00083B1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B1E E109                       	smpsAlterNote       $09
00083B20 E701                       	dc.b	smpsNoAttack, $01
00083B22 E106                       	smpsAlterNote       $06
00083B24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B28 E10C                       	smpsAlterNote       $0C
00083B2A E701                       	dc.b	smpsNoAttack, $01
00083B2C E110                       	smpsAlterNote       $10
00083B2E E701                       	dc.b	smpsNoAttack, $01
00083B30 E10F                       	smpsAlterNote       $0F
00083B32 E701                       	dc.b	smpsNoAttack, $01
00083B34 E109                       	smpsAlterNote       $09
00083B36 E701                       	dc.b	smpsNoAttack, $01
00083B38 E105                       	smpsAlterNote       $05
00083B3A E701                       	dc.b	smpsNoAttack, $01
00083B3C E106                       	smpsAlterNote       $06
00083B3E 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00083B42 E103                       	smpsAlterNote       $03
00083B44 E701                       	dc.b	smpsNoAttack, $01
00083B46 E1FF                       	smpsAlterNote       $FF
00083B48 E701                       	dc.b	smpsNoAttack, $01
00083B4A E103                       	smpsAlterNote       $03
00083B4C E701                       	dc.b	smpsNoAttack, $01
00083B4E E106                       	smpsAlterNote       $06
00083B50 E701                       	dc.b	smpsNoAttack, $01
00083B52 E10A                       	smpsAlterNote       $0A
00083B54 E701                       	dc.b	smpsNoAttack, $01
00083B56 E106                       	smpsAlterNote       $06
00083B58 E701                       	dc.b	smpsNoAttack, $01
00083B5A E100                       	smpsAlterNote       $00
00083B5C E701                       	dc.b	smpsNoAttack, $01
00083B5E E1FF                       	smpsAlterNote       $FF
00083B60 E701                       	dc.b	smpsNoAttack, $01
00083B62 E103                       	smpsAlterNote       $03
00083B64 E701                       	dc.b	smpsNoAttack, $01
00083B66 E109                       	smpsAlterNote       $09
00083B68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B6C E106                       	smpsAlterNote       $06
00083B6E E701                       	dc.b	smpsNoAttack, $01
00083B70 E100                       	smpsAlterNote       $00
00083B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B76 E107                       	smpsAlterNote       $07
00083B78 BF0E                       	dc.b	nD5, $0E
00083B7A E101                       	smpsAlterNote       $01
00083B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B80 E107                       	smpsAlterNote       $07
00083B82 E701                       	dc.b	smpsNoAttack, $01
00083B84 E10A                       	smpsAlterNote       $0A
00083B86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B8A E104                       	smpsAlterNote       $04
00083B8C E701                       	dc.b	smpsNoAttack, $01
00083B8E E100                       	smpsAlterNote       $00
00083B90 E701                       	dc.b	smpsNoAttack, $01
00083B92 E101                       	smpsAlterNote       $01
00083B94 E701                       	dc.b	smpsNoAttack, $01
00083B96 E107                       	smpsAlterNote       $07
00083B98 E701                       	dc.b	smpsNoAttack, $01
00083B9A E10B                       	smpsAlterNote       $0B
00083B9C E701                       	dc.b	smpsNoAttack, $01
00083B9E E107                       	smpsAlterNote       $07
00083BA0 E701                       	dc.b	smpsNoAttack, $01
00083BA2 E104                       	smpsAlterNote       $04
00083BA4 E701                       	dc.b	smpsNoAttack, $01
00083BA6 E100                       	smpsAlterNote       $00
00083BA8 E701                       	dc.b	smpsNoAttack, $01
00083BAA E101                       	smpsAlterNote       $01
00083BAC 8001                       	dc.b	nRst, $01
00083BAE E108                       	smpsAlterNote       $08
00083BB0 C10C                       	dc.b	nE5, $0C
00083BB2 E109                       	smpsAlterNote       $09
00083BB4 C201 8001                  	dc.b	nF5, $01, nRst, $01
00083BB8 E10A                       	smpsAlterNote       $0A
00083BBA 8001                       	dc.b	nRst, $01
00083BBC E109                       	smpsAlterNote       $09
00083BBE C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00083BC2 E106                       	smpsAlterNote       $06
00083BC4 E701                       	dc.b	smpsNoAttack, $01
00083BC6 E102                       	smpsAlterNote       $02
00083BC8 E701                       	dc.b	smpsNoAttack, $01
00083BCA E103                       	smpsAlterNote       $03
00083BCC E701                       	dc.b	smpsNoAttack, $01
00083BCE E109                       	smpsAlterNote       $09
00083BD0 E701                       	dc.b	smpsNoAttack, $01
00083BD2 E10D                       	smpsAlterNote       $0D
00083BD4 E701                       	dc.b	smpsNoAttack, $01
00083BD6 E109                       	smpsAlterNote       $09
00083BD8 E701                       	dc.b	smpsNoAttack, $01
00083BDA E106                       	smpsAlterNote       $06
00083BDC E701                       	dc.b	smpsNoAttack, $01
00083BDE E102                       	smpsAlterNote       $02
00083BE0 E701                       	dc.b	smpsNoAttack, $01
00083BE2 E106                       	smpsAlterNote       $06
00083BE4 E701                       	dc.b	smpsNoAttack, $01
00083BE6 E10C                       	smpsAlterNote       $0C
00083BE8 E701                       	dc.b	smpsNoAttack, $01
00083BEA E10D                       	smpsAlterNote       $0D
00083BEC E701                       	dc.b	smpsNoAttack, $01
00083BEE E109                       	smpsAlterNote       $09
00083BF0 C40D                       	dc.b	nG5, $0D
00083BF2 E106                       	smpsAlterNote       $06
00083BF4 E701                       	dc.b	smpsNoAttack, $01
00083BF6 E102                       	smpsAlterNote       $02
00083BF8 E701                       	dc.b	smpsNoAttack, $01
00083BFA E103                       	smpsAlterNote       $03
00083BFC E701                       	dc.b	smpsNoAttack, $01
00083BFE E109                       	smpsAlterNote       $09
00083C00 E701                       	dc.b	smpsNoAttack, $01
00083C02 E108                       	smpsAlterNote       $08
00083C04 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00083C10 E109                       	smpsAlterNote       $09
00083C12 C20D                       	dc.b	nF5, $0D
00083C14 E106                       	smpsAlterNote       $06
00083C16 E701                       	dc.b	smpsNoAttack, $01
00083C18 E102                       	smpsAlterNote       $02
00083C1A E701                       	dc.b	smpsNoAttack, $01
00083C1C E106                       	smpsAlterNote       $06
00083C1E E701                       	dc.b	smpsNoAttack, $01
00083C20 E109                       	smpsAlterNote       $09
00083C22 E701                       	dc.b	smpsNoAttack, $01
00083C24 E10D                       	smpsAlterNote       $0D
00083C26 E701                       	dc.b	smpsNoAttack, $01
00083C28 E109                       	smpsAlterNote       $09
00083C2A E701                       	dc.b	smpsNoAttack, $01
00083C2C E103                       	smpsAlterNote       $03
00083C2E E701                       	dc.b	smpsNoAttack, $01
00083C30 E102                       	smpsAlterNote       $02
00083C32 E701                       	dc.b	smpsNoAttack, $01
00083C34 E106                       	smpsAlterNote       $06
00083C36 E701                       	dc.b	smpsNoAttack, $01
00083C38 E10C                       	smpsAlterNote       $0C
00083C3A E701                       	dc.b	smpsNoAttack, $01
00083C3C E10D                       	smpsAlterNote       $0D
00083C3E 8001                       	dc.b	nRst, $01
00083C40 E112                       	smpsAlterNote       $12
00083C42 C401                       	dc.b	nG5, $01
00083C44 E1EB                       	smpsAlterNote       $EB
00083C46 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00083C49 E1FD                       	smpsAlterNote       $FD
00083C4B E701                       	dc.b	smpsNoAttack, $01
00083C4D E10F                       	smpsAlterNote       $0F
00083C4F E701                       	dc.b	smpsNoAttack, $01
00083C51 E118                       	smpsAlterNote       $18
00083C53 E701                       	dc.b	smpsNoAttack, $01
00083C55 E1ED                       	smpsAlterNote       $ED
00083C57 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00083C5A E1FF                       	smpsAlterNote       $FF
00083C5C E701                       	dc.b	smpsNoAttack, $01
00083C5E E10B                       	smpsAlterNote       $0B
00083C60 E703                       	dc.b	smpsNoAttack, $03
00083C62 E109                       	smpsAlterNote       $09
00083C64 C407                       	dc.b	nG5, $07
00083C66 E108                       	smpsAlterNote       $08
00083C68 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00083C74 E109                       	smpsAlterNote       $09
00083C76 C20D                       	dc.b	nF5, $0D
00083C78 E103                       	smpsAlterNote       $03
00083C7A E701                       	dc.b	smpsNoAttack, $01
00083C7C E102                       	smpsAlterNote       $02
00083C7E E701                       	dc.b	smpsNoAttack, $01
00083C80 E106                       	smpsAlterNote       $06
00083C82 E701                       	dc.b	smpsNoAttack, $01
00083C84 E10C                       	smpsAlterNote       $0C
00083C86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C8A E109                       	smpsAlterNote       $09
00083C8C E701                       	dc.b	smpsNoAttack, $01
00083C8E E103                       	smpsAlterNote       $03
00083C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C94 E109                       	smpsAlterNote       $09
00083C96 E701                       	dc.b	smpsNoAttack, $01
00083C98 E10C                       	smpsAlterNote       $0C
00083C9A E701                       	dc.b	smpsNoAttack, $01
00083C9C E10D                       	smpsAlterNote       $0D
00083C9E 8001                       	dc.b	nRst, $01
00083CA0 E10B                       	smpsAlterNote       $0B
00083CA2 C609 8001                  	dc.b	nA5, $09, nRst, $01
00083CA6 E109                       	smpsAlterNote       $09
00083CA8 B806 8001                  	dc.b	nG4, $06, nRst, $01
00083CAC E108                       	smpsAlterNote       $08
00083CAE C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00083CBA 8001                       	dc.b	nRst, $01
00083CBC E109                       	smpsAlterNote       $09
00083CBE C20D                       	dc.b	nF5, $0D
00083CC0 E103                       	smpsAlterNote       $03
00083CC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CC6 E106                       	smpsAlterNote       $06
00083CC8 E701                       	dc.b	smpsNoAttack, $01
00083CCA E10C                       	smpsAlterNote       $0C
00083CCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CD0 E106                       	smpsAlterNote       $06
00083CD2 E701                       	dc.b	smpsNoAttack, $01
00083CD4 E103                       	smpsAlterNote       $03
00083CD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CDA E109                       	smpsAlterNote       $09
00083CDC E701                       	dc.b	smpsNoAttack, $01
00083CDE E10D                       	smpsAlterNote       $0D
00083CE0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083CE6 E108                       	smpsAlterNote       $08
00083CE8 E6FF                       	smpsAlterVol        $FF
00083CEA A806                       	dc.b	nEb3, $06
00083CEC E10C                       	smpsAlterNote       $0C
00083CEE A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083CF2 E108                       	smpsAlterNote       $08
00083CF4 A803                       	dc.b	nEb3, $03
00083CF6 E109                       	smpsAlterNote       $09
00083CF8 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00083CFC E10C                       	smpsAlterNote       $0C
00083CFE AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00083D08 E109                       	smpsAlterNote       $09
00083D0A E602                       	smpsAlterVol        $02
00083D0C B604                       	dc.b	nF4, $04
00083D0E E602                       	smpsAlterVol        $02
00083D10 F6F1 AA                    	smpsJump            music84_Jump02
00083D13                            
00083D13                            ; FM4 Data
00083D13                            music84_FM4:
00083D15 E040                       	smpsPan             panRight, $00
00083D17 8003                       	dc.b	nRst, $03
00083D19 E10F                       	smpsAlterNote       $0F
00083D1B C603 8008                  	dc.b	nA5, $03, nRst, $08
00083D1F E10D                       	smpsAlterNote       $0D
00083D21 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00083D25 E10C                       	smpsAlterNote       $0C
00083D27 C103 8004                  	dc.b	nE5, $03, nRst, $04
00083D2D E6FE                       	smpsAlterVol        $FE
00083D2F E110                       	smpsAlterNote       $10
00083D31 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00083D35 E10F                       	smpsAlterNote       $0F
00083D37 C602 8001                  	dc.b	nA5, $02, nRst, $01
00083D3B E10D                       	smpsAlterNote       $0D
00083D3D C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00083D46 E10C                       	smpsAlterNote       $0C
00083D48 C103                       	dc.b	nE5, $03
00083D4A E10A                       	smpsAlterNote       $0A
00083D4C BD03 8001                  	dc.b	nC5, $03, nRst, $01
00083D52 03                         	dc.b	$03
00083D53                            
00083D53                            music84_Jump01:
00083D53 E10B                       	smpsAlterNote       $0B
00083D55 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00083D59 E10C                       	smpsAlterNote       $0C
00083D5B C102 8001                  	dc.b	nE5, $02, nRst, $01
00083D5F E10D                       	smpsAlterNote       $0D
00083D61 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00083D6B E10B                       	smpsAlterNote       $0B
00083D6D BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00083D71 E107                       	smpsAlterNote       $07
00083D73 E701                       	dc.b	smpsNoAttack, $01
00083D75 E103                       	smpsAlterNote       $03
00083D77 E701                       	dc.b	smpsNoAttack, $01
00083D79 E104                       	smpsAlterNote       $04
00083D7B E701                       	dc.b	smpsNoAttack, $01
00083D7D E10A                       	smpsAlterNote       $0A
00083D7F E701                       	dc.b	smpsNoAttack, $01
00083D81 E10E                       	smpsAlterNote       $0E
00083D83 E701                       	dc.b	smpsNoAttack, $01
00083D85 E10A                       	smpsAlterNote       $0A
00083D87 E701                       	dc.b	smpsNoAttack, $01
00083D89 E107                       	smpsAlterNote       $07
00083D8B E701                       	dc.b	smpsNoAttack, $01
00083D8D E104                       	smpsAlterNote       $04
00083D8F 8001                       	dc.b	nRst, $01
00083D91 E110                       	smpsAlterNote       $10
00083D93 C703                       	dc.b	nBb5, $03
00083D95 E10F                       	smpsAlterNote       $0F
00083D97 C603 8001                  	dc.b	nA5, $03, nRst, $01
00083D9B E10D                       	smpsAlterNote       $0D
00083D9D C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00083DA3 E10C                       	smpsAlterNote       $0C
00083DA5 E701                       	dc.b	smpsNoAttack, $01
00083DA7 E108                       	smpsAlterNote       $08
00083DA9 E701                       	dc.b	smpsNoAttack, $01
00083DAB E10C                       	smpsAlterNote       $0C
00083DAD E701                       	dc.b	smpsNoAttack, $01
00083DAF E10F                       	smpsAlterNote       $0F
00083DB1 E701                       	dc.b	smpsNoAttack, $01
00083DB3 E113                       	smpsAlterNote       $13
00083DB5 E701                       	dc.b	smpsNoAttack, $01
00083DB7 E10F                       	smpsAlterNote       $0F
00083DB9 E701                       	dc.b	smpsNoAttack, $01
00083DBB E109                       	smpsAlterNote       $09
00083DBD E701                       	dc.b	smpsNoAttack, $01
00083DBF E108                       	smpsAlterNote       $08
00083DC1 E701                       	dc.b	smpsNoAttack, $01
00083DC3 E10C                       	smpsAlterNote       $0C
00083DC5 E701                       	dc.b	smpsNoAttack, $01
00083DC7 E112                       	smpsAlterNote       $12
00083DC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DCD E10C                       	smpsAlterNote       $0C
00083DCF E701                       	dc.b	smpsNoAttack, $01
00083DD1 E109                       	smpsAlterNote       $09
00083DD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DD7 E10F                       	smpsAlterNote       $0F
00083DD9 E701                       	dc.b	smpsNoAttack, $01
00083DDB E113                       	smpsAlterNote       $13
00083DDD E701                       	dc.b	smpsNoAttack, $01
00083DDF E112                       	smpsAlterNote       $12
00083DE1 E701                       	dc.b	smpsNoAttack, $01
00083DE3 E10C                       	smpsAlterNote       $0C
00083DE5 E701                       	dc.b	smpsNoAttack, $01
00083DE7 E108                       	smpsAlterNote       $08
00083DE9 E701                       	dc.b	smpsNoAttack, $01
00083DEB E10C                       	smpsAlterNote       $0C
00083DED E701                       	dc.b	smpsNoAttack, $01
00083DEF E10F                       	smpsAlterNote       $0F
00083DF1 E701                       	dc.b	smpsNoAttack, $01
00083DF3 E113                       	smpsAlterNote       $13
00083DF5 E701                       	dc.b	smpsNoAttack, $01
00083DF7 E10F                       	smpsAlterNote       $0F
00083DF9 E701                       	dc.b	smpsNoAttack, $01
00083DFB E109                       	smpsAlterNote       $09
00083DFD E701                       	dc.b	smpsNoAttack, $01
00083DFF E108                       	smpsAlterNote       $08
00083E01 E701                       	dc.b	smpsNoAttack, $01
00083E03 E10C                       	smpsAlterNote       $0C
00083E05 E701                       	dc.b	smpsNoAttack, $01
00083E07 E112                       	smpsAlterNote       $12
00083E09 E701                       	dc.b	smpsNoAttack, $01
00083E0B E113                       	smpsAlterNote       $13
00083E0D 800F                       	dc.b	nRst, $0F
00083E0F E10B                       	smpsAlterNote       $0B
00083E11 BF03                       	dc.b	nD5, $03
00083E13 E10C                       	smpsAlterNote       $0C
00083E15 C103 8001                  	dc.b	nE5, $03, nRst, $01
00083E19 E10D                       	smpsAlterNote       $0D
00083E1B C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00083E23 E10B                       	smpsAlterNote       $0B
00083E25 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00083E2F E110                       	smpsAlterNote       $10
00083E31 C704                       	dc.b	nBb5, $04
00083E33 E10F                       	smpsAlterNote       $0F
00083E35 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083E39 E10D                       	smpsAlterNote       $0D
00083E3B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00083E41 E109                       	smpsAlterNote       $09
00083E43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E47 E10F                       	smpsAlterNote       $0F
00083E49 E701                       	dc.b	smpsNoAttack, $01
00083E4B E112                       	smpsAlterNote       $12
00083E4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E51 E10C                       	smpsAlterNote       $0C
00083E53 E701                       	dc.b	smpsNoAttack, $01
00083E55 E108                       	smpsAlterNote       $08
00083E57 E701                       	dc.b	smpsNoAttack, $01
00083E59 E109                       	smpsAlterNote       $09
00083E5B E701                       	dc.b	smpsNoAttack, $01
00083E5D E10F                       	smpsAlterNote       $0F
00083E5F E701                       	dc.b	smpsNoAttack, $01
00083E61 E113                       	smpsAlterNote       $13
00083E63 E701                       	dc.b	smpsNoAttack, $01
00083E65 E10F                       	smpsAlterNote       $0F
00083E67 E701                       	dc.b	smpsNoAttack, $01
00083E69 E10C                       	smpsAlterNote       $0C
00083E6B E701                       	dc.b	smpsNoAttack, $01
00083E6D E108                       	smpsAlterNote       $08
00083E6F E701                       	dc.b	smpsNoAttack, $01
00083E71 E10C                       	smpsAlterNote       $0C
00083E73 E701                       	dc.b	smpsNoAttack, $01
00083E75 E112                       	smpsAlterNote       $12
00083E77 E701                       	dc.b	smpsNoAttack, $01
00083E79 E113                       	smpsAlterNote       $13
00083E7B E701                       	dc.b	smpsNoAttack, $01
00083E7D E10F                       	smpsAlterNote       $0F
00083E7F E701                       	dc.b	smpsNoAttack, $01
00083E81 E109                       	smpsAlterNote       $09
00083E83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E87 E10C                       	smpsAlterNote       $0C
00083E89 E701                       	dc.b	smpsNoAttack, $01
00083E8B E112                       	smpsAlterNote       $12
00083E8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E91 E10C                       	smpsAlterNote       $0C
00083E93 E701                       	dc.b	smpsNoAttack, $01
00083E95 E109                       	smpsAlterNote       $09
00083E97 E701                       	dc.b	smpsNoAttack, $01
00083E99 E10D                       	smpsAlterNote       $0D
00083E9B C401 8001                  	dc.b	nG5, $01, nRst, $01
00083E9F E10F                       	smpsAlterNote       $0F
00083EA1 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00083EAB E10D                       	smpsAlterNote       $0D
00083EAD C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00083EB3 E10B                       	smpsAlterNote       $0B
00083EB5 BF0D                       	dc.b	nD5, $0D
00083EB7 E108                       	smpsAlterNote       $08
00083EB9 E701                       	dc.b	smpsNoAttack, $01
00083EBB E104                       	smpsAlterNote       $04
00083EBD E701                       	dc.b	smpsNoAttack, $01
00083EBF E108                       	smpsAlterNote       $08
00083EC1 E701                       	dc.b	smpsNoAttack, $01
00083EC3 E10B                       	smpsAlterNote       $0B
00083EC5 E701                       	dc.b	smpsNoAttack, $01
00083EC7 E10F                       	smpsAlterNote       $0F
00083EC9 E701                       	dc.b	smpsNoAttack, $01
00083ECB E10B                       	smpsAlterNote       $0B
00083ECD E701                       	dc.b	smpsNoAttack, $01
00083ECF E105                       	smpsAlterNote       $05
00083ED1 E701                       	dc.b	smpsNoAttack, $01
00083ED3 E104                       	smpsAlterNote       $04
00083ED5 E701                       	dc.b	smpsNoAttack, $01
00083ED7 E108                       	smpsAlterNote       $08
00083ED9 E701                       	dc.b	smpsNoAttack, $01
00083EDB E10E                       	smpsAlterNote       $0E
00083EDD E701                       	dc.b	smpsNoAttack, $01
00083EDF E10F                       	smpsAlterNote       $0F
00083EE1 8001                       	dc.b	nRst, $01
00083EE3 E10C                       	smpsAlterNote       $0C
00083EE5 C101                       	dc.b	nE5, $01
00083EE7 E10D                       	smpsAlterNote       $0D
00083EE9 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00083EEF E10F                       	smpsAlterNote       $0F
00083EF1 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083EF5 E10C                       	smpsAlterNote       $0C
00083EF7 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00083EFB E10D                       	smpsAlterNote       $0D
00083EFD CE06 8001                  	dc.b	nF6, $06, nRst, $01
00083F01 E10C                       	smpsAlterNote       $0C
00083F03 CD03                       	dc.b	nE6, $03
00083F05 E10A                       	smpsAlterNote       $0A
00083F07 C903 8001                  	dc.b	nC6, $03, nRst, $01
00083F0B E10D                       	smpsAlterNote       $0D
00083F0D C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00083F15 E109                       	smpsAlterNote       $09
00083F17 E701                       	dc.b	smpsNoAttack, $01
00083F19 E10D                       	smpsAlterNote       $0D
00083F1B E701                       	dc.b	smpsNoAttack, $01
00083F1D E110                       	smpsAlterNote       $10
00083F1F E701                       	dc.b	smpsNoAttack, $01
00083F21 E114                       	smpsAlterNote       $14
00083F23 E701                       	dc.b	smpsNoAttack, $01
00083F25 E110                       	smpsAlterNote       $10
00083F27 E701                       	dc.b	smpsNoAttack, $01
00083F29 E10A                       	smpsAlterNote       $0A
00083F2B E701                       	dc.b	smpsNoAttack, $01
00083F2D E109                       	smpsAlterNote       $09
00083F2F E701                       	dc.b	smpsNoAttack, $01
00083F31 E10D                       	smpsAlterNote       $0D
00083F33 E701                       	dc.b	smpsNoAttack, $01
00083F35 E113                       	smpsAlterNote       $13
00083F37 E701                       	dc.b	smpsNoAttack, $01
00083F39 E114                       	smpsAlterNote       $14
00083F3B 8001                       	dc.b	nRst, $01
00083F3D E10F                       	smpsAlterNote       $0F
00083F3F C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00083F45 E10C                       	smpsAlterNote       $0C
00083F47 E701                       	dc.b	smpsNoAttack, $01
00083F49 E108                       	smpsAlterNote       $08
00083F4B E701                       	dc.b	smpsNoAttack, $01
00083F4D E10C                       	smpsAlterNote       $0C
00083F4F E701                       	dc.b	smpsNoAttack, $01
00083F51 E112                       	smpsAlterNote       $12
00083F53 E701                       	dc.b	smpsNoAttack, $01
00083F55 E113                       	smpsAlterNote       $13
00083F57 E701                       	dc.b	smpsNoAttack, $01
00083F59 E10F                       	smpsAlterNote       $0F
00083F5B E701                       	dc.b	smpsNoAttack, $01
00083F5D E109                       	smpsAlterNote       $09
00083F5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F63 E10C                       	smpsAlterNote       $0C
00083F65 E701                       	dc.b	smpsNoAttack, $01
00083F67 E112                       	smpsAlterNote       $12
00083F69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F6D E10C                       	smpsAlterNote       $0C
00083F6F E701                       	dc.b	smpsNoAttack, $01
00083F71 E109                       	smpsAlterNote       $09
00083F73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F77 E10F                       	smpsAlterNote       $0F
00083F79 E701                       	dc.b	smpsNoAttack, $01
00083F7B E113                       	smpsAlterNote       $13
00083F7D E701                       	dc.b	smpsNoAttack, $01
00083F7F E112                       	smpsAlterNote       $12
00083F81 E701                       	dc.b	smpsNoAttack, $01
00083F83 E10C                       	smpsAlterNote       $0C
00083F85 E701                       	dc.b	smpsNoAttack, $01
00083F87 E108                       	smpsAlterNote       $08
00083F89 E701                       	dc.b	smpsNoAttack, $01
00083F8B E10C                       	smpsAlterNote       $0C
00083F8D E701                       	dc.b	smpsNoAttack, $01
00083F8F E10F                       	smpsAlterNote       $0F
00083F91 E701                       	dc.b	smpsNoAttack, $01
00083F93 E113                       	smpsAlterNote       $13
00083F95 E701                       	dc.b	smpsNoAttack, $01
00083F97 E10F                       	smpsAlterNote       $0F
00083F99 E701                       	dc.b	smpsNoAttack, $01
00083F9B E109                       	smpsAlterNote       $09
00083F9D E701                       	dc.b	smpsNoAttack, $01
00083F9F E108                       	smpsAlterNote       $08
00083FA1 E701                       	dc.b	smpsNoAttack, $01
00083FA3 E10C                       	smpsAlterNote       $0C
00083FA5 E701                       	dc.b	smpsNoAttack, $01
00083FA7 E112                       	smpsAlterNote       $12
00083FA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FAD E10F                       	smpsAlterNote       $0F
00083FAF E701                       	dc.b	smpsNoAttack, $01
00083FB1 E109                       	smpsAlterNote       $09
00083FB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FB7 E10F                       	smpsAlterNote       $0F
00083FB9 E701                       	dc.b	smpsNoAttack, $01
00083FBB E113                       	smpsAlterNote       $13
00083FBD E701                       	dc.b	smpsNoAttack, $01
00083FBF E112                       	smpsAlterNote       $12
00083FC1 E701                       	dc.b	smpsNoAttack, $01
00083FC3 E10C                       	smpsAlterNote       $0C
00083FC5 E701                       	dc.b	smpsNoAttack, $01
00083FC7 E108                       	smpsAlterNote       $08
00083FC9 E701                       	dc.b	smpsNoAttack, $01
00083FCB E10C                       	smpsAlterNote       $0C
00083FCD E701                       	dc.b	smpsNoAttack, $01
00083FCF E10F                       	smpsAlterNote       $0F
00083FD1 E701                       	dc.b	smpsNoAttack, $01
00083FD3 E113                       	smpsAlterNote       $13
00083FD5 E701                       	dc.b	smpsNoAttack, $01
00083FD7 E10F                       	smpsAlterNote       $0F
00083FD9 E701                       	dc.b	smpsNoAttack, $01
00083FDB E109                       	smpsAlterNote       $09
00083FDD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083FE1 E10F                       	smpsAlterNote       $0F
00083FE3 C60D                       	dc.b	nA5, $0D
00083FE5 E109                       	smpsAlterNote       $09
00083FE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FEB E10C                       	smpsAlterNote       $0C
00083FED E701                       	dc.b	smpsNoAttack, $01
00083FEF E112                       	smpsAlterNote       $12
00083FF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FF5 E10C                       	smpsAlterNote       $0C
00083FF7 E701                       	dc.b	smpsNoAttack, $01
00083FF9 E109                       	smpsAlterNote       $09
00083FFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FFF E10F                       	smpsAlterNote       $0F
00084001 E701                       	dc.b	smpsNoAttack, $01
00084003 E113                       	smpsAlterNote       $13
00084005 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008400B E10D                       	smpsAlterNote       $0D
0008400D C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00084015 E10C                       	smpsAlterNote       $0C
00084017 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008401D E6FF                       	smpsAlterVol        $FF
0008401F E10B                       	smpsAlterNote       $0B
00084021 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084025 E10C                       	smpsAlterNote       $0C
00084027 C103                       	dc.b	nE5, $03
00084029 E10D                       	smpsAlterNote       $0D
0008402B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00084035 E10B                       	smpsAlterNote       $0B
00084037 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008403B E107                       	smpsAlterNote       $07
0008403D E701                       	dc.b	smpsNoAttack, $01
0008403F E104                       	smpsAlterNote       $04
00084041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084045 E10A                       	smpsAlterNote       $0A
00084047 E701                       	dc.b	smpsNoAttack, $01
00084049 E10D                       	smpsAlterNote       $0D
0008404B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008404F E107                       	smpsAlterNote       $07
00084051 E701                       	dc.b	smpsNoAttack, $01
00084053 E104                       	smpsAlterNote       $04
00084055 8001                       	dc.b	nRst, $01
00084057 E110                       	smpsAlterNote       $10
00084059 C703                       	dc.b	nBb5, $03
0008405B E10F                       	smpsAlterNote       $0F
0008405D C603 8001                  	dc.b	nA5, $03, nRst, $01
00084061 E10D                       	smpsAlterNote       $0D
00084063 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00084067 E10C                       	smpsAlterNote       $0C
00084069 E701                       	dc.b	smpsNoAttack, $01
0008406B E108                       	smpsAlterNote       $08
0008406D E701                       	dc.b	smpsNoAttack, $01
0008406F E109                       	smpsAlterNote       $09
00084071 E701                       	dc.b	smpsNoAttack, $01
00084073 E10F                       	smpsAlterNote       $0F
00084075 E701                       	dc.b	smpsNoAttack, $01
00084077 E113                       	smpsAlterNote       $13
00084079 E701                       	dc.b	smpsNoAttack, $01
0008407B E10F                       	smpsAlterNote       $0F
0008407D E701                       	dc.b	smpsNoAttack, $01
0008407F E10C                       	smpsAlterNote       $0C
00084081 E701                       	dc.b	smpsNoAttack, $01
00084083 E108                       	smpsAlterNote       $08
00084085 E701                       	dc.b	smpsNoAttack, $01
00084087 E10C                       	smpsAlterNote       $0C
00084089 E701                       	dc.b	smpsNoAttack, $01
0008408B E112                       	smpsAlterNote       $12
0008408D E701                       	dc.b	smpsNoAttack, $01
0008408F E113                       	smpsAlterNote       $13
00084091 E701                       	dc.b	smpsNoAttack, $01
00084093 E10F                       	smpsAlterNote       $0F
00084095 E701                       	dc.b	smpsNoAttack, $01
00084097 E109                       	smpsAlterNote       $09
00084099 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008409D E10C                       	smpsAlterNote       $0C
0008409F E701                       	dc.b	smpsNoAttack, $01
000840A1 E112                       	smpsAlterNote       $12
000840A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840A7 E10C                       	smpsAlterNote       $0C
000840A9 E701                       	dc.b	smpsNoAttack, $01
000840AB E109                       	smpsAlterNote       $09
000840AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840B1 E10F                       	smpsAlterNote       $0F
000840B3 E701                       	dc.b	smpsNoAttack, $01
000840B5 E113                       	smpsAlterNote       $13
000840B7 E701                       	dc.b	smpsNoAttack, $01
000840B9 E112                       	smpsAlterNote       $12
000840BB E701                       	dc.b	smpsNoAttack, $01
000840BD E10C                       	smpsAlterNote       $0C
000840BF E701                       	dc.b	smpsNoAttack, $01
000840C1 E108                       	smpsAlterNote       $08
000840C3 E701                       	dc.b	smpsNoAttack, $01
000840C5 E10C                       	smpsAlterNote       $0C
000840C7 E701                       	dc.b	smpsNoAttack, $01
000840C9 E10F                       	smpsAlterNote       $0F
000840CB E701                       	dc.b	smpsNoAttack, $01
000840CD E113                       	smpsAlterNote       $13
000840CF E701                       	dc.b	smpsNoAttack, $01
000840D1 E10F                       	smpsAlterNote       $0F
000840D3 BA03 8001                  	dc.b	nA4, $03, nRst, $01
000840D7 E110                       	smpsAlterNote       $10
000840D9 BB03                       	dc.b	nBb4, $03
000840DB E10F                       	smpsAlterNote       $0F
000840DD BA06 8001                  	dc.b	nA4, $06, nRst, $01
000840E1 E10B                       	smpsAlterNote       $0B
000840E3 BF03                       	dc.b	nD5, $03
000840E5 E10C                       	smpsAlterNote       $0C
000840E7 C103 8001                  	dc.b	nE5, $03, nRst, $01
000840EB E10D                       	smpsAlterNote       $0D
000840ED C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000840F7 E10B                       	smpsAlterNote       $0B
000840F9 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00084105 E110                       	smpsAlterNote       $10
00084107 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008410B E10F                       	smpsAlterNote       $0F
0008410D C604                       	dc.b	nA5, $04
0008410F E10D                       	smpsAlterNote       $0D
00084111 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00084117 E109                       	smpsAlterNote       $09
00084119 E701                       	dc.b	smpsNoAttack, $01
0008411B E108                       	smpsAlterNote       $08
0008411D E701                       	dc.b	smpsNoAttack, $01
0008411F E10C                       	smpsAlterNote       $0C
00084121 E701                       	dc.b	smpsNoAttack, $01
00084123 E112                       	smpsAlterNote       $12
00084125 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084129 E10F                       	smpsAlterNote       $0F
0008412B E701                       	dc.b	smpsNoAttack, $01
0008412D E109                       	smpsAlterNote       $09
0008412F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084133 E10F                       	smpsAlterNote       $0F
00084135 E701                       	dc.b	smpsNoAttack, $01
00084137 E112                       	smpsAlterNote       $12
00084139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008413D E10C                       	smpsAlterNote       $0C
0008413F E701                       	dc.b	smpsNoAttack, $01
00084141 E108                       	smpsAlterNote       $08
00084143 E701                       	dc.b	smpsNoAttack, $01
00084145 E109                       	smpsAlterNote       $09
00084147 E701                       	dc.b	smpsNoAttack, $01
00084149 E10F                       	smpsAlterNote       $0F
0008414B E701                       	dc.b	smpsNoAttack, $01
0008414D E113                       	smpsAlterNote       $13
0008414F E701                       	dc.b	smpsNoAttack, $01
00084151 E10F                       	smpsAlterNote       $0F
00084153 E701                       	dc.b	smpsNoAttack, $01
00084155 E10C                       	smpsAlterNote       $0C
00084157 E701                       	dc.b	smpsNoAttack, $01
00084159 E108                       	smpsAlterNote       $08
0008415B E701                       	dc.b	smpsNoAttack, $01
0008415D E10C                       	smpsAlterNote       $0C
0008415F E701                       	dc.b	smpsNoAttack, $01
00084161 E112                       	smpsAlterNote       $12
00084163 E701                       	dc.b	smpsNoAttack, $01
00084165 E113                       	smpsAlterNote       $13
00084167 E701                       	dc.b	smpsNoAttack, $01
00084169 E10F                       	smpsAlterNote       $0F
0008416B E701                       	dc.b	smpsNoAttack, $01
0008416D E109                       	smpsAlterNote       $09
0008416F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084173 E10C                       	smpsAlterNote       $0C
00084175 E701                       	dc.b	smpsNoAttack, $01
00084177 E112                       	smpsAlterNote       $12
00084179 E701                       	dc.b	smpsNoAttack, $01
0008417B E113                       	smpsAlterNote       $13
0008417D 8001                       	dc.b	nRst, $01
0008417F E10F                       	smpsAlterNote       $0F
00084181 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008418D C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00084195 E10D                       	smpsAlterNote       $0D
00084197 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008419D E10B                       	smpsAlterNote       $0B
0008419F BF0D                       	dc.b	nD5, $0D
000841A1 E108                       	smpsAlterNote       $08
000841A3 E701                       	dc.b	smpsNoAttack, $01
000841A5 E104                       	smpsAlterNote       $04
000841A7 E701                       	dc.b	smpsNoAttack, $01
000841A9 E105                       	smpsAlterNote       $05
000841AB E701                       	dc.b	smpsNoAttack, $01
000841AD E10B                       	smpsAlterNote       $0B
000841AF E701                       	dc.b	smpsNoAttack, $01
000841B1 E10F                       	smpsAlterNote       $0F
000841B3 E701                       	dc.b	smpsNoAttack, $01
000841B5 E10B                       	smpsAlterNote       $0B
000841B7 E701                       	dc.b	smpsNoAttack, $01
000841B9 E108                       	smpsAlterNote       $08
000841BB E701                       	dc.b	smpsNoAttack, $01
000841BD E104                       	smpsAlterNote       $04
000841BF E701                       	dc.b	smpsNoAttack, $01
000841C1 E108                       	smpsAlterNote       $08
000841C3 E701                       	dc.b	smpsNoAttack, $01
000841C5 E10E                       	smpsAlterNote       $0E
000841C7 E701                       	dc.b	smpsNoAttack, $01
000841C9 E10F                       	smpsAlterNote       $0F
000841CB E701                       	dc.b	smpsNoAttack, $01
000841CD E10C                       	smpsAlterNote       $0C
000841CF C101                       	dc.b	nE5, $01
000841D1 E10D                       	smpsAlterNote       $0D
000841D3 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000841DB E10F                       	smpsAlterNote       $0F
000841DD C607                       	dc.b	nA5, $07
000841DF E10C                       	smpsAlterNote       $0C
000841E1 CD07                       	dc.b	nE6, $07
000841E3 E10D                       	smpsAlterNote       $0D
000841E5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000841E9 E10C                       	smpsAlterNote       $0C
000841EB CD03                       	dc.b	nE6, $03
000841ED E10A                       	smpsAlterNote       $0A
000841EF C903 8001                  	dc.b	nC6, $03, nRst, $01
000841F3 E10D                       	smpsAlterNote       $0D
000841F5 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000841FB E10A                       	smpsAlterNote       $0A
000841FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084201 E110                       	smpsAlterNote       $10
00084203 E701                       	dc.b	smpsNoAttack, $01
00084205 E114                       	smpsAlterNote       $14
00084207 E701                       	dc.b	smpsNoAttack, $01
00084209 E113                       	smpsAlterNote       $13
0008420B E701                       	dc.b	smpsNoAttack, $01
0008420D E10D                       	smpsAlterNote       $0D
0008420F E701                       	dc.b	smpsNoAttack, $01
00084211 E109                       	smpsAlterNote       $09
00084213 E701                       	dc.b	smpsNoAttack, $01
00084215 E10D                       	smpsAlterNote       $0D
00084217 E701                       	dc.b	smpsNoAttack, $01
00084219 E110                       	smpsAlterNote       $10
0008421B E701                       	dc.b	smpsNoAttack, $01
0008421D E114                       	smpsAlterNote       $14
0008421F E701                       	dc.b	smpsNoAttack, $01
00084221 E10F                       	smpsAlterNote       $0F
00084223 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00084227 E10C                       	smpsAlterNote       $0C
00084229 E701                       	dc.b	smpsNoAttack, $01
0008422B E108                       	smpsAlterNote       $08
0008422D E701                       	dc.b	smpsNoAttack, $01
0008422F E10C                       	smpsAlterNote       $0C
00084231 E701                       	dc.b	smpsNoAttack, $01
00084233 E10F                       	smpsAlterNote       $0F
00084235 E701                       	dc.b	smpsNoAttack, $01
00084237 E113                       	smpsAlterNote       $13
00084239 E701                       	dc.b	smpsNoAttack, $01
0008423B E10F                       	smpsAlterNote       $0F
0008423D E701                       	dc.b	smpsNoAttack, $01
0008423F E109                       	smpsAlterNote       $09
00084241 E701                       	dc.b	smpsNoAttack, $01
00084243 E108                       	smpsAlterNote       $08
00084245 E701                       	dc.b	smpsNoAttack, $01
00084247 E10C                       	smpsAlterNote       $0C
00084249 E701                       	dc.b	smpsNoAttack, $01
0008424B E112                       	smpsAlterNote       $12
0008424D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084251 E10F                       	smpsAlterNote       $0F
00084253 E701                       	dc.b	smpsNoAttack, $01
00084255 E109                       	smpsAlterNote       $09
00084257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008425B E10F                       	smpsAlterNote       $0F
0008425D E701                       	dc.b	smpsNoAttack, $01
0008425F E112                       	smpsAlterNote       $12
00084261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084265 E10C                       	smpsAlterNote       $0C
00084267 E701                       	dc.b	smpsNoAttack, $01
00084269 E108                       	smpsAlterNote       $08
0008426B E701                       	dc.b	smpsNoAttack, $01
0008426D E109                       	smpsAlterNote       $09
0008426F E701                       	dc.b	smpsNoAttack, $01
00084271 E10F                       	smpsAlterNote       $0F
00084273 E701                       	dc.b	smpsNoAttack, $01
00084275 E113                       	smpsAlterNote       $13
00084277 E701                       	dc.b	smpsNoAttack, $01
00084279 E10F                       	smpsAlterNote       $0F
0008427B E701                       	dc.b	smpsNoAttack, $01
0008427D E10C                       	smpsAlterNote       $0C
0008427F E701                       	dc.b	smpsNoAttack, $01
00084281 E108                       	smpsAlterNote       $08
00084283 E701                       	dc.b	smpsNoAttack, $01
00084285 E10C                       	smpsAlterNote       $0C
00084287 E701                       	dc.b	smpsNoAttack, $01
00084289 E112                       	smpsAlterNote       $12
0008428B E701                       	dc.b	smpsNoAttack, $01
0008428D E113                       	smpsAlterNote       $13
0008428F E701                       	dc.b	smpsNoAttack, $01
00084291 E10F                       	smpsAlterNote       $0F
00084293 E701                       	dc.b	smpsNoAttack, $01
00084295 E109                       	smpsAlterNote       $09
00084297 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008429B E10C                       	smpsAlterNote       $0C
0008429D E701                       	dc.b	smpsNoAttack, $01
0008429F E112                       	smpsAlterNote       $12
000842A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842A5 E10C                       	smpsAlterNote       $0C
000842A7 E701                       	dc.b	smpsNoAttack, $01
000842A9 E109                       	smpsAlterNote       $09
000842AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842AF E10F                       	smpsAlterNote       $0F
000842B1 E701                       	dc.b	smpsNoAttack, $01
000842B3 E113                       	smpsAlterNote       $13
000842B5 E701                       	dc.b	smpsNoAttack, $01
000842B7 E112                       	smpsAlterNote       $12
000842B9 E701                       	dc.b	smpsNoAttack, $01
000842BB E10C                       	smpsAlterNote       $0C
000842BD E701                       	dc.b	smpsNoAttack, $01
000842BF E109                       	smpsAlterNote       $09
000842C1 8001                       	dc.b	nRst, $01
000842C3 E10F                       	smpsAlterNote       $0F
000842C5 C60D                       	dc.b	nA5, $0D
000842C7 E10C                       	smpsAlterNote       $0C
000842C9 E701                       	dc.b	smpsNoAttack, $01
000842CB E108                       	smpsAlterNote       $08
000842CD E701                       	dc.b	smpsNoAttack, $01
000842CF E10C                       	smpsAlterNote       $0C
000842D1 E701                       	dc.b	smpsNoAttack, $01
000842D3 E112                       	smpsAlterNote       $12
000842D5 E701                       	dc.b	smpsNoAttack, $01
000842D7 E113                       	smpsAlterNote       $13
000842D9 E701                       	dc.b	smpsNoAttack, $01
000842DB E10F                       	smpsAlterNote       $0F
000842DD E701                       	dc.b	smpsNoAttack, $01
000842DF E109                       	smpsAlterNote       $09
000842E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842E5 E10C                       	smpsAlterNote       $0C
000842E7 E701                       	dc.b	smpsNoAttack, $01
000842E9 E112                       	smpsAlterNote       $12
000842EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842EF E10C                       	smpsAlterNote       $0C
000842F1 E701                       	dc.b	smpsNoAttack, $01
000842F3 E109                       	smpsAlterNote       $09
000842F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842F9 E10F                       	smpsAlterNote       $0F
000842FB E701                       	dc.b	smpsNoAttack, $01
000842FD E113                       	smpsAlterNote       $13
000842FF E701                       	dc.b	smpsNoAttack, $01
00084301 E112                       	smpsAlterNote       $12
00084303 E701                       	dc.b	smpsNoAttack, $01
00084305 E10C                       	smpsAlterNote       $0C
00084307 E701                       	dc.b	smpsNoAttack, $01
00084309 E108                       	smpsAlterNote       $08
0008430B E701                       	dc.b	smpsNoAttack, $01
0008430D E10C                       	smpsAlterNote       $0C
0008430F E701                       	dc.b	smpsNoAttack, $01
00084311 E10F                       	smpsAlterNote       $0F
00084313 E701                       	dc.b	smpsNoAttack, $01
00084315 E113                       	smpsAlterNote       $13
00084317 E701                       	dc.b	smpsNoAttack, $01
00084319 E10F                       	smpsAlterNote       $0F
0008431B E701                       	dc.b	smpsNoAttack, $01
0008431D E109                       	smpsAlterNote       $09
0008431F E701                       	dc.b	smpsNoAttack, $01
00084321 E108                       	smpsAlterNote       $08
00084323 E701                       	dc.b	smpsNoAttack, $01
00084325 E10C                       	smpsAlterNote       $0C
00084327 E701                       	dc.b	smpsNoAttack, $01
00084329 E112                       	smpsAlterNote       $12
0008432B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008432F E10F                       	smpsAlterNote       $0F
00084331 E701                       	dc.b	smpsNoAttack, $01
00084333 E109                       	smpsAlterNote       $09
00084335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084339 E10F                       	smpsAlterNote       $0F
0008433B E701                       	dc.b	smpsNoAttack, $01
0008433D E112                       	smpsAlterNote       $12
0008433F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084343 E10C                       	smpsAlterNote       $0C
00084345 E701                       	dc.b	smpsNoAttack, $01
00084347 E108                       	smpsAlterNote       $08
00084349 E701                       	dc.b	smpsNoAttack, $01
0008434B E10C                       	smpsAlterNote       $0C
0008434D E701                       	dc.b	smpsNoAttack, $01
0008434F E10F                       	smpsAlterNote       $0F
00084351 E701                       	dc.b	smpsNoAttack, $01
00084353 E113                       	smpsAlterNote       $13
00084355 E701                       	dc.b	smpsNoAttack, $01
00084357 E10F                       	smpsAlterNote       $0F
00084359 E701                       	dc.b	smpsNoAttack, $01
0008435B E109                       	smpsAlterNote       $09
0008435D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084363 E601                       	smpsAlterVol        $01
00084365 E10F                       	smpsAlterNote       $0F
00084367 C604                       	dc.b	nA5, $04
00084369 E10D                       	smpsAlterNote       $0D
0008436B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00084371 E10B                       	smpsAlterNote       $0B
00084373 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008437B E10F                       	smpsAlterNote       $0F
0008437D C604 8001                  	dc.b	nA5, $04, nRst, $01
00084381 E10D                       	smpsAlterNote       $0D
00084383 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00084389 E10C                       	smpsAlterNote       $0C
0008438B C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00084391 E10A                       	smpsAlterNote       $0A
00084393 C904 8001                  	dc.b	nC6, $04, nRst, $01
00084397 E110                       	smpsAlterNote       $10
00084399 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008439D E10F                       	smpsAlterNote       $0F
0008439F C604                       	dc.b	nA5, $04
000843A1 E10D                       	smpsAlterNote       $0D
000843A3 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000843AF E109                       	smpsAlterNote       $09
000843B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843B5 E10F                       	smpsAlterNote       $0F
000843B7 E701                       	dc.b	smpsNoAttack, $01
000843B9 E112                       	smpsAlterNote       $12
000843BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843BF E10C                       	smpsAlterNote       $0C
000843C1 E701                       	dc.b	smpsNoAttack, $01
000843C3 E108                       	smpsAlterNote       $08
000843C5 E701                       	dc.b	smpsNoAttack, $01
000843C7 E10C                       	smpsAlterNote       $0C
000843C9 E701                       	dc.b	smpsNoAttack, $01
000843CB E10F                       	smpsAlterNote       $0F
000843CD E701                       	dc.b	smpsNoAttack, $01
000843CF E113                       	smpsAlterNote       $13
000843D1 E701                       	dc.b	smpsNoAttack, $01
000843D3 E10D                       	smpsAlterNote       $0D
000843D5 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000843DB E10C                       	smpsAlterNote       $0C
000843DD C10D                       	dc.b	nE5, $0D
000843DF E109                       	smpsAlterNote       $09
000843E1 E701                       	dc.b	smpsNoAttack, $01
000843E3 E105                       	smpsAlterNote       $05
000843E5 E701                       	dc.b	smpsNoAttack, $01
000843E7 E106                       	smpsAlterNote       $06
000843E9 E701                       	dc.b	smpsNoAttack, $01
000843EB E10C                       	smpsAlterNote       $0C
000843ED E701                       	dc.b	smpsNoAttack, $01
000843EF E110                       	smpsAlterNote       $10
000843F1 E701                       	dc.b	smpsNoAttack, $01
000843F3 E10C                       	smpsAlterNote       $0C
000843F5 E701                       	dc.b	smpsNoAttack, $01
000843F7 E109                       	smpsAlterNote       $09
000843F9 E701                       	dc.b	smpsNoAttack, $01
000843FB E105                       	smpsAlterNote       $05
000843FD E701                       	dc.b	smpsNoAttack, $01
000843FF E109                       	smpsAlterNote       $09
00084401 E701                       	dc.b	smpsNoAttack, $01
00084403 E10F                       	smpsAlterNote       $0F
00084405 E701                       	dc.b	smpsNoAttack, $01
00084407 E110                       	smpsAlterNote       $10
00084409 E701                       	dc.b	smpsNoAttack, $01
0008440B E10C                       	smpsAlterNote       $0C
0008440D E701                       	dc.b	smpsNoAttack, $01
0008440F E106                       	smpsAlterNote       $06
00084411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084415 E109                       	smpsAlterNote       $09
00084417 E701                       	dc.b	smpsNoAttack, $01
00084419 E10F                       	smpsAlterNote       $0F
0008441B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008441F E109                       	smpsAlterNote       $09
00084421 E701                       	dc.b	smpsNoAttack, $01
00084423 E106                       	smpsAlterNote       $06
00084425 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084429 E10C                       	smpsAlterNote       $0C
0008442B E701                       	dc.b	smpsNoAttack, $01
0008442D E110                       	smpsAlterNote       $10
0008442F E701                       	dc.b	smpsNoAttack, $01
00084431 E10F                       	smpsAlterNote       $0F
00084433 E701                       	dc.b	smpsNoAttack, $01
00084435 E109                       	smpsAlterNote       $09
00084437 E701                       	dc.b	smpsNoAttack, $01
00084439 E105                       	smpsAlterNote       $05
0008443B E701                       	dc.b	smpsNoAttack, $01
0008443D E109                       	smpsAlterNote       $09
0008443F E701                       	dc.b	smpsNoAttack, $01
00084441 E10C                       	smpsAlterNote       $0C
00084443 E701                       	dc.b	smpsNoAttack, $01
00084445 E110                       	smpsAlterNote       $10
00084447 E701                       	dc.b	smpsNoAttack, $01
00084449 E10C                       	smpsAlterNote       $0C
0008444B E701                       	dc.b	smpsNoAttack, $01
0008444D E106                       	smpsAlterNote       $06
0008444F E701                       	dc.b	smpsNoAttack, $01
00084451 E105                       	smpsAlterNote       $05
00084453 E701                       	dc.b	smpsNoAttack, $01
00084455 E109                       	smpsAlterNote       $09
00084457 E701                       	dc.b	smpsNoAttack, $01
00084459 E10F                       	smpsAlterNote       $0F
0008445B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008445F E10C                       	smpsAlterNote       $0C
00084461 E701                       	dc.b	smpsNoAttack, $01
00084463 E106                       	smpsAlterNote       $06
00084465 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084469 E10C                       	smpsAlterNote       $0C
0008446B E701                       	dc.b	smpsNoAttack, $01
0008446D E10F                       	smpsAlterNote       $0F
0008446F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084473 E109                       	smpsAlterNote       $09
00084475 E701                       	dc.b	smpsNoAttack, $01
00084477 E105                       	smpsAlterNote       $05
00084479 E701                       	dc.b	smpsNoAttack, $01
0008447B E106                       	smpsAlterNote       $06
0008447D E701                       	dc.b	smpsNoAttack, $01
0008447F E10C                       	smpsAlterNote       $0C
00084481 E701                       	dc.b	smpsNoAttack, $01
00084483 E110                       	smpsAlterNote       $10
00084485 E701                       	dc.b	smpsNoAttack, $01
00084487 E10C                       	smpsAlterNote       $0C
00084489 E701                       	dc.b	smpsNoAttack, $01
0008448B E109                       	smpsAlterNote       $09
0008448D E701                       	dc.b	smpsNoAttack, $01
0008448F E105                       	smpsAlterNote       $05
00084491 E701                       	dc.b	smpsNoAttack, $01
00084493 E109                       	smpsAlterNote       $09
00084495 E701                       	dc.b	smpsNoAttack, $01
00084497 E10F                       	smpsAlterNote       $0F
00084499 E701                       	dc.b	smpsNoAttack, $01
0008449B E110                       	smpsAlterNote       $10
0008449D E701                       	dc.b	smpsNoAttack, $01
0008449F E10C                       	smpsAlterNote       $0C
000844A1 E701                       	dc.b	smpsNoAttack, $01
000844A3 E106                       	smpsAlterNote       $06
000844A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844A9 E109                       	smpsAlterNote       $09
000844AB E701                       	dc.b	smpsNoAttack, $01
000844AD E10F                       	smpsAlterNote       $0F
000844AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844B3 E109                       	smpsAlterNote       $09
000844B5 E701                       	dc.b	smpsNoAttack, $01
000844B7 E106                       	smpsAlterNote       $06
000844B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844BD E10C                       	smpsAlterNote       $0C
000844BF E701                       	dc.b	smpsNoAttack, $01
000844C1 E110                       	smpsAlterNote       $10
000844C3 E701                       	dc.b	smpsNoAttack, $01
000844C5 E10F                       	smpsAlterNote       $0F
000844C7 E701                       	dc.b	smpsNoAttack, $01
000844C9 E109                       	smpsAlterNote       $09
000844CB E701                       	dc.b	smpsNoAttack, $01
000844CD E105                       	smpsAlterNote       $05
000844CF E701                       	dc.b	smpsNoAttack, $01
000844D1 E109                       	smpsAlterNote       $09
000844D3 E701                       	dc.b	smpsNoAttack, $01
000844D5 E10C                       	smpsAlterNote       $0C
000844D7 E701                       	dc.b	smpsNoAttack, $01
000844D9 E110                       	smpsAlterNote       $10
000844DB E701                       	dc.b	smpsNoAttack, $01
000844DD E10C                       	smpsAlterNote       $0C
000844DF E701                       	dc.b	smpsNoAttack, $01
000844E1 E106                       	smpsAlterNote       $06
000844E3 E701                       	dc.b	smpsNoAttack, $01
000844E5 E105                       	smpsAlterNote       $05
000844E7 E701                       	dc.b	smpsNoAttack, $01
000844E9 E109                       	smpsAlterNote       $09
000844EB E701                       	dc.b	smpsNoAttack, $01
000844ED E10F                       	smpsAlterNote       $0F
000844EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844F3 E109                       	smpsAlterNote       $09
000844F5 E701                       	dc.b	smpsNoAttack, $01
000844F7 E106                       	smpsAlterNote       $06
000844F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844FD E10C                       	smpsAlterNote       $0C
000844FF E701                       	dc.b	smpsNoAttack, $01
00084501 E110                       	smpsAlterNote       $10
00084503 E701                       	dc.b	smpsNoAttack, $01
00084505 E10F                       	smpsAlterNote       $0F
00084507 E701                       	dc.b	smpsNoAttack, $01
00084509 E109                       	smpsAlterNote       $09
0008450B E701                       	dc.b	smpsNoAttack, $01
0008450D E105                       	smpsAlterNote       $05
0008450F E701                       	dc.b	smpsNoAttack, $01
00084511 E109                       	smpsAlterNote       $09
00084513 E701                       	dc.b	smpsNoAttack, $01
00084515 E10C                       	smpsAlterNote       $0C
00084517 E701                       	dc.b	smpsNoAttack, $01
00084519 E110                       	smpsAlterNote       $10
0008451B E701                       	dc.b	smpsNoAttack, $01
0008451D E10C                       	smpsAlterNote       $0C
0008451F E701                       	dc.b	smpsNoAttack, $01
00084521 E106                       	smpsAlterNote       $06
00084523 E701                       	dc.b	smpsNoAttack, $01
00084525 E105                       	smpsAlterNote       $05
00084527 E701                       	dc.b	smpsNoAttack, $01
00084529 E109                       	smpsAlterNote       $09
0008452B E701                       	dc.b	smpsNoAttack, $01
0008452D E10F                       	smpsAlterNote       $0F
0008452F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084533 E10C                       	smpsAlterNote       $0C
00084535 E701                       	dc.b	smpsNoAttack, $01
00084537 E106                       	smpsAlterNote       $06
00084539 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008453D E10C                       	smpsAlterNote       $0C
0008453F E701                       	dc.b	smpsNoAttack, $01
00084541 E10F                       	smpsAlterNote       $0F
00084543 E701                       	dc.b	smpsNoAttack, $01
00084545 E110                       	smpsAlterNote       $10
00084547 8001                       	dc.b	nRst, $01
00084549 E10F                       	smpsAlterNote       $0F
0008454B C604                       	dc.b	nA5, $04
0008454D E10D                       	smpsAlterNote       $0D
0008454F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00084555 E10B                       	smpsAlterNote       $0B
00084557 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008455D E10F                       	smpsAlterNote       $0F
0008455F C604 8001                  	dc.b	nA5, $04, nRst, $01
00084563 E10D                       	smpsAlterNote       $0D
00084565 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008456B E10C                       	smpsAlterNote       $0C
0008456D C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00084573 E10A                       	smpsAlterNote       $0A
00084575 C904                       	dc.b	nC6, $04
00084577 E110                       	smpsAlterNote       $10
00084579 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008457D E10F                       	smpsAlterNote       $0F
0008457F C604                       	dc.b	nA5, $04
00084581 E10D                       	smpsAlterNote       $0D
00084583 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008458F E109                       	smpsAlterNote       $09
00084591 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084595 E10F                       	smpsAlterNote       $0F
00084597 E701                       	dc.b	smpsNoAttack, $01
00084599 E112                       	smpsAlterNote       $12
0008459B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008459F E10C                       	smpsAlterNote       $0C
000845A1 E701                       	dc.b	smpsNoAttack, $01
000845A3 E108                       	smpsAlterNote       $08
000845A5 E701                       	dc.b	smpsNoAttack, $01
000845A7 E109                       	smpsAlterNote       $09
000845A9 E701                       	dc.b	smpsNoAttack, $01
000845AB E10F                       	smpsAlterNote       $0F
000845AD E701                       	dc.b	smpsNoAttack, $01
000845AF E113                       	smpsAlterNote       $13
000845B1 E701                       	dc.b	smpsNoAttack, $01
000845B3 E10D                       	smpsAlterNote       $0D
000845B5 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000845BB E10C                       	smpsAlterNote       $0C
000845BD C10D                       	dc.b	nE5, $0D
000845BF E109                       	smpsAlterNote       $09
000845C1 E701                       	dc.b	smpsNoAttack, $01
000845C3 E106                       	smpsAlterNote       $06
000845C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845C9 E10C                       	smpsAlterNote       $0C
000845CB E701                       	dc.b	smpsNoAttack, $01
000845CD E110                       	smpsAlterNote       $10
000845CF E701                       	dc.b	smpsNoAttack, $01
000845D1 E10F                       	smpsAlterNote       $0F
000845D3 E701                       	dc.b	smpsNoAttack, $01
000845D5 E109                       	smpsAlterNote       $09
000845D7 E701                       	dc.b	smpsNoAttack, $01
000845D9 E105                       	smpsAlterNote       $05
000845DB E701                       	dc.b	smpsNoAttack, $01
000845DD E109                       	smpsAlterNote       $09
000845DF E701                       	dc.b	smpsNoAttack, $01
000845E1 E10C                       	smpsAlterNote       $0C
000845E3 E701                       	dc.b	smpsNoAttack, $01
000845E5 E110                       	smpsAlterNote       $10
000845E7 E701                       	dc.b	smpsNoAttack, $01
000845E9 E10C                       	smpsAlterNote       $0C
000845EB E701                       	dc.b	smpsNoAttack, $01
000845ED E106                       	smpsAlterNote       $06
000845EF E701                       	dc.b	smpsNoAttack, $01
000845F1 E105                       	smpsAlterNote       $05
000845F3 E701                       	dc.b	smpsNoAttack, $01
000845F5 E109                       	smpsAlterNote       $09
000845F7 E701                       	dc.b	smpsNoAttack, $01
000845F9 E10F                       	smpsAlterNote       $0F
000845FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845FF E10C                       	smpsAlterNote       $0C
00084601 E701                       	dc.b	smpsNoAttack, $01
00084603 E106                       	smpsAlterNote       $06
00084605 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084609 E10C                       	smpsAlterNote       $0C
0008460B E701                       	dc.b	smpsNoAttack, $01
0008460D E10F                       	smpsAlterNote       $0F
0008460F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084613 E109                       	smpsAlterNote       $09
00084615 E701                       	dc.b	smpsNoAttack, $01
00084617 E105                       	smpsAlterNote       $05
00084619 E701                       	dc.b	smpsNoAttack, $01
0008461B E106                       	smpsAlterNote       $06
0008461D E701                       	dc.b	smpsNoAttack, $01
0008461F E10C                       	smpsAlterNote       $0C
00084621 E701                       	dc.b	smpsNoAttack, $01
00084623 E110                       	smpsAlterNote       $10
00084625 E701                       	dc.b	smpsNoAttack, $01
00084627 E10C                       	smpsAlterNote       $0C
00084629 E701                       	dc.b	smpsNoAttack, $01
0008462B E109                       	smpsAlterNote       $09
0008462D E701                       	dc.b	smpsNoAttack, $01
0008462F E105                       	smpsAlterNote       $05
00084631 E701                       	dc.b	smpsNoAttack, $01
00084633 E109                       	smpsAlterNote       $09
00084635 E701                       	dc.b	smpsNoAttack, $01
00084637 E10F                       	smpsAlterNote       $0F
00084639 E701                       	dc.b	smpsNoAttack, $01
0008463B E110                       	smpsAlterNote       $10
0008463D E701                       	dc.b	smpsNoAttack, $01
0008463F E10C                       	smpsAlterNote       $0C
00084641 E701                       	dc.b	smpsNoAttack, $01
00084643 E106                       	smpsAlterNote       $06
00084645 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084649 E109                       	smpsAlterNote       $09
0008464B E701                       	dc.b	smpsNoAttack, $01
0008464D E10F                       	smpsAlterNote       $0F
0008464F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084653 E109                       	smpsAlterNote       $09
00084655 E701                       	dc.b	smpsNoAttack, $01
00084657 E106                       	smpsAlterNote       $06
00084659 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008465D E10C                       	smpsAlterNote       $0C
0008465F E701                       	dc.b	smpsNoAttack, $01
00084661 E110                       	smpsAlterNote       $10
00084663 E701                       	dc.b	smpsNoAttack, $01
00084665 E10F                       	smpsAlterNote       $0F
00084667 E701                       	dc.b	smpsNoAttack, $01
00084669 E109                       	smpsAlterNote       $09
0008466B E701                       	dc.b	smpsNoAttack, $01
0008466D E105                       	smpsAlterNote       $05
0008466F E701                       	dc.b	smpsNoAttack, $01
00084671 E109                       	smpsAlterNote       $09
00084673 E701                       	dc.b	smpsNoAttack, $01
00084675 E10F                       	smpsAlterNote       $0F
00084677 E701                       	dc.b	smpsNoAttack, $01
00084679 E110                       	smpsAlterNote       $10
0008467B E701                       	dc.b	smpsNoAttack, $01
0008467D E10C                       	smpsAlterNote       $0C
0008467F E701                       	dc.b	smpsNoAttack, $01
00084681 E106                       	smpsAlterNote       $06
00084683 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084687 E109                       	smpsAlterNote       $09
00084689 E701                       	dc.b	smpsNoAttack, $01
0008468B E10F                       	smpsAlterNote       $0F
0008468D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084691 E109                       	smpsAlterNote       $09
00084693 E701                       	dc.b	smpsNoAttack, $01
00084695 E106                       	smpsAlterNote       $06
00084697 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008469B E10C                       	smpsAlterNote       $0C
0008469D E701                       	dc.b	smpsNoAttack, $01
0008469F E110                       	smpsAlterNote       $10
000846A1 E701                       	dc.b	smpsNoAttack, $01
000846A3 E10F                       	smpsAlterNote       $0F
000846A5 E701                       	dc.b	smpsNoAttack, $01
000846A7 E109                       	smpsAlterNote       $09
000846A9 E701                       	dc.b	smpsNoAttack, $01
000846AB E105                       	smpsAlterNote       $05
000846AD E701                       	dc.b	smpsNoAttack, $01
000846AF E109                       	smpsAlterNote       $09
000846B1 E701                       	dc.b	smpsNoAttack, $01
000846B3 E10C                       	smpsAlterNote       $0C
000846B5 E701                       	dc.b	smpsNoAttack, $01
000846B7 E110                       	smpsAlterNote       $10
000846B9 E701                       	dc.b	smpsNoAttack, $01
000846BB E10C                       	smpsAlterNote       $0C
000846BD E701                       	dc.b	smpsNoAttack, $01
000846BF E106                       	smpsAlterNote       $06
000846C1 E701                       	dc.b	smpsNoAttack, $01
000846C3 E105                       	smpsAlterNote       $05
000846C5 E701                       	dc.b	smpsNoAttack, $01
000846C7 E109                       	smpsAlterNote       $09
000846C9 E701                       	dc.b	smpsNoAttack, $01
000846CB E10F                       	smpsAlterNote       $0F
000846CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846D1 E10C                       	smpsAlterNote       $0C
000846D3 E701                       	dc.b	smpsNoAttack, $01
000846D5 E106                       	smpsAlterNote       $06
000846D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846DB E10C                       	smpsAlterNote       $0C
000846DD E701                       	dc.b	smpsNoAttack, $01
000846DF E10F                       	smpsAlterNote       $0F
000846E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846E5 E109                       	smpsAlterNote       $09
000846E7 E701                       	dc.b	smpsNoAttack, $01
000846E9 E105                       	smpsAlterNote       $05
000846EB E701                       	dc.b	smpsNoAttack, $01
000846ED E106                       	smpsAlterNote       $06
000846EF E701                       	dc.b	smpsNoAttack, $01
000846F1 E10C                       	smpsAlterNote       $0C
000846F3 E701                       	dc.b	smpsNoAttack, $01
000846F5 E110                       	smpsAlterNote       $10
000846F7 E701                       	dc.b	smpsNoAttack, $01
000846F9 E10C                       	smpsAlterNote       $0C
000846FB E701                       	dc.b	smpsNoAttack, $01
000846FD E109                       	smpsAlterNote       $09
000846FF E701                       	dc.b	smpsNoAttack, $01
00084701 E105                       	smpsAlterNote       $05
00084703 E701                       	dc.b	smpsNoAttack, $01
00084705 E109                       	smpsAlterNote       $09
00084707 E701                       	dc.b	smpsNoAttack, $01
00084709 E10F                       	smpsAlterNote       $0F
0008470B E701                       	dc.b	smpsNoAttack, $01
0008470D E110                       	smpsAlterNote       $10
0008470F E701                       	dc.b	smpsNoAttack, $01
00084711 E10C                       	smpsAlterNote       $0C
00084713 E701                       	dc.b	smpsNoAttack, $01
00084715 E106                       	smpsAlterNote       $06
00084717 E701                       	dc.b	smpsNoAttack, $01
00084719 E10B                       	smpsAlterNote       $0B
0008471B BF02                       	dc.b	nD5, $02
0008471D E10C                       	smpsAlterNote       $0C
0008471F C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00084725 E109                       	smpsAlterNote       $09
00084727 E701                       	dc.b	smpsNoAttack, $01
00084729 E105                       	smpsAlterNote       $05
0008472B E701                       	dc.b	smpsNoAttack, $01
0008472D E109                       	smpsAlterNote       $09
0008472F E701                       	dc.b	smpsNoAttack, $01
00084731 E10F                       	smpsAlterNote       $0F
00084733 E701                       	dc.b	smpsNoAttack, $01
00084735 E110                       	smpsAlterNote       $10
00084737 E701                       	dc.b	smpsNoAttack, $01
00084739 E10C                       	smpsAlterNote       $0C
0008473B E701                       	dc.b	smpsNoAttack, $01
0008473D E106                       	smpsAlterNote       $06
0008473F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084743 E109                       	smpsAlterNote       $09
00084745 E701                       	dc.b	smpsNoAttack, $01
00084747 E10F                       	smpsAlterNote       $0F
00084749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008474D E109                       	smpsAlterNote       $09
0008474F E701                       	dc.b	smpsNoAttack, $01
00084751 E106                       	smpsAlterNote       $06
00084753 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084757 E10C                       	smpsAlterNote       $0C
00084759 E701                       	dc.b	smpsNoAttack, $01
0008475B E110                       	smpsAlterNote       $10
0008475D E701                       	dc.b	smpsNoAttack, $01
0008475F E10F                       	smpsAlterNote       $0F
00084761 E701                       	dc.b	smpsNoAttack, $01
00084763 E109                       	smpsAlterNote       $09
00084765 E701                       	dc.b	smpsNoAttack, $01
00084767 E105                       	smpsAlterNote       $05
00084769 E701                       	dc.b	smpsNoAttack, $01
0008476B E109                       	smpsAlterNote       $09
0008476D E701                       	dc.b	smpsNoAttack, $01
0008476F E10C                       	smpsAlterNote       $0C
00084771 E701                       	dc.b	smpsNoAttack, $01
00084773 E110                       	smpsAlterNote       $10
00084775 E701                       	dc.b	smpsNoAttack, $01
00084777 E10C                       	smpsAlterNote       $0C
00084779 E701                       	dc.b	smpsNoAttack, $01
0008477B E106                       	smpsAlterNote       $06
0008477D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084781 E10D                       	smpsAlterNote       $0D
00084783 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008478B E10C                       	smpsAlterNote       $0C
0008478D C10D                       	dc.b	nE5, $0D
0008478F E106                       	smpsAlterNote       $06
00084791 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084795 E109                       	smpsAlterNote       $09
00084797 E701                       	dc.b	smpsNoAttack, $01
00084799 E10F                       	smpsAlterNote       $0F
0008479B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008479F E109                       	smpsAlterNote       $09
000847A1 E701                       	dc.b	smpsNoAttack, $01
000847A3 E106                       	smpsAlterNote       $06
000847A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847A9 E10C                       	smpsAlterNote       $0C
000847AB E701                       	dc.b	smpsNoAttack, $01
000847AD E110                       	smpsAlterNote       $10
000847AF E701                       	dc.b	smpsNoAttack, $01
000847B1 E10F                       	smpsAlterNote       $0F
000847B3 E701                       	dc.b	smpsNoAttack, $01
000847B5 E109                       	smpsAlterNote       $09
000847B7 E701                       	dc.b	smpsNoAttack, $01
000847B9 E105                       	smpsAlterNote       $05
000847BB E701                       	dc.b	smpsNoAttack, $01
000847BD E106                       	smpsAlterNote       $06
000847BF 800F                       	dc.b	nRst, $0F
000847C3 E6FF                       	smpsAlterVol        $FF
000847C5 E10F                       	smpsAlterNote       $0F
000847C7 BA01                       	dc.b	nA4, $01
000847C9 E110                       	smpsAlterNote       $10
000847CB BB02                       	dc.b	nBb4, $02
000847CD E10F                       	smpsAlterNote       $0F
000847CF BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000847D5 E10B                       	smpsAlterNote       $0B
000847D7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000847DB E10C                       	smpsAlterNote       $0C
000847DD C103                       	dc.b	nE5, $03
000847DF E10D                       	smpsAlterNote       $0D
000847E1 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000847EB E10B                       	smpsAlterNote       $0B
000847ED BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000847F1 E104                       	smpsAlterNote       $04
000847F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847F7 E10A                       	smpsAlterNote       $0A
000847F9 E701                       	dc.b	smpsNoAttack, $01
000847FB E10D                       	smpsAlterNote       $0D
000847FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084801 E107                       	smpsAlterNote       $07
00084803 E701                       	dc.b	smpsNoAttack, $01
00084805 E104                       	smpsAlterNote       $04
00084807 8001                       	dc.b	nRst, $01
00084809 E110                       	smpsAlterNote       $10
0008480B C703                       	dc.b	nBb5, $03
0008480D E10F                       	smpsAlterNote       $0F
0008480F C603 8001                  	dc.b	nA5, $03, nRst, $01
00084813 E10D                       	smpsAlterNote       $0D
00084815 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00084819 E10C                       	smpsAlterNote       $0C
0008481B E701                       	dc.b	smpsNoAttack, $01
0008481D E108                       	smpsAlterNote       $08
0008481F E701                       	dc.b	smpsNoAttack, $01
00084821 E109                       	smpsAlterNote       $09
00084823 E701                       	dc.b	smpsNoAttack, $01
00084825 E10F                       	smpsAlterNote       $0F
00084827 E701                       	dc.b	smpsNoAttack, $01
00084829 E113                       	smpsAlterNote       $13
0008482B E701                       	dc.b	smpsNoAttack, $01
0008482D E10F                       	smpsAlterNote       $0F
0008482F E701                       	dc.b	smpsNoAttack, $01
00084831 E10C                       	smpsAlterNote       $0C
00084833 E701                       	dc.b	smpsNoAttack, $01
00084835 E108                       	smpsAlterNote       $08
00084837 E701                       	dc.b	smpsNoAttack, $01
00084839 E10C                       	smpsAlterNote       $0C
0008483B E701                       	dc.b	smpsNoAttack, $01
0008483D E112                       	smpsAlterNote       $12
0008483F E701                       	dc.b	smpsNoAttack, $01
00084841 E113                       	smpsAlterNote       $13
00084843 E701                       	dc.b	smpsNoAttack, $01
00084845 E10F                       	smpsAlterNote       $0F
00084847 E701                       	dc.b	smpsNoAttack, $01
00084849 E109                       	smpsAlterNote       $09
0008484B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008484F E10C                       	smpsAlterNote       $0C
00084851 E701                       	dc.b	smpsNoAttack, $01
00084853 E112                       	smpsAlterNote       $12
00084855 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084859 E10C                       	smpsAlterNote       $0C
0008485B E701                       	dc.b	smpsNoAttack, $01
0008485D E109                       	smpsAlterNote       $09
0008485F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084863 E10F                       	smpsAlterNote       $0F
00084865 E701                       	dc.b	smpsNoAttack, $01
00084867 E113                       	smpsAlterNote       $13
00084869 E701                       	dc.b	smpsNoAttack, $01
0008486B E112                       	smpsAlterNote       $12
0008486D E701                       	dc.b	smpsNoAttack, $01
0008486F E10C                       	smpsAlterNote       $0C
00084871 E701                       	dc.b	smpsNoAttack, $01
00084873 E108                       	smpsAlterNote       $08
00084875 E701                       	dc.b	smpsNoAttack, $01
00084877 E10C                       	smpsAlterNote       $0C
00084879 E701                       	dc.b	smpsNoAttack, $01
0008487B E10F                       	smpsAlterNote       $0F
0008487D E701                       	dc.b	smpsNoAttack, $01
0008487F E113                       	smpsAlterNote       $13
00084881 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00084885 E10B                       	smpsAlterNote       $0B
00084887 BF03                       	dc.b	nD5, $03
00084889 E10C                       	smpsAlterNote       $0C
0008488B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008488F E10D                       	smpsAlterNote       $0D
00084891 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008489B E10B                       	smpsAlterNote       $0B
0008489D BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000848A9 E110                       	smpsAlterNote       $10
000848AB C704 8001                  	dc.b	nBb5, $04, nRst, $01
000848AF E10F                       	smpsAlterNote       $0F
000848B1 C604                       	dc.b	nA5, $04
000848B3 E10D                       	smpsAlterNote       $0D
000848B5 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000848BB E109                       	smpsAlterNote       $09
000848BD E701                       	dc.b	smpsNoAttack, $01
000848BF E108                       	smpsAlterNote       $08
000848C1 E701                       	dc.b	smpsNoAttack, $01
000848C3 E10C                       	smpsAlterNote       $0C
000848C5 E701                       	dc.b	smpsNoAttack, $01
000848C7 E112                       	smpsAlterNote       $12
000848C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848CD E10F                       	smpsAlterNote       $0F
000848CF E701                       	dc.b	smpsNoAttack, $01
000848D1 E109                       	smpsAlterNote       $09
000848D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848D7 E10F                       	smpsAlterNote       $0F
000848D9 E701                       	dc.b	smpsNoAttack, $01
000848DB E112                       	smpsAlterNote       $12
000848DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848E1 E10C                       	smpsAlterNote       $0C
000848E3 E701                       	dc.b	smpsNoAttack, $01
000848E5 E108                       	smpsAlterNote       $08
000848E7 E701                       	dc.b	smpsNoAttack, $01
000848E9 E109                       	smpsAlterNote       $09
000848EB E701                       	dc.b	smpsNoAttack, $01
000848ED E10F                       	smpsAlterNote       $0F
000848EF E701                       	dc.b	smpsNoAttack, $01
000848F1 E113                       	smpsAlterNote       $13
000848F3 E701                       	dc.b	smpsNoAttack, $01
000848F5 E10F                       	smpsAlterNote       $0F
000848F7 E701                       	dc.b	smpsNoAttack, $01
000848F9 E10C                       	smpsAlterNote       $0C
000848FB E701                       	dc.b	smpsNoAttack, $01
000848FD E108                       	smpsAlterNote       $08
000848FF E701                       	dc.b	smpsNoAttack, $01
00084901 E10C                       	smpsAlterNote       $0C
00084903 E701                       	dc.b	smpsNoAttack, $01
00084905 E112                       	smpsAlterNote       $12
00084907 E701                       	dc.b	smpsNoAttack, $01
00084909 E113                       	smpsAlterNote       $13
0008490B E701                       	dc.b	smpsNoAttack, $01
0008490D E10F                       	smpsAlterNote       $0F
0008490F E701                       	dc.b	smpsNoAttack, $01
00084911 E109                       	smpsAlterNote       $09
00084913 E701                       	dc.b	smpsNoAttack, $01
00084915 E10D                       	smpsAlterNote       $0D
00084917 C402                       	dc.b	nG5, $02
00084919 E10F                       	smpsAlterNote       $0F
0008491B C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00084925 E10D                       	smpsAlterNote       $0D
00084927 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008492D E10B                       	smpsAlterNote       $0B
0008492F BF0D                       	dc.b	nD5, $0D
00084931 E108                       	smpsAlterNote       $08
00084933 E701                       	dc.b	smpsNoAttack, $01
00084935 E104                       	smpsAlterNote       $04
00084937 E701                       	dc.b	smpsNoAttack, $01
00084939 E105                       	smpsAlterNote       $05
0008493B E701                       	dc.b	smpsNoAttack, $01
0008493D E10B                       	smpsAlterNote       $0B
0008493F E701                       	dc.b	smpsNoAttack, $01
00084941 E10F                       	smpsAlterNote       $0F
00084943 E701                       	dc.b	smpsNoAttack, $01
00084945 E10B                       	smpsAlterNote       $0B
00084947 E701                       	dc.b	smpsNoAttack, $01
00084949 E108                       	smpsAlterNote       $08
0008494B E701                       	dc.b	smpsNoAttack, $01
0008494D E104                       	smpsAlterNote       $04
0008494F E701                       	dc.b	smpsNoAttack, $01
00084951 E108                       	smpsAlterNote       $08
00084953 E701                       	dc.b	smpsNoAttack, $01
00084955 E10E                       	smpsAlterNote       $0E
00084957 E701                       	dc.b	smpsNoAttack, $01
00084959 E10F                       	smpsAlterNote       $0F
0008495B E701                       	dc.b	smpsNoAttack, $01
0008495D E10C                       	smpsAlterNote       $0C
0008495F C101                       	dc.b	nE5, $01
00084961 E10D                       	smpsAlterNote       $0D
00084963 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008496B E10F                       	smpsAlterNote       $0F
0008496D C607                       	dc.b	nA5, $07
0008496F E10C                       	smpsAlterNote       $0C
00084971 CD07                       	dc.b	nE6, $07
00084973 E10D                       	smpsAlterNote       $0D
00084975 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084979 E10C                       	smpsAlterNote       $0C
0008497B CD03                       	dc.b	nE6, $03
0008497D E10A                       	smpsAlterNote       $0A
0008497F C903 8001                  	dc.b	nC6, $03, nRst, $01
00084983 E10D                       	smpsAlterNote       $0D
00084985 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008498B E10A                       	smpsAlterNote       $0A
0008498D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084991 E110                       	smpsAlterNote       $10
00084993 E701                       	dc.b	smpsNoAttack, $01
00084995 E114                       	smpsAlterNote       $14
00084997 E701                       	dc.b	smpsNoAttack, $01
00084999 E113                       	smpsAlterNote       $13
0008499B E701                       	dc.b	smpsNoAttack, $01
0008499D E10D                       	smpsAlterNote       $0D
0008499F E701                       	dc.b	smpsNoAttack, $01
000849A1 E109                       	smpsAlterNote       $09
000849A3 E701                       	dc.b	smpsNoAttack, $01
000849A5 E10D                       	smpsAlterNote       $0D
000849A7 E701                       	dc.b	smpsNoAttack, $01
000849A9 E110                       	smpsAlterNote       $10
000849AB E701                       	dc.b	smpsNoAttack, $01
000849AD E114                       	smpsAlterNote       $14
000849AF E701                       	dc.b	smpsNoAttack, $01
000849B1 E10F                       	smpsAlterNote       $0F
000849B3 C607                       	dc.b	nA5, $07
000849B5 E10D                       	smpsAlterNote       $0D
000849B7 C40D                       	dc.b	nG5, $0D
000849B9 E10A                       	smpsAlterNote       $0A
000849BB E701                       	dc.b	smpsNoAttack, $01
000849BD E106                       	smpsAlterNote       $06
000849BF E701                       	dc.b	smpsNoAttack, $01
000849C1 E10A                       	smpsAlterNote       $0A
000849C3 E701                       	dc.b	smpsNoAttack, $01
000849C5 E10D                       	smpsAlterNote       $0D
000849C7 E701                       	dc.b	smpsNoAttack, $01
000849C9 E111                       	smpsAlterNote       $11
000849CB E701                       	dc.b	smpsNoAttack, $01
000849CD E10D                       	smpsAlterNote       $0D
000849CF E701                       	dc.b	smpsNoAttack, $01
000849D1 E107                       	smpsAlterNote       $07
000849D3 E701                       	dc.b	smpsNoAttack, $01
000849D5 E106                       	smpsAlterNote       $06
000849D7 E701                       	dc.b	smpsNoAttack, $01
000849D9 E10A                       	smpsAlterNote       $0A
000849DB E701                       	dc.b	smpsNoAttack, $01
000849DD E110                       	smpsAlterNote       $10
000849DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849E3 E10D                       	smpsAlterNote       $0D
000849E5 E701                       	dc.b	smpsNoAttack, $01
000849E7 E107                       	smpsAlterNote       $07
000849E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849ED E10F                       	smpsAlterNote       $0F
000849EF C60E                       	dc.b	nA5, $0E
000849F1 E109                       	smpsAlterNote       $09
000849F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849F7 E10F                       	smpsAlterNote       $0F
000849F9 E701                       	dc.b	smpsNoAttack, $01
000849FB E112                       	smpsAlterNote       $12
000849FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A01 E10C                       	smpsAlterNote       $0C
00084A03 E701                       	dc.b	smpsNoAttack, $01
00084A05 E108                       	smpsAlterNote       $08
00084A07 E701                       	dc.b	smpsNoAttack, $01
00084A09 E109                       	smpsAlterNote       $09
00084A0B E701                       	dc.b	smpsNoAttack, $01
00084A0D E10F                       	smpsAlterNote       $0F
00084A0F E701                       	dc.b	smpsNoAttack, $01
00084A11 E113                       	smpsAlterNote       $13
00084A13 E701                       	dc.b	smpsNoAttack, $01
00084A15 E10F                       	smpsAlterNote       $0F
00084A17 E701                       	dc.b	smpsNoAttack, $01
00084A19 E10C                       	smpsAlterNote       $0C
00084A1B E701                       	dc.b	smpsNoAttack, $01
00084A1D E108                       	smpsAlterNote       $08
00084A1F E701                       	dc.b	smpsNoAttack, $01
00084A21 E109                       	smpsAlterNote       $09
00084A23 8001                       	dc.b	nRst, $01
00084A25 E110                       	smpsAlterNote       $10
00084A27 C70D                       	dc.b	nBb5, $0D
00084A29 E10D                       	smpsAlterNote       $0D
00084A2B E701                       	dc.b	smpsNoAttack, $01
00084A2D E109                       	smpsAlterNote       $09
00084A2F E701                       	dc.b	smpsNoAttack, $01
00084A31 E10D                       	smpsAlterNote       $0D
00084A33 E701                       	dc.b	smpsNoAttack, $01
00084A35 E113                       	smpsAlterNote       $13
00084A37 E701                       	dc.b	smpsNoAttack, $01
00084A39 E114                       	smpsAlterNote       $14
00084A3B E701                       	dc.b	smpsNoAttack, $01
00084A3D E110                       	smpsAlterNote       $10
00084A3F E701                       	dc.b	smpsNoAttack, $01
00084A41 E10A                       	smpsAlterNote       $0A
00084A43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A47 E10D                       	smpsAlterNote       $0D
00084A49 E701                       	dc.b	smpsNoAttack, $01
00084A4B E113                       	smpsAlterNote       $13
00084A4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A51 E10D                       	smpsAlterNote       $0D
00084A53 E701                       	dc.b	smpsNoAttack, $01
00084A55 E10A                       	smpsAlterNote       $0A
00084A57 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00084A61 E10B                       	smpsAlterNote       $0B
00084A63 8001                       	dc.b	nRst, $01
00084A65 E10C                       	smpsAlterNote       $0C
00084A67 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00084A6B E10B                       	smpsAlterNote       $0B
00084A6D CB0D                       	dc.b	nD6, $0D
00084A6F E105                       	smpsAlterNote       $05
00084A71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A75 E108                       	smpsAlterNote       $08
00084A77 E701                       	dc.b	smpsNoAttack, $01
00084A79 E10E                       	smpsAlterNote       $0E
00084A7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A7F E108                       	smpsAlterNote       $08
00084A81 E701                       	dc.b	smpsNoAttack, $01
00084A83 E105                       	smpsAlterNote       $05
00084A85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A89 E10B                       	smpsAlterNote       $0B
00084A8B E701                       	dc.b	smpsNoAttack, $01
00084A8D E10F                       	smpsAlterNote       $0F
00084A8F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084A93 E10C                       	smpsAlterNote       $0C
00084A95 CC0D                       	dc.b	nEb6, $0D
00084A97 E106                       	smpsAlterNote       $06
00084A99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A9D E109                       	smpsAlterNote       $09
00084A9F E701                       	dc.b	smpsNoAttack, $01
00084AA1 E10C                       	smpsAlterNote       $0C
00084AA3 8001                       	dc.b	nRst, $01
00084AA5 E10A                       	smpsAlterNote       $0A
00084AA7 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00084AB3 CB0E                       	dc.b	nD6, $0E
00084AB5 E105                       	smpsAlterNote       $05
00084AB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ABB E10B                       	smpsAlterNote       $0B
00084ABD E701                       	dc.b	smpsNoAttack, $01
00084ABF E10E                       	smpsAlterNote       $0E
00084AC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AC5 E108                       	smpsAlterNote       $08
00084AC7 E701                       	dc.b	smpsNoAttack, $01
00084AC9 E104                       	smpsAlterNote       $04
00084ACB E701                       	dc.b	smpsNoAttack, $01
00084ACD E105                       	smpsAlterNote       $05
00084ACF E701                       	dc.b	smpsNoAttack, $01
00084AD1 E10B                       	smpsAlterNote       $0B
00084AD3 E701                       	dc.b	smpsNoAttack, $01
00084AD5 E10F                       	smpsAlterNote       $0F
00084AD7 E701                       	dc.b	smpsNoAttack, $01
00084AD9 E10D                       	smpsAlterNote       $0D
00084ADB CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00084ADF E10C                       	smpsAlterNote       $0C
00084AE1 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00084AE5 E10A                       	smpsAlterNote       $0A
00084AE7 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00084AF3 CB0D                       	dc.b	nD6, $0D
00084AF5 E108                       	smpsAlterNote       $08
00084AF7 E701                       	dc.b	smpsNoAttack, $01
00084AF9 E104                       	smpsAlterNote       $04
00084AFB E701                       	dc.b	smpsNoAttack, $01
00084AFD E105                       	smpsAlterNote       $05
00084AFF E701                       	dc.b	smpsNoAttack, $01
00084B01 E10B                       	smpsAlterNote       $0B
00084B03 E701                       	dc.b	smpsNoAttack, $01
00084B05 E10F                       	smpsAlterNote       $0F
00084B07 E701                       	dc.b	smpsNoAttack, $01
00084B09 E10B                       	smpsAlterNote       $0B
00084B0B E701                       	dc.b	smpsNoAttack, $01
00084B0D E108                       	smpsAlterNote       $08
00084B0F E701                       	dc.b	smpsNoAttack, $01
00084B11 E104                       	smpsAlterNote       $04
00084B13 E701                       	dc.b	smpsNoAttack, $01
00084B15 E108                       	smpsAlterNote       $08
00084B17 E701                       	dc.b	smpsNoAttack, $01
00084B19 E10E                       	smpsAlterNote       $0E
00084B1B E701                       	dc.b	smpsNoAttack, $01
00084B1D E10F                       	smpsAlterNote       $0F
00084B1F E701                       	dc.b	smpsNoAttack, $01
00084B21 E10C                       	smpsAlterNote       $0C
00084B23 CC0D                       	dc.b	nEb6, $0D
00084B25 E109                       	smpsAlterNote       $09
00084B27 E701                       	dc.b	smpsNoAttack, $01
00084B29 E105                       	smpsAlterNote       $05
00084B2B E701                       	dc.b	smpsNoAttack, $01
00084B2D E106                       	smpsAlterNote       $06
00084B2F E701                       	dc.b	smpsNoAttack, $01
00084B31 E10C                       	smpsAlterNote       $0C
00084B33 E701                       	dc.b	smpsNoAttack, $01
00084B35 E10A                       	smpsAlterNote       $0A
00084B37 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00084B43 CB0D                       	dc.b	nD6, $0D
00084B45 E108                       	smpsAlterNote       $08
00084B47 E701                       	dc.b	smpsNoAttack, $01
00084B49 E104                       	smpsAlterNote       $04
00084B4B E701                       	dc.b	smpsNoAttack, $01
00084B4D E108                       	smpsAlterNote       $08
00084B4F E701                       	dc.b	smpsNoAttack, $01
00084B51 E10B                       	smpsAlterNote       $0B
00084B53 E701                       	dc.b	smpsNoAttack, $01
00084B55 E10F                       	smpsAlterNote       $0F
00084B57 E701                       	dc.b	smpsNoAttack, $01
00084B59 E10B                       	smpsAlterNote       $0B
00084B5B E701                       	dc.b	smpsNoAttack, $01
00084B5D E105                       	smpsAlterNote       $05
00084B5F E701                       	dc.b	smpsNoAttack, $01
00084B61 E104                       	smpsAlterNote       $04
00084B63 E701                       	dc.b	smpsNoAttack, $01
00084B65 E108                       	smpsAlterNote       $08
00084B67 E701                       	dc.b	smpsNoAttack, $01
00084B69 E10E                       	smpsAlterNote       $0E
00084B6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B6F E10B                       	smpsAlterNote       $0B
00084B71 E701                       	dc.b	smpsNoAttack, $01
00084B73 E105                       	smpsAlterNote       $05
00084B75 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00084B7D 03                         	dc.b	$03
00084B7E E601                       	smpsAlterVol        $01
00084B80 F6F1 D1                    	smpsJump            music84_Jump01
00084B83                            
00084B83                            ; FM5 Data
00084B83                            music84_FM5:
00084B85 E080                       	smpsPan             panLeft, $00
00084B87 8003                       	dc.b	nRst, $03
00084B89 E10D                       	smpsAlterNote       $0D
00084B8B C203 8008                  	dc.b	nF5, $03, nRst, $08
00084B8F E10C                       	smpsAlterNote       $0C
00084B91 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00084B95 E10F                       	smpsAlterNote       $0F
00084B97 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00084B9D E6FE                       	smpsAlterVol        $FE
00084B9F C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00084BA5 E10D                       	smpsAlterNote       $0D
00084BA7 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00084BAD E10C                       	smpsAlterNote       $0C
00084BAF C102 8001                  	dc.b	nE5, $02, nRst, $01
00084BB3 E10A                       	smpsAlterNote       $0A
00084BB5 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00084BBB 03                         	dc.b	$03
00084BBC                            
00084BBC                            music84_Jump00:
00084BBC 8004                       	dc.b	nRst, $04
00084BBE E602                       	smpsAlterVol        $02
00084BC0 E10D                       	smpsAlterNote       $0D
00084BC2 B60D                       	dc.b	nF4, $0D
00084BC4 E107                       	smpsAlterNote       $07
00084BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BCA E10A                       	smpsAlterNote       $0A
00084BCC E701                       	dc.b	smpsNoAttack, $01
00084BCE E110                       	smpsAlterNote       $10
00084BD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BD4 E10A                       	smpsAlterNote       $0A
00084BD6 E701                       	dc.b	smpsNoAttack, $01
00084BD8 E107                       	smpsAlterNote       $07
00084BDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BDE E10D                       	smpsAlterNote       $0D
00084BE0 E701                       	dc.b	smpsNoAttack, $01
00084BE2 E111                       	smpsAlterNote       $11
00084BE4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084BE8 E10D                       	smpsAlterNote       $0D
00084BEA B80D                       	dc.b	nG4, $0D
00084BEC E107                       	smpsAlterNote       $07
00084BEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BF2 E10A                       	smpsAlterNote       $0A
00084BF4 E701                       	dc.b	smpsNoAttack, $01
00084BF6 E110                       	smpsAlterNote       $10
00084BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BFC E10A                       	smpsAlterNote       $0A
00084BFE E701                       	dc.b	smpsNoAttack, $01
00084C00 E107                       	smpsAlterNote       $07
00084C02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C06 E10D                       	smpsAlterNote       $0D
00084C08 E701                       	dc.b	smpsNoAttack, $01
00084C0A E111                       	smpsAlterNote       $11
00084C0C E701                       	dc.b	smpsNoAttack, $01
00084C0E E110                       	smpsAlterNote       $10
00084C10 E701                       	dc.b	smpsNoAttack, $01
00084C12 E10A                       	smpsAlterNote       $0A
00084C14 E701                       	dc.b	smpsNoAttack, $01
00084C16 E106                       	smpsAlterNote       $06
00084C18 E701                       	dc.b	smpsNoAttack, $01
00084C1A E10A                       	smpsAlterNote       $0A
00084C1C E701                       	dc.b	smpsNoAttack, $01
00084C1E E10D                       	smpsAlterNote       $0D
00084C20 E701                       	dc.b	smpsNoAttack, $01
00084C22 E111                       	smpsAlterNote       $11
00084C24 E701                       	dc.b	smpsNoAttack, $01
00084C26 E10D                       	smpsAlterNote       $0D
00084C28 E701                       	dc.b	smpsNoAttack, $01
00084C2A E10F                       	smpsAlterNote       $0F
00084C2C BA0E                       	dc.b	nA4, $0E
00084C2E E109                       	smpsAlterNote       $09
00084C30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C34 E10F                       	smpsAlterNote       $0F
00084C36 E701                       	dc.b	smpsNoAttack, $01
00084C38 E112                       	smpsAlterNote       $12
00084C3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C3E E10C                       	smpsAlterNote       $0C
00084C40 E701                       	dc.b	smpsNoAttack, $01
00084C42 E108                       	smpsAlterNote       $08
00084C44 E701                       	dc.b	smpsNoAttack, $01
00084C46 E109                       	smpsAlterNote       $09
00084C48 E701                       	dc.b	smpsNoAttack, $01
00084C4A E10F                       	smpsAlterNote       $0F
00084C4C E701                       	dc.b	smpsNoAttack, $01
00084C4E E113                       	smpsAlterNote       $13
00084C50 E701                       	dc.b	smpsNoAttack, $01
00084C52 E10F                       	smpsAlterNote       $0F
00084C54 E701                       	dc.b	smpsNoAttack, $01
00084C56 E109                       	smpsAlterNote       $09
00084C58 E701                       	dc.b	smpsNoAttack, $01
00084C5A E108                       	smpsAlterNote       $08
00084C5C E701                       	dc.b	smpsNoAttack, $01
00084C5E E10C                       	smpsAlterNote       $0C
00084C60 E701                       	dc.b	smpsNoAttack, $01
00084C62 E112                       	smpsAlterNote       $12
00084C64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C68 E10F                       	smpsAlterNote       $0F
00084C6A E701                       	dc.b	smpsNoAttack, $01
00084C6C E109                       	smpsAlterNote       $09
00084C6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C72 E10F                       	smpsAlterNote       $0F
00084C74 E701                       	dc.b	smpsNoAttack, $01
00084C76 E112                       	smpsAlterNote       $12
00084C78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C7C E10C                       	smpsAlterNote       $0C
00084C7E E701                       	dc.b	smpsNoAttack, $01
00084C80 E108                       	smpsAlterNote       $08
00084C82 E701                       	dc.b	smpsNoAttack, $01
00084C84 E109                       	smpsAlterNote       $09
00084C86 E701                       	dc.b	smpsNoAttack, $01
00084C88 E10F                       	smpsAlterNote       $0F
00084C8A E701                       	dc.b	smpsNoAttack, $01
00084C8C E113                       	smpsAlterNote       $13
00084C8E E701                       	dc.b	smpsNoAttack, $01
00084C90 E10F                       	smpsAlterNote       $0F
00084C92 E701                       	dc.b	smpsNoAttack, $01
00084C94 E10C                       	smpsAlterNote       $0C
00084C96 E701                       	dc.b	smpsNoAttack, $01
00084C98 E108                       	smpsAlterNote       $08
00084C9A E701                       	dc.b	smpsNoAttack, $01
00084C9C E109                       	smpsAlterNote       $09
00084C9E 8001                       	dc.b	nRst, $01
00084CA0 E10C                       	smpsAlterNote       $0C
00084CA2 B50A                       	dc.b	nE4, $0A
00084CA4 E10D                       	smpsAlterNote       $0D
00084CA6 B60D                       	dc.b	nF4, $0D
00084CA8 E10A                       	smpsAlterNote       $0A
00084CAA E701                       	dc.b	smpsNoAttack, $01
00084CAC E106                       	smpsAlterNote       $06
00084CAE E701                       	dc.b	smpsNoAttack, $01
00084CB0 E107                       	smpsAlterNote       $07
00084CB2 E701                       	dc.b	smpsNoAttack, $01
00084CB4 E10D                       	smpsAlterNote       $0D
00084CB6 E701                       	dc.b	smpsNoAttack, $01
00084CB8 E111                       	smpsAlterNote       $11
00084CBA E701                       	dc.b	smpsNoAttack, $01
00084CBC E10D                       	smpsAlterNote       $0D
00084CBE E701                       	dc.b	smpsNoAttack, $01
00084CC0 E10A                       	smpsAlterNote       $0A
00084CC2 E701                       	dc.b	smpsNoAttack, $01
00084CC4 E106                       	smpsAlterNote       $06
00084CC6 E701                       	dc.b	smpsNoAttack, $01
00084CC8 E10A                       	smpsAlterNote       $0A
00084CCA E701                       	dc.b	smpsNoAttack, $01
00084CCC E110                       	smpsAlterNote       $10
00084CCE E701                       	dc.b	smpsNoAttack, $01
00084CD0 E111                       	smpsAlterNote       $11
00084CD2 E701                       	dc.b	smpsNoAttack, $01
00084CD4 E10D                       	smpsAlterNote       $0D
00084CD6 B80D                       	dc.b	nG4, $0D
00084CD8 E10A                       	smpsAlterNote       $0A
00084CDA E701                       	dc.b	smpsNoAttack, $01
00084CDC E106                       	smpsAlterNote       $06
00084CDE E701                       	dc.b	smpsNoAttack, $01
00084CE0 E107                       	smpsAlterNote       $07
00084CE2 E701                       	dc.b	smpsNoAttack, $01
00084CE4 E10D                       	smpsAlterNote       $0D
00084CE6 E701                       	dc.b	smpsNoAttack, $01
00084CE8 E111                       	smpsAlterNote       $11
00084CEA E701                       	dc.b	smpsNoAttack, $01
00084CEC E10D                       	smpsAlterNote       $0D
00084CEE E701                       	dc.b	smpsNoAttack, $01
00084CF0 E10A                       	smpsAlterNote       $0A
00084CF2 E701                       	dc.b	smpsNoAttack, $01
00084CF4 E106                       	smpsAlterNote       $06
00084CF6 E701                       	dc.b	smpsNoAttack, $01
00084CF8 E10A                       	smpsAlterNote       $0A
00084CFA E701                       	dc.b	smpsNoAttack, $01
00084CFC E110                       	smpsAlterNote       $10
00084CFE E701                       	dc.b	smpsNoAttack, $01
00084D00 E111                       	smpsAlterNote       $11
00084D02 E701                       	dc.b	smpsNoAttack, $01
00084D04 E10D                       	smpsAlterNote       $0D
00084D06 E701                       	dc.b	smpsNoAttack, $01
00084D08 E107                       	smpsAlterNote       $07
00084D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D0E E10A                       	smpsAlterNote       $0A
00084D10 E701                       	dc.b	smpsNoAttack, $01
00084D12 E110                       	smpsAlterNote       $10
00084D14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D18 E10D                       	smpsAlterNote       $0D
00084D1A 8001                       	dc.b	nRst, $01
00084D1C E10F                       	smpsAlterNote       $0F
00084D1E BA0D                       	dc.b	nA4, $0D
00084D20 E10C                       	smpsAlterNote       $0C
00084D22 E701                       	dc.b	smpsNoAttack, $01
00084D24 E108                       	smpsAlterNote       $08
00084D26 E701                       	dc.b	smpsNoAttack, $01
00084D28 E10C                       	smpsAlterNote       $0C
00084D2A E701                       	dc.b	smpsNoAttack, $01
00084D2C E112                       	smpsAlterNote       $12
00084D2E E701                       	dc.b	smpsNoAttack, $01
00084D30 E113                       	smpsAlterNote       $13
00084D32 E701                       	dc.b	smpsNoAttack, $01
00084D34 E10F                       	smpsAlterNote       $0F
00084D36 E701                       	dc.b	smpsNoAttack, $01
00084D38 E109                       	smpsAlterNote       $09
00084D3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D3E E10C                       	smpsAlterNote       $0C
00084D40 E701                       	dc.b	smpsNoAttack, $01
00084D42 E112                       	smpsAlterNote       $12
00084D44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D48 E10C                       	smpsAlterNote       $0C
00084D4A E701                       	dc.b	smpsNoAttack, $01
00084D4C E109                       	smpsAlterNote       $09
00084D4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D52 E10F                       	smpsAlterNote       $0F
00084D54 E701                       	dc.b	smpsNoAttack, $01
00084D56 E113                       	smpsAlterNote       $13
00084D58 E701                       	dc.b	smpsNoAttack, $01
00084D5A E112                       	smpsAlterNote       $12
00084D5C E701                       	dc.b	smpsNoAttack, $01
00084D5E E10C                       	smpsAlterNote       $0C
00084D60 E701                       	dc.b	smpsNoAttack, $01
00084D62 E108                       	smpsAlterNote       $08
00084D64 E701                       	dc.b	smpsNoAttack, $01
00084D66 E10C                       	smpsAlterNote       $0C
00084D68 E701                       	dc.b	smpsNoAttack, $01
00084D6A E10F                       	smpsAlterNote       $0F
00084D6C E701                       	dc.b	smpsNoAttack, $01
00084D6E E113                       	smpsAlterNote       $13
00084D70 E701                       	dc.b	smpsNoAttack, $01
00084D72 E10F                       	smpsAlterNote       $0F
00084D74 E701                       	dc.b	smpsNoAttack, $01
00084D76 E109                       	smpsAlterNote       $09
00084D78 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084D7C E10D                       	smpsAlterNote       $0D
00084D7E B609 8001                  	dc.b	nF4, $09, nRst, $01
00084D82 E10C                       	smpsAlterNote       $0C
00084D84 B506 8001                  	dc.b	nE4, $06, nRst, $01
00084D88 E10B                       	smpsAlterNote       $0B
00084D8A B30D                       	dc.b	nD4, $0D
00084D8C E10C                       	smpsAlterNote       $0C
00084D8E B503 8001                  	dc.b	nE4, $03, nRst, $01
00084D92 E10D                       	smpsAlterNote       $0D
00084D94 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00084D9C E109                       	smpsAlterNote       $09
00084D9E E701                       	dc.b	smpsNoAttack, $01
00084DA0 E108                       	smpsAlterNote       $08
00084DA2 E701                       	dc.b	smpsNoAttack, $01
00084DA4 E10C                       	smpsAlterNote       $0C
00084DA6 E701                       	dc.b	smpsNoAttack, $01
00084DA8 E112                       	smpsAlterNote       $12
00084DAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DAE E10F                       	smpsAlterNote       $0F
00084DB0 E701                       	dc.b	smpsNoAttack, $01
00084DB2 E109                       	smpsAlterNote       $09
00084DB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DB8 E10F                       	smpsAlterNote       $0F
00084DBA E701                       	dc.b	smpsNoAttack, $01
00084DBC E112                       	smpsAlterNote       $12
00084DBE E701                       	dc.b	smpsNoAttack, $01
00084DC0 E113                       	smpsAlterNote       $13
00084DC2 8001                       	dc.b	nRst, $01
00084DC4 E10D                       	smpsAlterNote       $0D
00084DC6 C20D                       	dc.b	nF5, $0D
00084DC8 E107                       	smpsAlterNote       $07
00084DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DCE E10A                       	smpsAlterNote       $0A
00084DD0 E701                       	dc.b	smpsNoAttack, $01
00084DD2 E110                       	smpsAlterNote       $10
00084DD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DD8 E10A                       	smpsAlterNote       $0A
00084DDA E701                       	dc.b	smpsNoAttack, $01
00084DDC E107                       	smpsAlterNote       $07
00084DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DE2 E10D                       	smpsAlterNote       $0D
00084DE4 E701                       	dc.b	smpsNoAttack, $01
00084DE6 E111                       	smpsAlterNote       $11
00084DE8 E701                       	dc.b	smpsNoAttack, $01
00084DEA E110                       	smpsAlterNote       $10
00084DEC E701                       	dc.b	smpsNoAttack, $01
00084DEE E10A                       	smpsAlterNote       $0A
00084DF0 E701                       	dc.b	smpsNoAttack, $01
00084DF2 E106                       	smpsAlterNote       $06
00084DF4 E701                       	dc.b	smpsNoAttack, $01
00084DF6 E10A                       	smpsAlterNote       $0A
00084DF8 E701                       	dc.b	smpsNoAttack, $01
00084DFA E10D                       	smpsAlterNote       $0D
00084DFC E701                       	dc.b	smpsNoAttack, $01
00084DFE E111                       	smpsAlterNote       $11
00084E00 E701                       	dc.b	smpsNoAttack, $01
00084E02 E10D                       	smpsAlterNote       $0D
00084E04 E701                       	dc.b	smpsNoAttack, $01
00084E06 E107                       	smpsAlterNote       $07
00084E08 E701                       	dc.b	smpsNoAttack, $01
00084E0A E106                       	smpsAlterNote       $06
00084E0C E701                       	dc.b	smpsNoAttack, $01
00084E0E E10A                       	smpsAlterNote       $0A
00084E10 E701                       	dc.b	smpsNoAttack, $01
00084E12 E110                       	smpsAlterNote       $10
00084E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E18 E10D                       	smpsAlterNote       $0D
00084E1A E701                       	dc.b	smpsNoAttack, $01
00084E1C E107                       	smpsAlterNote       $07
00084E1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E22 E10D                       	smpsAlterNote       $0D
00084E24 E701                       	dc.b	smpsNoAttack, $01
00084E26 E110                       	smpsAlterNote       $10
00084E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E2C E10A                       	smpsAlterNote       $0A
00084E2E E701                       	dc.b	smpsNoAttack, $01
00084E30 E106                       	smpsAlterNote       $06
00084E32 E701                       	dc.b	smpsNoAttack, $01
00084E34 E107                       	smpsAlterNote       $07
00084E36 E701                       	dc.b	smpsNoAttack, $01
00084E38 E10D                       	smpsAlterNote       $0D
00084E3A E701                       	dc.b	smpsNoAttack, $01
00084E3C E111                       	smpsAlterNote       $11
00084E3E E701                       	dc.b	smpsNoAttack, $01
00084E40 E10D                       	smpsAlterNote       $0D
00084E42 E701                       	dc.b	smpsNoAttack, $01
00084E44 E10A                       	smpsAlterNote       $0A
00084E46 E701                       	dc.b	smpsNoAttack, $01
00084E48 E106                       	smpsAlterNote       $06
00084E4A E701                       	dc.b	smpsNoAttack, $01
00084E4C E10A                       	smpsAlterNote       $0A
00084E4E E701                       	dc.b	smpsNoAttack, $01
00084E50 E110                       	smpsAlterNote       $10
00084E52 E701                       	dc.b	smpsNoAttack, $01
00084E54 E111                       	smpsAlterNote       $11
00084E56 E701                       	dc.b	smpsNoAttack, $01
00084E58 E10D                       	smpsAlterNote       $0D
00084E5A E701                       	dc.b	smpsNoAttack, $01
00084E5C E107                       	smpsAlterNote       $07
00084E5E E701                       	dc.b	smpsNoAttack, $01
00084E60 E10D                       	smpsAlterNote       $0D
00084E62 C207                       	dc.b	nF5, $07
00084E64 E10C                       	smpsAlterNote       $0C
00084E66 C10D                       	dc.b	nE5, $0D
00084E68 E109                       	smpsAlterNote       $09
00084E6A E701                       	dc.b	smpsNoAttack, $01
00084E6C E106                       	smpsAlterNote       $06
00084E6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E72 E10C                       	smpsAlterNote       $0C
00084E74 E701                       	dc.b	smpsNoAttack, $01
00084E76 E110                       	smpsAlterNote       $10
00084E78 E701                       	dc.b	smpsNoAttack, $01
00084E7A E10F                       	smpsAlterNote       $0F
00084E7C E701                       	dc.b	smpsNoAttack, $01
00084E7E E109                       	smpsAlterNote       $09
00084E80 E701                       	dc.b	smpsNoAttack, $01
00084E82 E105                       	smpsAlterNote       $05
00084E84 E701                       	dc.b	smpsNoAttack, $01
00084E86 E109                       	smpsAlterNote       $09
00084E88 E701                       	dc.b	smpsNoAttack, $01
00084E8A E10C                       	smpsAlterNote       $0C
00084E8C E701                       	dc.b	smpsNoAttack, $01
00084E8E E110                       	smpsAlterNote       $10
00084E90 E701                       	dc.b	smpsNoAttack, $01
00084E92 E10B                       	smpsAlterNote       $0B
00084E94 BF0D                       	dc.b	nD5, $0D
00084E96 E108                       	smpsAlterNote       $08
00084E98 E701                       	dc.b	smpsNoAttack, $01
00084E9A E105                       	smpsAlterNote       $05
00084E9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EA0 E10B                       	smpsAlterNote       $0B
00084EA2 E701                       	dc.b	smpsNoAttack, $01
00084EA4 E10F                       	smpsAlterNote       $0F
00084EA6 E701                       	dc.b	smpsNoAttack, $01
00084EA8 E10E                       	smpsAlterNote       $0E
00084EAA E701                       	dc.b	smpsNoAttack, $01
00084EAC E108                       	smpsAlterNote       $08
00084EAE E701                       	dc.b	smpsNoAttack, $01
00084EB0 E104                       	smpsAlterNote       $04
00084EB2 E701                       	dc.b	smpsNoAttack, $01
00084EB4 E108                       	smpsAlterNote       $08
00084EB6 E701                       	dc.b	smpsNoAttack, $01
00084EB8 E10E                       	smpsAlterNote       $0E
00084EBA E701                       	dc.b	smpsNoAttack, $01
00084EBC E10F                       	smpsAlterNote       $0F
00084EBE E701                       	dc.b	smpsNoAttack, $01
00084EC0 E10B                       	smpsAlterNote       $0B
00084EC2 E701                       	dc.b	smpsNoAttack, $01
00084EC4 E105                       	smpsAlterNote       $05
00084EC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ECA E108                       	smpsAlterNote       $08
00084ECC E701                       	dc.b	smpsNoAttack, $01
00084ECE E10E                       	smpsAlterNote       $0E
00084ED0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ED4 E108                       	smpsAlterNote       $08
00084ED6 E701                       	dc.b	smpsNoAttack, $01
00084ED8 E105                       	smpsAlterNote       $05
00084EDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EDE E10B                       	smpsAlterNote       $0B
00084EE0 E701                       	dc.b	smpsNoAttack, $01
00084EE2 E10F                       	smpsAlterNote       $0F
00084EE4 E701                       	dc.b	smpsNoAttack, $01
00084EE6 E10E                       	smpsAlterNote       $0E
00084EE8 E701                       	dc.b	smpsNoAttack, $01
00084EEA E108                       	smpsAlterNote       $08
00084EEC E701                       	dc.b	smpsNoAttack, $01
00084EEE E104                       	smpsAlterNote       $04
00084EF0 E701                       	dc.b	smpsNoAttack, $01
00084EF2 E108                       	smpsAlterNote       $08
00084EF4 E701                       	dc.b	smpsNoAttack, $01
00084EF6 E10B                       	smpsAlterNote       $0B
00084EF8 E701                       	dc.b	smpsNoAttack, $01
00084EFA E10F                       	smpsAlterNote       $0F
00084EFC E701                       	dc.b	smpsNoAttack, $01
00084EFE E10B                       	smpsAlterNote       $0B
00084F00 E701                       	dc.b	smpsNoAttack, $01
00084F02 E105                       	smpsAlterNote       $05
00084F04 E701                       	dc.b	smpsNoAttack, $01
00084F06 E104                       	smpsAlterNote       $04
00084F08 E701                       	dc.b	smpsNoAttack, $01
00084F0A E108                       	smpsAlterNote       $08
00084F0C E701                       	dc.b	smpsNoAttack, $01
00084F0E E10E                       	smpsAlterNote       $0E
00084F10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F14 E10B                       	smpsAlterNote       $0B
00084F16 E701                       	dc.b	smpsNoAttack, $01
00084F18 E105                       	smpsAlterNote       $05
00084F1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F1E E10B                       	smpsAlterNote       $0B
00084F20 E701                       	dc.b	smpsNoAttack, $01
00084F22 E10E                       	smpsAlterNote       $0E
00084F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F28 E108                       	smpsAlterNote       $08
00084F2A E701                       	dc.b	smpsNoAttack, $01
00084F2C E105                       	smpsAlterNote       $05
00084F2E 8001                       	dc.b	nRst, $01
00084F32 E601                       	smpsAlterVol        $01
00084F34 E10B                       	smpsAlterNote       $0B
00084F36 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00084F42 8004                       	dc.b	nRst, $04
00084F46 E6FF                       	smpsAlterVol        $FF
00084F48 E10D                       	smpsAlterNote       $0D
00084F4A B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00084F52 E10C                       	smpsAlterNote       $0C
00084F54 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00084F59 E10D                       	smpsAlterNote       $0D
00084F5B B60D                       	dc.b	nF4, $0D
00084F5D E10A                       	smpsAlterNote       $0A
00084F5F E701                       	dc.b	smpsNoAttack, $01
00084F61 E106                       	smpsAlterNote       $06
00084F63 E701                       	dc.b	smpsNoAttack, $01
00084F65 E10A                       	smpsAlterNote       $0A
00084F67 E701                       	dc.b	smpsNoAttack, $01
00084F69 E110                       	smpsAlterNote       $10
00084F6B E701                       	dc.b	smpsNoAttack, $01
00084F6D E111                       	smpsAlterNote       $11
00084F6F E701                       	dc.b	smpsNoAttack, $01
00084F71 E10D                       	smpsAlterNote       $0D
00084F73 E701                       	dc.b	smpsNoAttack, $01
00084F75 E107                       	smpsAlterNote       $07
00084F77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F7B E10A                       	smpsAlterNote       $0A
00084F7D E701                       	dc.b	smpsNoAttack, $01
00084F7F E110                       	smpsAlterNote       $10
00084F81 E701                       	dc.b	smpsNoAttack, $01
00084F83 E111                       	smpsAlterNote       $11
00084F85 8001                       	dc.b	nRst, $01
00084F87 E10D                       	smpsAlterNote       $0D
00084F89 B80D                       	dc.b	nG4, $0D
00084F8B E10A                       	smpsAlterNote       $0A
00084F8D E701                       	dc.b	smpsNoAttack, $01
00084F8F E106                       	smpsAlterNote       $06
00084F91 E701                       	dc.b	smpsNoAttack, $01
00084F93 E10A                       	smpsAlterNote       $0A
00084F95 E701                       	dc.b	smpsNoAttack, $01
00084F97 E110                       	smpsAlterNote       $10
00084F99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F9D E10D                       	smpsAlterNote       $0D
00084F9F E701                       	dc.b	smpsNoAttack, $01
00084FA1 E107                       	smpsAlterNote       $07
00084FA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FA7 E10D                       	smpsAlterNote       $0D
00084FA9 E701                       	dc.b	smpsNoAttack, $01
00084FAB E110                       	smpsAlterNote       $10
00084FAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FB1 E10A                       	smpsAlterNote       $0A
00084FB3 E701                       	dc.b	smpsNoAttack, $01
00084FB5 E106                       	smpsAlterNote       $06
00084FB7 E701                       	dc.b	smpsNoAttack, $01
00084FB9 E107                       	smpsAlterNote       $07
00084FBB E701                       	dc.b	smpsNoAttack, $01
00084FBD E10D                       	smpsAlterNote       $0D
00084FBF E701                       	dc.b	smpsNoAttack, $01
00084FC1 E111                       	smpsAlterNote       $11
00084FC3 E701                       	dc.b	smpsNoAttack, $01
00084FC5 E10D                       	smpsAlterNote       $0D
00084FC7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084FCB E10F                       	smpsAlterNote       $0F
00084FCD BA02 8001                  	dc.b	nA4, $02, nRst, $01
00084FD1 E110                       	smpsAlterNote       $10
00084FD3 BB03                       	dc.b	nBb4, $03
00084FD5 E10F                       	smpsAlterNote       $0F
00084FD7 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00084FDD E110                       	smpsAlterNote       $10
00084FDF C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084FE3 E10F                       	smpsAlterNote       $0F
00084FE5 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00084FEB E110                       	smpsAlterNote       $10
00084FED D302 8001                  	dc.b	nBb6, $02, nRst, $01
00084FF1 E10F                       	smpsAlterNote       $0F
00084FF3 D20D                       	dc.b	nA6, $0D
00084FF5 E10C                       	smpsAlterNote       $0C
00084FF7 E701                       	dc.b	smpsNoAttack, $01
00084FF9 E108                       	smpsAlterNote       $08
00084FFB E701                       	dc.b	smpsNoAttack, $01
00084FFD E10C                       	smpsAlterNote       $0C
00084FFF E701                       	dc.b	smpsNoAttack, $01
00085001 E10F                       	smpsAlterNote       $0F
00085003 E701                       	dc.b	smpsNoAttack, $01
00085005 E113                       	smpsAlterNote       $13
00085007 E701                       	dc.b	smpsNoAttack, $01
00085009 E10F                       	smpsAlterNote       $0F
0008500B E701                       	dc.b	smpsNoAttack, $01
0008500D E109                       	smpsAlterNote       $09
0008500F E701                       	dc.b	smpsNoAttack, $01
00085011 E108                       	smpsAlterNote       $08
00085013 E701                       	dc.b	smpsNoAttack, $01
00085015 E10C                       	smpsAlterNote       $0C
00085017 E701                       	dc.b	smpsNoAttack, $01
00085019 E112                       	smpsAlterNote       $12
0008501B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008501F E10F                       	smpsAlterNote       $0F
00085021 E701                       	dc.b	smpsNoAttack, $01
00085023 E109                       	smpsAlterNote       $09
00085025 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008502B E10D                       	smpsAlterNote       $0D
0008502D CE07                       	dc.b	nF6, $07
0008502F E10C                       	smpsAlterNote       $0C
00085031 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085035 E10D                       	smpsAlterNote       $0D
00085037 CE03                       	dc.b	nF6, $03
00085039 E10C                       	smpsAlterNote       $0C
0008503B CC0D                       	dc.b	nEb6, $0D
0008503D E109                       	smpsAlterNote       $09
0008503F E701                       	dc.b	smpsNoAttack, $01
00085041 E106                       	smpsAlterNote       $06
00085043 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085047 E10C                       	smpsAlterNote       $0C
00085049 E701                       	dc.b	smpsNoAttack, $01
0008504B E110                       	smpsAlterNote       $10
0008504D E701                       	dc.b	smpsNoAttack, $01
0008504F E10F                       	smpsAlterNote       $0F
00085051 E701                       	dc.b	smpsNoAttack, $01
00085053 E109                       	smpsAlterNote       $09
00085055 E701                       	dc.b	smpsNoAttack, $01
00085057 E105                       	smpsAlterNote       $05
00085059 E701                       	dc.b	smpsNoAttack, $01
0008505B E109                       	smpsAlterNote       $09
0008505D E701                       	dc.b	smpsNoAttack, $01
0008505F E10C                       	smpsAlterNote       $0C
00085061 E701                       	dc.b	smpsNoAttack, $01
00085063 E110                       	smpsAlterNote       $10
00085065 E701                       	dc.b	smpsNoAttack, $01
00085067 E10C                       	smpsAlterNote       $0C
00085069 E701                       	dc.b	smpsNoAttack, $01
0008506B E106                       	smpsAlterNote       $06
0008506D E701                       	dc.b	smpsNoAttack, $01
0008506F E105                       	smpsAlterNote       $05
00085071 E701                       	dc.b	smpsNoAttack, $01
00085073 E109                       	smpsAlterNote       $09
00085075 E701                       	dc.b	smpsNoAttack, $01
00085077 E10F                       	smpsAlterNote       $0F
00085079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008507D E10C                       	smpsAlterNote       $0C
0008507F E701                       	dc.b	smpsNoAttack, $01
00085081 E10B                       	smpsAlterNote       $0B
00085083 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008508D E10F                       	smpsAlterNote       $0F
0008508F C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00085099 E10D                       	smpsAlterNote       $0D
0008509B C203                       	dc.b	nF5, $03
0008509D E10C                       	smpsAlterNote       $0C
0008509F C103 8001                  	dc.b	nE5, $03, nRst, $01
000850A3 E10D                       	smpsAlterNote       $0D
000850A5 C20D                       	dc.b	nF5, $0D
000850A7 E10C                       	smpsAlterNote       $0C
000850A9 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000850AD E10B                       	smpsAlterNote       $0B
000850AF BF0D                       	dc.b	nD5, $0D
000850B1 E108                       	smpsAlterNote       $08
000850B3 E701                       	dc.b	smpsNoAttack, $01
000850B5 E104                       	smpsAlterNote       $04
000850B7 E701                       	dc.b	smpsNoAttack, $01
000850B9 E108                       	smpsAlterNote       $08
000850BB E701                       	dc.b	smpsNoAttack, $01
000850BD E10E                       	smpsAlterNote       $0E
000850BF E701                       	dc.b	smpsNoAttack, $01
000850C1 E10F                       	smpsAlterNote       $0F
000850C3 E701                       	dc.b	smpsNoAttack, $01
000850C5 E10B                       	smpsAlterNote       $0B
000850C7 E701                       	dc.b	smpsNoAttack, $01
000850C9 E105                       	smpsAlterNote       $05
000850CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850CF E108                       	smpsAlterNote       $08
000850D1 E701                       	dc.b	smpsNoAttack, $01
000850D3 E10E                       	smpsAlterNote       $0E
000850D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850D9 E108                       	smpsAlterNote       $08
000850DB E701                       	dc.b	smpsNoAttack, $01
000850DD E105                       	smpsAlterNote       $05
000850DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850E3 E10B                       	smpsAlterNote       $0B
000850E5 E701                       	dc.b	smpsNoAttack, $01
000850E7 E10F                       	smpsAlterNote       $0F
000850E9 E701                       	dc.b	smpsNoAttack, $01
000850EB E10E                       	smpsAlterNote       $0E
000850ED E701                       	dc.b	smpsNoAttack, $01
000850EF E108                       	smpsAlterNote       $08
000850F1 E701                       	dc.b	smpsNoAttack, $01
000850F3 E104                       	smpsAlterNote       $04
000850F5 E701                       	dc.b	smpsNoAttack, $01
000850F7 E108                       	smpsAlterNote       $08
000850F9 E701                       	dc.b	smpsNoAttack, $01
000850FB E10B                       	smpsAlterNote       $0B
000850FD E701                       	dc.b	smpsNoAttack, $01
000850FF E10F                       	smpsAlterNote       $0F
00085101 E701                       	dc.b	smpsNoAttack, $01
00085103 E10B                       	smpsAlterNote       $0B
00085105 E701                       	dc.b	smpsNoAttack, $01
00085107 E105                       	smpsAlterNote       $05
00085109 E701                       	dc.b	smpsNoAttack, $01
0008510B E104                       	smpsAlterNote       $04
0008510D E701                       	dc.b	smpsNoAttack, $01
0008510F E108                       	smpsAlterNote       $08
00085111 E701                       	dc.b	smpsNoAttack, $01
00085113 E10E                       	smpsAlterNote       $0E
00085115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085119 E10B                       	smpsAlterNote       $0B
0008511B E701                       	dc.b	smpsNoAttack, $01
0008511D E105                       	smpsAlterNote       $05
0008511F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085123 E10B                       	smpsAlterNote       $0B
00085125 E701                       	dc.b	smpsNoAttack, $01
00085127 E10E                       	smpsAlterNote       $0E
00085129 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008512D E108                       	smpsAlterNote       $08
0008512F E701                       	dc.b	smpsNoAttack, $01
00085131 E104                       	smpsAlterNote       $04
00085133 E701                       	dc.b	smpsNoAttack, $01
00085135 E105                       	smpsAlterNote       $05
00085137 E701                       	dc.b	smpsNoAttack, $01
00085139 E10B                       	smpsAlterNote       $0B
0008513B E701                       	dc.b	smpsNoAttack, $01
0008513D E10F                       	smpsAlterNote       $0F
0008513F E701                       	dc.b	smpsNoAttack, $01
00085141 E10B                       	smpsAlterNote       $0B
00085143 E701                       	dc.b	smpsNoAttack, $01
00085145 E108                       	smpsAlterNote       $08
00085147 E701                       	dc.b	smpsNoAttack, $01
00085149 E104                       	smpsAlterNote       $04
0008514B E701                       	dc.b	smpsNoAttack, $01
0008514D E108                       	smpsAlterNote       $08
0008514F E701                       	dc.b	smpsNoAttack, $01
00085151 E10E                       	smpsAlterNote       $0E
00085153 E701                       	dc.b	smpsNoAttack, $01
00085155 E10F                       	smpsAlterNote       $0F
00085157 E701                       	dc.b	smpsNoAttack, $01
00085159 E10B                       	smpsAlterNote       $0B
0008515B E701                       	dc.b	smpsNoAttack, $01
0008515D E105                       	smpsAlterNote       $05
0008515F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085163 E108                       	smpsAlterNote       $08
00085165 E701                       	dc.b	smpsNoAttack, $01
00085167 E10E                       	smpsAlterNote       $0E
00085169 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008516D E108                       	smpsAlterNote       $08
0008516F E701                       	dc.b	smpsNoAttack, $01
00085171 E105                       	smpsAlterNote       $05
00085173 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085177 E10B                       	smpsAlterNote       $0B
00085179 E701                       	dc.b	smpsNoAttack, $01
0008517B E10F                       	smpsAlterNote       $0F
0008517D E701                       	dc.b	smpsNoAttack, $01
0008517F E10E                       	smpsAlterNote       $0E
00085181 E701                       	dc.b	smpsNoAttack, $01
00085183 E108                       	smpsAlterNote       $08
00085185 E701                       	dc.b	smpsNoAttack, $01
00085187 E104                       	smpsAlterNote       $04
00085189 E701                       	dc.b	smpsNoAttack, $01
0008518B E108                       	smpsAlterNote       $08
0008518D E701                       	dc.b	smpsNoAttack, $01
0008518F E10B                       	smpsAlterNote       $0B
00085191 E701                       	dc.b	smpsNoAttack, $01
00085193 E10F                       	smpsAlterNote       $0F
00085195 E701                       	dc.b	smpsNoAttack, $01
00085197 E10B                       	smpsAlterNote       $0B
00085199 E701                       	dc.b	smpsNoAttack, $01
0008519B E105                       	smpsAlterNote       $05
0008519D E701                       	dc.b	smpsNoAttack, $01
0008519F E104                       	smpsAlterNote       $04
000851A1 E701                       	dc.b	smpsNoAttack, $01
000851A3 E105                       	smpsAlterNote       $05
000851A5 8001                       	dc.b	nRst, $01
000851A7 E10D                       	smpsAlterNote       $0D
000851A9 C20D                       	dc.b	nF5, $0D
000851AB E107                       	smpsAlterNote       $07
000851AD E701                       	dc.b	smpsNoAttack, $01
000851AF E106                       	smpsAlterNote       $06
000851B1 E701                       	dc.b	smpsNoAttack, $01
000851B3 E10A                       	smpsAlterNote       $0A
000851B5 E701                       	dc.b	smpsNoAttack, $01
000851B7 E110                       	smpsAlterNote       $10
000851B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851BD E10D                       	smpsAlterNote       $0D
000851BF E701                       	dc.b	smpsNoAttack, $01
000851C1 E107                       	smpsAlterNote       $07
000851C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851C7 E10D                       	smpsAlterNote       $0D
000851C9 E701                       	dc.b	smpsNoAttack, $01
000851CB E110                       	smpsAlterNote       $10
000851CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851D1 E10A                       	smpsAlterNote       $0A
000851D3 E701                       	dc.b	smpsNoAttack, $01
000851D5 E106                       	smpsAlterNote       $06
000851D7 E701                       	dc.b	smpsNoAttack, $01
000851D9 E107                       	smpsAlterNote       $07
000851DB E701                       	dc.b	smpsNoAttack, $01
000851DD E10D                       	smpsAlterNote       $0D
000851DF E701                       	dc.b	smpsNoAttack, $01
000851E1 E111                       	smpsAlterNote       $11
000851E3 E701                       	dc.b	smpsNoAttack, $01
000851E5 E10D                       	smpsAlterNote       $0D
000851E7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000851EB E10C                       	smpsAlterNote       $0C
000851ED C10D                       	dc.b	nE5, $0D
000851EF E10D                       	smpsAlterNote       $0D
000851F1 C20A                       	dc.b	nF5, $0A
000851F3 E10C                       	smpsAlterNote       $0C
000851F5 C10E                       	dc.b	nE5, $0E
000851F7 E106                       	smpsAlterNote       $06
000851F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851FD E10C                       	smpsAlterNote       $0C
000851FF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085203 E10B                       	smpsAlterNote       $0B
00085205 BF0D                       	dc.b	nD5, $0D
00085207 E10C                       	smpsAlterNote       $0C
00085209 C107                       	dc.b	nE5, $07
0008520B E10D                       	smpsAlterNote       $0D
0008520D C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00085217 E110                       	smpsAlterNote       $10
00085219 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008521F E10F                       	smpsAlterNote       $0F
00085221 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00085229 E10D                       	smpsAlterNote       $0D
0008522B D003                       	dc.b	nG6, $03
0008522F E0C0                       	smpsPan             panCenter, $00
00085231 E6FF                       	smpsAlterVol        $FF
00085233 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008523F 8001                       	dc.b	nRst, $01
00085241 E10C                       	smpsAlterNote       $0C
00085243 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008524D E604                       	smpsAlterVol        $04
0008524F E10B                       	smpsAlterNote       $0B
00085251 B306 8001                  	dc.b	nD4, $06, nRst, $01
00085255 E10F                       	smpsAlterNote       $0F
00085257 AE03                       	dc.b	nA3, $03
00085259 E10D                       	smpsAlterNote       $0D
0008525B B603 8001                  	dc.b	nF4, $03, nRst, $01
0008525F E10C                       	smpsAlterNote       $0C
00085261 B506 8001                  	dc.b	nE4, $06, nRst, $01
00085265 E10B                       	smpsAlterNote       $0B
00085267 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008526B E10A                       	smpsAlterNote       $0A
0008526D B103                       	dc.b	nC4, $03
0008526F E110                       	smpsAlterNote       $10
00085271 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00085275 E10F                       	smpsAlterNote       $0F
00085277 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008527B E080                       	smpsPan             panLeft, $00
0008527D 01                         	dc.b	$01
00085280 E6FB                       	smpsAlterVol        $FB
00085282 E1E4                       	smpsAlterNote       $E4
00085284 C501                       	dc.b	nAb5, $01
00085286 E1F4                       	smpsAlterNote       $F4
00085288 E701                       	dc.b	smpsNoAttack, $01
0008528A E104                       	smpsAlterNote       $04
0008528C E701                       	dc.b	smpsNoAttack, $01
0008528E E114                       	smpsAlterNote       $14
00085290 E701                       	dc.b	smpsNoAttack, $01
00085292 E11C                       	smpsAlterNote       $1C
00085294 E701                       	dc.b	smpsNoAttack, $01
00085296 E1EF                       	smpsAlterNote       $EF
00085298 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008529B E1FF                       	smpsAlterNote       $FF
0008529D E701                       	dc.b	smpsNoAttack, $01
0008529F E10F                       	smpsAlterNote       $0F
000852A1 C606                       	dc.b	nA5, $06
000852A3 E109                       	smpsAlterNote       $09
000852A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852A9 E10F                       	smpsAlterNote       $0F
000852AB E701                       	dc.b	smpsNoAttack, $01
000852AD E112                       	smpsAlterNote       $12
000852AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852B3 E10C                       	smpsAlterNote       $0C
000852B5 E701                       	dc.b	smpsNoAttack, $01
000852B7 E108                       	smpsAlterNote       $08
000852B9 E701                       	dc.b	smpsNoAttack, $01
000852BB E109                       	smpsAlterNote       $09
000852BD E701                       	dc.b	smpsNoAttack, $01
000852BF E10F                       	smpsAlterNote       $0F
000852C1 E701                       	dc.b	smpsNoAttack, $01
000852C3 E113                       	smpsAlterNote       $13
000852C5 E701                       	dc.b	smpsNoAttack, $01
000852C7 E10F                       	smpsAlterNote       $0F
000852C9 E701                       	dc.b	smpsNoAttack, $01
000852CB E10C                       	smpsAlterNote       $0C
000852CD E701                       	dc.b	smpsNoAttack, $01
000852CF E108                       	smpsAlterNote       $08
000852D1 E701                       	dc.b	smpsNoAttack, $01
000852D3 E10C                       	smpsAlterNote       $0C
000852D5 E701                       	dc.b	smpsNoAttack, $01
000852D7 E112                       	smpsAlterNote       $12
000852D9 E701                       	dc.b	smpsNoAttack, $01
000852DB E113                       	smpsAlterNote       $13
000852DD E701                       	dc.b	smpsNoAttack, $01
000852DF E10F                       	smpsAlterNote       $0F
000852E1 E701                       	dc.b	smpsNoAttack, $01
000852E3 E109                       	smpsAlterNote       $09
000852E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852E9 E10C                       	smpsAlterNote       $0C
000852EB E701                       	dc.b	smpsNoAttack, $01
000852ED E112                       	smpsAlterNote       $12
000852EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852F3 E10C                       	smpsAlterNote       $0C
000852F5 E701                       	dc.b	smpsNoAttack, $01
000852F7 E109                       	smpsAlterNote       $09
000852F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852FD E10F                       	smpsAlterNote       $0F
000852FF E701                       	dc.b	smpsNoAttack, $01
00085301 E113                       	smpsAlterNote       $13
00085303 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085307 E10D                       	smpsAlterNote       $0D
00085309 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008530F E10C                       	smpsAlterNote       $0C
00085311 C102 8001                  	dc.b	nE5, $02, nRst, $01
00085315 E10D                       	smpsAlterNote       $0D
00085317 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008531B E10C                       	smpsAlterNote       $0C
0008531D C102                       	dc.b	nE5, $02
0008531F E10B                       	smpsAlterNote       $0B
00085321 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085325 E10C                       	smpsAlterNote       $0C
00085327 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008532B E10B                       	smpsAlterNote       $0B
0008532D BF02                       	dc.b	nD5, $02
0008532F E10A                       	smpsAlterNote       $0A
00085331 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008533B E110                       	smpsAlterNote       $10
0008533D BB02                       	dc.b	nBb4, $02
0008533F E10A                       	smpsAlterNote       $0A
00085341 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00085345 E110                       	smpsAlterNote       $10
00085347 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008534B E10F                       	smpsAlterNote       $0F
0008534D BA01 8001                  	dc.b	nA4, $01, nRst, $01
00085351 E110                       	smpsAlterNote       $10
00085353 BB02                       	dc.b	nBb4, $02
00085355 E10F                       	smpsAlterNote       $0F
00085357 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00085361 E10C                       	smpsAlterNote       $0C
00085363 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008536B E10B                       	smpsAlterNote       $0B
0008536D BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00085371 E10F                       	smpsAlterNote       $0F
00085373 BA02                       	dc.b	nA4, $02
00085377 E0C0                       	smpsPan             panCenter, $00
00085379 E601                       	smpsAlterVol        $01
0008537B E109                       	smpsAlterNote       $09
0008537D AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00085389 E108                       	smpsAlterNote       $08
0008538B A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00085391 E107                       	smpsAlterNote       $07
00085393 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00085399 E109                       	smpsAlterNote       $09
0008539B B603 8001                  	dc.b	nF4, $03, nRst, $01
0008539F E108                       	smpsAlterNote       $08
000853A1 B506 8001                  	dc.b	nE4, $06, nRst, $01
000853A5 E107                       	smpsAlterNote       $07
000853A7 B302 8001                  	dc.b	nD4, $02, nRst, $01
000853AB E106                       	smpsAlterNote       $06
000853AD B103                       	dc.b	nC4, $03
000853AF E10C                       	smpsAlterNote       $0C
000853B1 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000853B7 E080                       	smpsPan             panLeft, $00
000853B9 07                         	dc.b	$07
000853BA E6FE                       	smpsAlterVol        $FE
000853BC E10B                       	smpsAlterNote       $0B
000853BE B20D                       	dc.b	nCs4, $0D
000853C0 E105                       	smpsAlterNote       $05
000853C2 E701                       	dc.b	smpsNoAttack, $01
000853C4 E104                       	smpsAlterNote       $04
000853C6 E701                       	dc.b	smpsNoAttack, $01
000853C8 E108                       	smpsAlterNote       $08
000853CA E701                       	dc.b	smpsNoAttack, $01
000853CC E10E                       	smpsAlterNote       $0E
000853CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853D2 E10B                       	smpsAlterNote       $0B
000853D4 E701                       	dc.b	smpsNoAttack, $01
000853D6 E105                       	smpsAlterNote       $05
000853D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853DC E10B                       	smpsAlterNote       $0B
000853DE E701                       	dc.b	smpsNoAttack, $01
000853E0 E10E                       	smpsAlterNote       $0E
000853E2 E701                       	dc.b	smpsNoAttack, $01
000853E4 E10F                       	smpsAlterNote       $0F
000853E6 8001                       	dc.b	nRst, $01
000853E8 E10B                       	smpsAlterNote       $0B
000853EA B30D                       	dc.b	nD4, $0D
000853EC E105                       	smpsAlterNote       $05
000853EE E701                       	dc.b	smpsNoAttack, $01
000853F0 E104                       	smpsAlterNote       $04
000853F2 E701                       	dc.b	smpsNoAttack, $01
000853F4 E108                       	smpsAlterNote       $08
000853F6 E701                       	dc.b	smpsNoAttack, $01
000853F8 E10E                       	smpsAlterNote       $0E
000853FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853FE E10B                       	smpsAlterNote       $0B
00085400 E701                       	dc.b	smpsNoAttack, $01
00085402 E105                       	smpsAlterNote       $05
00085404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085408 E10B                       	smpsAlterNote       $0B
0008540A E701                       	dc.b	smpsNoAttack, $01
0008540C E10E                       	smpsAlterNote       $0E
0008540E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085412 E108                       	smpsAlterNote       $08
00085414 E701                       	dc.b	smpsNoAttack, $01
00085416 E104                       	smpsAlterNote       $04
00085418 E701                       	dc.b	smpsNoAttack, $01
0008541A E105                       	smpsAlterNote       $05
0008541C E701                       	dc.b	smpsNoAttack, $01
0008541E E10B                       	smpsAlterNote       $0B
00085420 E701                       	dc.b	smpsNoAttack, $01
00085422 E10F                       	smpsAlterNote       $0F
00085424 E701                       	dc.b	smpsNoAttack, $01
00085426 E10B                       	smpsAlterNote       $0B
00085428 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008542C E10C                       	smpsAlterNote       $0C
0008542E B50D                       	dc.b	nE4, $0D
00085430 E106                       	smpsAlterNote       $06
00085432 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085436 E10C                       	smpsAlterNote       $0C
00085438 E701                       	dc.b	smpsNoAttack, $01
0008543A E10F                       	smpsAlterNote       $0F
0008543C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085440 E109                       	smpsAlterNote       $09
00085442 E701                       	dc.b	smpsNoAttack, $01
00085444 E105                       	smpsAlterNote       $05
00085446 E701                       	dc.b	smpsNoAttack, $01
00085448 E106                       	smpsAlterNote       $06
0008544A E701                       	dc.b	smpsNoAttack, $01
0008544C E10C                       	smpsAlterNote       $0C
0008544E E701                       	dc.b	smpsNoAttack, $01
00085450 E110                       	smpsAlterNote       $10
00085452 E701                       	dc.b	smpsNoAttack, $01
00085454 E10B                       	smpsAlterNote       $0B
00085456 B30E                       	dc.b	nD4, $0E
00085458 E105                       	smpsAlterNote       $05
0008545A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008545E E10B                       	smpsAlterNote       $0B
00085460 E701                       	dc.b	smpsNoAttack, $01
00085462 E10E                       	smpsAlterNote       $0E
00085464 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085468 E108                       	smpsAlterNote       $08
0008546A E701                       	dc.b	smpsNoAttack, $01
0008546C E104                       	smpsAlterNote       $04
0008546E E701                       	dc.b	smpsNoAttack, $01
00085470 E105                       	smpsAlterNote       $05
00085472 E701                       	dc.b	smpsNoAttack, $01
00085474 E10B                       	smpsAlterNote       $0B
00085476 E701                       	dc.b	smpsNoAttack, $01
00085478 E10F                       	smpsAlterNote       $0F
0008547A E701                       	dc.b	smpsNoAttack, $01
0008547C E10B                       	smpsAlterNote       $0B
0008547E E701                       	dc.b	smpsNoAttack, $01
00085480 E108                       	smpsAlterNote       $08
00085482 E701                       	dc.b	smpsNoAttack, $01
00085484 E104                       	smpsAlterNote       $04
00085486 E701                       	dc.b	smpsNoAttack, $01
00085488 E108                       	smpsAlterNote       $08
0008548A E701                       	dc.b	smpsNoAttack, $01
0008548C E10E                       	smpsAlterNote       $0E
0008548E E701                       	dc.b	smpsNoAttack, $01
00085490 E10F                       	smpsAlterNote       $0F
00085492 E701                       	dc.b	smpsNoAttack, $01
00085494 E10B                       	smpsAlterNote       $0B
00085496 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008549A E108                       	smpsAlterNote       $08
0008549C E701                       	dc.b	smpsNoAttack, $01
0008549E E105                       	smpsAlterNote       $05
000854A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854A4 E10B                       	smpsAlterNote       $0B
000854A6 E701                       	dc.b	smpsNoAttack, $01
000854A8 E10F                       	smpsAlterNote       $0F
000854AA E701                       	dc.b	smpsNoAttack, $01
000854AC E10E                       	smpsAlterNote       $0E
000854AE E701                       	dc.b	smpsNoAttack, $01
000854B0 E108                       	smpsAlterNote       $08
000854B2 E701                       	dc.b	smpsNoAttack, $01
000854B4 E104                       	smpsAlterNote       $04
000854B6 E701                       	dc.b	smpsNoAttack, $01
000854B8 E108                       	smpsAlterNote       $08
000854BA E701                       	dc.b	smpsNoAttack, $01
000854BC E10B                       	smpsAlterNote       $0B
000854BE E701                       	dc.b	smpsNoAttack, $01
000854C0 E10F                       	smpsAlterNote       $0F
000854C2 E701                       	dc.b	smpsNoAttack, $01
000854C4 E10B                       	smpsAlterNote       $0B
000854C6 B30D                       	dc.b	nD4, $0D
000854C8 E108                       	smpsAlterNote       $08
000854CA E701                       	dc.b	smpsNoAttack, $01
000854CC E105                       	smpsAlterNote       $05
000854CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854D2 E10B                       	smpsAlterNote       $0B
000854D4 E701                       	dc.b	smpsNoAttack, $01
000854D6 E10F                       	smpsAlterNote       $0F
000854D8 E701                       	dc.b	smpsNoAttack, $01
000854DA E10E                       	smpsAlterNote       $0E
000854DC E701                       	dc.b	smpsNoAttack, $01
000854DE E108                       	smpsAlterNote       $08
000854E0 E701                       	dc.b	smpsNoAttack, $01
000854E2 E104                       	smpsAlterNote       $04
000854E4 E701                       	dc.b	smpsNoAttack, $01
000854E6 E108                       	smpsAlterNote       $08
000854E8 E701                       	dc.b	smpsNoAttack, $01
000854EA E10B                       	smpsAlterNote       $0B
000854EC E701                       	dc.b	smpsNoAttack, $01
000854EE E10F                       	smpsAlterNote       $0F
000854F0 E701                       	dc.b	smpsNoAttack, $01
000854F2 E10B                       	smpsAlterNote       $0B
000854F4 E701                       	dc.b	smpsNoAttack, $01
000854F6 E105                       	smpsAlterNote       $05
000854F8 E701                       	dc.b	smpsNoAttack, $01
000854FA E104                       	smpsAlterNote       $04
000854FC E701                       	dc.b	smpsNoAttack, $01
000854FE E108                       	smpsAlterNote       $08
00085500 E701                       	dc.b	smpsNoAttack, $01
00085502 E10E                       	smpsAlterNote       $0E
00085504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085508 E10B                       	smpsAlterNote       $0B
0008550A 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008550E E108                       	smpsAlterNote       $08
00085510 E701                       	dc.b	smpsNoAttack, $01
00085512 E104                       	smpsAlterNote       $04
00085514 E701                       	dc.b	smpsNoAttack, $01
00085516 E108                       	smpsAlterNote       $08
00085518 E701                       	dc.b	smpsNoAttack, $01
0008551A E10B                       	smpsAlterNote       $0B
0008551C E701                       	dc.b	smpsNoAttack, $01
00085520 E0C0                       	smpsPan             panCenter, $00
00085522 E601                       	smpsAlterVol        $01
00085524 E108                       	smpsAlterNote       $08
00085526 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00085532 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008553A E080                       	smpsPan             panLeft, $00
0008553C 07                         	dc.b	$07
0008553D E6FF                       	smpsAlterVol        $FF
0008553F E10D                       	smpsAlterNote       $0D
00085541 B60D                       	dc.b	nF4, $0D
00085543 E10A                       	smpsAlterNote       $0A
00085545 E701                       	dc.b	smpsNoAttack, $01
00085547 E106                       	smpsAlterNote       $06
00085549 E701                       	dc.b	smpsNoAttack, $01
0008554B E10A                       	smpsAlterNote       $0A
0008554D E701                       	dc.b	smpsNoAttack, $01
0008554F E110                       	smpsAlterNote       $10
00085551 E701                       	dc.b	smpsNoAttack, $01
00085553 E111                       	smpsAlterNote       $11
00085555 E701                       	dc.b	smpsNoAttack, $01
00085557 E10D                       	smpsAlterNote       $0D
00085559 E701                       	dc.b	smpsNoAttack, $01
0008555B E107                       	smpsAlterNote       $07
0008555D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085561 E10A                       	smpsAlterNote       $0A
00085563 E701                       	dc.b	smpsNoAttack, $01
00085565 E110                       	smpsAlterNote       $10
00085567 E701                       	dc.b	smpsNoAttack, $01
00085569 E111                       	smpsAlterNote       $11
0008556B 8001                       	dc.b	nRst, $01
0008556D E10D                       	smpsAlterNote       $0D
0008556F B80D                       	dc.b	nG4, $0D
00085571 E10A                       	smpsAlterNote       $0A
00085573 E701                       	dc.b	smpsNoAttack, $01
00085575 E106                       	smpsAlterNote       $06
00085577 E701                       	dc.b	smpsNoAttack, $01
00085579 E10A                       	smpsAlterNote       $0A
0008557B E701                       	dc.b	smpsNoAttack, $01
0008557D E110                       	smpsAlterNote       $10
0008557F E701                       	dc.b	smpsNoAttack, $01
00085581 E111                       	smpsAlterNote       $11
00085583 E701                       	dc.b	smpsNoAttack, $01
00085585 E10D                       	smpsAlterNote       $0D
00085587 E701                       	dc.b	smpsNoAttack, $01
00085589 E107                       	smpsAlterNote       $07
0008558B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008558F E10D                       	smpsAlterNote       $0D
00085591 E701                       	dc.b	smpsNoAttack, $01
00085593 E110                       	smpsAlterNote       $10
00085595 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085599 E10A                       	smpsAlterNote       $0A
0008559B E701                       	dc.b	smpsNoAttack, $01
0008559D E106                       	smpsAlterNote       $06
0008559F E701                       	dc.b	smpsNoAttack, $01
000855A1 E107                       	smpsAlterNote       $07
000855A3 E701                       	dc.b	smpsNoAttack, $01
000855A5 E10D                       	smpsAlterNote       $0D
000855A7 E701                       	dc.b	smpsNoAttack, $01
000855A9 E111                       	smpsAlterNote       $11
000855AB E701                       	dc.b	smpsNoAttack, $01
000855AD E10D                       	smpsAlterNote       $0D
000855AF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000855B3 E10F                       	smpsAlterNote       $0F
000855B5 BA0D                       	dc.b	nA4, $0D
000855B7 E109                       	smpsAlterNote       $09
000855B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855BD E10C                       	smpsAlterNote       $0C
000855BF E701                       	dc.b	smpsNoAttack, $01
000855C1 E112                       	smpsAlterNote       $12
000855C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855C7 E10C                       	smpsAlterNote       $0C
000855C9 E701                       	dc.b	smpsNoAttack, $01
000855CB E109                       	smpsAlterNote       $09
000855CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855D1 E10F                       	smpsAlterNote       $0F
000855D3 E701                       	dc.b	smpsNoAttack, $01
000855D5 E113                       	smpsAlterNote       $13
000855D7 E701                       	dc.b	smpsNoAttack, $01
000855D9 E112                       	smpsAlterNote       $12
000855DB E701                       	dc.b	smpsNoAttack, $01
000855DD E10C                       	smpsAlterNote       $0C
000855DF E701                       	dc.b	smpsNoAttack, $01
000855E1 E108                       	smpsAlterNote       $08
000855E3 E701                       	dc.b	smpsNoAttack, $01
000855E5 E10C                       	smpsAlterNote       $0C
000855E7 E701                       	dc.b	smpsNoAttack, $01
000855E9 E10F                       	smpsAlterNote       $0F
000855EB E701                       	dc.b	smpsNoAttack, $01
000855ED E113                       	smpsAlterNote       $13
000855EF E701                       	dc.b	smpsNoAttack, $01
000855F1 E10F                       	smpsAlterNote       $0F
000855F3 E701                       	dc.b	smpsNoAttack, $01
000855F5 E109                       	smpsAlterNote       $09
000855F7 E701                       	dc.b	smpsNoAttack, $01
000855F9 E108                       	smpsAlterNote       $08
000855FB E701                       	dc.b	smpsNoAttack, $01
000855FD E10C                       	smpsAlterNote       $0C
000855FF E701                       	dc.b	smpsNoAttack, $01
00085601 E112                       	smpsAlterNote       $12
00085603 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085607 E10F                       	smpsAlterNote       $0F
00085609 E701                       	dc.b	smpsNoAttack, $01
0008560B E109                       	smpsAlterNote       $09
0008560D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085611 E10F                       	smpsAlterNote       $0F
00085613 E701                       	dc.b	smpsNoAttack, $01
00085615 E112                       	smpsAlterNote       $12
00085617 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008561B E10C                       	smpsAlterNote       $0C
0008561D E701                       	dc.b	smpsNoAttack, $01
0008561F E108                       	smpsAlterNote       $08
00085621 E701                       	dc.b	smpsNoAttack, $01
00085623 E109                       	smpsAlterNote       $09
00085625 E701                       	dc.b	smpsNoAttack, $01
00085627 E10C                       	smpsAlterNote       $0C
00085629 B50A                       	dc.b	nE4, $0A
0008562B E10D                       	smpsAlterNote       $0D
0008562D B60E                       	dc.b	nF4, $0E
0008562F E107                       	smpsAlterNote       $07
00085631 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085635 E10D                       	smpsAlterNote       $0D
00085637 E701                       	dc.b	smpsNoAttack, $01
00085639 E110                       	smpsAlterNote       $10
0008563B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008563F E10A                       	smpsAlterNote       $0A
00085641 E701                       	dc.b	smpsNoAttack, $01
00085643 E106                       	smpsAlterNote       $06
00085645 E701                       	dc.b	smpsNoAttack, $01
00085647 E107                       	smpsAlterNote       $07
00085649 E701                       	dc.b	smpsNoAttack, $01
0008564B E10D                       	smpsAlterNote       $0D
0008564D E701                       	dc.b	smpsNoAttack, $01
0008564F E111                       	smpsAlterNote       $11
00085651 E701                       	dc.b	smpsNoAttack, $01
00085653 E10D                       	smpsAlterNote       $0D
00085655 B80D                       	dc.b	nG4, $0D
00085657 E10A                       	smpsAlterNote       $0A
00085659 E701                       	dc.b	smpsNoAttack, $01
0008565B E107                       	smpsAlterNote       $07
0008565D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085661 E10D                       	smpsAlterNote       $0D
00085663 E701                       	dc.b	smpsNoAttack, $01
00085665 E111                       	smpsAlterNote       $11
00085667 E701                       	dc.b	smpsNoAttack, $01
00085669 E110                       	smpsAlterNote       $10
0008566B E701                       	dc.b	smpsNoAttack, $01
0008566D E10A                       	smpsAlterNote       $0A
0008566F E701                       	dc.b	smpsNoAttack, $01
00085671 E106                       	smpsAlterNote       $06
00085673 E701                       	dc.b	smpsNoAttack, $01
00085675 E10A                       	smpsAlterNote       $0A
00085677 E701                       	dc.b	smpsNoAttack, $01
00085679 E10D                       	smpsAlterNote       $0D
0008567B E701                       	dc.b	smpsNoAttack, $01
0008567D E111                       	smpsAlterNote       $11
0008567F E701                       	dc.b	smpsNoAttack, $01
00085681 E10D                       	smpsAlterNote       $0D
00085683 E701                       	dc.b	smpsNoAttack, $01
00085685 E107                       	smpsAlterNote       $07
00085687 E701                       	dc.b	smpsNoAttack, $01
00085689 E106                       	smpsAlterNote       $06
0008568B E701                       	dc.b	smpsNoAttack, $01
0008568D E10A                       	smpsAlterNote       $0A
0008568F E701                       	dc.b	smpsNoAttack, $01
00085691 E110                       	smpsAlterNote       $10
00085693 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085697 E10D                       	smpsAlterNote       $0D
00085699 E701                       	dc.b	smpsNoAttack, $01
0008569B E10F                       	smpsAlterNote       $0F
0008569D BA0D                       	dc.b	nA4, $0D
0008569F E10C                       	smpsAlterNote       $0C
000856A1 E701                       	dc.b	smpsNoAttack, $01
000856A3 E108                       	smpsAlterNote       $08
000856A5 E701                       	dc.b	smpsNoAttack, $01
000856A7 E109                       	smpsAlterNote       $09
000856A9 E701                       	dc.b	smpsNoAttack, $01
000856AB E10F                       	smpsAlterNote       $0F
000856AD E701                       	dc.b	smpsNoAttack, $01
000856AF E113                       	smpsAlterNote       $13
000856B1 E701                       	dc.b	smpsNoAttack, $01
000856B3 E10F                       	smpsAlterNote       $0F
000856B5 E701                       	dc.b	smpsNoAttack, $01
000856B7 E10C                       	smpsAlterNote       $0C
000856B9 E701                       	dc.b	smpsNoAttack, $01
000856BB E108                       	smpsAlterNote       $08
000856BD E701                       	dc.b	smpsNoAttack, $01
000856BF E10C                       	smpsAlterNote       $0C
000856C1 E701                       	dc.b	smpsNoAttack, $01
000856C3 E112                       	smpsAlterNote       $12
000856C5 E701                       	dc.b	smpsNoAttack, $01
000856C7 E113                       	smpsAlterNote       $13
000856C9 E701                       	dc.b	smpsNoAttack, $01
000856CB E10F                       	smpsAlterNote       $0F
000856CD E701                       	dc.b	smpsNoAttack, $01
000856CF E109                       	smpsAlterNote       $09
000856D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856D5 E10C                       	smpsAlterNote       $0C
000856D7 E701                       	dc.b	smpsNoAttack, $01
000856D9 E112                       	smpsAlterNote       $12
000856DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856DF E10C                       	smpsAlterNote       $0C
000856E1 E701                       	dc.b	smpsNoAttack, $01
000856E3 E109                       	smpsAlterNote       $09
000856E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856E9 E10F                       	smpsAlterNote       $0F
000856EB E701                       	dc.b	smpsNoAttack, $01
000856ED E113                       	smpsAlterNote       $13
000856EF E701                       	dc.b	smpsNoAttack, $01
000856F1 E112                       	smpsAlterNote       $12
000856F3 E701                       	dc.b	smpsNoAttack, $01
000856F5 E10C                       	smpsAlterNote       $0C
000856F7 E701                       	dc.b	smpsNoAttack, $01
000856F9 E109                       	smpsAlterNote       $09
000856FB 8001                       	dc.b	nRst, $01
000856FD E10D                       	smpsAlterNote       $0D
000856FF B60A                       	dc.b	nF4, $0A
00085701 E10C                       	smpsAlterNote       $0C
00085703 B506 8001                  	dc.b	nE4, $06, nRst, $01
00085707 E10B                       	smpsAlterNote       $0B
00085709 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008570D E10C                       	smpsAlterNote       $0C
0008570F B503                       	dc.b	nE4, $03
00085711 E10D                       	smpsAlterNote       $0D
00085713 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008571D E10C                       	smpsAlterNote       $0C
0008571F E701                       	dc.b	smpsNoAttack, $01
00085721 E108                       	smpsAlterNote       $08
00085723 E701                       	dc.b	smpsNoAttack, $01
00085725 E10C                       	smpsAlterNote       $0C
00085727 E701                       	dc.b	smpsNoAttack, $01
00085729 E112                       	smpsAlterNote       $12
0008572B E701                       	dc.b	smpsNoAttack, $01
0008572D E113                       	smpsAlterNote       $13
0008572F E701                       	dc.b	smpsNoAttack, $01
00085731 E10F                       	smpsAlterNote       $0F
00085733 E701                       	dc.b	smpsNoAttack, $01
00085735 E109                       	smpsAlterNote       $09
00085737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008573B E10C                       	smpsAlterNote       $0C
0008573D E701                       	dc.b	smpsNoAttack, $01
0008573F E112                       	smpsAlterNote       $12
00085741 E701                       	dc.b	smpsNoAttack, $01
00085743 E113                       	smpsAlterNote       $13
00085745 8001                       	dc.b	nRst, $01
00085747 E10D                       	smpsAlterNote       $0D
00085749 C20D                       	dc.b	nF5, $0D
0008574B E10A                       	smpsAlterNote       $0A
0008574D E701                       	dc.b	smpsNoAttack, $01
0008574F E106                       	smpsAlterNote       $06
00085751 E701                       	dc.b	smpsNoAttack, $01
00085753 E10A                       	smpsAlterNote       $0A
00085755 E701                       	dc.b	smpsNoAttack, $01
00085757 E110                       	smpsAlterNote       $10
00085759 E701                       	dc.b	smpsNoAttack, $01
0008575B E111                       	smpsAlterNote       $11
0008575D E701                       	dc.b	smpsNoAttack, $01
0008575F E10D                       	smpsAlterNote       $0D
00085761 E701                       	dc.b	smpsNoAttack, $01
00085763 E107                       	smpsAlterNote       $07
00085765 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085769 E10A                       	smpsAlterNote       $0A
0008576B E701                       	dc.b	smpsNoAttack, $01
0008576D E110                       	smpsAlterNote       $10
0008576F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085773 E10A                       	smpsAlterNote       $0A
00085775 E701                       	dc.b	smpsNoAttack, $01
00085777 E107                       	smpsAlterNote       $07
00085779 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008577D E10D                       	smpsAlterNote       $0D
0008577F E701                       	dc.b	smpsNoAttack, $01
00085781 E111                       	smpsAlterNote       $11
00085783 E701                       	dc.b	smpsNoAttack, $01
00085785 E110                       	smpsAlterNote       $10
00085787 E701                       	dc.b	smpsNoAttack, $01
00085789 E10A                       	smpsAlterNote       $0A
0008578B E701                       	dc.b	smpsNoAttack, $01
0008578D E106                       	smpsAlterNote       $06
0008578F E701                       	dc.b	smpsNoAttack, $01
00085791 E10A                       	smpsAlterNote       $0A
00085793 E701                       	dc.b	smpsNoAttack, $01
00085795 E10D                       	smpsAlterNote       $0D
00085797 E701                       	dc.b	smpsNoAttack, $01
00085799 E111                       	smpsAlterNote       $11
0008579B E701                       	dc.b	smpsNoAttack, $01
0008579D E10D                       	smpsAlterNote       $0D
0008579F E701                       	dc.b	smpsNoAttack, $01
000857A1 E107                       	smpsAlterNote       $07
000857A3 E701                       	dc.b	smpsNoAttack, $01
000857A5 E106                       	smpsAlterNote       $06
000857A7 E701                       	dc.b	smpsNoAttack, $01
000857A9 E10A                       	smpsAlterNote       $0A
000857AB E701                       	dc.b	smpsNoAttack, $01
000857AD E110                       	smpsAlterNote       $10
000857AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857B3 E10D                       	smpsAlterNote       $0D
000857B5 E701                       	dc.b	smpsNoAttack, $01
000857B7 E107                       	smpsAlterNote       $07
000857B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857BD E10D                       	smpsAlterNote       $0D
000857BF E701                       	dc.b	smpsNoAttack, $01
000857C1 E110                       	smpsAlterNote       $10
000857C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857C7 E10A                       	smpsAlterNote       $0A
000857C9 E701                       	dc.b	smpsNoAttack, $01
000857CB E106                       	smpsAlterNote       $06
000857CD E701                       	dc.b	smpsNoAttack, $01
000857CF E107                       	smpsAlterNote       $07
000857D1 E701                       	dc.b	smpsNoAttack, $01
000857D3 E10D                       	smpsAlterNote       $0D
000857D5 E701                       	dc.b	smpsNoAttack, $01
000857D7 E111                       	smpsAlterNote       $11
000857D9 E701                       	dc.b	smpsNoAttack, $01
000857DB E10D                       	smpsAlterNote       $0D
000857DD E701                       	dc.b	smpsNoAttack, $01
000857DF E10A                       	smpsAlterNote       $0A
000857E1 E701                       	dc.b	smpsNoAttack, $01
000857E3 E107                       	smpsAlterNote       $07
000857E5 8001                       	dc.b	nRst, $01
000857E7 E10D                       	smpsAlterNote       $0D
000857E9 C206 8001                  	dc.b	nF5, $06, nRst, $01
000857EF E601                       	smpsAlterVol        $01
000857F1 E110                       	smpsAlterNote       $10
000857F3 BB0D                       	dc.b	nBb4, $0D
000857F5 E10A                       	smpsAlterNote       $0A
000857F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857FB E110                       	smpsAlterNote       $10
000857FD E701                       	dc.b	smpsNoAttack, $01
000857FF E113                       	smpsAlterNote       $13
00085801 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085805 E10D                       	smpsAlterNote       $0D
00085807 E701                       	dc.b	smpsNoAttack, $01
00085809 E109                       	smpsAlterNote       $09
0008580B E701                       	dc.b	smpsNoAttack, $01
0008580D E10A                       	smpsAlterNote       $0A
0008580F E701                       	dc.b	smpsNoAttack, $01
00085811 E110                       	smpsAlterNote       $10
00085813 E701                       	dc.b	smpsNoAttack, $01
00085815 E114                       	smpsAlterNote       $14
00085817 E701                       	dc.b	smpsNoAttack, $01
00085819 E110                       	smpsAlterNote       $10
0008581B E701                       	dc.b	smpsNoAttack, $01
0008581D E10D                       	smpsAlterNote       $0D
0008581F E701                       	dc.b	smpsNoAttack, $01
00085821 E109                       	smpsAlterNote       $09
00085823 E701                       	dc.b	smpsNoAttack, $01
00085825 E10A                       	smpsAlterNote       $0A
00085827 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008582B E107                       	smpsAlterNote       $07
0008582D E701                       	dc.b	smpsNoAttack, $01
0008582F E103                       	smpsAlterNote       $03
00085831 E701                       	dc.b	smpsNoAttack, $01
00085833 E107                       	smpsAlterNote       $07
00085835 E701                       	dc.b	smpsNoAttack, $01
00085837 E10D                       	smpsAlterNote       $0D
00085839 E701                       	dc.b	smpsNoAttack, $01
0008583B E10E                       	smpsAlterNote       $0E
0008583D E701                       	dc.b	smpsNoAttack, $01
0008583F E10A                       	smpsAlterNote       $0A
00085841 E701                       	dc.b	smpsNoAttack, $01
00085843 E104                       	smpsAlterNote       $04
00085845 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085849 E107                       	smpsAlterNote       $07
0008584B E701                       	dc.b	smpsNoAttack, $01
0008584D E10D                       	smpsAlterNote       $0D
0008584F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085853 E107                       	smpsAlterNote       $07
00085855 E701                       	dc.b	smpsNoAttack, $01
00085857 E104                       	smpsAlterNote       $04
00085859 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008585D E10B                       	smpsAlterNote       $0B
0008585F BF0D                       	dc.b	nD5, $0D
00085861 E108                       	smpsAlterNote       $08
00085863 E701                       	dc.b	smpsNoAttack, $01
00085865 E105                       	smpsAlterNote       $05
00085867 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008586B E10B                       	smpsAlterNote       $0B
0008586D E701                       	dc.b	smpsNoAttack, $01
0008586F E10F                       	smpsAlterNote       $0F
00085871 E701                       	dc.b	smpsNoAttack, $01
00085873 E10E                       	smpsAlterNote       $0E
00085875 E701                       	dc.b	smpsNoAttack, $01
00085877 E108                       	smpsAlterNote       $08
00085879 E701                       	dc.b	smpsNoAttack, $01
0008587B E104                       	smpsAlterNote       $04
0008587D E701                       	dc.b	smpsNoAttack, $01
0008587F E108                       	smpsAlterNote       $08
00085881 E701                       	dc.b	smpsNoAttack, $01
00085883 E10B                       	smpsAlterNote       $0B
00085885 E701                       	dc.b	smpsNoAttack, $01
00085887 E10F                       	smpsAlterNote       $0F
00085889 E701                       	dc.b	smpsNoAttack, $01
0008588B E10B                       	smpsAlterNote       $0B
0008588D E701                       	dc.b	smpsNoAttack, $01
0008588F E105                       	smpsAlterNote       $05
00085891 E701                       	dc.b	smpsNoAttack, $01
00085893 E104                       	smpsAlterNote       $04
00085895 E701                       	dc.b	smpsNoAttack, $01
00085897 E105                       	smpsAlterNote       $05
00085899 8001                       	dc.b	nRst, $01
0008589B E10C                       	smpsAlterNote       $0C
0008589D C10C                       	dc.b	nE5, $0C
0008589F E10D                       	smpsAlterNote       $0D
000858A1 C201                       	dc.b	nF5, $01
000858A3 E10E                       	smpsAlterNote       $0E
000858A5 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000858A9 E10D                       	smpsAlterNote       $0D
000858AB C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000858AF E10A                       	smpsAlterNote       $0A
000858B1 E701                       	dc.b	smpsNoAttack, $01
000858B3 E106                       	smpsAlterNote       $06
000858B5 E701                       	dc.b	smpsNoAttack, $01
000858B7 E10A                       	smpsAlterNote       $0A
000858B9 E701                       	dc.b	smpsNoAttack, $01
000858BB E10D                       	smpsAlterNote       $0D
000858BD E701                       	dc.b	smpsNoAttack, $01
000858BF E111                       	smpsAlterNote       $11
000858C1 E701                       	dc.b	smpsNoAttack, $01
000858C3 E10D                       	smpsAlterNote       $0D
000858C5 E701                       	dc.b	smpsNoAttack, $01
000858C7 E107                       	smpsAlterNote       $07
000858C9 E701                       	dc.b	smpsNoAttack, $01
000858CB E106                       	smpsAlterNote       $06
000858CD E701                       	dc.b	smpsNoAttack, $01
000858CF E10A                       	smpsAlterNote       $0A
000858D1 E701                       	dc.b	smpsNoAttack, $01
000858D3 E110                       	smpsAlterNote       $10
000858D5 E701                       	dc.b	smpsNoAttack, $01
000858D7 E111                       	smpsAlterNote       $11
000858D9 8001                       	dc.b	nRst, $01
000858DB E10D                       	smpsAlterNote       $0D
000858DD C40D                       	dc.b	nG5, $0D
000858DF E10A                       	smpsAlterNote       $0A
000858E1 E701                       	dc.b	smpsNoAttack, $01
000858E3 E106                       	smpsAlterNote       $06
000858E5 E701                       	dc.b	smpsNoAttack, $01
000858E7 E10A                       	smpsAlterNote       $0A
000858E9 E701                       	dc.b	smpsNoAttack, $01
000858EB E10D                       	smpsAlterNote       $0D
000858ED E701                       	dc.b	smpsNoAttack, $01
000858EF E10C                       	smpsAlterNote       $0C
000858F1 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000858FD 8001                       	dc.b	nRst, $01
000858FF E10D                       	smpsAlterNote       $0D
00085901 C20D                       	dc.b	nF5, $0D
00085903 E10A                       	smpsAlterNote       $0A
00085905 E701                       	dc.b	smpsNoAttack, $01
00085907 E106                       	smpsAlterNote       $06
00085909 E701                       	dc.b	smpsNoAttack, $01
0008590B E10A                       	smpsAlterNote       $0A
0008590D E701                       	dc.b	smpsNoAttack, $01
0008590F E110                       	smpsAlterNote       $10
00085911 E701                       	dc.b	smpsNoAttack, $01
00085913 E111                       	smpsAlterNote       $11
00085915 E701                       	dc.b	smpsNoAttack, $01
00085917 E10D                       	smpsAlterNote       $0D
00085919 E701                       	dc.b	smpsNoAttack, $01
0008591B E107                       	smpsAlterNote       $07
0008591D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085921 E10A                       	smpsAlterNote       $0A
00085923 E701                       	dc.b	smpsNoAttack, $01
00085925 E110                       	smpsAlterNote       $10
00085927 E701                       	dc.b	smpsNoAttack, $01
00085929 E111                       	smpsAlterNote       $11
0008592B 8001                       	dc.b	nRst, $01
0008592D E10F                       	smpsAlterNote       $0F
0008592F C60A                       	dc.b	nA5, $0A
00085931 E10D                       	smpsAlterNote       $0D
00085933 C406 8001                  	dc.b	nG5, $06, nRst, $01
00085937 E10C                       	smpsAlterNote       $0C
00085939 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085945 8001                       	dc.b	nRst, $01
00085947 E10D                       	smpsAlterNote       $0D
00085949 C20D                       	dc.b	nF5, $0D
0008594B E107                       	smpsAlterNote       $07
0008594D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085951 E10A                       	smpsAlterNote       $0A
00085953 E701                       	dc.b	smpsNoAttack, $01
00085955 E110                       	smpsAlterNote       $10
00085957 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008595B E10A                       	smpsAlterNote       $0A
0008595D E701                       	dc.b	smpsNoAttack, $01
0008595F E107                       	smpsAlterNote       $07
00085961 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085965 E10D                       	smpsAlterNote       $0D
00085967 E701                       	dc.b	smpsNoAttack, $01
00085969 E111                       	smpsAlterNote       $11
0008596B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008596F E10D                       	smpsAlterNote       $0D
00085971 C40D                       	dc.b	nG5, $0D
00085973 E107                       	smpsAlterNote       $07
00085975 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085979 E10A                       	smpsAlterNote       $0A
0008597B E701                       	dc.b	smpsNoAttack, $01
0008597D E10D                       	smpsAlterNote       $0D
0008597F 8001                       	dc.b	nRst, $01
00085981 E10C                       	smpsAlterNote       $0C
00085983 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008598F E10D                       	smpsAlterNote       $0D
00085991 C20E                       	dc.b	nF5, $0E
00085993 E107                       	smpsAlterNote       $07
00085995 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085999 E10D                       	smpsAlterNote       $0D
0008599B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000859A1 E0C0                       	smpsPan             panCenter, $00
000859A3 E603                       	smpsAlterVol        $03
000859A5 E108                       	smpsAlterNote       $08
000859A7 B406                       	dc.b	nEb4, $06
000859A9 E10C                       	smpsAlterNote       $0C
000859AB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000859AF E108                       	smpsAlterNote       $08
000859B1 B403                       	dc.b	nEb4, $03
000859B3 E109                       	smpsAlterNote       $09
000859B5 B803 8001                  	dc.b	nG4, $03, nRst, $01
000859B9 E10C                       	smpsAlterNote       $0C
000859BB BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000859C3 03                         	dc.b	$03
000859C4 E6FD                       	smpsAlterVol        $FD
000859C6 F6F1 F4                    	smpsJump            music84_Jump00
000859C9                            
000859C9                            ; PSG1 Data
000859C9                            music84_PSG1:
000859C9 E1FD                       	smpsAlterNote       $FD
000859CB EC04                       	smpsPSGAlterVol     $04
000859CD 9203                       	dc.b	nF1, $03
000859CF E1FE                       	smpsAlterNote       $FE
000859D1 9603                       	dc.b	nA1, $03
000859D3 EC04                       	smpsPSGAlterVol     $04
000859D5 E701                       	dc.b	smpsNoAttack, $01
000859D7 E1FF                       	smpsAlterNote       $FF
000859D9 ECFC                       	smpsPSGAlterVol     $FC
000859DB 9B03                       	dc.b	nD2, $03
000859DD E1FD                       	smpsAlterNote       $FD
000859DF 9403                       	dc.b	nG1, $03
000859E1 EC04                       	smpsPSGAlterVol     $04
000859E3 E701                       	dc.b	smpsNoAttack, $01
000859E5 E1FE                       	smpsAlterNote       $FE
000859E7 ECFC                       	smpsPSGAlterVol     $FC
000859E9 9703                       	dc.b	nBb1, $03
000859EB E1FF                       	smpsAlterNote       $FF
000859ED 9B03                       	dc.b	nD2, $03
000859EF EC04                       	smpsPSGAlterVol     $04
000859F1 E701                       	dc.b	smpsNoAttack, $01
000859F3 E1FE                       	smpsAlterNote       $FE
000859F5 ECFC                       	smpsPSGAlterVol     $FC
000859F7 A002                       	dc.b	nG2, $02
000859F9 EC04                       	smpsPSGAlterVol     $04
000859FB E701                       	dc.b	smpsNoAttack, $01
000859FD E1FF                       	smpsAlterNote       $FF
000859FF ECFC                       	smpsPSGAlterVol     $FC
00085A01 A203                       	dc.b	nA2, $03
00085A03 EC0B                       	smpsPSGAlterVol     $0B
00085A05 800A                       	dc.b	nRst, $0A
00085A07 E105                       	smpsAlterNote       $05
00085A09 01                         	dc.b	$01
00085A0A E1FC                       	smpsAlterNote       $FC
00085A0C 01                         	dc.b	$01
00085A0D E105                       	smpsAlterNote       $05
00085A0F 01                         	dc.b	$01
00085A10 E1FD                       	smpsAlterNote       $FD
00085A12 01                         	dc.b	$01
00085A13 E105                       	smpsAlterNote       $05
00085A15 01                         	dc.b	$01
00085A16 E1FD                       	smpsAlterNote       $FD
00085A18 01                         	dc.b	$01
00085A19 E1FA                       	smpsAlterNote       $FA
00085A1B 01                         	dc.b	$01
00085A1C E1FC                       	smpsAlterNote       $FC
00085A1E 01                         	dc.b	$01
00085A1F E105                       	smpsAlterNote       $05
00085A21 01                         	dc.b	$01
00085A22 E108                       	smpsAlterNote       $08
00085A24 0101                       	dc.b	$01, $01
00085A26 E105                       	smpsAlterNote       $05
00085A28 01                         	dc.b	$01
00085A29 E1FA                       	smpsAlterNote       $FA
00085A2B 0101                       	dc.b	$01, $01
00085A2D E1FD                       	smpsAlterNote       $FD
00085A2F 01                         	dc.b	$01
00085A30 E105                       	smpsAlterNote       $05
00085A32 01                         	dc.b	$01
00085A33 E108                       	smpsAlterNote       $08
00085A35 01                         	dc.b	$01
00085A36 E105                       	smpsAlterNote       $05
00085A38 01                         	dc.b	$01
00085A39 E1FC                       	smpsAlterNote       $FC
00085A3B 01                         	dc.b	$01
00085A3C E105                       	smpsAlterNote       $05
00085A3E 01                         	dc.b	$01
00085A3F E1FD                       	smpsAlterNote       $FD
00085A41 01                         	dc.b	$01
00085A42                            
00085A42                            music84_Jump07:
00085A42 E105                       	smpsAlterNote       $05
00085A44 8001                       	dc.b	nRst, $01
00085A46 E1FD                       	smpsAlterNote       $FD
00085A48 01                         	dc.b	$01
00085A49 E1FA                       	smpsAlterNote       $FA
00085A4B 01                         	dc.b	$01
00085A4C E1FC                       	smpsAlterNote       $FC
00085A4E 01                         	dc.b	$01
00085A4F E1FD                       	smpsAlterNote       $FD
00085A51 ECF5                       	smpsPSGAlterVol     $F5
00085A53 9206                       	dc.b	nF1, $06
00085A55 EC04                       	smpsPSGAlterVol     $04
00085A57 E701                       	dc.b	smpsNoAttack, $01
00085A59 EC07                       	smpsPSGAlterVol     $07
00085A5B 8003                       	dc.b	nRst, $03
00085A5D ECF5                       	smpsPSGAlterVol     $F5
00085A5F 9206                       	dc.b	nF1, $06
00085A61 EC04                       	smpsPSGAlterVol     $04
00085A63 E701                       	dc.b	smpsNoAttack, $01
00085A65 EC07                       	smpsPSGAlterVol     $07
00085A67 8006                       	dc.b	nRst, $06
00085A69 E100                       	smpsAlterNote       $00
00085A6B 01                         	dc.b	$01
00085A6C E104                       	smpsAlterNote       $04
00085A6E 01                         	dc.b	$01
00085A6F E100                       	smpsAlterNote       $00
00085A71 01                         	dc.b	$01
00085A72 E1FB                       	smpsAlterNote       $FB
00085A74 01                         	dc.b	$01
00085A75 E1FD                       	smpsAlterNote       $FD
00085A77 ECF5                       	smpsPSGAlterVol     $F5
00085A79 9406                       	dc.b	nG1, $06
00085A7B EC04                       	smpsPSGAlterVol     $04
00085A7D E701                       	dc.b	smpsNoAttack, $01
00085A7F EC07                       	smpsPSGAlterVol     $07
00085A81 8003                       	dc.b	nRst, $03
00085A83 ECF5                       	smpsPSGAlterVol     $F5
00085A85 9407                       	dc.b	nG1, $07
00085A87 EC0B                       	smpsPSGAlterVol     $0B
00085A89 8006                       	dc.b	nRst, $06
00085A8B E100                       	smpsAlterNote       $00
00085A8D 01                         	dc.b	$01
00085A8E E103                       	smpsAlterNote       $03
00085A90 0101                       	dc.b	$01, $01
00085A92 E1FD                       	smpsAlterNote       $FD
00085A94 01                         	dc.b	$01
00085A95 ECF5                       	smpsPSGAlterVol     $F5
00085A97 9207                       	dc.b	nF1, $07
00085A99 EC0B                       	smpsPSGAlterVol     $0B
00085A9B 8004                       	dc.b	nRst, $04
00085A9D ECF5                       	smpsPSGAlterVol     $F5
00085A9F 9206                       	dc.b	nF1, $06
00085AA1 EC04                       	smpsPSGAlterVol     $04
00085AA3 E701                       	dc.b	smpsNoAttack, $01
00085AA5 EC07                       	smpsPSGAlterVol     $07
00085AA7 8006                       	dc.b	nRst, $06
00085AA9 E103                       	smpsAlterNote       $03
00085AAB 01                         	dc.b	$01
00085AAC E104                       	smpsAlterNote       $04
00085AAE 01                         	dc.b	$01
00085AAF E100                       	smpsAlterNote       $00
00085AB1 01                         	dc.b	$01
00085AB2 E1FA                       	smpsAlterNote       $FA
00085AB4 01                         	dc.b	$01
00085AB5 E1FD                       	smpsAlterNote       $FD
00085AB7 ECF5                       	smpsPSGAlterVol     $F5
00085AB9 9206                       	dc.b	nF1, $06
00085ABB EC04                       	smpsPSGAlterVol     $04
00085ABD E701                       	dc.b	smpsNoAttack, $01
00085ABF EC07                       	smpsPSGAlterVol     $07
00085AC1 8003                       	dc.b	nRst, $03
00085AC3 ECF5                       	smpsPSGAlterVol     $F5
00085AC5 9106                       	dc.b	nE1, $06
00085AC7 EC04                       	smpsPSGAlterVol     $04
00085AC9 E701                       	dc.b	smpsNoAttack, $01
00085ACB EC07                       	smpsPSGAlterVol     $07
00085ACD 8006                       	dc.b	nRst, $06
00085ACF E100                       	smpsAlterNote       $00
00085AD1 01                         	dc.b	$01
00085AD2 E104                       	smpsAlterNote       $04
00085AD4 01                         	dc.b	$01
00085AD5 E100                       	smpsAlterNote       $00
00085AD7 01                         	dc.b	$01
00085AD8 E1FD                       	smpsAlterNote       $FD
00085ADA 01                         	dc.b	$01
00085ADB ECF5                       	smpsPSGAlterVol     $F5
00085ADD 9206                       	dc.b	nF1, $06
00085ADF EC04                       	smpsPSGAlterVol     $04
00085AE1 E701                       	dc.b	smpsNoAttack, $01
00085AE3 EC07                       	smpsPSGAlterVol     $07
00085AE5 8003                       	dc.b	nRst, $03
00085AE7 ECF5                       	smpsPSGAlterVol     $F5
00085AE9 9207                       	dc.b	nF1, $07
00085AEB EC0B                       	smpsPSGAlterVol     $0B
00085AED 8007                       	dc.b	nRst, $07
00085AEF E103                       	smpsAlterNote       $03
00085AF1 0101                       	dc.b	$01, $01
00085AF3 E1FD                       	smpsAlterNote       $FD
00085AF5 01                         	dc.b	$01
00085AF6 E1FB                       	smpsAlterNote       $FB
00085AF8 01                         	dc.b	$01
00085AF9 E1FD                       	smpsAlterNote       $FD
00085AFB ECF5                       	smpsPSGAlterVol     $F5
00085AFD 9406                       	dc.b	nG1, $06
00085AFF EC0B                       	smpsPSGAlterVol     $0B
00085B01 8004                       	dc.b	nRst, $04
00085B03 ECF5                       	smpsPSGAlterVol     $F5
00085B05 9406                       	dc.b	nG1, $06
00085B07 EC04                       	smpsPSGAlterVol     $04
00085B09 E701                       	dc.b	smpsNoAttack, $01
00085B0B EC07                       	smpsPSGAlterVol     $07
00085B0D 8006                       	dc.b	nRst, $06
00085B0F E100                       	smpsAlterNote       $00
00085B11 01                         	dc.b	$01
00085B12 E104                       	smpsAlterNote       $04
00085B14 01                         	dc.b	$01
00085B15 E100                       	smpsAlterNote       $00
00085B17 01                         	dc.b	$01
00085B18 E1F9                       	smpsAlterNote       $F9
00085B1A 01                         	dc.b	$01
00085B1B E1FD                       	smpsAlterNote       $FD
00085B1D ECF5                       	smpsPSGAlterVol     $F5
00085B1F 9206                       	dc.b	nF1, $06
00085B21 EC04                       	smpsPSGAlterVol     $04
00085B23 E701                       	dc.b	smpsNoAttack, $01
00085B25 EC07                       	smpsPSGAlterVol     $07
00085B27 8003                       	dc.b	nRst, $03
00085B29 ECF5                       	smpsPSGAlterVol     $F5
00085B2B 9207                       	dc.b	nF1, $07
00085B2D EC0B                       	smpsPSGAlterVol     $0B
00085B2F 8006                       	dc.b	nRst, $06
00085B31 E100                       	smpsAlterNote       $00
00085B33 01                         	dc.b	$01
00085B34 E104                       	smpsAlterNote       $04
00085B36 01                         	dc.b	$01
00085B37 E103                       	smpsAlterNote       $03
00085B39 01                         	dc.b	$01
00085B3A E1FD                       	smpsAlterNote       $FD
00085B3C 01                         	dc.b	$01
00085B3D ECF5                       	smpsPSGAlterVol     $F5
00085B3F 9207                       	dc.b	nF1, $07
00085B41 EC0B                       	smpsPSGAlterVol     $0B
00085B43 8004                       	dc.b	nRst, $04
00085B45 ECF5                       	smpsPSGAlterVol     $F5
00085B47 9206                       	dc.b	nF1, $06
00085B49 EC0B                       	smpsPSGAlterVol     $0B
00085B4B 8007                       	dc.b	nRst, $07
00085B4D E103                       	smpsAlterNote       $03
00085B4F 0101                       	dc.b	$01, $01
00085B51 E100                       	smpsAlterNote       $00
00085B53 01                         	dc.b	$01
00085B54 E1FA                       	smpsAlterNote       $FA
00085B56 01                         	dc.b	$01
00085B57 E1FD                       	smpsAlterNote       $FD
00085B59 ECF5                       	smpsPSGAlterVol     $F5
00085B5B 9206                       	dc.b	nF1, $06
00085B5D EC04                       	smpsPSGAlterVol     $04
00085B5F E701                       	dc.b	smpsNoAttack, $01
00085B61 EC07                       	smpsPSGAlterVol     $07
00085B63 8003                       	dc.b	nRst, $03
00085B65 ECF5                       	smpsPSGAlterVol     $F5
00085B67 9206                       	dc.b	nF1, $06
00085B69 EC04                       	smpsPSGAlterVol     $04
00085B6B E701                       	dc.b	smpsNoAttack, $01
00085B6D EC07                       	smpsPSGAlterVol     $07
00085B6F 8006                       	dc.b	nRst, $06
00085B71 E100                       	smpsAlterNote       $00
00085B73 01                         	dc.b	$01
00085B74 E104                       	smpsAlterNote       $04
00085B76 01                         	dc.b	$01
00085B77 E100                       	smpsAlterNote       $00
00085B79 01                         	dc.b	$01
00085B7A E1FD                       	smpsAlterNote       $FD
00085B7C 01                         	dc.b	$01
00085B7D ECF5                       	smpsPSGAlterVol     $F5
00085B7F 9206                       	dc.b	nF1, $06
00085B81 EC04                       	smpsPSGAlterVol     $04
00085B83 E701                       	dc.b	smpsNoAttack, $01
00085B85 EC07                       	smpsPSGAlterVol     $07
00085B87 8003                       	dc.b	nRst, $03
00085B89 ECF5                       	smpsPSGAlterVol     $F5
00085B8B 9207                       	dc.b	nF1, $07
00085B8D EC0B                       	smpsPSGAlterVol     $0B
00085B8F 8007                       	dc.b	nRst, $07
00085B91 E103                       	smpsAlterNote       $03
00085B93 0101                       	dc.b	$01, $01
00085B95 E1FD                       	smpsAlterNote       $FD
00085B97 01                         	dc.b	$01
00085B98 E1FA                       	smpsAlterNote       $FA
00085B9A 01                         	dc.b	$01
00085B9B E1FD                       	smpsAlterNote       $FD
00085B9D ECF5                       	smpsPSGAlterVol     $F5
00085B9F 9206                       	dc.b	nF1, $06
00085BA1 EC0B                       	smpsPSGAlterVol     $0B
00085BA3 8004                       	dc.b	nRst, $04
00085BA5 ECF5                       	smpsPSGAlterVol     $F5
00085BA7 9206                       	dc.b	nF1, $06
00085BA9 EC04                       	smpsPSGAlterVol     $04
00085BAB E701                       	dc.b	smpsNoAttack, $01
00085BAD EC07                       	smpsPSGAlterVol     $07
00085BAF 8006                       	dc.b	nRst, $06
00085BB1 E103                       	smpsAlterNote       $03
00085BB3 01                         	dc.b	$01
00085BB4 E104                       	smpsAlterNote       $04
00085BB6 01                         	dc.b	$01
00085BB7 E100                       	smpsAlterNote       $00
00085BB9 01                         	dc.b	$01
00085BBA E1FA                       	smpsAlterNote       $FA
00085BBC 01                         	dc.b	$01
00085BBD E1FD                       	smpsAlterNote       $FD
00085BBF ECF5                       	smpsPSGAlterVol     $F5
00085BC1 9206                       	dc.b	nF1, $06
00085BC3 EC04                       	smpsPSGAlterVol     $04
00085BC5 E701                       	dc.b	smpsNoAttack, $01
00085BC7 EC07                       	smpsPSGAlterVol     $07
00085BC9 8003                       	dc.b	nRst, $03
00085BCB ECF5                       	smpsPSGAlterVol     $F5
00085BCD 9206                       	dc.b	nF1, $06
00085BCF EC04                       	smpsPSGAlterVol     $04
00085BD1 E701                       	dc.b	smpsNoAttack, $01
00085BD3 EC07                       	smpsPSGAlterVol     $07
00085BD5 8006                       	dc.b	nRst, $06
00085BD7 E100                       	smpsAlterNote       $00
00085BD9 01                         	dc.b	$01
00085BDA E104                       	smpsAlterNote       $04
00085BDC 01                         	dc.b	$01
00085BDD E103                       	smpsAlterNote       $03
00085BDF 01                         	dc.b	$01
00085BE0 E1FD                       	smpsAlterNote       $FD
00085BE2 01                         	dc.b	$01
00085BE3 ECF5                       	smpsPSGAlterVol     $F5
00085BE5 9107                       	dc.b	nE1, $07
00085BE7 EC0B                       	smpsPSGAlterVol     $0B
00085BE9 8004                       	dc.b	nRst, $04
00085BEB ECF5                       	smpsPSGAlterVol     $F5
00085BED 9106                       	dc.b	nE1, $06
00085BEF EC0B                       	smpsPSGAlterVol     $0B
00085BF1 8007                       	dc.b	nRst, $07
00085BF3 E103                       	smpsAlterNote       $03
00085BF5 0101                       	dc.b	$01, $01
00085BF7 E100                       	smpsAlterNote       $00
00085BF9 01                         	dc.b	$01
00085BFA E1FA                       	smpsAlterNote       $FA
00085BFC 01                         	dc.b	$01
00085BFD E1FD                       	smpsAlterNote       $FD
00085BFF ECF5                       	smpsPSGAlterVol     $F5
00085C01 9106                       	dc.b	nE1, $06
00085C03 EC04                       	smpsPSGAlterVol     $04
00085C05 E701                       	dc.b	smpsNoAttack, $01
00085C07 EC07                       	smpsPSGAlterVol     $07
00085C09 8003                       	dc.b	nRst, $03
00085C0B ECF5                       	smpsPSGAlterVol     $F5
00085C0D 9106                       	dc.b	nE1, $06
00085C0F EC04                       	smpsPSGAlterVol     $04
00085C11 E701                       	dc.b	smpsNoAttack, $01
00085C13 EC07                       	smpsPSGAlterVol     $07
00085C15 8006                       	dc.b	nRst, $06
00085C17 E100                       	smpsAlterNote       $00
00085C19 01                         	dc.b	$01
00085C1A E104                       	smpsAlterNote       $04
00085C1C 01                         	dc.b	$01
00085C1D E100                       	smpsAlterNote       $00
00085C1F 01                         	dc.b	$01
00085C20 E1FA                       	smpsAlterNote       $FA
00085C22 01                         	dc.b	$01
00085C23 E1FD                       	smpsAlterNote       $FD
00085C25 ECF5                       	smpsPSGAlterVol     $F5
00085C27 9106                       	dc.b	nE1, $06
00085C29 EC04                       	smpsPSGAlterVol     $04
00085C2B E701                       	dc.b	smpsNoAttack, $01
00085C2D EC07                       	smpsPSGAlterVol     $07
00085C2F 8003                       	dc.b	nRst, $03
00085C31 ECF5                       	smpsPSGAlterVol     $F5
00085C33 9107 9106                  	dc.b	nE1, $07, nE1, $06
00085C37 EC04                       	smpsPSGAlterVol     $04
00085C39 E701                       	dc.b	smpsNoAttack, $01
00085C3B ECFC                       	smpsPSGAlterVol     $FC
00085C3D 9103 9103                  	dc.b	nE1, $03, nE1, $03
00085C41 EC04                       	smpsPSGAlterVol     $04
00085C43 E701                       	dc.b	smpsNoAttack, $01
00085C45 ECFC                       	smpsPSGAlterVol     $FC
00085C47 9106                       	dc.b	nE1, $06
00085C49 EC04                       	smpsPSGAlterVol     $04
00085C4B E701                       	dc.b	smpsNoAttack, $01
00085C4D EC07                       	smpsPSGAlterVol     $07
00085C4F 8006                       	dc.b	nRst, $06
00085C51 E100                       	smpsAlterNote       $00
00085C53 01                         	dc.b	$01
00085C54 E104                       	smpsAlterNote       $04
00085C56 01                         	dc.b	$01
00085C57 E100                       	smpsAlterNote       $00
00085C59 01                         	dc.b	$01
00085C5A E1FA                       	smpsAlterNote       $FA
00085C5C 01                         	dc.b	$01
00085C5D E1F9                       	smpsAlterNote       $F9
00085C5F 01                         	dc.b	$01
00085C60 E1FD                       	smpsAlterNote       $FD
00085C62 01                         	dc.b	$01
00085C63 E103                       	smpsAlterNote       $03
00085C65 01                         	dc.b	$01
00085C66 E104                       	smpsAlterNote       $04
00085C68 01                         	dc.b	$01
00085C69 E100                       	smpsAlterNote       $00
00085C6B 01                         	dc.b	$01
00085C6C E1FA                       	smpsAlterNote       $FA
00085C6E 0101                       	dc.b	$01, $01
00085C70 E1FD                       	smpsAlterNote       $FD
00085C72 ECF5                       	smpsPSGAlterVol     $F5
00085C74 9206                       	dc.b	nF1, $06
00085C76 EC04                       	smpsPSGAlterVol     $04
00085C78 E701                       	dc.b	smpsNoAttack, $01
00085C7A EC07                       	smpsPSGAlterVol     $07
00085C7C 8003                       	dc.b	nRst, $03
00085C7E ECF5                       	smpsPSGAlterVol     $F5
00085C80 9206                       	dc.b	nF1, $06
00085C82 EC04                       	smpsPSGAlterVol     $04
00085C84 E701                       	dc.b	smpsNoAttack, $01
00085C86 EC07                       	smpsPSGAlterVol     $07
00085C88 8006                       	dc.b	nRst, $06
00085C8A E100                       	smpsAlterNote       $00
00085C8C 01                         	dc.b	$01
00085C8D E104                       	smpsAlterNote       $04
00085C8F 01                         	dc.b	$01
00085C90 E103                       	smpsAlterNote       $03
00085C92 01                         	dc.b	$01
00085C93 E1FD                       	smpsAlterNote       $FD
00085C95 01                         	dc.b	$01
00085C96 ECF5                       	smpsPSGAlterVol     $F5
00085C98 9407                       	dc.b	nG1, $07
00085C9A EC0B                       	smpsPSGAlterVol     $0B
00085C9C 8004                       	dc.b	nRst, $04
00085C9E ECF5                       	smpsPSGAlterVol     $F5
00085CA0 9406                       	dc.b	nG1, $06
00085CA2 EC0B                       	smpsPSGAlterVol     $0B
00085CA4 8007                       	dc.b	nRst, $07
00085CA6 E103                       	smpsAlterNote       $03
00085CA8 0101                       	dc.b	$01, $01
00085CAA E1FD                       	smpsAlterNote       $FD
00085CAC 01                         	dc.b	$01
00085CAD E1F9                       	smpsAlterNote       $F9
00085CAF 01                         	dc.b	$01
00085CB0 E1FD                       	smpsAlterNote       $FD
00085CB2 ECF5                       	smpsPSGAlterVol     $F5
00085CB4 9206                       	dc.b	nF1, $06
00085CB6 EC04                       	smpsPSGAlterVol     $04
00085CB8 E701                       	dc.b	smpsNoAttack, $01
00085CBA EC07                       	smpsPSGAlterVol     $07
00085CBC 8003                       	dc.b	nRst, $03
00085CBE ECF5                       	smpsPSGAlterVol     $F5
00085CC0 9206                       	dc.b	nF1, $06
00085CC2 EC04                       	smpsPSGAlterVol     $04
00085CC4 E701                       	dc.b	smpsNoAttack, $01
00085CC6 EC07                       	smpsPSGAlterVol     $07
00085CC8 8006                       	dc.b	nRst, $06
00085CCA E100                       	smpsAlterNote       $00
00085CCC 01                         	dc.b	$01
00085CCD E104                       	smpsAlterNote       $04
00085CCF 01                         	dc.b	$01
00085CD0 E100                       	smpsAlterNote       $00
00085CD2 01                         	dc.b	$01
00085CD3 E1FA                       	smpsAlterNote       $FA
00085CD5 01                         	dc.b	$01
00085CD6 E1FD                       	smpsAlterNote       $FD
00085CD8 ECF5                       	smpsPSGAlterVol     $F5
00085CDA 9206                       	dc.b	nF1, $06
00085CDC EC04                       	smpsPSGAlterVol     $04
00085CDE E701                       	dc.b	smpsNoAttack, $01
00085CE0 EC07                       	smpsPSGAlterVol     $07
00085CE2 8003                       	dc.b	nRst, $03
00085CE4 ECF5                       	smpsPSGAlterVol     $F5
00085CE6 9107                       	dc.b	nE1, $07
00085CE8 EC0B                       	smpsPSGAlterVol     $0B
00085CEA 8006                       	dc.b	nRst, $06
00085CEC E100                       	smpsAlterNote       $00
00085CEE 01                         	dc.b	$01
00085CEF E103                       	smpsAlterNote       $03
00085CF1 0101                       	dc.b	$01, $01
00085CF3 E1FD                       	smpsAlterNote       $FD
00085CF5 01                         	dc.b	$01
00085CF6 ECF5                       	smpsPSGAlterVol     $F5
00085CF8 9207                       	dc.b	nF1, $07
00085CFA EC0B                       	smpsPSGAlterVol     $0B
00085CFC 8004                       	dc.b	nRst, $04
00085CFE ECF5                       	smpsPSGAlterVol     $F5
00085D00 9206                       	dc.b	nF1, $06
00085D02 EC04                       	smpsPSGAlterVol     $04
00085D04 E701                       	dc.b	smpsNoAttack, $01
00085D06 EC07                       	smpsPSGAlterVol     $07
00085D08 8006                       	dc.b	nRst, $06
00085D0A E103                       	smpsAlterNote       $03
00085D0C 01                         	dc.b	$01
00085D0D E104                       	smpsAlterNote       $04
00085D0F 01                         	dc.b	$01
00085D10 E100                       	smpsAlterNote       $00
00085D12 01                         	dc.b	$01
00085D13 E1FB                       	smpsAlterNote       $FB
00085D15 01                         	dc.b	$01
00085D16 E1FD                       	smpsAlterNote       $FD
00085D18 ECF5                       	smpsPSGAlterVol     $F5
00085D1A 9406                       	dc.b	nG1, $06
00085D1C EC04                       	smpsPSGAlterVol     $04
00085D1E E701                       	dc.b	smpsNoAttack, $01
00085D20 EC07                       	smpsPSGAlterVol     $07
00085D22 8003                       	dc.b	nRst, $03
00085D24 ECF5                       	smpsPSGAlterVol     $F5
00085D26 9406                       	dc.b	nG1, $06
00085D28 EC04                       	smpsPSGAlterVol     $04
00085D2A E701                       	dc.b	smpsNoAttack, $01
00085D2C EC07                       	smpsPSGAlterVol     $07
00085D2E 8006                       	dc.b	nRst, $06
00085D30 E100                       	smpsAlterNote       $00
00085D32 01                         	dc.b	$01
00085D33 E104                       	smpsAlterNote       $04
00085D35 01                         	dc.b	$01
00085D36 E100                       	smpsAlterNote       $00
00085D38 01                         	dc.b	$01
00085D39 E1FD                       	smpsAlterNote       $FD
00085D3B 01                         	dc.b	$01
00085D3C ECF5                       	smpsPSGAlterVol     $F5
00085D3E 9206                       	dc.b	nF1, $06
00085D40 EC04                       	smpsPSGAlterVol     $04
00085D42 E701                       	dc.b	smpsNoAttack, $01
00085D44 EC07                       	smpsPSGAlterVol     $07
00085D46 8003                       	dc.b	nRst, $03
00085D48 ECF5                       	smpsPSGAlterVol     $F5
00085D4A 9207                       	dc.b	nF1, $07
00085D4C EC0B                       	smpsPSGAlterVol     $0B
00085D4E 8007                       	dc.b	nRst, $07
00085D50 E103                       	smpsAlterNote       $03
00085D52 0101                       	dc.b	$01, $01
00085D54 E1FD                       	smpsAlterNote       $FD
00085D56 01                         	dc.b	$01
00085D57 E1FA                       	smpsAlterNote       $FA
00085D59 01                         	dc.b	$01
00085D5A E1FD                       	smpsAlterNote       $FD
00085D5C ECF5                       	smpsPSGAlterVol     $F5
00085D5E 9206                       	dc.b	nF1, $06
00085D60 EC0B                       	smpsPSGAlterVol     $0B
00085D62 8004                       	dc.b	nRst, $04
00085D64 ECF5                       	smpsPSGAlterVol     $F5
00085D66 9206                       	dc.b	nF1, $06
00085D68 EC04                       	smpsPSGAlterVol     $04
00085D6A E701                       	dc.b	smpsNoAttack, $01
00085D6C EC07                       	smpsPSGAlterVol     $07
00085D6E 8006                       	dc.b	nRst, $06
00085D70 E100                       	smpsAlterNote       $00
00085D72 01                         	dc.b	$01
00085D73 E104                       	smpsAlterNote       $04
00085D75 01                         	dc.b	$01
00085D76 E100                       	smpsAlterNote       $00
00085D78 01                         	dc.b	$01
00085D79 E1FA                       	smpsAlterNote       $FA
00085D7B 01                         	dc.b	$01
00085D7C E1FD                       	smpsAlterNote       $FD
00085D7E ECF5                       	smpsPSGAlterVol     $F5
00085D80 9206                       	dc.b	nF1, $06
00085D82 EC04                       	smpsPSGAlterVol     $04
00085D84 E704                       	dc.b	smpsNoAttack, $04
00085D86 ECFC                       	smpsPSGAlterVol     $FC
00085D88 9207                       	dc.b	nF1, $07
00085D8A EC0B                       	smpsPSGAlterVol     $0B
00085D8C 8006                       	dc.b	nRst, $06
00085D8E E100                       	smpsAlterNote       $00
00085D90 01                         	dc.b	$01
00085D91 E104                       	smpsAlterNote       $04
00085D93 01                         	dc.b	$01
00085D94 E103                       	smpsAlterNote       $03
00085D96 01                         	dc.b	$01
00085D97 E1FD                       	smpsAlterNote       $FD
00085D99 01                         	dc.b	$01
00085D9A ECF5                       	smpsPSGAlterVol     $F5
00085D9C 9207                       	dc.b	nF1, $07
00085D9E EC0B                       	smpsPSGAlterVol     $0B
00085DA0 8004                       	dc.b	nRst, $04
00085DA2 ECF5                       	smpsPSGAlterVol     $F5
00085DA4 9206                       	dc.b	nF1, $06
00085DA6 EC0B                       	smpsPSGAlterVol     $0B
00085DA8 8007                       	dc.b	nRst, $07
00085DAA E103                       	smpsAlterNote       $03
00085DAC 0101                       	dc.b	$01, $01
00085DAE E100                       	smpsAlterNote       $00
00085DB0 01                         	dc.b	$01
00085DB1 E1FA                       	smpsAlterNote       $FA
00085DB3 01                         	dc.b	$01
00085DB4 E1FD                       	smpsAlterNote       $FD
00085DB6 ECF5                       	smpsPSGAlterVol     $F5
00085DB8 9206                       	dc.b	nF1, $06
00085DBA EC04                       	smpsPSGAlterVol     $04
00085DBC E704                       	dc.b	smpsNoAttack, $04
00085DBE ECFC                       	smpsPSGAlterVol     $FC
00085DC0 9206                       	dc.b	nF1, $06
00085DC2 EC04                       	smpsPSGAlterVol     $04
00085DC4 E701                       	dc.b	smpsNoAttack, $01
00085DC6 EC07                       	smpsPSGAlterVol     $07
00085DC8 8006                       	dc.b	nRst, $06
00085DCA E100                       	smpsAlterNote       $00
00085DCC 01                         	dc.b	$01
00085DCD E104                       	smpsAlterNote       $04
00085DCF 01                         	dc.b	$01
00085DD0 E100                       	smpsAlterNote       $00
00085DD2 01                         	dc.b	$01
00085DD3 E1FD                       	smpsAlterNote       $FD
00085DD5 01                         	dc.b	$01
00085DD6 ECF5                       	smpsPSGAlterVol     $F5
00085DD8 9206                       	dc.b	nF1, $06
00085DDA EC04                       	smpsPSGAlterVol     $04
00085DDC E701                       	dc.b	smpsNoAttack, $01
00085DDE EC07                       	smpsPSGAlterVol     $07
00085DE0 8003                       	dc.b	nRst, $03
00085DE2 ECF5                       	smpsPSGAlterVol     $F5
00085DE4 9207                       	dc.b	nF1, $07
00085DE6 EC0B                       	smpsPSGAlterVol     $0B
00085DE8 8007                       	dc.b	nRst, $07
00085DEA E103                       	smpsAlterNote       $03
00085DEC 0101                       	dc.b	$01, $01
00085DEE E1FD                       	smpsAlterNote       $FD
00085DF0 01                         	dc.b	$01
00085DF1 E1FA                       	smpsAlterNote       $FA
00085DF3 01                         	dc.b	$01
00085DF4 E1FD                       	smpsAlterNote       $FD
00085DF6 ECF5                       	smpsPSGAlterVol     $F5
00085DF8 9106                       	dc.b	nE1, $06
00085DFA EC0B                       	smpsPSGAlterVol     $0B
00085DFC 8004                       	dc.b	nRst, $04
00085DFE ECF5                       	smpsPSGAlterVol     $F5
00085E00 9106                       	dc.b	nE1, $06
00085E02 EC04                       	smpsPSGAlterVol     $04
00085E04 E701                       	dc.b	smpsNoAttack, $01
00085E06 EC07                       	smpsPSGAlterVol     $07
00085E08 8006                       	dc.b	nRst, $06
00085E0A E100                       	smpsAlterNote       $00
00085E0C 01                         	dc.b	$01
00085E0D E104                       	smpsAlterNote       $04
00085E0F 01                         	dc.b	$01
00085E10 E100                       	smpsAlterNote       $00
00085E12 01                         	dc.b	$01
00085E13 E1FA                       	smpsAlterNote       $FA
00085E15 01                         	dc.b	$01
00085E16 E1FD                       	smpsAlterNote       $FD
00085E18 ECF5                       	smpsPSGAlterVol     $F5
00085E1A 9106                       	dc.b	nE1, $06
00085E1C EC04                       	smpsPSGAlterVol     $04
00085E1E E701                       	dc.b	smpsNoAttack, $01
00085E20 EC07                       	smpsPSGAlterVol     $07
00085E22 8003                       	dc.b	nRst, $03
00085E24 ECF5                       	smpsPSGAlterVol     $F5
00085E26 9106                       	dc.b	nE1, $06
00085E28 EC04                       	smpsPSGAlterVol     $04
00085E2A E701                       	dc.b	smpsNoAttack, $01
00085E2C EC07                       	smpsPSGAlterVol     $07
00085E2E 8006                       	dc.b	nRst, $06
00085E30 E100                       	smpsAlterNote       $00
00085E32 01                         	dc.b	$01
00085E33 E104                       	smpsAlterNote       $04
00085E35 01                         	dc.b	$01
00085E36 E103                       	smpsAlterNote       $03
00085E38 01                         	dc.b	$01
00085E39 E1FD                       	smpsAlterNote       $FD
00085E3B 01                         	dc.b	$01
00085E3C ECF5                       	smpsPSGAlterVol     $F5
00085E3E 9107                       	dc.b	nE1, $07
00085E40 EC0B                       	smpsPSGAlterVol     $0B
00085E42 8004                       	dc.b	nRst, $04
00085E44 ECF5                       	smpsPSGAlterVol     $F5
00085E46 9106                       	dc.b	nE1, $06
00085E48 EC0B                       	smpsPSGAlterVol     $0B
00085E4A 8007                       	dc.b	nRst, $07
00085E4C E103                       	smpsAlterNote       $03
00085E4E 0101                       	dc.b	$01, $01
00085E50 E100                       	smpsAlterNote       $00
00085E52 01                         	dc.b	$01
00085E53 E1FA                       	smpsAlterNote       $FA
00085E55 01                         	dc.b	$01
00085E56 E1FD                       	smpsAlterNote       $FD
00085E58 ECF5                       	smpsPSGAlterVol     $F5
00085E5A 9106                       	dc.b	nE1, $06
00085E5C EC04                       	smpsPSGAlterVol     $04
00085E5E E701                       	dc.b	smpsNoAttack, $01
00085E60 EC07                       	smpsPSGAlterVol     $07
00085E62 8003                       	dc.b	nRst, $03
00085E64 ECF5                       	smpsPSGAlterVol     $F5
00085E66 9106                       	dc.b	nE1, $06
00085E68 EC04                       	smpsPSGAlterVol     $04
00085E6A E701                       	dc.b	smpsNoAttack, $01
00085E6C EC07                       	smpsPSGAlterVol     $07
00085E6E 8003                       	dc.b	nRst, $03
00085E70 ECF5                       	smpsPSGAlterVol     $F5
00085E72 9207                       	dc.b	nF1, $07
00085E74 EC0B                       	smpsPSGAlterVol     $0B
00085E76 8006                       	dc.b	nRst, $06
00085E78 E100                       	smpsAlterNote       $00
00085E7A 01                         	dc.b	$01
00085E7B E104                       	smpsAlterNote       $04
00085E7D 01                         	dc.b	$01
00085E7E E103                       	smpsAlterNote       $03
00085E80 01                         	dc.b	$01
00085E81 E1FD                       	smpsAlterNote       $FD
00085E83 01                         	dc.b	$01
00085E84 E1F9                       	smpsAlterNote       $F9
00085E86 01                         	dc.b	$01
00085E87 E1FD                       	smpsAlterNote       $FD
00085E89 01                         	dc.b	$01
00085E8A E100                       	smpsAlterNote       $00
00085E8C 01                         	dc.b	$01
00085E8D E104                       	smpsAlterNote       $04
00085E8F 01                         	dc.b	$01
00085E90 E1FD                       	smpsAlterNote       $FD
00085E92 ECF5                       	smpsPSGAlterVol     $F5
00085E94 9203 9203                  	dc.b	nF1, $03, nF1, $03
00085E98 EC04                       	smpsPSGAlterVol     $04
00085E9A E701                       	dc.b	smpsNoAttack, $01
00085E9C EC07                       	smpsPSGAlterVol     $07
00085E9E 8009                       	dc.b	nRst, $09
00085EA0 E100                       	smpsAlterNote       $00
00085EA2 01                         	dc.b	$01
00085EA3 E104                       	smpsAlterNote       $04
00085EA5 01                         	dc.b	$01
00085EA6 E103                       	smpsAlterNote       $03
00085EA8 01                         	dc.b	$01
00085EA9 E1FD                       	smpsAlterNote       $FD
00085EAB 01                         	dc.b	$01
00085EAC E1F9                       	smpsAlterNote       $F9
00085EAE 01                         	dc.b	$01
00085EAF E1FD                       	smpsAlterNote       $FD
00085EB1 01                         	dc.b	$01
00085EB2 E100                       	smpsAlterNote       $00
00085EB4 01                         	dc.b	$01
00085EB5 E104                       	smpsAlterNote       $04
00085EB7 01                         	dc.b	$01
00085EB8 E100                       	smpsAlterNote       $00
00085EBA 01                         	dc.b	$01
00085EBB E1FA                       	smpsAlterNote       $FA
00085EBD 01                         	dc.b	$01
00085EBE E1F9                       	smpsAlterNote       $F9
00085EC0 01                         	dc.b	$01
00085EC1 E1FD                       	smpsAlterNote       $FD
00085EC3 01                         	dc.b	$01
00085EC4 E103                       	smpsAlterNote       $03
00085EC6 0101                       	dc.b	$01, $01
00085EC8 E100                       	smpsAlterNote       $00
00085ECA 01                         	dc.b	$01
00085ECB E1FD                       	smpsAlterNote       $FD
00085ECD ECF5                       	smpsPSGAlterVol     $F5
00085ECF 9202                       	dc.b	nF1, $02
00085ED1 EC04                       	smpsPSGAlterVol     $04
00085ED3 E701                       	dc.b	smpsNoAttack, $01
00085ED5 ECFC                       	smpsPSGAlterVol     $FC
00085ED7 9106                       	dc.b	nE1, $06
00085ED9 EC04                       	smpsPSGAlterVol     $04
00085EDB E701                       	dc.b	smpsNoAttack, $01
00085EDD EC07                       	smpsPSGAlterVol     $07
00085EDF 8006                       	dc.b	nRst, $06
00085EE1 E100                       	smpsAlterNote       $00
00085EE3 01                         	dc.b	$01
00085EE4 E104                       	smpsAlterNote       $04
00085EE6 01                         	dc.b	$01
00085EE7 E100                       	smpsAlterNote       $00
00085EE9 01                         	dc.b	$01
00085EEA E1FD                       	smpsAlterNote       $FD
00085EEC 01                         	dc.b	$01
00085EED E1F9                       	smpsAlterNote       $F9
00085EEF 01                         	dc.b	$01
00085EF0 E1FD                       	smpsAlterNote       $FD
00085EF2 01                         	dc.b	$01
00085EF3 E103                       	smpsAlterNote       $03
00085EF5 01                         	dc.b	$01
00085EF6 E104                       	smpsAlterNote       $04
00085EF8 01                         	dc.b	$01
00085EF9 E1FD                       	smpsAlterNote       $FD
00085EFB ECF5                       	smpsPSGAlterVol     $F5
00085EFD 9102                       	dc.b	nE1, $02
00085EFF EC04                       	smpsPSGAlterVol     $04
00085F01 E701                       	dc.b	smpsNoAttack, $01
00085F03 ECFC                       	smpsPSGAlterVol     $FC
00085F05 920D                       	dc.b	nF1, $0D
00085F07 E100                       	smpsAlterNote       $00
00085F09 E701                       	dc.b	smpsNoAttack, $01
00085F0B E104                       	smpsAlterNote       $04
00085F0D E701                       	dc.b	smpsNoAttack, $01
00085F0F E100                       	smpsAlterNote       $00
00085F11 E701                       	dc.b	smpsNoAttack, $01
00085F13 E1FD                       	smpsAlterNote       $FD
00085F15 E701                       	dc.b	smpsNoAttack, $01
00085F17 E1F9                       	smpsAlterNote       $F9
00085F19 E701                       	dc.b	smpsNoAttack, $01
00085F1B E1FD                       	smpsAlterNote       $FD
00085F1D E701                       	dc.b	smpsNoAttack, $01
00085F1F E103                       	smpsAlterNote       $03
00085F21 E701                       	dc.b	smpsNoAttack, $01
00085F23 E104                       	smpsAlterNote       $04
00085F25 E701                       	dc.b	smpsNoAttack, $01
00085F27 E100                       	smpsAlterNote       $00
00085F29 E701                       	dc.b	smpsNoAttack, $01
00085F2B E1FA                       	smpsAlterNote       $FA
00085F2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F31 E1FD                       	smpsAlterNote       $FD
00085F33 E701                       	dc.b	smpsNoAttack, $01
00085F35 E103                       	smpsAlterNote       $03
00085F37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F3B E1FD                       	smpsAlterNote       $FD
00085F3D E701                       	dc.b	smpsNoAttack, $01
00085F3F E1F9                       	smpsAlterNote       $F9
00085F41 E701                       	dc.b	smpsNoAttack, $01
00085F43 E1FA                       	smpsAlterNote       $FA
00085F45 E701                       	dc.b	smpsNoAttack, $01
00085F47 E100                       	smpsAlterNote       $00
00085F49 EC04                       	smpsPSGAlterVol     $04
00085F4B E701                       	dc.b	smpsNoAttack, $01
00085F4D EC07                       	smpsPSGAlterVol     $07
00085F4F E104                       	smpsAlterNote       $04
00085F51 8001                       	dc.b	nRst, $01
00085F53 E100                       	smpsAlterNote       $00
00085F55 01                         	dc.b	$01
00085F56 E1FD                       	smpsAlterNote       $FD
00085F58 01                         	dc.b	$01
00085F59 E1F9                       	smpsAlterNote       $F9
00085F5B 01                         	dc.b	$01
00085F5C E1FD                       	smpsAlterNote       $FD
00085F5E 01                         	dc.b	$01
00085F5F E103                       	smpsAlterNote       $03
00085F61 01                         	dc.b	$01
00085F62 E104                       	smpsAlterNote       $04
00085F64 01                         	dc.b	$01
00085F65 E1FD                       	smpsAlterNote       $FD
00085F67 ECF5                       	smpsPSGAlterVol     $F5
00085F69 9106                       	dc.b	nE1, $06
00085F6B EC04                       	smpsPSGAlterVol     $04
00085F6D E701                       	dc.b	smpsNoAttack, $01
00085F6F EC07                       	smpsPSGAlterVol     $07
00085F71 8003                       	dc.b	nRst, $03
00085F73 ECF5                       	smpsPSGAlterVol     $F5
00085F75 9106                       	dc.b	nE1, $06
00085F77 EC04                       	smpsPSGAlterVol     $04
00085F79 E701                       	dc.b	smpsNoAttack, $01
00085F7B EC07                       	smpsPSGAlterVol     $07
00085F7D 8006                       	dc.b	nRst, $06
00085F7F E100                       	smpsAlterNote       $00
00085F81 01                         	dc.b	$01
00085F82 E104                       	smpsAlterNote       $04
00085F84 01                         	dc.b	$01
00085F85 E100                       	smpsAlterNote       $00
00085F87 01                         	dc.b	$01
00085F88 E1FA                       	smpsAlterNote       $FA
00085F8A 01                         	dc.b	$01
00085F8B E1FD                       	smpsAlterNote       $FD
00085F8D ECF5                       	smpsPSGAlterVol     $F5
00085F8F 9206                       	dc.b	nF1, $06
00085F91 EC04                       	smpsPSGAlterVol     $04
00085F93 E701                       	dc.b	smpsNoAttack, $01
00085F95 EC07                       	smpsPSGAlterVol     $07
00085F97 8003                       	dc.b	nRst, $03
00085F99 ECF5                       	smpsPSGAlterVol     $F5
00085F9B 9207                       	dc.b	nF1, $07
00085F9D EC0B                       	smpsPSGAlterVol     $0B
00085F9F 8006                       	dc.b	nRst, $06
00085FA1 E100                       	smpsAlterNote       $00
00085FA3 01                         	dc.b	$01
00085FA4 E103                       	smpsAlterNote       $03
00085FA6 0101                       	dc.b	$01, $01
00085FA8 E1FD                       	smpsAlterNote       $FD
00085FAA 01                         	dc.b	$01
00085FAB ECF5                       	smpsPSGAlterVol     $F5
00085FAD 9107                       	dc.b	nE1, $07
00085FAF EC0B                       	smpsPSGAlterVol     $0B
00085FB1 8004                       	dc.b	nRst, $04
00085FB3 ECF5                       	smpsPSGAlterVol     $F5
00085FB5 9106                       	dc.b	nE1, $06
00085FB7 EC04                       	smpsPSGAlterVol     $04
00085FB9 E701                       	dc.b	smpsNoAttack, $01
00085FBB EC07                       	smpsPSGAlterVol     $07
00085FBD 8006                       	dc.b	nRst, $06
00085FBF E103                       	smpsAlterNote       $03
00085FC1 01                         	dc.b	$01
00085FC2 E104                       	smpsAlterNote       $04
00085FC4 01                         	dc.b	$01
00085FC5 E100                       	smpsAlterNote       $00
00085FC7 01                         	dc.b	$01
00085FC8 E1FA                       	smpsAlterNote       $FA
00085FCA 01                         	dc.b	$01
00085FCB E1FD                       	smpsAlterNote       $FD
00085FCD ECF5                       	smpsPSGAlterVol     $F5
00085FCF 9106                       	dc.b	nE1, $06
00085FD1 EC04                       	smpsPSGAlterVol     $04
00085FD3 E701                       	dc.b	smpsNoAttack, $01
00085FD5 EC07                       	smpsPSGAlterVol     $07
00085FD7 8003                       	dc.b	nRst, $03
00085FD9 ECF5                       	smpsPSGAlterVol     $F5
00085FDB 9106                       	dc.b	nE1, $06
00085FDD EC04                       	smpsPSGAlterVol     $04
00085FDF E701                       	dc.b	smpsNoAttack, $01
00085FE1 EC07                       	smpsPSGAlterVol     $07
00085FE3 8003                       	dc.b	nRst, $03
00085FE5 ECF5                       	smpsPSGAlterVol     $F5
00085FE7 9207                       	dc.b	nF1, $07
00085FE9 EC0B                       	smpsPSGAlterVol     $0B
00085FEB 8006                       	dc.b	nRst, $06
00085FED E100                       	smpsAlterNote       $00
00085FEF 01                         	dc.b	$01
00085FF0 E103                       	smpsAlterNote       $03
00085FF2 0101                       	dc.b	$01, $01
00085FF4 E1FD                       	smpsAlterNote       $FD
00085FF6 01                         	dc.b	$01
00085FF7 E1F9                       	smpsAlterNote       $F9
00085FF9 01                         	dc.b	$01
00085FFA E1FA                       	smpsAlterNote       $FA
00085FFC 01                         	dc.b	$01
00085FFD E100                       	smpsAlterNote       $00
00085FFF 01                         	dc.b	$01
00086000 E104                       	smpsAlterNote       $04
00086002 01                         	dc.b	$01
00086003 E1FD                       	smpsAlterNote       $FD
00086005 ECF5                       	smpsPSGAlterVol     $F5
00086007 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008600B EC04                       	smpsPSGAlterVol     $04
0008600D E701                       	dc.b	smpsNoAttack, $01
0008600F EC07                       	smpsPSGAlterVol     $07
00086011 8009                       	dc.b	nRst, $09
00086013 E100                       	smpsAlterNote       $00
00086015 01                         	dc.b	$01
00086016 E103                       	smpsAlterNote       $03
00086018 0101                       	dc.b	$01, $01
0008601A E1FD                       	smpsAlterNote       $FD
0008601C 01                         	dc.b	$01
0008601D E1F9                       	smpsAlterNote       $F9
0008601F 01                         	dc.b	$01
00086020 E1FA                       	smpsAlterNote       $FA
00086022 01                         	dc.b	$01
00086023 E100                       	smpsAlterNote       $00
00086025 01                         	dc.b	$01
00086026 E104                       	smpsAlterNote       $04
00086028 01                         	dc.b	$01
00086029 E100                       	smpsAlterNote       $00
0008602B 01                         	dc.b	$01
0008602C E1FD                       	smpsAlterNote       $FD
0008602E 01                         	dc.b	$01
0008602F E1F9                       	smpsAlterNote       $F9
00086031 01                         	dc.b	$01
00086032 E1FD                       	smpsAlterNote       $FD
00086034 01                         	dc.b	$01
00086035 E103                       	smpsAlterNote       $03
00086037 01                         	dc.b	$01
00086038 E104                       	smpsAlterNote       $04
0008603A 01                         	dc.b	$01
0008603B E100                       	smpsAlterNote       $00
0008603D 01                         	dc.b	$01
0008603E E1FD                       	smpsAlterNote       $FD
00086040 ECF5                       	smpsPSGAlterVol     $F5
00086042 9203 9106                  	dc.b	nF1, $03, nE1, $06
00086046 EC04                       	smpsPSGAlterVol     $04
00086048 E701                       	dc.b	smpsNoAttack, $01
0008604A EC07                       	smpsPSGAlterVol     $07
0008604C 8006                       	dc.b	nRst, $06
0008604E E100                       	smpsAlterNote       $00
00086050 01                         	dc.b	$01
00086051 E104                       	smpsAlterNote       $04
00086053 01                         	dc.b	$01
00086054 E103                       	smpsAlterNote       $03
00086056 01                         	dc.b	$01
00086057 E1FD                       	smpsAlterNote       $FD
00086059 01                         	dc.b	$01
0008605A E1F9                       	smpsAlterNote       $F9
0008605C 01                         	dc.b	$01
0008605D E1FD                       	smpsAlterNote       $FD
0008605F 01                         	dc.b	$01
00086060 E100                       	smpsAlterNote       $00
00086062 01                         	dc.b	$01
00086063 E104                       	smpsAlterNote       $04
00086065 01                         	dc.b	$01
00086066 E1FD                       	smpsAlterNote       $FD
00086068 ECF5                       	smpsPSGAlterVol     $F5
0008606A 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008606E E100                       	smpsAlterNote       $00
00086070 E701                       	dc.b	smpsNoAttack, $01
00086072 E104                       	smpsAlterNote       $04
00086074 E701                       	dc.b	smpsNoAttack, $01
00086076 E100                       	smpsAlterNote       $00
00086078 E701                       	dc.b	smpsNoAttack, $01
0008607A E1FD                       	smpsAlterNote       $FD
0008607C E701                       	dc.b	smpsNoAttack, $01
0008607E E1F9                       	smpsAlterNote       $F9
00086080 E701                       	dc.b	smpsNoAttack, $01
00086082 E1FD                       	smpsAlterNote       $FD
00086084 E701                       	dc.b	smpsNoAttack, $01
00086086 E103                       	smpsAlterNote       $03
00086088 E701                       	dc.b	smpsNoAttack, $01
0008608A E104                       	smpsAlterNote       $04
0008608C E701                       	dc.b	smpsNoAttack, $01
0008608E E100                       	smpsAlterNote       $00
00086090 E701                       	dc.b	smpsNoAttack, $01
00086092 E1FA                       	smpsAlterNote       $FA
00086094 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086098 E1FD                       	smpsAlterNote       $FD
0008609A E701                       	dc.b	smpsNoAttack, $01
0008609C E103                       	smpsAlterNote       $03
0008609E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860A2 E100                       	smpsAlterNote       $00
000860A4 E701                       	dc.b	smpsNoAttack, $01
000860A6 E1FA                       	smpsAlterNote       $FA
000860A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860AC E100                       	smpsAlterNote       $00
000860AE EC04                       	smpsPSGAlterVol     $04
000860B0 E701                       	dc.b	smpsNoAttack, $01
000860B2 EC07                       	smpsPSGAlterVol     $07
000860B4 E104                       	smpsAlterNote       $04
000860B6 8001                       	dc.b	nRst, $01
000860B8 E103                       	smpsAlterNote       $03
000860BA 01                         	dc.b	$01
000860BB E1FD                       	smpsAlterNote       $FD
000860BD 01                         	dc.b	$01
000860BE E1F9                       	smpsAlterNote       $F9
000860C0 01                         	dc.b	$01
000860C1 E1FD                       	smpsAlterNote       $FD
000860C3 01                         	dc.b	$01
000860C4 E100                       	smpsAlterNote       $00
000860C6 01                         	dc.b	$01
000860C7 E104                       	smpsAlterNote       $04
000860C9 01                         	dc.b	$01
000860CA E1FD                       	smpsAlterNote       $FD
000860CC ECF5                       	smpsPSGAlterVol     $F5
000860CE 9106                       	dc.b	nE1, $06
000860D0 EC04                       	smpsPSGAlterVol     $04
000860D2 E701                       	dc.b	smpsNoAttack, $01
000860D4 EC07                       	smpsPSGAlterVol     $07
000860D6 8003                       	dc.b	nRst, $03
000860D8 ECF5                       	smpsPSGAlterVol     $F5
000860DA 9106                       	dc.b	nE1, $06
000860DC EC04                       	smpsPSGAlterVol     $04
000860DE E701                       	dc.b	smpsNoAttack, $01
000860E0 EC07                       	smpsPSGAlterVol     $07
000860E2 8006                       	dc.b	nRst, $06
000860E4 E100                       	smpsAlterNote       $00
000860E6 01                         	dc.b	$01
000860E7 E104                       	smpsAlterNote       $04
000860E9 01                         	dc.b	$01
000860EA E100                       	smpsAlterNote       $00
000860EC 01                         	dc.b	$01
000860ED E1FD                       	smpsAlterNote       $FD
000860EF 01                         	dc.b	$01
000860F0 ECF5                       	smpsPSGAlterVol     $F5
000860F2 9206                       	dc.b	nF1, $06
000860F4 EC04                       	smpsPSGAlterVol     $04
000860F6 E701                       	dc.b	smpsNoAttack, $01
000860F8 EC07                       	smpsPSGAlterVol     $07
000860FA 8003                       	dc.b	nRst, $03
000860FC ECF5                       	smpsPSGAlterVol     $F5
000860FE 9207                       	dc.b	nF1, $07
00086100 EC0B                       	smpsPSGAlterVol     $0B
00086102 8007                       	dc.b	nRst, $07
00086104 E103                       	smpsAlterNote       $03
00086106 0101                       	dc.b	$01, $01
00086108 E1FD                       	smpsAlterNote       $FD
0008610A 01                         	dc.b	$01
0008610B E1FA                       	smpsAlterNote       $FA
0008610D 01                         	dc.b	$01
0008610E E1FD                       	smpsAlterNote       $FD
00086110 ECF5                       	smpsPSGAlterVol     $F5
00086112 9106                       	dc.b	nE1, $06
00086114 EC0B                       	smpsPSGAlterVol     $0B
00086116 8004                       	dc.b	nRst, $04
00086118 ECF5                       	smpsPSGAlterVol     $F5
0008611A 9106                       	dc.b	nE1, $06
0008611C EC04                       	smpsPSGAlterVol     $04
0008611E E701                       	dc.b	smpsNoAttack, $01
00086120 EC07                       	smpsPSGAlterVol     $07
00086122 8006                       	dc.b	nRst, $06
00086124 E100                       	smpsAlterNote       $00
00086126 01                         	dc.b	$01
00086127 E104                       	smpsAlterNote       $04
00086129 01                         	dc.b	$01
0008612A E100                       	smpsAlterNote       $00
0008612C 01                         	dc.b	$01
0008612D E1FA                       	smpsAlterNote       $FA
0008612F 01                         	dc.b	$01
00086130 E1FD                       	smpsAlterNote       $FD
00086132 ECF5                       	smpsPSGAlterVol     $F5
00086134 9206                       	dc.b	nF1, $06
00086136 EC04                       	smpsPSGAlterVol     $04
00086138 E701                       	dc.b	smpsNoAttack, $01
0008613A EC07                       	smpsPSGAlterVol     $07
0008613C 8003                       	dc.b	nRst, $03
0008613E ECF5                       	smpsPSGAlterVol     $F5
00086140 9206                       	dc.b	nF1, $06
00086142 EC04                       	smpsPSGAlterVol     $04
00086144 E701                       	dc.b	smpsNoAttack, $01
00086146 EC07                       	smpsPSGAlterVol     $07
00086148 8006                       	dc.b	nRst, $06
0008614A E100                       	smpsAlterNote       $00
0008614C 01                         	dc.b	$01
0008614D E104                       	smpsAlterNote       $04
0008614F 01                         	dc.b	$01
00086150 E103                       	smpsAlterNote       $03
00086152 01                         	dc.b	$01
00086153 E1FD                       	smpsAlterNote       $FD
00086155 01                         	dc.b	$01
00086156 ECF5                       	smpsPSGAlterVol     $F5
00086158 9107                       	dc.b	nE1, $07
0008615A EC0B                       	smpsPSGAlterVol     $0B
0008615C 8004                       	dc.b	nRst, $04
0008615E ECF5                       	smpsPSGAlterVol     $F5
00086160 9106                       	dc.b	nE1, $06
00086162 EC0B                       	smpsPSGAlterVol     $0B
00086164 8007                       	dc.b	nRst, $07
00086166 E103                       	smpsAlterNote       $03
00086168 0101                       	dc.b	$01, $01
0008616A E100                       	smpsAlterNote       $00
0008616C 01                         	dc.b	$01
0008616D E1FA                       	smpsAlterNote       $FA
0008616F 01                         	dc.b	$01
00086170 E1FD                       	smpsAlterNote       $FD
00086172 ECF5                       	smpsPSGAlterVol     $F5
00086174 9206                       	dc.b	nF1, $06
00086176 EC04                       	smpsPSGAlterVol     $04
00086178 E701                       	dc.b	smpsNoAttack, $01
0008617A EC07                       	smpsPSGAlterVol     $07
0008617C 8003                       	dc.b	nRst, $03
0008617E ECF5                       	smpsPSGAlterVol     $F5
00086180 9206                       	dc.b	nF1, $06
00086182 EC04                       	smpsPSGAlterVol     $04
00086184 E701                       	dc.b	smpsNoAttack, $01
00086186 EC07                       	smpsPSGAlterVol     $07
00086188 8006                       	dc.b	nRst, $06
0008618A E100                       	smpsAlterNote       $00
0008618C 01                         	dc.b	$01
0008618D E104                       	smpsAlterNote       $04
0008618F 01                         	dc.b	$01
00086190 E100                       	smpsAlterNote       $00
00086192 01                         	dc.b	$01
00086193 E1FD                       	smpsAlterNote       $FD
00086195 01                         	dc.b	$01
00086196 ECF5                       	smpsPSGAlterVol     $F5
00086198 9106                       	dc.b	nE1, $06
0008619A EC04                       	smpsPSGAlterVol     $04
0008619C E701                       	dc.b	smpsNoAttack, $01
0008619E EC07                       	smpsPSGAlterVol     $07
000861A0 8003                       	dc.b	nRst, $03
000861A2 ECF5                       	smpsPSGAlterVol     $F5
000861A4 9107 9106                  	dc.b	nE1, $07, nE1, $06
000861A8 EC04                       	smpsPSGAlterVol     $04
000861AA E701                       	dc.b	smpsNoAttack, $01
000861AC ECFC                       	smpsPSGAlterVol     $FC
000861AE 9103                       	dc.b	nE1, $03
000861B0 EC04                       	smpsPSGAlterVol     $04
000861B2 E701                       	dc.b	smpsNoAttack, $01
000861B4 ECFC                       	smpsPSGAlterVol     $FC
000861B6 9102                       	dc.b	nE1, $02
000861B8 EC04                       	smpsPSGAlterVol     $04
000861BA E701                       	dc.b	smpsNoAttack, $01
000861BC ECFC                       	smpsPSGAlterVol     $FC
000861BE 9103                       	dc.b	nE1, $03
000861C0 EC0B                       	smpsPSGAlterVol     $0B
000861C2 800A                       	dc.b	nRst, $0A
000861C4 E100                       	smpsAlterNote       $00
000861C6 01                         	dc.b	$01
000861C7 E104                       	smpsAlterNote       $04
000861C9 01                         	dc.b	$01
000861CA E100                       	smpsAlterNote       $00
000861CC 01                         	dc.b	$01
000861CD E1FA                       	smpsAlterNote       $FA
000861CF 01                         	dc.b	$01
000861D0 E1F9                       	smpsAlterNote       $F9
000861D2 01                         	dc.b	$01
000861D3 E1FD                       	smpsAlterNote       $FD
000861D5 01                         	dc.b	$01
000861D6 E103                       	smpsAlterNote       $03
000861D8 0101                       	dc.b	$01, $01
000861DA E100                       	smpsAlterNote       $00
000861DC 01                         	dc.b	$01
000861DD E1FA                       	smpsAlterNote       $FA
000861DF 0101                       	dc.b	$01, $01
000861E1 E1FD                       	smpsAlterNote       $FD
000861E3 ECF5                       	smpsPSGAlterVol     $F5
000861E5 9206                       	dc.b	nF1, $06
000861E7 EC04                       	smpsPSGAlterVol     $04
000861E9 E704                       	dc.b	smpsNoAttack, $04
000861EB ECFC                       	smpsPSGAlterVol     $FC
000861ED 9206                       	dc.b	nF1, $06
000861EF EC04                       	smpsPSGAlterVol     $04
000861F1 E701                       	dc.b	smpsNoAttack, $01
000861F3 EC07                       	smpsPSGAlterVol     $07
000861F5 8006                       	dc.b	nRst, $06
000861F7 E100                       	smpsAlterNote       $00
000861F9 01                         	dc.b	$01
000861FA E104                       	smpsAlterNote       $04
000861FC 01                         	dc.b	$01
000861FD E103                       	smpsAlterNote       $03
000861FF 01                         	dc.b	$01
00086200 E1FD                       	smpsAlterNote       $FD
00086202 01                         	dc.b	$01
00086203 ECF5                       	smpsPSGAlterVol     $F5
00086205 9407                       	dc.b	nG1, $07
00086207 EC0B                       	smpsPSGAlterVol     $0B
00086209 8004                       	dc.b	nRst, $04
0008620B ECF5                       	smpsPSGAlterVol     $F5
0008620D 9406                       	dc.b	nG1, $06
0008620F EC0B                       	smpsPSGAlterVol     $0B
00086211 8007                       	dc.b	nRst, $07
00086213 E103                       	smpsAlterNote       $03
00086215 0101                       	dc.b	$01, $01
00086217 E1FD                       	smpsAlterNote       $FD
00086219 01                         	dc.b	$01
0008621A E1F9                       	smpsAlterNote       $F9
0008621C 01                         	dc.b	$01
0008621D E1FD                       	smpsAlterNote       $FD
0008621F ECF5                       	smpsPSGAlterVol     $F5
00086221 9206                       	dc.b	nF1, $06
00086223 EC04                       	smpsPSGAlterVol     $04
00086225 E701                       	dc.b	smpsNoAttack, $01
00086227 EC07                       	smpsPSGAlterVol     $07
00086229 8003                       	dc.b	nRst, $03
0008622B ECF5                       	smpsPSGAlterVol     $F5
0008622D 9206                       	dc.b	nF1, $06
0008622F EC04                       	smpsPSGAlterVol     $04
00086231 E701                       	dc.b	smpsNoAttack, $01
00086233 EC07                       	smpsPSGAlterVol     $07
00086235 8006                       	dc.b	nRst, $06
00086237 E100                       	smpsAlterNote       $00
00086239 01                         	dc.b	$01
0008623A E104                       	smpsAlterNote       $04
0008623C 01                         	dc.b	$01
0008623D E100                       	smpsAlterNote       $00
0008623F 01                         	dc.b	$01
00086240 E1FA                       	smpsAlterNote       $FA
00086242 01                         	dc.b	$01
00086243 E1FD                       	smpsAlterNote       $FD
00086245 ECF5                       	smpsPSGAlterVol     $F5
00086247 9206                       	dc.b	nF1, $06
00086249 EC04                       	smpsPSGAlterVol     $04
0008624B E701                       	dc.b	smpsNoAttack, $01
0008624D EC07                       	smpsPSGAlterVol     $07
0008624F 8003                       	dc.b	nRst, $03
00086251 ECF5                       	smpsPSGAlterVol     $F5
00086253 9107                       	dc.b	nE1, $07
00086255 EC0B                       	smpsPSGAlterVol     $0B
00086257 8006                       	dc.b	nRst, $06
00086259 E100                       	smpsAlterNote       $00
0008625B 01                         	dc.b	$01
0008625C E103                       	smpsAlterNote       $03
0008625E 0101                       	dc.b	$01, $01
00086260 E1FD                       	smpsAlterNote       $FD
00086262 01                         	dc.b	$01
00086263 ECF5                       	smpsPSGAlterVol     $F5
00086265 9207                       	dc.b	nF1, $07
00086267 EC0B                       	smpsPSGAlterVol     $0B
00086269 8004                       	dc.b	nRst, $04
0008626B ECF5                       	smpsPSGAlterVol     $F5
0008626D 9206                       	dc.b	nF1, $06
0008626F EC04                       	smpsPSGAlterVol     $04
00086271 E701                       	dc.b	smpsNoAttack, $01
00086273 EC07                       	smpsPSGAlterVol     $07
00086275 8006                       	dc.b	nRst, $06
00086277 E103                       	smpsAlterNote       $03
00086279 01                         	dc.b	$01
0008627A E104                       	smpsAlterNote       $04
0008627C 01                         	dc.b	$01
0008627D E100                       	smpsAlterNote       $00
0008627F 01                         	dc.b	$01
00086280 E1FB                       	smpsAlterNote       $FB
00086282 01                         	dc.b	$01
00086283 E1FD                       	smpsAlterNote       $FD
00086285 ECF5                       	smpsPSGAlterVol     $F5
00086287 9406                       	dc.b	nG1, $06
00086289 EC04                       	smpsPSGAlterVol     $04
0008628B E701                       	dc.b	smpsNoAttack, $01
0008628D EC07                       	smpsPSGAlterVol     $07
0008628F 8003                       	dc.b	nRst, $03
00086291 ECF5                       	smpsPSGAlterVol     $F5
00086293 9406                       	dc.b	nG1, $06
00086295 EC04                       	smpsPSGAlterVol     $04
00086297 E701                       	dc.b	smpsNoAttack, $01
00086299 EC07                       	smpsPSGAlterVol     $07
0008629B 8006                       	dc.b	nRst, $06
0008629D E100                       	smpsAlterNote       $00
0008629F 01                         	dc.b	$01
000862A0 E104                       	smpsAlterNote       $04
000862A2 01                         	dc.b	$01
000862A3 E100                       	smpsAlterNote       $00
000862A5 01                         	dc.b	$01
000862A6 E1FD                       	smpsAlterNote       $FD
000862A8 01                         	dc.b	$01
000862A9 ECF5                       	smpsPSGAlterVol     $F5
000862AB 9206                       	dc.b	nF1, $06
000862AD EC04                       	smpsPSGAlterVol     $04
000862AF E701                       	dc.b	smpsNoAttack, $01
000862B1 EC07                       	smpsPSGAlterVol     $07
000862B3 8003                       	dc.b	nRst, $03
000862B5 ECF5                       	smpsPSGAlterVol     $F5
000862B7 9207                       	dc.b	nF1, $07
000862B9 EC0B                       	smpsPSGAlterVol     $0B
000862BB 8007                       	dc.b	nRst, $07
000862BD E103                       	smpsAlterNote       $03
000862BF 0101                       	dc.b	$01, $01
000862C1 E1FD                       	smpsAlterNote       $FD
000862C3 01                         	dc.b	$01
000862C4 E1FA                       	smpsAlterNote       $FA
000862C6 01                         	dc.b	$01
000862C7 E1FD                       	smpsAlterNote       $FD
000862C9 ECF5                       	smpsPSGAlterVol     $F5
000862CB 9206                       	dc.b	nF1, $06
000862CD EC0B                       	smpsPSGAlterVol     $0B
000862CF 8004                       	dc.b	nRst, $04
000862D1 ECF5                       	smpsPSGAlterVol     $F5
000862D3 9206                       	dc.b	nF1, $06
000862D5 EC04                       	smpsPSGAlterVol     $04
000862D7 E701                       	dc.b	smpsNoAttack, $01
000862D9 EC07                       	smpsPSGAlterVol     $07
000862DB 8006                       	dc.b	nRst, $06
000862DD E100                       	smpsAlterNote       $00
000862DF 01                         	dc.b	$01
000862E0 E104                       	smpsAlterNote       $04
000862E2 01                         	dc.b	$01
000862E3 E100                       	smpsAlterNote       $00
000862E5 01                         	dc.b	$01
000862E6 E1FA                       	smpsAlterNote       $FA
000862E8 01                         	dc.b	$01
000862E9 E1FD                       	smpsAlterNote       $FD
000862EB ECF5                       	smpsPSGAlterVol     $F5
000862ED 9206                       	dc.b	nF1, $06
000862EF EC04                       	smpsPSGAlterVol     $04
000862F1 E701                       	dc.b	smpsNoAttack, $01
000862F3 EC07                       	smpsPSGAlterVol     $07
000862F5 8003                       	dc.b	nRst, $03
000862F7 ECF5                       	smpsPSGAlterVol     $F5
000862F9 9207                       	dc.b	nF1, $07
000862FB EC0B                       	smpsPSGAlterVol     $0B
000862FD 8006                       	dc.b	nRst, $06
000862FF E100                       	smpsAlterNote       $00
00086301 01                         	dc.b	$01
00086302 E103                       	smpsAlterNote       $03
00086304 0101                       	dc.b	$01, $01
00086306 E1FD                       	smpsAlterNote       $FD
00086308 01                         	dc.b	$01
00086309 ECF5                       	smpsPSGAlterVol     $F5
0008630B 9207                       	dc.b	nF1, $07
0008630D EC0B                       	smpsPSGAlterVol     $0B
0008630F 8004                       	dc.b	nRst, $04
00086311 ECF5                       	smpsPSGAlterVol     $F5
00086313 9206                       	dc.b	nF1, $06
00086315 EC0B                       	smpsPSGAlterVol     $0B
00086317 8007                       	dc.b	nRst, $07
00086319 E103                       	smpsAlterNote       $03
0008631B 0101                       	dc.b	$01, $01
0008631D E100                       	smpsAlterNote       $00
0008631F 01                         	dc.b	$01
00086320 E1FA                       	smpsAlterNote       $FA
00086322 01                         	dc.b	$01
00086323 E1FD                       	smpsAlterNote       $FD
00086325 ECF5                       	smpsPSGAlterVol     $F5
00086327 9206                       	dc.b	nF1, $06
00086329 EC04                       	smpsPSGAlterVol     $04
0008632B E701                       	dc.b	smpsNoAttack, $01
0008632D EC07                       	smpsPSGAlterVol     $07
0008632F 8003                       	dc.b	nRst, $03
00086331 ECF5                       	smpsPSGAlterVol     $F5
00086333 9206                       	dc.b	nF1, $06
00086335 EC04                       	smpsPSGAlterVol     $04
00086337 E701                       	dc.b	smpsNoAttack, $01
00086339 EC07                       	smpsPSGAlterVol     $07
0008633B 8006                       	dc.b	nRst, $06
0008633D E100                       	smpsAlterNote       $00
0008633F 01                         	dc.b	$01
00086340 E104                       	smpsAlterNote       $04
00086342 01                         	dc.b	$01
00086343 E100                       	smpsAlterNote       $00
00086345 01                         	dc.b	$01
00086346 E1FD                       	smpsAlterNote       $FD
00086348 01                         	dc.b	$01
00086349 ECF5                       	smpsPSGAlterVol     $F5
0008634B 9206                       	dc.b	nF1, $06
0008634D EC04                       	smpsPSGAlterVol     $04
0008634F E701                       	dc.b	smpsNoAttack, $01
00086351 EC07                       	smpsPSGAlterVol     $07
00086353 8003                       	dc.b	nRst, $03
00086355 ECF5                       	smpsPSGAlterVol     $F5
00086357 9207                       	dc.b	nF1, $07
00086359 EC0B                       	smpsPSGAlterVol     $0B
0008635B 8007                       	dc.b	nRst, $07
0008635D E104                       	smpsAlterNote       $04
0008635F 0101                       	dc.b	$01, $01
00086361 E1FB                       	smpsAlterNote       $FB
00086363 01                         	dc.b	$01
00086364 E1F6                       	smpsAlterNote       $F6
00086366 0101                       	dc.b	$01, $01
00086368 E1FF                       	smpsAlterNote       $FF
0008636A 01                         	dc.b	$01
0008636B E105                       	smpsAlterNote       $05
0008636D 01                         	dc.b	$01
0008636E E104                       	smpsAlterNote       $04
00086370 01                         	dc.b	$01
00086371 E1FB                       	smpsAlterNote       $FB
00086373 01                         	dc.b	$01
00086374 E1F5                       	smpsAlterNote       $F5
00086376 01                         	dc.b	$01
00086377 E1FC                       	smpsAlterNote       $FC
00086379 ECF5                       	smpsPSGAlterVol     $F5
0008637B 8B0E                       	dc.b	nBb0, $0E
0008637D E102                       	smpsAlterNote       $02
0008637F EC0B                       	smpsPSGAlterVol     $0B
00086381 8001                       	dc.b	nRst, $01
00086383 E101                       	smpsAlterNote       $01
00086385 01                         	dc.b	$01
00086386 E1FC                       	smpsAlterNote       $FC
00086388 01                         	dc.b	$01
00086389 E1F9                       	smpsAlterNote       $F9
0008638B 0101                       	dc.b	$01, $01
0008638D E1FF                       	smpsAlterNote       $FF
0008638F 01                         	dc.b	$01
00086390 E102                       	smpsAlterNote       $02
00086392 01                         	dc.b	$01
00086393 E1FF                       	smpsAlterNote       $FF
00086395 01                         	dc.b	$01
00086396 E1FC                       	smpsAlterNote       $FC
00086398 01                         	dc.b	$01
00086399 E1F8                       	smpsAlterNote       $F8
0008639B 01                         	dc.b	$01
0008639C E1FC                       	smpsAlterNote       $FC
0008639E 01                         	dc.b	$01
0008639F E101                       	smpsAlterNote       $01
000863A1 01                         	dc.b	$01
000863A2 E102                       	smpsAlterNote       $02
000863A4 01                         	dc.b	$01
000863A5 E1FF                       	smpsAlterNote       $FF
000863A7 01                         	dc.b	$01
000863A8 E1FB                       	smpsAlterNote       $FB
000863AA ECF5                       	smpsPSGAlterVol     $F5
000863AC 8D0D                       	dc.b	nC1, $0D
000863AE E101                       	smpsAlterNote       $01
000863B0 EC0B                       	smpsPSGAlterVol     $0B
000863B2 8001                       	dc.b	nRst, $01
000863B4 E102                       	smpsAlterNote       $02
000863B6 01                         	dc.b	$01
000863B7 E1FF                       	smpsAlterNote       $FF
000863B9 01                         	dc.b	$01
000863BA E1F9                       	smpsAlterNote       $F9
000863BC 0101                       	dc.b	$01, $01
000863BE E1FC                       	smpsAlterNote       $FC
000863C0 01                         	dc.b	$01
000863C1 E101                       	smpsAlterNote       $01
000863C3 0101                       	dc.b	$01, $01
000863C5 E1FC                       	smpsAlterNote       $FC
000863C7 01                         	dc.b	$01
000863C8 E1F9                       	smpsAlterNote       $F9
000863CA 0101                       	dc.b	$01, $01
000863CC E1FF                       	smpsAlterNote       $FF
000863CE 01                         	dc.b	$01
000863CF E102                       	smpsAlterNote       $02
000863D1 01                         	dc.b	$01
000863D2 E101                       	smpsAlterNote       $01
000863D4 01                         	dc.b	$01
000863D5 E1FC                       	smpsAlterNote       $FC
000863D7 ECF5                       	smpsPSGAlterVol     $F5
000863D9 8F0D                       	dc.b	nD1, $0D
000863DB E1FF                       	smpsAlterNote       $FF
000863DD EC04                       	smpsPSGAlterVol     $04
000863DF E701                       	dc.b	smpsNoAttack, $01
000863E1 EC07                       	smpsPSGAlterVol     $07
000863E3 E103                       	smpsAlterNote       $03
000863E5 8001                       	dc.b	nRst, $01
000863E7 E102                       	smpsAlterNote       $02
000863E9 01                         	dc.b	$01
000863EA E1FD                       	smpsAlterNote       $FD
000863EC 01                         	dc.b	$01
000863ED E1F9                       	smpsAlterNote       $F9
000863EF 01                         	dc.b	$01
000863F0 E1FD                       	smpsAlterNote       $FD
000863F2 01                         	dc.b	$01
000863F3 E100                       	smpsAlterNote       $00
000863F5 01                         	dc.b	$01
000863F6 E103                       	smpsAlterNote       $03
000863F8 01                         	dc.b	$01
000863F9 E100                       	smpsAlterNote       $00
000863FB 01                         	dc.b	$01
000863FC E1FA                       	smpsAlterNote       $FA
000863FE 01                         	dc.b	$01
000863FF E1F9                       	smpsAlterNote       $F9
00086401 01                         	dc.b	$01
00086402 E1FD                       	smpsAlterNote       $FD
00086404 01                         	dc.b	$01
00086405 E102                       	smpsAlterNote       $02
00086407 0101                       	dc.b	$01, $01
00086409 E100                       	smpsAlterNote       $00
0008640B 01                         	dc.b	$01
0008640C E1FD                       	smpsAlterNote       $FD
0008640E ECF5                       	smpsPSGAlterVol     $F5
00086410 910D                       	dc.b	nE1, $0D
00086412 E103                       	smpsAlterNote       $03
00086414 EC0B                       	smpsPSGAlterVol     $0B
00086416 8001 01                    	dc.b	nRst, $01, $01
00086419 E100                       	smpsAlterNote       $00
0008641B 01                         	dc.b	$01
0008641C E1FA                       	smpsAlterNote       $FA
0008641E 0101                       	dc.b	$01, $01
00086420 E100                       	smpsAlterNote       $00
00086422 01                         	dc.b	$01
00086423 E103                       	smpsAlterNote       $03
00086425 01                         	dc.b	$01
00086426 E1FD                       	smpsAlterNote       $FD
00086428 ECF5                       	smpsPSGAlterVol     $F5
0008642A 9206                       	dc.b	nF1, $06
0008642C EC04                       	smpsPSGAlterVol     $04
0008642E E701                       	dc.b	smpsNoAttack, $01
00086430 EC07                       	smpsPSGAlterVol     $07
00086432 8003                       	dc.b	nRst, $03
00086434 ECF5                       	smpsPSGAlterVol     $F5
00086436 9207                       	dc.b	nF1, $07
00086438 EC0B                       	smpsPSGAlterVol     $0B
0008643A 8006                       	dc.b	nRst, $06
0008643C E100                       	smpsAlterNote       $00
0008643E 01                         	dc.b	$01
0008643F E103                       	smpsAlterNote       $03
00086441 0101                       	dc.b	$01, $01
00086443 E1FD                       	smpsAlterNote       $FD
00086445 01                         	dc.b	$01
00086446 ECF5                       	smpsPSGAlterVol     $F5
00086448 9407                       	dc.b	nG1, $07
0008644A EC0B                       	smpsPSGAlterVol     $0B
0008644C 8004                       	dc.b	nRst, $04
0008644E ECF5                       	smpsPSGAlterVol     $F5
00086450 9406                       	dc.b	nG1, $06
00086452 EC04                       	smpsPSGAlterVol     $04
00086454 E701                       	dc.b	smpsNoAttack, $01
00086456 EC07                       	smpsPSGAlterVol     $07
00086458 8006                       	dc.b	nRst, $06
0008645A E103                       	smpsAlterNote       $03
0008645C 01                         	dc.b	$01
0008645D E104                       	smpsAlterNote       $04
0008645F 01                         	dc.b	$01
00086460 E100                       	smpsAlterNote       $00
00086462 01                         	dc.b	$01
00086463 E1F9                       	smpsAlterNote       $F9
00086465 01                         	dc.b	$01
00086466 E1FD                       	smpsAlterNote       $FD
00086468 ECF5                       	smpsPSGAlterVol     $F5
0008646A 9206                       	dc.b	nF1, $06
0008646C EC04                       	smpsPSGAlterVol     $04
0008646E E701                       	dc.b	smpsNoAttack, $01
00086470 EC07                       	smpsPSGAlterVol     $07
00086472 8003                       	dc.b	nRst, $03
00086474 ECF5                       	smpsPSGAlterVol     $F5
00086476 9206                       	dc.b	nF1, $06
00086478 EC04                       	smpsPSGAlterVol     $04
0008647A E701                       	dc.b	smpsNoAttack, $01
0008647C EC07                       	smpsPSGAlterVol     $07
0008647E 8006                       	dc.b	nRst, $06
00086480 E100                       	smpsAlterNote       $00
00086482 01                         	dc.b	$01
00086483 E104                       	smpsAlterNote       $04
00086485 01                         	dc.b	$01
00086486 E103                       	smpsAlterNote       $03
00086488 01                         	dc.b	$01
00086489 E1FD                       	smpsAlterNote       $FD
0008648B 01                         	dc.b	$01
0008648C ECF5                       	smpsPSGAlterVol     $F5
0008648E 9407                       	dc.b	nG1, $07
00086490 EC0B                       	smpsPSGAlterVol     $0B
00086492 8004                       	dc.b	nRst, $04
00086494 ECF5                       	smpsPSGAlterVol     $F5
00086496 9406                       	dc.b	nG1, $06
00086498 EC0B                       	smpsPSGAlterVol     $0B
0008649A 8007                       	dc.b	nRst, $07
0008649C E103                       	smpsAlterNote       $03
0008649E 0101                       	dc.b	$01, $01
000864A0 E100                       	smpsAlterNote       $00
000864A2 01                         	dc.b	$01
000864A3 E1F9                       	smpsAlterNote       $F9
000864A5 01                         	dc.b	$01
000864A6 E1FD                       	smpsAlterNote       $FD
000864A8 ECF5                       	smpsPSGAlterVol     $F5
000864AA 9206                       	dc.b	nF1, $06
000864AC EC04                       	smpsPSGAlterVol     $04
000864AE E701                       	dc.b	smpsNoAttack, $01
000864B0 EC07                       	smpsPSGAlterVol     $07
000864B2 8003                       	dc.b	nRst, $03
000864B4 ECF5                       	smpsPSGAlterVol     $F5
000864B6 9206                       	dc.b	nF1, $06
000864B8 EC04                       	smpsPSGAlterVol     $04
000864BA E701                       	dc.b	smpsNoAttack, $01
000864BC EC07                       	smpsPSGAlterVol     $07
000864BE 8006                       	dc.b	nRst, $06
000864C0 E100                       	smpsAlterNote       $00
000864C2 01                         	dc.b	$01
000864C3 E104                       	smpsAlterNote       $04
000864C5 01                         	dc.b	$01
000864C6 E100                       	smpsAlterNote       $00
000864C8 01                         	dc.b	$01
000864C9 E1FB                       	smpsAlterNote       $FB
000864CB 01                         	dc.b	$01
000864CC E1FD                       	smpsAlterNote       $FD
000864CE ECF5                       	smpsPSGAlterVol     $F5
000864D0 9406                       	dc.b	nG1, $06
000864D2 EC04                       	smpsPSGAlterVol     $04
000864D4 E701                       	dc.b	smpsNoAttack, $01
000864D6 EC07                       	smpsPSGAlterVol     $07
000864D8 8003                       	dc.b	nRst, $03
000864DA ECF5                       	smpsPSGAlterVol     $F5
000864DC 9407                       	dc.b	nG1, $07
000864DE EC0B                       	smpsPSGAlterVol     $0B
000864E0 8006                       	dc.b	nRst, $06
000864E2 E100                       	smpsAlterNote       $00
000864E4 01                         	dc.b	$01
000864E5 E103                       	smpsAlterNote       $03
000864E7 0101                       	dc.b	$01, $01
000864E9 E1FD                       	smpsAlterNote       $FD
000864EB 01                         	dc.b	$01
000864EC ECF5                       	smpsPSGAlterVol     $F5
000864EE 9207                       	dc.b	nF1, $07
000864F0 EC0B                       	smpsPSGAlterVol     $0B
000864F2 8004                       	dc.b	nRst, $04
000864F4 ECF5                       	smpsPSGAlterVol     $F5
000864F6 9206                       	dc.b	nF1, $06
000864F8 EC04                       	smpsPSGAlterVol     $04
000864FA E701                       	dc.b	smpsNoAttack, $01
000864FC ECFC                       	smpsPSGAlterVol     $FC
000864FE E1FC                       	smpsAlterNote       $FC
00086500 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00086504 EC04                       	smpsPSGAlterVol     $04
00086506 E701                       	dc.b	smpsNoAttack, $01
00086508 ECFC                       	smpsPSGAlterVol     $FC
0008650A 9003                       	dc.b	nEb1, $03
0008650C E1FD                       	smpsAlterNote       $FD
0008650E 9403                       	dc.b	nG1, $03
00086510 EC04                       	smpsPSGAlterVol     $04
00086512 E701                       	dc.b	smpsNoAttack, $01
00086514 E1FE                       	smpsAlterNote       $FE
00086516 ECFC                       	smpsPSGAlterVol     $FC
00086518 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008651C EC04                       	smpsPSGAlterVol     $04
0008651E E701                       	dc.b	smpsNoAttack, $01
00086520 EC07                       	smpsPSGAlterVol     $07
00086522 8009                       	dc.b	nRst, $09
00086524 E100                       	smpsAlterNote       $00
00086526 01                         	dc.b	$01
00086527 F6F5 19                    	smpsJump            music84_Jump07
0008652A                            
0008652A                            ; PSG2 Data
0008652A                            music84_PSG2:
0008652A E1FC                       	smpsAlterNote       $FC
0008652C EC04                       	smpsPSGAlterVol     $04
0008652E 8F03                       	dc.b	nD1, $03
00086530 E1FD                       	smpsAlterNote       $FD
00086532 9203                       	dc.b	nF1, $03
00086534 EC04                       	smpsPSGAlterVol     $04
00086536 E701                       	dc.b	smpsNoAttack, $01
00086538 E1FE                       	smpsAlterNote       $FE
0008653A ECFC                       	smpsPSGAlterVol     $FC
0008653C 9603                       	dc.b	nA1, $03
0008653E E1FD                       	smpsAlterNote       $FD
00086540 9103                       	dc.b	nE1, $03
00086542 EC04                       	smpsPSGAlterVol     $04
00086544 E701                       	dc.b	smpsNoAttack, $01
00086546 ECFC                       	smpsPSGAlterVol     $FC
00086548 9403                       	dc.b	nG1, $03
0008654A E1FE                       	smpsAlterNote       $FE
0008654C 9703                       	dc.b	nBb1, $03
0008654E EC04                       	smpsPSGAlterVol     $04
00086550 E701                       	dc.b	smpsNoAttack, $01
00086552 E1FF                       	smpsAlterNote       $FF
00086554 ECFC                       	smpsPSGAlterVol     $FC
00086556 9B02                       	dc.b	nD2, $02
00086558 EC04                       	smpsPSGAlterVol     $04
0008655A E701                       	dc.b	smpsNoAttack, $01
0008655C ECFC                       	smpsPSGAlterVol     $FC
0008655E E1FE                       	smpsAlterNote       $FE
00086560 9A03                       	dc.b	nCs2, $03
00086562 EC0B                       	smpsPSGAlterVol     $0B
00086564 800A                       	dc.b	nRst, $0A
00086566 E102                       	smpsAlterNote       $02
00086568 01                         	dc.b	$01
00086569 E10A                       	smpsAlterNote       $0A
0008656B 01                         	dc.b	$01
0008656C E102                       	smpsAlterNote       $02
0008656E 01                         	dc.b	$01
0008656F E1FC                       	smpsAlterNote       $FC
00086571 01                         	dc.b	$01
00086572 E10A                       	smpsAlterNote       $0A
00086574 01                         	dc.b	$01
00086575 E1FC                       	smpsAlterNote       $FC
00086577 01                         	dc.b	$01
00086578 E108                       	smpsAlterNote       $08
0008657A 01                         	dc.b	$01
0008657B E10A                       	smpsAlterNote       $0A
0008657D 01                         	dc.b	$01
0008657E E102                       	smpsAlterNote       $02
00086580 01                         	dc.b	$01
00086581 E1F7                       	smpsAlterNote       $F7
00086583 0101                       	dc.b	$01, $01
00086585 E102                       	smpsAlterNote       $02
00086587 01                         	dc.b	$01
00086588 E108                       	smpsAlterNote       $08
0008658A 0101                       	dc.b	$01, $01
0008658C E1FC                       	smpsAlterNote       $FC
0008658E 01                         	dc.b	$01
0008658F E10A                       	smpsAlterNote       $0A
00086591 01                         	dc.b	$01
00086592 E1F7                       	smpsAlterNote       $F7
00086594 01                         	dc.b	$01
00086595 E102                       	smpsAlterNote       $02
00086597 01                         	dc.b	$01
00086598 E10A                       	smpsAlterNote       $0A
0008659A 01                         	dc.b	$01
0008659B E102                       	smpsAlterNote       $02
0008659D 01                         	dc.b	$01
0008659E E1FC                       	smpsAlterNote       $FC
000865A0 01                         	dc.b	$01
000865A1                            
000865A1                            music84_Jump06:
000865A1 E10A                       	smpsAlterNote       $0A
000865A3 8001                       	dc.b	nRst, $01
000865A5 E1FC                       	smpsAlterNote       $FC
000865A7 01                         	dc.b	$01
000865A8 E108                       	smpsAlterNote       $08
000865AA 01                         	dc.b	$01
000865AB E10A                       	smpsAlterNote       $0A
000865AD 01                         	dc.b	$01
000865AE E1FC                       	smpsAlterNote       $FC
000865B0 ECF5                       	smpsPSGAlterVol     $F5
000865B2 8F06                       	dc.b	nD1, $06
000865B4 EC04                       	smpsPSGAlterVol     $04
000865B6 E701                       	dc.b	smpsNoAttack, $01
000865B8 EC07                       	smpsPSGAlterVol     $07
000865BA 8003                       	dc.b	nRst, $03
000865BC ECF5                       	smpsPSGAlterVol     $F5
000865BE 8F06                       	dc.b	nD1, $06
000865C0 EC04                       	smpsPSGAlterVol     $04
000865C2 E701                       	dc.b	smpsNoAttack, $01
000865C4 EC07                       	smpsPSGAlterVol     $07
000865C6 8006                       	dc.b	nRst, $06
000865C8 E1FF                       	smpsAlterNote       $FF
000865CA 01                         	dc.b	$01
000865CB E102                       	smpsAlterNote       $02
000865CD 01                         	dc.b	$01
000865CE E1FF                       	smpsAlterNote       $FF
000865D0 01                         	dc.b	$01
000865D1 E1F9                       	smpsAlterNote       $F9
000865D3 01                         	dc.b	$01
000865D4 E1FC                       	smpsAlterNote       $FC
000865D6 ECF5                       	smpsPSGAlterVol     $F5
000865D8 9006                       	dc.b	nEb1, $06
000865DA EC04                       	smpsPSGAlterVol     $04
000865DC E701                       	dc.b	smpsNoAttack, $01
000865DE EC07                       	smpsPSGAlterVol     $07
000865E0 8003                       	dc.b	nRst, $03
000865E2 ECF5                       	smpsPSGAlterVol     $F5
000865E4 9007                       	dc.b	nEb1, $07
000865E6 EC0B                       	smpsPSGAlterVol     $0B
000865E8 8006                       	dc.b	nRst, $06
000865EA E1FF                       	smpsAlterNote       $FF
000865EC 01                         	dc.b	$01
000865ED E103                       	smpsAlterNote       $03
000865EF 0101                       	dc.b	$01, $01
000865F1 E1FC                       	smpsAlterNote       $FC
000865F3 01                         	dc.b	$01
000865F4 ECF5                       	smpsPSGAlterVol     $F5
000865F6 8F07                       	dc.b	nD1, $07
000865F8 EC0B                       	smpsPSGAlterVol     $0B
000865FA 8004                       	dc.b	nRst, $04
000865FC ECF5                       	smpsPSGAlterVol     $F5
000865FE 8F06                       	dc.b	nD1, $06
00086600 EC04                       	smpsPSGAlterVol     $04
00086602 E701                       	dc.b	smpsNoAttack, $01
00086604 EC07                       	smpsPSGAlterVol     $07
00086606 8006                       	dc.b	nRst, $06
00086608 E102                       	smpsAlterNote       $02
0008660A 01                         	dc.b	$01
0008660B E103                       	smpsAlterNote       $03
0008660D 01                         	dc.b	$01
0008660E E1FF                       	smpsAlterNote       $FF
00086610 01                         	dc.b	$01
00086611 E1F9                       	smpsAlterNote       $F9
00086613 01                         	dc.b	$01
00086614 E1FC                       	smpsAlterNote       $FC
00086616 ECF5                       	smpsPSGAlterVol     $F5
00086618 8F06                       	dc.b	nD1, $06
0008661A EC04                       	smpsPSGAlterVol     $04
0008661C E701                       	dc.b	smpsNoAttack, $01
0008661E EC07                       	smpsPSGAlterVol     $07
00086620 8003                       	dc.b	nRst, $03
00086622 ECF5                       	smpsPSGAlterVol     $F5
00086624 8F06                       	dc.b	nD1, $06
00086626 EC04                       	smpsPSGAlterVol     $04
00086628 E701                       	dc.b	smpsNoAttack, $01
0008662A EC07                       	smpsPSGAlterVol     $07
0008662C 8006                       	dc.b	nRst, $06
0008662E E1FF                       	smpsAlterNote       $FF
00086630 01                         	dc.b	$01
00086631 E103                       	smpsAlterNote       $03
00086633 01                         	dc.b	$01
00086634 E1FF                       	smpsAlterNote       $FF
00086636 01                         	dc.b	$01
00086637 E1FC                       	smpsAlterNote       $FC
00086639 01                         	dc.b	$01
0008663A ECF5                       	smpsPSGAlterVol     $F5
0008663C 8F06                       	dc.b	nD1, $06
0008663E EC04                       	smpsPSGAlterVol     $04
00086640 E701                       	dc.b	smpsNoAttack, $01
00086642 EC07                       	smpsPSGAlterVol     $07
00086644 8003                       	dc.b	nRst, $03
00086646 ECF5                       	smpsPSGAlterVol     $F5
00086648 8F07                       	dc.b	nD1, $07
0008664A EC0B                       	smpsPSGAlterVol     $0B
0008664C 8007                       	dc.b	nRst, $07
0008664E E101                       	smpsAlterNote       $01
00086650 0101                       	dc.b	$01, $01
00086652 E1FC                       	smpsAlterNote       $FC
00086654 01                         	dc.b	$01
00086655 E1F9                       	smpsAlterNote       $F9
00086657 01                         	dc.b	$01
00086658 E1FC                       	smpsAlterNote       $FC
0008665A ECF5                       	smpsPSGAlterVol     $F5
0008665C 9006                       	dc.b	nEb1, $06
0008665E EC0B                       	smpsPSGAlterVol     $0B
00086660 8004                       	dc.b	nRst, $04
00086662 ECF5                       	smpsPSGAlterVol     $F5
00086664 9006                       	dc.b	nEb1, $06
00086666 EC04                       	smpsPSGAlterVol     $04
00086668 E701                       	dc.b	smpsNoAttack, $01
0008666A EC07                       	smpsPSGAlterVol     $07
0008666C 8006                       	dc.b	nRst, $06
0008666E E100                       	smpsAlterNote       $00
00086670 01                         	dc.b	$01
00086671 E102                       	smpsAlterNote       $02
00086673 01                         	dc.b	$01
00086674 E100                       	smpsAlterNote       $00
00086676 01                         	dc.b	$01
00086677 E1FD                       	smpsAlterNote       $FD
00086679 01                         	dc.b	$01
0008667A E1FF                       	smpsAlterNote       $FF
0008667C ECF5                       	smpsPSGAlterVol     $F5
0008667E 9B06                       	dc.b	nD2, $06
00086680 EC04                       	smpsPSGAlterVol     $04
00086682 E701                       	dc.b	smpsNoAttack, $01
00086684 EC07                       	smpsPSGAlterVol     $07
00086686 8003                       	dc.b	nRst, $03
00086688 ECF5                       	smpsPSGAlterVol     $F5
0008668A 9B07                       	dc.b	nD2, $07
0008668C EC0B                       	smpsPSGAlterVol     $0B
0008668E 8006                       	dc.b	nRst, $06
00086690 E102                       	smpsAlterNote       $02
00086692 01                         	dc.b	$01
00086693 E106                       	smpsAlterNote       $06
00086695 01                         	dc.b	$01
00086696 E105                       	smpsAlterNote       $05
00086698 01                         	dc.b	$01
00086699 E1FF                       	smpsAlterNote       $FF
0008669B 01                         	dc.b	$01
0008669C ECF5                       	smpsPSGAlterVol     $F5
0008669E 9B07                       	dc.b	nD2, $07
000866A0 EC0B                       	smpsPSGAlterVol     $0B
000866A2 8004                       	dc.b	nRst, $04
000866A4 ECF5                       	smpsPSGAlterVol     $F5
000866A6 9B06                       	dc.b	nD2, $06
000866A8 EC0B                       	smpsPSGAlterVol     $0B
000866AA 8007                       	dc.b	nRst, $07
000866AC E105                       	smpsAlterNote       $05
000866AE 0101                       	dc.b	$01, $01
000866B0 E102                       	smpsAlterNote       $02
000866B2 01                         	dc.b	$01
000866B3 E1FC                       	smpsAlterNote       $FC
000866B5 01                         	dc.b	$01
000866B6 E1FF                       	smpsAlterNote       $FF
000866B8 ECF5                       	smpsPSGAlterVol     $F5
000866BA 9B06                       	dc.b	nD2, $06
000866BC EC04                       	smpsPSGAlterVol     $04
000866BE E701                       	dc.b	smpsNoAttack, $01
000866C0 EC07                       	smpsPSGAlterVol     $07
000866C2 8003                       	dc.b	nRst, $03
000866C4 ECF5                       	smpsPSGAlterVol     $F5
000866C6 9B06                       	dc.b	nD2, $06
000866C8 EC04                       	smpsPSGAlterVol     $04
000866CA E701                       	dc.b	smpsNoAttack, $01
000866CC EC07                       	smpsPSGAlterVol     $07
000866CE 8006                       	dc.b	nRst, $06
000866D0 E102                       	smpsAlterNote       $02
000866D2 01                         	dc.b	$01
000866D3 E106                       	smpsAlterNote       $06
000866D5 01                         	dc.b	$01
000866D6 E102                       	smpsAlterNote       $02
000866D8 01                         	dc.b	$01
000866D9 E1FF                       	smpsAlterNote       $FF
000866DB 01                         	dc.b	$01
000866DC ECF5                       	smpsPSGAlterVol     $F5
000866DE 9B06                       	dc.b	nD2, $06
000866E0 EC04                       	smpsPSGAlterVol     $04
000866E2 E701                       	dc.b	smpsNoAttack, $01
000866E4 EC07                       	smpsPSGAlterVol     $07
000866E6 8003                       	dc.b	nRst, $03
000866E8 ECF5                       	smpsPSGAlterVol     $F5
000866EA 9B07                       	dc.b	nD2, $07
000866EC EC0B                       	smpsPSGAlterVol     $0B
000866EE 8007                       	dc.b	nRst, $07
000866F0 E105                       	smpsAlterNote       $05
000866F2 0101                       	dc.b	$01, $01
000866F4 E1FF                       	smpsAlterNote       $FF
000866F6 01                         	dc.b	$01
000866F7 E1FC                       	smpsAlterNote       $FC
000866F9 01                         	dc.b	$01
000866FA E1FF                       	smpsAlterNote       $FF
000866FC ECF5                       	smpsPSGAlterVol     $F5
000866FE 9B06                       	dc.b	nD2, $06
00086700 EC0B                       	smpsPSGAlterVol     $0B
00086702 8004                       	dc.b	nRst, $04
00086704 ECF5                       	smpsPSGAlterVol     $F5
00086706 9B06                       	dc.b	nD2, $06
00086708 EC04                       	smpsPSGAlterVol     $04
0008670A E701                       	dc.b	smpsNoAttack, $01
0008670C EC07                       	smpsPSGAlterVol     $07
0008670E 8006                       	dc.b	nRst, $06
00086710 E105                       	smpsAlterNote       $05
00086712 01                         	dc.b	$01
00086713 E106                       	smpsAlterNote       $06
00086715 01                         	dc.b	$01
00086716 E102                       	smpsAlterNote       $02
00086718 01                         	dc.b	$01
00086719 E1FC                       	smpsAlterNote       $FC
0008671B 01                         	dc.b	$01
0008671C E1FF                       	smpsAlterNote       $FF
0008671E ECF5                       	smpsPSGAlterVol     $F5
00086720 9B06                       	dc.b	nD2, $06
00086722 EC04                       	smpsPSGAlterVol     $04
00086724 E701                       	dc.b	smpsNoAttack, $01
00086726 EC07                       	smpsPSGAlterVol     $07
00086728 8003                       	dc.b	nRst, $03
0008672A ECF5                       	smpsPSGAlterVol     $F5
0008672C 9B06                       	dc.b	nD2, $06
0008672E EC04                       	smpsPSGAlterVol     $04
00086730 E701                       	dc.b	smpsNoAttack, $01
00086732 EC07                       	smpsPSGAlterVol     $07
00086734 8006                       	dc.b	nRst, $06
00086736 E102                       	smpsAlterNote       $02
00086738 01                         	dc.b	$01
00086739 E106                       	smpsAlterNote       $06
0008673B 01                         	dc.b	$01
0008673C E105                       	smpsAlterNote       $05
0008673E 01                         	dc.b	$01
0008673F E1FF                       	smpsAlterNote       $FF
00086741 01                         	dc.b	$01
00086742 ECF5                       	smpsPSGAlterVol     $F5
00086744 9B07                       	dc.b	nD2, $07
00086746 EC0B                       	smpsPSGAlterVol     $0B
00086748 8004                       	dc.b	nRst, $04
0008674A ECF5                       	smpsPSGAlterVol     $F5
0008674C 9B06                       	dc.b	nD2, $06
0008674E EC0B                       	smpsPSGAlterVol     $0B
00086750 8007                       	dc.b	nRst, $07
00086752 E105                       	smpsAlterNote       $05
00086754 0101                       	dc.b	$01, $01
00086756 E102                       	smpsAlterNote       $02
00086758 01                         	dc.b	$01
00086759 E1FC                       	smpsAlterNote       $FC
0008675B 01                         	dc.b	$01
0008675C E1FF                       	smpsAlterNote       $FF
0008675E ECF5                       	smpsPSGAlterVol     $F5
00086760 9B06                       	dc.b	nD2, $06
00086762 EC04                       	smpsPSGAlterVol     $04
00086764 E701                       	dc.b	smpsNoAttack, $01
00086766 EC07                       	smpsPSGAlterVol     $07
00086768 8003                       	dc.b	nRst, $03
0008676A ECF5                       	smpsPSGAlterVol     $F5
0008676C 9B06                       	dc.b	nD2, $06
0008676E EC04                       	smpsPSGAlterVol     $04
00086770 E701                       	dc.b	smpsNoAttack, $01
00086772 EC07                       	smpsPSGAlterVol     $07
00086774 8006                       	dc.b	nRst, $06
00086776 E102                       	smpsAlterNote       $02
00086778 01                         	dc.b	$01
00086779 E106                       	smpsAlterNote       $06
0008677B 01                         	dc.b	$01
0008677C E102                       	smpsAlterNote       $02
0008677E 01                         	dc.b	$01
0008677F E1FF                       	smpsAlterNote       $FF
00086781 01                         	dc.b	$01
00086782 ECF5                       	smpsPSGAlterVol     $F5
00086784 9B06                       	dc.b	nD2, $06
00086786 EC04                       	smpsPSGAlterVol     $04
00086788 E701                       	dc.b	smpsNoAttack, $01
0008678A EC07                       	smpsPSGAlterVol     $07
0008678C 8003                       	dc.b	nRst, $03
0008678E ECF5                       	smpsPSGAlterVol     $F5
00086790 9B07                       	dc.b	nD2, $07
00086792 E1FE                       	smpsAlterNote       $FE
00086794 9706                       	dc.b	nBb1, $06
00086796 EC04                       	smpsPSGAlterVol     $04
00086798 E701                       	dc.b	smpsNoAttack, $01
0008679A ECFC                       	smpsPSGAlterVol     $FC
0008679C 9703                       	dc.b	nBb1, $03
0008679E EC04                       	smpsPSGAlterVol     $04
000867A0 E701                       	dc.b	smpsNoAttack, $01
000867A2 ECFC                       	smpsPSGAlterVol     $FC
000867A4 9702                       	dc.b	nBb1, $02
000867A6 EC04                       	smpsPSGAlterVol     $04
000867A8 E701                       	dc.b	smpsNoAttack, $01
000867AA ECFC                       	smpsPSGAlterVol     $FC
000867AC 9606                       	dc.b	nA1, $06
000867AE EC04                       	smpsPSGAlterVol     $04
000867B0 E701                       	dc.b	smpsNoAttack, $01
000867B2 EC07                       	smpsPSGAlterVol     $07
000867B4 8006                       	dc.b	nRst, $06
000867B6 E101                       	smpsAlterNote       $01
000867B8 01                         	dc.b	$01
000867B9 E107                       	smpsAlterNote       $07
000867BB 01                         	dc.b	$01
000867BC E101                       	smpsAlterNote       $01
000867BE 01                         	dc.b	$01
000867BF E1F8                       	smpsAlterNote       $F8
000867C1 01                         	dc.b	$01
000867C2 E1F7                       	smpsAlterNote       $F7
000867C4 01                         	dc.b	$01
000867C5 E1FC                       	smpsAlterNote       $FC
000867C7 01                         	dc.b	$01
000867C8 E106                       	smpsAlterNote       $06
000867CA 01                         	dc.b	$01
000867CB E107                       	smpsAlterNote       $07
000867CD 01                         	dc.b	$01
000867CE E101                       	smpsAlterNote       $01
000867D0 01                         	dc.b	$01
000867D1 E1F8                       	smpsAlterNote       $F8
000867D3 0101                       	dc.b	$01, $01
000867D5 E1FC                       	smpsAlterNote       $FC
000867D7 ECF5                       	smpsPSGAlterVol     $F5
000867D9 8F06                       	dc.b	nD1, $06
000867DB EC04                       	smpsPSGAlterVol     $04
000867DD E701                       	dc.b	smpsNoAttack, $01
000867DF EC07                       	smpsPSGAlterVol     $07
000867E1 8003                       	dc.b	nRst, $03
000867E3 ECF5                       	smpsPSGAlterVol     $F5
000867E5 8F06                       	dc.b	nD1, $06
000867E7 EC04                       	smpsPSGAlterVol     $04
000867E9 E701                       	dc.b	smpsNoAttack, $01
000867EB EC07                       	smpsPSGAlterVol     $07
000867ED 8006                       	dc.b	nRst, $06
000867EF E1FF                       	smpsAlterNote       $FF
000867F1 01                         	dc.b	$01
000867F2 E102                       	smpsAlterNote       $02
000867F4 01                         	dc.b	$01
000867F5 E101                       	smpsAlterNote       $01
000867F7 01                         	dc.b	$01
000867F8 E1FC                       	smpsAlterNote       $FC
000867FA 01                         	dc.b	$01
000867FB ECF5                       	smpsPSGAlterVol     $F5
000867FD 9007                       	dc.b	nEb1, $07
000867FF EC0B                       	smpsPSGAlterVol     $0B
00086801 8004                       	dc.b	nRst, $04
00086803 ECF5                       	smpsPSGAlterVol     $F5
00086805 9006                       	dc.b	nEb1, $06
00086807 EC0B                       	smpsPSGAlterVol     $0B
00086809 8007                       	dc.b	nRst, $07
0008680B E103                       	smpsAlterNote       $03
0008680D 0101                       	dc.b	$01, $01
0008680F E1FC                       	smpsAlterNote       $FC
00086811 01                         	dc.b	$01
00086812 E1F9                       	smpsAlterNote       $F9
00086814 01                         	dc.b	$01
00086815 E1FC                       	smpsAlterNote       $FC
00086817 ECF5                       	smpsPSGAlterVol     $F5
00086819 8F06                       	dc.b	nD1, $06
0008681B EC04                       	smpsPSGAlterVol     $04
0008681D E701                       	dc.b	smpsNoAttack, $01
0008681F EC07                       	smpsPSGAlterVol     $07
00086821 8003                       	dc.b	nRst, $03
00086823 ECF5                       	smpsPSGAlterVol     $F5
00086825 8F06                       	dc.b	nD1, $06
00086827 EC04                       	smpsPSGAlterVol     $04
00086829 E701                       	dc.b	smpsNoAttack, $01
0008682B EC07                       	smpsPSGAlterVol     $07
0008682D 8006                       	dc.b	nRst, $06
0008682F E1FF                       	smpsAlterNote       $FF
00086831 01                         	dc.b	$01
00086832 E103                       	smpsAlterNote       $03
00086834 01                         	dc.b	$01
00086835 E1FF                       	smpsAlterNote       $FF
00086837 01                         	dc.b	$01
00086838 E1F9                       	smpsAlterNote       $F9
0008683A 01                         	dc.b	$01
0008683B E1FC                       	smpsAlterNote       $FC
0008683D ECF5                       	smpsPSGAlterVol     $F5
0008683F 8F06                       	dc.b	nD1, $06
00086841 EC04                       	smpsPSGAlterVol     $04
00086843 E701                       	dc.b	smpsNoAttack, $01
00086845 EC07                       	smpsPSGAlterVol     $07
00086847 8003                       	dc.b	nRst, $03
00086849 ECF5                       	smpsPSGAlterVol     $F5
0008684B 8F07                       	dc.b	nD1, $07
0008684D EC0B                       	smpsPSGAlterVol     $0B
0008684F 8006                       	dc.b	nRst, $06
00086851 E1FF                       	smpsAlterNote       $FF
00086853 01                         	dc.b	$01
00086854 E102                       	smpsAlterNote       $02
00086856 0101                       	dc.b	$01, $01
00086858 E1FC                       	smpsAlterNote       $FC
0008685A 01                         	dc.b	$01
0008685B ECF5                       	smpsPSGAlterVol     $F5
0008685D 8F07                       	dc.b	nD1, $07
0008685F EC0B                       	smpsPSGAlterVol     $0B
00086861 8004                       	dc.b	nRst, $04
00086863 ECF5                       	smpsPSGAlterVol     $F5
00086865 8F06                       	dc.b	nD1, $06
00086867 EC04                       	smpsPSGAlterVol     $04
00086869 E701                       	dc.b	smpsNoAttack, $01
0008686B EC07                       	smpsPSGAlterVol     $07
0008686D 8006                       	dc.b	nRst, $06
0008686F E101                       	smpsAlterNote       $01
00086871 01                         	dc.b	$01
00086872 E102                       	smpsAlterNote       $02
00086874 01                         	dc.b	$01
00086875 E1FF                       	smpsAlterNote       $FF
00086877 01                         	dc.b	$01
00086878 E1F9                       	smpsAlterNote       $F9
0008687A 01                         	dc.b	$01
0008687B E1FC                       	smpsAlterNote       $FC
0008687D ECF5                       	smpsPSGAlterVol     $F5
0008687F 9006                       	dc.b	nEb1, $06
00086881 EC04                       	smpsPSGAlterVol     $04
00086883 E701                       	dc.b	smpsNoAttack, $01
00086885 EC07                       	smpsPSGAlterVol     $07
00086887 8003                       	dc.b	nRst, $03
00086889 ECF5                       	smpsPSGAlterVol     $F5
0008688B 9006                       	dc.b	nEb1, $06
0008688D EC04                       	smpsPSGAlterVol     $04
0008688F E701                       	dc.b	smpsNoAttack, $01
00086891 EC07                       	smpsPSGAlterVol     $07
00086893 8006                       	dc.b	nRst, $06
00086895 E100                       	smpsAlterNote       $00
00086897 01                         	dc.b	$01
00086898 E102                       	smpsAlterNote       $02
0008689A 01                         	dc.b	$01
0008689B E100                       	smpsAlterNote       $00
0008689D 01                         	dc.b	$01
0008689E E1FF                       	smpsAlterNote       $FF
000868A0 01                         	dc.b	$01
000868A1 ECF5                       	smpsPSGAlterVol     $F5
000868A3 9B06                       	dc.b	nD2, $06
000868A5 EC04                       	smpsPSGAlterVol     $04
000868A7 E701                       	dc.b	smpsNoAttack, $01
000868A9 EC07                       	smpsPSGAlterVol     $07
000868AB 8003                       	dc.b	nRst, $03
000868AD ECF5                       	smpsPSGAlterVol     $F5
000868AF 9B07                       	dc.b	nD2, $07
000868B1 EC0B                       	smpsPSGAlterVol     $0B
000868B3 8007                       	dc.b	nRst, $07
000868B5 E105                       	smpsAlterNote       $05
000868B7 0101                       	dc.b	$01, $01
000868B9 E1FF                       	smpsAlterNote       $FF
000868BB 01                         	dc.b	$01
000868BC E1FC                       	smpsAlterNote       $FC
000868BE 01                         	dc.b	$01
000868BF E1FF                       	smpsAlterNote       $FF
000868C1 ECF5                       	smpsPSGAlterVol     $F5
000868C3 9B06                       	dc.b	nD2, $06
000868C5 EC0B                       	smpsPSGAlterVol     $0B
000868C7 8004                       	dc.b	nRst, $04
000868C9 ECF5                       	smpsPSGAlterVol     $F5
000868CB 9B06                       	dc.b	nD2, $06
000868CD EC04                       	smpsPSGAlterVol     $04
000868CF E701                       	dc.b	smpsNoAttack, $01
000868D1 EC07                       	smpsPSGAlterVol     $07
000868D3 8006                       	dc.b	nRst, $06
000868D5 E102                       	smpsAlterNote       $02
000868D7 01                         	dc.b	$01
000868D8 E106                       	smpsAlterNote       $06
000868DA 01                         	dc.b	$01
000868DB E102                       	smpsAlterNote       $02
000868DD 01                         	dc.b	$01
000868DE E1FC                       	smpsAlterNote       $FC
000868E0 01                         	dc.b	$01
000868E1 E1FF                       	smpsAlterNote       $FF
000868E3 ECF5                       	smpsPSGAlterVol     $F5
000868E5 9B06                       	dc.b	nD2, $06
000868E7 EC04                       	smpsPSGAlterVol     $04
000868E9 E701                       	dc.b	smpsNoAttack, $01
000868EB EC07                       	smpsPSGAlterVol     $07
000868ED 8003                       	dc.b	nRst, $03
000868EF ECF5                       	smpsPSGAlterVol     $F5
000868F1 9B07                       	dc.b	nD2, $07
000868F3 EC0B                       	smpsPSGAlterVol     $0B
000868F5 8006                       	dc.b	nRst, $06
000868F7 E102                       	smpsAlterNote       $02
000868F9 01                         	dc.b	$01
000868FA E105                       	smpsAlterNote       $05
000868FC 0101                       	dc.b	$01, $01
000868FE E1FF                       	smpsAlterNote       $FF
00086900 01                         	dc.b	$01
00086901 ECF5                       	smpsPSGAlterVol     $F5
00086903 9B07                       	dc.b	nD2, $07
00086905 EC0B                       	smpsPSGAlterVol     $0B
00086907 8004                       	dc.b	nRst, $04
00086909 ECF5                       	smpsPSGAlterVol     $F5
0008690B 9B06                       	dc.b	nD2, $06
0008690D EC0B                       	smpsPSGAlterVol     $0B
0008690F 8007                       	dc.b	nRst, $07
00086911 E105                       	smpsAlterNote       $05
00086913 0101                       	dc.b	$01, $01
00086915 E102                       	smpsAlterNote       $02
00086917 01                         	dc.b	$01
00086918 E1FC                       	smpsAlterNote       $FC
0008691A 01                         	dc.b	$01
0008691B E1FF                       	smpsAlterNote       $FF
0008691D ECF5                       	smpsPSGAlterVol     $F5
0008691F 9B06                       	dc.b	nD2, $06
00086921 EC04                       	smpsPSGAlterVol     $04
00086923 E701                       	dc.b	smpsNoAttack, $01
00086925 EC07                       	smpsPSGAlterVol     $07
00086927 8003                       	dc.b	nRst, $03
00086929 ECF5                       	smpsPSGAlterVol     $F5
0008692B 9B06                       	dc.b	nD2, $06
0008692D EC04                       	smpsPSGAlterVol     $04
0008692F E701                       	dc.b	smpsNoAttack, $01
00086931 EC07                       	smpsPSGAlterVol     $07
00086933 8006                       	dc.b	nRst, $06
00086935 E102                       	smpsAlterNote       $02
00086937 01                         	dc.b	$01
00086938 E106                       	smpsAlterNote       $06
0008693A 01                         	dc.b	$01
0008693B E102                       	smpsAlterNote       $02
0008693D 01                         	dc.b	$01
0008693E E1FF                       	smpsAlterNote       $FF
00086940 01                         	dc.b	$01
00086941 ECF5                       	smpsPSGAlterVol     $F5
00086943 9B06                       	dc.b	nD2, $06
00086945 EC04                       	smpsPSGAlterVol     $04
00086947 E701                       	dc.b	smpsNoAttack, $01
00086949 EC07                       	smpsPSGAlterVol     $07
0008694B 8003                       	dc.b	nRst, $03
0008694D ECF5                       	smpsPSGAlterVol     $F5
0008694F 9B07                       	dc.b	nD2, $07
00086951 EC0B                       	smpsPSGAlterVol     $0B
00086953 8007                       	dc.b	nRst, $07
00086955 E105                       	smpsAlterNote       $05
00086957 0101                       	dc.b	$01, $01
00086959 E1FF                       	smpsAlterNote       $FF
0008695B 01                         	dc.b	$01
0008695C E1FC                       	smpsAlterNote       $FC
0008695E 01                         	dc.b	$01
0008695F E1FF                       	smpsAlterNote       $FF
00086961 ECF5                       	smpsPSGAlterVol     $F5
00086963 9B06                       	dc.b	nD2, $06
00086965 EC0B                       	smpsPSGAlterVol     $0B
00086967 8004                       	dc.b	nRst, $04
00086969 ECF5                       	smpsPSGAlterVol     $F5
0008696B 9B06                       	dc.b	nD2, $06
0008696D EC04                       	smpsPSGAlterVol     $04
0008696F E701                       	dc.b	smpsNoAttack, $01
00086971 EC07                       	smpsPSGAlterVol     $07
00086973 8006                       	dc.b	nRst, $06
00086975 E102                       	smpsAlterNote       $02
00086977 01                         	dc.b	$01
00086978 E106                       	smpsAlterNote       $06
0008697A 01                         	dc.b	$01
0008697B E102                       	smpsAlterNote       $02
0008697D 01                         	dc.b	$01
0008697E E1FC                       	smpsAlterNote       $FC
00086980 01                         	dc.b	$01
00086981 E1FF                       	smpsAlterNote       $FF
00086983 ECF5                       	smpsPSGAlterVol     $F5
00086985 9B06                       	dc.b	nD2, $06
00086987 EC04                       	smpsPSGAlterVol     $04
00086989 E701                       	dc.b	smpsNoAttack, $01
0008698B EC07                       	smpsPSGAlterVol     $07
0008698D 8003                       	dc.b	nRst, $03
0008698F ECF5                       	smpsPSGAlterVol     $F5
00086991 9B06                       	dc.b	nD2, $06
00086993 EC04                       	smpsPSGAlterVol     $04
00086995 E701                       	dc.b	smpsNoAttack, $01
00086997 EC07                       	smpsPSGAlterVol     $07
00086999 8006                       	dc.b	nRst, $06
0008699B E102                       	smpsAlterNote       $02
0008699D 01                         	dc.b	$01
0008699E E106                       	smpsAlterNote       $06
000869A0 01                         	dc.b	$01
000869A1 E105                       	smpsAlterNote       $05
000869A3 01                         	dc.b	$01
000869A4 E1FF                       	smpsAlterNote       $FF
000869A6 01                         	dc.b	$01
000869A7 ECF5                       	smpsPSGAlterVol     $F5
000869A9 9B07                       	dc.b	nD2, $07
000869AB EC0B                       	smpsPSGAlterVol     $0B
000869AD 8004                       	dc.b	nRst, $04
000869AF ECF5                       	smpsPSGAlterVol     $F5
000869B1 9B06                       	dc.b	nD2, $06
000869B3 EC0B                       	smpsPSGAlterVol     $0B
000869B5 8007                       	dc.b	nRst, $07
000869B7 E105                       	smpsAlterNote       $05
000869B9 0101                       	dc.b	$01, $01
000869BB E101                       	smpsAlterNote       $01
000869BD 01                         	dc.b	$01
000869BE E1FB                       	smpsAlterNote       $FB
000869C0 01                         	dc.b	$01
000869C1 E1FE                       	smpsAlterNote       $FE
000869C3 ECF5                       	smpsPSGAlterVol     $F5
000869C5 9A06                       	dc.b	nCs2, $06
000869C7 EC04                       	smpsPSGAlterVol     $04
000869C9 E701                       	dc.b	smpsNoAttack, $01
000869CB EC07                       	smpsPSGAlterVol     $07
000869CD 8003                       	dc.b	nRst, $03
000869CF ECF5                       	smpsPSGAlterVol     $F5
000869D1 9A06                       	dc.b	nCs2, $06
000869D3 EC04                       	smpsPSGAlterVol     $04
000869D5 E701                       	dc.b	smpsNoAttack, $01
000869D7 EC07                       	smpsPSGAlterVol     $07
000869D9 8003                       	dc.b	nRst, $03
000869DB E1FC                       	smpsAlterNote       $FC
000869DD ECF5                       	smpsPSGAlterVol     $F5
000869DF 8F07                       	dc.b	nD1, $07
000869E1 EC0B                       	smpsPSGAlterVol     $0B
000869E3 8006                       	dc.b	nRst, $06
000869E5 E1FF                       	smpsAlterNote       $FF
000869E7 01                         	dc.b	$01
000869E8 E103                       	smpsAlterNote       $03
000869EA 01                         	dc.b	$01
000869EB E102                       	smpsAlterNote       $02
000869ED 01                         	dc.b	$01
000869EE E1FC                       	smpsAlterNote       $FC
000869F0 01                         	dc.b	$01
000869F1 E1F8                       	smpsAlterNote       $F8
000869F3 01                         	dc.b	$01
000869F4 E1FC                       	smpsAlterNote       $FC
000869F6 01                         	dc.b	$01
000869F7 E1FF                       	smpsAlterNote       $FF
000869F9 01                         	dc.b	$01
000869FA E103                       	smpsAlterNote       $03
000869FC 01                         	dc.b	$01
000869FD E1FC                       	smpsAlterNote       $FC
000869FF ECF5                       	smpsPSGAlterVol     $F5
00086A01 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00086A05 EC04                       	smpsPSGAlterVol     $04
00086A07 E701                       	dc.b	smpsNoAttack, $01
00086A09 EC07                       	smpsPSGAlterVol     $07
00086A0B 8009                       	dc.b	nRst, $09
00086A0D E1FF                       	smpsAlterNote       $FF
00086A0F 01                         	dc.b	$01
00086A10 E103                       	smpsAlterNote       $03
00086A12 01                         	dc.b	$01
00086A13 E102                       	smpsAlterNote       $02
00086A15 01                         	dc.b	$01
00086A16 E1FC                       	smpsAlterNote       $FC
00086A18 01                         	dc.b	$01
00086A19 E1F8                       	smpsAlterNote       $F8
00086A1B 01                         	dc.b	$01
00086A1C E1FC                       	smpsAlterNote       $FC
00086A1E 01                         	dc.b	$01
00086A1F E1FF                       	smpsAlterNote       $FF
00086A21 01                         	dc.b	$01
00086A22 E103                       	smpsAlterNote       $03
00086A24 01                         	dc.b	$01
00086A25 E1FF                       	smpsAlterNote       $FF
00086A27 01                         	dc.b	$01
00086A28 E1F9                       	smpsAlterNote       $F9
00086A2A 01                         	dc.b	$01
00086A2B E1F8                       	smpsAlterNote       $F8
00086A2D 01                         	dc.b	$01
00086A2E E1FC                       	smpsAlterNote       $FC
00086A30 01                         	dc.b	$01
00086A31 E102                       	smpsAlterNote       $02
00086A33 0101                       	dc.b	$01, $01
00086A35 E1FF                       	smpsAlterNote       $FF
00086A37 01                         	dc.b	$01
00086A38 E1FC                       	smpsAlterNote       $FC
00086A3A ECF5                       	smpsPSGAlterVol     $F5
00086A3C 8F02                       	dc.b	nD1, $02
00086A3E EC04                       	smpsPSGAlterVol     $04
00086A40 E701                       	dc.b	smpsNoAttack, $01
00086A42 ECFC                       	smpsPSGAlterVol     $FC
00086A44 E1FB                       	smpsAlterNote       $FB
00086A46 8D06                       	dc.b	nC1, $06
00086A48 EC04                       	smpsPSGAlterVol     $04
00086A4A E701                       	dc.b	smpsNoAttack, $01
00086A4C EC07                       	smpsPSGAlterVol     $07
00086A4E 8006                       	dc.b	nRst, $06
00086A50 E1FE                       	smpsAlterNote       $FE
00086A52 01                         	dc.b	$01
00086A53 E102                       	smpsAlterNote       $02
00086A55 01                         	dc.b	$01
00086A56 E1FE                       	smpsAlterNote       $FE
00086A58 01                         	dc.b	$01
00086A59 E1FB                       	smpsAlterNote       $FB
00086A5B 01                         	dc.b	$01
00086A5C E1F7                       	smpsAlterNote       $F7
00086A5E 01                         	dc.b	$01
00086A5F E1FB                       	smpsAlterNote       $FB
00086A61 01                         	dc.b	$01
00086A62 E101                       	smpsAlterNote       $01
00086A64 01                         	dc.b	$01
00086A65 E102                       	smpsAlterNote       $02
00086A67 01                         	dc.b	$01
00086A68 E1FB                       	smpsAlterNote       $FB
00086A6A ECF5                       	smpsPSGAlterVol     $F5
00086A6C 8D02                       	dc.b	nC1, $02
00086A6E EC04                       	smpsPSGAlterVol     $04
00086A70 E701                       	dc.b	smpsNoAttack, $01
00086A72 E1FC                       	smpsAlterNote       $FC
00086A74 ECFC                       	smpsPSGAlterVol     $FC
00086A76 8F0D                       	dc.b	nD1, $0D
00086A78 E1FF                       	smpsAlterNote       $FF
00086A7A E701                       	dc.b	smpsNoAttack, $01
00086A7C E103                       	smpsAlterNote       $03
00086A7E E701                       	dc.b	smpsNoAttack, $01
00086A80 E1FF                       	smpsAlterNote       $FF
00086A82 E701                       	dc.b	smpsNoAttack, $01
00086A84 E1FC                       	smpsAlterNote       $FC
00086A86 E701                       	dc.b	smpsNoAttack, $01
00086A88 E1F8                       	smpsAlterNote       $F8
00086A8A E701                       	dc.b	smpsNoAttack, $01
00086A8C E1FC                       	smpsAlterNote       $FC
00086A8E E701                       	dc.b	smpsNoAttack, $01
00086A90 E102                       	smpsAlterNote       $02
00086A92 E701                       	dc.b	smpsNoAttack, $01
00086A94 E103                       	smpsAlterNote       $03
00086A96 E701                       	dc.b	smpsNoAttack, $01
00086A98 E1FF                       	smpsAlterNote       $FF
00086A9A E701                       	dc.b	smpsNoAttack, $01
00086A9C E1F9                       	smpsAlterNote       $F9
00086A9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AA2 E1FC                       	smpsAlterNote       $FC
00086AA4 E701                       	dc.b	smpsNoAttack, $01
00086AA6 E102                       	smpsAlterNote       $02
00086AA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AAC E1FC                       	smpsAlterNote       $FC
00086AAE E701                       	dc.b	smpsNoAttack, $01
00086AB0 E1F9                       	smpsAlterNote       $F9
00086AB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AB6 E1FF                       	smpsAlterNote       $FF
00086AB8 EC04                       	smpsPSGAlterVol     $04
00086ABA E701                       	dc.b	smpsNoAttack, $01
00086ABC EC07                       	smpsPSGAlterVol     $07
00086ABE E103                       	smpsAlterNote       $03
00086AC0 8001                       	dc.b	nRst, $01
00086AC2 E102                       	smpsAlterNote       $02
00086AC4 01                         	dc.b	$01
00086AC5 E1FB                       	smpsAlterNote       $FB
00086AC7 01                         	dc.b	$01
00086AC8 E1F7                       	smpsAlterNote       $F7
00086ACA 01                         	dc.b	$01
00086ACB E1FB                       	smpsAlterNote       $FB
00086ACD 01                         	dc.b	$01
00086ACE E102                       	smpsAlterNote       $02
00086AD0 01                         	dc.b	$01
00086AD1 E103                       	smpsAlterNote       $03
00086AD3 01                         	dc.b	$01
00086AD4 E1FB                       	smpsAlterNote       $FB
00086AD6 ECF5                       	smpsPSGAlterVol     $F5
00086AD8 8E06                       	dc.b	nCs1, $06
00086ADA EC04                       	smpsPSGAlterVol     $04
00086ADC E701                       	dc.b	smpsNoAttack, $01
00086ADE EC07                       	smpsPSGAlterVol     $07
00086AE0 8003                       	dc.b	nRst, $03
00086AE2 ECF5                       	smpsPSGAlterVol     $F5
00086AE4 8E06                       	dc.b	nCs1, $06
00086AE6 EC04                       	smpsPSGAlterVol     $04
00086AE8 E701                       	dc.b	smpsNoAttack, $01
00086AEA EC07                       	smpsPSGAlterVol     $07
00086AEC 8006                       	dc.b	nRst, $06
00086AEE E1FE                       	smpsAlterNote       $FE
00086AF0 01                         	dc.b	$01
00086AF1 E102                       	smpsAlterNote       $02
00086AF3 01                         	dc.b	$01
00086AF4 E1FE                       	smpsAlterNote       $FE
00086AF6 01                         	dc.b	$01
00086AF7 E1F9                       	smpsAlterNote       $F9
00086AF9 01                         	dc.b	$01
00086AFA E1FC                       	smpsAlterNote       $FC
00086AFC ECF5                       	smpsPSGAlterVol     $F5
00086AFE 8F06                       	dc.b	nD1, $06
00086B00 EC04                       	smpsPSGAlterVol     $04
00086B02 E701                       	dc.b	smpsNoAttack, $01
00086B04 EC07                       	smpsPSGAlterVol     $07
00086B06 8003                       	dc.b	nRst, $03
00086B08 ECF5                       	smpsPSGAlterVol     $F5
00086B0A 8F07                       	dc.b	nD1, $07
00086B0C EC0B                       	smpsPSGAlterVol     $0B
00086B0E 8006                       	dc.b	nRst, $06
00086B10 E1FF                       	smpsAlterNote       $FF
00086B12 01                         	dc.b	$01
00086B13 E102                       	smpsAlterNote       $02
00086B15 0101                       	dc.b	$01, $01
00086B17 E1FB                       	smpsAlterNote       $FB
00086B19 01                         	dc.b	$01
00086B1A ECF5                       	smpsPSGAlterVol     $F5
00086B1C 8E07                       	dc.b	nCs1, $07
00086B1E EC0B                       	smpsPSGAlterVol     $0B
00086B20 8004                       	dc.b	nRst, $04
00086B22 ECF5                       	smpsPSGAlterVol     $F5
00086B24 8E06                       	dc.b	nCs1, $06
00086B26 EC04                       	smpsPSGAlterVol     $04
00086B28 E701                       	dc.b	smpsNoAttack, $01
00086B2A EC07                       	smpsPSGAlterVol     $07
00086B2C 8006                       	dc.b	nRst, $06
00086B2E E101                       	smpsAlterNote       $01
00086B30 01                         	dc.b	$01
00086B31 E102                       	smpsAlterNote       $02
00086B33 01                         	dc.b	$01
00086B34 E1FE                       	smpsAlterNote       $FE
00086B36 01                         	dc.b	$01
00086B37 E1F8                       	smpsAlterNote       $F8
00086B39 01                         	dc.b	$01
00086B3A E1FB                       	smpsAlterNote       $FB
00086B3C ECF5                       	smpsPSGAlterVol     $F5
00086B3E 8E06                       	dc.b	nCs1, $06
00086B40 EC04                       	smpsPSGAlterVol     $04
00086B42 E701                       	dc.b	smpsNoAttack, $01
00086B44 EC07                       	smpsPSGAlterVol     $07
00086B46 8003                       	dc.b	nRst, $03
00086B48 ECF5                       	smpsPSGAlterVol     $F5
00086B4A 8E06                       	dc.b	nCs1, $06
00086B4C EC04                       	smpsPSGAlterVol     $04
00086B4E E701                       	dc.b	smpsNoAttack, $01
00086B50 EC07                       	smpsPSGAlterVol     $07
00086B52 8004                       	dc.b	nRst, $04
00086B54 E1FC                       	smpsAlterNote       $FC
00086B56 ECF5                       	smpsPSGAlterVol     $F5
00086B58 8F06                       	dc.b	nD1, $06
00086B5A EC0B                       	smpsPSGAlterVol     $0B
00086B5C 8006                       	dc.b	nRst, $06
00086B5E E1FF                       	smpsAlterNote       $FF
00086B60 01                         	dc.b	$01
00086B61 E102                       	smpsAlterNote       $02
00086B63 0101                       	dc.b	$01, $01
00086B65 E1FC                       	smpsAlterNote       $FC
00086B67 01                         	dc.b	$01
00086B68 E1F8                       	smpsAlterNote       $F8
00086B6A 01                         	dc.b	$01
00086B6B E1F9                       	smpsAlterNote       $F9
00086B6D 01                         	dc.b	$01
00086B6E E1FF                       	smpsAlterNote       $FF
00086B70 01                         	dc.b	$01
00086B71 E103                       	smpsAlterNote       $03
00086B73 01                         	dc.b	$01
00086B74 E1FC                       	smpsAlterNote       $FC
00086B76 ECF5                       	smpsPSGAlterVol     $F5
00086B78 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00086B7C EC04                       	smpsPSGAlterVol     $04
00086B7E E701                       	dc.b	smpsNoAttack, $01
00086B80 EC07                       	smpsPSGAlterVol     $07
00086B82 8009                       	dc.b	nRst, $09
00086B84 E1FF                       	smpsAlterNote       $FF
00086B86 01                         	dc.b	$01
00086B87 E102                       	smpsAlterNote       $02
00086B89 0101                       	dc.b	$01, $01
00086B8B E1FC                       	smpsAlterNote       $FC
00086B8D 01                         	dc.b	$01
00086B8E E1F8                       	smpsAlterNote       $F8
00086B90 01                         	dc.b	$01
00086B91 E1F9                       	smpsAlterNote       $F9
00086B93 01                         	dc.b	$01
00086B94 E1FF                       	smpsAlterNote       $FF
00086B96 01                         	dc.b	$01
00086B97 E103                       	smpsAlterNote       $03
00086B99 01                         	dc.b	$01
00086B9A E1FF                       	smpsAlterNote       $FF
00086B9C 01                         	dc.b	$01
00086B9D E1FC                       	smpsAlterNote       $FC
00086B9F 01                         	dc.b	$01
00086BA0 E1F8                       	smpsAlterNote       $F8
00086BA2 01                         	dc.b	$01
00086BA3 E1FC                       	smpsAlterNote       $FC
00086BA5 01                         	dc.b	$01
00086BA6 E102                       	smpsAlterNote       $02
00086BA8 01                         	dc.b	$01
00086BA9 E103                       	smpsAlterNote       $03
00086BAB 01                         	dc.b	$01
00086BAC E1FF                       	smpsAlterNote       $FF
00086BAE 01                         	dc.b	$01
00086BAF E1FC                       	smpsAlterNote       $FC
00086BB1 ECF5                       	smpsPSGAlterVol     $F5
00086BB3 8F03                       	dc.b	nD1, $03
00086BB5 E1FB                       	smpsAlterNote       $FB
00086BB7 8D06                       	dc.b	nC1, $06
00086BB9 EC04                       	smpsPSGAlterVol     $04
00086BBB E701                       	dc.b	smpsNoAttack, $01
00086BBD EC07                       	smpsPSGAlterVol     $07
00086BBF 8006                       	dc.b	nRst, $06
00086BC1 E1FE                       	smpsAlterNote       $FE
00086BC3 01                         	dc.b	$01
00086BC4 E102                       	smpsAlterNote       $02
00086BC6 01                         	dc.b	$01
00086BC7 E101                       	smpsAlterNote       $01
00086BC9 01                         	dc.b	$01
00086BCA E1FB                       	smpsAlterNote       $FB
00086BCC 01                         	dc.b	$01
00086BCD E1F7                       	smpsAlterNote       $F7
00086BCF 01                         	dc.b	$01
00086BD0 E1FB                       	smpsAlterNote       $FB
00086BD2 01                         	dc.b	$01
00086BD3 E1FE                       	smpsAlterNote       $FE
00086BD5 01                         	dc.b	$01
00086BD6 E102                       	smpsAlterNote       $02
00086BD8 01                         	dc.b	$01
00086BD9 E1FB                       	smpsAlterNote       $FB
00086BDB ECF5                       	smpsPSGAlterVol     $F5
00086BDD 8D03                       	dc.b	nC1, $03
00086BDF E1FC                       	smpsAlterNote       $FC
00086BE1 8F0D                       	dc.b	nD1, $0D
00086BE3 E1FF                       	smpsAlterNote       $FF
00086BE5 E701                       	dc.b	smpsNoAttack, $01
00086BE7 E103                       	smpsAlterNote       $03
00086BE9 E701                       	dc.b	smpsNoAttack, $01
00086BEB E1FF                       	smpsAlterNote       $FF
00086BED E701                       	dc.b	smpsNoAttack, $01
00086BEF E1FC                       	smpsAlterNote       $FC
00086BF1 E701                       	dc.b	smpsNoAttack, $01
00086BF3 E1F8                       	smpsAlterNote       $F8
00086BF5 E701                       	dc.b	smpsNoAttack, $01
00086BF7 E1FC                       	smpsAlterNote       $FC
00086BF9 E701                       	dc.b	smpsNoAttack, $01
00086BFB E102                       	smpsAlterNote       $02
00086BFD E701                       	dc.b	smpsNoAttack, $01
00086BFF E103                       	smpsAlterNote       $03
00086C01 E701                       	dc.b	smpsNoAttack, $01
00086C03 E1FF                       	smpsAlterNote       $FF
00086C05 E701                       	dc.b	smpsNoAttack, $01
00086C07 E1F9                       	smpsAlterNote       $F9
00086C09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C0D E1FC                       	smpsAlterNote       $FC
00086C0F E701                       	dc.b	smpsNoAttack, $01
00086C11 E102                       	smpsAlterNote       $02
00086C13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C17 E1FF                       	smpsAlterNote       $FF
00086C19 E701                       	dc.b	smpsNoAttack, $01
00086C1B E1F9                       	smpsAlterNote       $F9
00086C1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C21 E1FF                       	smpsAlterNote       $FF
00086C23 EC04                       	smpsPSGAlterVol     $04
00086C25 E701                       	dc.b	smpsNoAttack, $01
00086C27 EC07                       	smpsPSGAlterVol     $07
00086C29 E103                       	smpsAlterNote       $03
00086C2B 8001                       	dc.b	nRst, $01
00086C2D E102                       	smpsAlterNote       $02
00086C2F 01                         	dc.b	$01
00086C30 E1FB                       	smpsAlterNote       $FB
00086C32 01                         	dc.b	$01
00086C33 E1F7                       	smpsAlterNote       $F7
00086C35 01                         	dc.b	$01
00086C36 E1FB                       	smpsAlterNote       $FB
00086C38 01                         	dc.b	$01
00086C39 E1FF                       	smpsAlterNote       $FF
00086C3B 01                         	dc.b	$01
00086C3C E103                       	smpsAlterNote       $03
00086C3E 01                         	dc.b	$01
00086C3F E1FB                       	smpsAlterNote       $FB
00086C41 ECF5                       	smpsPSGAlterVol     $F5
00086C43 8E06                       	dc.b	nCs1, $06
00086C45 EC04                       	smpsPSGAlterVol     $04
00086C47 E701                       	dc.b	smpsNoAttack, $01
00086C49 EC07                       	smpsPSGAlterVol     $07
00086C4B 8003                       	dc.b	nRst, $03
00086C4D ECF5                       	smpsPSGAlterVol     $F5
00086C4F 8E06                       	dc.b	nCs1, $06
00086C51 EC04                       	smpsPSGAlterVol     $04
00086C53 E701                       	dc.b	smpsNoAttack, $01
00086C55 EC07                       	smpsPSGAlterVol     $07
00086C57 8006                       	dc.b	nRst, $06
00086C59 E1FE                       	smpsAlterNote       $FE
00086C5B 01                         	dc.b	$01
00086C5C E102                       	smpsAlterNote       $02
00086C5E 01                         	dc.b	$01
00086C5F E1FE                       	smpsAlterNote       $FE
00086C61 01                         	dc.b	$01
00086C62 E1FC                       	smpsAlterNote       $FC
00086C64 01                         	dc.b	$01
00086C65 ECF5                       	smpsPSGAlterVol     $F5
00086C67 8F06                       	dc.b	nD1, $06
00086C69 EC04                       	smpsPSGAlterVol     $04
00086C6B E701                       	dc.b	smpsNoAttack, $01
00086C6D EC07                       	smpsPSGAlterVol     $07
00086C6F 8003                       	dc.b	nRst, $03
00086C71 ECF5                       	smpsPSGAlterVol     $F5
00086C73 8F07                       	dc.b	nD1, $07
00086C75 EC0B                       	smpsPSGAlterVol     $0B
00086C77 8007                       	dc.b	nRst, $07
00086C79 E102                       	smpsAlterNote       $02
00086C7B 0101                       	dc.b	$01, $01
00086C7D E1FB                       	smpsAlterNote       $FB
00086C7F 01                         	dc.b	$01
00086C80 E1F8                       	smpsAlterNote       $F8
00086C82 01                         	dc.b	$01
00086C83 E1FB                       	smpsAlterNote       $FB
00086C85 ECF5                       	smpsPSGAlterVol     $F5
00086C87 8E06                       	dc.b	nCs1, $06
00086C89 EC0B                       	smpsPSGAlterVol     $0B
00086C8B 8004                       	dc.b	nRst, $04
00086C8D ECF5                       	smpsPSGAlterVol     $F5
00086C8F 8E06                       	dc.b	nCs1, $06
00086C91 EC04                       	smpsPSGAlterVol     $04
00086C93 E701                       	dc.b	smpsNoAttack, $01
00086C95 EC07                       	smpsPSGAlterVol     $07
00086C97 8006                       	dc.b	nRst, $06
00086C99 E1FE                       	smpsAlterNote       $FE
00086C9B 01                         	dc.b	$01
00086C9C E102                       	smpsAlterNote       $02
00086C9E 01                         	dc.b	$01
00086C9F E1FE                       	smpsAlterNote       $FE
00086CA1 01                         	dc.b	$01
00086CA2 E1F9                       	smpsAlterNote       $F9
00086CA4 01                         	dc.b	$01
00086CA5 E1FC                       	smpsAlterNote       $FC
00086CA7 ECF5                       	smpsPSGAlterVol     $F5
00086CA9 8F06                       	dc.b	nD1, $06
00086CAB EC04                       	smpsPSGAlterVol     $04
00086CAD E701                       	dc.b	smpsNoAttack, $01
00086CAF EC07                       	smpsPSGAlterVol     $07
00086CB1 8003                       	dc.b	nRst, $03
00086CB3 ECF5                       	smpsPSGAlterVol     $F5
00086CB5 8F06                       	dc.b	nD1, $06
00086CB7 EC04                       	smpsPSGAlterVol     $04
00086CB9 E701                       	dc.b	smpsNoAttack, $01
00086CBB EC07                       	smpsPSGAlterVol     $07
00086CBD 8006                       	dc.b	nRst, $06
00086CBF E1FF                       	smpsAlterNote       $FF
00086CC1 01                         	dc.b	$01
00086CC2 E103                       	smpsAlterNote       $03
00086CC4 01                         	dc.b	$01
00086CC5 E102                       	smpsAlterNote       $02
00086CC7 01                         	dc.b	$01
00086CC8 E1FB                       	smpsAlterNote       $FB
00086CCA 01                         	dc.b	$01
00086CCB ECF5                       	smpsPSGAlterVol     $F5
00086CCD 8E07                       	dc.b	nCs1, $07
00086CCF EC0B                       	smpsPSGAlterVol     $0B
00086CD1 8004                       	dc.b	nRst, $04
00086CD3 ECF5                       	smpsPSGAlterVol     $F5
00086CD5 8E06                       	dc.b	nCs1, $06
00086CD7 EC0B                       	smpsPSGAlterVol     $0B
00086CD9 8007                       	dc.b	nRst, $07
00086CDB E101                       	smpsAlterNote       $01
00086CDD 0101                       	dc.b	$01, $01
00086CDF E1FE                       	smpsAlterNote       $FE
00086CE1 01                         	dc.b	$01
00086CE2 E1F9                       	smpsAlterNote       $F9
00086CE4 01                         	dc.b	$01
00086CE5 E1FC                       	smpsAlterNote       $FC
00086CE7 ECF5                       	smpsPSGAlterVol     $F5
00086CE9 8F06                       	dc.b	nD1, $06
00086CEB EC04                       	smpsPSGAlterVol     $04
00086CED E701                       	dc.b	smpsNoAttack, $01
00086CEF EC07                       	smpsPSGAlterVol     $07
00086CF1 8003                       	dc.b	nRst, $03
00086CF3 ECF5                       	smpsPSGAlterVol     $F5
00086CF5 8F06                       	dc.b	nD1, $06
00086CF7 EC04                       	smpsPSGAlterVol     $04
00086CF9 E701                       	dc.b	smpsNoAttack, $01
00086CFB EC07                       	smpsPSGAlterVol     $07
00086CFD 8006                       	dc.b	nRst, $06
00086CFF E1FF                       	smpsAlterNote       $FF
00086D01 01                         	dc.b	$01
00086D02 E103                       	smpsAlterNote       $03
00086D04 01                         	dc.b	$01
00086D05 E1FF                       	smpsAlterNote       $FF
00086D07 01                         	dc.b	$01
00086D08 E1FB                       	smpsAlterNote       $FB
00086D0A 01                         	dc.b	$01
00086D0B ECF5                       	smpsPSGAlterVol     $F5
00086D0D 8E06                       	dc.b	nCs1, $06
00086D0F EC04                       	smpsPSGAlterVol     $04
00086D11 E701                       	dc.b	smpsNoAttack, $01
00086D13 EC07                       	smpsPSGAlterVol     $07
00086D15 8003                       	dc.b	nRst, $03
00086D17 ECF5                       	smpsPSGAlterVol     $F5
00086D19 8E07                       	dc.b	nCs1, $07
00086D1B E1FF                       	smpsAlterNote       $FF
00086D1D 9B06                       	dc.b	nD2, $06
00086D1F EC04                       	smpsPSGAlterVol     $04
00086D21 E701                       	dc.b	smpsNoAttack, $01
00086D23 ECFC                       	smpsPSGAlterVol     $FC
00086D25 9B03                       	dc.b	nD2, $03
00086D27 EC04                       	smpsPSGAlterVol     $04
00086D29 E701                       	dc.b	smpsNoAttack, $01
00086D2B ECFC                       	smpsPSGAlterVol     $FC
00086D2D 9B02                       	dc.b	nD2, $02
00086D2F EC04                       	smpsPSGAlterVol     $04
00086D31 E701                       	dc.b	smpsNoAttack, $01
00086D33 ECFC                       	smpsPSGAlterVol     $FC
00086D35 E1FE                       	smpsAlterNote       $FE
00086D37 9A03                       	dc.b	nCs2, $03
00086D39 EC0B                       	smpsPSGAlterVol     $0B
00086D3B 800A                       	dc.b	nRst, $0A
00086D3D E102                       	smpsAlterNote       $02
00086D3F 01                         	dc.b	$01
00086D40 E10A                       	smpsAlterNote       $0A
00086D42 01                         	dc.b	$01
00086D43 E102                       	smpsAlterNote       $02
00086D45 01                         	dc.b	$01
00086D46 E1F7                       	smpsAlterNote       $F7
00086D48 01                         	dc.b	$01
00086D49 E10A                       	smpsAlterNote       $0A
00086D4B 01                         	dc.b	$01
00086D4C E1FC                       	smpsAlterNote       $FC
00086D4E 01                         	dc.b	$01
00086D4F E108                       	smpsAlterNote       $08
00086D51 0101                       	dc.b	$01, $01
00086D53 E102                       	smpsAlterNote       $02
00086D55 01                         	dc.b	$01
00086D56 E1F7                       	smpsAlterNote       $F7
00086D58 0101                       	dc.b	$01, $01
00086D5A E1FC                       	smpsAlterNote       $FC
00086D5C ECF5                       	smpsPSGAlterVol     $F5
00086D5E 8F06                       	dc.b	nD1, $06
00086D60 EC04                       	smpsPSGAlterVol     $04
00086D62 E701                       	dc.b	smpsNoAttack, $01
00086D64 EC07                       	smpsPSGAlterVol     $07
00086D66 8003                       	dc.b	nRst, $03
00086D68 ECF5                       	smpsPSGAlterVol     $F5
00086D6A 8F06                       	dc.b	nD1, $06
00086D6C EC04                       	smpsPSGAlterVol     $04
00086D6E E701                       	dc.b	smpsNoAttack, $01
00086D70 EC07                       	smpsPSGAlterVol     $07
00086D72 8006                       	dc.b	nRst, $06
00086D74 E1FF                       	smpsAlterNote       $FF
00086D76 01                         	dc.b	$01
00086D77 E102                       	smpsAlterNote       $02
00086D79 01                         	dc.b	$01
00086D7A E101                       	smpsAlterNote       $01
00086D7C 01                         	dc.b	$01
00086D7D E1FC                       	smpsAlterNote       $FC
00086D7F 01                         	dc.b	$01
00086D80 ECF5                       	smpsPSGAlterVol     $F5
00086D82 9007                       	dc.b	nEb1, $07
00086D84 EC0B                       	smpsPSGAlterVol     $0B
00086D86 8004                       	dc.b	nRst, $04
00086D88 ECF5                       	smpsPSGAlterVol     $F5
00086D8A 9006                       	dc.b	nEb1, $06
00086D8C EC0B                       	smpsPSGAlterVol     $0B
00086D8E 8007                       	dc.b	nRst, $07
00086D90 E103                       	smpsAlterNote       $03
00086D92 0101                       	dc.b	$01, $01
00086D94 E1FF                       	smpsAlterNote       $FF
00086D96 01                         	dc.b	$01
00086D97 E1F9                       	smpsAlterNote       $F9
00086D99 01                         	dc.b	$01
00086D9A E1FC                       	smpsAlterNote       $FC
00086D9C ECF5                       	smpsPSGAlterVol     $F5
00086D9E 8F06                       	dc.b	nD1, $06
00086DA0 EC04                       	smpsPSGAlterVol     $04
00086DA2 E701                       	dc.b	smpsNoAttack, $01
00086DA4 EC07                       	smpsPSGAlterVol     $07
00086DA6 8003                       	dc.b	nRst, $03
00086DA8 ECF5                       	smpsPSGAlterVol     $F5
00086DAA 8F06                       	dc.b	nD1, $06
00086DAC EC04                       	smpsPSGAlterVol     $04
00086DAE E701                       	dc.b	smpsNoAttack, $01
00086DB0 EC07                       	smpsPSGAlterVol     $07
00086DB2 8006                       	dc.b	nRst, $06
00086DB4 E1FF                       	smpsAlterNote       $FF
00086DB6 01                         	dc.b	$01
00086DB7 E103                       	smpsAlterNote       $03
00086DB9 01                         	dc.b	$01
00086DBA E1FF                       	smpsAlterNote       $FF
00086DBC 01                         	dc.b	$01
00086DBD E1F9                       	smpsAlterNote       $F9
00086DBF 01                         	dc.b	$01
00086DC0 E1FC                       	smpsAlterNote       $FC
00086DC2 ECF5                       	smpsPSGAlterVol     $F5
00086DC4 8F06                       	dc.b	nD1, $06
00086DC6 EC04                       	smpsPSGAlterVol     $04
00086DC8 E701                       	dc.b	smpsNoAttack, $01
00086DCA EC07                       	smpsPSGAlterVol     $07
00086DCC 8003                       	dc.b	nRst, $03
00086DCE ECF5                       	smpsPSGAlterVol     $F5
00086DD0 8F07                       	dc.b	nD1, $07
00086DD2 EC0B                       	smpsPSGAlterVol     $0B
00086DD4 8006                       	dc.b	nRst, $06
00086DD6 E1FF                       	smpsAlterNote       $FF
00086DD8 01                         	dc.b	$01
00086DD9 E102                       	smpsAlterNote       $02
00086DDB 0101                       	dc.b	$01, $01
00086DDD E1FC                       	smpsAlterNote       $FC
00086DDF 01                         	dc.b	$01
00086DE0 ECF5                       	smpsPSGAlterVol     $F5
00086DE2 8F07                       	dc.b	nD1, $07
00086DE4 EC0B                       	smpsPSGAlterVol     $0B
00086DE6 8004                       	dc.b	nRst, $04
00086DE8 ECF5                       	smpsPSGAlterVol     $F5
00086DEA 8F06                       	dc.b	nD1, $06
00086DEC EC04                       	smpsPSGAlterVol     $04
00086DEE E701                       	dc.b	smpsNoAttack, $01
00086DF0 EC07                       	smpsPSGAlterVol     $07
00086DF2 8006                       	dc.b	nRst, $06
00086DF4 E101                       	smpsAlterNote       $01
00086DF6 01                         	dc.b	$01
00086DF7 E102                       	smpsAlterNote       $02
00086DF9 01                         	dc.b	$01
00086DFA E1FF                       	smpsAlterNote       $FF
00086DFC 01                         	dc.b	$01
00086DFD E1F9                       	smpsAlterNote       $F9
00086DFF 01                         	dc.b	$01
00086E00 E1FC                       	smpsAlterNote       $FC
00086E02 ECF5                       	smpsPSGAlterVol     $F5
00086E04 9006                       	dc.b	nEb1, $06
00086E06 EC04                       	smpsPSGAlterVol     $04
00086E08 E701                       	dc.b	smpsNoAttack, $01
00086E0A EC07                       	smpsPSGAlterVol     $07
00086E0C 8003                       	dc.b	nRst, $03
00086E0E ECF5                       	smpsPSGAlterVol     $F5
00086E10 9006                       	dc.b	nEb1, $06
00086E12 EC04                       	smpsPSGAlterVol     $04
00086E14 E701                       	dc.b	smpsNoAttack, $01
00086E16 EC07                       	smpsPSGAlterVol     $07
00086E18 8006                       	dc.b	nRst, $06
00086E1A E100                       	smpsAlterNote       $00
00086E1C 01                         	dc.b	$01
00086E1D E102                       	smpsAlterNote       $02
00086E1F 01                         	dc.b	$01
00086E20 E100                       	smpsAlterNote       $00
00086E22 01                         	dc.b	$01
00086E23 E1FF                       	smpsAlterNote       $FF
00086E25 01                         	dc.b	$01
00086E26 ECF5                       	smpsPSGAlterVol     $F5
00086E28 9B06                       	dc.b	nD2, $06
00086E2A EC04                       	smpsPSGAlterVol     $04
00086E2C E701                       	dc.b	smpsNoAttack, $01
00086E2E EC07                       	smpsPSGAlterVol     $07
00086E30 8003                       	dc.b	nRst, $03
00086E32 ECF5                       	smpsPSGAlterVol     $F5
00086E34 9B07                       	dc.b	nD2, $07
00086E36 EC0B                       	smpsPSGAlterVol     $0B
00086E38 8007                       	dc.b	nRst, $07
00086E3A E105                       	smpsAlterNote       $05
00086E3C 0101                       	dc.b	$01, $01
00086E3E E1FF                       	smpsAlterNote       $FF
00086E40 01                         	dc.b	$01
00086E41 E1FC                       	smpsAlterNote       $FC
00086E43 01                         	dc.b	$01
00086E44 E1FF                       	smpsAlterNote       $FF
00086E46 ECF5                       	smpsPSGAlterVol     $F5
00086E48 9B06                       	dc.b	nD2, $06
00086E4A EC0B                       	smpsPSGAlterVol     $0B
00086E4C 8004                       	dc.b	nRst, $04
00086E4E ECF5                       	smpsPSGAlterVol     $F5
00086E50 9B06                       	dc.b	nD2, $06
00086E52 EC04                       	smpsPSGAlterVol     $04
00086E54 E701                       	dc.b	smpsNoAttack, $01
00086E56 EC07                       	smpsPSGAlterVol     $07
00086E58 8006                       	dc.b	nRst, $06
00086E5A E102                       	smpsAlterNote       $02
00086E5C 01                         	dc.b	$01
00086E5D E106                       	smpsAlterNote       $06
00086E5F 01                         	dc.b	$01
00086E60 E102                       	smpsAlterNote       $02
00086E62 01                         	dc.b	$01
00086E63 E1FC                       	smpsAlterNote       $FC
00086E65 01                         	dc.b	$01
00086E66 E1FF                       	smpsAlterNote       $FF
00086E68 ECF5                       	smpsPSGAlterVol     $F5
00086E6A 9B06                       	dc.b	nD2, $06
00086E6C EC04                       	smpsPSGAlterVol     $04
00086E6E E701                       	dc.b	smpsNoAttack, $01
00086E70 EC07                       	smpsPSGAlterVol     $07
00086E72 8003                       	dc.b	nRst, $03
00086E74 ECF5                       	smpsPSGAlterVol     $F5
00086E76 9B07                       	dc.b	nD2, $07
00086E78 EC0B                       	smpsPSGAlterVol     $0B
00086E7A 8006                       	dc.b	nRst, $06
00086E7C E102                       	smpsAlterNote       $02
00086E7E 01                         	dc.b	$01
00086E7F E105                       	smpsAlterNote       $05
00086E81 0101                       	dc.b	$01, $01
00086E83 E1FF                       	smpsAlterNote       $FF
00086E85 01                         	dc.b	$01
00086E86 ECF5                       	smpsPSGAlterVol     $F5
00086E88 9B07                       	dc.b	nD2, $07
00086E8A EC0B                       	smpsPSGAlterVol     $0B
00086E8C 8004                       	dc.b	nRst, $04
00086E8E ECF5                       	smpsPSGAlterVol     $F5
00086E90 9B06                       	dc.b	nD2, $06
00086E92 EC04                       	smpsPSGAlterVol     $04
00086E94 E701                       	dc.b	smpsNoAttack, $01
00086E96 EC07                       	smpsPSGAlterVol     $07
00086E98 8006                       	dc.b	nRst, $06
00086E9A E105                       	smpsAlterNote       $05
00086E9C 0101                       	dc.b	$01, $01
00086E9E E102                       	smpsAlterNote       $02
00086EA0 01                         	dc.b	$01
00086EA1 E1FC                       	smpsAlterNote       $FC
00086EA3 01                         	dc.b	$01
00086EA4 E1FF                       	smpsAlterNote       $FF
00086EA6 ECF5                       	smpsPSGAlterVol     $F5
00086EA8 9B06                       	dc.b	nD2, $06
00086EAA EC04                       	smpsPSGAlterVol     $04
00086EAC E701                       	dc.b	smpsNoAttack, $01
00086EAE EC07                       	smpsPSGAlterVol     $07
00086EB0 8003                       	dc.b	nRst, $03
00086EB2 ECF5                       	smpsPSGAlterVol     $F5
00086EB4 9B06                       	dc.b	nD2, $06
00086EB6 EC04                       	smpsPSGAlterVol     $04
00086EB8 E701                       	dc.b	smpsNoAttack, $01
00086EBA EC07                       	smpsPSGAlterVol     $07
00086EBC 8006                       	dc.b	nRst, $06
00086EBE E102                       	smpsAlterNote       $02
00086EC0 01                         	dc.b	$01
00086EC1 E106                       	smpsAlterNote       $06
00086EC3 01                         	dc.b	$01
00086EC4 E102                       	smpsAlterNote       $02
00086EC6 01                         	dc.b	$01
00086EC7 E1FF                       	smpsAlterNote       $FF
00086EC9 01                         	dc.b	$01
00086ECA ECF5                       	smpsPSGAlterVol     $F5
00086ECC 9B06                       	dc.b	nD2, $06
00086ECE EC04                       	smpsPSGAlterVol     $04
00086ED0 E701                       	dc.b	smpsNoAttack, $01
00086ED2 EC07                       	smpsPSGAlterVol     $07
00086ED4 8003                       	dc.b	nRst, $03
00086ED6 ECF5                       	smpsPSGAlterVol     $F5
00086ED8 9B07                       	dc.b	nD2, $07
00086EDA EC0B                       	smpsPSGAlterVol     $0B
00086EDC 8007                       	dc.b	nRst, $07
00086EDE E107                       	smpsAlterNote       $07
00086EE0 0101                       	dc.b	$01, $01
00086EE2 E1FE                       	smpsAlterNote       $FE
00086EE4 01                         	dc.b	$01
00086EE5 E1FA                       	smpsAlterNote       $FA
00086EE7 0101                       	dc.b	$01, $01
00086EE9 E103                       	smpsAlterNote       $03
00086EEB 01                         	dc.b	$01
00086EEC E109                       	smpsAlterNote       $09
00086EEE 01                         	dc.b	$01
00086EEF E107                       	smpsAlterNote       $07
00086EF1 01                         	dc.b	$01
00086EF2 E1FE                       	smpsAlterNote       $FE
00086EF4 01                         	dc.b	$01
00086EF5 E108                       	smpsAlterNote       $08
00086EF7 01                         	dc.b	$01
00086EF8 E1FD                       	smpsAlterNote       $FD
00086EFA ECF5                       	smpsPSGAlterVol     $F5
00086EFC 940E                       	dc.b	nG1, $0E
00086EFE E103                       	smpsAlterNote       $03
00086F00 EC0B                       	smpsPSGAlterVol     $0B
00086F02 8001 01                    	dc.b	nRst, $01, $01
00086F05 E1FD                       	smpsAlterNote       $FD
00086F07 01                         	dc.b	$01
00086F08 E1FB                       	smpsAlterNote       $FB
00086F0A 0101                       	dc.b	$01, $01
00086F0C E100                       	smpsAlterNote       $00
00086F0E 01                         	dc.b	$01
00086F0F E103                       	smpsAlterNote       $03
00086F11 01                         	dc.b	$01
00086F12 E100                       	smpsAlterNote       $00
00086F14 01                         	dc.b	$01
00086F15 E1FD                       	smpsAlterNote       $FD
00086F17 01                         	dc.b	$01
00086F18 E1FA                       	smpsAlterNote       $FA
00086F1A 01                         	dc.b	$01
00086F1B E1FD                       	smpsAlterNote       $FD
00086F1D 01                         	dc.b	$01
00086F1E E103                       	smpsAlterNote       $03
00086F20 0101                       	dc.b	$01, $01
00086F22 E100                       	smpsAlterNote       $00
00086F24 01                         	dc.b	$01
00086F25 E1FE                       	smpsAlterNote       $FE
00086F27 ECF5                       	smpsPSGAlterVol     $F5
00086F29 960D                       	dc.b	nA1, $0D
00086F2B E104                       	smpsAlterNote       $04
00086F2D EC0B                       	smpsPSGAlterVol     $0B
00086F2F 8001 01                    	dc.b	nRst, $01, $01
00086F32 E101                       	smpsAlterNote       $01
00086F34 01                         	dc.b	$01
00086F35 E1FB                       	smpsAlterNote       $FB
00086F37 0101                       	dc.b	$01, $01
00086F39 E1FE                       	smpsAlterNote       $FE
00086F3B 01                         	dc.b	$01
00086F3C E104                       	smpsAlterNote       $04
00086F3E 0101                       	dc.b	$01, $01
00086F40 E1FE                       	smpsAlterNote       $FE
00086F42 01                         	dc.b	$01
00086F43 E1FB                       	smpsAlterNote       $FB
00086F45 0101                       	dc.b	$01, $01
00086F47 E101                       	smpsAlterNote       $01
00086F49 01                         	dc.b	$01
00086F4A E104                       	smpsAlterNote       $04
00086F4C 0101                       	dc.b	$01, $01
00086F4E E1FE                       	smpsAlterNote       $FE
00086F50 ECF5                       	smpsPSGAlterVol     $F5
00086F52 970D                       	dc.b	nBb1, $0D
00086F54 E101                       	smpsAlterNote       $01
00086F56 EC04                       	smpsPSGAlterVol     $04
00086F58 E701                       	dc.b	smpsNoAttack, $01
00086F5A EC07                       	smpsPSGAlterVol     $07
00086F5C E104                       	smpsAlterNote       $04
00086F5E 8001                       	dc.b	nRst, $01
00086F60 E103                       	smpsAlterNote       $03
00086F62 01                         	dc.b	$01
00086F63 E1FE                       	smpsAlterNote       $FE
00086F65 01                         	dc.b	$01
00086F66 E1FA                       	smpsAlterNote       $FA
00086F68 01                         	dc.b	$01
00086F69 E1FE                       	smpsAlterNote       $FE
00086F6B 01                         	dc.b	$01
00086F6C E101                       	smpsAlterNote       $01
00086F6E 01                         	dc.b	$01
00086F6F E104                       	smpsAlterNote       $04
00086F71 01                         	dc.b	$01
00086F72 E101                       	smpsAlterNote       $01
00086F74 01                         	dc.b	$01
00086F75 E1FB                       	smpsAlterNote       $FB
00086F77 01                         	dc.b	$01
00086F78 E1FA                       	smpsAlterNote       $FA
00086F7A 01                         	dc.b	$01
00086F7B E1FE                       	smpsAlterNote       $FE
00086F7D 01                         	dc.b	$01
00086F7E E103                       	smpsAlterNote       $03
00086F80 0101                       	dc.b	$01, $01
00086F82 E101                       	smpsAlterNote       $01
00086F84 01                         	dc.b	$01
00086F85 E1FE                       	smpsAlterNote       $FE
00086F87 ECF5                       	smpsPSGAlterVol     $F5
00086F89 990D                       	dc.b	nC2, $0D
00086F8B E104                       	smpsAlterNote       $04
00086F8D EC0B                       	smpsPSGAlterVol     $0B
00086F8F 8001 01                    	dc.b	nRst, $01, $01
00086F92 E102                       	smpsAlterNote       $02
00086F94 01                         	dc.b	$01
00086F95 E1FC                       	smpsAlterNote       $FC
00086F97 0101                       	dc.b	$01, $01
00086F99 E102                       	smpsAlterNote       $02
00086F9B 01                         	dc.b	$01
00086F9C E104                       	smpsAlterNote       $04
00086F9E 01                         	dc.b	$01
00086F9F E1FF                       	smpsAlterNote       $FF
00086FA1 ECF5                       	smpsPSGAlterVol     $F5
00086FA3 9B06                       	dc.b	nD2, $06
00086FA5 EC04                       	smpsPSGAlterVol     $04
00086FA7 E701                       	dc.b	smpsNoAttack, $01
00086FA9 EC07                       	smpsPSGAlterVol     $07
00086FAB 8003                       	dc.b	nRst, $03
00086FAD ECF5                       	smpsPSGAlterVol     $F5
00086FAF 9B07                       	dc.b	nD2, $07
00086FB1 EC0B                       	smpsPSGAlterVol     $0B
00086FB3 8006                       	dc.b	nRst, $06
00086FB5 E101                       	smpsAlterNote       $01
00086FB7 01                         	dc.b	$01
00086FB8 E104                       	smpsAlterNote       $04
00086FBA 0101                       	dc.b	$01, $01
00086FBC E1FE                       	smpsAlterNote       $FE
00086FBE 01                         	dc.b	$01
00086FBF E1FC                       	smpsAlterNote       $FC
00086FC1 01                         	dc.b	$01
00086FC2 E1FE                       	smpsAlterNote       $FE
00086FC4 ECF5                       	smpsPSGAlterVol     $F5
00086FC6 9C06                       	dc.b	nEb2, $06
00086FC8 EC0B                       	smpsPSGAlterVol     $0B
00086FCA 8004                       	dc.b	nRst, $04
00086FCC ECF5                       	smpsPSGAlterVol     $F5
00086FCE 9C06                       	dc.b	nEb2, $06
00086FD0 EC04                       	smpsPSGAlterVol     $04
00086FD2 E701                       	dc.b	smpsNoAttack, $01
00086FD4 EC07                       	smpsPSGAlterVol     $07
00086FD6 8006                       	dc.b	nRst, $06
00086FD8 E105                       	smpsAlterNote       $05
00086FDA 01                         	dc.b	$01
00086FDB E106                       	smpsAlterNote       $06
00086FDD 01                         	dc.b	$01
00086FDE E102                       	smpsAlterNote       $02
00086FE0 01                         	dc.b	$01
00086FE1 E1FB                       	smpsAlterNote       $FB
00086FE3 01                         	dc.b	$01
00086FE4 E1FF                       	smpsAlterNote       $FF
00086FE6 ECF5                       	smpsPSGAlterVol     $F5
00086FE8 9B06                       	dc.b	nD2, $06
00086FEA EC04                       	smpsPSGAlterVol     $04
00086FEC E701                       	dc.b	smpsNoAttack, $01
00086FEE EC07                       	smpsPSGAlterVol     $07
00086FF0 8003                       	dc.b	nRst, $03
00086FF2 ECF5                       	smpsPSGAlterVol     $F5
00086FF4 9B06                       	dc.b	nD2, $06
00086FF6 EC04                       	smpsPSGAlterVol     $04
00086FF8 E701                       	dc.b	smpsNoAttack, $01
00086FFA EC07                       	smpsPSGAlterVol     $07
00086FFC 8006                       	dc.b	nRst, $06
00086FFE E101                       	smpsAlterNote       $01
00087000 01                         	dc.b	$01
00087001 E105                       	smpsAlterNote       $05
00087003 01                         	dc.b	$01
00087004 E104                       	smpsAlterNote       $04
00087006 01                         	dc.b	$01
00087007 E1FE                       	smpsAlterNote       $FE
00087009 01                         	dc.b	$01
0008700A ECF5                       	smpsPSGAlterVol     $F5
0008700C 9C07                       	dc.b	nEb2, $07
0008700E EC0B                       	smpsPSGAlterVol     $0B
00087010 8004                       	dc.b	nRst, $04
00087012 ECF5                       	smpsPSGAlterVol     $F5
00087014 9C06                       	dc.b	nEb2, $06
00087016 EC0B                       	smpsPSGAlterVol     $0B
00087018 8007                       	dc.b	nRst, $07
0008701A E105                       	smpsAlterNote       $05
0008701C 0101                       	dc.b	$01, $01
0008701E E102                       	smpsAlterNote       $02
00087020 01                         	dc.b	$01
00087021 E1FB                       	smpsAlterNote       $FB
00087023 01                         	dc.b	$01
00087024 E1FF                       	smpsAlterNote       $FF
00087026 ECF5                       	smpsPSGAlterVol     $F5
00087028 9B06                       	dc.b	nD2, $06
0008702A EC04                       	smpsPSGAlterVol     $04
0008702C E701                       	dc.b	smpsNoAttack, $01
0008702E EC07                       	smpsPSGAlterVol     $07
00087030 8003                       	dc.b	nRst, $03
00087032 ECF5                       	smpsPSGAlterVol     $F5
00087034 9B06                       	dc.b	nD2, $06
00087036 EC04                       	smpsPSGAlterVol     $04
00087038 E701                       	dc.b	smpsNoAttack, $01
0008703A EC07                       	smpsPSGAlterVol     $07
0008703C 8006                       	dc.b	nRst, $06
0008703E E101                       	smpsAlterNote       $01
00087040 01                         	dc.b	$01
00087041 E105                       	smpsAlterNote       $05
00087043 01                         	dc.b	$01
00087044 E101                       	smpsAlterNote       $01
00087046 01                         	dc.b	$01
00087047 E1FC                       	smpsAlterNote       $FC
00087049 01                         	dc.b	$01
0008704A E1FE                       	smpsAlterNote       $FE
0008704C ECF5                       	smpsPSGAlterVol     $F5
0008704E 9C06                       	dc.b	nEb2, $06
00087050 EC04                       	smpsPSGAlterVol     $04
00087052 E701                       	dc.b	smpsNoAttack, $01
00087054 EC07                       	smpsPSGAlterVol     $07
00087056 8003                       	dc.b	nRst, $03
00087058 ECF5                       	smpsPSGAlterVol     $F5
0008705A 9C07                       	dc.b	nEb2, $07
0008705C EC0B                       	smpsPSGAlterVol     $0B
0008705E 8006                       	dc.b	nRst, $06
00087060 E102                       	smpsAlterNote       $02
00087062 01                         	dc.b	$01
00087063 E105                       	smpsAlterNote       $05
00087065 0101                       	dc.b	$01, $01
00087067 E1FF                       	smpsAlterNote       $FF
00087069 01                         	dc.b	$01
0008706A ECF5                       	smpsPSGAlterVol     $F5
0008706C 9B07                       	dc.b	nD2, $07
0008706E EC0B                       	smpsPSGAlterVol     $0B
00087070 8004                       	dc.b	nRst, $04
00087072 ECF5                       	smpsPSGAlterVol     $F5
00087074 9B06                       	dc.b	nD2, $06
00087076 EC04                       	smpsPSGAlterVol     $04
00087078 E701                       	dc.b	smpsNoAttack, $01
0008707A EC07                       	smpsPSGAlterVol     $07
0008707C 8002                       	dc.b	nRst, $02
0008707E E1FC                       	smpsAlterNote       $FC
00087080 ECF5                       	smpsPSGAlterVol     $F5
00087082 9006                       	dc.b	nEb1, $06
00087084 EC04                       	smpsPSGAlterVol     $04
00087086 E701                       	dc.b	smpsNoAttack, $01
00087088 ECFC                       	smpsPSGAlterVol     $FC
0008708A 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008708E EC04                       	smpsPSGAlterVol     $04
00087090 E701                       	dc.b	smpsNoAttack, $01
00087092 E1FD                       	smpsAlterNote       $FD
00087094 ECFC                       	smpsPSGAlterVol     $FC
00087096 9402                       	dc.b	nG1, $02
00087098 EC04                       	smpsPSGAlterVol     $04
0008709A E701                       	dc.b	smpsNoAttack, $01
0008709C E1FE                       	smpsAlterNote       $FE
0008709E ECFC                       	smpsPSGAlterVol     $FC
000870A0 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000870A4 EC04                       	smpsPSGAlterVol     $04
000870A6 E701                       	dc.b	smpsNoAttack, $01
000870A8 EC07                       	smpsPSGAlterVol     $07
000870AA 8008                       	dc.b	nRst, $08
000870AC F6F4 F3                    	smpsJump            music84_Jump06
000870AF                            
000870AF                            ; PSG3 Data
000870AF                            music84_PSG3:
000870AF F500                       	smpsPSGvoice        $00
000870B1 E1FF                       	smpsAlterNote       $FF
000870B3 EC0F                       	smpsPSGAlterVol     $0F
000870B5 803A                       	dc.b	nRst, $3A
000870B7                            
000870B7                            music84_Jump05:
000870B7 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000870C3 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000870CD F6FF E8                    	smpsJump            music84_Jump05
000870D0                            
000870D0                            ; DAC Data
000870D0                            music84_DAC:
000870D0 E0C0                       	smpsPan             panCenter, $00
000870D2 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
000870DE 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
000870EA 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
000870F6 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00087102 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008710E 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008711A 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00087126 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00087132 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008713E 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008714A 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00087156 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00087162 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008716E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008717A 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00087186 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00087192 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008719E 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000871AA 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000871B6 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000871C2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000871CE 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000871DA 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000871E6 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000871F2 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
000871FE 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008720A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00087216 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00087222 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008722E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008723A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00087246 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00087252 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008725E 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008726A 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00087276 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00087282 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008728E 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008729A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000872A6 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000872B2 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000872BE 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000872CA 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000872D6 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000872E2 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000872EE 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000872FA 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00087306 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00087312 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008731E 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008732A 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00087336 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00087342 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008734E 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008735A 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00087366 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00087372 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008737E 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008738A 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00087396 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000873A2 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000873AE 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000873BA 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000873C6 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000873D2 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000873DE 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000873EA 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
000873F6 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00087402 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008740E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008741A 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00087426 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00087432 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008743E 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008744A 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00087456 E0C0                       	smpsPan             panCenter, $00
00087458 F2                         	smpsStop
00087459                            
00087459                            music84_Voices:
00087459                            ;	Voice $00
00087459                            ;	$3D
00087459                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00087459                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00087459                            	smpsVcAlgorithm     $05
00087459                            	smpsVcFeedback      $07
00087459                            	smpsVcUnusedBits    $00
00087459                            	smpsVcDetune        $05, $04, $03, $04
00087459                            	smpsVcCoarseFreq    $01, $01, $01, $01
00087459                            	smpsVcRateScale     $00, $00, $00, $00
00087459                            	smpsVcAttackRate    $11, $11, $11, $11
00087459                            	smpsVcAmpMod        $00, $00, $00, $00
00087459                            	smpsVcDecayRate1    $00, $00, $00, $0A
00087459                            	smpsVcDecayRate2    $00, $00, $00, $0B
00087459                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00087459                            	smpsVcReleaseRate   $08, $08, $08, $07
00087459 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00087472                            
00087472                            ;	Voice $01
00087472                            ;	$04
00087472                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00087472                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00087472                            	smpsVcAlgorithm     $04
00087472                            	smpsVcFeedback      $00
00087472                            	smpsVcUnusedBits    $00
00087472                            	smpsVcDetune        $04, $03, $04, $05
00087472                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00087472                            	smpsVcRateScale     $00, $01, $00, $01
00087472                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00087472                            	smpsVcAmpMod        $00, $00, $00, $00
00087472                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00087472                            	smpsVcDecayRate2    $05, $00, $05, $00
00087472                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00087472                            	smpsVcReleaseRate   $06, $06, $06, $06
00087472 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008748B                            
0008748B                            ;	Voice $02
0008748B                            ;	$30
0008748B                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008748B                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008748B                            	smpsVcAlgorithm     $00
0008748B                            	smpsVcFeedback      $06
0008748B                            	smpsVcUnusedBits    $00
0008748B                            	smpsVcDetune        $04, $02, $00, $06
0008748B                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008748B                            	smpsVcRateScale     $00, $00, $00, $00
0008748B                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008748B                            	smpsVcAmpMod        $00, $00, $00, $00
0008748B                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008748B                            	smpsVcDecayRate2    $01, $01, $01, $01
0008748B                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008748B                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008748B 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000874A4                            
000874A4                            ;	Voice $03
000874A4                            ;	$3A
000874A4                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000874A4                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000874A4                            	smpsVcAlgorithm     $02
000874A4                            	smpsVcFeedback      $07
000874A4                            	smpsVcUnusedBits    $00
000874A4                            	smpsVcDetune        $04, $06, $02, $00
000874A4                            	smpsVcCoarseFreq    $01, $01, $01, $01
000874A4                            	smpsVcRateScale     $00, $00, $00, $00
000874A4                            	smpsVcAttackRate    $18, $19, $14, $14
000874A4                            	smpsVcAmpMod        $00, $00, $00, $00
000874A4                            	smpsVcDecayRate1    $09, $0D, $09, $09
000874A4                            	smpsVcDecayRate2    $00, $00, $00, $00
000874A4                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000874A4                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000874A4 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000874BD                            
000874BD                            ;	Voice $04
000874BD                            ;	$3C
000874BD                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000874BD                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000874BD                            	smpsVcAlgorithm     $04
000874BD                            	smpsVcFeedback      $07
000874BD                            	smpsVcUnusedBits    $00
000874BD                            	smpsVcDetune        $07, $00, $00, $03
000874BD                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000874BD                            	smpsVcRateScale     $00, $00, $00, $00
000874BD                            	smpsVcAttackRate    $10, $1F, $10, $1F
000874BD                            	smpsVcAmpMod        $00, $00, $00, $00
000874BD                            	smpsVcDecayRate1    $00, $00, $00, $00
000874BD                            	smpsVcDecayRate2    $00, $00, $00, $00
000874BD                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000874BD                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000874BD 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000874D6                            
000874D6                            ;	Voice $05
000874D6                            ;	$38
000874D6                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000874D6                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000874D6                            	smpsVcAlgorithm     $00
000874D6                            	smpsVcFeedback      $07
000874D6                            	smpsVcUnusedBits    $00
000874D6                            	smpsVcDetune        $04, $06, $02, $00
000874D6                            	smpsVcCoarseFreq    $01, $01, $01, $00
000874D6                            	smpsVcRateScale     $00, $00, $00, $00
000874D6                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000874D6                            	smpsVcAmpMod        $00, $00, $00, $00
000874D6                            	smpsVcDecayRate1    $00, $03, $00, $17
000874D6                            	smpsVcDecayRate2    $00, $08, $08, $0B
000874D6                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000874D6                            	smpsVcReleaseRate   $08, $05, $05, $05
000874D6 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000874EF                            
000874EF                            
000874F0 00                         		even
000874F0                            Music85:	incbin	sound\glass2.bin
0008B700                            		even
0008B700                            Music86:	incbin	sound\music86.bin
0008F258 00                         		even
0008F258                            Music87:	include	sound\music87.asm
0008F258                            triple_Header:
0008F258 =00000001                  smpsHeaderStartSong = 1
0008F258 0000                       	smpsHeaderVoice     triple_Voices
0008F25A 0501                       	smpsHeaderChan      $05, $01
0008F25C 0200                       	smpsHeaderTempo     $02, $00
0008F25E                            
0008F262 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
0008F266 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0008F26A 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0008F26E 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0008F272 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0008F278                            
0008F278                            ; DAC Data
0008F278                            triple_DAC:
0008F278 E0C0                       	smpsPan             panCenter, $00
0008F27A 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0008F280                            
0008F280                            triple_Loop01:
0008F280 8282 82                    	dc.b	dSnare, dSnare, dSnare
0008F283                            
0008F283                            triple_Loop00:
0008F283 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0008F28F 06                         	dc.b	$06
0008F290 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0008F295 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0008F2A1 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0008F2A8 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0008F2AD 0303 1B                    	dc.b	$03, $03, $1B
0008F2B0 E0C0                       	smpsPan             panCenter, $00
0008F2B2 F6FF C4                    	smpsJump triple_DAC
0008F2B5                            
0008F2B5                            ; FM1 Data
0008F2B5                            triple_FM1:
0008F2B5 E0C0                       	smpsPan             panCenter, $00
0008F2B9 8018                       	dc.b	nRst, $18
0008F2BB                            
0008F2BB                            triple_Loop0B:
0008F2BB AC06 B8                    	dc.b	nG3, $06, nG4
0008F2BE F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0008F2C3                            
0008F2C3                            triple_Loop0C:
0008F2C3 A7B3                       	dc.b	nD3, nD4
0008F2C5 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
0008F2CA                            
0008F2CA                            triple_Loop0D:
0008F2CA A9B5                       	dc.b	nE3, nE4
0008F2CC F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0008F2D1 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0008F2D9 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0008F2DE A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
0008F2EA 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0008F2F6 AD                         	dc.b	nAb3
0008F2F7 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0008F2FC 8018                       	dc.b	nRst, $18
0008F2FE E0C0                       	smpsPan             panCenter, $00
0008F302 F6FF B1                    	smpsJump triple_FM1
0008F305                            
0008F305                            ; FM2 Data
0008F305                            triple_FM2:
0008F305 E0C0                       	smpsPan             panCenter, $00
0008F309 8018                       	dc.b	nRst, $18
0008F30B                            
0008F30B                            triple_Loop07:
0008F30B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F317 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F323 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0008F328 8003                       	dc.b	nRst, $03
0008F32A                            
0008F32A                            triple_Loop08:
0008F32A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F330 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0008F335 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0008F33B                            
0008F33B                            triple_Loop09:
0008F33B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F347 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F353 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0008F358 8003                       	dc.b	nRst, $03
0008F35A                            
0008F35A                            triple_Loop0A:
0008F35A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F360 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0008F365 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0008F36B E0C0                       	smpsPan             panCenter, $00
0008F36F F6FF 94                    	smpsJump triple_FM2
0008F372                            
0008F372                            ; FM3 Data
0008F372                            triple_FM3:
0008F372 E0C0                       	smpsPan             panCenter, $00
0008F376 8018                       	dc.b	nRst, $18
0008F378                            
0008F378                            triple_Loop06:
0008F378 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0008F37F F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0008F384 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0008F390 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0008F39C C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0008F39F F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0008F3A4 8018                       	dc.b	nRst, $18
0008F3A6 E0C0                       	smpsPan             panCenter, $00
0008F3AA F6FF C6                    	smpsJump triple_FM3
0008F3AD                            
0008F3AD                            ; FM4 Data
0008F3AD                            triple_FM4:
0008F3AD E103                       	smpsAlterNote       $03
0008F3B1 E0C0                       	smpsPan             panCenter, $00
0008F3B3 8018                       	dc.b	nRst, $18
0008F3B5                            
0008F3B5                            triple_Loop02:
0008F3B5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F3C1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F3CD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0008F3D2 8003                       	dc.b	nRst, $03
0008F3D4                            
0008F3D4                            triple_Loop03:
0008F3D4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F3DA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0008F3DF B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0008F3E5                            
0008F3E5                            triple_Loop04:
0008F3E5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F3F1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F3FD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0008F402 8003                       	dc.b	nRst, $03
0008F404                            
0008F404                            triple_Loop05:
0008F404 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F40A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0008F40F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0008F415 E0C0                       	smpsPan             panCenter, $00
0008F417 F6FF 94                    	smpsJump triple_FM4
0008F41A                            
0008F41A                            ; PSG1 Data
0008F41A                            triple_PSG1:
0008F41A 8018                       	dc.b	nRst, $18
0008F41C                            
0008F41C                            triple_Loop0E:
0008F41C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F428 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F434 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F440 9402 8004                  	dc.b	nG1, $02, nRst, $04
0008F444 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0008F449 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F455 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F461 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F46D 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008F471                            
0008F471                            triple_Loop0F:
0008F471 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0008F477 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0008F47C 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0008F482                            
0008F482                            triple_Loop10:
0008F482 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F48E 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F49A 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F4A6 9402 8004                  	dc.b	nG1, $02, nRst, $04
0008F4AA F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0008F4AF A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F4BB 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F4C7 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F4D3 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008F4D7                            
0008F4D7                            triple_Loop11:
0008F4D7 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0008F4DD F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0008F4E2 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0008F4E8 F500                       	smpsPSGvoice        $00
0008F4EA F6FF 2E                    	smpsJump triple_PSG1
0008F4ED                            
0008F4ED                            triple_Voices:
0008F4ED                            ;	Voice $00
0008F4ED                            ;	$3A
0008F4ED                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0008F4ED                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0008F4ED                            	smpsVcAlgorithm     $02
0008F4ED                            	smpsVcFeedback      $07
0008F4ED                            	smpsVcUnusedBits    $00
0008F4ED                            	smpsVcDetune        $00, $00, $00, $00
0008F4ED                            	smpsVcCoarseFreq    $01, $01, $07, $01
0008F4ED                            	smpsVcRateScale     $01, $02, $02, $02
0008F4ED                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0008F4ED                            	smpsVcAmpMod        $00, $00, $00, $00
0008F4ED                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0008F4ED                            	smpsVcDecayRate2    $00, $00, $00, $00
0008F4ED                            	smpsVcDecayLevel    $00, $01, $0F, $01
0008F4ED                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0008F4ED 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0008F506                            
0008F506                            ;	Voice $01
0008F506                            ;	$20
0008F506                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0008F506                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0008F506                            	smpsVcAlgorithm     $00
0008F506                            	smpsVcFeedback      $04
0008F506                            	smpsVcUnusedBits    $00
0008F506                            	smpsVcDetune        $00, $00, $03, $07
0008F506                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0008F506                            	smpsVcRateScale     $03, $03, $03, $02
0008F506                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0008F506                            	smpsVcAmpMod        $00, $00, $00, $00
0008F506                            	smpsVcDecayRate1    $04, $04, $0A, $10
0008F506                            	smpsVcDecayRate2    $08, $08, $08, $0F
0008F506                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0008F506                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0008F506 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008F506 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008F520 00                         		even
0008F520                            Music88:	incbin	sound\music88.bin
0008F60E                            		even
0008F60E                            Music89:	incbin	sound\music89.bin
000934D6 00                         		even
000934D6                            Music8A:	incbin	sound\music8A.bin
000936A0                            		even
000936A0                            Music8B:	incbin	sound\music8B.bin
0009393A                            		even
0009393A                            Music8C:	incbin	sound\music8C.bin
00093B56                            		even
00093B56                            Music8D:	incbin	sound\music8D.bin
00093D72                            		even
00093D72                            Music8E:	incbin	sound\fle.bin
000941E0 00                         		even
000941E0                            Music8F:	incbin	sound\music8F.bin
00094820 00                         		even
00094820                            Music90:	incbin	sound\music90.bin
0009497E                            		even
0009497E                            Music91:	incbin	sound\music91.bin
00095C4C                            		even
00095C4C                            Music92:	incbin	sound\music92.bin
00095D76                            		even
00095D76                            Music93:	incbin	sound\music93.bin
00095E44                            		even
00095E44                            ; ---------------------------------------------------------------------------
00095E44                            ; Sound	effect pointers
00095E44                            ; ---------------------------------------------------------------------------
00095E44 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00095E50 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00095E5C 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00095E68 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00095E74 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00095E80 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00095E8C 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00095E98 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00095EA4 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00095EB0 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00095EBC 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00095EC8 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00095ED4 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00095EE0 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00095EEC 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00095EF8 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00095F04 0000 0000                  SoundD0Index:	dc.l SoundD0
00095F08                            SoundA0:	incbin	sound\soundA0.bin
00095F1E                            		even
00095F1E                            SoundA1:	incbin	sound\soundA1.bin
00095F48                            		even
00095F48                            SoundA2:	incbin	sound\soundA2.bin
00095F68                            		even
00095F68                            SoundA3:	incbin	sound\soundA3.bin
00095F9A                            		even
00095F9A                            SoundA4:	incbin	sound\soundA4.bin
00095FD0                            		even
00095FD0                            SoundA5:	incbin	sound\soundA5.bin
00095FFC                            		even
00095FFC                            SoundA6:	incbin	sound\soundA6.bin
0009602C                            		even
0009602C                            SoundA7:	incbin	sound\soundA7.bin
0009605C                            		even
0009605C                            SoundA8:	incbin	sound\soundA8.bin
00096090                            		even
00096090                            SoundA9:	incbin	sound\soundA9.bin
000960A2                            		even
000960A2                            SoundAA:	incbin	sound\soundAA.bin
000960E4                            		even
000960E4                            SoundAB:	incbin	sound\soundAB.bin
00096104                            		even
00096104                            SoundAC:	incbin	sound\soundAC.bin
00096138                            		even
00096138                            SoundAD:	incbin	sound\soundAD.bin
0009616E                            		even
0009616E                            SoundAE:	incbin	sound\soundAE.bin
000961B8                            		even
000961B8                            SoundAF:	incbin	sound\soundAF.bin
000961E6                            		even
000961E6                            SoundB0:	incbin	sound\soundB0.bin
00096218                            		even
00096218                            SoundB1:	incbin	sound\soundB1.bin
00096244                            		even
00096244                            SoundB2:	incbin	sound\soundB2.bin
00096294                            		even
00096294                            SoundB3:	incbin	sound\soundB3.bin
000962DE                            		even
000962DE                            SoundB4:	include	sound\soundB4.asm
000962DE                            SndB4_Bumper_Header:
000962DE =00000001                  smpsHeaderStartSong = 1
000962DE 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000962E0 01                         	smpsHeaderTempoSFX  $01
000962E1 03                         	smpsHeaderChanSFX   $03
000962E2                            
000962F4                            
000962F4                            ; FM5 Data
000962F4                            SndB4_Bumper_FM5:
000962F6 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000962F9                            
000962F9                            ; FM4 Data
000962F9                            SndB4_Bumper_FM4:
000962F9 F2                         	smpsStop
000962FA                            
000962FA                            SndB4_Bumper_Jump00:
000962FA A020                       	dc.b	nG2, $20
000962FC F2                         	smpsStop
000962FD                            
000962FD                            ; FM3 Data
000962FD                            SndB4_Bumper_FM3:
000962FD F2                         	smpsStop
000962FE                            
000962FE                            SndB4_Bumper_Voices:
000962FE                            ;	Voice $00
000962FE                            ;	$32
000962FE                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000962FE                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000962FE                            	smpsVcAlgorithm     $02
000962FE                            	smpsVcFeedback      $06
000962FE                            	smpsVcUnusedBits    $00
000962FE                            	smpsVcDetune        $07, $07, $02, $00
000962FE                            	smpsVcCoarseFreq    $00, $00, $00, $04
000962FE                            	smpsVcRateScale     $00, $00, $00, $00
000962FE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000962FE                            	smpsVcAmpMod        $00, $00, $00, $00
000962FE                            	smpsVcDecayRate1    $08, $00, $00, $09
000962FE                            	smpsVcDecayRate2    $0B, $00, $00, $09
000962FE                            	smpsVcDecayLevel    $00, $00, $00, $00
000962FE                            	smpsVcReleaseRate   $0F, $00, $00, $00
000962FE 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000962FE 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00096318 00                         		even
00096318                            SoundB5:	incbin	sound\soundB5.bin
00096346                            		even
00096346                            SoundB6:	incbin	sound\soundB6.bin
00096364                            		even
00096364                            SoundB7:	incbin	sound\soundB7.bin
000963A0                            		even
000963A0                            SoundB8:	incbin	sound\soundB8.bin
000963BE                            		even
000963BE                            SoundB9:	incbin	sound\soundB9.bin
00096422                            		even
00096422                            SoundBA:	incbin	sound\soundBA.bin
0009644A                            		even
0009644A                            SoundBB:	incbin	sound\soundBB.bin
00096476                            		even
00096476                            SoundBC:	incbin	sound\soundBC.bin
000964B8                            		even
000964B8                            SoundBD:	incbin	sound\soundBD.bin
0009650C                            		even
0009650C                            SoundBE:	incbin	sound\soundBE.bin
00096546                            		even
00096546                            SoundBF:	incbin	sound\soundBF.bin
000965B8                            		even
000965B8                            SoundC0:	incbin	sound\soundC0.bin
000965E6                            		even
000965E6                            SoundC1:	incbin	sound\soundC1.bin
00096620                            		even
00096620                            SoundC2:	incbin	sound\soundC2.bin
0009664A                            		even
0009664A                            SoundC3:	incbin	sound\soundC3.bin
000966C4                            		even
000966C4                            SoundC4:	incbin	sound\soundC4.bin
000966EC                            		even
000966EC                            SoundC5:	incbin	sound\soundC5.bin
00096754                            		even
00096754                            SoundC6:	incbin	sound\soundC6.bin
00096796                            		even
00096796                            SoundC7:	incbin	sound\soundC7.bin
000967C4                            		even
000967C4                            SoundC8:	incbin	sound\soundC8.bin
000967D6                            		even
000967D6                            SoundC9:	incbin	sound\soundC9.bin
00096804                            		even
00096804                            SoundCA:	incbin	sound\soundCA.bin
00096832                            		even
00096832                            SoundCB:	incbin	sound\soundCB.bin
0009687E                            		even
0009687E                            SoundCC:	incbin	sound\soundCC.bin
000968B8                            		even
000968B8                            SoundCD:	incbin	sound\soundCD.bin
000968C6                            		even
000968C6                            SoundCE:	incbin	sound\soundCE.bin
000968F4                            		even
000968F4                            SoundCF:	incbin	sound\soundCF.bin
0009692C                            		even
0009692C                            SoundD0:	incbin	sound\soundD0.bin
00096966                            		even
00096966                            SegaPCM:	incbin	sound\segapcm.bin
0009A5A0                            SegaPCM_end:	even
0009A5A0                            
0009A5A0                            ; end of 'ROM'
0009A5A0                            EndOfRom:
0009A5A0                            
0009A5A0                            
